module name=blur3x3_batch_0079_sample_0017, target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func blur3x3_batch_0079_sample_0017 (input, blur_y) {
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_y.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_y"))
let blur_y = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_y.buffer)
let blur_y.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_y.buffer)
let blur_y.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_y.buffer)
let blur_y.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 1)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.extent.0.required = max(min(min(blur_y.extent.0 + 2, min(blur_y.extent.0, 16) + (((max(blur_y.extent.0, 16) + 1)/16)*16)) + blur_y.min.0, input.extent.0 + input.min.0), input.min.0 + 1) - max(min(min(blur_y.extent.0, 16) + blur_y.min.0, (input.extent.0 + input.min.0) + 15) + -16, input.min.0)
let input.min.0.required = max(min(min(blur_y.extent.0, 16) + blur_y.min.0, (input.extent.0 + input.min.0) + 15) + -16, input.min.0)
let input.extent.1.required = max(min((blur_y.extent.1 + blur_y.min.1) + 2, input.extent.1 + input.min.1), input.min.1 + 1) - max(min(min(blur_y.extent.1, 34) + blur_y.min.1, (input.extent.1 + input.min.1) + 33) + -34, input.min.1)
let input.min.1.required = max(min(min(blur_y.extent.1, 34) + blur_y.min.1, (input.extent.1 + input.min.1) + 33) + -34, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_y.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_y.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 16, 2, (halide_dimension_t *)make_struct((min(blur_y.extent.0, 16) + blur_y.min.0) + -16, max(blur_y.extent.0, 16), 1, 0, (min(blur_y.extent.1, 34) + blur_y.min.1) + -34, max(blur_y.extent.1, 34), max(blur_y.extent.0, 16), 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 16, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_y.type == (uint32)69633, halide_error_bad_type("Output buffer blur_y", blur_y.type, (uint32)69633))
 assert(blur_y.dimensions == 2, halide_error_bad_dimensions("Output buffer blur_y", blur_y.dimensions, 2))
 assert(input.type == (uint32)69633, halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(16 <= blur_y.extent.0, halide_error_access_out_of_bounds("Output buffer blur_y", 0, (min(blur_y.extent.0, 16) + blur_y.min.0) + -16, (blur_y.extent.0 + blur_y.min.0) + -1, blur_y.min.0, (blur_y.extent.0 + blur_y.min.0) + -1))
 assert(34 <= blur_y.extent.1, halide_error_access_out_of_bounds("Output buffer blur_y", 1, (min(blur_y.extent.1, 34) + blur_y.min.1) + -34, (blur_y.extent.1 + blur_y.min.1) + -1, blur_y.min.1, (blur_y.extent.1 + blur_y.min.1) + -1))
 assert((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, (input.extent.0.required + input.min.0.required) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(blur_y.stride.0 == 1, halide_error_constraint_violated("blur_y.stride.0", blur_y.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 let blur_y.total_extent.1 = int64(blur_y.extent.1)*int64(blur_y.extent.0)
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 assert(uint64(blur_y.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", uint64(blur_y.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)), (uint64)2147483647))
 assert(blur_y.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.1, (int64)2147483647))
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(!blur_y.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_y"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(blur_y != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer blur_y"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 produce blur_y {
  let t309 = input.extent.0 + input.min.0
  let t310 = (blur_y.extent.0 + -1)/16
  let t311 = t310*16
  let t312 = t310*32
  let t313 = blur_y.min.1*blur_y.stride.1
  let t314 = blur_y.extent.0 + 17
  let t315 = t314/16
  let t316 = min(max(((input.min.0 - blur_y.min.0) + 15)/16, 0), t315)
  let t317 = t309 - blur_y.min.0
  let t305 = (blur_y.extent.0 % 16) != 0
  let t299 = max(min(min(min(t317 + 13, blur_y.extent.0) + 2, t317), t314)/16, t316)
  let t292 = (blur_y.extent.1 + 33)/34
  let t301 = (blur_y.extent.0 + 15)/16
  let t302 = blur_y.extent.0/16
  let t308 = blur_y.extent.0 - t313
  let t304 = 0 - t313
  parallel (blur_y.s0.y.y, 0, t292) {
   let blur_y.s0.y.yi.base.s = min(blur_y.s0.y.y*34, blur_y.extent.1 + -34)
   let t328 = input.extent.1 + input.min.1
   let t329 = min(blur_y.s0.y.y*34, blur_y.extent.1 + -34)
   let t320 = (input.min.1 - blur_y.min.1) - t329
   let t325 = t328 - t329
   let t321 = blur_y.min.1 + t329
   let t318 = blur_y.min.1 + blur_y.s0.y.yi.base.s
   for (blur_y.s0.y.yi.yi, 0, 2) {
    allocate repeat_edge[uint16 * (t311 + 18) * 8] in Stack
    let t339 = blur_y.s0.y.yi.yi*17
    let t336 = t325 - t339
    let t332 = t321 + t339
    for (blur_y.s0.y.yi.yii.yii, 0, 5) {
     let blur_y.s0.y.min_2.s = min(blur_y.s0.y.yi.yii.yii*4, 13) + t339
     let repeat_edge.s0._1.min_2 = select(0 < blur_y.s0.y.yi.yii.yii, ((blur_y.s0.y.yi.yii.yii*4) + t339) + 2, blur_y.s0.y.min_2.s) + t318
     produce repeat_edge {
      let repeat_edge.s0._1.prologue = min(max(input.min.1, repeat_edge.s0._1.min_2), (min(blur_y.s0.y.yi.yii.yii*4, 13) + (t318 + t339)) + 6)
      let repeat_edge.s0._1.epilogue = min(max(max(input.min.1, repeat_edge.s0._1.min_2), t328), (min(blur_y.s0.y.yi.yii.yii*4, 13) + (t318 + t339)) + 6)
      let t342 = 0 < blur_y.s0.y.yi.yii.yii
      let t343 = blur_y.s0.y.yi.yii.yii*4
      let t340 = min(max(t320 - select(t342, (t339 + t343) + 2, blur_y.s0.y.min_2.s), 0), select(t342, 11 - max(t343, 13), 0) + 6)
      let t341 = repeat_edge.s0._1.min_2 - input.min.1
      for (repeat_edge.s0._1.rebased, 0, t340) {
       let t345 = ((repeat_edge.s0._1.min_2 + repeat_edge.s0._1.rebased) % 8)*(t311 + 18)
       let t344 = (max(min(repeat_edge.s0._1.rebased + t341, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
       for (repeat_edge.s0._0._0, 0, t315) {
        let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*16, blur_y.extent.0 + -14)
        repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t345, 1, 16)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 16), x16(t309 + -1)), x16(input.min.0)) + x16(t344)]
       }
      }
      let t351 = blur_y.s0.y.yi.yii.yii*4
      let t352 = min(t351, 13)
      let t353 = select(0 < blur_y.s0.y.yi.yii.yii, t351 + 2, t352) + t332
      let t354 = (t332 + t352) + 6
      let t346 = min(max(t328, t353), t354) - min(max(input.min.1, t353), t354)
      let t350 = t315 - t299
      let t347 = repeat_edge.s0._1.prologue - input.min.1
      for (repeat_edge.s0._1.rebased, 0, t346) {
       let t356 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 8)*(t311 + 18)
       let t355 = ((repeat_edge.s0._1.rebased + t347)*input.stride.1) - input.min.0
       for (repeat_edge.s0._0._0, 0, t316) {
        let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*16, blur_y.extent.0 + -14)
        repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t356, 1, 16)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 16), x16(t309 + -1)), x16(input.min.0)) + x16(t355)]
       }
       let t359 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 8)*(t311 + 18)
       let t357 = t299 - t316
       let t358 = ((repeat_edge.s0._1.rebased + t347)*input.stride.1) + (blur_y.min.0 - input.min.0)
       for (repeat_edge.s0._0._0.rebased, 0, t357) {
        let t289 = repeat_edge.s0._0._0.rebased + t316
        repeat_edge[ramp((t289*16) + t359, 1, 16) aligned(2, 0)] = input[ramp((t289*16) + t358, 1, 16)]
       }
       let t361 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 8)*(t311 + 18)
       let t360 = ((repeat_edge.s0._1.rebased + t347)*input.stride.1) - input.min.0
       for (repeat_edge.s0._0._0.rebased, 0, t350) {
        let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0.rebased + t299)*16, blur_y.extent.0 + -14)
        repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t361, 1, 16)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 16), x16(t309 + -1)), x16(input.min.0)) + x16(t360)]
       }
      }
      let t364 = 0 < blur_y.s0.y.yi.yii.yii
      let t365 = blur_y.s0.y.yi.yii.yii*4
      let t362 = max((select(t364, 11 - max(t365, 13), 0) + blur_y.min.1) - max(t336 - select(t364, t365 + 2, min(t365, 13)), blur_y.min.1), -6) + 6
      let t363 = repeat_edge.s0._1.epilogue - input.min.1
      for (repeat_edge.s0._1.rebased, 0, t362) {
       let t367 = ((repeat_edge.s0._1.epilogue + repeat_edge.s0._1.rebased) % 8)*(t311 + 18)
       let t366 = (max(min(repeat_edge.s0._1.rebased + t363, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
       for (repeat_edge.s0._0._0, 0, t315) {
        let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*16, blur_y.extent.0 + -14)
        repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t367, 1, 16)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 16), x16(t309 + -1)), x16(input.min.0)) + x16(t366)]
       }
      }
     }
     allocate blur_x[uint16 * (t311 + 16) * 6] in Stack
     produce blur_x {
      consume repeat_edge {
       let t368 = blur_y.s0.y.min_2.s + t318
       for (blur_x.s0.y.rebased, 0, 6) {
        let t369 = ((blur_x.s0.y.rebased + t368) % 8)*(t311 + 18)
        let t370 = (t311 + 16)*blur_x.s0.y.rebased
        for (blur_x.s0.x.x, 0, t301) {
         let t246 = (blur_x.s0.x.x*16) + t369
         blur_x[ramp((blur_x.s0.x.x*16) + t370, 1, 16) aligned(16, 0)] = (repeat_edge[ramp(t246 + 1, 1, 16) aligned(2, 1)] + (repeat_edge[ramp(t246 + 2, 1, 16) aligned(2, 0)] + repeat_edge[ramp(t246, 1, 16) aligned(2, 0)]))/x16((uint16)3)
        }
       }
      }
     }
     consume blur_x {
      let t371 = min(blur_y.s0.y.yi.yii.yii*4, 13) + t339
      for (blur_y.s0.y.yi.yii.yiii, 0, 4) {
       let blur_y.s0.y.yi = blur_y.s0.y.yi.yii.yiii + t371
       let t374 = (t311 + 16)*blur_y.s0.y.yi.yii.yiii
       let t375 = ((blur_y.s0.y.yi + t318)*blur_y.stride.1) + t304
       for (blur_y.s0.x.x, 0, t302) {
        let t247 = (blur_y.s0.x.x*16) + t374
        blur_y[ramp((blur_y.s0.x.x*16) + t375, 1, 16)] = (blur_x[ramp((t247 + t311) + 16, 1, 16) aligned(16, 0)] + (blur_x[ramp((t247 + t312) + 32, 1, 16) aligned(16, 0)] + blur_x[ramp(t247, 1, 16) aligned(16, 0)]))/x16((uint16)3)
       }
       if (t305) {
        let t291 = (t311 + 16)*blur_y.s0.y.yi.yii.yiii
        blur_y[ramp((((blur_y.s0.y.yi + t318)*blur_y.stride.1) + t308) + -16, 1, 16)] = (blur_x[ramp((blur_y.extent.0 + t311) + t291, 1, 16)] + (blur_x[ramp(((blur_y.extent.0 + t312) + t291) + 16, 1, 16)] + blur_x[ramp((blur_y.extent.0 + t291) + -16, 1, 16)]))/x16((uint16)3)
       }
      }
     }
     free blur_x
    }
    free repeat_edge
   }
  }
 }
}
}


