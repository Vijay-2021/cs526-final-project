module name=dilate5x5_batch_0020_sample_0000, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func dilate5x5_batch_0020_sample_0000 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required.s = max(min(min(output.extent.0 + 4, min(output.extent.0, 64) + (((max(output.extent.0, 64) + 3)/64)*64)) + output.min.0, (input.extent.0 + input.min.0) + 2) + -3, input.min.0) - max(min(min(output.extent.0, 64) + output.min.0, (input.extent.0 + input.min.0) + 65) + -66, input.min.0)
let input.min.0.required = max(min(min(output.extent.0, 64) + output.min.0, (input.extent.0 + input.min.0) + 65) + -66, input.min.0)
let input.extent.1.required = max(min(output.extent.1 + output.min.1, input.extent.1 + input.min.1), input.min.1 + 1) - max(min(min(output.extent.1, 108) + output.min.1, (input.extent.1 + input.min.1) + 107) + -108, input.min.1)
let input.min.1.required = max(min(min(output.extent.1, 108) + output.min.1, (input.extent.1 + input.min.1) + 107) + -108, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required.s + 1, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required.s + 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 64) + output.min.0) + -64, max(output.extent.0, 64), 1, 0, (min(output.extent.1, 108) + output.min.1) + -108, max(output.extent.1, 108), max(output.extent.0, 64), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(64 <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 64) + output.min.0) + -64, (output.extent.0 + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(108 <= output.extent.1, halide_error_access_out_of_bounds("Output buffer output", 1, (min(output.extent.1, 108) + output.min.1) + -108, (output.extent.1 + output.min.1) + -1, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 produce output {
  let t141 = input.extent.0 + input.min.0
  let t142 = input.extent.1 + input.min.1
  let t143 = output.min.1*output.stride.1
  let t144 = (output.extent.0 + 67)/64
  let t145 = min(max(((input.min.0 - output.min.0) + 65)/64, 0), t144)
  let t146 = t141 - output.min.0
  let t139 = (output.extent.0 % 64) != 0
  let t134 = max((min(min(min(t146 + 61, output.extent.0) + 2, t146), output.extent.0 + 65) + 2)/64, t145)
  let t127 = (output.extent.1 + 107)/108
  let t137 = output.extent.0/64
  let t128 = ((output.extent.0 + 3)/64)*64
  let t140 = output.extent.0 - t143
  let t138 = 0 - t143
  parallel (output.s0.y.y, 0, t127) {
   let output.s0.y.yi.base.s = min(output.s0.y.y*108, output.extent.1 + -108)
   allocate repeat_edge[uint8 * (t128 + 64) * 32] in Stack
   let t154 = min(output.s0.y.y*108, output.extent.1 + -108)
   let t148 = (input.min.1 - output.min.1) - t154
   let t153 = (output.min.1 - t142) + t154
   let t149 = output.min.1 + t154
   let t147 = output.min.1 + output.s0.y.yi.base.s
   for (output.s0.y.yi.yi.$n, 0, 4) {
    produce repeat_edge {
     let repeat_edge.s0._1.prologue = min(max((output.s0.y.yi.yi.$n*27) + t147, input.min.1), ((output.s0.y.yi.yi.$n*27) + t147) + 27)
     let repeat_edge.s0._1.epilogue = min(max(max((output.s0.y.yi.yi.$n*27) + t147, input.min.1), t142), ((output.s0.y.yi.yi.$n*27) + t147) + 27)
     let t157 = output.s0.y.yi.yi.$n*27
     let t155 = max(min(t148 - t157, 27), 0)
     let t156 = t147 + t157
     for (repeat_edge.s0._1.rebased, 0, t155) {
      let t159 = ((repeat_edge.s0._1.rebased + t156) % 32)*(t128 + 64)
      let t158 = (max(min((t156 - input.min.1) + repeat_edge.s0._1.rebased, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t144) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 60, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t159) + -60, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -62, 1, 64), x64(t141 + -1)), x64(input.min.0)) + x64(t158)]
      }
     }
     let t165 = (output.s0.y.yi.yi.$n*27) + t149
     let t166 = t165 + 27
     let t160 = min(max(t142, t165), t166) - min(max(input.min.1, t165), t166)
     let t164 = t144 - t134
     let t161 = repeat_edge.s0._1.prologue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t160) {
      let t168 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 32)*(t128 + 64)
      let t167 = ((repeat_edge.s0._1.rebased + t161)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t145) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 60, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t168) + -60, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -62, 1, 64), x64(t141 + -1)), x64(input.min.0)) + x64(t167)]
      }
      let t171 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 32)*(t128 + 64)
      let t169 = t134 - t145
      let t170 = ((repeat_edge.s0._1.rebased + t161)*input.stride.1) + (output.min.0 - input.min.0)
      for (repeat_edge.s0._0._0.rebased, 0, t169) {
       let t124 = repeat_edge.s0._0._0.rebased + t145
       repeat_edge[ramp((t124*64) + t171, 1, 64) aligned(64, 0)] = input[ramp(((t124*64) + t170) + -2, 1, 64)]
      }
      let t173 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 32)*(t128 + 64)
      let t172 = ((repeat_edge.s0._1.rebased + t161)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0.rebased, 0, t164) {
       let repeat_edge.s0._0._0i.base.s = min(((repeat_edge.s0._0._0.rebased + t134)*64) + 60, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t173) + -60, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -62, 1, 64), x64(t141 + -1)), x64(input.min.0)) + x64(t172)]
      }
     }
     let t174 = max(min((output.s0.y.yi.yi.$n*27) + t153, 0), -27)
     let t175 = repeat_edge.s0._1.epilogue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t174 + 27) {
      let t177 = ((repeat_edge.s0._1.epilogue + repeat_edge.s0._1.rebased) % 32)*(t128 + 64)
      let t176 = (max(min(repeat_edge.s0._1.rebased + t175, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t144) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 60, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t177) + -60, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -62, 1, 64), x64(t141 + -1)), x64(input.min.0)) + x64(t176)]
      }
     }
    }
    allocate bounded_input[uint8 * (t128 + 64) * 16] in Stack
    consume repeat_edge {
     let t179 = output.s0.y.yi.yi.$n*27
     let t178 = output.s0.y.yi.yi.$n*3
     for (output.s0.y.yi.yii.yii.$n, 0, 3) {
      produce bounded_input {
       let t180 = ((output.s0.y.yi.yii.yii.$n + t178)*9) + t147
       for (bounded_input.s0.y.rebased, 0, 9) {
        let t181 = bounded_input.s0.y.rebased + t180
        for (bounded_input.s0.x.x, 0, t144) {
         bounded_input[ramp(((t181 % 16)*(t128 + 64)) + (bounded_input.s0.x.x*64), 1, 64) aligned(64, 0)] = repeat_edge[ramp(((t181 % 32)*(t128 + 64)) + (bounded_input.s0.x.x*64), 1, 64) aligned(64, 0)]
        }
       }
      }
      consume bounded_input {
       let t182 = (output.s0.y.yi.yii.yii.$n*9) + t179
       for (output.s0.y.yi.yii.yiii, 0, 9) {
        let output.s0.y.yi = output.s0.y.yi.yii.yiii + t182
        let t185 = output.s0.y.yi + t147
        let t183 = (t185 % 16)*(t128 + 64)
        let t184 = (output.stride.1*t185) + t138
        for (output.s0.x.x, 0, t137) {
         let t83 = (output.s0.x.x*64) + t183
         output[ramp((output.s0.x.x*64) + t184, 1, 64)] = max(bounded_input[ramp(t83, 1, 64) aligned(64, 0)], max(bounded_input[ramp(t83 + 1, 1, 64) aligned(64, 1)], max(bounded_input[ramp(t83 + 2, 1, 64) aligned(64, 2)], max(bounded_input[ramp(t83 + 3, 1, 64) aligned(64, 3)], bounded_input[ramp(t83 + 4, 1, 64) aligned(64, 4)]))))
        }
        if (t139) {
         let t85.s = ((output.s0.y.yi + t147) % 16)*(t128 + 64)
         let t126 = output.extent.0 + t85.s
         output[ramp((((output.s0.y.yi + t147)*output.stride.1) + t140) + -64, 1, 64)] = max(bounded_input[ramp(t126 + -64, 1, 64)], max(bounded_input[ramp(t126 + -63, 1, 64)], max(bounded_input[ramp(t126 + -62, 1, 64)], max(bounded_input[ramp(t126 + -61, 1, 64)], bounded_input[ramp(t126 + -60, 1, 64)]))))
        }
       }
      }
     }
    }
    free bounded_input
   }
   free repeat_edge
  }
 }
}
}


