module name=conv3x3a32_batch_0004_sample_0006, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func conv3x3a32_batch_0004_sample_0006 (input, mask, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required.s = max(min(min((min(output.extent.0, 64) + (((max(output.extent.0, 64) + 1)/64)*64)) + -2, output.extent.0) + output.min.0, (input.extent.0 + input.min.0) + -1), input.min.0) - max(min(min(output.extent.0, 64) + output.min.0, (input.extent.0 + input.min.0) + 64) + -65, input.min.0)
let input.min.0.required = max(min(min(output.extent.0, 64) + output.min.0, (input.extent.0 + input.min.0) + 64) + -65, input.min.0)
let input.extent.1.required.s = max(min(output.extent.1 + output.min.1, (input.extent.1 + input.min.1) + -1), input.min.1) - max(min(min(output.extent.1, 108) + output.min.1, (input.extent.1 + input.min.1) + 108) + -109, input.min.1)
let input.min.1.required = max(min(min(output.extent.1, 108) + output.min.1, (input.extent.1 + input.min.1) + 108) + -109, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required.s + 1, 1, 0, input.min.1.required, input.extent.1.required.s + 1, input.extent.0.required.s + 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 64) + output.min.0) + -64, max(output.extent.0, 64), 1, 0, (min(output.extent.1, 108) + output.min.1) + -108, max(output.extent.1, 108), max(output.extent.0, 64), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, input.extent.1.required.s + input.min.1.required, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(64 <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 64) + output.min.0) + -64, (output.extent.0 + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(108 <= output.extent.1, halide_error_access_out_of_bounds("Output buffer output", 1, (min(output.extent.1, 108) + output.min.1) + -108, (output.extent.1 + output.min.1) + -1, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 produce output {
  let t248 = input.extent.0 + input.min.0
  let t249 = input.extent.1 + input.min.1
  let t250 = output.extent.0 + 1
  let t251 = t250/64
  let t252 = t251*-64
  let t253 = t251*64
  let t254 = output.min.1*output.stride.1
  let t255 = (output.extent.0 + 65)/64
  let t256 = min(max((input.min.0 - output.min.0)/64, -1) + 1, t255)
  let t257 = t248 - output.min.0
  let t244 = (output.extent.0 % 64) != 0
  let t238 = max((min(min(min(output.extent.0 + -62, t257), min(t250, t257) + -63), t250)/64) + 1, t256)
  let t230 = (output.extent.1 + 107)/108
  let t241 = output.extent.0/64
  let t247 = output.extent.0 - t254
  let t243 = 0 - t254
  parallel (output.s0.y.y, 0, t230) {
   let output.s0.y.yi.base.s = min(output.s0.y.y*108, output.extent.1 + -108)
   allocate repeat_edge[uint8 * (t253 + 64) * 110]
   produce repeat_edge {
    let repeat_edge.s0._1.prologue = min(max((output.min.1 + output.s0.y.yi.base.s) + -1, input.min.1), (output.min.1 + output.s0.y.yi.base.s) + 109)
    let repeat_edge.s0._1.epilogue = min(max(max((output.min.1 + output.s0.y.yi.base.s) + -1, input.min.1), t249), (output.min.1 + output.s0.y.yi.base.s) + 109)
    let t258 = max(min((input.min.1 - output.min.1) - min(output.s0.y.y*108, output.extent.1 + -108), 109), -1)
    let t259 = (output.min.1 - input.min.1) + output.s0.y.yi.base.s
    for (repeat_edge.s0._1.rebased, 0, t258 + 1) {
     let t261 = (t253 + 64)*repeat_edge.s0._1.rebased
     let t260 = ((max(min(repeat_edge.s0._1.rebased + t259, input.extent.1), 1) + -1)*input.stride.1) - input.min.0
     for (repeat_edge.s0._0._0, 0, t255) {
      let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 62, output.extent.0)
      repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t261) + -62, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -63, 1, 64), x64(t248 + -1)), x64(input.min.0)) + x64(t260)]
     }
    }
    let t268 = min(output.s0.y.y*108, output.extent.1 + -108)
    let t269 = output.min.1 + t268
    let t270 = t269 + -1
    let t271 = t269 + 109
    let t262 = min(max(t249, t270), t271) - min(max(input.min.1, t270), t271)
    let t267 = t255 - t238
    let t264 = repeat_edge.s0._1.prologue - input.min.1
    for (repeat_edge.s0._1.rebased, 0, t262) {
     let t273 = ((repeat_edge.s0._1.rebased + t264)*input.stride.1) - input.min.0
     for (repeat_edge.s0._0._0, 0, t256) {
      let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 62, output.extent.0)
      repeat_edge[ramp(((((max(min((input.min.1 - output.min.1) - t268, 109), -1) + repeat_edge.s0._1.rebased) + 1)*(t253 + 64)) + repeat_edge.s0._0._0i.base.s) + -62, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -63, 1, 64), x64(t248 + -1)), x64(input.min.0)) + x64(t273)]
     }
     let t274 = t238 - t256
     let t276 = ((repeat_edge.s0._1.rebased + t264)*input.stride.1) + (output.min.0 - input.min.0)
     for (repeat_edge.s0._0._0.rebased, 0, t274) {
      let t223 = repeat_edge.s0._0._0.rebased + t256
      repeat_edge[ramp((((max(min((input.min.1 - output.min.1) - t268, 109), -1) + repeat_edge.s0._1.rebased) + 1)*(t253 + 64)) + (t223*64), 1, 64) aligned(64, 0)] = input[ramp(((t223*64) + t276) + -1, 1, 64)]
     }
     let t278 = ((repeat_edge.s0._1.rebased + t264)*input.stride.1) - input.min.0
     for (repeat_edge.s0._0._0.rebased, 0, t267) {
      let repeat_edge.s0._0._0i.base.s = min(((repeat_edge.s0._0._0.rebased + t238)*64) + 62, output.extent.0)
      repeat_edge[ramp(((((max(min((input.min.1 - output.min.1) - t268, 109), -1) + repeat_edge.s0._1.rebased) + 1)*(t253 + 64)) + repeat_edge.s0._0._0i.base.s) + -62, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -63, 1, 64), x64(t248 + -1)), x64(input.min.0)) + x64(t278)]
     }
    }
    let t282 = min(output.s0.y.y*108, output.extent.1 + -108)
    let t279 = max(min((output.min.1 - t249) + t282, 1), -109)
    let t281 = repeat_edge.s0._1.epilogue - input.min.1
    for (repeat_edge.s0._1.rebased, 0, t279 + 109) {
     let t284 = (max(min(repeat_edge.s0._1.rebased + t281, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
     for (repeat_edge.s0._0._0, 0, t255) {
      let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 62, output.extent.0)
      repeat_edge[ramp(((((max(min((t249 - output.min.1) - t282, 109), -1) + repeat_edge.s0._1.rebased) + 1)*(t253 + 64)) + repeat_edge.s0._0._0i.base.s) + -62, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -63, 1, 64), x64(t248 + -1)), x64(input.min.0)) + x64(t284)]
     }
    }
   }
   consume repeat_edge {
    let t285 = output.min.1 + output.s0.y.yi.base.s
    for (output.s0.y.yi.yi, 0, 3) {
     allocate input_bounded[uint8 * (t253 + 64) * 38]
     produce input_bounded {
      let t288 = output.s0.y.yi.yi*36
      for (input_bounded.s0.y.rebased, 0, 38) {
       let t291 = t253 + 64
       let t290 = input_bounded.s0.y.rebased*t291
       let t289 = (input_bounded.s0.y.rebased + t288)*t291
       for (input_bounded.s0.x.x, 0, t255) {
        input_bounded[ramp((input_bounded.s0.x.x*64) + t290, 1, 64) aligned(64, 0)] = repeat_edge[ramp((input_bounded.s0.x.x*64) + t289, 1, 64) aligned(64, 0)]
       }
      }
     }
     consume input_bounded {
      let t292 = output.s0.y.yi.yi*36
      for (output.s0.y.yi.yii.yii, 0, 4) {
       let t299 = output.s0.y.yi.yii.yii*9
       let t295 = t292 + t299
       for (output.s0.y.yi.yii.yiii, 0, 9) {
        let output.s0.y.yi = output.s0.y.yi.yii.yiii + t295
        let t300 = ((output.s0.y.yi.yii.yiii + t299) + 1)*(t253 + 64)
        let t301 = ((output.s0.y.yi + t285)*output.stride.1) + t243
        for (output.s0.x.x, 0, t241) {
         let t178 = (output.s0.x.x*64) + t300
         let t227 = t178 + t252
         let t228 = t178 + t253
         output[ramp((output.s0.x.x*64) + t301, 1, 64)] = uint8x64(max(min((int32x64)shift_right((((((((int32x64)widening_add((int16x64)shift_left(int16x64(input_bounded[ramp(t227 + -64, 1, 64)]), x64((uint16)2)), (int16x64)widening_mul(input_bounded[ramp(t227 + -63, 1, 64)], x64((int8)7))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t227 + -62, 1, 64)], x64((int8)10)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t178, 1, 64) aligned(64, 0)], x64((int8)5)))) + int32x64((int16x64)shift_left(int16x64(input_bounded[ramp(t178 + 1, 1, 64) aligned(64, 1)]), x64((uint16)3)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t178 + 2, 1, 64) aligned(64, 2)], x64((int8)11)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t228 + 64, 1, 64) aligned(64, 0)], x64((int8)6)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t228 + 65, 1, 64) aligned(64, 1)], x64((int8)9)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t228 + 66, 1, 64) aligned(64, 2)], x64((int8)12))), x64((uint32)4)), x64(255)), x64(0)))
        }
        if (t244) {
         let t181.s = ((output.s0.y.yi.yii.yiii + t299) + 1)*(t253 + 64)
         let t182 = (output.extent.0 + t252) + t181.s
         let t183 = (output.extent.0 + t253) + t181.s
         let t229 = output.extent.0 + t181.s
         output[ramp((((output.s0.y.yi + t285)*output.stride.1) + t247) + -64, 1, 64)] = uint8x64(max(min((int32x64)shift_right((((((((int32x64)widening_add((int16x64)shift_left(int16x64(input_bounded[ramp(t182 + -128, 1, 64)]), x64((uint16)2)), (int16x64)widening_mul(input_bounded[ramp(t182 + -127, 1, 64)], x64((int8)7))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t182 + -126, 1, 64)], x64((int8)10)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t229 + -64, 1, 64)], x64((int8)5)))) + int32x64((int16x64)shift_left(int16x64(input_bounded[ramp(t229 + -63, 1, 64)]), x64((uint16)3)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t229 + -62, 1, 64)], x64((int8)11)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t183, 1, 64)], x64((int8)6)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t183 + 1, 1, 64)], x64((int8)9)))) + int32x64((int16x64)widening_mul(input_bounded[ramp(t183 + 2, 1, 64)], x64((int8)12))), x64((uint32)4)), x64(255)), x64(0)))
        }
       }
      }
     }
     free input_bounded
    }
   }
   free repeat_edge
  }
 }
}
}


