module name=blur7x7_batch_0050_sample_0000, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func blur7x7_batch_0050_sample_0000 (input, blur_y) {
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_y.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_y"))
let blur_y = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_y.buffer)
let blur_y.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_y.buffer)
let blur_y.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_y.buffer)
let blur_y.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 1)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.extent.0.required = max(min(min(blur_y.extent.0 + 6, min(blur_y.extent.0, 32) + (((max(blur_y.extent.0, 32) + 5)/32)*32)) + blur_y.min.0, input.extent.0 + input.min.0), input.min.0 + 1) - max(min(min(blur_y.extent.0, 32) + blur_y.min.0, (input.extent.0 + input.min.0) + 31) + -32, input.min.0)
let input.min.0.required = max(min(min(blur_y.extent.0, 32) + blur_y.min.0, (input.extent.0 + input.min.0) + 31) + -32, input.min.0)
let input.extent.1.required = max(min((blur_y.extent.1 + blur_y.min.1) + 6, input.extent.1 + input.min.1), input.min.1 + 1) - max(min(min(blur_y.extent.1, 36) + blur_y.min.1, (input.extent.1 + input.min.1) + 35) + -36, input.min.1)
let input.min.1.required = max(min(min(blur_y.extent.1, 36) + blur_y.min.1, (input.extent.1 + input.min.1) + 35) + -36, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_y.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_y.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 16, 2, (halide_dimension_t *)make_struct((min(blur_y.extent.0, 32) + blur_y.min.0) + -32, max(blur_y.extent.0, 32), 1, 0, (min(blur_y.extent.1, 36) + blur_y.min.1) + -36, max(blur_y.extent.1, 36), max(blur_y.extent.0, 32), 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 16, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_y.type == (uint32)69633, halide_error_bad_type("Output buffer blur_y", blur_y.type, (uint32)69633))
 assert(blur_y.dimensions == 2, halide_error_bad_dimensions("Output buffer blur_y", blur_y.dimensions, 2))
 assert(input.type == (uint32)69633, halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(32 <= blur_y.extent.0, halide_error_access_out_of_bounds("Output buffer blur_y", 0, (min(blur_y.extent.0, 32) + blur_y.min.0) + -32, (blur_y.extent.0 + blur_y.min.0) + -1, blur_y.min.0, (blur_y.extent.0 + blur_y.min.0) + -1))
 assert(36 <= blur_y.extent.1, halide_error_access_out_of_bounds("Output buffer blur_y", 1, (min(blur_y.extent.1, 36) + blur_y.min.1) + -36, (blur_y.extent.1 + blur_y.min.1) + -1, blur_y.min.1, (blur_y.extent.1 + blur_y.min.1) + -1))
 assert((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, (input.extent.0.required + input.min.0.required) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(blur_y.stride.0 == 1, halide_error_constraint_violated("blur_y.stride.0", blur_y.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 let blur_y.total_extent.1 = int64(blur_y.extent.1)*int64(blur_y.extent.0)
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 assert(uint64(blur_y.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", uint64(blur_y.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)), (uint64)2147483647))
 assert(blur_y.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.1, (int64)2147483647))
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(!blur_y.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_y"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(blur_y != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer blur_y"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 produce blur_y {
  let t345 = input.extent.0 + input.min.0
  let t346 = blur_y.min.1*blur_y.stride.1
  let t347 = blur_y.extent.0 + 37
  let t348 = t347/32
  let t349 = min(max(((input.min.0 - blur_y.min.0) + 31)/32, 0), t348)
  let t350 = t345 - blur_y.min.0
  let t343 = (blur_y.extent.0 % 32) != 0
  let t339 = max(min(min(min(t350 + 25, blur_y.extent.0) + 6, t350), t347)/32, t349)
  let t333 = (blur_y.extent.1 + 35)/36
  let t341 = blur_y.extent.0/32
  let t344 = blur_y.extent.0 - t346
  let t342 = 0 - t346
  parallel (blur_y.s0.y.y, 0, t333) {
   let blur_y.s0.y.yi.base.s = min(blur_y.s0.y.y*36, blur_y.extent.1 + -36)
   allocate repeat_edge[uint16 * (blur_y.extent.0 + 6) * 16] in Stack
   let t359 = input.extent.1 + input.min.1
   let t360 = min(blur_y.s0.y.y*36, blur_y.extent.1 + -36)
   let t353 = (input.min.1 - blur_y.min.1) - t360
   let t358 = t359 - t360
   let t354 = blur_y.min.1 + t360
   let t351 = blur_y.min.1 + blur_y.s0.y.yi.base.s
   for (blur_y.s0.y.yi.yi.$n.rebased, 0, 5) {
    produce repeat_edge {
     let repeat_edge.s0._1.prologue = min(max((max(blur_y.s0.y.yi.yi.$n.rebased*9, 3) + t351) + -3, input.min.1), (min(blur_y.s0.y.yi.yi.$n.rebased*9, 3) + (max(blur_y.s0.y.yi.yi.$n.rebased*9, 3) + t351)) + 3)
     let repeat_edge.s0._1.epilogue = min(max(max((max(blur_y.s0.y.yi.yi.$n.rebased*9, 3) + t351) + -3, input.min.1), t359), (min(blur_y.s0.y.yi.yi.$n.rebased*9, 3) + (max(blur_y.s0.y.yi.yi.$n.rebased*9, 3) + t351)) + 3)
     let t363 = blur_y.s0.y.yi.yi.$n.rebased*9
     let t364 = max(t363, 3)
     let t361 = min(max(t353 - t364, -3), min(t363, 3) + 3)
     let t362 = t351 + t364
     for (repeat_edge.s0._1.rebased, 0, t361 + 3) {
      let t366 = (((repeat_edge.s0._1.rebased + t362) + 13) % 16)*(blur_y.extent.0 + 6)
      let t365 = ((max(min((t362 - input.min.1) + repeat_edge.s0._1.rebased, input.extent.1 + 2), 3) + -3)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t348) {
       let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*32, blur_y.extent.0 + -26)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t366, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t345 + -1)), x32(input.min.0)) + x32(t365)]
      }
     }
     let t372 = blur_y.s0.y.yi.yi.$n.rebased*9
     let t373 = (max(t372, 3) + t354) + -3
     let t374 = (t354 + t372) + 6
     let t367 = min(max(t359, t373), t374) - min(max(input.min.1, t373), t374)
     let t371 = t348 - t339
     let t368 = repeat_edge.s0._1.prologue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t367) {
      let t376 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 6)
      let t375 = ((repeat_edge.s0._1.rebased + t368)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t349) {
       let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*32, blur_y.extent.0 + -26)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t376, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t345 + -1)), x32(input.min.0)) + x32(t375)]
      }
      let t379 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 6)
      let t377 = t339 - t349
      let t378 = ((repeat_edge.s0._1.rebased + t368)*input.stride.1) + (blur_y.min.0 - input.min.0)
      for (repeat_edge.s0._0._0.rebased, 0, t377) {
       let t317 = repeat_edge.s0._0._0.rebased + t349
       repeat_edge[ramp((t317*32) + t379, 1, 32)] = input[ramp((t317*32) + t378, 1, 32)]
      }
      let t381 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 6)
      let t380 = ((repeat_edge.s0._1.rebased + t368)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0.rebased, 0, t371) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0.rebased + t339)*32, blur_y.extent.0 + -26)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t381, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t345 + -1)), x32(input.min.0)) + x32(t380)]
      }
     }
     let t384 = blur_y.s0.y.yi.yi.$n.rebased*9
     let t382 = max((blur_y.min.1 + t384) - max((max(t384, 3) + blur_y.min.1) + -3, t358), -6)
     let t383 = repeat_edge.s0._1.epilogue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t382 + 6) {
      let t386 = ((repeat_edge.s0._1.epilogue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 6)
      let t385 = (max(min(repeat_edge.s0._1.rebased + t383, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t348) {
       let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*32, blur_y.extent.0 + -26)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t386, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t345 + -1)), x32(input.min.0)) + x32(t385)]
      }
     }
    }
    if (1 <= blur_y.s0.y.yi.yi.$n.rebased) {
     consume repeat_edge {
      let t387 = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
      for (blur_y.s0.x.x, 0, t341) {
       allocate blur_x[uint16 * 256] in Stack
       produce blur_x {
        let t200 = (((t387 + 7) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t200 + 1, 1, 32)] + (repeat_edge[ramp(t200, 1, 32)] + (repeat_edge[ramp(t200 + 2, 1, 32)] + (repeat_edge[ramp(t200 + 3, 1, 32)] + (repeat_edge[ramp(t200 + 4, 1, 32)] + (repeat_edge[ramp(t200 + 6, 1, 32)] + repeat_edge[ramp(t200 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t202 = (((t387 + 8) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t202 + 1, 1, 32)] + (repeat_edge[ramp(t202, 1, 32)] + (repeat_edge[ramp(t202 + 2, 1, 32)] + (repeat_edge[ramp(t202 + 3, 1, 32)] + (repeat_edge[ramp(t202 + 4, 1, 32)] + (repeat_edge[ramp(t202 + 6, 1, 32)] + repeat_edge[ramp(t202 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t204 = (((t387 + 9) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t204 + 1, 1, 32)] + (repeat_edge[ramp(t204, 1, 32)] + (repeat_edge[ramp(t204 + 2, 1, 32)] + (repeat_edge[ramp(t204 + 3, 1, 32)] + (repeat_edge[ramp(t204 + 4, 1, 32)] + (repeat_edge[ramp(t204 + 6, 1, 32)] + repeat_edge[ramp(t204 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t206 = (((t387 + 10) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t206 + 1, 1, 32)] + (repeat_edge[ramp(t206, 1, 32)] + (repeat_edge[ramp(t206 + 2, 1, 32)] + (repeat_edge[ramp(t206 + 3, 1, 32)] + (repeat_edge[ramp(t206 + 4, 1, 32)] + (repeat_edge[ramp(t206 + 6, 1, 32)] + repeat_edge[ramp(t206 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t208 = (((t387 + 11) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t208 + 1, 1, 32)] + (repeat_edge[ramp(t208, 1, 32)] + (repeat_edge[ramp(t208 + 2, 1, 32)] + (repeat_edge[ramp(t208 + 3, 1, 32)] + (repeat_edge[ramp(t208 + 4, 1, 32)] + (repeat_edge[ramp(t208 + 6, 1, 32)] + repeat_edge[ramp(t208 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t210 = (((t387 + 12) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t210 + 1, 1, 32)] + (repeat_edge[ramp(t210, 1, 32)] + (repeat_edge[ramp(t210 + 2, 1, 32)] + (repeat_edge[ramp(t210 + 3, 1, 32)] + (repeat_edge[ramp(t210 + 4, 1, 32)] + (repeat_edge[ramp(t210 + 6, 1, 32)] + repeat_edge[ramp(t210 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t212 = (((t387 + 13) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t212 + 1, 1, 32)] + (repeat_edge[ramp(t212, 1, 32)] + (repeat_edge[ramp(t212 + 2, 1, 32)] + (repeat_edge[ramp(t212 + 3, 1, 32)] + (repeat_edge[ramp(t212 + 4, 1, 32)] + (repeat_edge[ramp(t212 + 6, 1, 32)] + repeat_edge[ramp(t212 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -9)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t215 = (((t387 + 14) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t215 + 1, 1, 32)] + (repeat_edge[ramp(t215, 1, 32)] + (repeat_edge[ramp(t215 + 2, 1, 32)] + (repeat_edge[ramp(t215 + 3, 1, 32)] + (repeat_edge[ramp(t215 + 4, 1, 32)] + (repeat_edge[ramp(t215 + 6, 1, 32)] + repeat_edge[ramp(t215 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -8)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t218 = (((t387 + 15) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t218 + 1, 1, 32)] + (repeat_edge[ramp(t218, 1, 32)] + (repeat_edge[ramp(t218 + 2, 1, 32)] + (repeat_edge[ramp(t218 + 3, 1, 32)] + (repeat_edge[ramp(t218 + 4, 1, 32)] + (repeat_edge[ramp(t218 + 6, 1, 32)] + repeat_edge[ramp(t218 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -7)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t221 = ((t387 % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t221 + 1, 1, 32)] + (repeat_edge[ramp(t221, 1, 32)] + (repeat_edge[ramp(t221 + 2, 1, 32)] + (repeat_edge[ramp(t221 + 3, 1, 32)] + (repeat_edge[ramp(t221 + 4, 1, 32)] + (repeat_edge[ramp(t221 + 6, 1, 32)] + repeat_edge[ramp(t221 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -6)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t224 = (((t387 + 1) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t224 + 1, 1, 32)] + (repeat_edge[ramp(t224, 1, 32)] + (repeat_edge[ramp(t224 + 2, 1, 32)] + (repeat_edge[ramp(t224 + 3, 1, 32)] + (repeat_edge[ramp(t224 + 4, 1, 32)] + (repeat_edge[ramp(t224 + 6, 1, 32)] + repeat_edge[ramp(t224 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -5)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t227 = (((t387 + 2) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t227 + 1, 1, 32)] + (repeat_edge[ramp(t227, 1, 32)] + (repeat_edge[ramp(t227 + 2, 1, 32)] + (repeat_edge[ramp(t227 + 3, 1, 32)] + (repeat_edge[ramp(t227 + 4, 1, 32)] + (repeat_edge[ramp(t227 + 6, 1, 32)] + repeat_edge[ramp(t227 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -4)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t230 = (((t387 + 3) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t230 + 1, 1, 32)] + (repeat_edge[ramp(t230, 1, 32)] + (repeat_edge[ramp(t230 + 2, 1, 32)] + (repeat_edge[ramp(t230 + 3, 1, 32)] + (repeat_edge[ramp(t230 + 4, 1, 32)] + (repeat_edge[ramp(t230 + 6, 1, 32)] + repeat_edge[ramp(t230 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -3)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t233 = (((t387 + 4) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t233 + 1, 1, 32)] + (repeat_edge[ramp(t233, 1, 32)] + (repeat_edge[ramp(t233 + 2, 1, 32)] + (repeat_edge[ramp(t233 + 3, 1, 32)] + (repeat_edge[ramp(t233 + 4, 1, 32)] + (repeat_edge[ramp(t233 + 6, 1, 32)] + repeat_edge[ramp(t233 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -2)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t236 = (((t387 + 5) % 16)*(blur_y.extent.0 + 6)) + (blur_y.s0.x.x*32)
        blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t236 + 1, 1, 32)] + (repeat_edge[ramp(t236, 1, 32)] + (repeat_edge[ramp(t236 + 2, 1, 32)] + (repeat_edge[ramp(t236 + 3, 1, 32)] + (repeat_edge[ramp(t236 + 4, 1, 32)] + (repeat_edge[ramp(t236 + 6, 1, 32)] + repeat_edge[ramp(t236 + 5, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        blur_y[ramp((blur_y.s0.x.x*32) + (((t387 + -1)*blur_y.stride.1) + t342), 1, 32)] = (blur_x[ramp((t387 % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t387 + 5) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t387 + 4) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       free blur_x
      }
      if (t343) {
       allocate blur_x[uint16 * 256] in Stack
       produce blur_x {
        let t238.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t239.s = ((t238.s + 7) % 16)*(blur_y.extent.0 + 6)
        let t318 = blur_y.extent.0 + t239.s
        blur_x[ramp(((t238.s + 7) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t318 + -31, 1, 32)] + (repeat_edge[ramp(t318 + -32, 1, 32)] + (repeat_edge[ramp(t318 + -30, 1, 32)] + (repeat_edge[ramp(t318 + -29, 1, 32)] + (repeat_edge[ramp(t318 + -28, 1, 32)] + (repeat_edge[ramp(t318 + -26, 1, 32)] + repeat_edge[ramp(t318 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t240.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t241.s = ((t240.s + 8) % 16)*(blur_y.extent.0 + 6)
        let t319 = blur_y.extent.0 + t241.s
        blur_x[ramp((t240.s % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t319 + -31, 1, 32)] + (repeat_edge[ramp(t319 + -32, 1, 32)] + (repeat_edge[ramp(t319 + -30, 1, 32)] + (repeat_edge[ramp(t319 + -29, 1, 32)] + (repeat_edge[ramp(t319 + -28, 1, 32)] + (repeat_edge[ramp(t319 + -26, 1, 32)] + repeat_edge[ramp(t319 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t242.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t243.s = ((t242.s + 9) % 16)*(blur_y.extent.0 + 6)
        let t320 = blur_y.extent.0 + t243.s
        blur_x[ramp(((t242.s + 1) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t320 + -31, 1, 32)] + (repeat_edge[ramp(t320 + -32, 1, 32)] + (repeat_edge[ramp(t320 + -30, 1, 32)] + (repeat_edge[ramp(t320 + -29, 1, 32)] + (repeat_edge[ramp(t320 + -28, 1, 32)] + (repeat_edge[ramp(t320 + -26, 1, 32)] + repeat_edge[ramp(t320 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t244.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t245.s = ((t244.s + 10) % 16)*(blur_y.extent.0 + 6)
        let t321 = blur_y.extent.0 + t245.s
        blur_x[ramp(((t244.s + 2) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t321 + -31, 1, 32)] + (repeat_edge[ramp(t321 + -32, 1, 32)] + (repeat_edge[ramp(t321 + -30, 1, 32)] + (repeat_edge[ramp(t321 + -29, 1, 32)] + (repeat_edge[ramp(t321 + -28, 1, 32)] + (repeat_edge[ramp(t321 + -26, 1, 32)] + repeat_edge[ramp(t321 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t246.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t247.s = ((t246.s + 11) % 16)*(blur_y.extent.0 + 6)
        let t322 = blur_y.extent.0 + t247.s
        blur_x[ramp(((t246.s + 3) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t322 + -31, 1, 32)] + (repeat_edge[ramp(t322 + -32, 1, 32)] + (repeat_edge[ramp(t322 + -30, 1, 32)] + (repeat_edge[ramp(t322 + -29, 1, 32)] + (repeat_edge[ramp(t322 + -28, 1, 32)] + (repeat_edge[ramp(t322 + -26, 1, 32)] + repeat_edge[ramp(t322 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t248.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t249.s = ((t248.s + 12) % 16)*(blur_y.extent.0 + 6)
        let t323 = blur_y.extent.0 + t249.s
        blur_x[ramp(((t248.s + 4) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t323 + -31, 1, 32)] + (repeat_edge[ramp(t323 + -32, 1, 32)] + (repeat_edge[ramp(t323 + -30, 1, 32)] + (repeat_edge[ramp(t323 + -29, 1, 32)] + (repeat_edge[ramp(t323 + -28, 1, 32)] + (repeat_edge[ramp(t323 + -26, 1, 32)] + repeat_edge[ramp(t323 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t250.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t251.s = ((t250.s + 13) % 16)*(blur_y.extent.0 + 6)
        let t324 = blur_y.extent.0 + t251.s
        blur_x[ramp(((t250.s + 5) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t324 + -31, 1, 32)] + (repeat_edge[ramp(t324 + -32, 1, 32)] + (repeat_edge[ramp(t324 + -30, 1, 32)] + (repeat_edge[ramp(t324 + -29, 1, 32)] + (repeat_edge[ramp(t324 + -28, 1, 32)] + (repeat_edge[ramp(t324 + -26, 1, 32)] + repeat_edge[ramp(t324 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t252.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t252.s + -9)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp((t252.s % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t252.s + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t252.s + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t252.s + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t252.s + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t252.s + 5) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t252.s + 4) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t253.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t254.s = ((t253.s + 14) % 16)*(blur_y.extent.0 + 6)
        let t325 = blur_y.extent.0 + t254.s
        blur_x[ramp(((t253.s + 6) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t325 + -31, 1, 32)] + (repeat_edge[ramp(t325 + -32, 1, 32)] + (repeat_edge[ramp(t325 + -30, 1, 32)] + (repeat_edge[ramp(t325 + -29, 1, 32)] + (repeat_edge[ramp(t325 + -28, 1, 32)] + (repeat_edge[ramp(t325 + -26, 1, 32)] + repeat_edge[ramp(t325 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t255.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t255.s + -8)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp(((t255.s + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t255.s % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t255.s + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t255.s + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t255.s + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t255.s + 6) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t255.s + 5) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t256.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t257.s = ((t256.s + 15) % 16)*(blur_y.extent.0 + 6)
        let t326 = blur_y.extent.0 + t257.s
        blur_x[ramp(((t256.s + 7) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t326 + -31, 1, 32)] + (repeat_edge[ramp(t326 + -32, 1, 32)] + (repeat_edge[ramp(t326 + -30, 1, 32)] + (repeat_edge[ramp(t326 + -29, 1, 32)] + (repeat_edge[ramp(t326 + -28, 1, 32)] + (repeat_edge[ramp(t326 + -26, 1, 32)] + repeat_edge[ramp(t326 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t258.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t258.s + -7)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp(((t258.s + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t258.s + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t258.s + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t258.s + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t258.s + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t258.s + 7) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t258.s + 6) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t259.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t260.s = (t259.s % 16)*(blur_y.extent.0 + 6)
        let t327 = blur_y.extent.0 + t260.s
        blur_x[ramp((t259.s % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t327 + -31, 1, 32)] + (repeat_edge[ramp(t327 + -32, 1, 32)] + (repeat_edge[ramp(t327 + -30, 1, 32)] + (repeat_edge[ramp(t327 + -29, 1, 32)] + (repeat_edge[ramp(t327 + -28, 1, 32)] + (repeat_edge[ramp(t327 + -26, 1, 32)] + repeat_edge[ramp(t327 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t261.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t261.s + -6)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp(((t261.s + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t261.s + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t261.s + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t261.s + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t261.s + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t261.s % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t261.s + 7) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t262.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t263.s = ((t262.s + 1) % 16)*(blur_y.extent.0 + 6)
        let t328 = blur_y.extent.0 + t263.s
        blur_x[ramp(((t262.s + 1) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t328 + -31, 1, 32)] + (repeat_edge[ramp(t328 + -32, 1, 32)] + (repeat_edge[ramp(t328 + -30, 1, 32)] + (repeat_edge[ramp(t328 + -29, 1, 32)] + (repeat_edge[ramp(t328 + -28, 1, 32)] + (repeat_edge[ramp(t328 + -26, 1, 32)] + repeat_edge[ramp(t328 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t264.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t264.s + -5)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp(((t264.s + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t264.s + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t264.s + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t264.s + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t264.s + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t264.s + 1) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp((t264.s % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t265.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t266.s = ((t265.s + 2) % 16)*(blur_y.extent.0 + 6)
        let t329 = blur_y.extent.0 + t266.s
        blur_x[ramp(((t265.s + 2) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t329 + -31, 1, 32)] + (repeat_edge[ramp(t329 + -32, 1, 32)] + (repeat_edge[ramp(t329 + -30, 1, 32)] + (repeat_edge[ramp(t329 + -29, 1, 32)] + (repeat_edge[ramp(t329 + -28, 1, 32)] + (repeat_edge[ramp(t329 + -26, 1, 32)] + repeat_edge[ramp(t329 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t267.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t267.s + -4)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp(((t267.s + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t267.s + 4) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t267.s + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t267.s + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t267.s % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t267.s + 2) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t267.s + 1) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t268.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t269.s = ((t268.s + 3) % 16)*(blur_y.extent.0 + 6)
        let t330 = blur_y.extent.0 + t269.s
        blur_x[ramp(((t268.s + 3) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t330 + -31, 1, 32)] + (repeat_edge[ramp(t330 + -32, 1, 32)] + (repeat_edge[ramp(t330 + -30, 1, 32)] + (repeat_edge[ramp(t330 + -29, 1, 32)] + (repeat_edge[ramp(t330 + -28, 1, 32)] + (repeat_edge[ramp(t330 + -26, 1, 32)] + repeat_edge[ramp(t330 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t270.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t270.s + -3)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp(((t270.s + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t270.s + 5) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t270.s + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t270.s % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t270.s + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t270.s + 3) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t270.s + 2) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t271.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t272.s = ((t271.s + 4) % 16)*(blur_y.extent.0 + 6)
        let t331 = blur_y.extent.0 + t272.s
        blur_x[ramp(((t271.s + 4) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t331 + -31, 1, 32)] + (repeat_edge[ramp(t331 + -32, 1, 32)] + (repeat_edge[ramp(t331 + -30, 1, 32)] + (repeat_edge[ramp(t331 + -29, 1, 32)] + (repeat_edge[ramp(t331 + -28, 1, 32)] + (repeat_edge[ramp(t331 + -26, 1, 32)] + repeat_edge[ramp(t331 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t273.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t273.s + -2)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp(((t273.s + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t273.s + 6) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp((t273.s % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t273.s + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t273.s + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t273.s + 4) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t273.s + 3) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       produce blur_x {
        let t274.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        let t275.s = ((t274.s + 5) % 16)*(blur_y.extent.0 + 6)
        let t332 = blur_y.extent.0 + t275.s
        blur_x[ramp(((t274.s + 5) % 8)*32, 1, 32) aligned(32, 0)] = (repeat_edge[ramp(t332 + -31, 1, 32)] + (repeat_edge[ramp(t332 + -32, 1, 32)] + (repeat_edge[ramp(t332 + -30, 1, 32)] + (repeat_edge[ramp(t332 + -29, 1, 32)] + (repeat_edge[ramp(t332 + -28, 1, 32)] + (repeat_edge[ramp(t332 + -26, 1, 32)] + repeat_edge[ramp(t332 + -27, 1, 32)]))))))/x32((uint16)7)
       }
       consume blur_x {
        let t276.s = (blur_y.s0.y.yi.yi.$n.rebased*9) + t351
        blur_y[ramp((((t276.s + -1)*blur_y.stride.1) + t344) + -32, 1, 32)] = (blur_x[ramp((t276.s % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t276.s + 7) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t276.s + 1) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t276.s + 2) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t276.s + 3) % 8)*32, 1, 32) aligned(32, 0)] + (blur_x[ramp(((t276.s + 5) % 8)*32, 1, 32) aligned(32, 0)] + blur_x[ramp(((t276.s + 4) % 8)*32, 1, 32) aligned(32, 0)]))))))/x32((uint16)7)
       }
       free blur_x
      }
     }
    }
   }
   free repeat_edge
  }
 }
}
}


