; ModuleID = 'build/test/performance/matmul.bc'
source_filename = "/home/akashk4/598/Halide/src/runtime/halide_buffer_t.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type opaque
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%closure_t = type { i32, i32, i32, i32, i32, i32, i8*, %struct.halide_buffer_t*, i8*, %struct.halide_buffer_t*, i8*, %struct.halide_buffer_t* }

@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [3 x i8] c"p4\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.3 = private constant [3 x i8] c"p5\00", align 32
@2 = private constant i64 0
@3 = private constant i64 2048
@4 = private constant i64 0
@5 = private constant i64 2048
@6 = private constant [4 x i64*] [i64* @2, i64* @3, i64* @4, i64* @5]
@str.4 = private constant [4 x i8] c"f32\00", align 32
@7 = private constant [3 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.3, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.4, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @6, i32 0, i32 0) }]
@str.5 = private constant [97 x i8] c"x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-no_asserts-no_bounds_query-no_runtime-sse41\00", align 64
@f32_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 3, %struct.halide_filter_argument_t* getelementptr inbounds ([3 x %struct.halide_filter_argument_t], [3 x %struct.halide_filter_argument_t]* @7, i32 0, i32 0), i8* getelementptr inbounds ([97 x i8], [97 x i8]* @str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.4, i32 0, i32 0) }

declare i32 @halide_do_par_for(i8*, i32 (i8*, i32, i8*)*, i32, i32, i8* noalias) local_unnamed_addr #0

define i32 @f32(%struct.halide_buffer_t* noalias nocapture readonly %p4.buffer, %struct.halide_buffer_t* noalias nocapture readonly %p5.buffer, %struct.halide_buffer_t* noalias nocapture readonly %f32.buffer) local_unnamed_addr #1 {
entry:
  %0 = alloca %closure_t, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %f32.buffer, i64 0, i32 2
  %1 = load i8*, i8** %host.i, align 8, !tbaa !11
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %f32.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !21
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !22
  %min.i3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %4 = load i32, i32* %min.i3, align 4, !tbaa !22
  %stride.i5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %5 = load i32, i32* %stride.i5, align 4, !tbaa !24
  %host.i6 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %p4.buffer, i64 0, i32 2
  %6 = load i8*, i8** %host.i6, align 8, !tbaa !11
  %dim.i7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %p4.buffer, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i7, align 8, !tbaa !21
  %min.i8 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 0, i32 0
  %8 = load i32, i32* %min.i8, align 4, !tbaa !22
  %min.i12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1, i32 0
  %9 = load i32, i32* %min.i12, align 4, !tbaa !22
  %stride.i14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1, i32 2
  %10 = load i32, i32* %stride.i14, align 4, !tbaa !24
  %host.i15 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %p5.buffer, i64 0, i32 2
  %11 = load i8*, i8** %host.i15, align 8, !tbaa !11
  %dim.i16 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %p5.buffer, i64 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i16, align 8, !tbaa !21
  %min.i17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 0, i32 0
  %13 = load i32, i32* %min.i17, align 4, !tbaa !22
  %min.i21 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 1, i32 0
  %14 = load i32, i32* %min.i21, align 4, !tbaa !22
  %stride.i23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 1, i32 2
  %15 = load i32, i32* %stride.i23, align 4, !tbaa !24
  %16 = mul nsw i32 %15, %14
  %t7332 = add nsw i32 %16, %13
  %17 = mul nsw i32 %10, %9
  %t7333 = add nsw i32 %17, %8
  %18 = mul nsw i32 %5, %4
  %t7334 = add nsw i32 %18, %3
  %19 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 0
  store i32 %5, i32* %19, align 8
  %20 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 1
  store i32 %10, i32* %20, align 4
  %21 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 2
  store i32 %15, i32* %21, align 8
  %22 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 3
  store i32 %t7332, i32* %22, align 4
  %23 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 4
  store i32 %t7333, i32* %23, align 8
  %24 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 5
  store i32 %t7334, i32* %24, align 4
  %25 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 6
  store i8* %1, i8** %25, align 8
  %26 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 7
  %27 = bitcast %struct.halide_buffer_t** %26 to i8**
  store i8* %6, i8** %27, align 8
  %28 = getelementptr inbounds %closure_t, %closure_t* %0, i64 0, i32 8
  store i8* %11, i8** %28, align 8
  %29 = bitcast %closure_t* %0 to i8*
  %30 = call i32 @halide_do_par_for(i8* null, i32 (i8*, i32, i8*)* nonnull @f32.par_for.f32.s0.x.x.v29, i32 0, i32 1849, i8* nonnull %29)
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind
define internal i32 @f32.par_for.f32.s0.x.x.v29(i8* nocapture readnone %__user_context, i32 %f32.s0.x.x.v29, i8* noalias nocapture readonly %closure) #2 {
entry:
  %0 = bitcast i8* %closure to i32*
  %f32.stride.1 = load i32, i32* %0, align 4
  %1 = getelementptr inbounds i8, i8* %closure, i64 4
  %2 = bitcast i8* %1 to i32*
  %p4.stride.1 = load i32, i32* %2, align 4
  %3 = getelementptr inbounds i8, i8* %closure, i64 8
  %4 = bitcast i8* %3 to i32*
  %p5.stride.1 = load i32, i32* %4, align 4
  %5 = getelementptr inbounds i8, i8* %closure, i64 12
  %6 = bitcast i8* %5 to i32*
  %t7332 = load i32, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %closure, i64 16
  %8 = bitcast i8* %7 to i32*
  %t7333 = load i32, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %closure, i64 20
  %10 = bitcast i8* %9 to i32*
  %t7334 = load i32, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %closure, i64 24
  %12 = bitcast i8* %11 to i8**
  %f32 = load i8*, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %closure, i64 32
  %14 = bitcast i8* %13 to i8**
  %p414 = load i8*, i8** %14, align 8
  %15 = getelementptr inbounds i8, i8* %closure, i64 40
  %16 = bitcast i8* %15 to i8**
  %p5 = load i8*, i8** %16, align 8
  %17 = ashr i32 %f32.s0.x.x.v29, 31
  %18 = xor i32 %17, %f32.s0.x.x.v29
  %19 = zext i32 %18 to i64
  %20 = mul nuw i64 %19, 3196254732
  %21 = lshr i64 %20, 37
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %17, %22
  %.neg = mul i32 %23, -43
  %24 = add i32 %.neg, %f32.s0.x.x.v29
  %a16 = mul nsw i32 %24, 48
  %25 = icmp slt i32 %a16, 2000
  %t7339 = select i1 %25, i32 %a16, i32 2000
  %a17 = mul nsw i32 %23, 48
  %26 = icmp slt i32 %a17, 2000
  %t7335 = select i1 %26, i32 %a17, i32 2000
  %t7338 = sub nsw i32 %t7339, %t7334
  %t7337 = sub nsw i32 %t7339, %t7332
  %27 = sext i32 %f32.stride.1 to i64
  %28 = sext i32 %p5.stride.1 to i64
  %29 = shl nsw i64 %28, 4
  %30 = sext i32 %t7337 to i64
  %31 = sext i32 %t7338 to i64
  %32 = sext i32 %t7335 to i64
  %33 = sext i32 %p4.stride.1 to i64
  %34 = sext i32 %t7333 to i64
  br label %"for f32.s0.y.yi.yi"

"for f32.s0.y.yi.yi":                             ; preds = %"consume matrix_mul$2", %entry
  %indvars.iv50 = phi i64 [ 0, %entry ], [ %indvars.iv.next51, %"consume matrix_mul$2" ]
  %35 = shl nsw i64 %indvars.iv50, 2
  %36 = add nsw i64 %35, %32
  %37 = trunc i64 %36 to i32
  %38 = or i32 %37, 3
  %39 = mul nsw i32 %38, %p4.stride.1
  %t7343 = sub nsw i32 %39, %t7333
  %40 = or i32 %37, 2
  %41 = mul nsw i32 %40, %p4.stride.1
  %t7342 = sub nsw i32 %41, %t7333
  %42 = or i32 %37, 1
  %43 = mul nsw i32 %42, %p4.stride.1
  %t7341 = sub nsw i32 %43, %t7333
  %44 = mul nsw i64 %36, %33
  %45 = sub nsw i64 %44, %34
  %46 = sext i32 %t7341 to i64
  %47 = sext i32 %t7342 to i64
  %48 = sext i32 %t7343 to i64
  br label %"for matrix_mul$2.s1.r338$x.r338$x"

"for matrix_mul$2.s1.r338$x.r338$x":              ; preds = %"for matrix_mul$2.s1.r338$x.r338$x", %"for f32.s0.y.yi.yi"
  %"matrix_mul$213.sroa.191.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %884, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.174.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %882, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.156.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %880, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.139.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %874, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.122.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %872, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.104.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %870, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.87.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %864, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.70.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %862, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.52.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %860, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.35.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %854, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.18.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %849, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %"matrix_mul$213.sroa.0.1" = phi <16 x i8> [ zeroinitializer, %"for f32.s0.y.yi.yi" ], [ %844, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %indvars.iv = phi i64 [ 0, %"for f32.s0.y.yi.yi" ], [ %indvars.iv.next, %"for matrix_mul$2.s1.r338$x.r338$x" ]
  %49 = mul nsw i64 %29, %indvars.iv
  %50 = add nsw i64 %49, %30
  %51 = getelementptr inbounds i8, i8* %p5, i64 %50
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1, !tbaa !25
  %54 = shl nuw nsw i64 %indvars.iv, 4
  %55 = add nsw i64 %54, %45
  %56 = getelementptr inbounds i8, i8* %p414, i64 %55
  %57 = load i8, i8* %56, align 1, !tbaa !28
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = mul <16 x i8> %59, %53
  %61 = add <16 x i8> %60, %"matrix_mul$213.sroa.0.1"
  %62 = getelementptr inbounds i8, i8* %51, i64 16
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !tbaa !25
  %65 = mul <16 x i8> %64, %59
  %66 = add <16 x i8> %65, %"matrix_mul$213.sroa.18.1"
  %67 = getelementptr inbounds i8, i8* %51, i64 32
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !tbaa !25
  %70 = mul <16 x i8> %69, %59
  %71 = add <16 x i8> %70, %"matrix_mul$213.sroa.35.1"
  %72 = add nsw i64 %54, %46
  %73 = getelementptr inbounds i8, i8* %p414, i64 %72
  %74 = load i8, i8* %73, align 1, !tbaa !28
  %75 = insertelement <16 x i8> undef, i8 %74, i32 0
  %76 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> zeroinitializer
  %77 = mul <16 x i8> %76, %53
  %78 = add <16 x i8> %77, %"matrix_mul$213.sroa.52.1"
  %79 = mul <16 x i8> %76, %64
  %80 = add <16 x i8> %79, %"matrix_mul$213.sroa.70.1"
  %81 = mul <16 x i8> %76, %69
  %82 = add <16 x i8> %"matrix_mul$213.sroa.87.1", %81
  %83 = add nsw i64 %54, %47
  %84 = getelementptr inbounds i8, i8* %p414, i64 %83
  %85 = load i8, i8* %84, align 1, !tbaa !28
  %86 = insertelement <16 x i8> undef, i8 %85, i32 0
  %87 = shufflevector <16 x i8> %86, <16 x i8> undef, <16 x i32> zeroinitializer
  %88 = mul <16 x i8> %87, %53
  %89 = add <16 x i8> %88, %"matrix_mul$213.sroa.104.1"
  %90 = mul <16 x i8> %87, %64
  %91 = add <16 x i8> %90, %"matrix_mul$213.sroa.122.1"
  %92 = mul <16 x i8> %87, %69
  %93 = add <16 x i8> %"matrix_mul$213.sroa.139.1", %92
  %94 = add nsw i64 %54, %48
  %95 = getelementptr inbounds i8, i8* %p414, i64 %94
  %96 = load i8, i8* %95, align 1, !tbaa !28
  %97 = insertelement <16 x i8> undef, i8 %96, i32 0
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <16 x i32> zeroinitializer
  %99 = mul <16 x i8> %98, %53
  %100 = add <16 x i8> %99, %"matrix_mul$213.sroa.156.1"
  %101 = mul <16 x i8> %98, %64
  %102 = add <16 x i8> %101, %"matrix_mul$213.sroa.174.1"
  %103 = mul <16 x i8> %98, %69
  %104 = add <16 x i8> %"matrix_mul$213.sroa.191.1", %103
  %105 = or i64 %54, 1
  %106 = mul nsw i64 %105, %28
  %107 = add nsw i64 %106, %30
  %108 = getelementptr inbounds i8, i8* %p5, i64 %107
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !tbaa !25
  %111 = getelementptr inbounds i8, i8* %56, i64 1
  %112 = load i8, i8* %111, align 1, !tbaa !28
  %113 = insertelement <16 x i8> undef, i8 %112, i32 0
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> zeroinitializer
  %115 = mul <16 x i8> %114, %110
  %116 = add <16 x i8> %115, %61
  %117 = getelementptr inbounds i8, i8* %108, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1, !tbaa !25
  %120 = mul <16 x i8> %119, %114
  %121 = add <16 x i8> %120, %66
  %122 = getelementptr inbounds i8, i8* %108, i64 32
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1, !tbaa !25
  %125 = mul <16 x i8> %124, %114
  %126 = add <16 x i8> %125, %71
  %127 = getelementptr inbounds i8, i8* %73, i64 1
  %128 = load i8, i8* %127, align 1, !tbaa !28
  %129 = insertelement <16 x i8> undef, i8 %128, i32 0
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> zeroinitializer
  %131 = mul <16 x i8> %130, %110
  %132 = add <16 x i8> %131, %78
  %133 = mul <16 x i8> %130, %119
  %134 = add <16 x i8> %133, %80
  %135 = mul <16 x i8> %130, %124
  %136 = add <16 x i8> %135, %82
  %137 = getelementptr inbounds i8, i8* %84, i64 1
  %138 = load i8, i8* %137, align 1, !tbaa !28
  %139 = insertelement <16 x i8> undef, i8 %138, i32 0
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> zeroinitializer
  %141 = mul <16 x i8> %140, %110
  %142 = add <16 x i8> %141, %89
  %143 = mul <16 x i8> %140, %119
  %144 = add <16 x i8> %143, %91
  %145 = mul <16 x i8> %140, %124
  %146 = add <16 x i8> %145, %93
  %147 = getelementptr inbounds i8, i8* %95, i64 1
  %148 = load i8, i8* %147, align 1, !tbaa !28
  %149 = insertelement <16 x i8> undef, i8 %148, i32 0
  %150 = shufflevector <16 x i8> %149, <16 x i8> undef, <16 x i32> zeroinitializer
  %151 = mul <16 x i8> %150, %110
  %152 = add <16 x i8> %151, %100
  %153 = mul <16 x i8> %150, %119
  %154 = add <16 x i8> %153, %102
  %155 = mul <16 x i8> %150, %124
  %156 = add <16 x i8> %155, %104
  %157 = or i64 %54, 2
  %158 = mul nsw i64 %157, %28
  %159 = add nsw i64 %158, %30
  %160 = getelementptr inbounds i8, i8* %p5, i64 %159
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1, !tbaa !25
  %163 = getelementptr inbounds i8, i8* %56, i64 2
  %164 = load i8, i8* %163, align 1, !tbaa !28
  %165 = insertelement <16 x i8> undef, i8 %164, i32 0
  %166 = shufflevector <16 x i8> %165, <16 x i8> undef, <16 x i32> zeroinitializer
  %167 = mul <16 x i8> %166, %162
  %168 = add <16 x i8> %167, %116
  %169 = getelementptr inbounds i8, i8* %160, i64 16
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1, !tbaa !25
  %172 = mul <16 x i8> %171, %166
  %173 = add <16 x i8> %172, %121
  %174 = getelementptr inbounds i8, i8* %160, i64 32
  %175 = bitcast i8* %174 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1, !tbaa !25
  %177 = mul <16 x i8> %176, %166
  %178 = add <16 x i8> %177, %126
  %179 = getelementptr inbounds i8, i8* %73, i64 2
  %180 = load i8, i8* %179, align 1, !tbaa !28
  %181 = insertelement <16 x i8> undef, i8 %180, i32 0
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <16 x i32> zeroinitializer
  %183 = mul <16 x i8> %182, %162
  %184 = add <16 x i8> %183, %132
  %185 = mul <16 x i8> %182, %171
  %186 = add <16 x i8> %185, %134
  %187 = mul <16 x i8> %182, %176
  %188 = add <16 x i8> %187, %136
  %189 = getelementptr inbounds i8, i8* %84, i64 2
  %190 = load i8, i8* %189, align 1, !tbaa !28
  %191 = insertelement <16 x i8> undef, i8 %190, i32 0
  %192 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> zeroinitializer
  %193 = mul <16 x i8> %192, %162
  %194 = add <16 x i8> %193, %142
  %195 = mul <16 x i8> %192, %171
  %196 = add <16 x i8> %195, %144
  %197 = mul <16 x i8> %192, %176
  %198 = add <16 x i8> %197, %146
  %199 = getelementptr inbounds i8, i8* %95, i64 2
  %200 = load i8, i8* %199, align 1, !tbaa !28
  %201 = insertelement <16 x i8> undef, i8 %200, i32 0
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <16 x i32> zeroinitializer
  %203 = mul <16 x i8> %202, %162
  %204 = add <16 x i8> %203, %152
  %205 = mul <16 x i8> %202, %171
  %206 = add <16 x i8> %205, %154
  %207 = mul <16 x i8> %202, %176
  %208 = add <16 x i8> %207, %156
  %209 = or i64 %54, 3
  %210 = mul nsw i64 %209, %28
  %211 = add nsw i64 %210, %30
  %212 = getelementptr inbounds i8, i8* %p5, i64 %211
  %213 = bitcast i8* %212 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1, !tbaa !25
  %215 = getelementptr inbounds i8, i8* %56, i64 3
  %216 = load i8, i8* %215, align 1, !tbaa !28
  %217 = insertelement <16 x i8> undef, i8 %216, i32 0
  %218 = shufflevector <16 x i8> %217, <16 x i8> undef, <16 x i32> zeroinitializer
  %219 = mul <16 x i8> %218, %214
  %220 = add <16 x i8> %219, %168
  %221 = getelementptr inbounds i8, i8* %212, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !tbaa !25
  %224 = mul <16 x i8> %223, %218
  %225 = add <16 x i8> %224, %173
  %226 = getelementptr inbounds i8, i8* %212, i64 32
  %227 = bitcast i8* %226 to <16 x i8>*
  %228 = load <16 x i8>, <16 x i8>* %227, align 1, !tbaa !25
  %229 = mul <16 x i8> %228, %218
  %230 = add <16 x i8> %229, %178
  %231 = getelementptr inbounds i8, i8* %73, i64 3
  %232 = load i8, i8* %231, align 1, !tbaa !28
  %233 = insertelement <16 x i8> undef, i8 %232, i32 0
  %234 = shufflevector <16 x i8> %233, <16 x i8> undef, <16 x i32> zeroinitializer
  %235 = mul <16 x i8> %234, %214
  %236 = add <16 x i8> %235, %184
  %237 = mul <16 x i8> %234, %223
  %238 = add <16 x i8> %237, %186
  %239 = mul <16 x i8> %234, %228
  %240 = add <16 x i8> %239, %188
  %241 = getelementptr inbounds i8, i8* %84, i64 3
  %242 = load i8, i8* %241, align 1, !tbaa !28
  %243 = insertelement <16 x i8> undef, i8 %242, i32 0
  %244 = shufflevector <16 x i8> %243, <16 x i8> undef, <16 x i32> zeroinitializer
  %245 = mul <16 x i8> %244, %214
  %246 = add <16 x i8> %245, %194
  %247 = mul <16 x i8> %244, %223
  %248 = add <16 x i8> %247, %196
  %249 = mul <16 x i8> %244, %228
  %250 = add <16 x i8> %249, %198
  %251 = getelementptr inbounds i8, i8* %95, i64 3
  %252 = load i8, i8* %251, align 1, !tbaa !28
  %253 = insertelement <16 x i8> undef, i8 %252, i32 0
  %254 = shufflevector <16 x i8> %253, <16 x i8> undef, <16 x i32> zeroinitializer
  %255 = mul <16 x i8> %254, %214
  %256 = add <16 x i8> %255, %204
  %257 = mul <16 x i8> %254, %223
  %258 = add <16 x i8> %257, %206
  %259 = mul <16 x i8> %254, %228
  %260 = add <16 x i8> %259, %208
  %261 = or i64 %54, 4
  %262 = mul nsw i64 %261, %28
  %263 = add nsw i64 %262, %30
  %264 = getelementptr inbounds i8, i8* %p5, i64 %263
  %265 = bitcast i8* %264 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 1, !tbaa !25
  %267 = getelementptr inbounds i8, i8* %56, i64 4
  %268 = load i8, i8* %267, align 1, !tbaa !28
  %269 = insertelement <16 x i8> undef, i8 %268, i32 0
  %270 = shufflevector <16 x i8> %269, <16 x i8> undef, <16 x i32> zeroinitializer
  %271 = mul <16 x i8> %270, %266
  %272 = add <16 x i8> %271, %220
  %273 = getelementptr inbounds i8, i8* %264, i64 16
  %274 = bitcast i8* %273 to <16 x i8>*
  %275 = load <16 x i8>, <16 x i8>* %274, align 1, !tbaa !25
  %276 = mul <16 x i8> %275, %270
  %277 = add <16 x i8> %276, %225
  %278 = getelementptr inbounds i8, i8* %264, i64 32
  %279 = bitcast i8* %278 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1, !tbaa !25
  %281 = mul <16 x i8> %280, %270
  %282 = add <16 x i8> %281, %230
  %283 = getelementptr inbounds i8, i8* %73, i64 4
  %284 = load i8, i8* %283, align 1, !tbaa !28
  %285 = insertelement <16 x i8> undef, i8 %284, i32 0
  %286 = shufflevector <16 x i8> %285, <16 x i8> undef, <16 x i32> zeroinitializer
  %287 = mul <16 x i8> %286, %266
  %288 = add <16 x i8> %287, %236
  %289 = mul <16 x i8> %286, %275
  %290 = add <16 x i8> %289, %238
  %291 = mul <16 x i8> %286, %280
  %292 = add <16 x i8> %291, %240
  %293 = getelementptr inbounds i8, i8* %84, i64 4
  %294 = load i8, i8* %293, align 1, !tbaa !28
  %295 = insertelement <16 x i8> undef, i8 %294, i32 0
  %296 = shufflevector <16 x i8> %295, <16 x i8> undef, <16 x i32> zeroinitializer
  %297 = mul <16 x i8> %296, %266
  %298 = add <16 x i8> %297, %246
  %299 = mul <16 x i8> %296, %275
  %300 = add <16 x i8> %299, %248
  %301 = mul <16 x i8> %296, %280
  %302 = add <16 x i8> %301, %250
  %303 = getelementptr inbounds i8, i8* %95, i64 4
  %304 = load i8, i8* %303, align 1, !tbaa !28
  %305 = insertelement <16 x i8> undef, i8 %304, i32 0
  %306 = shufflevector <16 x i8> %305, <16 x i8> undef, <16 x i32> zeroinitializer
  %307 = mul <16 x i8> %306, %266
  %308 = add <16 x i8> %307, %256
  %309 = mul <16 x i8> %306, %275
  %310 = add <16 x i8> %309, %258
  %311 = mul <16 x i8> %306, %280
  %312 = add <16 x i8> %311, %260
  %313 = or i64 %54, 5
  %314 = mul nsw i64 %313, %28
  %315 = add nsw i64 %314, %30
  %316 = getelementptr inbounds i8, i8* %p5, i64 %315
  %317 = bitcast i8* %316 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1, !tbaa !25
  %319 = getelementptr inbounds i8, i8* %56, i64 5
  %320 = load i8, i8* %319, align 1, !tbaa !28
  %321 = insertelement <16 x i8> undef, i8 %320, i32 0
  %322 = shufflevector <16 x i8> %321, <16 x i8> undef, <16 x i32> zeroinitializer
  %323 = mul <16 x i8> %322, %318
  %324 = add <16 x i8> %323, %272
  %325 = getelementptr inbounds i8, i8* %316, i64 16
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !tbaa !25
  %328 = mul <16 x i8> %327, %322
  %329 = add <16 x i8> %328, %277
  %330 = getelementptr inbounds i8, i8* %316, i64 32
  %331 = bitcast i8* %330 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 1, !tbaa !25
  %333 = mul <16 x i8> %332, %322
  %334 = add <16 x i8> %333, %282
  %335 = getelementptr inbounds i8, i8* %73, i64 5
  %336 = load i8, i8* %335, align 1, !tbaa !28
  %337 = insertelement <16 x i8> undef, i8 %336, i32 0
  %338 = shufflevector <16 x i8> %337, <16 x i8> undef, <16 x i32> zeroinitializer
  %339 = mul <16 x i8> %338, %318
  %340 = add <16 x i8> %339, %288
  %341 = mul <16 x i8> %338, %327
  %342 = add <16 x i8> %341, %290
  %343 = mul <16 x i8> %338, %332
  %344 = add <16 x i8> %343, %292
  %345 = getelementptr inbounds i8, i8* %84, i64 5
  %346 = load i8, i8* %345, align 1, !tbaa !28
  %347 = insertelement <16 x i8> undef, i8 %346, i32 0
  %348 = shufflevector <16 x i8> %347, <16 x i8> undef, <16 x i32> zeroinitializer
  %349 = mul <16 x i8> %348, %318
  %350 = add <16 x i8> %349, %298
  %351 = mul <16 x i8> %348, %327
  %352 = add <16 x i8> %351, %300
  %353 = mul <16 x i8> %348, %332
  %354 = add <16 x i8> %353, %302
  %355 = getelementptr inbounds i8, i8* %95, i64 5
  %356 = load i8, i8* %355, align 1, !tbaa !28
  %357 = insertelement <16 x i8> undef, i8 %356, i32 0
  %358 = shufflevector <16 x i8> %357, <16 x i8> undef, <16 x i32> zeroinitializer
  %359 = mul <16 x i8> %358, %318
  %360 = add <16 x i8> %359, %308
  %361 = mul <16 x i8> %358, %327
  %362 = add <16 x i8> %361, %310
  %363 = mul <16 x i8> %358, %332
  %364 = add <16 x i8> %363, %312
  %365 = or i64 %54, 6
  %366 = mul nsw i64 %365, %28
  %367 = add nsw i64 %366, %30
  %368 = getelementptr inbounds i8, i8* %p5, i64 %367
  %369 = bitcast i8* %368 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 1, !tbaa !25
  %371 = getelementptr inbounds i8, i8* %56, i64 6
  %372 = load i8, i8* %371, align 1, !tbaa !28
  %373 = insertelement <16 x i8> undef, i8 %372, i32 0
  %374 = shufflevector <16 x i8> %373, <16 x i8> undef, <16 x i32> zeroinitializer
  %375 = mul <16 x i8> %374, %370
  %376 = add <16 x i8> %375, %324
  %377 = getelementptr inbounds i8, i8* %368, i64 16
  %378 = bitcast i8* %377 to <16 x i8>*
  %379 = load <16 x i8>, <16 x i8>* %378, align 1, !tbaa !25
  %380 = mul <16 x i8> %379, %374
  %381 = add <16 x i8> %380, %329
  %382 = getelementptr inbounds i8, i8* %368, i64 32
  %383 = bitcast i8* %382 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1, !tbaa !25
  %385 = mul <16 x i8> %384, %374
  %386 = add <16 x i8> %385, %334
  %387 = getelementptr inbounds i8, i8* %73, i64 6
  %388 = load i8, i8* %387, align 1, !tbaa !28
  %389 = insertelement <16 x i8> undef, i8 %388, i32 0
  %390 = shufflevector <16 x i8> %389, <16 x i8> undef, <16 x i32> zeroinitializer
  %391 = mul <16 x i8> %390, %370
  %392 = add <16 x i8> %391, %340
  %393 = mul <16 x i8> %390, %379
  %394 = add <16 x i8> %393, %342
  %395 = mul <16 x i8> %390, %384
  %396 = add <16 x i8> %395, %344
  %397 = getelementptr inbounds i8, i8* %84, i64 6
  %398 = load i8, i8* %397, align 1, !tbaa !28
  %399 = insertelement <16 x i8> undef, i8 %398, i32 0
  %400 = shufflevector <16 x i8> %399, <16 x i8> undef, <16 x i32> zeroinitializer
  %401 = mul <16 x i8> %400, %370
  %402 = add <16 x i8> %401, %350
  %403 = mul <16 x i8> %400, %379
  %404 = add <16 x i8> %403, %352
  %405 = mul <16 x i8> %400, %384
  %406 = add <16 x i8> %405, %354
  %407 = getelementptr inbounds i8, i8* %95, i64 6
  %408 = load i8, i8* %407, align 1, !tbaa !28
  %409 = insertelement <16 x i8> undef, i8 %408, i32 0
  %410 = shufflevector <16 x i8> %409, <16 x i8> undef, <16 x i32> zeroinitializer
  %411 = mul <16 x i8> %410, %370
  %412 = add <16 x i8> %411, %360
  %413 = mul <16 x i8> %410, %379
  %414 = add <16 x i8> %413, %362
  %415 = mul <16 x i8> %410, %384
  %416 = add <16 x i8> %415, %364
  %417 = or i64 %54, 7
  %418 = mul nsw i64 %417, %28
  %419 = add nsw i64 %418, %30
  %420 = getelementptr inbounds i8, i8* %p5, i64 %419
  %421 = bitcast i8* %420 to <16 x i8>*
  %422 = load <16 x i8>, <16 x i8>* %421, align 1, !tbaa !25
  %423 = getelementptr inbounds i8, i8* %56, i64 7
  %424 = load i8, i8* %423, align 1, !tbaa !28
  %425 = insertelement <16 x i8> undef, i8 %424, i32 0
  %426 = shufflevector <16 x i8> %425, <16 x i8> undef, <16 x i32> zeroinitializer
  %427 = mul <16 x i8> %426, %422
  %428 = add <16 x i8> %427, %376
  %429 = getelementptr inbounds i8, i8* %420, i64 16
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !tbaa !25
  %432 = mul <16 x i8> %431, %426
  %433 = add <16 x i8> %432, %381
  %434 = getelementptr inbounds i8, i8* %420, i64 32
  %435 = bitcast i8* %434 to <16 x i8>*
  %436 = load <16 x i8>, <16 x i8>* %435, align 1, !tbaa !25
  %437 = mul <16 x i8> %436, %426
  %438 = add <16 x i8> %437, %386
  %439 = getelementptr inbounds i8, i8* %73, i64 7
  %440 = load i8, i8* %439, align 1, !tbaa !28
  %441 = insertelement <16 x i8> undef, i8 %440, i32 0
  %442 = shufflevector <16 x i8> %441, <16 x i8> undef, <16 x i32> zeroinitializer
  %443 = mul <16 x i8> %442, %422
  %444 = add <16 x i8> %443, %392
  %445 = mul <16 x i8> %442, %431
  %446 = add <16 x i8> %445, %394
  %447 = mul <16 x i8> %442, %436
  %448 = add <16 x i8> %447, %396
  %449 = getelementptr inbounds i8, i8* %84, i64 7
  %450 = load i8, i8* %449, align 1, !tbaa !28
  %451 = insertelement <16 x i8> undef, i8 %450, i32 0
  %452 = shufflevector <16 x i8> %451, <16 x i8> undef, <16 x i32> zeroinitializer
  %453 = mul <16 x i8> %452, %422
  %454 = add <16 x i8> %453, %402
  %455 = mul <16 x i8> %452, %431
  %456 = add <16 x i8> %455, %404
  %457 = mul <16 x i8> %452, %436
  %458 = add <16 x i8> %457, %406
  %459 = getelementptr inbounds i8, i8* %95, i64 7
  %460 = load i8, i8* %459, align 1, !tbaa !28
  %461 = insertelement <16 x i8> undef, i8 %460, i32 0
  %462 = shufflevector <16 x i8> %461, <16 x i8> undef, <16 x i32> zeroinitializer
  %463 = mul <16 x i8> %462, %422
  %464 = add <16 x i8> %463, %412
  %465 = mul <16 x i8> %462, %431
  %466 = add <16 x i8> %465, %414
  %467 = mul <16 x i8> %462, %436
  %468 = add <16 x i8> %467, %416
  %469 = or i64 %54, 8
  %470 = mul nsw i64 %469, %28
  %471 = add nsw i64 %470, %30
  %472 = getelementptr inbounds i8, i8* %p5, i64 %471
  %473 = bitcast i8* %472 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 1, !tbaa !25
  %475 = getelementptr inbounds i8, i8* %56, i64 8
  %476 = load i8, i8* %475, align 1, !tbaa !28
  %477 = insertelement <16 x i8> undef, i8 %476, i32 0
  %478 = shufflevector <16 x i8> %477, <16 x i8> undef, <16 x i32> zeroinitializer
  %479 = mul <16 x i8> %478, %474
  %480 = add <16 x i8> %479, %428
  %481 = getelementptr inbounds i8, i8* %472, i64 16
  %482 = bitcast i8* %481 to <16 x i8>*
  %483 = load <16 x i8>, <16 x i8>* %482, align 1, !tbaa !25
  %484 = mul <16 x i8> %483, %478
  %485 = add <16 x i8> %484, %433
  %486 = getelementptr inbounds i8, i8* %472, i64 32
  %487 = bitcast i8* %486 to <16 x i8>*
  %488 = load <16 x i8>, <16 x i8>* %487, align 1, !tbaa !25
  %489 = mul <16 x i8> %488, %478
  %490 = add <16 x i8> %489, %438
  %491 = getelementptr inbounds i8, i8* %73, i64 8
  %492 = load i8, i8* %491, align 1, !tbaa !28
  %493 = insertelement <16 x i8> undef, i8 %492, i32 0
  %494 = shufflevector <16 x i8> %493, <16 x i8> undef, <16 x i32> zeroinitializer
  %495 = mul <16 x i8> %494, %474
  %496 = add <16 x i8> %495, %444
  %497 = mul <16 x i8> %494, %483
  %498 = add <16 x i8> %497, %446
  %499 = mul <16 x i8> %494, %488
  %500 = add <16 x i8> %499, %448
  %501 = getelementptr inbounds i8, i8* %84, i64 8
  %502 = load i8, i8* %501, align 1, !tbaa !28
  %503 = insertelement <16 x i8> undef, i8 %502, i32 0
  %504 = shufflevector <16 x i8> %503, <16 x i8> undef, <16 x i32> zeroinitializer
  %505 = mul <16 x i8> %504, %474
  %506 = add <16 x i8> %505, %454
  %507 = mul <16 x i8> %504, %483
  %508 = add <16 x i8> %507, %456
  %509 = mul <16 x i8> %504, %488
  %510 = add <16 x i8> %509, %458
  %511 = getelementptr inbounds i8, i8* %95, i64 8
  %512 = load i8, i8* %511, align 1, !tbaa !28
  %513 = insertelement <16 x i8> undef, i8 %512, i32 0
  %514 = shufflevector <16 x i8> %513, <16 x i8> undef, <16 x i32> zeroinitializer
  %515 = mul <16 x i8> %514, %474
  %516 = add <16 x i8> %515, %464
  %517 = mul <16 x i8> %514, %483
  %518 = add <16 x i8> %517, %466
  %519 = mul <16 x i8> %514, %488
  %520 = add <16 x i8> %519, %468
  %521 = or i64 %54, 9
  %522 = mul nsw i64 %521, %28
  %523 = add nsw i64 %522, %30
  %524 = getelementptr inbounds i8, i8* %p5, i64 %523
  %525 = bitcast i8* %524 to <16 x i8>*
  %526 = load <16 x i8>, <16 x i8>* %525, align 1, !tbaa !25
  %527 = getelementptr inbounds i8, i8* %56, i64 9
  %528 = load i8, i8* %527, align 1, !tbaa !28
  %529 = insertelement <16 x i8> undef, i8 %528, i32 0
  %530 = shufflevector <16 x i8> %529, <16 x i8> undef, <16 x i32> zeroinitializer
  %531 = mul <16 x i8> %530, %526
  %532 = add <16 x i8> %531, %480
  %533 = getelementptr inbounds i8, i8* %524, i64 16
  %534 = bitcast i8* %533 to <16 x i8>*
  %535 = load <16 x i8>, <16 x i8>* %534, align 1, !tbaa !25
  %536 = mul <16 x i8> %535, %530
  %537 = add <16 x i8> %536, %485
  %538 = getelementptr inbounds i8, i8* %524, i64 32
  %539 = bitcast i8* %538 to <16 x i8>*
  %540 = load <16 x i8>, <16 x i8>* %539, align 1, !tbaa !25
  %541 = mul <16 x i8> %540, %530
  %542 = add <16 x i8> %541, %490
  %543 = getelementptr inbounds i8, i8* %73, i64 9
  %544 = load i8, i8* %543, align 1, !tbaa !28
  %545 = insertelement <16 x i8> undef, i8 %544, i32 0
  %546 = shufflevector <16 x i8> %545, <16 x i8> undef, <16 x i32> zeroinitializer
  %547 = mul <16 x i8> %546, %526
  %548 = add <16 x i8> %547, %496
  %549 = mul <16 x i8> %546, %535
  %550 = add <16 x i8> %549, %498
  %551 = mul <16 x i8> %546, %540
  %551 = mul <16 x i8> %546, %540
  %552 = add <16 x i8> %551, %500
  %553 = getelementptr inbounds i8, i8* %84, i64 9
  %554 = load i8, i8* %553, align 1, !tbaa !28
  %555 = insertelement <16 x i8> undef, i8 %554, i32 0
  %556 = shufflevector <16 x i8> %555, <16 x i8> undef, <16 x i32> zeroinitializer
  %557 = mul <16 x i8> %556, %526
  %558 = add <16 x i8> %557, %506
  %559 = mul <16 x i8> %556, %535
  %560 = add <16 x i8> %559, %508
  %561 = mul <16 x i8> %556, %540
  %562 = add <16 x i8> %561, %510
  %563 = getelementptr inbounds i8, i8* %95, i64 9
  %564 = load i8, i8* %563, align 1, !tbaa !28
  %565 = insertelement <16 x i8> undef, i8 %564, i32 0
  %566 = shufflevector <16 x i8> %565, <16 x i8> undef, <16 x i32> zeroinitializer
  %567 = mul <16 x i8> %566, %526
  %568 = add <16 x i8> %567, %516
  %569 = mul <16 x i8> %566, %535
  %570 = add <16 x i8> %569, %518
  %571 = mul <16 x i8> %566, %540
  %572 = add <16 x i8> %571, %520
  %573 = or i64 %54, 10
  %574 = mul nsw i64 %573, %28
  %575 = add nsw i64 %574, %30
  %576 = getelementptr inbounds i8, i8* %p5, i64 %575
  %577 = bitcast i8* %576 to <16 x i8>*
  %578 = load <16 x i8>, <16 x i8>* %577, align 1, !tbaa !25
  %579 = getelementptr inbounds i8, i8* %56, i64 10
  %580 = load i8, i8* %579, align 1, !tbaa !28
  %581 = insertelement <16 x i8> undef, i8 %580, i32 0
  %582 = shufflevector <16 x i8> %581, <16 x i8> undef, <16 x i32> zeroinitializer
  %583 = mul <16 x i8> %582, %578
  %584 = add <16 x i8> %583, %532
  %585 = getelementptr inbounds i8, i8* %576, i64 16
  %586 = bitcast i8* %585 to <16 x i8>*
  %587 = load <16 x i8>, <16 x i8>* %586, align 1, !tbaa !25
  %588 = mul <16 x i8> %587, %582
  %589 = add <16 x i8> %588, %537
  %590 = getelementptr inbounds i8, i8* %576, i64 32
  %591 = bitcast i8* %590 to <16 x i8>*
  %592 = load <16 x i8>, <16 x i8>* %591, align 1, !tbaa !25
  %593 = mul <16 x i8> %592, %582
  %594 = add <16 x i8> %593, %542
  %595 = getelementptr inbounds i8, i8* %73, i64 10
  %596 = load i8, i8* %595, align 1, !tbaa !28
  %597 = insertelement <16 x i8> undef, i8 %596, i32 0
  %598 = shufflevector <16 x i8> %597, <16 x i8> undef, <16 x i32> zeroinitializer
  %599 = mul <16 x i8> %598, %578
  %600 = add <16 x i8> %599, %548
  %601 = mul <16 x i8> %598, %587
  %602 = add <16 x i8> %601, %550
  %603 = mul <16 x i8> %598, %592
  %604 = add <16 x i8> %603, %552
  %605 = getelementptr inbounds i8, i8* %84, i64 10
  %606 = load i8, i8* %605, align 1, !tbaa !28
  %607 = insertelement <16 x i8> undef, i8 %606, i32 0
  %608 = shufflevector <16 x i8> %607, <16 x i8> undef, <16 x i32> zeroinitializer
  %609 = mul <16 x i8> %608, %578
  %610 = add <16 x i8> %609, %558
  %611 = mul <16 x i8> %608, %587
  %612 = add <16 x i8> %611, %560
  %613 = mul <16 x i8> %608, %592
  %614 = add <16 x i8> %613, %562
  %615 = getelementptr inbounds i8, i8* %95, i64 10
  %616 = load i8, i8* %615, align 1, !tbaa !28
  %617 = insertelement <16 x i8> undef, i8 %616, i32 0
  %618 = shufflevector <16 x i8> %617, <16 x i8> undef, <16 x i32> zeroinitializer
  %619 = mul <16 x i8> %618, %578
  %620 = add <16 x i8> %619, %568
  %621 = mul <16 x i8> %618, %587
  %622 = add <16 x i8> %621, %570
  %623 = mul <16 x i8> %618, %592
  %624 = add <16 x i8> %623, %572
  %625 = or i64 %54, 11
  %626 = mul nsw i64 %625, %28
  %627 = add nsw i64 %626, %30
  %628 = getelementptr inbounds i8, i8* %p5, i64 %627
  %629 = bitcast i8* %628 to <16 x i8>*
  %630 = load <16 x i8>, <16 x i8>* %629, align 1, !tbaa !25
  %631 = getelementptr inbounds i8, i8* %56, i64 11
  %632 = load i8, i8* %631, align 1, !tbaa !28
  %633 = insertelement <16 x i8> undef, i8 %632, i32 0
  %634 = shufflevector <16 x i8> %633, <16 x i8> undef, <16 x i32> zeroinitializer
  %635 = mul <16 x i8> %634, %630
  %636 = add <16 x i8> %635, %584
  %637 = getelementptr inbounds i8, i8* %628, i64 16
  %638 = bitcast i8* %637 to <16 x i8>*
  %639 = load <16 x i8>, <16 x i8>* %638, align 1, !tbaa !25
  %640 = mul <16 x i8> %639, %634
  %641 = add <16 x i8> %640, %589
  %642 = getelementptr inbounds i8, i8* %628, i64 32
  %643 = bitcast i8* %642 to <16 x i8>*
  %644 = load <16 x i8>, <16 x i8>* %643, align 1, !tbaa !25
  %645 = mul <16 x i8> %644, %634
  %646 = add <16 x i8> %645, %594
  %647 = getelementptr inbounds i8, i8* %73, i64 11
  %648 = load i8, i8* %647, align 1, !tbaa !28
  %649 = insertelement <16 x i8> undef, i8 %648, i32 0
  %650 = shufflevector <16 x i8> %649, <16 x i8> undef, <16 x i32> zeroinitializer
  %651 = mul <16 x i8> %650, %630
  %652 = add <16 x i8> %651, %600
  %653 = mul <16 x i8> %650, %639
  %654 = add <16 x i8> %653, %602
  %655 = mul <16 x i8> %650, %644
  %656 = add <16 x i8> %655, %604
  %657 = getelementptr inbounds i8, i8* %84, i64 11
  %658 = load i8, i8* %657, align 1, !tbaa !28
  %659 = insertelement <16 x i8> undef, i8 %658, i32 0
  %660 = shufflevector <16 x i8> %659, <16 x i8> undef, <16 x i32> zeroinitializer
  %661 = mul <16 x i8> %660, %630
  %662 = add <16 x i8> %661, %610
  %663 = mul <16 x i8> %660, %639
  %664 = add <16 x i8> %663, %612
  %665 = mul <16 x i8> %660, %644
  %666 = add <16 x i8> %665, %614
  %667 = getelementptr inbounds i8, i8* %95, i64 11
  %668 = load i8, i8* %667, align 1, !tbaa !28
  %669 = insertelement <16 x i8> undef, i8 %668, i32 0
  %670 = shufflevector <16 x i8> %669, <16 x i8> undef, <16 x i32> zeroinitializer
  %671 = mul <16 x i8> %670, %630
  %672 = add <16 x i8> %671, %620
  %673 = mul <16 x i8> %670, %639
  %674 = add <16 x i8> %673, %622
  %675 = mul <16 x i8> %670, %644
  %676 = add <16 x i8> %675, %624
  %677 = or i64 %54, 12
  %678 = mul nsw i64 %677, %28
  %679 = add nsw i64 %678, %30
  %680 = getelementptr inbounds i8, i8* %p5, i64 %679
  %681 = bitcast i8* %680 to <16 x i8>*
  %682 = load <16 x i8>, <16 x i8>* %681, align 1, !tbaa !25
  %683 = getelementptr inbounds i8, i8* %56, i64 12
  %684 = load i8, i8* %683, align 1, !tbaa !28
  %685 = insertelement <16 x i8> undef, i8 %684, i32 0
  %686 = shufflevector <16 x i8> %685, <16 x i8> undef, <16 x i32> zeroinitializer
  %687 = mul <16 x i8> %686, %682
  %688 = add <16 x i8> %687, %636
  %689 = getelementptr inbounds i8, i8* %680, i64 16
  %690 = bitcast i8* %689 to <16 x i8>*
  %691 = load <16 x i8>, <16 x i8>* %690, align 1, !tbaa !25
  %692 = mul <16 x i8> %691, %686
  %693 = add <16 x i8> %692, %641
  %694 = getelementptr inbounds i8, i8* %680, i64 32
  %695 = bitcast i8* %694 to <16 x i8>*
  %696 = load <16 x i8>, <16 x i8>* %695, align 1, !tbaa !25
  %697 = mul <16 x i8> %696, %686
  %698 = add <16 x i8> %697, %646
  %699 = getelementptr inbounds i8, i8* %73, i64 12
  %700 = load i8, i8* %699, align 1, !tbaa !28
  %701 = insertelement <16 x i8> undef, i8 %700, i32 0
  %702 = shufflevector <16 x i8> %701, <16 x i8> undef, <16 x i32> zeroinitializer
  %703 = mul <16 x i8> %702, %682
  %704 = add <16 x i8> %703, %652
  %705 = mul <16 x i8> %702, %691
  %706 = add <16 x i8> %705, %654
  %707 = mul <16 x i8> %702, %696
  %708 = add <16 x i8> %707, %656
  %709 = getelementptr inbounds i8, i8* %84, i64 12
  %710 = load i8, i8* %709, align 1, !tbaa !28
  %711 = insertelement <16 x i8> undef, i8 %710, i32 0
  %712 = shufflevector <16 x i8> %711, <16 x i8> undef, <16 x i32> zeroinitializer
  %713 = mul <16 x i8> %712, %682
  %714 = add <16 x i8> %713, %662
  %715 = mul <16 x i8> %712, %691
  %716 = add <16 x i8> %715, %664
  %717 = mul <16 x i8> %712, %696
  %718 = add <16 x i8> %717, %666
  %719 = getelementptr inbounds i8, i8* %95, i64 12
  %720 = load i8, i8* %719, align 1, !tbaa !28
  %721 = insertelement <16 x i8> undef, i8 %720, i32 0
  %722 = shufflevector <16 x i8> %721, <16 x i8> undef, <16 x i32> zeroinitializer
  %723 = mul <16 x i8> %722, %682
  %724 = add <16 x i8> %723, %672
  %725 = mul <16 x i8> %722, %691
  %726 = add <16 x i8> %725, %674
  %727 = mul <16 x i8> %722, %696
  %728 = add <16 x i8> %727, %676
  %729 = or i64 %54, 13
  %730 = mul nsw i64 %729, %28
  %731 = add nsw i64 %730, %30
  %732 = getelementptr inbounds i8, i8* %p5, i64 %731
  %733 = bitcast i8* %732 to <16 x i8>*
  %734 = load <16 x i8>, <16 x i8>* %733, align 1, !tbaa !25
  %735 = getelementptr inbounds i8, i8* %56, i64 13
  %736 = load i8, i8* %735, align 1, !tbaa !28
  %737 = insertelement <16 x i8> undef, i8 %736, i32 0
  %738 = shufflevector <16 x i8> %737, <16 x i8> undef, <16 x i32> zeroinitializer
  %739 = mul <16 x i8> %738, %734
  %740 = add <16 x i8> %739, %688
  %741 = getelementptr inbounds i8, i8* %732, i64 16
  %742 = bitcast i8* %741 to <16 x i8>*
  %743 = load <16 x i8>, <16 x i8>* %742, align 1, !tbaa !25
  %744 = mul <16 x i8> %743, %738
  %745 = add <16 x i8> %744, %693
  %746 = getelementptr inbounds i8, i8* %732, i64 32
  %747 = bitcast i8* %746 to <16 x i8>*
  %748 = load <16 x i8>, <16 x i8>* %747, align 1, !tbaa !25
  %749 = mul <16 x i8> %748, %738
  %750 = add <16 x i8> %749, %698
  %751 = getelementptr inbounds i8, i8* %73, i64 13
  %752 = load i8, i8* %751, align 1, !tbaa !28
  %753 = insertelement <16 x i8> undef, i8 %752, i32 0
  %754 = shufflevector <16 x i8> %753, <16 x i8> undef, <16 x i32> zeroinitializer
  %755 = mul <16 x i8> %754, %734
  %756 = add <16 x i8> %755, %704
  %757 = mul <16 x i8> %754, %743
  %758 = add <16 x i8> %757, %706
  %759 = mul <16 x i8> %754, %748
  %760 = add <16 x i8> %759, %708
  %761 = getelementptr inbounds i8, i8* %84, i64 13
  %762 = load i8, i8* %761, align 1, !tbaa !28
  %763 = insertelement <16 x i8> undef, i8 %762, i32 0
  %764 = shufflevector <16 x i8> %763, <16 x i8> undef, <16 x i32> zeroinitializer
  %765 = mul <16 x i8> %764, %734
  %766 = add <16 x i8> %765, %714
  %767 = mul <16 x i8> %764, %743
  %768 = add <16 x i8> %767, %716
  %769 = mul <16 x i8> %764, %748
  %770 = add <16 x i8> %769, %718
  %771 = getelementptr inbounds i8, i8* %95, i64 13
  %772 = load i8, i8* %771, align 1, !tbaa !28
  %773 = insertelement <16 x i8> undef, i8 %772, i32 0
  %774 = shufflevector <16 x i8> %773, <16 x i8> undef, <16 x i32> zeroinitializer
  %775 = mul <16 x i8> %774, %734
  %776 = add <16 x i8> %775, %724
  %777 = mul <16 x i8> %774, %743
  %778 = add <16 x i8> %777, %726
  %779 = mul <16 x i8> %774, %748
  %780 = add <16 x i8> %779, %728
  %781 = or i64 %54, 14
  %782 = mul nsw i64 %781, %28
  %783 = add nsw i64 %782, %30
  %784 = getelementptr inbounds i8, i8* %p5, i64 %783
  %785 = bitcast i8* %784 to <16 x i8>*
  %786 = load <16 x i8>, <16 x i8>* %785, align 1, !tbaa !25
  %787 = getelementptr inbounds i8, i8* %56, i64 14
  %788 = load i8, i8* %787, align 1, !tbaa !28
  %789 = insertelement <16 x i8> undef, i8 %788, i32 0
  %790 = shufflevector <16 x i8> %789, <16 x i8> undef, <16 x i32> zeroinitializer
  %791 = mul <16 x i8> %790, %786
  %792 = add <16 x i8> %791, %740
  %793 = getelementptr inbounds i8, i8* %784, i64 16
  %794 = bitcast i8* %793 to <16 x i8>*
  %795 = load <16 x i8>, <16 x i8>* %794, align 1, !tbaa !25
  %796 = mul <16 x i8> %795, %790
  %797 = add <16 x i8> %796, %745
  %798 = getelementptr inbounds i8, i8* %784, i64 32
  %799 = bitcast i8* %798 to <16 x i8>*
  %800 = load <16 x i8>, <16 x i8>* %799, align 1, !tbaa !25
  %801 = mul <16 x i8> %800, %790
  %802 = add <16 x i8> %801, %750
  %803 = getelementptr inbounds i8, i8* %73, i64 14
  %804 = load i8, i8* %803, align 1, !tbaa !28
  %805 = insertelement <16 x i8> undef, i8 %804, i32 0
  %806 = shufflevector <16 x i8> %805, <16 x i8> undef, <16 x i32> zeroinitializer
  %807 = mul <16 x i8> %806, %786
  %808 = add <16 x i8> %807, %756
  %809 = mul <16 x i8> %806, %795
  %810 = add <16 x i8> %809, %758
  %811 = mul <16 x i8> %806, %800
  %812 = add <16 x i8> %811, %760
  %813 = getelementptr inbounds i8, i8* %84, i64 14
  %814 = load i8, i8* %813, align 1, !tbaa !28
  %815 = insertelement <16 x i8> undef, i8 %814, i32 0
  %816 = shufflevector <16 x i8> %815, <16 x i8> undef, <16 x i32> zeroinitializer
  %817 = mul <16 x i8> %816, %786
  %818 = add <16 x i8> %817, %766
  %819 = mul <16 x i8> %816, %795
  %820 = add <16 x i8> %819, %768
  %821 = mul <16 x i8> %816, %800
  %822 = add <16 x i8> %821, %770
  %823 = getelementptr inbounds i8, i8* %95, i64 14
  %824 = load i8, i8* %823, align 1, !tbaa !28
  %825 = insertelement <16 x i8> undef, i8 %824, i32 0
  %826 = shufflevector <16 x i8> %825, <16 x i8> undef, <16 x i32> zeroinitializer
  %827 = mul <16 x i8> %826, %786
  %828 = add <16 x i8> %827, %776
  %829 = mul <16 x i8> %826, %795
  %830 = add <16 x i8> %829, %778
  %831 = mul <16 x i8> %826, %800
  %832 = add <16 x i8> %831, %780
  %833 = or i64 %54, 15
  %834 = mul nsw i64 %833, %28
  %835 = add nsw i64 %834, %30
  %836 = getelementptr inbounds i8, i8* %p5, i64 %835
  %837 = bitcast i8* %836 to <16 x i8>*
  %838 = load <16 x i8>, <16 x i8>* %837, align 1, !tbaa !25
  %839 = getelementptr inbounds i8, i8* %56, i64 15
  %840 = load i8, i8* %839, align 1, !tbaa !28
  %841 = insertelement <16 x i8> undef, i8 %840, i32 0
  %842 = shufflevector <16 x i8> %841, <16 x i8> undef, <16 x i32> zeroinitializer
  %843 = mul <16 x i8> %842, %838
  %844 = add <16 x i8> %843, %792
  %845 = getelementptr inbounds i8, i8* %836, i64 16
  %846 = bitcast i8* %845 to <16 x i8>*
  %847 = load <16 x i8>, <16 x i8>* %846, align 1, !tbaa !25
  %848 = mul <16 x i8> %847, %842
  %849 = add <16 x i8> %848, %797
  %850 = getelementptr inbounds i8, i8* %836, i64 32
  %851 = bitcast i8* %850 to <16 x i8>*
  %852 = load <16 x i8>, <16 x i8>* %851, align 1, !tbaa !25
  %853 = mul <16 x i8> %852, %842
  %854 = add <16 x i8> %853, %802
  %855 = getelementptr inbounds i8, i8* %73, i64 15
  %856 = load i8, i8* %855, align 1, !tbaa !28
  %857 = insertelement <16 x i8> undef, i8 %856, i32 0
  %858 = shufflevector <16 x i8> %857, <16 x i8> undef, <16 x i32> zeroinitializer
  %859 = mul <16 x i8> %858, %838
  %860 = add <16 x i8> %859, %808
  %861 = mul <16 x i8> %858, %847
  %862 = add <16 x i8> %861, %810
  %863 = mul <16 x i8> %858, %852
  %864 = add <16 x i8> %863, %812
  %865 = getelementptr inbounds i8, i8* %84, i64 15
  %866 = load i8, i8* %865, align 1, !tbaa !28
  %867 = insertelement <16 x i8> undef, i8 %866, i32 0
  %868 = shufflevector <16 x i8> %867, <16 x i8> undef, <16 x i32> zeroinitializer
  %869 = mul <16 x i8> %868, %838
  %870 = add <16 x i8> %869, %818
  %871 = mul <16 x i8> %868, %847
  %872 = add <16 x i8> %871, %820
  %873 = mul <16 x i8> %868, %852
  %874 = add <16 x i8> %873, %822
  %875 = getelementptr inbounds i8, i8* %95, i64 15
  %876 = load i8, i8* %875, align 1, !tbaa !28
  %877 = insertelement <16 x i8> undef, i8 %876, i32 0
  %878 = shufflevector <16 x i8> %877, <16 x i8> undef, <16 x i32> zeroinitializer
  %879 = mul <16 x i8> %878, %838
  %880 = add <16 x i8> %879, %828
  %881 = mul <16 x i8> %878, %847
  %882 = add <16 x i8> %881, %830
  %883 = mul <16 x i8> %878, %852
  %884 = add <16 x i8> %883, %832
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not18 = icmp eq i64 %indvars.iv.next, 128
  br i1 %.not18, label %"consume matrix_mul$2", label %"for matrix_mul$2.s1.r338$x.r338$x"

"consume matrix_mul$2":                           ; preds = %"for matrix_mul$2.s1.r338$x.r338$x"
  %885 = mul nsw i64 %36, %27
  %886 = add nsw i64 %885, %31
  %887 = getelementptr inbounds i8, i8* %f32, i64 %886
  %888 = bitcast i8* %887 to <16 x i8>*
  store <16 x i8> %844, <16 x i8>* %888, align 1, !tbaa !30
  %889 = getelementptr inbounds i8, i8* %887, i64 16
  %890 = bitcast i8* %889 to <16 x i8>*
  store <16 x i8> %849, <16 x i8>* %890, align 1, !tbaa !30
  %891 = getelementptr inbounds i8, i8* %887, i64 32
  %892 = bitcast i8* %891 to <16 x i8>*
  store <16 x i8> %854, <16 x i8>* %892, align 1, !tbaa !30
  %893 = or i64 %36, 1
  %894 = mul nsw i64 %893, %27
  %895 = add nsw i64 %894, %31
  %896 = getelementptr inbounds i8, i8* %f32, i64 %895
  %897 = bitcast i8* %896 to <16 x i8>*
  store <16 x i8> %860, <16 x i8>* %897, align 1, !tbaa !30
  %898 = getelementptr inbounds i8, i8* %896, i64 16
  %899 = bitcast i8* %898 to <16 x i8>*
  store <16 x i8> %862, <16 x i8>* %899, align 1, !tbaa !30
  %900 = getelementptr inbounds i8, i8* %896, i64 32
  %901 = bitcast i8* %900 to <16 x i8>*
  store <16 x i8> %864, <16 x i8>* %901, align 1, !tbaa !30
  %902 = or i64 %36, 2
  %903 = mul nsw i64 %902, %27
  %904 = add nsw i64 %903, %31
  %905 = getelementptr inbounds i8, i8* %f32, i64 %904
  %906 = bitcast i8* %905 to <16 x i8>*
  store <16 x i8> %870, <16 x i8>* %906, align 1, !tbaa !30
  %907 = getelementptr inbounds i8, i8* %905, i64 16
  %908 = bitcast i8* %907 to <16 x i8>*
  store <16 x i8> %872, <16 x i8>* %908, align 1, !tbaa !30
  %909 = getelementptr inbounds i8, i8* %905, i64 32
  %910 = bitcast i8* %909 to <16 x i8>*
  store <16 x i8> %874, <16 x i8>* %910, align 1, !tbaa !30
  %911 = or i64 %36, 3
  %912 = mul nsw i64 %911, %27
  %913 = add nsw i64 %912, %31
  %914 = getelementptr inbounds i8, i8* %f32, i64 %913
  %915 = bitcast i8* %914 to <16 x i8>*
  store <16 x i8> %880, <16 x i8>* %915, align 1, !tbaa !30
  %916 = getelementptr inbounds i8, i8* %914, i64 16
  %917 = bitcast i8* %916 to <16 x i8>*
  store <16 x i8> %882, <16 x i8>* %917, align 1, !tbaa !30
  %918 = getelementptr inbounds i8, i8* %914, i64 32
  %919 = bitcast i8* %918 to <16 x i8>*
  store <16 x i8> %884, <16 x i8>* %919, align 1, !tbaa !30
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %.not19 = icmp eq i64 %indvars.iv.next51, 12
  br i1 %.not19, label %destructor_block, label %"for f32.s0.y.yi.yi"

destructor_block:                                 ; preds = %"consume matrix_mul$2"
  ret i32 0
}

define i32 @f32_argv(i8** nocapture readonly %0) local_unnamed_addr {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = getelementptr i8*, i8** %0, i64 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 8
  %9 = tail call i32 @f32(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5, %struct.halide_buffer_t* %8) #4
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @f32_metadata() local_unnamed_addr #3 {
entry:
  ret %struct.halide_filter_metadata_t* @f32_metadata_storage
}

attributes #0 = { "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { "reciprocal-estimates"="none" }
attributes #2 = { nofree norecurse nosync nounwind "reciprocal-estimates"="none" }
attributes #3 = { mustprogress nofree norecurse nosync nounwind readnone willreturn }
attributes #4 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9}
!llvm.ident = !{!10, !10, !10, !10, !10}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!4 = !{i32 2, !"halide_mcpu", !"skylake-avx512"}
!5 = !{i32 2, !"halide_mattrs", !"+fma,+f16c,+avx512f,+avx512cd,+avx512vl,+avx512bw,+avx512dq"}
!6 = !{i32 2, !"halide_mabi", !""}
!7 = !{i32 2, !"halide_use_pic", i32 1}
!8 = !{i32 2, !"halide_use_large_code_model", i32 0}
!9 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!10 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!11 = !{!12, !16, i64 16}
!12 = !{!"_ZTS15halide_buffer_t", !13, i64 0, !16, i64 8, !16, i64 16, !13, i64 24, !17, i64 32, !20, i64 36, !16, i64 40, !16, i64 48}
!13 = !{!"long long", !14, i64 0}
!14 = !{!"omnipotent char", !15, i64 0}
!15 = !{!"Simple C++ TBAA"}
!16 = !{!"any pointer", !14, i64 0}
!17 = !{!"_ZTS13halide_type_t", !18, i64 0, !14, i64 1, !19, i64 2}
!18 = !{!"_ZTS18halide_type_code_t", !14, i64 0}
!19 = !{!"short", !14, i64 0}
!20 = !{!"int", !14, i64 0}
!21 = !{!12, !16, i64 40}
!22 = !{!23, !20, i64 0}
!23 = !{!"_ZTS18halide_dimension_t", !20, i64 0, !20, i64 4, !20, i64 8, !20, i64 12}
!24 = !{!23, !20, i64 8}
!25 = !{!26, !26, i64 0}
!26 = !{!"p5", !27, i64 0}
!27 = !{!"Halide buffer"}
!28 = !{!29, !29, i64 0}
!29 = !{!"p4", !27, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"f32", !27, i64 0}
