; ModuleID = 'depthwise_conv_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i32, i32 }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.107 = private constant [9 x i8] c"stride_x\00", align 32
@str.108 = private constant [9 x i8] c"stride_y\00", align 32
@str.109 = private constant [11 x i8] c"dilation_x\00", align 32
@str.110 = private constant [11 x i8] c"dilation_y\00", align 32
@str.111 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.112 = private constant [13 x i8] c"output_shift\00", align 32
@str.113 = private constant [12 x i8] c"output_zero\00", align 32
@str.114 = private constant [11 x i8] c"output_min\00", align 32
@str.115 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.116 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.115, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.116, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.117 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.118 = private constant [22 x i8] c"depthwise_conv_hvx128\00", align 32
@depthwise_conv_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.117, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.118, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #14
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #15
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #15
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #15
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #15
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #15
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #15
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #15
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #15
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #15
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #15
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #15
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #15
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #14
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #14
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #15
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #14
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #14
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #14
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #15
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #15
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #15
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #15
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #15
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #15
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #15
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #15
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #15
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #15
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #15
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #15
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #15
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #15
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #15
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #15
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #15
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #15
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #15
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #15
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #15
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #15
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #15
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #15
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #15
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #15
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #15
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #15
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #15
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #15
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #15
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #14
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #15
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #15
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #15
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #15
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #15
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #15
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #15
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #15
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #15
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #14
  %call.i = call i8* @malloc(i32 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #14
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #14
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #14
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #14
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a73, i32 %a68, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c699 = alloca [512 x i32], align 128
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep662 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep662, align 4
  %.fca.1.gep663 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep663, align 4
  %.fca.2.gep664 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep664, align 4
  %sum_filter701 = alloca [128 x i32], align 128
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep, align 4
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep, align 4
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep, align 4
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !43
  %host.i758 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %1 = load i8*, i8** %host.i758, align 4, !tbaa !43
  %dim.i759 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i759, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !49
  %extent.i767 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 1
  %4 = load i32, i32* %extent.i767, align 4, !tbaa !49
  %stride.i769 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 2
  %5 = load i32, i32* %stride.i769, align 4, !tbaa !50
  %extent.i773 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 1
  %6 = load i32, i32* %extent.i773, align 4, !tbaa !49
  %stride.i775 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 2
  %7 = load i32, i32* %stride.i775, align 4, !tbaa !50
  %host.i776 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %8 = load i8*, i8** %host.i776, align 4, !tbaa !43
  %dim.i777 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i777, align 8, !tbaa !46
  %min.i782 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 0
  %10 = load i32, i32* %min.i782, align 4, !tbaa !47
  %stride.i784 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 2
  %11 = load i32, i32* %stride.i784, align 4, !tbaa !50
  %min.i786 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 0
  %12 = load i32, i32* %min.i786, align 4, !tbaa !47
  %stride.i788 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 2
  %13 = load i32, i32* %stride.i788, align 4, !tbaa !50
  %min.i790 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 0
  %14 = load i32, i32* %min.i790, align 4, !tbaa !47
  %extent.i792 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 1
  %15 = load i32, i32* %extent.i792, align 4, !tbaa !49
  %stride.i794 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 2
  %16 = load i32, i32* %stride.i794, align 4, !tbaa !50
  %host.i795 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %17 = load i8*, i8** %host.i795, align 4, !tbaa !43
  %dim.i796 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %18 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i796, align 8, !tbaa !46
  %min.i803 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 0
  %19 = load i32, i32* %min.i803, align 4, !tbaa !47
  %extent.i805 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 1
  %20 = load i32, i32* %extent.i805, align 4, !tbaa !49
  %stride.i807 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 2
  %21 = load i32, i32* %stride.i807, align 4, !tbaa !50
  %min.i809 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 0
  %22 = load i32, i32* %min.i809, align 4, !tbaa !47
  %extent.i811 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 1
  %23 = load i32, i32* %extent.i811, align 4, !tbaa !49
  %stride.i813 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 2
  %24 = load i32, i32* %stride.i813, align 4, !tbaa !50
  %stride.i819 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 3, i32 2
  %25 = load i32, i32* %stride.i819, align 4, !tbaa !50
  %26 = icmp sgt i32 %20, 7
  %27 = and i32 %20, 1
  %28 = icmp eq i32 %27, 0
  %29 = or i1 %26, %28
  %30 = icmp sgt i32 %23, 7
  %31 = and i32 %23, 1
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %30, %32
  %34 = and i1 %29, %33
  %35 = icmp sgt i32 %3, 127
  %36 = and i1 %35, %34
  br i1 %36, label %then_bb, label %next_bb

after_bb:                                         ; preds = %"end for output.s0.b.rebased97", %"end for output.s0.b.rebased"
  %.0956 = phi i8* [ %.2, %"end for output.s0.b.rebased" ], [ %.4, %"end for output.s0.b.rebased97" ]
  %.0 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %tobool.not.i.not = icmp eq i8* %.0956, null
  br i1 %tobool.not.i.not, label %if.then.i821, label %if.then.i

if.then.i.loopexit:                               ; preds = %"end for output.s0.y.yo634"
  %37 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i

if.then.i:                                        ; preds = %if.then.i.loopexit, %after_bb
  %.0968 = phi i8* [ %.0, %after_bb ], [ %3563, %if.then.i.loopexit ]
  %.0956967 = phi i8* [ %.0956, %after_bb ], [ %37, %if.then.i.loopexit ]
  %ptr1.i = bitcast i8* %.0956967 to i8**
  %38 = load i8*, i8** %ptr1.i, align 4, !tbaa !95
  %tobool.not.i917 = icmp eq i8* %38, null
  br i1 %tobool.not.i917, label %pseudostack_free.exit, label %land.lhs.true.i920

land.lhs.true.i920:                               ; preds = %if.then.i
  %cumulative_size.i918 = getelementptr inbounds i8, i8* %.0956967, i32 8
  %39 = bitcast i8* %cumulative_size.i918 to i32*
  %40 = load i32, i32* %39, align 4, !tbaa !97
  %cmp.i919 = icmp ugt i32 %40, 16384
  br i1 %cmp.i919, label %if.then.i921, label %pseudostack_free.exit

if.then.i921:                                     ; preds = %land.lhs.true.i920
  call void @halide_free(i8* null, i8* nonnull %38) #14
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i, %land.lhs.true.i920, %if.then.i921
  store i8* null, i8** %ptr1.i, align 4, !tbaa !95
  %size.i922 = getelementptr inbounds i8, i8* %.0956967, i32 4
  %41 = bitcast i8* %size.i922 to i32*
  store i32 0, i32* %41, align 4, !tbaa !98
  %cumulative_size4.i = getelementptr inbounds i8, i8* %.0956967, i32 8
  %42 = bitcast i8* %cumulative_size4.i to i32*
  store i32 0, i32* %42, align 4, !tbaa !97
  br label %if.then.i821

if.then.i821:                                     ; preds = %pseudostack_free.exit, %after_bb, %after_bb223
  %.0961971 = phi i8* [ %3563, %after_bb223 ], [ %.0968, %pseudostack_free.exit ], [ %.0, %after_bb ]
  %ptr1.i924 = bitcast i8* %.0961971 to i8**
  %43 = load i8*, i8** %ptr1.i924, align 4, !tbaa !95
  %tobool.not.i925 = icmp eq i8* %43, null
  br i1 %tobool.not.i925, label %pseudostack_free.exit933, label %land.lhs.true.i928

land.lhs.true.i928:                               ; preds = %if.then.i821
  %cumulative_size.i926 = getelementptr inbounds i8, i8* %.0961971, i32 8
  %44 = bitcast i8* %cumulative_size.i926 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !97
  %cmp.i927 = icmp ugt i32 %45, 16384
  br i1 %cmp.i927, label %if.then.i929, label %pseudostack_free.exit933

if.then.i929:                                     ; preds = %land.lhs.true.i928
  call void @halide_free(i8* null, i8* nonnull %43) #14
  br label %pseudostack_free.exit933

pseudostack_free.exit933:                         ; preds = %if.then.i821, %land.lhs.true.i928, %if.then.i929
  store i8* null, i8** %ptr1.i924, align 4, !tbaa !95
  %size.i930 = getelementptr inbounds i8, i8* %.0961971, i32 4
  %46 = bitcast i8* %size.i930 to i32*
  store i32 0, i32* %46, align 4, !tbaa !98
  %cumulative_size4.i931 = getelementptr inbounds i8, i8* %.0961971, i32 8
  %47 = bitcast i8* %cumulative_size4.i931 to i32*
  store i32 0, i32* %47, align 4, !tbaa !97
  br label %call_destructor.exit825

call_destructor.exit825:                          ; preds = %next_bb68, %pseudostack_free.exit933
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #14
  ret i32 0

then_bb:                                          ; preds = %entry
  %t2201 = icmp slt i32 %a73, 0
  %t2203 = icmp slt i32 %stride_x, 0
  %48 = add nsw i32 %4, -1
  %49 = mul nsw i32 %48, %a73
  %t2207 = select i1 %t2201, i32 %49, i32 0
  %50 = add nsw i32 %20, -1
  %51 = icmp slt i32 %20, 2
  %52 = select i1 %51, i32 %20, i32 2
  %53 = add nsw i32 %52, -2
  %t2208.s = select i1 %t2203, i32 %50, i32 %53
  %t2209 = icmp slt i32 %a68, 0
  %t2211 = icmp slt i32 %stride_y, 0
  %54 = add nsw i32 %6, -1
  %55 = mul nsw i32 %54, %a68
  %t2215 = select i1 %t2209, i32 %55, i32 0
  %56 = add nsw i32 %23, -1
  %57 = icmp slt i32 %23, 2
  %58 = select i1 %57, i32 %23, i32 2
  %59 = add nsw i32 %58, -2
  %t2216.s = select i1 %t2211, i32 %56, i32 %59
  %60 = icmp eq i32 %4, 3
  %61 = icmp eq i32 %6, 3
  %t2217 = and i1 %60, %61
  %t2194 = icmp eq i32 %depth_multiplier, 1
  %a68.op736 = shl i32 %a68, 1
  %62 = select i1 %t2209, i32 %a68.op736, i32 0
  %63 = select i1 %t2217, i32 %62, i32 %t2215
  %64 = add nsw i32 %t2216.s, %22
  %65 = mul nsw i32 %64, %stride_y
  %b16 = add nsw i32 %65, %63
  %a73.op737 = shl i32 %a73, 1
  %66 = select i1 %t2201, i32 %a73.op737, i32 0
  %67 = select i1 %t2217, i32 %66, i32 %t2207
  %68 = add nsw i32 %t2208.s, %19
  %69 = mul nsw i32 %68, %stride_x
  %b15 = add nsw i32 %69, %67
  %70 = select i1 %t2209, i32 0, i32 %55
  %71 = select i1 %t2211, i32 %59, i32 %56
  %72 = add nsw i32 %71, %22
  %73 = mul nsw i32 %72, %stride_y
  %b23 = add nsw i32 %73, %70
  %74 = select i1 %t2201, i32 0, i32 %49
  %75 = select i1 %t2203, i32 %53, i32 %50
  %76 = add nsw i32 %75, %19
  %77 = mul nsw i32 %76, %stride_x
  %b17 = add nsw i32 %77, %74
  %78 = mul nsw i32 %13, %12
  %79 = mul nsw i32 %16, %14
  %80 = mul nsw i32 %11, %10
  %81 = add i32 %78, %80
  %t2195 = add i32 %81, %79
  %82 = add nuw nsw i32 %3, 127
  %83 = ashr i32 %82, 7
  %b10 = add nsw i32 %3, -128
  %84 = icmp sgt i32 %4, 0
  %85 = icmp sgt i32 %6, 0
  %86 = select i1 %85, i32 %6, i32 0
  %.op4803 = shl i32 %4, 8
  %87 = select i1 %84, i32 %.op4803, i32 0
  %88 = mul i32 %87, %86
  %89 = or i32 %88, 134
  %90 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %91 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %92 = shufflevector <64 x i8> %91, <64 x i8> undef, <64 x i32> zeroinitializer
  %93 = zext <64 x i8> %92 to <64 x i16>
  %94 = bitcast i8* %0 to i32*
  %95 = zext i8 %input_zero to i32
  %96 = insertelement <1 x i32> poison, i32 %95, i32 0
  %97 = bitcast [128 x i32]* %sum_filter701 to <32 x i32>*
  %98 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 32
  %99 = bitcast i32* %98 to <32 x i32>*
  %100 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 64
  %101 = bitcast i32* %100 to <32 x i32>*
  %102 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 96
  %103 = bitcast i32* %102 to <32 x i32>*
  %a13 = add nsw i32 %69, %t2207
  %104 = icmp slt i32 %t2207, %67
  %t2225 = select i1 %104, i32 %a13, i32 %b15
  %a14 = add nsw i32 %65, %t2215
  %105 = icmp slt i32 %t2215, %63
  %t2223 = select i1 %105, i32 %a14, i32 %b16
  %106 = icmp sgt i32 %a73, 0
  %107 = select i1 %106, i32 %a73, i32 0
  %108 = shl nuw nsw i32 %107, 1
  %109 = select i1 %t2217, i32 %108, i32 %74
  %a15 = add nsw i32 %77, %109
  %110 = icmp sgt i32 %109, %74
  %111 = select i1 %110, i32 %a15, i32 %b17
  %a29 = sub nsw i32 %111, %t2225
  %112 = icmp sgt i32 %a68, 0
  %113 = select i1 %112, i32 %a68, i32 0
  %114 = shl nuw nsw i32 %113, 1
  %115 = select i1 %t2217, i32 %114, i32 %70
  %a21 = add nsw i32 %73, %115
  %116 = icmp sgt i32 %115, %70
  %117 = select i1 %116, i32 %a21, i32 %b23
  %a30 = sub nsw i32 %117, %t2223
  %t2228 = sub nsw i32 %b17, %a13
  %t2227 = sub nsw i32 %b23, %a14
  %118 = icmp sgt i32 %15, 0
  %119 = icmp sgt i32 %a29, -1
  %t2531 = select i1 %119, i32 %a29, i32 -1
  %120 = icmp sgt i32 %a30, -1
  %t2532 = select i1 %120, i32 %a30, i32 -1
  %121 = add nsw i32 %t2532, 1
  %122 = shl i32 %t2531, 7
  %t2533 = add i32 %122, 128
  %123 = mul i32 %t2533, %121
  %124 = add i32 %123, 131
  %125 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %126 = icmp sgt i32 %t2227, -1
  %127 = sub i32 %a14, %t2223
  %128 = add nsw i32 %a29, 1
  %129 = sub i32 %a13, %t2225
  %130 = icmp sgt i32 %t2228, -1
  %131 = icmp eq i32 %depth_multiplier, 0
  %t2536 = select i1 %131, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit749 = ashr i32 %depth_multiplier, 31
  %132 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %133 = shufflevector <128 x i32> %132, <128 x i32> undef, <128 x i32> zeroinitializer
  %134 = sub nsw <128 x i32> %133, %t2536
  %135 = xor i32 %depth_multiplier.lobit749, -1
  %136 = sub nsw i32 %135, %depth_multiplier.lobit749
  %137 = insertelement <128 x i32> undef, i32 %136, i32 0
  %138 = shufflevector <128 x i32> %137, <128 x i32> undef, <128 x i32> zeroinitializer
  %139 = xor <128 x i32> %t2536, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg4773 = mul i32 %24, %22
  %.neg4774 = mul i32 %21, %19
  %.neg4775 = mul i32 %25, %14
  %reass.add4777 = add i32 %.neg4773, %.neg4774
  %reass.add4778 = add i32 %reass.add4777, %.neg4775
  %140 = add nuw nsw i32 %23, 1
  %141 = ashr i32 %140, 1
  %142 = icmp sgt i32 %23, 0
  %b33 = add nsw i32 %23, -2
  %143 = sub nsw i32 %a68.op736, %t2223
  %144 = sub nsw i32 %a68, %t2223
  %145 = add nuw nsw i32 %20, 1
  %146 = ashr i32 %145, 1
  %147 = icmp sgt i32 %20, 0
  %b34 = add nsw i32 %20, -2
  %148 = bitcast [512 x i32]* %offset_c699 to <32 x i32>*
  %149 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 32
  %150 = bitcast i32* %149 to <32 x i32>*
  %151 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 64
  %152 = bitcast i32* %151 to <32 x i32>*
  %153 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 96
  %154 = bitcast i32* %153 to <32 x i32>*
  %155 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 128
  %156 = bitcast i32* %155 to <32 x i32>*
  %157 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 160
  %158 = bitcast i32* %157 to <32 x i32>*
  %159 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 192
  %160 = bitcast i32* %159 to <32 x i32>*
  %161 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 224
  %162 = bitcast i32* %161 to <32 x i32>*
  %163 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 256
  %164 = bitcast i32* %163 to <32 x i32>*
  %165 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 288
  %166 = bitcast i32* %165 to <32 x i32>*
  %167 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 320
  %168 = bitcast i32* %167 to <32 x i32>*
  %169 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 352
  %170 = bitcast i32* %169 to <32 x i32>*
  %171 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 384
  %172 = bitcast i32* %171 to <32 x i32>*
  %173 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 416
  %174 = bitcast i32* %173 to <32 x i32>*
  %175 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 448
  %176 = bitcast i32* %175 to <32 x i32>*
  %177 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 480
  %178 = bitcast i32* %177 to <32 x i32>*
  %179 = sub nsw i32 %a73.op737, %t2225
  %180 = sub nsw i32 %a73, %t2225
  %.not743 = icmp eq i32 %output_shift, 0
  %181 = select i1 %.not743, <32 x i32> zeroinitializer, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %182 = add i32 %output_shift, -1
  %183 = zext i8 %output_zero to i16
  %184 = insertelement <128 x i16> undef, i16 %183, i32 0
  %185 = shufflevector <128 x i16> %184, <128 x i16> undef, <128 x i32> zeroinitializer
  %186 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %187 = shufflevector <128 x i8> %186, <128 x i8> undef, <128 x i32> zeroinitializer
  %188 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %189 = shufflevector <128 x i8> %188, <128 x i8> undef, <128 x i32> zeroinitializer
  %190 = insertelement <1 x i32> poison, i32 %output_multiplier, i32 0
  %191 = insertelement <1 x i32> poison, i32 %output_shift, i32 0
  %192 = insertelement <1 x i32> poison, i32 %182, i32 0
  %193 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %194 = or i32 %t2227, %t2228
  %195 = icmp slt i32 %194, 0
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %35, label %then_bb67, label %next_bb68

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.1 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %343, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 7
  %196 = icmp slt i32 %a8, %b10
  %output.s0.c.c.base = select i1 %196, i32 %a8, i32 %b10
  %197 = load i32, i32* %.fca.1.gep, align 4, !tbaa !98
  %cmp.i = icmp ult i32 %197, %89
  %198 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !95
  br i1 %cmp.i, label %if.then.i826, label %pseudostack_alloc.exit, !prof !99

if.then.i826:                                     ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %198, null
  %199 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i = icmp ugt i32 %199, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i826
  call void @halide_free(i8* null, i8* nonnull %198) #14
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i826
  %add.i = add i32 %199, %89
  store i32 %add.i, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i = icmp ugt i32 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i32 %89) #14
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %89, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %200 = phi i8* [ %storemerge.i, %if.end11.i ], [ %198, %"for output.s0.c.co" ]
  %201 = bitcast i8* %200 to i16*
  %.not738 = icmp eq i8* %200, null
  br i1 %.not738, label %then_bb2, label %"produce filter_zeroed", !prof !100

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %202 = alloca i8*, i32 %89, align 128
  %203 = bitcast i8** %202 to i16*
  store i8** %202, i8*** %90, align 4
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %203, %then_bb2 ], [ %201, %pseudostack_alloc.exit ]
  br i1 %85, label %"for filter_zeroed.s0.y.preheader", label %"consume sum_filter", !prof !101

"for filter_zeroed.s0.y.preheader":               ; preds = %"produce filter_zeroed"
  br i1 %84, label %"for filter_zeroed.s0.y.us", label %"for sum_filter.s1.r19$y.preheader", !prof !101

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %filter_zeroed.s0.y.us = phi i32 [ %226, %"end for filter_zeroed.s0.x.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y.preheader" ]
  %204 = mul nsw i32 %filter_zeroed.s0.y.us, %7
  %205 = add nsw i32 %204, %output.s0.c.c.base
  %206 = mul nsw i32 %filter_zeroed.s0.y.us, %4
  br label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %filter_zeroed.s0.x.us = phi i32 [ %225, %"for filter_zeroed.s0.x.us" ], [ 0, %"for filter_zeroed.s0.y.us" ]
  %207 = mul nsw i32 %filter_zeroed.s0.x.us, %5
  %208 = add nsw i32 %205, %207
  %209 = getelementptr inbounds i8, i8* %1, i32 %208
  %210 = bitcast i8* %209 to <64 x i8>*
  %211 = load <64 x i8>, <64 x i8>* %210, align 1, !tbaa !102
  %212 = zext <64 x i8> %211 to <64 x i16>
  %213 = call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %212, <64 x i16> %93, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0) #11
  %214 = add nsw i32 %filter_zeroed.s0.x.us, %206
  %215 = shl nsw i32 %214, 7
  %216 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %215
  %217 = bitcast i16* %216 to <64 x i16>*
  store <64 x i16> %213, <64 x i16>* %217, align 128, !tbaa !105
  %218 = getelementptr inbounds i8, i8* %209, i32 64
  %219 = bitcast i8* %218 to <64 x i8>*
  %220 = load <64 x i8>, <64 x i8>* %219, align 1, !tbaa !102
  %221 = zext <64 x i8> %220 to <64 x i16>
  %222 = call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %221, <64 x i16> %93, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0) #11
  %223 = getelementptr inbounds i16, i16* %216, i32 64
  %224 = bitcast i16* %223 to <64 x i16>*
  store <64 x i16> %222, <64 x i16>* %224, align 128, !tbaa !105
  %225 = add nuw nsw i32 %filter_zeroed.s0.x.us, 1
  %.not756.us = icmp eq i32 %225, %4
  br i1 %.not756.us, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us"
  %226 = add nuw nsw i32 %filter_zeroed.s0.y.us, 1
  %.not755.us = icmp eq i32 %226, %6
  br i1 %.not755.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us", %"for filter_zeroed.s0.y.preheader"
  br label %"for sum_filter.s1.r19$y"

"for sum_filter.s1.r19$y":                        ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x"
  %convolved700.sroa.36.0 = phi <32 x i32> [ %convolved700.sroa.36.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved700.sroa.24.0 = phi <32 x i32> [ %convolved700.sroa.24.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved700.sroa.12.0 = phi <32 x i32> [ %convolved700.sroa.12.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved700.sroa.0.0 = phi <32 x i32> [ %convolved700.sroa.0.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %"sum_filter.s1.r19$y" = phi i32 [ %247, %"end for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  br i1 %84, label %"for sum_filter.s1.r19$x.preheader", label %"end for sum_filter.s1.r19$x", !prof !101

"for sum_filter.s1.r19$x.preheader":              ; preds = %"for sum_filter.s1.r19$y"
  %227 = mul nsw i32 %"sum_filter.s1.r19$y", %4
  br label %"for sum_filter.s1.r19$x"

"for sum_filter.s1.r19$x":                        ; preds = %"for sum_filter.s1.r19$x.preheader", %"for sum_filter.s1.r19$x"
  %convolved700.sroa.36.1 = phi <32 x i32> [ %245, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.36.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved700.sroa.24.1 = phi <32 x i32> [ %244, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.24.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved700.sroa.12.1 = phi <32 x i32> [ %243, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.12.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved700.sroa.0.1 = phi <32 x i32> [ %242, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ]
  %"sum_filter.s1.r19$x" = phi i32 [ %246, %"for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$x.preheader" ]
  %228 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.1, <32 x i32> %convolved700.sroa.0.1)
  %229 = add nsw i32 %"sum_filter.s1.r19$x", %227
  %230 = shl nsw i32 %229, 7
  %231 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %230
  %232 = bitcast i16* %231 to <64 x i16>*
  %233 = load <64 x i16>, <64 x i16>* %232, align 128, !tbaa !105
  %234 = call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %233, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0) #11
  %235 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %234, <64 x i32> %228, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %236 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.1, <32 x i32> %convolved700.sroa.24.1)
  %237 = getelementptr inbounds i16, i16* %231, i32 64
  %238 = bitcast i16* %237 to <64 x i16>*
  %239 = load <64 x i16>, <64 x i16>* %238, align 128, !tbaa !105
  %240 = call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %239, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0) #11
  %241 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %240, <64 x i32> %236, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %242 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %235)
  %243 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %235)
  %244 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %241)
  %245 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %241)
  %246 = add nuw nsw i32 %"sum_filter.s1.r19$x", 1
  %.not754 = icmp eq i32 %246, %4
  br i1 %.not754, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x"

"end for sum_filter.s1.r19$x":                    ; preds = %"for sum_filter.s1.r19$x", %"for sum_filter.s1.r19$y"
  %convolved700.sroa.36.2 = phi <32 x i32> [ %convolved700.sroa.36.0, %"for sum_filter.s1.r19$y" ], [ %245, %"for sum_filter.s1.r19$x" ]
  %convolved700.sroa.24.2 = phi <32 x i32> [ %convolved700.sroa.24.0, %"for sum_filter.s1.r19$y" ], [ %244, %"for sum_filter.s1.r19$x" ]
  %convolved700.sroa.12.2 = phi <32 x i32> [ %convolved700.sroa.12.0, %"for sum_filter.s1.r19$y" ], [ %243, %"for sum_filter.s1.r19$x" ]
  %convolved700.sroa.0.2 = phi <32 x i32> [ %convolved700.sroa.0.0, %"for sum_filter.s1.r19$y" ], [ %242, %"for sum_filter.s1.r19$x" ]
  %247 = add nuw nsw i32 %"sum_filter.s1.r19$y", 1
  %.not753 = icmp eq i32 %247, %6
  br i1 %.not753, label %"consume sum_filter", label %"for sum_filter.s1.r19$y"

"consume sum_filter":                             ; preds = %"end for sum_filter.s1.r19$x", %"produce filter_zeroed"
  %convolved700.sroa.36.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.36.2, %"end for sum_filter.s1.r19$x" ]
  %convolved700.sroa.24.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.24.2, %"end for sum_filter.s1.r19$x" ]
  %convolved700.sroa.12.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.12.2, %"end for sum_filter.s1.r19$x" ]
  %convolved700.sroa.0.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.0.2, %"end for sum_filter.s1.r19$x" ]
  %248 = getelementptr inbounds i32, i32* %94, i32 %output.s0.c.c.base
  %249 = bitcast i32* %248 to <32 x i32>*
  %250 = load <32 x i32>, <32 x i32>* %249, align 4, !tbaa !107
  %251 = getelementptr inbounds i32, i32* %248, i32 32
  %252 = bitcast i32* %251 to <32 x i32>*
  %253 = load <32 x i32>, <32 x i32>* %252, align 4, !tbaa !107
  %254 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %253, <32 x i32> %250)
  %255 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.3, <32 x i32> %convolved700.sroa.0.3)
  %256 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %257 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %255, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %258 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %256, <128 x i8> %257, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %259 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %260 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %255, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %261 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %258, <32 x i32> %259, <128 x i8> %260, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %262 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %263 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %255, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %264 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %262, <128 x i8> %263, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %265 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %266 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %255, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %267 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %264, <32 x i32> %265, <128 x i8> %266, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %268 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %261, <32 x i32> %267, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %269 = call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %254, <256 x i8> %268, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %270 = getelementptr inbounds i32, i32* %248, i32 64
  %271 = bitcast i32* %270 to <32 x i32>*
  %272 = load <32 x i32>, <32 x i32>* %271, align 4, !tbaa !107
  %273 = getelementptr inbounds i32, i32* %248, i32 96
  %274 = bitcast i32* %273 to <32 x i32>*
  %275 = load <32 x i32>, <32 x i32>* %274, align 4, !tbaa !107
  %276 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %275, <32 x i32> %272)
  %277 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.3, <32 x i32> %convolved700.sroa.24.3)
  %278 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %279 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %277, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %280 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %278, <128 x i8> %279, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %281 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %282 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %277, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %283 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %280, <32 x i32> %281, <128 x i8> %282, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %284 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %285 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %277, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %286 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %284, <128 x i8> %285, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %287 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %96, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %288 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %277, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %289 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %286, <32 x i32> %287, <128 x i8> %288, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %290 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %283, <32 x i32> %289, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %291 = call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %276, <256 x i8> %290, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %292 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %269)
  store <32 x i32> %292, <32 x i32>* %97, align 128, !tbaa !109
  %293 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %269)
  store <32 x i32> %293, <32 x i32>* %99, align 128, !tbaa !117
  %294 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %291)
  store <32 x i32> %294, <32 x i32>* %101, align 128, !tbaa !119
  %295 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %291)
  store <32 x i32> %295, <32 x i32>* %103, align 128, !tbaa !122
  br i1 %118, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !101

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %296 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base, i32 0
  %297 = shufflevector <128 x i32> %296, <128 x i32> undef, <128 x i32> zeroinitializer
  %298 = add nsw <128 x i32> %297, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit748 = ashr <128 x i32> %298, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %299 = sub nsw <128 x i32> %298, %.lobit748
  %300 = and <128 x i32> %.lobit748, %138
  %301 = sub i32 %output.s0.c.c.base, %t2195
  %302 = sub i32 %output.s0.c.c.base, %reass.add4778
  %303 = getelementptr inbounds i16, i16* %filter_zeroed, i32 768
  %304 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1024
  %305 = bitcast i16* %304 to <64 x i16>*
  %306 = getelementptr inbounds i16, i16* %filter_zeroed, i32 896
  %307 = bitcast i16* %306 to <64 x i16>*
  %308 = bitcast i16* %303 to <64 x i16>*
  %309 = getelementptr inbounds i16, i16* %filter_zeroed, i32 384
  %310 = getelementptr inbounds i16, i16* %filter_zeroed, i32 640
  %311 = bitcast i16* %310 to <64 x i16>*
  %312 = getelementptr inbounds i16, i16* %filter_zeroed, i32 512
  %313 = bitcast i16* %312 to <64 x i16>*
  %314 = bitcast i16* %309 to <64 x i16>*
  %315 = getelementptr inbounds i16, i16* %filter_zeroed, i32 256
  %316 = bitcast i16* %315 to <64 x i16>*
  %317 = getelementptr inbounds i16, i16* %filter_zeroed, i32 128
  %318 = bitcast i16* %317 to <64 x i16>*
  %319 = bitcast i16* %filter_zeroed to <64 x i16>*
  %320 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1088
  %321 = bitcast i16* %320 to <64 x i16>*
  %322 = getelementptr inbounds i16, i16* %filter_zeroed, i32 960
  %323 = bitcast i16* %322 to <64 x i16>*
  %324 = getelementptr inbounds i16, i16* %filter_zeroed, i32 832
  %325 = bitcast i16* %324 to <64 x i16>*
  %326 = getelementptr inbounds i16, i16* %filter_zeroed, i32 704
  %327 = bitcast i16* %326 to <64 x i16>*
  %328 = getelementptr inbounds i16, i16* %filter_zeroed, i32 576
  %329 = bitcast i16* %328 to <64 x i16>*
  %330 = getelementptr inbounds i16, i16* %filter_zeroed, i32 448
  %331 = bitcast i16* %330 to <64 x i16>*
  %332 = getelementptr inbounds i16, i16* %filter_zeroed, i32 320
  %333 = bitcast i16* %332 to <64 x i16>*
  %334 = getelementptr inbounds i16, i16* %filter_zeroed, i32 192
  %335 = bitcast i16* %334 to <64 x i16>*
  %336 = getelementptr inbounds i16, i16* %filter_zeroed, i32 64
  %337 = bitcast i16* %336 to <64 x i16>*
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %output.s0.b.rebased = phi i32 [ %932, %"end for output.s0.y.yo" ], [ 0, %"for output.s0.b.rebased.preheader" ]
  %338 = load i32, i32* %.fca.1.gep663, align 4, !tbaa !98
  %cmp.i828 = icmp ult i32 %338, %124
  %339 = load i8*, i8** %.fca.0.gep662, align 4, !tbaa !95
  br i1 %cmp.i828, label %if.then.i831, label %pseudostack_alloc.exit844, !prof !99

if.then.i831:                                     ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i830 = icmp ne i8* %339, null
  %340 = load i32, i32* %.fca.2.gep664, align 4
  %cmp2.i833 = icmp ugt i32 %340, 16384
  %or.cond4695 = and i1 %tobool1.not.i830, %cmp2.i833
  br i1 %or.cond4695, label %if.then3.i835, label %if.end.i839

if.then3.i835:                                    ; preds = %if.then.i831
  call void @halide_free(i8* null, i8* nonnull %339) #14
  %.pre4845 = load i32, i32* %.fca.2.gep664, align 4, !tbaa !97
  br label %if.end.i839

if.end.i839:                                      ; preds = %if.then3.i835, %if.then.i831
  %341 = phi i32 [ %.pre4845, %if.then3.i835 ], [ %340, %if.then.i831 ]
  %add.i837 = add i32 %341, %124
  store i32 %add.i837, i32* %.fca.2.gep664, align 4, !tbaa !97
  %cmp7.i838 = icmp ugt i32 %add.i837, 16384
  br i1 %cmp7.i838, label %if.then8.i841, label %if.end11.i843

if.then8.i841:                                    ; preds = %if.end.i839
  %call.i840 = call i8* @halide_malloc(i8* null, i32 %124) #14
  br label %if.end11.i843

if.end11.i843:                                    ; preds = %if.then8.i841, %if.end.i839
  %storemerge.i842 = phi i8* [ %call.i840, %if.then8.i841 ], [ null, %if.end.i839 ]
  store i8* %storemerge.i842, i8** %.fca.0.gep662, align 4, !tbaa !95
  store i32 %124, i32* %.fca.1.gep663, align 4, !tbaa !98
  br label %pseudostack_alloc.exit844

pseudostack_alloc.exit844:                        ; preds = %"for output.s0.b.rebased", %if.end11.i843
  %342 = phi i8* [ %storemerge.i842, %if.end11.i843 ], [ %339, %"for output.s0.b.rebased" ]
  %.not740 = icmp eq i8* %342, null
  br i1 %.not740, label %then_bb5, label %"produce resampled_input", !prof !100

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.1, %"consume sum_filter" ], [ %193, %"end for output.s0.y.yo" ]
  %343 = add nuw nsw i32 %output.s0.c.co, 1
  %.not739 = icmp eq i32 %343, %83
  br i1 %.not739, label %after_bb, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit844
  %344 = alloca i8*, i32 %124, align 128
  %345 = bitcast i8** %344 to i8*
  store i8** %344, i8*** %125, align 4
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit844, %then_bb5
  %resampled_input = phi i8* [ %345, %then_bb5 ], [ %342, %pseudostack_alloc.exit844 ]
  %346 = add nsw i32 %output.s0.b.rebased, %14
  br i1 %t2194, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %347 = mul nsw i32 %346, %16
  %t2239 = add nsw i32 %301, %347
  br i1 %195, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us", !prof !124

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %resampled_input.s0.y.rebased.us = phi i32 [ %364, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %348 = add nsw i32 %127, %resampled_input.s0.y.rebased.us
  %349 = mul nsw i32 %348, %128
  %t2243.us = add nsw i32 %129, %349
  %350 = add nsw i32 %resampled_input.s0.y.rebased.us, %a14
  %351 = mul nsw i32 %350, %13
  %352 = add nsw i32 %t2239, %351
  br label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %resampled_input.s0.x.rebased.us = phi i32 [ %363, %"for resampled_input.s0.x.rebased.us" ], [ 0, %"for resampled_input.s0.y.rebased.us" ]
  %353 = add nsw i32 %resampled_input.s0.x.rebased.us, %a13
  %354 = mul nsw i32 %353, %11
  %355 = add nsw i32 %352, %354
  %356 = getelementptr inbounds i8, i8* %8, i32 %355
  %357 = bitcast i8* %356 to <128 x i8>*
  %358 = load <128 x i8>, <128 x i8>* %357, align 1, !tbaa !125
  %359 = add nsw i32 %t2243.us, %resampled_input.s0.x.rebased.us
  %360 = shl nsw i32 %359, 7
  %361 = getelementptr inbounds i8, i8* %resampled_input, i32 %360
  %362 = bitcast i8* %361 to <128 x i8>*
  store <128 x i8> %358, <128 x i8>* %362, align 128, !tbaa !127
  %363 = add nuw nsw i32 %resampled_input.s0.x.rebased.us, 1
  %.not752.us = icmp eq i32 %resampled_input.s0.x.rebased.us, %t2228
  br i1 %.not752.us, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us"
  %364 = add nuw nsw i32 %resampled_input.s0.y.rebased.us, 1
  %.not751.us = icmp eq i32 %resampled_input.s0.y.rebased.us, %t2227
  br i1 %.not751.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  br i1 %126, label %"for resampled_input.s0.y.rebased9.preheader", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader":    ; preds = %next_bb8
  %365 = mul nsw i32 %346, %16
  %366 = sub i32 %365, %t2195
  br i1 %130, label %"for resampled_input.s0.y.rebased9.preheader.split.us", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased9.preheader"
  %367 = sdiv <128 x i32> %299, %134
  %368 = add nsw <128 x i32> %367, %300
  %369 = and <128 x i32> %368, %139
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %resampled_input.s0.y.rebased11.us = phi i32 [ %897, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %370 = add nsw i32 %127, %resampled_input.s0.y.rebased11.us
  %371 = mul nsw i32 %370, %128
  %t2248.us = add nsw i32 %129, %371
  %372 = add nsw i32 %resampled_input.s0.y.rebased11.us, %a14
  %373 = mul nsw i32 %372, %13
  %t2247.us = add nsw i32 %366, %373
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %resampled_input.s0.x.rebased14.us = phi i32 [ %896, %"for resampled_input.s0.x.rebased12.us" ], [ 0, %"for resampled_input.s0.y.rebased9.us" ]
  %374 = add nsw i32 %resampled_input.s0.x.rebased14.us, %a13
  %375 = mul nsw i32 %374, %11
  %376 = add nsw i32 %t2247.us, %375
  %377 = insertelement <128 x i32> undef, i32 %376, i32 0
  %378 = shufflevector <128 x i32> %377, <128 x i32> undef, <128 x i32> zeroinitializer
  %379 = add nsw <128 x i32> %378, %369
  %380 = extractelement <128 x i32> %379, i32 0
  %381 = getelementptr inbounds i8, i8* %8, i32 %380
  %382 = load i8, i8* %381, align 1, !tbaa !125
  %383 = insertelement <128 x i8> undef, i8 %382, i32 0
  %384 = extractelement <128 x i32> %379, i32 1
  %385 = getelementptr inbounds i8, i8* %8, i32 %384
  %386 = load i8, i8* %385, align 1, !tbaa !125
  %387 = insertelement <128 x i8> %383, i8 %386, i32 1
  %388 = extractelement <128 x i32> %379, i32 2
  %389 = getelementptr inbounds i8, i8* %8, i32 %388
  %390 = load i8, i8* %389, align 1, !tbaa !125
  %391 = insertelement <128 x i8> %387, i8 %390, i32 2
  %392 = extractelement <128 x i32> %379, i32 3
  %393 = getelementptr inbounds i8, i8* %8, i32 %392
  %394 = load i8, i8* %393, align 1, !tbaa !125
  %395 = insertelement <128 x i8> %391, i8 %394, i32 3
  %396 = extractelement <128 x i32> %379, i32 4
  %397 = getelementptr inbounds i8, i8* %8, i32 %396
  %398 = load i8, i8* %397, align 1, !tbaa !125
  %399 = insertelement <128 x i8> %395, i8 %398, i32 4
  %400 = extractelement <128 x i32> %379, i32 5
  %401 = getelementptr inbounds i8, i8* %8, i32 %400
  %402 = load i8, i8* %401, align 1, !tbaa !125
  %403 = insertelement <128 x i8> %399, i8 %402, i32 5
  %404 = extractelement <128 x i32> %379, i32 6
  %405 = getelementptr inbounds i8, i8* %8, i32 %404
  %406 = load i8, i8* %405, align 1, !tbaa !125
  %407 = insertelement <128 x i8> %403, i8 %406, i32 6
  %408 = extractelement <128 x i32> %379, i32 7
  %409 = getelementptr inbounds i8, i8* %8, i32 %408
  %410 = load i8, i8* %409, align 1, !tbaa !125
  %411 = insertelement <128 x i8> %407, i8 %410, i32 7
  %412 = extractelement <128 x i32> %379, i32 8
  %413 = getelementptr inbounds i8, i8* %8, i32 %412
  %414 = load i8, i8* %413, align 1, !tbaa !125
  %415 = insertelement <128 x i8> %411, i8 %414, i32 8
  %416 = extractelement <128 x i32> %379, i32 9
  %417 = getelementptr inbounds i8, i8* %8, i32 %416
  %418 = load i8, i8* %417, align 1, !tbaa !125
  %419 = insertelement <128 x i8> %415, i8 %418, i32 9
  %420 = extractelement <128 x i32> %379, i32 10
  %421 = getelementptr inbounds i8, i8* %8, i32 %420
  %422 = load i8, i8* %421, align 1, !tbaa !125
  %423 = insertelement <128 x i8> %419, i8 %422, i32 10
  %424 = extractelement <128 x i32> %379, i32 11
  %425 = getelementptr inbounds i8, i8* %8, i32 %424
  %426 = load i8, i8* %425, align 1, !tbaa !125
  %427 = insertelement <128 x i8> %423, i8 %426, i32 11
  %428 = extractelement <128 x i32> %379, i32 12
  %429 = getelementptr inbounds i8, i8* %8, i32 %428
  %430 = load i8, i8* %429, align 1, !tbaa !125
  %431 = insertelement <128 x i8> %427, i8 %430, i32 12
  %432 = extractelement <128 x i32> %379, i32 13
  %433 = getelementptr inbounds i8, i8* %8, i32 %432
  %434 = load i8, i8* %433, align 1, !tbaa !125
  %435 = insertelement <128 x i8> %431, i8 %434, i32 13
  %436 = extractelement <128 x i32> %379, i32 14
  %437 = getelementptr inbounds i8, i8* %8, i32 %436
  %438 = load i8, i8* %437, align 1, !tbaa !125
  %439 = insertelement <128 x i8> %435, i8 %438, i32 14
  %440 = extractelement <128 x i32> %379, i32 15
  %441 = getelementptr inbounds i8, i8* %8, i32 %440
  %442 = load i8, i8* %441, align 1, !tbaa !125
  %443 = insertelement <128 x i8> %439, i8 %442, i32 15
  %444 = extractelement <128 x i32> %379, i32 16
  %445 = getelementptr inbounds i8, i8* %8, i32 %444
  %446 = load i8, i8* %445, align 1, !tbaa !125
  %447 = insertelement <128 x i8> %443, i8 %446, i32 16
  %448 = extractelement <128 x i32> %379, i32 17
  %449 = getelementptr inbounds i8, i8* %8, i32 %448
  %450 = load i8, i8* %449, align 1, !tbaa !125
  %451 = insertelement <128 x i8> %447, i8 %450, i32 17
  %452 = extractelement <128 x i32> %379, i32 18
  %453 = getelementptr inbounds i8, i8* %8, i32 %452
  %454 = load i8, i8* %453, align 1, !tbaa !125
  %455 = insertelement <128 x i8> %451, i8 %454, i32 18
  %456 = extractelement <128 x i32> %379, i32 19
  %457 = getelementptr inbounds i8, i8* %8, i32 %456
  %458 = load i8, i8* %457, align 1, !tbaa !125
  %459 = insertelement <128 x i8> %455, i8 %458, i32 19
  %460 = extractelement <128 x i32> %379, i32 20
  %461 = getelementptr inbounds i8, i8* %8, i32 %460
  %462 = load i8, i8* %461, align 1, !tbaa !125
  %463 = insertelement <128 x i8> %459, i8 %462, i32 20
  %464 = extractelement <128 x i32> %379, i32 21
  %465 = getelementptr inbounds i8, i8* %8, i32 %464
  %466 = load i8, i8* %465, align 1, !tbaa !125
  %467 = insertelement <128 x i8> %463, i8 %466, i32 21
  %468 = extractelement <128 x i32> %379, i32 22
  %469 = getelementptr inbounds i8, i8* %8, i32 %468
  %470 = load i8, i8* %469, align 1, !tbaa !125
  %471 = insertelement <128 x i8> %467, i8 %470, i32 22
  %472 = extractelement <128 x i32> %379, i32 23
  %473 = getelementptr inbounds i8, i8* %8, i32 %472
  %474 = load i8, i8* %473, align 1, !tbaa !125
  %475 = insertelement <128 x i8> %471, i8 %474, i32 23
  %476 = extractelement <128 x i32> %379, i32 24
  %477 = getelementptr inbounds i8, i8* %8, i32 %476
  %478 = load i8, i8* %477, align 1, !tbaa !125
  %479 = insertelement <128 x i8> %475, i8 %478, i32 24
  %480 = extractelement <128 x i32> %379, i32 25
  %481 = getelementptr inbounds i8, i8* %8, i32 %480
  %482 = load i8, i8* %481, align 1, !tbaa !125
  %483 = insertelement <128 x i8> %479, i8 %482, i32 25
  %484 = extractelement <128 x i32> %379, i32 26
  %485 = getelementptr inbounds i8, i8* %8, i32 %484
  %486 = load i8, i8* %485, align 1, !tbaa !125
  %487 = insertelement <128 x i8> %483, i8 %486, i32 26
  %488 = extractelement <128 x i32> %379, i32 27
  %489 = getelementptr inbounds i8, i8* %8, i32 %488
  %490 = load i8, i8* %489, align 1, !tbaa !125
  %491 = insertelement <128 x i8> %487, i8 %490, i32 27
  %492 = extractelement <128 x i32> %379, i32 28
  %493 = getelementptr inbounds i8, i8* %8, i32 %492
  %494 = load i8, i8* %493, align 1, !tbaa !125
  %495 = insertelement <128 x i8> %491, i8 %494, i32 28
  %496 = extractelement <128 x i32> %379, i32 29
  %497 = getelementptr inbounds i8, i8* %8, i32 %496
  %498 = load i8, i8* %497, align 1, !tbaa !125
  %499 = insertelement <128 x i8> %495, i8 %498, i32 29
  %500 = extractelement <128 x i32> %379, i32 30
  %501 = getelementptr inbounds i8, i8* %8, i32 %500
  %502 = load i8, i8* %501, align 1, !tbaa !125
  %503 = insertelement <128 x i8> %499, i8 %502, i32 30
  %504 = extractelement <128 x i32> %379, i32 31
  %505 = getelementptr inbounds i8, i8* %8, i32 %504
  %506 = load i8, i8* %505, align 1, !tbaa !125
  %507 = insertelement <128 x i8> %503, i8 %506, i32 31
  %508 = extractelement <128 x i32> %379, i32 32
  %509 = getelementptr inbounds i8, i8* %8, i32 %508
  %510 = load i8, i8* %509, align 1, !tbaa !125
  %511 = insertelement <128 x i8> %507, i8 %510, i32 32
  %512 = extractelement <128 x i32> %379, i32 33
  %513 = getelementptr inbounds i8, i8* %8, i32 %512
  %514 = load i8, i8* %513, align 1, !tbaa !125
  %515 = insertelement <128 x i8> %511, i8 %514, i32 33
  %516 = extractelement <128 x i32> %379, i32 34
  %517 = getelementptr inbounds i8, i8* %8, i32 %516
  %518 = load i8, i8* %517, align 1, !tbaa !125
  %519 = insertelement <128 x i8> %515, i8 %518, i32 34
  %520 = extractelement <128 x i32> %379, i32 35
  %521 = getelementptr inbounds i8, i8* %8, i32 %520
  %522 = load i8, i8* %521, align 1, !tbaa !125
  %523 = insertelement <128 x i8> %519, i8 %522, i32 35
  %524 = extractelement <128 x i32> %379, i32 36
  %525 = getelementptr inbounds i8, i8* %8, i32 %524
  %526 = load i8, i8* %525, align 1, !tbaa !125
  %527 = insertelement <128 x i8> %523, i8 %526, i32 36
  %528 = extractelement <128 x i32> %379, i32 37
  %529 = getelementptr inbounds i8, i8* %8, i32 %528
  %530 = load i8, i8* %529, align 1, !tbaa !125
  %531 = insertelement <128 x i8> %527, i8 %530, i32 37
  %532 = extractelement <128 x i32> %379, i32 38
  %533 = getelementptr inbounds i8, i8* %8, i32 %532
  %534 = load i8, i8* %533, align 1, !tbaa !125
  %535 = insertelement <128 x i8> %531, i8 %534, i32 38
  %536 = extractelement <128 x i32> %379, i32 39
  %537 = getelementptr inbounds i8, i8* %8, i32 %536
  %538 = load i8, i8* %537, align 1, !tbaa !125
  %539 = insertelement <128 x i8> %535, i8 %538, i32 39
  %540 = extractelement <128 x i32> %379, i32 40
  %541 = getelementptr inbounds i8, i8* %8, i32 %540
  %542 = load i8, i8* %541, align 1, !tbaa !125
  %543 = insertelement <128 x i8> %539, i8 %542, i32 40
  %544 = extractelement <128 x i32> %379, i32 41
  %545 = getelementptr inbounds i8, i8* %8, i32 %544
  %546 = load i8, i8* %545, align 1, !tbaa !125
  %547 = insertelement <128 x i8> %543, i8 %546, i32 41
  %548 = extractelement <128 x i32> %379, i32 42
  %549 = getelementptr inbounds i8, i8* %8, i32 %548
  %550 = load i8, i8* %549, align 1, !tbaa !125
  %551 = insertelement <128 x i8> %547, i8 %550, i32 42
  %552 = extractelement <128 x i32> %379, i32 43
  %553 = getelementptr inbounds i8, i8* %8, i32 %552
  %554 = load i8, i8* %553, align 1, !tbaa !125
  %555 = insertelement <128 x i8> %551, i8 %554, i32 43
  %556 = extractelement <128 x i32> %379, i32 44
  %557 = getelementptr inbounds i8, i8* %8, i32 %556
  %558 = load i8, i8* %557, align 1, !tbaa !125
  %559 = insertelement <128 x i8> %555, i8 %558, i32 44
  %560 = extractelement <128 x i32> %379, i32 45
  %561 = getelementptr inbounds i8, i8* %8, i32 %560
  %562 = load i8, i8* %561, align 1, !tbaa !125
  %563 = insertelement <128 x i8> %559, i8 %562, i32 45
  %564 = extractelement <128 x i32> %379, i32 46
  %565 = getelementptr inbounds i8, i8* %8, i32 %564
  %566 = load i8, i8* %565, align 1, !tbaa !125
  %567 = insertelement <128 x i8> %563, i8 %566, i32 46
  %568 = extractelement <128 x i32> %379, i32 47
  %569 = getelementptr inbounds i8, i8* %8, i32 %568
  %570 = load i8, i8* %569, align 1, !tbaa !125
  %571 = insertelement <128 x i8> %567, i8 %570, i32 47
  %572 = extractelement <128 x i32> %379, i32 48
  %573 = getelementptr inbounds i8, i8* %8, i32 %572
  %574 = load i8, i8* %573, align 1, !tbaa !125
  %575 = insertelement <128 x i8> %571, i8 %574, i32 48
  %576 = extractelement <128 x i32> %379, i32 49
  %577 = getelementptr inbounds i8, i8* %8, i32 %576
  %578 = load i8, i8* %577, align 1, !tbaa !125
  %579 = insertelement <128 x i8> %575, i8 %578, i32 49
  %580 = extractelement <128 x i32> %379, i32 50
  %581 = getelementptr inbounds i8, i8* %8, i32 %580
  %582 = load i8, i8* %581, align 1, !tbaa !125
  %583 = insertelement <128 x i8> %579, i8 %582, i32 50
  %584 = extractelement <128 x i32> %379, i32 51
  %585 = getelementptr inbounds i8, i8* %8, i32 %584
  %586 = load i8, i8* %585, align 1, !tbaa !125
  %587 = insertelement <128 x i8> %583, i8 %586, i32 51
  %588 = extractelement <128 x i32> %379, i32 52
  %589 = getelementptr inbounds i8, i8* %8, i32 %588
  %590 = load i8, i8* %589, align 1, !tbaa !125
  %591 = insertelement <128 x i8> %587, i8 %590, i32 52
  %592 = extractelement <128 x i32> %379, i32 53
  %593 = getelementptr inbounds i8, i8* %8, i32 %592
  %594 = load i8, i8* %593, align 1, !tbaa !125
  %595 = insertelement <128 x i8> %591, i8 %594, i32 53
  %596 = extractelement <128 x i32> %379, i32 54
  %597 = getelementptr inbounds i8, i8* %8, i32 %596
  %598 = load i8, i8* %597, align 1, !tbaa !125
  %599 = insertelement <128 x i8> %595, i8 %598, i32 54
  %600 = extractelement <128 x i32> %379, i32 55
  %601 = getelementptr inbounds i8, i8* %8, i32 %600
  %602 = load i8, i8* %601, align 1, !tbaa !125
  %603 = insertelement <128 x i8> %599, i8 %602, i32 55
  %604 = extractelement <128 x i32> %379, i32 56
  %605 = getelementptr inbounds i8, i8* %8, i32 %604
  %606 = load i8, i8* %605, align 1, !tbaa !125
  %607 = insertelement <128 x i8> %603, i8 %606, i32 56
  %608 = extractelement <128 x i32> %379, i32 57
  %609 = getelementptr inbounds i8, i8* %8, i32 %608
  %610 = load i8, i8* %609, align 1, !tbaa !125
  %611 = insertelement <128 x i8> %607, i8 %610, i32 57
  %612 = extractelement <128 x i32> %379, i32 58
  %613 = getelementptr inbounds i8, i8* %8, i32 %612
  %614 = load i8, i8* %613, align 1, !tbaa !125
  %615 = insertelement <128 x i8> %611, i8 %614, i32 58
  %616 = extractelement <128 x i32> %379, i32 59
  %617 = getelementptr inbounds i8, i8* %8, i32 %616
  %618 = load i8, i8* %617, align 1, !tbaa !125
  %619 = insertelement <128 x i8> %615, i8 %618, i32 59
  %620 = extractelement <128 x i32> %379, i32 60
  %621 = getelementptr inbounds i8, i8* %8, i32 %620
  %622 = load i8, i8* %621, align 1, !tbaa !125
  %623 = insertelement <128 x i8> %619, i8 %622, i32 60
  %624 = extractelement <128 x i32> %379, i32 61
  %625 = getelementptr inbounds i8, i8* %8, i32 %624
  %626 = load i8, i8* %625, align 1, !tbaa !125
  %627 = insertelement <128 x i8> %623, i8 %626, i32 61
  %628 = extractelement <128 x i32> %379, i32 62
  %629 = getelementptr inbounds i8, i8* %8, i32 %628
  %630 = load i8, i8* %629, align 1, !tbaa !125
  %631 = insertelement <128 x i8> %627, i8 %630, i32 62
  %632 = extractelement <128 x i32> %379, i32 63
  %633 = getelementptr inbounds i8, i8* %8, i32 %632
  %634 = load i8, i8* %633, align 1, !tbaa !125
  %635 = insertelement <128 x i8> %631, i8 %634, i32 63
  %636 = extractelement <128 x i32> %379, i32 64
  %637 = getelementptr inbounds i8, i8* %8, i32 %636
  %638 = load i8, i8* %637, align 1, !tbaa !125
  %639 = insertelement <128 x i8> %635, i8 %638, i32 64
  %640 = extractelement <128 x i32> %379, i32 65
  %641 = getelementptr inbounds i8, i8* %8, i32 %640
  %642 = load i8, i8* %641, align 1, !tbaa !125
  %643 = insertelement <128 x i8> %639, i8 %642, i32 65
  %644 = extractelement <128 x i32> %379, i32 66
  %645 = getelementptr inbounds i8, i8* %8, i32 %644
  %646 = load i8, i8* %645, align 1, !tbaa !125
  %647 = insertelement <128 x i8> %643, i8 %646, i32 66
  %648 = extractelement <128 x i32> %379, i32 67
  %649 = getelementptr inbounds i8, i8* %8, i32 %648
  %650 = load i8, i8* %649, align 1, !tbaa !125
  %651 = insertelement <128 x i8> %647, i8 %650, i32 67
  %652 = extractelement <128 x i32> %379, i32 68
  %653 = getelementptr inbounds i8, i8* %8, i32 %652
  %654 = load i8, i8* %653, align 1, !tbaa !125
  %655 = insertelement <128 x i8> %651, i8 %654, i32 68
  %656 = extractelement <128 x i32> %379, i32 69
  %657 = getelementptr inbounds i8, i8* %8, i32 %656
  %658 = load i8, i8* %657, align 1, !tbaa !125
  %659 = insertelement <128 x i8> %655, i8 %658, i32 69
  %660 = extractelement <128 x i32> %379, i32 70
  %661 = getelementptr inbounds i8, i8* %8, i32 %660
  %662 = load i8, i8* %661, align 1, !tbaa !125
  %663 = insertelement <128 x i8> %659, i8 %662, i32 70
  %664 = extractelement <128 x i32> %379, i32 71
  %665 = getelementptr inbounds i8, i8* %8, i32 %664
  %666 = load i8, i8* %665, align 1, !tbaa !125
  %667 = insertelement <128 x i8> %663, i8 %666, i32 71
  %668 = extractelement <128 x i32> %379, i32 72
  %669 = getelementptr inbounds i8, i8* %8, i32 %668
  %670 = load i8, i8* %669, align 1, !tbaa !125
  %671 = insertelement <128 x i8> %667, i8 %670, i32 72
  %672 = extractelement <128 x i32> %379, i32 73
  %673 = getelementptr inbounds i8, i8* %8, i32 %672
  %674 = load i8, i8* %673, align 1, !tbaa !125
  %675 = insertelement <128 x i8> %671, i8 %674, i32 73
  %676 = extractelement <128 x i32> %379, i32 74
  %677 = getelementptr inbounds i8, i8* %8, i32 %676
  %678 = load i8, i8* %677, align 1, !tbaa !125
  %679 = insertelement <128 x i8> %675, i8 %678, i32 74
  %680 = extractelement <128 x i32> %379, i32 75
  %681 = getelementptr inbounds i8, i8* %8, i32 %680
  %682 = load i8, i8* %681, align 1, !tbaa !125
  %683 = insertelement <128 x i8> %679, i8 %682, i32 75
  %684 = extractelement <128 x i32> %379, i32 76
  %685 = getelementptr inbounds i8, i8* %8, i32 %684
  %686 = load i8, i8* %685, align 1, !tbaa !125
  %687 = insertelement <128 x i8> %683, i8 %686, i32 76
  %688 = extractelement <128 x i32> %379, i32 77
  %689 = getelementptr inbounds i8, i8* %8, i32 %688
  %690 = load i8, i8* %689, align 1, !tbaa !125
  %691 = insertelement <128 x i8> %687, i8 %690, i32 77
  %692 = extractelement <128 x i32> %379, i32 78
  %693 = getelementptr inbounds i8, i8* %8, i32 %692
  %694 = load i8, i8* %693, align 1, !tbaa !125
  %695 = insertelement <128 x i8> %691, i8 %694, i32 78
  %696 = extractelement <128 x i32> %379, i32 79
  %697 = getelementptr inbounds i8, i8* %8, i32 %696
  %698 = load i8, i8* %697, align 1, !tbaa !125
  %699 = insertelement <128 x i8> %695, i8 %698, i32 79
  %700 = extractelement <128 x i32> %379, i32 80
  %701 = getelementptr inbounds i8, i8* %8, i32 %700
  %702 = load i8, i8* %701, align 1, !tbaa !125
  %703 = insertelement <128 x i8> %699, i8 %702, i32 80
  %704 = extractelement <128 x i32> %379, i32 81
  %705 = getelementptr inbounds i8, i8* %8, i32 %704
  %706 = load i8, i8* %705, align 1, !tbaa !125
  %707 = insertelement <128 x i8> %703, i8 %706, i32 81
  %708 = extractelement <128 x i32> %379, i32 82
  %709 = getelementptr inbounds i8, i8* %8, i32 %708
  %710 = load i8, i8* %709, align 1, !tbaa !125
  %711 = insertelement <128 x i8> %707, i8 %710, i32 82
  %712 = extractelement <128 x i32> %379, i32 83
  %713 = getelementptr inbounds i8, i8* %8, i32 %712
  %714 = load i8, i8* %713, align 1, !tbaa !125
  %715 = insertelement <128 x i8> %711, i8 %714, i32 83
  %716 = extractelement <128 x i32> %379, i32 84
  %717 = getelementptr inbounds i8, i8* %8, i32 %716
  %718 = load i8, i8* %717, align 1, !tbaa !125
  %719 = insertelement <128 x i8> %715, i8 %718, i32 84
  %720 = extractelement <128 x i32> %379, i32 85
  %721 = getelementptr inbounds i8, i8* %8, i32 %720
  %722 = load i8, i8* %721, align 1, !tbaa !125
  %723 = insertelement <128 x i8> %719, i8 %722, i32 85
  %724 = extractelement <128 x i32> %379, i32 86
  %725 = getelementptr inbounds i8, i8* %8, i32 %724
  %726 = load i8, i8* %725, align 1, !tbaa !125
  %727 = insertelement <128 x i8> %723, i8 %726, i32 86
  %728 = extractelement <128 x i32> %379, i32 87
  %729 = getelementptr inbounds i8, i8* %8, i32 %728
  %730 = load i8, i8* %729, align 1, !tbaa !125
  %731 = insertelement <128 x i8> %727, i8 %730, i32 87
  %732 = extractelement <128 x i32> %379, i32 88
  %733 = getelementptr inbounds i8, i8* %8, i32 %732
  %734 = load i8, i8* %733, align 1, !tbaa !125
  %735 = insertelement <128 x i8> %731, i8 %734, i32 88
  %736 = extractelement <128 x i32> %379, i32 89
  %737 = getelementptr inbounds i8, i8* %8, i32 %736
  %738 = load i8, i8* %737, align 1, !tbaa !125
  %739 = insertelement <128 x i8> %735, i8 %738, i32 89
  %740 = extractelement <128 x i32> %379, i32 90
  %741 = getelementptr inbounds i8, i8* %8, i32 %740
  %742 = load i8, i8* %741, align 1, !tbaa !125
  %743 = insertelement <128 x i8> %739, i8 %742, i32 90
  %744 = extractelement <128 x i32> %379, i32 91
  %745 = getelementptr inbounds i8, i8* %8, i32 %744
  %746 = load i8, i8* %745, align 1, !tbaa !125
  %747 = insertelement <128 x i8> %743, i8 %746, i32 91
  %748 = extractelement <128 x i32> %379, i32 92
  %749 = getelementptr inbounds i8, i8* %8, i32 %748
  %750 = load i8, i8* %749, align 1, !tbaa !125
  %751 = insertelement <128 x i8> %747, i8 %750, i32 92
  %752 = extractelement <128 x i32> %379, i32 93
  %753 = getelementptr inbounds i8, i8* %8, i32 %752
  %754 = load i8, i8* %753, align 1, !tbaa !125
  %755 = insertelement <128 x i8> %751, i8 %754, i32 93
  %756 = extractelement <128 x i32> %379, i32 94
  %757 = getelementptr inbounds i8, i8* %8, i32 %756
  %758 = load i8, i8* %757, align 1, !tbaa !125
  %759 = insertelement <128 x i8> %755, i8 %758, i32 94
  %760 = extractelement <128 x i32> %379, i32 95
  %761 = getelementptr inbounds i8, i8* %8, i32 %760
  %762 = load i8, i8* %761, align 1, !tbaa !125
  %763 = insertelement <128 x i8> %759, i8 %762, i32 95
  %764 = extractelement <128 x i32> %379, i32 96
  %765 = getelementptr inbounds i8, i8* %8, i32 %764
  %766 = load i8, i8* %765, align 1, !tbaa !125
  %767 = insertelement <128 x i8> %763, i8 %766, i32 96
  %768 = extractelement <128 x i32> %379, i32 97
  %769 = getelementptr inbounds i8, i8* %8, i32 %768
  %770 = load i8, i8* %769, align 1, !tbaa !125
  %771 = insertelement <128 x i8> %767, i8 %770, i32 97
  %772 = extractelement <128 x i32> %379, i32 98
  %773 = getelementptr inbounds i8, i8* %8, i32 %772
  %774 = load i8, i8* %773, align 1, !tbaa !125
  %775 = insertelement <128 x i8> %771, i8 %774, i32 98
  %776 = extractelement <128 x i32> %379, i32 99
  %777 = getelementptr inbounds i8, i8* %8, i32 %776
  %778 = load i8, i8* %777, align 1, !tbaa !125
  %779 = insertelement <128 x i8> %775, i8 %778, i32 99
  %780 = extractelement <128 x i32> %379, i32 100
  %781 = getelementptr inbounds i8, i8* %8, i32 %780
  %782 = load i8, i8* %781, align 1, !tbaa !125
  %783 = insertelement <128 x i8> %779, i8 %782, i32 100
  %784 = extractelement <128 x i32> %379, i32 101
  %785 = getelementptr inbounds i8, i8* %8, i32 %784
  %786 = load i8, i8* %785, align 1, !tbaa !125
  %787 = insertelement <128 x i8> %783, i8 %786, i32 101
  %788 = extractelement <128 x i32> %379, i32 102
  %789 = getelementptr inbounds i8, i8* %8, i32 %788
  %790 = load i8, i8* %789, align 1, !tbaa !125
  %791 = insertelement <128 x i8> %787, i8 %790, i32 102
  %792 = extractelement <128 x i32> %379, i32 103
  %793 = getelementptr inbounds i8, i8* %8, i32 %792
  %794 = load i8, i8* %793, align 1, !tbaa !125
  %795 = insertelement <128 x i8> %791, i8 %794, i32 103
  %796 = extractelement <128 x i32> %379, i32 104
  %797 = getelementptr inbounds i8, i8* %8, i32 %796
  %798 = load i8, i8* %797, align 1, !tbaa !125
  %799 = insertelement <128 x i8> %795, i8 %798, i32 104
  %800 = extractelement <128 x i32> %379, i32 105
  %801 = getelementptr inbounds i8, i8* %8, i32 %800
  %802 = load i8, i8* %801, align 1, !tbaa !125
  %803 = insertelement <128 x i8> %799, i8 %802, i32 105
  %804 = extractelement <128 x i32> %379, i32 106
  %805 = getelementptr inbounds i8, i8* %8, i32 %804
  %806 = load i8, i8* %805, align 1, !tbaa !125
  %807 = insertelement <128 x i8> %803, i8 %806, i32 106
  %808 = extractelement <128 x i32> %379, i32 107
  %809 = getelementptr inbounds i8, i8* %8, i32 %808
  %810 = load i8, i8* %809, align 1, !tbaa !125
  %811 = insertelement <128 x i8> %807, i8 %810, i32 107
  %812 = extractelement <128 x i32> %379, i32 108
  %813 = getelementptr inbounds i8, i8* %8, i32 %812
  %814 = load i8, i8* %813, align 1, !tbaa !125
  %815 = insertelement <128 x i8> %811, i8 %814, i32 108
  %816 = extractelement <128 x i32> %379, i32 109
  %817 = getelementptr inbounds i8, i8* %8, i32 %816
  %818 = load i8, i8* %817, align 1, !tbaa !125
  %819 = insertelement <128 x i8> %815, i8 %818, i32 109
  %820 = extractelement <128 x i32> %379, i32 110
  %821 = getelementptr inbounds i8, i8* %8, i32 %820
  %822 = load i8, i8* %821, align 1, !tbaa !125
  %823 = insertelement <128 x i8> %819, i8 %822, i32 110
  %824 = extractelement <128 x i32> %379, i32 111
  %825 = getelementptr inbounds i8, i8* %8, i32 %824
  %826 = load i8, i8* %825, align 1, !tbaa !125
  %827 = insertelement <128 x i8> %823, i8 %826, i32 111
  %828 = extractelement <128 x i32> %379, i32 112
  %829 = getelementptr inbounds i8, i8* %8, i32 %828
  %830 = load i8, i8* %829, align 1, !tbaa !125
  %831 = insertelement <128 x i8> %827, i8 %830, i32 112
  %832 = extractelement <128 x i32> %379, i32 113
  %833 = getelementptr inbounds i8, i8* %8, i32 %832
  %834 = load i8, i8* %833, align 1, !tbaa !125
  %835 = insertelement <128 x i8> %831, i8 %834, i32 113
  %836 = extractelement <128 x i32> %379, i32 114
  %837 = getelementptr inbounds i8, i8* %8, i32 %836
  %838 = load i8, i8* %837, align 1, !tbaa !125
  %839 = insertelement <128 x i8> %835, i8 %838, i32 114
  %840 = extractelement <128 x i32> %379, i32 115
  %841 = getelementptr inbounds i8, i8* %8, i32 %840
  %842 = load i8, i8* %841, align 1, !tbaa !125
  %843 = insertelement <128 x i8> %839, i8 %842, i32 115
  %844 = extractelement <128 x i32> %379, i32 116
  %845 = getelementptr inbounds i8, i8* %8, i32 %844
  %846 = load i8, i8* %845, align 1, !tbaa !125
  %847 = insertelement <128 x i8> %843, i8 %846, i32 116
  %848 = extractelement <128 x i32> %379, i32 117
  %849 = getelementptr inbounds i8, i8* %8, i32 %848
  %850 = load i8, i8* %849, align 1, !tbaa !125
  %851 = insertelement <128 x i8> %847, i8 %850, i32 117
  %852 = extractelement <128 x i32> %379, i32 118
  %853 = getelementptr inbounds i8, i8* %8, i32 %852
  %854 = load i8, i8* %853, align 1, !tbaa !125
  %855 = insertelement <128 x i8> %851, i8 %854, i32 118
  %856 = extractelement <128 x i32> %379, i32 119
  %857 = getelementptr inbounds i8, i8* %8, i32 %856
  %858 = load i8, i8* %857, align 1, !tbaa !125
  %859 = insertelement <128 x i8> %855, i8 %858, i32 119
  %860 = extractelement <128 x i32> %379, i32 120
  %861 = getelementptr inbounds i8, i8* %8, i32 %860
  %862 = load i8, i8* %861, align 1, !tbaa !125
  %863 = insertelement <128 x i8> %859, i8 %862, i32 120
  %864 = extractelement <128 x i32> %379, i32 121
  %865 = getelementptr inbounds i8, i8* %8, i32 %864
  %866 = load i8, i8* %865, align 1, !tbaa !125
  %867 = insertelement <128 x i8> %863, i8 %866, i32 121
  %868 = extractelement <128 x i32> %379, i32 122
  %869 = getelementptr inbounds i8, i8* %8, i32 %868
  %870 = load i8, i8* %869, align 1, !tbaa !125
  %871 = insertelement <128 x i8> %867, i8 %870, i32 122
  %872 = extractelement <128 x i32> %379, i32 123
  %873 = getelementptr inbounds i8, i8* %8, i32 %872
  %874 = load i8, i8* %873, align 1, !tbaa !125
  %875 = insertelement <128 x i8> %871, i8 %874, i32 123
  %876 = extractelement <128 x i32> %379, i32 124
  %877 = getelementptr inbounds i8, i8* %8, i32 %876
  %878 = load i8, i8* %877, align 1, !tbaa !125
  %879 = insertelement <128 x i8> %875, i8 %878, i32 124
  %880 = extractelement <128 x i32> %379, i32 125
  %881 = getelementptr inbounds i8, i8* %8, i32 %880
  %882 = load i8, i8* %881, align 1, !tbaa !125
  %883 = insertelement <128 x i8> %879, i8 %882, i32 125
  %884 = extractelement <128 x i32> %379, i32 126
  %885 = getelementptr inbounds i8, i8* %8, i32 %884
  %886 = load i8, i8* %885, align 1, !tbaa !125
  %887 = insertelement <128 x i8> %883, i8 %886, i32 126
  %888 = extractelement <128 x i32> %379, i32 127
  %889 = getelementptr inbounds i8, i8* %8, i32 %888
  %890 = load i8, i8* %889, align 1, !tbaa !125
  %891 = insertelement <128 x i8> %887, i8 %890, i32 127
  %892 = add nsw i32 %t2248.us, %resampled_input.s0.x.rebased14.us
  %893 = shl nsw i32 %892, 7
  %894 = getelementptr inbounds i8, i8* %resampled_input, i32 %893
  %895 = bitcast i8* %894 to <128 x i8>*
  store <128 x i8> %891, <128 x i8>* %895, align 128, !tbaa !127
  %896 = add nuw nsw i32 %resampled_input.s0.x.rebased14.us, 1
  %.not750.us = icmp eq i32 %resampled_input.s0.x.rebased14.us, %t2228
  br i1 %.not750.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %897 = add nuw nsw i32 %resampled_input.s0.y.rebased11.us, 1
  %.not747.us = icmp eq i32 %resampled_input.s0.y.rebased11.us, %t2227
  br i1 %.not747.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7, %"for resampled_input.s0.y.rebased9.preheader"
  %898 = mul nsw i32 %346, %25
  %t2255 = add i32 %302, %898
  br i1 %142, label %"for output.s0.y.yo", label %"end for output.s0.y.yo", !prof !101

"for output.s0.y.yo":                             ; preds = %"consume resampled_input", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %938, %"end for output.s0.x.xo" ], [ 0, %"consume resampled_input" ]
  %a31 = shl nuw nsw i32 %output.s0.y.yo, 1
  %899 = icmp slt i32 %a31, %b33
  %output.s0.y.y.base.s = select i1 %899, i32 %a31, i32 %b33
  %900 = add nsw i32 %output.s0.y.y.base.s, %22
  %901 = mul nsw i32 %900, %stride_y
  %902 = add nsw i32 %901, %143
  %t2283 = mul nsw i32 %902, %128
  %903 = add nsw i32 %901, %144
  %t2286 = mul nsw i32 %903, %128
  %904 = add nsw i32 %900, 1
  %905 = mul nsw i32 %904, %stride_y
  %906 = add nsw i32 %905, %143
  %t2288 = mul nsw i32 %906, %128
  %907 = add nsw i32 %905, %144
  %t2289 = mul nsw i32 %907, %128
  %908 = sub nsw i32 %901, %t2223
  %t2291 = mul nsw i32 %908, %128
  %909 = sub nsw i32 %905, %t2223
  %t2293 = mul nsw i32 %909, %128
  br i1 %147, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !101

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %910 = add nsw i32 %t2283, %179
  %911 = add nsw i32 %t2283, %180
  %912 = sub nsw i32 %t2283, %t2225
  %913 = add nsw i32 %t2286, %179
  %914 = add nsw i32 %t2286, %180
  %915 = sub nsw i32 %t2286, %t2225
  %916 = add nsw i32 %t2291, %179
  %917 = add nsw i32 %t2291, %180
  %918 = sub nsw i32 %t2291, %t2225
  %919 = add nsw i32 %t2288, %179
  %920 = add nsw i32 %t2288, %180
  %921 = sub nsw i32 %t2288, %t2225
  %922 = add nsw i32 %t2289, %179
  %923 = add nsw i32 %t2289, %180
  %924 = sub nsw i32 %t2289, %t2225
  %925 = add nsw i32 %t2293, %179
  %926 = add nsw i32 %t2293, %180
  %927 = sub nsw i32 %t2293, %t2225
  %928 = mul nsw i32 %900, %24
  %929 = add nsw i32 %928, %t2255
  %930 = mul nsw i32 %904, %24
  %931 = add nsw i32 %930, %t2255
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %932 = add nuw nsw i32 %output.s0.b.rebased, 1
  %.not741 = icmp eq i32 %932, %15
  br i1 %.not741, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %2340, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a32 = shl nuw nsw i32 %output.s0.x.xo, 1
  %933 = icmp slt i32 %a32, %b34
  %output.s0.x.x.base.s = select i1 %933, i32 %a32, i32 %b34
  %934 = load <32 x i32>, <32 x i32>* %97, align 128, !tbaa !109
  %935 = load <32 x i32>, <32 x i32>* %99, align 128, !tbaa !117
  %936 = load <32 x i32>, <32 x i32>* %101, align 128, !tbaa !119
  %937 = load <32 x i32>, <32 x i32>* %103, align 128, !tbaa !122
  store <32 x i32> %934, <32 x i32>* %148, align 128, !tbaa !129
  store <32 x i32> %935, <32 x i32>* %150, align 128, !tbaa !137
  store <32 x i32> %936, <32 x i32>* %152, align 128, !tbaa !139
  store <32 x i32> %937, <32 x i32>* %154, align 128, !tbaa !142
  store <32 x i32> %934, <32 x i32>* %156, align 128, !tbaa !144
  store <32 x i32> %935, <32 x i32>* %158, align 128, !tbaa !148
  store <32 x i32> %936, <32 x i32>* %160, align 128, !tbaa !150
  store <32 x i32> %937, <32 x i32>* %162, align 128, !tbaa !153
  store <32 x i32> %934, <32 x i32>* %164, align 128, !tbaa !155
  store <32 x i32> %935, <32 x i32>* %166, align 128, !tbaa !160
  store <32 x i32> %936, <32 x i32>* %168, align 128, !tbaa !162
  store <32 x i32> %937, <32 x i32>* %170, align 128, !tbaa !165
  store <32 x i32> %934, <32 x i32>* %172, align 128, !tbaa !167
  store <32 x i32> %935, <32 x i32>* %174, align 128, !tbaa !171
  store <32 x i32> %936, <32 x i32>* %176, align 128, !tbaa !173
  store <32 x i32> %937, <32 x i32>* %178, align 128, !tbaa !176
  br i1 %t2217, label %then_bb17, label %next_bb18

"end for output.s0.x.xo":                         ; preds = %"consume convolved", %"for output.s0.y.yo"
  %938 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not742 = icmp eq i32 %938, %141
  br i1 %.not742, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb17:                                        ; preds = %"for output.s0.x.xo"
  %939 = load <64 x i16>, <64 x i16>* %305, align 128, !tbaa !105
  %940 = add nsw i32 %output.s0.x.x.base.s, %19
  %941 = mul nsw i32 %940, %stride_x
  %942 = add nsw i32 %941, %910
  %943 = shl nsw i32 %942, 7
  %944 = getelementptr inbounds i8, i8* %resampled_input, i32 %943
  %945 = bitcast i8* %944 to <64 x i8>*
  %946 = load <64 x i8>, <64 x i8>* %945, align 128, !tbaa !127
  %947 = zext <64 x i8> %946 to <64 x i16>
  %948 = load <64 x i16>, <64 x i16>* %307, align 128, !tbaa !105
  %949 = add nsw i32 %941, %911
  %950 = shl nsw i32 %949, 7
  %951 = getelementptr inbounds i8, i8* %resampled_input, i32 %950
  %952 = bitcast i8* %951 to <64 x i8>*
  %953 = load <64 x i8>, <64 x i8>* %952, align 128, !tbaa !127
  %954 = zext <64 x i8> %953 to <64 x i16>
  %955 = load <64 x i16>, <64 x i16>* %308, align 128, !tbaa !105
  %956 = add nsw i32 %941, %912
  %957 = shl nsw i32 %956, 7
  %958 = getelementptr inbounds i8, i8* %resampled_input, i32 %957
  %959 = bitcast i8* %958 to <64 x i8>*
  %960 = load <64 x i8>, <64 x i8>* %959, align 128, !tbaa !127
  %961 = zext <64 x i8> %960 to <64 x i16>
  %962 = load <64 x i16>, <64 x i16>* %311, align 128, !tbaa !105
  %963 = add nsw i32 %941, %913
  %964 = shl nsw i32 %963, 7
  %965 = getelementptr inbounds i8, i8* %resampled_input, i32 %964
  %966 = bitcast i8* %965 to <64 x i8>*
  %967 = load <64 x i8>, <64 x i8>* %966, align 128, !tbaa !127
  %968 = zext <64 x i8> %967 to <64 x i16>
  %969 = load <64 x i16>, <64 x i16>* %313, align 128, !tbaa !105
  %970 = add nsw i32 %941, %914
  %971 = shl nsw i32 %970, 7
  %972 = getelementptr inbounds i8, i8* %resampled_input, i32 %971
  %973 = bitcast i8* %972 to <64 x i8>*
  %974 = load <64 x i8>, <64 x i8>* %973, align 128, !tbaa !127
  %975 = zext <64 x i8> %974 to <64 x i16>
  %976 = load <64 x i16>, <64 x i16>* %314, align 128, !tbaa !105
  %977 = add nsw i32 %941, %915
  %978 = shl nsw i32 %977, 7
  %979 = getelementptr inbounds i8, i8* %resampled_input, i32 %978
  %980 = bitcast i8* %979 to <64 x i8>*
  %981 = load <64 x i8>, <64 x i8>* %980, align 128, !tbaa !127
  %982 = zext <64 x i8> %981 to <64 x i16>
  %983 = load <64 x i16>, <64 x i16>* %316, align 128, !tbaa !178
  %984 = add nsw i32 %941, %916
  %985 = shl nsw i32 %984, 7
  %986 = getelementptr inbounds i8, i8* %resampled_input, i32 %985
  %987 = bitcast i8* %986 to <64 x i8>*
  %988 = load <64 x i8>, <64 x i8>* %987, align 128, !tbaa !127
  %989 = zext <64 x i8> %988 to <64 x i16>
  %990 = load <64 x i16>, <64 x i16>* %318, align 128, !tbaa !184
  %991 = add nsw i32 %941, %917
  %992 = shl nsw i32 %991, 7
  %993 = getelementptr inbounds i8, i8* %resampled_input, i32 %992
  %994 = bitcast i8* %993 to <64 x i8>*
  %995 = load <64 x i8>, <64 x i8>* %994, align 128, !tbaa !127
  %996 = zext <64 x i8> %995 to <64 x i16>
  %997 = load <64 x i16>, <64 x i16>* %319, align 128, !tbaa !188
  %998 = add nsw i32 %941, %918
  %999 = shl nsw i32 %998, 7
  %1000 = getelementptr inbounds i8, i8* %resampled_input, i32 %999
  %1001 = bitcast i8* %1000 to <64 x i8>*
  %1002 = load <64 x i8>, <64 x i8>* %1001, align 128, !tbaa !127
  %1003 = zext <64 x i8> %1002 to <64 x i16>
  %1004 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %935, <32 x i32> %934)
  %1005 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %955, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1006 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %961, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1007 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1005, <64 x i16> %1006, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1008 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %976, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1009 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %982, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1010 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1008, <64 x i16> %1009, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1011 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %997, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1012 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1003, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1013 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1011, <64 x i16> %1012, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1014 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1013, <64 x i32> %1004, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1015 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %983, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1016 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %989, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1017 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1014, <64 x i16> %1015, <64 x i16> %1016, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1018 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %990, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1019 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %996, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1020 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1018, <64 x i16> %1019, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1021 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1017, <64 x i32> %1020, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1022 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1010, <64 x i32> %1021, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1023 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %962, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1024 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %968, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1025 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1022, <64 x i16> %1023, <64 x i16> %1024, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1026 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %969, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1027 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %975, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1028 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1026, <64 x i16> %1027, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1029 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1025, <64 x i32> %1028, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1030 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1007, <64 x i32> %1029, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1031 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %939, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1032 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %947, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1033 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1030, <64 x i16> %1031, <64 x i16> %1032, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1034 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %948, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1035 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %954, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1036 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1034, <64 x i16> %1035, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1037 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1033, <64 x i32> %1036, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1038 = load <64 x i16>, <64 x i16>* %321, align 128, !tbaa !105
  %1039 = getelementptr inbounds i8, i8* %944, i32 64
  %1040 = bitcast i8* %1039 to <64 x i8>*
  %1041 = load <64 x i8>, <64 x i8>* %1040, align 64, !tbaa !127
  %1042 = zext <64 x i8> %1041 to <64 x i16>
  %1043 = load <64 x i16>, <64 x i16>* %323, align 128, !tbaa !105
  %1044 = getelementptr inbounds i8, i8* %951, i32 64
  %1045 = bitcast i8* %1044 to <64 x i8>*
  %1046 = load <64 x i8>, <64 x i8>* %1045, align 64, !tbaa !127
  %1047 = zext <64 x i8> %1046 to <64 x i16>
  %1048 = load <64 x i16>, <64 x i16>* %325, align 128, !tbaa !105
  %1049 = getelementptr inbounds i8, i8* %958, i32 64
  %1050 = bitcast i8* %1049 to <64 x i8>*
  %1051 = load <64 x i8>, <64 x i8>* %1050, align 64, !tbaa !127
  %1052 = zext <64 x i8> %1051 to <64 x i16>
  %1053 = load <64 x i16>, <64 x i16>* %327, align 128, !tbaa !105
  %1054 = getelementptr inbounds i8, i8* %965, i32 64
  %1055 = bitcast i8* %1054 to <64 x i8>*
  %1056 = load <64 x i8>, <64 x i8>* %1055, align 64, !tbaa !127
  %1057 = zext <64 x i8> %1056 to <64 x i16>
  %1058 = load <64 x i16>, <64 x i16>* %329, align 128, !tbaa !105
  %1059 = getelementptr inbounds i8, i8* %972, i32 64
  %1060 = bitcast i8* %1059 to <64 x i8>*
  %1061 = load <64 x i8>, <64 x i8>* %1060, align 64, !tbaa !127
  %1062 = zext <64 x i8> %1061 to <64 x i16>
  %1063 = load <64 x i16>, <64 x i16>* %331, align 128, !tbaa !105
  %1064 = getelementptr inbounds i8, i8* %979, i32 64
  %1065 = bitcast i8* %1064 to <64 x i8>*
  %1066 = load <64 x i8>, <64 x i8>* %1065, align 64, !tbaa !127
  %1067 = zext <64 x i8> %1066 to <64 x i16>
  %1068 = load <64 x i16>, <64 x i16>* %333, align 128, !tbaa !191
  %1069 = getelementptr inbounds i8, i8* %986, i32 64
  %1070 = bitcast i8* %1069 to <64 x i8>*
  %1071 = load <64 x i8>, <64 x i8>* %1070, align 64, !tbaa !127
  %1072 = zext <64 x i8> %1071 to <64 x i16>
  %1073 = load <64 x i16>, <64 x i16>* %335, align 128, !tbaa !193
  %1074 = getelementptr inbounds i8, i8* %993, i32 64
  %1075 = bitcast i8* %1074 to <64 x i8>*
  %1076 = load <64 x i8>, <64 x i8>* %1075, align 64, !tbaa !127
  %1077 = zext <64 x i8> %1076 to <64 x i16>
  %1078 = load <64 x i16>, <64 x i16>* %337, align 128, !tbaa !195
  %1079 = getelementptr inbounds i8, i8* %1000, i32 64
  %1080 = bitcast i8* %1079 to <64 x i8>*
  %1081 = load <64 x i8>, <64 x i8>* %1080, align 64, !tbaa !127
  %1082 = zext <64 x i8> %1081 to <64 x i16>
  %1083 = load <32 x i32>, <32 x i32>* %152, align 128, !tbaa !139
  %1084 = load <32 x i32>, <32 x i32>* %154, align 128, !tbaa !142
  %1085 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1084, <32 x i32> %1083)
  %1086 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1048, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1087 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1052, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1088 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1086, <64 x i16> %1087, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1089 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1063, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1090 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1067, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1091 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1089, <64 x i16> %1090, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1092 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1078, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1093 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1082, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1094 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1092, <64 x i16> %1093, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1095 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1094, <64 x i32> %1085, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1096 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1068, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1097 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1072, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1098 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1095, <64 x i16> %1096, <64 x i16> %1097, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1099 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1073, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1100 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1077, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1101 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1099, <64 x i16> %1100, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1102 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1098, <64 x i32> %1101, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1103 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1091, <64 x i32> %1102, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1104 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1053, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1105 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1057, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1106 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1103, <64 x i16> %1104, <64 x i16> %1105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1107 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1058, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1108 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1062, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1109 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1107, <64 x i16> %1108, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1110 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1106, <64 x i32> %1109, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1111 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1088, <64 x i32> %1110, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1112 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1038, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1113 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1042, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1114 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1111, <64 x i16> %1112, <64 x i16> %1113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1115 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1043, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1116 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1047, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1117 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1115, <64 x i16> %1116, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1118 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1114, <64 x i32> %1117, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1119 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1037)
  store <32 x i32> %1119, <32 x i32>* %148, align 128, !tbaa !129
  %1120 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1037)
  store <32 x i32> %1120, <32 x i32>* %150, align 128, !tbaa !137
  %1121 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1118)
  store <32 x i32> %1121, <32 x i32>* %152, align 128, !tbaa !139
  %1122 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1118)
  store <32 x i32> %1122, <32 x i32>* %154, align 128, !tbaa !142
  %1123 = load <64 x i16>, <64 x i16>* %305, align 128, !tbaa !105
  %1124 = add nsw i32 %940, 1
  %1125 = mul nsw i32 %1124, %stride_x
  %1126 = add nsw i32 %1125, %910
  %1127 = shl nsw i32 %1126, 7
  %1128 = getelementptr inbounds i8, i8* %resampled_input, i32 %1127
  %1129 = bitcast i8* %1128 to <64 x i8>*
  %1130 = load <64 x i8>, <64 x i8>* %1129, align 128, !tbaa !127
  %1131 = zext <64 x i8> %1130 to <64 x i16>
  %1132 = load <64 x i16>, <64 x i16>* %307, align 128, !tbaa !105
  %1133 = add nsw i32 %1125, %911
  %1134 = shl nsw i32 %1133, 7
  %1135 = getelementptr inbounds i8, i8* %resampled_input, i32 %1134
  %1136 = bitcast i8* %1135 to <64 x i8>*
  %1137 = load <64 x i8>, <64 x i8>* %1136, align 128, !tbaa !127
  %1138 = zext <64 x i8> %1137 to <64 x i16>
  %1139 = load <64 x i16>, <64 x i16>* %308, align 128, !tbaa !105
  %1140 = add nsw i32 %1125, %912
  %1141 = shl nsw i32 %1140, 7
  %1142 = getelementptr inbounds i8, i8* %resampled_input, i32 %1141
  %1143 = bitcast i8* %1142 to <64 x i8>*
  %1144 = load <64 x i8>, <64 x i8>* %1143, align 128, !tbaa !127
  %1145 = zext <64 x i8> %1144 to <64 x i16>
  %1146 = load <64 x i16>, <64 x i16>* %311, align 128, !tbaa !105
  %1147 = add nsw i32 %1125, %913
  %1148 = shl nsw i32 %1147, 7
  %1149 = getelementptr inbounds i8, i8* %resampled_input, i32 %1148
  %1150 = bitcast i8* %1149 to <64 x i8>*
  %1151 = load <64 x i8>, <64 x i8>* %1150, align 128, !tbaa !127
  %1152 = zext <64 x i8> %1151 to <64 x i16>
  %1153 = load <64 x i16>, <64 x i16>* %313, align 128, !tbaa !105
  %1154 = add nsw i32 %1125, %914
  %1155 = shl nsw i32 %1154, 7
  %1156 = getelementptr inbounds i8, i8* %resampled_input, i32 %1155
  %1157 = bitcast i8* %1156 to <64 x i8>*
  %1158 = load <64 x i8>, <64 x i8>* %1157, align 128, !tbaa !127
  %1159 = zext <64 x i8> %1158 to <64 x i16>
  %1160 = load <64 x i16>, <64 x i16>* %314, align 128, !tbaa !105
  %1161 = add nsw i32 %1125, %915
  %1162 = shl nsw i32 %1161, 7
  %1163 = getelementptr inbounds i8, i8* %resampled_input, i32 %1162
  %1164 = bitcast i8* %1163 to <64 x i8>*
  %1165 = load <64 x i8>, <64 x i8>* %1164, align 128, !tbaa !127
  %1166 = zext <64 x i8> %1165 to <64 x i16>
  %1167 = load <64 x i16>, <64 x i16>* %316, align 128, !tbaa !178
  %1168 = add nsw i32 %1125, %916
  %1169 = shl nsw i32 %1168, 7
  %1170 = getelementptr inbounds i8, i8* %resampled_input, i32 %1169
  %1171 = bitcast i8* %1170 to <64 x i8>*
  %1172 = load <64 x i8>, <64 x i8>* %1171, align 128, !tbaa !127
  %1173 = zext <64 x i8> %1172 to <64 x i16>
  %1174 = load <64 x i16>, <64 x i16>* %318, align 128, !tbaa !184
  %1175 = add nsw i32 %1125, %917
  %1176 = shl nsw i32 %1175, 7
  %1177 = getelementptr inbounds i8, i8* %resampled_input, i32 %1176
  %1178 = bitcast i8* %1177 to <64 x i8>*
  %1179 = load <64 x i8>, <64 x i8>* %1178, align 128, !tbaa !127
  %1180 = zext <64 x i8> %1179 to <64 x i16>
  %1181 = load <64 x i16>, <64 x i16>* %319, align 128, !tbaa !188
  %1182 = add nsw i32 %1125, %918
  %1183 = shl nsw i32 %1182, 7
  %1184 = getelementptr inbounds i8, i8* %resampled_input, i32 %1183
  %1185 = bitcast i8* %1184 to <64 x i8>*
  %1186 = load <64 x i8>, <64 x i8>* %1185, align 128, !tbaa !127
  %1187 = zext <64 x i8> %1186 to <64 x i16>
  %1188 = load <32 x i32>, <32 x i32>* %156, align 128, !tbaa !144
  %1189 = load <32 x i32>, <32 x i32>* %158, align 128, !tbaa !148
  %1190 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1189, <32 x i32> %1188)
  %1191 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1139, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1192 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1145, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1193 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1191, <64 x i16> %1192, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1194 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1160, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1195 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1166, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1196 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1194, <64 x i16> %1195, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1197 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1181, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1198 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1187, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1199 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1197, <64 x i16> %1198, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1200 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1199, <64 x i32> %1190, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1201 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1167, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1202 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1173, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1203 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1200, <64 x i16> %1201, <64 x i16> %1202, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1204 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1174, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1205 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1180, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1206 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1204, <64 x i16> %1205, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1207 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1203, <64 x i32> %1206, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1208 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1196, <64 x i32> %1207, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1209 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1146, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1210 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1152, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1211 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1208, <64 x i16> %1209, <64 x i16> %1210, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1212 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1153, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1213 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1159, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1214 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1212, <64 x i16> %1213, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1215 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1211, <64 x i32> %1214, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1216 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1193, <64 x i32> %1215, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1217 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1123, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1218 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1131, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1219 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1216, <64 x i16> %1217, <64 x i16> %1218, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1220 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1132, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1221 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1138, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1222 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1220, <64 x i16> %1221, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1223 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1219, <64 x i32> %1222, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1224 = load <64 x i16>, <64 x i16>* %321, align 128, !tbaa !105
  %1225 = getelementptr inbounds i8, i8* %1128, i32 64
  %1226 = bitcast i8* %1225 to <64 x i8>*
  %1227 = load <64 x i8>, <64 x i8>* %1226, align 64, !tbaa !127
  %1228 = zext <64 x i8> %1227 to <64 x i16>
  %1229 = load <64 x i16>, <64 x i16>* %323, align 128, !tbaa !105
  %1230 = getelementptr inbounds i8, i8* %1135, i32 64
  %1231 = bitcast i8* %1230 to <64 x i8>*
  %1232 = load <64 x i8>, <64 x i8>* %1231, align 64, !tbaa !127
  %1233 = zext <64 x i8> %1232 to <64 x i16>
  %1234 = load <64 x i16>, <64 x i16>* %325, align 128, !tbaa !105
  %1235 = getelementptr inbounds i8, i8* %1142, i32 64
  %1236 = bitcast i8* %1235 to <64 x i8>*
  %1237 = load <64 x i8>, <64 x i8>* %1236, align 64, !tbaa !127
  %1238 = zext <64 x i8> %1237 to <64 x i16>
  %1239 = load <64 x i16>, <64 x i16>* %327, align 128, !tbaa !105
  %1240 = getelementptr inbounds i8, i8* %1149, i32 64
  %1241 = bitcast i8* %1240 to <64 x i8>*
  %1242 = load <64 x i8>, <64 x i8>* %1241, align 64, !tbaa !127
  %1243 = zext <64 x i8> %1242 to <64 x i16>
  %1244 = load <64 x i16>, <64 x i16>* %329, align 128, !tbaa !105
  %1245 = getelementptr inbounds i8, i8* %1156, i32 64
  %1246 = bitcast i8* %1245 to <64 x i8>*
  %1247 = load <64 x i8>, <64 x i8>* %1246, align 64, !tbaa !127
  %1248 = zext <64 x i8> %1247 to <64 x i16>
  %1249 = load <64 x i16>, <64 x i16>* %331, align 128, !tbaa !105
  %1250 = getelementptr inbounds i8, i8* %1163, i32 64
  %1251 = bitcast i8* %1250 to <64 x i8>*
  %1252 = load <64 x i8>, <64 x i8>* %1251, align 64, !tbaa !127
  %1253 = zext <64 x i8> %1252 to <64 x i16>
  %1254 = load <64 x i16>, <64 x i16>* %333, align 128, !tbaa !191
  %1255 = getelementptr inbounds i8, i8* %1170, i32 64
  %1256 = bitcast i8* %1255 to <64 x i8>*
  %1257 = load <64 x i8>, <64 x i8>* %1256, align 64, !tbaa !127
  %1258 = zext <64 x i8> %1257 to <64 x i16>
  %1259 = load <64 x i16>, <64 x i16>* %335, align 128, !tbaa !193
  %1260 = getelementptr inbounds i8, i8* %1177, i32 64
  %1261 = bitcast i8* %1260 to <64 x i8>*
  %1262 = load <64 x i8>, <64 x i8>* %1261, align 64, !tbaa !127
  %1263 = zext <64 x i8> %1262 to <64 x i16>
  %1264 = load <64 x i16>, <64 x i16>* %337, align 128, !tbaa !195
  %1265 = getelementptr inbounds i8, i8* %1184, i32 64
  %1266 = bitcast i8* %1265 to <64 x i8>*
  %1267 = load <64 x i8>, <64 x i8>* %1266, align 64, !tbaa !127
  %1268 = zext <64 x i8> %1267 to <64 x i16>
  %1269 = load <32 x i32>, <32 x i32>* %160, align 128, !tbaa !150
  %1270 = load <32 x i32>, <32 x i32>* %162, align 128, !tbaa !153
  %1271 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1270, <32 x i32> %1269)
  %1272 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1234, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1273 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1238, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1274 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1272, <64 x i16> %1273, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1275 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1249, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1276 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1253, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1277 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1275, <64 x i16> %1276, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1278 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1264, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1279 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1268, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1280 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1278, <64 x i16> %1279, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1281 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1280, <64 x i32> %1271, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1282 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1254, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1283 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1258, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1284 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1281, <64 x i16> %1282, <64 x i16> %1283, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1285 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1259, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1286 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1263, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1287 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1285, <64 x i16> %1286, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1288 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1284, <64 x i32> %1287, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1289 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1277, <64 x i32> %1288, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1290 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1239, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1291 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1243, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1292 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1289, <64 x i16> %1290, <64 x i16> %1291, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1293 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1244, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1294 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1248, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1295 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1293, <64 x i16> %1294, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1296 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1292, <64 x i32> %1295, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1297 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1274, <64 x i32> %1296, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1298 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1224, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1299 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1228, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1300 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1297, <64 x i16> %1298, <64 x i16> %1299, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1301 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1229, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1302 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1233, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1303 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1301, <64 x i16> %1302, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1304 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1300, <64 x i32> %1303, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1305 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1223)
  store <32 x i32> %1305, <32 x i32>* %156, align 128, !tbaa !144
  %1306 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1223)
  store <32 x i32> %1306, <32 x i32>* %158, align 128, !tbaa !148
  %1307 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1304)
  store <32 x i32> %1307, <32 x i32>* %160, align 128, !tbaa !150
  %1308 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1304)
  store <32 x i32> %1308, <32 x i32>* %162, align 128, !tbaa !153
  %1309 = load <64 x i16>, <64 x i16>* %305, align 128, !tbaa !105
  %1310 = add nsw i32 %941, %919
  %1311 = shl nsw i32 %1310, 7
  %1312 = getelementptr inbounds i8, i8* %resampled_input, i32 %1311
  %1313 = bitcast i8* %1312 to <64 x i8>*
  %1314 = load <64 x i8>, <64 x i8>* %1313, align 128, !tbaa !127
  %1315 = zext <64 x i8> %1314 to <64 x i16>
  %1316 = load <64 x i16>, <64 x i16>* %307, align 128, !tbaa !105
  %1317 = add nsw i32 %941, %920
  %1318 = shl nsw i32 %1317, 7
  %1319 = getelementptr inbounds i8, i8* %resampled_input, i32 %1318
  %1320 = bitcast i8* %1319 to <64 x i8>*
  %1321 = load <64 x i8>, <64 x i8>* %1320, align 128, !tbaa !127
  %1322 = zext <64 x i8> %1321 to <64 x i16>
  %1323 = load <64 x i16>, <64 x i16>* %308, align 128, !tbaa !105
  %1324 = add nsw i32 %941, %921
  %1325 = shl nsw i32 %1324, 7
  %1326 = getelementptr inbounds i8, i8* %resampled_input, i32 %1325
  %1327 = bitcast i8* %1326 to <64 x i8>*
  %1328 = load <64 x i8>, <64 x i8>* %1327, align 128, !tbaa !127
  %1329 = zext <64 x i8> %1328 to <64 x i16>
  %1330 = load <64 x i16>, <64 x i16>* %311, align 128, !tbaa !105
  %1331 = add nsw i32 %941, %922
  %1332 = shl nsw i32 %1331, 7
  %1333 = getelementptr inbounds i8, i8* %resampled_input, i32 %1332
  %1334 = bitcast i8* %1333 to <64 x i8>*
  %1335 = load <64 x i8>, <64 x i8>* %1334, align 128, !tbaa !127
  %1336 = zext <64 x i8> %1335 to <64 x i16>
  %1337 = load <64 x i16>, <64 x i16>* %313, align 128, !tbaa !105
  %1338 = add nsw i32 %941, %923
  %1339 = shl nsw i32 %1338, 7
  %1340 = getelementptr inbounds i8, i8* %resampled_input, i32 %1339
  %1341 = bitcast i8* %1340 to <64 x i8>*
  %1342 = load <64 x i8>, <64 x i8>* %1341, align 128, !tbaa !127
  %1343 = zext <64 x i8> %1342 to <64 x i16>
  %1344 = load <64 x i16>, <64 x i16>* %314, align 128, !tbaa !105
  %1345 = add nsw i32 %941, %924
  %1346 = shl nsw i32 %1345, 7
  %1347 = getelementptr inbounds i8, i8* %resampled_input, i32 %1346
  %1348 = bitcast i8* %1347 to <64 x i8>*
  %1349 = load <64 x i8>, <64 x i8>* %1348, align 128, !tbaa !127
  %1350 = zext <64 x i8> %1349 to <64 x i16>
  %1351 = load <64 x i16>, <64 x i16>* %316, align 128, !tbaa !178
  %1352 = add nsw i32 %941, %925
  %1353 = shl nsw i32 %1352, 7
  %1354 = getelementptr inbounds i8, i8* %resampled_input, i32 %1353
  %1355 = bitcast i8* %1354 to <64 x i8>*
  %1356 = load <64 x i8>, <64 x i8>* %1355, align 128, !tbaa !127
  %1357 = zext <64 x i8> %1356 to <64 x i16>
  %1358 = load <64 x i16>, <64 x i16>* %318, align 128, !tbaa !184
  %1359 = add nsw i32 %941, %926
  %1360 = shl nsw i32 %1359, 7
  %1361 = getelementptr inbounds i8, i8* %resampled_input, i32 %1360
  %1362 = bitcast i8* %1361 to <64 x i8>*
  %1363 = load <64 x i8>, <64 x i8>* %1362, align 128, !tbaa !127
  %1364 = zext <64 x i8> %1363 to <64 x i16>
  %1365 = load <64 x i16>, <64 x i16>* %319, align 128, !tbaa !188
  %1366 = add nsw i32 %941, %927
  %1367 = shl nsw i32 %1366, 7
  %1368 = getelementptr inbounds i8, i8* %resampled_input, i32 %1367
  %1369 = bitcast i8* %1368 to <64 x i8>*
  %1370 = load <64 x i8>, <64 x i8>* %1369, align 128, !tbaa !127
  %1371 = zext <64 x i8> %1370 to <64 x i16>
  %1372 = load <32 x i32>, <32 x i32>* %164, align 128, !tbaa !155
  %1373 = load <32 x i32>, <32 x i32>* %166, align 128, !tbaa !160
  %1374 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1373, <32 x i32> %1372)
  %1375 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1323, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1376 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1329, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1377 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1375, <64 x i16> %1376, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1378 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1344, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1379 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1350, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1380 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1378, <64 x i16> %1379, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1381 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1365, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1382 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1371, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1383 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1381, <64 x i16> %1382, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1384 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1383, <64 x i32> %1374, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1385 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1351, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1386 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1357, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1387 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1384, <64 x i16> %1385, <64 x i16> %1386, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1388 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1358, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1389 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1364, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1390 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1388, <64 x i16> %1389, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1391 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1387, <64 x i32> %1390, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1392 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1380, <64 x i32> %1391, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1393 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1330, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1394 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1336, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1395 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1392, <64 x i16> %1393, <64 x i16> %1394, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1396 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1337, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1397 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1343, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1398 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1396, <64 x i16> %1397, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1399 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1395, <64 x i32> %1398, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1400 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1377, <64 x i32> %1399, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1401 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1309, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1402 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1315, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1403 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1400, <64 x i16> %1401, <64 x i16> %1402, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1404 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1316, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1405 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1322, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1406 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1404, <64 x i16> %1405, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1407 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1403, <64 x i32> %1406, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1408 = load <64 x i16>, <64 x i16>* %321, align 128, !tbaa !105
  %1409 = getelementptr inbounds i8, i8* %1312, i32 64
  %1410 = bitcast i8* %1409 to <64 x i8>*
  %1411 = load <64 x i8>, <64 x i8>* %1410, align 64, !tbaa !127
  %1412 = zext <64 x i8> %1411 to <64 x i16>
  %1413 = load <64 x i16>, <64 x i16>* %323, align 128, !tbaa !105
  %1414 = getelementptr inbounds i8, i8* %1319, i32 64
  %1415 = bitcast i8* %1414 to <64 x i8>*
  %1416 = load <64 x i8>, <64 x i8>* %1415, align 64, !tbaa !127
  %1417 = zext <64 x i8> %1416 to <64 x i16>
  %1418 = load <64 x i16>, <64 x i16>* %325, align 128, !tbaa !105
  %1419 = getelementptr inbounds i8, i8* %1326, i32 64
  %1420 = bitcast i8* %1419 to <64 x i8>*
  %1421 = load <64 x i8>, <64 x i8>* %1420, align 64, !tbaa !127
  %1422 = zext <64 x i8> %1421 to <64 x i16>
  %1423 = load <64 x i16>, <64 x i16>* %327, align 128, !tbaa !105
  %1424 = getelementptr inbounds i8, i8* %1333, i32 64
  %1425 = bitcast i8* %1424 to <64 x i8>*
  %1426 = load <64 x i8>, <64 x i8>* %1425, align 64, !tbaa !127
  %1427 = zext <64 x i8> %1426 to <64 x i16>
  %1428 = load <64 x i16>, <64 x i16>* %329, align 128, !tbaa !105
  %1429 = getelementptr inbounds i8, i8* %1340, i32 64
  %1430 = bitcast i8* %1429 to <64 x i8>*
  %1431 = load <64 x i8>, <64 x i8>* %1430, align 64, !tbaa !127
  %1432 = zext <64 x i8> %1431 to <64 x i16>
  %1433 = load <64 x i16>, <64 x i16>* %331, align 128, !tbaa !105
  %1434 = getelementptr inbounds i8, i8* %1347, i32 64
  %1435 = bitcast i8* %1434 to <64 x i8>*
  %1436 = load <64 x i8>, <64 x i8>* %1435, align 64, !tbaa !127
  %1437 = zext <64 x i8> %1436 to <64 x i16>
  %1438 = load <64 x i16>, <64 x i16>* %333, align 128, !tbaa !191
  %1439 = getelementptr inbounds i8, i8* %1354, i32 64
  %1440 = bitcast i8* %1439 to <64 x i8>*
  %1441 = load <64 x i8>, <64 x i8>* %1440, align 64, !tbaa !127
  %1442 = zext <64 x i8> %1441 to <64 x i16>
  %1443 = load <64 x i16>, <64 x i16>* %335, align 128, !tbaa !193
  %1444 = getelementptr inbounds i8, i8* %1361, i32 64
  %1445 = bitcast i8* %1444 to <64 x i8>*
  %1446 = load <64 x i8>, <64 x i8>* %1445, align 64, !tbaa !127
  %1447 = zext <64 x i8> %1446 to <64 x i16>
  %1448 = load <64 x i16>, <64 x i16>* %337, align 128, !tbaa !195
  %1449 = getelementptr inbounds i8, i8* %1368, i32 64
  %1450 = bitcast i8* %1449 to <64 x i8>*
  %1451 = load <64 x i8>, <64 x i8>* %1450, align 64, !tbaa !127
  %1452 = zext <64 x i8> %1451 to <64 x i16>
  %1453 = load <32 x i32>, <32 x i32>* %168, align 128, !tbaa !162
  %1454 = load <32 x i32>, <32 x i32>* %170, align 128, !tbaa !165
  %1455 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1454, <32 x i32> %1453)
  %1456 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1418, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1457 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1422, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1458 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1456, <64 x i16> %1457, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1459 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1433, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1460 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1437, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1461 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1459, <64 x i16> %1460, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1462 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1448, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1463 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1452, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1464 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1462, <64 x i16> %1463, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1465 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1464, <64 x i32> %1455, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1466 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1438, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1467 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1442, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1468 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1465, <64 x i16> %1466, <64 x i16> %1467, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1469 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1443, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1470 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1447, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1471 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1469, <64 x i16> %1470, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1472 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1468, <64 x i32> %1471, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1473 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1461, <64 x i32> %1472, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1474 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1423, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1475 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1427, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1476 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1473, <64 x i16> %1474, <64 x i16> %1475, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1477 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1428, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1478 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1432, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1479 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1477, <64 x i16> %1478, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1480 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1476, <64 x i32> %1479, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1481 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1458, <64 x i32> %1480, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1482 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1408, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1483 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1412, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1484 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1481, <64 x i16> %1482, <64 x i16> %1483, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1485 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1413, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1486 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1417, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1487 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1485, <64 x i16> %1486, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1488 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1484, <64 x i32> %1487, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1489 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1407)
  store <32 x i32> %1489, <32 x i32>* %164, align 128, !tbaa !155
  %1490 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1407)
  store <32 x i32> %1490, <32 x i32>* %166, align 128, !tbaa !160
  %1491 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1488)
  store <32 x i32> %1491, <32 x i32>* %168, align 128, !tbaa !162
  %1492 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1488)
  store <32 x i32> %1492, <32 x i32>* %170, align 128, !tbaa !165
  %1493 = load <64 x i16>, <64 x i16>* %305, align 128, !tbaa !105
  %1494 = add nsw i32 %1125, %919
  %1495 = shl nsw i32 %1494, 7
  %1496 = getelementptr inbounds i8, i8* %resampled_input, i32 %1495
  %1497 = bitcast i8* %1496 to <64 x i8>*
  %1498 = load <64 x i8>, <64 x i8>* %1497, align 128, !tbaa !127
  %1499 = zext <64 x i8> %1498 to <64 x i16>
  %1500 = load <64 x i16>, <64 x i16>* %307, align 128, !tbaa !105
  %1501 = add nsw i32 %1125, %920
  %1502 = shl nsw i32 %1501, 7
  %1503 = getelementptr inbounds i8, i8* %resampled_input, i32 %1502
  %1504 = bitcast i8* %1503 to <64 x i8>*
  %1505 = load <64 x i8>, <64 x i8>* %1504, align 128, !tbaa !127
  %1506 = zext <64 x i8> %1505 to <64 x i16>
  %1507 = load <64 x i16>, <64 x i16>* %308, align 128, !tbaa !105
  %1508 = add nsw i32 %1125, %921
  %1509 = shl nsw i32 %1508, 7
  %1510 = getelementptr inbounds i8, i8* %resampled_input, i32 %1509
  %1511 = bitcast i8* %1510 to <64 x i8>*
  %1512 = load <64 x i8>, <64 x i8>* %1511, align 128, !tbaa !127
  %1513 = zext <64 x i8> %1512 to <64 x i16>
  %1514 = load <64 x i16>, <64 x i16>* %311, align 128, !tbaa !105
  %1515 = add nsw i32 %1125, %922
  %1516 = shl nsw i32 %1515, 7
  %1517 = getelementptr inbounds i8, i8* %resampled_input, i32 %1516
  %1518 = bitcast i8* %1517 to <64 x i8>*
  %1519 = load <64 x i8>, <64 x i8>* %1518, align 128, !tbaa !127
  %1520 = zext <64 x i8> %1519 to <64 x i16>
  %1521 = load <64 x i16>, <64 x i16>* %313, align 128, !tbaa !105
  %1522 = add nsw i32 %1125, %923
  %1523 = shl nsw i32 %1522, 7
  %1524 = getelementptr inbounds i8, i8* %resampled_input, i32 %1523
  %1525 = bitcast i8* %1524 to <64 x i8>*
  %1526 = load <64 x i8>, <64 x i8>* %1525, align 128, !tbaa !127
  %1527 = zext <64 x i8> %1526 to <64 x i16>
  %1528 = load <64 x i16>, <64 x i16>* %314, align 128, !tbaa !105
  %1529 = add nsw i32 %1125, %924
  %1530 = shl nsw i32 %1529, 7
  %1531 = getelementptr inbounds i8, i8* %resampled_input, i32 %1530
  %1532 = bitcast i8* %1531 to <64 x i8>*
  %1533 = load <64 x i8>, <64 x i8>* %1532, align 128, !tbaa !127
  %1534 = zext <64 x i8> %1533 to <64 x i16>
  %1535 = load <64 x i16>, <64 x i16>* %316, align 128, !tbaa !178
  %1536 = add nsw i32 %1125, %925
  %1537 = shl nsw i32 %1536, 7
  %1538 = getelementptr inbounds i8, i8* %resampled_input, i32 %1537
  %1539 = bitcast i8* %1538 to <64 x i8>*
  %1540 = load <64 x i8>, <64 x i8>* %1539, align 128, !tbaa !127
  %1541 = zext <64 x i8> %1540 to <64 x i16>
  %1542 = load <64 x i16>, <64 x i16>* %318, align 128, !tbaa !184
  %1543 = add nsw i32 %1125, %926
  %1544 = shl nsw i32 %1543, 7
  %1545 = getelementptr inbounds i8, i8* %resampled_input, i32 %1544
  %1546 = bitcast i8* %1545 to <64 x i8>*
  %1547 = load <64 x i8>, <64 x i8>* %1546, align 128, !tbaa !127
  %1548 = zext <64 x i8> %1547 to <64 x i16>
  %1549 = load <64 x i16>, <64 x i16>* %319, align 128, !tbaa !188
  %1550 = add nsw i32 %1125, %927
  %1551 = shl nsw i32 %1550, 7
  %1552 = getelementptr inbounds i8, i8* %resampled_input, i32 %1551
  %1553 = bitcast i8* %1552 to <64 x i8>*
  %1554 = load <64 x i8>, <64 x i8>* %1553, align 128, !tbaa !127
  %1555 = zext <64 x i8> %1554 to <64 x i16>
  %1556 = load <32 x i32>, <32 x i32>* %172, align 128, !tbaa !167
  %1557 = load <32 x i32>, <32 x i32>* %174, align 128, !tbaa !171
  %1558 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1557, <32 x i32> %1556)
  %1559 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1507, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1560 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1513, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1561 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1559, <64 x i16> %1560, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1562 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1528, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1563 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1534, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1564 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1562, <64 x i16> %1563, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1565 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1549, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1566 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1555, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1567 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1565, <64 x i16> %1566, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1568 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1567, <64 x i32> %1558, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1569 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1535, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1570 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1541, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1571 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1568, <64 x i16> %1569, <64 x i16> %1570, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1572 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1542, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1573 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1548, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1574 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1572, <64 x i16> %1573, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1575 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1571, <64 x i32> %1574, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1576 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1564, <64 x i32> %1575, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1577 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1514, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1578 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1520, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1579 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1576, <64 x i16> %1577, <64 x i16> %1578, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1580 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1521, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1581 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1527, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1582 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1580, <64 x i16> %1581, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1583 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1579, <64 x i32> %1582, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1584 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1561, <64 x i32> %1583, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1585 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1493, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1586 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1499, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1587 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1584, <64 x i16> %1585, <64 x i16> %1586, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1588 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1500, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1589 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1506, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1590 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1588, <64 x i16> %1589, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1591 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1587, <64 x i32> %1590, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1592 = load <64 x i16>, <64 x i16>* %321, align 128, !tbaa !105
  %1593 = getelementptr inbounds i8, i8* %1496, i32 64
  %1594 = bitcast i8* %1593 to <64 x i8>*
  %1595 = load <64 x i8>, <64 x i8>* %1594, align 64, !tbaa !127
  %1596 = zext <64 x i8> %1595 to <64 x i16>
  %1597 = load <64 x i16>, <64 x i16>* %323, align 128, !tbaa !105
  %1598 = getelementptr inbounds i8, i8* %1503, i32 64
  %1599 = bitcast i8* %1598 to <64 x i8>*
  %1600 = load <64 x i8>, <64 x i8>* %1599, align 64, !tbaa !127
  %1601 = zext <64 x i8> %1600 to <64 x i16>
  %1602 = load <64 x i16>, <64 x i16>* %325, align 128, !tbaa !105
  %1603 = getelementptr inbounds i8, i8* %1510, i32 64
  %1604 = bitcast i8* %1603 to <64 x i8>*
  %1605 = load <64 x i8>, <64 x i8>* %1604, align 64, !tbaa !127
  %1606 = zext <64 x i8> %1605 to <64 x i16>
  %1607 = load <64 x i16>, <64 x i16>* %327, align 128, !tbaa !105
  %1608 = getelementptr inbounds i8, i8* %1517, i32 64
  %1609 = bitcast i8* %1608 to <64 x i8>*
  %1610 = load <64 x i8>, <64 x i8>* %1609, align 64, !tbaa !127
  %1611 = zext <64 x i8> %1610 to <64 x i16>
  %1612 = load <64 x i16>, <64 x i16>* %329, align 128, !tbaa !105
  %1613 = getelementptr inbounds i8, i8* %1524, i32 64
  %1614 = bitcast i8* %1613 to <64 x i8>*
  %1615 = load <64 x i8>, <64 x i8>* %1614, align 64, !tbaa !127
  %1616 = zext <64 x i8> %1615 to <64 x i16>
  %1617 = load <64 x i16>, <64 x i16>* %331, align 128, !tbaa !105
  %1618 = getelementptr inbounds i8, i8* %1531, i32 64
  %1619 = bitcast i8* %1618 to <64 x i8>*
  %1620 = load <64 x i8>, <64 x i8>* %1619, align 64, !tbaa !127
  %1621 = zext <64 x i8> %1620 to <64 x i16>
  %1622 = load <64 x i16>, <64 x i16>* %333, align 128, !tbaa !191
  %1623 = getelementptr inbounds i8, i8* %1538, i32 64
  %1624 = bitcast i8* %1623 to <64 x i8>*
  %1625 = load <64 x i8>, <64 x i8>* %1624, align 64, !tbaa !127
  %1626 = zext <64 x i8> %1625 to <64 x i16>
  %1627 = load <64 x i16>, <64 x i16>* %335, align 128, !tbaa !193
  %1628 = getelementptr inbounds i8, i8* %1545, i32 64
  %1629 = bitcast i8* %1628 to <64 x i8>*
  %1630 = load <64 x i8>, <64 x i8>* %1629, align 64, !tbaa !127
  %1631 = zext <64 x i8> %1630 to <64 x i16>
  %1632 = load <64 x i16>, <64 x i16>* %337, align 128, !tbaa !195
  %1633 = getelementptr inbounds i8, i8* %1552, i32 64
  %1634 = bitcast i8* %1633 to <64 x i8>*
  %1635 = load <64 x i8>, <64 x i8>* %1634, align 64, !tbaa !127
  %1636 = zext <64 x i8> %1635 to <64 x i16>
  %1637 = load <32 x i32>, <32 x i32>* %176, align 128, !tbaa !173
  %1638 = load <32 x i32>, <32 x i32>* %178, align 128, !tbaa !176
  %1639 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1638, <32 x i32> %1637)
  %1640 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1602, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1641 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1606, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1642 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1640, <64 x i16> %1641, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1643 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1617, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1644 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1621, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1645 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1643, <64 x i16> %1644, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1646 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1632, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1647 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1636, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1648 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1646, <64 x i16> %1647, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1649 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1648, <64 x i32> %1639, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1650 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1622, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1651 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1626, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1652 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1649, <64 x i16> %1650, <64 x i16> %1651, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1653 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1627, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1654 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1631, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1655 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1653, <64 x i16> %1654, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1656 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1652, <64 x i32> %1655, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1657 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1645, <64 x i32> %1656, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1658 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1607, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1659 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1611, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1660 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1657, <64 x i16> %1658, <64 x i16> %1659, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1661 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1612, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1662 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1616, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1663 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1661, <64 x i16> %1662, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1664 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1660, <64 x i32> %1663, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1665 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1642, <64 x i32> %1664, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1666 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1592, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1667 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1596, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1668 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1665, <64 x i16> %1666, <64 x i16> %1667, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1669 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1597, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1670 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1601, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1671 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %1669, <64 x i16> %1670, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1672 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %1668, <64 x i32> %1671, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %1673 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1591)
  store <32 x i32> %1673, <32 x i32>* %172, align 128, !tbaa !167
  %1674 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1591)
  store <32 x i32> %1674, <32 x i32>* %174, align 128, !tbaa !171
  %1675 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1672)
  store <32 x i32> %1675, <32 x i32>* %176, align 128, !tbaa !173
  %1676 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1672)
  store <32 x i32> %1676, <32 x i32>* %178, align 128, !tbaa !176
  br label %"consume convolved"

next_bb18:                                        ; preds = %"for output.s0.x.xo"
  %1677 = add nsw i32 %output.s0.x.x.base.s, %19
  br i1 %85, label %"for convolved.s1.r19$y.preheader", label %"next_bb18.consume convolved_crit_edge", !prof !101

"next_bb18.consume convolved_crit_edge":          ; preds = %next_bb18
  %.pre4849 = add nsw i32 %1677, 1
  br label %"consume convolved"

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb18
  %1678 = mul nsw i32 %1677, %stride_x
  %1679 = sub nsw i32 %1678, %t2225
  %1680 = add nsw i32 %1677, 1
  %1681 = mul nsw i32 %1680, %stride_x
  %1682 = sub nsw i32 %1681, %t2225
  br i1 %84, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !101

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %"convolved.s1.r19$y.us" = phi i32 [ %1809, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %1683 = mul nsw i32 %"convolved.s1.r19$y.us", %a68
  %1684 = add nsw i32 %1683, %908
  %t2303.us = mul nsw i32 %1684, %128
  %1685 = add nsw i32 %1683, %909
  %t2304.us = mul nsw i32 %1685, %128
  %1686 = mul nsw i32 %"convolved.s1.r19$y.us", %4
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %"convolved.s1.r19$x.us" = phi i32 [ %1808, %"for convolved.s1.r19$x.us" ], [ 0, %"for convolved.s1.r19$y.us" ]
  %1687 = add nsw i32 %"convolved.s1.r19$x.us", %1686
  %1688 = shl nsw i32 %1687, 7
  %1689 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %1688
  %1690 = bitcast i16* %1689 to <64 x i16>*
  %1691 = load <64 x i16>, <64 x i16>* %1690, align 128, !tbaa !105
  %1692 = mul nsw i32 %"convolved.s1.r19$x.us", %a73
  %1693 = add i32 %1692, %t2303.us
  %1694 = add i32 %1693, %1679
  %1695 = shl nsw i32 %1694, 7
  %1696 = getelementptr inbounds i8, i8* %resampled_input, i32 %1695
  %1697 = bitcast i8* %1696 to <64 x i8>*
  %1698 = load <64 x i8>, <64 x i8>* %1697, align 128, !tbaa !127
  %1699 = zext <64 x i8> %1698 to <64 x i16>
  %1700 = load <32 x i32>, <32 x i32>* %148, align 128, !tbaa !129
  %1701 = load <32 x i32>, <32 x i32>* %150, align 128, !tbaa !137
  %1702 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1701, <32 x i32> %1700)
  %1703 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1699, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1704 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1691, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1705 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1702, <64 x i16> %1703, <64 x i16> %1704, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1706 = getelementptr inbounds i16, i16* %1689, i32 64
  %1707 = bitcast i16* %1706 to <64 x i16>*
  %1708 = load <64 x i16>, <64 x i16>* %1707, align 128, !tbaa !105
  %1709 = getelementptr inbounds i8, i8* %1696, i32 64
  %1710 = bitcast i8* %1709 to <64 x i8>*
  %1711 = load <64 x i8>, <64 x i8>* %1710, align 64, !tbaa !127
  %1712 = zext <64 x i8> %1711 to <64 x i16>
  %1713 = load <32 x i32>, <32 x i32>* %152, align 128, !tbaa !139
  %1714 = load <32 x i32>, <32 x i32>* %154, align 128, !tbaa !142
  %1715 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1714, <32 x i32> %1713)
  %1716 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1712, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1717 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1708, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1718 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1715, <64 x i16> %1716, <64 x i16> %1717, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1719 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1705)
  store <32 x i32> %1719, <32 x i32>* %148, align 128, !tbaa !129
  %1720 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1705)
  store <32 x i32> %1720, <32 x i32>* %150, align 128, !tbaa !137
  %1721 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1718)
  store <32 x i32> %1721, <32 x i32>* %152, align 128, !tbaa !139
  %1722 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1718)
  store <32 x i32> %1722, <32 x i32>* %154, align 128, !tbaa !142
  %1723 = load <64 x i16>, <64 x i16>* %1690, align 128, !tbaa !105
  %1724 = add i32 %1693, %1682
  %1725 = shl nsw i32 %1724, 7
  %1726 = getelementptr inbounds i8, i8* %resampled_input, i32 %1725
  %1727 = bitcast i8* %1726 to <64 x i8>*
  %1728 = load <64 x i8>, <64 x i8>* %1727, align 128, !tbaa !127
  %1729 = zext <64 x i8> %1728 to <64 x i16>
  %1730 = load <32 x i32>, <32 x i32>* %156, align 128, !tbaa !144
  %1731 = load <32 x i32>, <32 x i32>* %158, align 128, !tbaa !148
  %1732 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1731, <32 x i32> %1730)
  %1733 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1729, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1734 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1723, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1735 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1732, <64 x i16> %1733, <64 x i16> %1734, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1736 = load <64 x i16>, <64 x i16>* %1707, align 128, !tbaa !105
  %1737 = getelementptr inbounds i8, i8* %1726, i32 64
  %1738 = bitcast i8* %1737 to <64 x i8>*
  %1739 = load <64 x i8>, <64 x i8>* %1738, align 64, !tbaa !127
  %1740 = zext <64 x i8> %1739 to <64 x i16>
  %1741 = load <32 x i32>, <32 x i32>* %160, align 128, !tbaa !150
  %1742 = load <32 x i32>, <32 x i32>* %162, align 128, !tbaa !153
  %1743 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1742, <32 x i32> %1741)
  %1744 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1740, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1745 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1736, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1746 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1743, <64 x i16> %1744, <64 x i16> %1745, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1747 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1735)
  store <32 x i32> %1747, <32 x i32>* %156, align 128, !tbaa !144
  %1748 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1735)
  store <32 x i32> %1748, <32 x i32>* %158, align 128, !tbaa !148
  %1749 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1746)
  store <32 x i32> %1749, <32 x i32>* %160, align 128, !tbaa !150
  %1750 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1746)
  store <32 x i32> %1750, <32 x i32>* %162, align 128, !tbaa !153
  %1751 = load <64 x i16>, <64 x i16>* %1690, align 128, !tbaa !105
  %1752 = add i32 %1692, %t2304.us
  %1753 = add i32 %1752, %1679
  %1754 = shl nsw i32 %1753, 7
  %1755 = getelementptr inbounds i8, i8* %resampled_input, i32 %1754
  %1756 = bitcast i8* %1755 to <64 x i8>*
  %1757 = load <64 x i8>, <64 x i8>* %1756, align 128, !tbaa !127
  %1758 = zext <64 x i8> %1757 to <64 x i16>
  %1759 = load <32 x i32>, <32 x i32>* %164, align 128, !tbaa !155
  %1760 = load <32 x i32>, <32 x i32>* %166, align 128, !tbaa !160
  %1761 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1760, <32 x i32> %1759)
  %1762 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1758, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1763 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1751, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1764 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1761, <64 x i16> %1762, <64 x i16> %1763, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1765 = load <64 x i16>, <64 x i16>* %1707, align 128, !tbaa !105
  %1766 = getelementptr inbounds i8, i8* %1755, i32 64
  %1767 = bitcast i8* %1766 to <64 x i8>*
  %1768 = load <64 x i8>, <64 x i8>* %1767, align 64, !tbaa !127
  %1769 = zext <64 x i8> %1768 to <64 x i16>
  %1770 = load <32 x i32>, <32 x i32>* %168, align 128, !tbaa !162
  %1771 = load <32 x i32>, <32 x i32>* %170, align 128, !tbaa !165
  %1772 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1771, <32 x i32> %1770)
  %1773 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1769, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1774 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1765, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1775 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1772, <64 x i16> %1773, <64 x i16> %1774, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1776 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1764)
  store <32 x i32> %1776, <32 x i32>* %164, align 128, !tbaa !155
  %1777 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1764)
  store <32 x i32> %1777, <32 x i32>* %166, align 128, !tbaa !160
  %1778 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1775)
  store <32 x i32> %1778, <32 x i32>* %168, align 128, !tbaa !162
  %1779 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1775)
  store <32 x i32> %1779, <32 x i32>* %170, align 128, !tbaa !165
  %1780 = load <64 x i16>, <64 x i16>* %1690, align 128, !tbaa !105
  %1781 = add i32 %1752, %1682
  %1782 = shl nsw i32 %1781, 7
  %1783 = getelementptr inbounds i8, i8* %resampled_input, i32 %1782
  %1784 = bitcast i8* %1783 to <64 x i8>*
  %1785 = load <64 x i8>, <64 x i8>* %1784, align 128, !tbaa !127
  %1786 = zext <64 x i8> %1785 to <64 x i16>
  %1787 = load <32 x i32>, <32 x i32>* %172, align 128, !tbaa !167
  %1788 = load <32 x i32>, <32 x i32>* %174, align 128, !tbaa !171
  %1789 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1788, <32 x i32> %1787)
  %1790 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1786, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1791 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1780, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1792 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1789, <64 x i16> %1790, <64 x i16> %1791, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1793 = load <64 x i16>, <64 x i16>* %1707, align 128, !tbaa !105
  %1794 = getelementptr inbounds i8, i8* %1783, i32 64
  %1795 = bitcast i8* %1794 to <64 x i8>*
  %1796 = load <64 x i8>, <64 x i8>* %1795, align 64, !tbaa !127
  %1797 = zext <64 x i8> %1796 to <64 x i16>
  %1798 = load <32 x i32>, <32 x i32>* %176, align 128, !tbaa !173
  %1799 = load <32 x i32>, <32 x i32>* %178, align 128, !tbaa !176
  %1800 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1799, <32 x i32> %1798)
  %1801 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1797, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1802 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %1793, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %1803 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %1800, <64 x i16> %1801, <64 x i16> %1802, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %1804 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1792)
  store <32 x i32> %1804, <32 x i32>* %172, align 128, !tbaa !167
  %1805 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1792)
  store <32 x i32> %1805, <32 x i32>* %174, align 128, !tbaa !171
  %1806 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1803)
  store <32 x i32> %1806, <32 x i32>* %176, align 128, !tbaa !173
  %1807 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1803)
  store <32 x i32> %1807, <32 x i32>* %178, align 128, !tbaa !176
  %1808 = add nuw nsw i32 %"convolved.s1.r19$x.us", 1
  %.not746.us = icmp eq i32 %1808, %4
  br i1 %.not746.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %1809 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not745.us = icmp eq i32 %1809, %6
  br i1 %.not745.us, label %"consume convolved", label %"for convolved.s1.r19$y.us"

"consume convolved":                              ; preds = %"end for convolved.s1.r19$x.loopexit.us", %"for convolved.s1.r19$y.preheader", %"next_bb18.consume convolved_crit_edge", %then_bb17
  %.pre-phi4850 = phi i32 [ %.pre4849, %"next_bb18.consume convolved_crit_edge" ], [ %1124, %then_bb17 ], [ %1680, %"for convolved.s1.r19$y.preheader" ], [ %1680, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.pre-phi4848 = phi i32 [ %1677, %"next_bb18.consume convolved_crit_edge" ], [ %940, %then_bb17 ], [ %1677, %"for convolved.s1.r19$y.preheader" ], [ %1677, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1810 = load <32 x i32>, <32 x i32>* %148, align 128, !tbaa !129
  %1811 = load <32 x i32>, <32 x i32>* %150, align 128, !tbaa !137
  %1812 = load <32 x i32>, <32 x i32>* %152, align 128, !tbaa !139
  %1813 = load <32 x i32>, <32 x i32>* %154, align 128, !tbaa !142
  %1814 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1815 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1816 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1811, <32 x i32> %1815, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1817 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1818 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1816, <32 x i32> %1811, <32 x i32> %1817, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1819 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1814, <1 x i32> zeroinitializer, <32 x i32> %1818, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1820 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1821 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1822 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1811, <32 x i32> %1821, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1823 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1824 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1822, <32 x i32> %1811, <32 x i32> %1823, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1825 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1820, <1 x i32> zeroinitializer, <32 x i32> %1824, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1826 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1825, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1827 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1819, <64 x i16> %1826, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1828 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1829 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1830 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1810, <32 x i32> %1829, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1831 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1832 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1830, <32 x i32> %1810, <32 x i32> %1831, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1833 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1828, <1 x i32> zeroinitializer, <32 x i32> %1832, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1834 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1835 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1836 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1810, <32 x i32> %1835, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1837 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1838 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1836, <32 x i32> %1810, <32 x i32> %1837, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1839 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1834, <1 x i32> zeroinitializer, <32 x i32> %1838, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1840 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1839, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1841 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1833, <64 x i16> %1840, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1842 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %1827, <32 x i32> %1841, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %1843 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1844 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1845 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1813, <32 x i32> %1844, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1846 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1847 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1845, <32 x i32> %1813, <32 x i32> %1846, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1848 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1843, <1 x i32> zeroinitializer, <32 x i32> %1847, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1849 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1850 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1851 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1813, <32 x i32> %1850, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1852 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1853 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1851, <32 x i32> %1813, <32 x i32> %1852, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1854 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1849, <1 x i32> zeroinitializer, <32 x i32> %1853, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1855 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1854, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1856 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1848, <64 x i16> %1855, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1857 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1858 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1859 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1812, <32 x i32> %1858, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1860 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1861 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1859, <32 x i32> %1812, <32 x i32> %1860, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1862 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1857, <1 x i32> zeroinitializer, <32 x i32> %1861, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1863 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1864 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1865 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1812, <32 x i32> %1864, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1866 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1867 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1865, <32 x i32> %1812, <32 x i32> %1866, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1868 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1863, <1 x i32> zeroinitializer, <32 x i32> %1867, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1869 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1868, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1870 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1862, <64 x i16> %1869, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1871 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %1856, <32 x i32> %1870, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %1872 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %1842, <64 x i16> %1871, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %1873 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %1872, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %1874 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %1873, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %1875 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1876 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1877 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1811, <32 x i32> %1876, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1878 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1879 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1877, <32 x i32> %1811, <32 x i32> %1878, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1880 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1875, <1 x i32> zeroinitializer, <32 x i32> %1879, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1881 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1882 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1883 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1811, <32 x i32> %1882, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1884 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1885 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1883, <32 x i32> %1811, <32 x i32> %1884, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1886 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1881, <1 x i32> zeroinitializer, <32 x i32> %1885, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1887 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1886, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1888 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1880, <64 x i16> %1887, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1889 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1890 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1891 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1810, <32 x i32> %1890, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1892 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1893 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1891, <32 x i32> %1810, <32 x i32> %1892, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1894 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1889, <1 x i32> zeroinitializer, <32 x i32> %1893, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1895 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1896 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1897 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1810, <32 x i32> %1896, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1898 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1899 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1897, <32 x i32> %1810, <32 x i32> %1898, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1900 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1895, <1 x i32> zeroinitializer, <32 x i32> %1899, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1901 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1900, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1902 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1894, <64 x i16> %1901, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1903 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %1888, <32 x i32> %1902, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %1904 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1905 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1906 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1813, <32 x i32> %1905, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1907 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1908 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1906, <32 x i32> %1813, <32 x i32> %1907, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1909 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1904, <1 x i32> zeroinitializer, <32 x i32> %1908, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1910 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1911 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1912 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1813, <32 x i32> %1911, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1913 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1914 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1912, <32 x i32> %1813, <32 x i32> %1913, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1915 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1910, <1 x i32> zeroinitializer, <32 x i32> %1914, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1916 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1915, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1917 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1909, <64 x i16> %1916, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1918 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1919 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1920 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1812, <32 x i32> %1919, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1921 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1922 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1920, <32 x i32> %1812, <32 x i32> %1921, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1923 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1918, <1 x i32> zeroinitializer, <32 x i32> %1922, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1924 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1925 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1926 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1812, <32 x i32> %1925, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1927 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1928 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1926, <32 x i32> %1812, <32 x i32> %1927, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1929 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1924, <1 x i32> zeroinitializer, <32 x i32> %1928, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1930 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1929, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1931 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1923, <64 x i16> %1930, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1932 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %1917, <32 x i32> %1931, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %1933 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %1903, <64 x i16> %1932, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %1934 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %1933, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %1935 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %1934, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %1936 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %1874, <128 x i8> %1935, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0) #11
  %1937 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %187, <128 x i8> %1936, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %1938 = call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %189, <128 x i8> %1937, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %1939 = mul nsw i32 %.pre-phi4848, %21
  %1940 = add nsw i32 %1939, %929
  %1941 = getelementptr inbounds i8, i8* %17, i32 %1940
  %1942 = bitcast i8* %1941 to <128 x i8>*
  store <128 x i8> %1938, <128 x i8>* %1942, align 1, !tbaa !197
  %1943 = load <32 x i32>, <32 x i32>* %156, align 128, !tbaa !144
  %1944 = load <32 x i32>, <32 x i32>* %158, align 128, !tbaa !148
  %1945 = load <32 x i32>, <32 x i32>* %160, align 128, !tbaa !150
  %1946 = load <32 x i32>, <32 x i32>* %162, align 128, !tbaa !153
  %1947 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1948 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1949 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1944, <32 x i32> %1948, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1950 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1951 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1949, <32 x i32> %1944, <32 x i32> %1950, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1952 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1947, <1 x i32> zeroinitializer, <32 x i32> %1951, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1953 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1954 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1955 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1944, <32 x i32> %1954, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1956 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1957 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1955, <32 x i32> %1944, <32 x i32> %1956, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1958 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1953, <1 x i32> zeroinitializer, <32 x i32> %1957, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1959 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1958, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1960 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1952, <64 x i16> %1959, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1961 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1962 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1963 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1943, <32 x i32> %1962, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1964 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1965 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1963, <32 x i32> %1943, <32 x i32> %1964, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1966 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1961, <1 x i32> zeroinitializer, <32 x i32> %1965, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1967 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1968 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1969 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1943, <32 x i32> %1968, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1970 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1971 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1969, <32 x i32> %1943, <32 x i32> %1970, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1972 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1967, <1 x i32> zeroinitializer, <32 x i32> %1971, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1973 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1972, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1974 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1966, <64 x i16> %1973, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1975 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %1960, <32 x i32> %1974, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %1976 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1977 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1978 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1946, <32 x i32> %1977, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1979 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1980 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1978, <32 x i32> %1946, <32 x i32> %1979, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1981 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1976, <1 x i32> zeroinitializer, <32 x i32> %1980, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1982 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1983 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1984 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1946, <32 x i32> %1983, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1985 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1986 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1984, <32 x i32> %1946, <32 x i32> %1985, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1987 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1982, <1 x i32> zeroinitializer, <32 x i32> %1986, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1988 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %1987, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %1989 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1981, <64 x i16> %1988, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %1990 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1991 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1992 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1945, <32 x i32> %1991, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1993 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1994 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1992, <32 x i32> %1945, <32 x i32> %1993, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %1995 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1990, <1 x i32> zeroinitializer, <32 x i32> %1994, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %1996 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1997 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %1998 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1945, <32 x i32> %1997, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %1999 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2000 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %1998, <32 x i32> %1945, <32 x i32> %1999, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2001 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1996, <1 x i32> zeroinitializer, <32 x i32> %2000, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2002 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2001, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2003 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %1995, <64 x i16> %2002, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2004 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %1989, <32 x i32> %2003, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2005 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %1975, <64 x i16> %2004, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2006 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %2005, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %2007 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %2006, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2008 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2009 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2010 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1944, <32 x i32> %2009, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2011 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2012 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2010, <32 x i32> %1944, <32 x i32> %2011, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2013 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2008, <1 x i32> zeroinitializer, <32 x i32> %2012, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2014 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2015 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2016 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1944, <32 x i32> %2015, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2017 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2018 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2016, <32 x i32> %1944, <32 x i32> %2017, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2019 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2014, <1 x i32> zeroinitializer, <32 x i32> %2018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2020 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2019, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2021 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2013, <64 x i16> %2020, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2022 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2023 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2024 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1943, <32 x i32> %2023, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2025 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2026 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2024, <32 x i32> %1943, <32 x i32> %2025, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2027 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2022, <1 x i32> zeroinitializer, <32 x i32> %2026, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2028 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2029 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2030 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1943, <32 x i32> %2029, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2031 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2032 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2030, <32 x i32> %1943, <32 x i32> %2031, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2033 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2028, <1 x i32> zeroinitializer, <32 x i32> %2032, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2034 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2033, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2035 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2027, <64 x i16> %2034, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2036 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2021, <32 x i32> %2035, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2037 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2038 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2039 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1946, <32 x i32> %2038, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2040 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2041 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2039, <32 x i32> %1946, <32 x i32> %2040, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2042 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2037, <1 x i32> zeroinitializer, <32 x i32> %2041, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2043 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2044 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2045 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1946, <32 x i32> %2044, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2046 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2047 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2045, <32 x i32> %1946, <32 x i32> %2046, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2048 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2043, <1 x i32> zeroinitializer, <32 x i32> %2047, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2049 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2048, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2050 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2042, <64 x i16> %2049, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2051 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2052 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2053 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1945, <32 x i32> %2052, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2054 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2055 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2053, <32 x i32> %1945, <32 x i32> %2054, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2056 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2051, <1 x i32> zeroinitializer, <32 x i32> %2055, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2057 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2058 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2059 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %1945, <32 x i32> %2058, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2060 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2061 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2059, <32 x i32> %1945, <32 x i32> %2060, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2062 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2057, <1 x i32> zeroinitializer, <32 x i32> %2061, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2063 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2062, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2064 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2056, <64 x i16> %2063, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2065 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2050, <32 x i32> %2064, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2066 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %2036, <64 x i16> %2065, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2067 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %2066, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %2068 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %2067, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %2069 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %2007, <128 x i8> %2068, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0) #11
  %2070 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %187, <128 x i8> %2069, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %2071 = call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %189, <128 x i8> %2070, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %2072 = mul nsw i32 %.pre-phi4850, %21
  %2073 = add nsw i32 %2072, %929
  %2074 = getelementptr inbounds i8, i8* %17, i32 %2073
  %2075 = bitcast i8* %2074 to <128 x i8>*
  store <128 x i8> %2071, <128 x i8>* %2075, align 1, !tbaa !197
  %2076 = load <32 x i32>, <32 x i32>* %164, align 128, !tbaa !155
  %2077 = load <32 x i32>, <32 x i32>* %166, align 128, !tbaa !160
  %2078 = load <32 x i32>, <32 x i32>* %168, align 128, !tbaa !162
  %2079 = load <32 x i32>, <32 x i32>* %170, align 128, !tbaa !165
  %2080 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2081 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2082 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2077, <32 x i32> %2081, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2083 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2084 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2082, <32 x i32> %2077, <32 x i32> %2083, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2085 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2080, <1 x i32> zeroinitializer, <32 x i32> %2084, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2086 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2087 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2088 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2077, <32 x i32> %2087, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2089 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2090 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2088, <32 x i32> %2077, <32 x i32> %2089, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2091 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2086, <1 x i32> zeroinitializer, <32 x i32> %2090, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2092 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2091, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2093 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2085, <64 x i16> %2092, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2094 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2095 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2096 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2076, <32 x i32> %2095, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2097 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2098 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2096, <32 x i32> %2076, <32 x i32> %2097, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2099 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2094, <1 x i32> zeroinitializer, <32 x i32> %2098, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2100 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2101 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2102 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2076, <32 x i32> %2101, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2103 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2104 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2102, <32 x i32> %2076, <32 x i32> %2103, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2105 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2100, <1 x i32> zeroinitializer, <32 x i32> %2104, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2106 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2105, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2107 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2099, <64 x i16> %2106, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2108 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2093, <32 x i32> %2107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2109 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2110 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2111 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2079, <32 x i32> %2110, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2112 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2113 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2111, <32 x i32> %2079, <32 x i32> %2112, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2114 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2109, <1 x i32> zeroinitializer, <32 x i32> %2113, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2115 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2116 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2117 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2079, <32 x i32> %2116, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2118 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2119 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2117, <32 x i32> %2079, <32 x i32> %2118, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2120 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2115, <1 x i32> zeroinitializer, <32 x i32> %2119, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2121 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2120, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2122 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2114, <64 x i16> %2121, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2123 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2124 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2125 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2078, <32 x i32> %2124, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2126 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2127 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2125, <32 x i32> %2078, <32 x i32> %2126, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2128 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2123, <1 x i32> zeroinitializer, <32 x i32> %2127, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2129 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2130 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2131 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2078, <32 x i32> %2130, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2132 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2133 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2131, <32 x i32> %2078, <32 x i32> %2132, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2134 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2129, <1 x i32> zeroinitializer, <32 x i32> %2133, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2135 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2134, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2136 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2128, <64 x i16> %2135, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2137 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2122, <32 x i32> %2136, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2138 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %2108, <64 x i16> %2137, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2139 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %2138, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %2140 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %2139, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2141 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2142 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2143 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2077, <32 x i32> %2142, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2144 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2145 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2143, <32 x i32> %2077, <32 x i32> %2144, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2146 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2141, <1 x i32> zeroinitializer, <32 x i32> %2145, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2147 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2148 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2149 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2077, <32 x i32> %2148, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2150 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2151 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2149, <32 x i32> %2077, <32 x i32> %2150, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2152 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2147, <1 x i32> zeroinitializer, <32 x i32> %2151, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2153 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2152, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2154 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2146, <64 x i16> %2153, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2155 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2156 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2157 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2076, <32 x i32> %2156, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2158 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2159 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2157, <32 x i32> %2076, <32 x i32> %2158, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2160 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2155, <1 x i32> zeroinitializer, <32 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2161 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2162 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2163 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2076, <32 x i32> %2162, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2164 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2165 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2163, <32 x i32> %2076, <32 x i32> %2164, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2166 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2161, <1 x i32> zeroinitializer, <32 x i32> %2165, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2167 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2166, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2168 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2160, <64 x i16> %2167, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2169 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2154, <32 x i32> %2168, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2170 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2171 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2172 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2079, <32 x i32> %2171, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2173 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2174 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2172, <32 x i32> %2079, <32 x i32> %2173, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2175 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2170, <1 x i32> zeroinitializer, <32 x i32> %2174, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2176 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2177 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2178 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2079, <32 x i32> %2177, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2179 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2180 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2178, <32 x i32> %2079, <32 x i32> %2179, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2181 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2176, <1 x i32> zeroinitializer, <32 x i32> %2180, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2182 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2181, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2183 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2175, <64 x i16> %2182, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2184 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2185 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2186 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2078, <32 x i32> %2185, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2187 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2188 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2186, <32 x i32> %2078, <32 x i32> %2187, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2189 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2184, <1 x i32> zeroinitializer, <32 x i32> %2188, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2190 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2191 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2192 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2078, <32 x i32> %2191, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2193 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2194 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2192, <32 x i32> %2078, <32 x i32> %2193, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2195 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2190, <1 x i32> zeroinitializer, <32 x i32> %2194, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2196 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2195, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2197 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2189, <64 x i16> %2196, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2198 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2183, <32 x i32> %2197, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2199 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %2169, <64 x i16> %2198, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2200 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %2199, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %2201 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %2200, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %2202 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %2140, <128 x i8> %2201, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0) #11
  %2203 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %187, <128 x i8> %2202, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %2204 = call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %189, <128 x i8> %2203, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %2205 = add nsw i32 %1939, %931
  %2206 = getelementptr inbounds i8, i8* %17, i32 %2205
  %2207 = bitcast i8* %2206 to <128 x i8>*
  store <128 x i8> %2204, <128 x i8>* %2207, align 1, !tbaa !197
  %2208 = load <32 x i32>, <32 x i32>* %172, align 128, !tbaa !167
  %2209 = load <32 x i32>, <32 x i32>* %174, align 128, !tbaa !171
  %2210 = load <32 x i32>, <32 x i32>* %176, align 128, !tbaa !173
  %2211 = load <32 x i32>, <32 x i32>* %178, align 128, !tbaa !176
  %2212 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2213 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2214 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2209, <32 x i32> %2213, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2215 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2216 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2214, <32 x i32> %2209, <32 x i32> %2215, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2217 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2212, <1 x i32> zeroinitializer, <32 x i32> %2216, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2218 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2219 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2220 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2209, <32 x i32> %2219, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2221 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2222 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2220, <32 x i32> %2209, <32 x i32> %2221, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2223 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2218, <1 x i32> zeroinitializer, <32 x i32> %2222, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2224 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2223, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2225 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2217, <64 x i16> %2224, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2226 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2227 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2228 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2208, <32 x i32> %2227, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2229 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2230 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2228, <32 x i32> %2208, <32 x i32> %2229, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2231 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2226, <1 x i32> zeroinitializer, <32 x i32> %2230, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2232 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2233 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2234 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2208, <32 x i32> %2233, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2235 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2236 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2234, <32 x i32> %2208, <32 x i32> %2235, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2237 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2232, <1 x i32> zeroinitializer, <32 x i32> %2236, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2238 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2237, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2239 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2231, <64 x i16> %2238, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2240 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2225, <32 x i32> %2239, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2241 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2242 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2243 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2211, <32 x i32> %2242, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2244 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2245 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2243, <32 x i32> %2211, <32 x i32> %2244, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2246 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2241, <1 x i32> zeroinitializer, <32 x i32> %2245, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2247 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2248 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2249 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2211, <32 x i32> %2248, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2250 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2251 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2249, <32 x i32> %2211, <32 x i32> %2250, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2252 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2247, <1 x i32> zeroinitializer, <32 x i32> %2251, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2253 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2252, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2254 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2246, <64 x i16> %2253, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2255 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2256 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2257 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2210, <32 x i32> %2256, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2258 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2259 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2257, <32 x i32> %2210, <32 x i32> %2258, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2260 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2255, <1 x i32> zeroinitializer, <32 x i32> %2259, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2261 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2262 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2263 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2210, <32 x i32> %2262, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2264 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2265 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2263, <32 x i32> %2210, <32 x i32> %2264, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2266 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2261, <1 x i32> zeroinitializer, <32 x i32> %2265, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2267 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2266, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2268 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2260, <64 x i16> %2267, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2269 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2254, <32 x i32> %2268, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2270 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %2240, <64 x i16> %2269, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2271 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %2270, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %2272 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %2271, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2273 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2274 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2275 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2209, <32 x i32> %2274, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2276 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2277 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2275, <32 x i32> %2209, <32 x i32> %2276, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2278 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2273, <1 x i32> zeroinitializer, <32 x i32> %2277, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2279 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2280 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2281 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2209, <32 x i32> %2280, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2282 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2283 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2281, <32 x i32> %2209, <32 x i32> %2282, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2284 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2279, <1 x i32> zeroinitializer, <32 x i32> %2283, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2285 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2284, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2286 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2278, <64 x i16> %2285, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2287 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2288 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2289 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2208, <32 x i32> %2288, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2290 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2291 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2289, <32 x i32> %2208, <32 x i32> %2290, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2292 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2287, <1 x i32> zeroinitializer, <32 x i32> %2291, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2293 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2294 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2295 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2208, <32 x i32> %2294, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2296 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2297 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2295, <32 x i32> %2208, <32 x i32> %2296, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2298 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2293, <1 x i32> zeroinitializer, <32 x i32> %2297, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2299 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2298, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2300 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2292, <64 x i16> %2299, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2301 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2286, <32 x i32> %2300, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2302 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2303 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2304 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2211, <32 x i32> %2303, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2305 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2306 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2304, <32 x i32> %2211, <32 x i32> %2305, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2307 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2302, <1 x i32> zeroinitializer, <32 x i32> %2306, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2308 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2309 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2310 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2211, <32 x i32> %2309, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2311 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2312 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2310, <32 x i32> %2211, <32 x i32> %2311, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2313 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2308, <1 x i32> zeroinitializer, <32 x i32> %2312, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2314 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2313, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2315 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2307, <64 x i16> %2314, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2316 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2317 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2318 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2210, <32 x i32> %2317, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2319 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2320 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2318, <32 x i32> %2210, <32 x i32> %2319, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2321 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2316, <1 x i32> zeroinitializer, <32 x i32> %2320, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2322 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2323 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2324 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %2210, <32 x i32> %2323, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %2325 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %190, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2326 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2324, <32 x i32> %2210, <32 x i32> %2325, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %2327 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2322, <1 x i32> zeroinitializer, <32 x i32> %2326, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %2328 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %2327, <32 x i32> %181, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %2329 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %2321, <64 x i16> %2328, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %2330 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %2315, <32 x i32> %2329, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %2331 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %2301, <64 x i16> %2330, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2332 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %185, <256 x i8> %2331, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %2333 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %2332, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %2334 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %2272, <128 x i8> %2333, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0) #11
  %2335 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %187, <128 x i8> %2334, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %2336 = call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %189, <128 x i8> %2335, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %2337 = add nsw i32 %2072, %931
  %2338 = getelementptr inbounds i8, i8* %17, i32 %2337
  %2339 = bitcast i8* %2338 to <128 x i8>*
  store <128 x i8> %2336, <128 x i8>* %2339, align 1, !tbaa !197
  %2340 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not744 = icmp eq i32 %2340, %146
  br i1 %.not744, label %"end for output.s0.x.xo", label %"for output.s0.x.xo"

then_bb67:                                        ; preds = %next_bb
  %t2330 = icmp slt i32 %a73, 0
  %t2332 = icmp slt i32 %stride_x, 0
  %2341 = add nsw i32 %4, -1
  %2342 = mul nsw i32 %2341, %a73
  %t2333 = select i1 %t2330, i32 %2342, i32 0
  %t2334.s = select i1 %t2332, i32 %20, i32 1
  %t2335 = icmp slt i32 %a68, 0
  %t2337 = icmp slt i32 %stride_y, 0
  %2343 = add nsw i32 %6, -1
  %2344 = mul nsw i32 %2343, %a68
  %t2338 = select i1 %t2335, i32 %2344, i32 0
  %t2339.s = select i1 %t2337, i32 %23, i32 1
  %2345 = icmp eq i32 %4, 3
  %2346 = icmp eq i32 %6, 3
  %t2340 = and i1 %2345, %2346
  %t2325 = icmp eq i32 %depth_multiplier, 1
  %a68.op717 = shl i32 %a68, 1
  %2347 = select i1 %t2335, i32 %a68.op717, i32 0
  %2348 = select i1 %t2340, i32 %2347, i32 %t2338
  %2349 = add i32 %22, -1
  %2350 = add i32 %2349, %t2339.s
  %2351 = mul nsw i32 %2350, %stride_y
  %b45 = add nsw i32 %2351, %2348
  %a73.op718 = shl i32 %a73, 1
  %2352 = select i1 %t2330, i32 %a73.op718, i32 0
  %2353 = select i1 %t2340, i32 %2352, i32 %t2333
  %2354 = add i32 %19, -1
  %2355 = add i32 %2354, %t2334.s
  %2356 = mul nsw i32 %2355, %stride_x
  %b44 = add nsw i32 %2356, %2353
  %2357 = select i1 %t2335, i32 0, i32 %2344
  %2358 = add nsw i32 %23, -1
  %2359 = select i1 %t2337, i32 0, i32 %2358
  %2360 = add nsw i32 %2359, %22
  %2361 = mul nsw i32 %2360, %stride_y
  %b50 = add nsw i32 %2361, %2357
  %2362 = select i1 %t2330, i32 0, i32 %2342
  %2363 = add nsw i32 %20, -1
  %2364 = select i1 %t2332, i32 0, i32 %2363
  %2365 = add nsw i32 %2364, %19
  %2366 = mul nsw i32 %2365, %stride_x
  %b46 = add nsw i32 %2366, %2362
  %2367 = mul nsw i32 %13, %12
  %2368 = mul nsw i32 %16, %14
  %2369 = mul nsw i32 %11, %10
  %2370 = add i32 %2367, %2369
  %t2326 = add i32 %2370, %2368
  %2371 = add nuw nsw i32 %3, 127
  %2372 = ashr i32 %2371, 7
  %b39 = add nsw i32 %3, -128
  %2373 = icmp sgt i32 %4, 0
  %2374 = icmp sgt i32 %6, 0
  %2375 = select i1 %2374, i32 %6, i32 0
  %.op4802 = shl i32 %4, 8
  %2376 = select i1 %2373, i32 %.op4802, i32 0
  %2377 = mul i32 %2376, %2375
  %2378 = or i32 %2377, 134
  %2379 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %2380 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %2381 = shufflevector <64 x i8> %2380, <64 x i8> undef, <64 x i32> zeroinitializer
  %2382 = zext <64 x i8> %2381 to <64 x i16>
  %2383 = bitcast [512 x i32]* %offset_c699 to <32 x i32>*
  %2384 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 32
  %2385 = bitcast i32* %2384 to <32 x i32>*
  %2386 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 64
  %2387 = bitcast i32* %2386 to <32 x i32>*
  %2388 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 96
  %2389 = bitcast i32* %2388 to <32 x i32>*
  %2390 = bitcast i8* %0 to i32*
  %2391 = zext i8 %input_zero to i32
  %2392 = insertelement <1 x i32> poison, i32 %2391, i32 0
  %a42 = add nsw i32 %2356, %t2333
  %2393 = icmp slt i32 %t2333, %2353
  %t2348 = select i1 %2393, i32 %a42, i32 %b44
  %a43 = add nsw i32 %2351, %t2338
  %2394 = icmp slt i32 %t2338, %2348
  %t2346 = select i1 %2394, i32 %a43, i32 %b45
  %2395 = icmp sgt i32 %a73, 0
  %2396 = select i1 %2395, i32 %a73, i32 0
  %2397 = shl nuw nsw i32 %2396, 1
  %2398 = select i1 %t2340, i32 %2397, i32 %2362
  %a44 = add nsw i32 %2366, %2398
  %2399 = icmp sgt i32 %2398, %2362
  %2400 = select i1 %2399, i32 %a44, i32 %b46
  %a54 = sub nsw i32 %2400, %t2348
  %2401 = icmp sgt i32 %a68, 0
  %2402 = select i1 %2401, i32 %a68, i32 0
  %2403 = shl nuw nsw i32 %2402, 1
  %2404 = select i1 %t2340, i32 %2403, i32 %2357
  %a48 = add nsw i32 %2361, %2404
  %2405 = icmp sgt i32 %2404, %2357
  %2406 = select i1 %2405, i32 %a48, i32 %b50
  %a55 = sub nsw i32 %2406, %t2346
  %t2351 = sub nsw i32 %b46, %a42
  %t2350 = sub nsw i32 %b50, %a43
  %2407 = icmp sgt i32 %15, 0
  %2408 = icmp sgt i32 %a54, -1
  %t2540 = select i1 %2408, i32 %a54, i32 -1
  %2409 = icmp sgt i32 %a55, -1
  %t2541 = select i1 %2409, i32 %a55, i32 -1
  %2410 = add nsw i32 %t2541, 1
  %2411 = shl i32 %t2540, 7
  %t2542 = add i32 %2411, 128
  %2412 = mul i32 %t2542, %2410
  %2413 = add i32 %2412, 131
  %2414 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %2415 = icmp sgt i32 %t2350, -1
  %2416 = sub i32 %a43, %t2346
  %2417 = add nsw i32 %a54, 1
  %2418 = sub i32 %a42, %t2348
  %2419 = icmp sgt i32 %t2351, -1
  %2420 = icmp eq i32 %depth_multiplier, 0
  %t2545 = select i1 %2420, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %2421 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %2422 = shufflevector <128 x i32> %2421, <128 x i32> undef, <128 x i32> zeroinitializer
  %2423 = sub nsw <128 x i32> %2422, %t2545
  %2424 = xor i32 %depth_multiplier.lobit, -1
  %2425 = sub nsw i32 %2424, %depth_multiplier.lobit
  %2426 = insertelement <128 x i32> undef, i32 %2425, i32 0
  %2427 = shufflevector <128 x i32> %2426, <128 x i32> undef, <128 x i32> zeroinitializer
  %2428 = xor <128 x i32> %t2545, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg4766 = mul i32 %24, %22
  %.neg4767 = mul i32 %21, %19
  %.neg4768 = mul i32 %25, %14
  %2429 = icmp sgt i32 %23, 0
  %2430 = sub i32 %a68.op717, %t2346
  %2431 = sub i32 %a68, %t2346
  %2432 = icmp sgt i32 %20, 0
  %2433 = bitcast [128 x i32]* %sum_filter701 to <32 x i32>*
  %2434 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 32
  %2435 = bitcast i32* %2434 to <32 x i32>*
  %2436 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 64
  %2437 = bitcast i32* %2436 to <32 x i32>*
  %2438 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 96
  %2439 = bitcast i32* %2438 to <32 x i32>*
  %2440 = sub nsw i32 %a73.op718, %t2348
  %2441 = sub nsw i32 %a73, %t2348
  %.not724 = icmp eq i32 %output_shift, 0
  %2442 = select i1 %.not724, <32 x i32> zeroinitializer, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2443 = add i32 %output_shift, -1
  %2444 = zext i8 %output_zero to i16
  %2445 = insertelement <128 x i16> undef, i16 %2444, i32 0
  %2446 = shufflevector <128 x i16> %2445, <128 x i16> undef, <128 x i32> zeroinitializer
  %2447 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %2448 = shufflevector <128 x i8> %2447, <128 x i8> undef, <128 x i32> zeroinitializer
  %2449 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %2450 = shufflevector <128 x i8> %2449, <128 x i8> undef, <128 x i32> zeroinitializer
  %2451 = insertelement <1 x i32> poison, i32 %output_multiplier, i32 0
  %2452 = insertelement <1 x i32> poison, i32 %output_shift, i32 0
  %2453 = insertelement <1 x i32> poison, i32 %2443, i32 0
  %reass.add4770 = add i32 %.neg4766, %.neg4767
  %reass.add4771 = add i32 %reass.add4770, %.neg4768
  %2454 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %2455 = bitcast [512 x i32]* %offset_c699 to i8*
  %2456 = bitcast [512 x i32]* %offset_c699 to i8*
  %2457 = bitcast [512 x i32]* %offset_c699 to i8*
  %2458 = or i32 %t2350, %t2351
  %2459 = icmp slt i32 %2458, 0
  br label %"for output.s0.c.co69"

next_bb68:                                        ; preds = %next_bb
  %2460 = icmp sgt i32 %3, 0
  br i1 %2460, label %if.end.i893, label %call_destructor.exit825

"for output.s0.c.co69":                           ; preds = %then_bb67, %"end for output.s0.b.rebased97"
  %.3 = phi i8* [ null, %then_bb67 ], [ %.4, %"end for output.s0.b.rebased97" ]
  %output.s0.c.co71 = phi i32 [ 0, %then_bb67 ], [ %2618, %"end for output.s0.b.rebased97" ]
  %a37 = shl nsw i32 %output.s0.c.co71, 7
  %2461 = icmp slt i32 %a37, %b39
  %output.s0.c.c.base72 = select i1 %2461, i32 %a37, i32 %b39
  %2462 = load i32, i32* %.fca.1.gep, align 4, !tbaa !98
  %cmp.i846 = icmp ult i32 %2462, %2378
  %2463 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !95
  br i1 %cmp.i846, label %if.then.i849, label %pseudostack_alloc.exit862, !prof !99

if.then.i849:                                     ; preds = %"for output.s0.c.co69"
  %tobool1.not.i848 = icmp ne i8* %2463, null
  %2464 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i851 = icmp ugt i32 %2464, 16384
  %or.cond4696 = and i1 %tobool1.not.i848, %cmp2.i851
  br i1 %or.cond4696, label %if.then3.i853, label %if.end.i857

if.then3.i853:                                    ; preds = %if.then.i849
  call void @halide_free(i8* null, i8* nonnull %2463) #14
  br label %if.end.i857

if.end.i857:                                      ; preds = %if.then3.i853, %if.then.i849
  %add.i855 = add i32 %2464, %2378
  store i32 %add.i855, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i856 = icmp ugt i32 %add.i855, 16384
  br i1 %cmp7.i856, label %if.then8.i859, label %if.end11.i861

if.then8.i859:                                    ; preds = %if.end.i857
  %call.i858 = call i8* @halide_malloc(i8* null, i32 %2378) #14
  br label %if.end11.i861

if.end11.i861:                                    ; preds = %if.then8.i859, %if.end.i857
  %storemerge.i860 = phi i8* [ %call.i858, %if.then8.i859 ], [ null, %if.end.i857 ]
  store i8* %storemerge.i860, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %2378, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %pseudostack_alloc.exit862

pseudostack_alloc.exit862:                        ; preds = %"for output.s0.c.co69", %if.end11.i861
  %2465 = phi i8* [ %storemerge.i860, %if.end11.i861 ], [ %2463, %"for output.s0.c.co69" ]
  %2466 = bitcast i8* %2465 to i16*
  %.not719 = icmp eq i8* %2465, null
  br i1 %.not719, label %then_bb74, label %"produce filter_zeroed76", !prof !100

then_bb74:                                        ; preds = %pseudostack_alloc.exit862
  %2467 = alloca i8*, i32 %2378, align 128
  %2468 = bitcast i8** %2467 to i16*
  store i8** %2467, i8*** %2379, align 4
  br label %"produce filter_zeroed76"

"produce filter_zeroed76":                        ; preds = %pseudostack_alloc.exit862, %then_bb74
  %filter_zeroed75 = phi i16* [ %2468, %then_bb74 ], [ %2466, %pseudostack_alloc.exit862 ]
  br i1 %2374, label %"for filter_zeroed.s0.y77.preheader", label %"consume sum_filter93.critedge", !prof !101

"for filter_zeroed.s0.y77.preheader":             ; preds = %"produce filter_zeroed76"
  br i1 %2373, label %"for filter_zeroed.s0.y77.us", label %"for sum_filter.s1.r19$y87.preheader.thread", !prof !101

"for sum_filter.s1.r19$y87.preheader.thread":     ; preds = %"for filter_zeroed.s0.y77.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2456, i8 0, i64 512, i1 false)
  br label %"consume sum_filter93"

"for filter_zeroed.s0.y77.us":                    ; preds = %"for filter_zeroed.s0.y77.preheader", %"end for filter_zeroed.s0.x81.loopexit.us"
  %filter_zeroed.s0.y79.us = phi i32 [ %2491, %"end for filter_zeroed.s0.x81.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y77.preheader" ]
  %2469 = mul nsw i32 %filter_zeroed.s0.y79.us, %7
  %2470 = add nsw i32 %2469, %output.s0.c.c.base72
  %2471 = mul nsw i32 %filter_zeroed.s0.y79.us, %4
  br label %"for filter_zeroed.s0.x80.us"

"for filter_zeroed.s0.x80.us":                    ; preds = %"for filter_zeroed.s0.y77.us", %"for filter_zeroed.s0.x80.us"
  %filter_zeroed.s0.x82.us = phi i32 [ %2490, %"for filter_zeroed.s0.x80.us" ], [ 0, %"for filter_zeroed.s0.y77.us" ]
  %2472 = mul nsw i32 %filter_zeroed.s0.x82.us, %5
  %2473 = add nsw i32 %2470, %2472
  %2474 = getelementptr inbounds i8, i8* %1, i32 %2473
  %2475 = bitcast i8* %2474 to <64 x i8>*
  %2476 = load <64 x i8>, <64 x i8>* %2475, align 1, !tbaa !102
  %2477 = zext <64 x i8> %2476 to <64 x i16>
  %2478 = call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %2477, <64 x i16> %2382, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0) #11
  %2479 = add nsw i32 %filter_zeroed.s0.x82.us, %2471
  %2480 = shl nsw i32 %2479, 7
  %2481 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2480
  %2482 = bitcast i16* %2481 to <64 x i16>*
  store <64 x i16> %2478, <64 x i16>* %2482, align 128, !tbaa !105
  %2483 = getelementptr inbounds i8, i8* %2474, i32 64
  %2484 = bitcast i8* %2483 to <64 x i8>*
  %2485 = load <64 x i8>, <64 x i8>* %2484, align 1, !tbaa !102
  %2486 = zext <64 x i8> %2485 to <64 x i16>
  %2487 = call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %2486, <64 x i16> %2382, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0) #11
  %2488 = getelementptr inbounds i16, i16* %2481, i32 64
  %2489 = bitcast i16* %2488 to <64 x i16>*
  store <64 x i16> %2487, <64 x i16>* %2489, align 128, !tbaa !105
  %2490 = add nuw nsw i32 %filter_zeroed.s0.x82.us, 1
  %.not735.us = icmp eq i32 %2490, %4
  br i1 %.not735.us, label %"end for filter_zeroed.s0.x81.loopexit.us", label %"for filter_zeroed.s0.x80.us"

"end for filter_zeroed.s0.x81.loopexit.us":       ; preds = %"for filter_zeroed.s0.x80.us"
  %2491 = add nuw nsw i32 %filter_zeroed.s0.y79.us, 1
  %.not734.us = icmp eq i32 %2491, %6
  br i1 %.not734.us, label %"for sum_filter.s1.r19$y87.preheader", label %"for filter_zeroed.s0.y77.us"

"for sum_filter.s1.r19$y87.preheader":            ; preds = %"end for filter_zeroed.s0.x81.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2457, i8 0, i64 512, i1 false)
  br i1 %2373, label %"for sum_filter.s1.r19$y87.us", label %"consume sum_filter93", !prof !101

"for sum_filter.s1.r19$y87.us":                   ; preds = %"for sum_filter.s1.r19$y87.preheader", %"end for sum_filter.s1.r19$x91.loopexit.us"
  %2492 = phi <32 x i32> [ %2514, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %2493 = phi <32 x i32> [ %2513, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %"sum_filter.s1.r19$y89.us" = phi i32 [ %2518, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y87.preheader" ]
  %2494 = mul nsw i32 %"sum_filter.s1.r19$y89.us", %4
  br label %"for sum_filter.s1.r19$x90.us"

"for sum_filter.s1.r19$x90.us":                   ; preds = %"for sum_filter.s1.r19$y87.us", %"for sum_filter.s1.r19$x90.us"
  %2495 = phi <32 x i32> [ %2514, %"for sum_filter.s1.r19$x90.us" ], [ %2492, %"for sum_filter.s1.r19$y87.us" ]
  %2496 = phi <32 x i32> [ %2513, %"for sum_filter.s1.r19$x90.us" ], [ %2493, %"for sum_filter.s1.r19$y87.us" ]
  %"sum_filter.s1.r19$x92.us" = phi i32 [ %2517, %"for sum_filter.s1.r19$x90.us" ], [ 0, %"for sum_filter.s1.r19$y87.us" ]
  %2497 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2495, <32 x i32> %2496)
  %2498 = add nsw i32 %"sum_filter.s1.r19$x92.us", %2494
  %2499 = shl nsw i32 %2498, 7
  %2500 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2499
  %2501 = bitcast i16* %2500 to <64 x i16>*
  %2502 = load <64 x i16>, <64 x i16>* %2501, align 128, !tbaa !105
  %2503 = call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %2502, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0) #11
  %2504 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2503, <64 x i32> %2497, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %2505 = load <32 x i32>, <32 x i32>* %2387, align 128, !tbaa !139
  %2506 = load <32 x i32>, <32 x i32>* %2389, align 128, !tbaa !142
  %2507 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2506, <32 x i32> %2505)
  %2508 = getelementptr inbounds i16, i16* %2500, i32 64
  %2509 = bitcast i16* %2508 to <64 x i16>*
  %2510 = load <64 x i16>, <64 x i16>* %2509, align 128, !tbaa !105
  %2511 = call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %2510, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0) #11
  %2512 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2511, <64 x i32> %2507, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %2513 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2504)
  store <32 x i32> %2513, <32 x i32>* %2383, align 128, !tbaa !129
  %2514 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2504)
  store <32 x i32> %2514, <32 x i32>* %2385, align 128, !tbaa !137
  %2515 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2512)
  store <32 x i32> %2515, <32 x i32>* %2387, align 128, !tbaa !139
  %2516 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2512)
  store <32 x i32> %2516, <32 x i32>* %2389, align 128, !tbaa !142
  %2517 = add nuw nsw i32 %"sum_filter.s1.r19$x92.us", 1
  %.not733.us = icmp eq i32 %2517, %4
  br i1 %.not733.us, label %"end for sum_filter.s1.r19$x91.loopexit.us", label %"for sum_filter.s1.r19$x90.us"

"end for sum_filter.s1.r19$x91.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x90.us"
  %2518 = add nuw nsw i32 %"sum_filter.s1.r19$y89.us", 1
  %.not732.us = icmp eq i32 %2518, %6
  br i1 %.not732.us, label %"consume sum_filter93", label %"for sum_filter.s1.r19$y87.us"

"consume sum_filter93.critedge":                  ; preds = %"produce filter_zeroed76"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2455, i8 0, i64 512, i1 false)
  br label %"consume sum_filter93"

"consume sum_filter93":                           ; preds = %"end for sum_filter.s1.r19$x91.loopexit.us", %"for sum_filter.s1.r19$y87.preheader", %"for sum_filter.s1.r19$y87.preheader.thread", %"consume sum_filter93.critedge"
  %2519 = phi <32 x i32> [ zeroinitializer, %"consume sum_filter93.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ], [ %2514, %"end for sum_filter.s1.r19$x91.loopexit.us" ]
  %2520 = phi <32 x i32> [ zeroinitializer, %"consume sum_filter93.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ], [ %2513, %"end for sum_filter.s1.r19$x91.loopexit.us" ]
  %2521 = getelementptr inbounds i32, i32* %2390, i32 %output.s0.c.c.base72
  %2522 = bitcast i32* %2521 to <32 x i32>*
  %2523 = load <32 x i32>, <32 x i32>* %2522, align 4, !tbaa !107
  %2524 = getelementptr inbounds i32, i32* %2521, i32 32
  %2525 = bitcast i32* %2524 to <32 x i32>*
  %2526 = load <32 x i32>, <32 x i32>* %2525, align 4, !tbaa !107
  %2527 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2526, <32 x i32> %2523)
  %2528 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2519, <32 x i32> %2520)
  %2529 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2530 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %2528, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2531 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %2529, <128 x i8> %2530, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %2532 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2533 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %2528, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2534 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2531, <32 x i32> %2532, <128 x i8> %2533, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %2535 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2536 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %2528, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %2537 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %2535, <128 x i8> %2536, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %2538 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2539 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %2528, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %2540 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2537, <32 x i32> %2538, <128 x i8> %2539, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %2541 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %2534, <32 x i32> %2540, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2542 = call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %2527, <256 x i8> %2541, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %2543 = getelementptr inbounds i32, i32* %2521, i32 64
  %2544 = bitcast i32* %2543 to <32 x i32>*
  %2545 = load <32 x i32>, <32 x i32>* %2544, align 4, !tbaa !107
  %2546 = getelementptr inbounds i32, i32* %2521, i32 96
  %2547 = bitcast i32* %2546 to <32 x i32>*
  %2548 = load <32 x i32>, <32 x i32>* %2547, align 4, !tbaa !107
  %2549 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2548, <32 x i32> %2545)
  %2550 = load <32 x i32>, <32 x i32>* %2387, align 128, !tbaa !139
  %2551 = load <32 x i32>, <32 x i32>* %2389, align 128, !tbaa !142
  %2552 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2551, <32 x i32> %2550)
  %2553 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2554 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %2552, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2555 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %2553, <128 x i8> %2554, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %2556 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2557 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %2552, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2558 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2555, <32 x i32> %2556, <128 x i8> %2557, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %2559 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2560 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %2552, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %2561 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %2559, <128 x i8> %2560, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %2562 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %2563 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %2552, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %2564 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2561, <32 x i32> %2562, <128 x i8> %2563, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %2565 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %2558, <32 x i32> %2564, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %2566 = call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %2549, <256 x i8> %2565, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %2567 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2542)
  %2568 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2542)
  %2569 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2566)
  %2570 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2566)
  br i1 %2407, label %"for output.s0.b.rebased96.preheader", label %"end for output.s0.b.rebased97", !prof !101

"for output.s0.b.rebased96.preheader":            ; preds = %"consume sum_filter93"
  %2571 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base72, i32 0
  %2572 = shufflevector <128 x i32> %2571, <128 x i32> undef, <128 x i32> zeroinitializer
  %2573 = add nsw <128 x i32> %2572, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit = ashr <128 x i32> %2573, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %2574 = sub nsw <128 x i32> %2573, %.lobit
  %2575 = and <128 x i32> %.lobit, %2427
  %2576 = sub i32 %output.s0.c.c.base72, %t2326
  %2577 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 768
  %2578 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 1024
  %2579 = bitcast i16* %2578 to <64 x i16>*
  %2580 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 896
  %2581 = bitcast i16* %2580 to <64 x i16>*
  %2582 = bitcast i16* %2577 to <64 x i16>*
  %2583 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 384
  %2584 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 640
  %2585 = bitcast i16* %2584 to <64 x i16>*
  %2586 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 512
  %2587 = bitcast i16* %2586 to <64 x i16>*
  %2588 = bitcast i16* %2583 to <64 x i16>*
  %2589 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 256
  %2590 = bitcast i16* %2589 to <64 x i16>*
  %2591 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 128
  %2592 = bitcast i16* %2591 to <64 x i16>*
  %2593 = bitcast i16* %filter_zeroed75 to <64 x i16>*
  %2594 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 1088
  %2595 = bitcast i16* %2594 to <64 x i16>*
  %2596 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 960
  %2597 = bitcast i16* %2596 to <64 x i16>*
  %2598 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 832
  %2599 = bitcast i16* %2598 to <64 x i16>*
  %2600 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 704
  %2601 = bitcast i16* %2600 to <64 x i16>*
  %2602 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 576
  %2603 = bitcast i16* %2602 to <64 x i16>*
  %2604 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 448
  %2605 = bitcast i16* %2604 to <64 x i16>*
  %2606 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 320
  %2607 = bitcast i16* %2606 to <64 x i16>*
  %2608 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 192
  %2609 = bitcast i16* %2608 to <64 x i16>*
  %2610 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 64
  %2611 = bitcast i16* %2610 to <64 x i16>*
  %2612 = sub i32 %output.s0.c.c.base72, %reass.add4771
  br label %"for output.s0.b.rebased96"

"for output.s0.b.rebased96":                      ; preds = %"for output.s0.b.rebased96.preheader", %"end for output.s0.y.yo123"
  %output.s0.b.rebased98 = phi i32 [ %3183, %"end for output.s0.y.yo123" ], [ 0, %"for output.s0.b.rebased96.preheader" ]
  %2613 = load i32, i32* %.fca.1.gep663, align 4, !tbaa !98
  %cmp.i864 = icmp ult i32 %2613, %2413
  %2614 = load i8*, i8** %.fca.0.gep662, align 4, !tbaa !95
  br i1 %cmp.i864, label %if.then.i867, label %pseudostack_alloc.exit880, !prof !99

if.then.i867:                                     ; preds = %"for output.s0.b.rebased96"
  %tobool1.not.i866 = icmp ne i8* %2614, null
  %2615 = load i32, i32* %.fca.2.gep664, align 4
  %cmp2.i869 = icmp ugt i32 %2615, 16384
  %or.cond4697 = and i1 %tobool1.not.i866, %cmp2.i869
  br i1 %or.cond4697, label %if.then3.i871, label %if.end.i875

if.then3.i871:                                    ; preds = %if.then.i867
  call void @halide_free(i8* null, i8* nonnull %2614) #14
  %.pre4844 = load i32, i32* %.fca.2.gep664, align 4, !tbaa !97
  br label %if.end.i875

if.end.i875:                                      ; preds = %if.then3.i871, %if.then.i867
  %2616 = phi i32 [ %.pre4844, %if.then3.i871 ], [ %2615, %if.then.i867 ]
  %add.i873 = add i32 %2616, %2413
  store i32 %add.i873, i32* %.fca.2.gep664, align 4, !tbaa !97
  %cmp7.i874 = icmp ugt i32 %add.i873, 16384
  br i1 %cmp7.i874, label %if.then8.i877, label %if.end11.i879

if.then8.i877:                                    ; preds = %if.end.i875
  %call.i876 = call i8* @halide_malloc(i8* null, i32 %2413) #14
  br label %if.end11.i879

if.end11.i879:                                    ; preds = %if.then8.i877, %if.end.i875
  %storemerge.i878 = phi i8* [ %call.i876, %if.then8.i877 ], [ null, %if.end.i875 ]
  store i8* %storemerge.i878, i8** %.fca.0.gep662, align 4, !tbaa !95
  store i32 %2413, i32* %.fca.1.gep663, align 4, !tbaa !98
  br label %pseudostack_alloc.exit880

pseudostack_alloc.exit880:                        ; preds = %"for output.s0.b.rebased96", %if.end11.i879
  %2617 = phi i8* [ %storemerge.i878, %if.end11.i879 ], [ %2614, %"for output.s0.b.rebased96" ]
  %.not721 = icmp eq i8* %2617, null
  br i1 %.not721, label %then_bb100, label %"produce resampled_input102", !prof !100

"end for output.s0.b.rebased97":                  ; preds = %"end for output.s0.y.yo123", %"consume sum_filter93"
  %.4 = phi i8* [ %.3, %"consume sum_filter93" ], [ %2454, %"end for output.s0.y.yo123" ]
  %2618 = add nuw nsw i32 %output.s0.c.co71, 1
  %.not720 = icmp eq i32 %2618, %2372
  br i1 %.not720, label %after_bb, label %"for output.s0.c.co69"

then_bb100:                                       ; preds = %pseudostack_alloc.exit880
  %2619 = alloca i8*, i32 %2413, align 128
  %2620 = bitcast i8** %2619 to i8*
  store i8** %2619, i8*** %2414, align 4
  br label %"produce resampled_input102"

"produce resampled_input102":                     ; preds = %pseudostack_alloc.exit880, %then_bb100
  %resampled_input101 = phi i8* [ %2620, %then_bb100 ], [ %2617, %pseudostack_alloc.exit880 ]
  br i1 %t2325, label %then_bb104, label %next_bb105

then_bb104:                                       ; preds = %"produce resampled_input102"
  %2621 = add nsw i32 %output.s0.b.rebased98, %14
  %2622 = mul nsw i32 %2621, %16
  %t2358 = add nsw i32 %2576, %2622
  br i1 %2459, label %"consume resampled_input121", label %"for resampled_input.s0.y.rebased106.us", !prof !124

"for resampled_input.s0.y.rebased106.us":         ; preds = %then_bb104, %"end for resampled_input.s0.x.rebased110.loopexit.us"
  %resampled_input.s0.y.rebased108.us = phi i32 [ %2639, %"end for resampled_input.s0.x.rebased110.loopexit.us" ], [ 0, %then_bb104 ]
  %2623 = add nsw i32 %2416, %resampled_input.s0.y.rebased108.us
  %2624 = mul nsw i32 %2623, %2417
  %t2362.us = add nsw i32 %2418, %2624
  %2625 = add nsw i32 %resampled_input.s0.y.rebased108.us, %a43
  %2626 = mul nsw i32 %2625, %13
  %2627 = add nsw i32 %t2358, %2626
  br label %"for resampled_input.s0.x.rebased109.us"

"for resampled_input.s0.x.rebased109.us":         ; preds = %"for resampled_input.s0.y.rebased106.us", %"for resampled_input.s0.x.rebased109.us"
  %resampled_input.s0.x.rebased111.us = phi i32 [ %2638, %"for resampled_input.s0.x.rebased109.us" ], [ 0, %"for resampled_input.s0.y.rebased106.us" ]
  %2628 = add nsw i32 %resampled_input.s0.x.rebased111.us, %a42
  %2629 = mul nsw i32 %2628, %11
  %2630 = add nsw i32 %2627, %2629
  %2631 = getelementptr inbounds i8, i8* %8, i32 %2630
  %2632 = bitcast i8* %2631 to <128 x i8>*
  %2633 = load <128 x i8>, <128 x i8>* %2632, align 1, !tbaa !125
  %2634 = add nsw i32 %t2362.us, %resampled_input.s0.x.rebased111.us
  %2635 = shl nsw i32 %2634, 7
  %2636 = getelementptr inbounds i8, i8* %resampled_input101, i32 %2635
  %2637 = bitcast i8* %2636 to <128 x i8>*
  store <128 x i8> %2633, <128 x i8>* %2637, align 128, !tbaa !127
  %2638 = add nuw nsw i32 %resampled_input.s0.x.rebased111.us, 1
  %.not731.us = icmp eq i32 %resampled_input.s0.x.rebased111.us, %t2351
  br i1 %.not731.us, label %"end for resampled_input.s0.x.rebased110.loopexit.us", label %"for resampled_input.s0.x.rebased109.us"

"end for resampled_input.s0.x.rebased110.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased109.us"
  %2639 = add nuw nsw i32 %resampled_input.s0.y.rebased108.us, 1
  %.not730.us = icmp eq i32 %resampled_input.s0.y.rebased108.us, %t2350
  br i1 %.not730.us, label %"consume resampled_input121", label %"for resampled_input.s0.y.rebased106.us"

next_bb105:                                       ; preds = %"produce resampled_input102"
  br i1 %2415, label %"for resampled_input.s0.y.rebased112.preheader", label %"consume resampled_input121", !prof !101

"for resampled_input.s0.y.rebased112.preheader":  ; preds = %next_bb105
  %2640 = add nsw i32 %output.s0.b.rebased98, %14
  %2641 = mul nsw i32 %2640, %16
  %2642 = sub i32 %2641, %t2326
  br i1 %2419, label %"for resampled_input.s0.y.rebased112.preheader.split.us", label %"consume resampled_input121", !prof !101

"for resampled_input.s0.y.rebased112.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased112.preheader"
  %2643 = sdiv <128 x i32> %2574, %2423
  %2644 = add nsw <128 x i32> %2643, %2575
  %2645 = and <128 x i32> %2644, %2428
  br label %"for resampled_input.s0.y.rebased112.us"

"for resampled_input.s0.y.rebased112.us":         ; preds = %"end for resampled_input.s0.x.rebased116.loopexit.us", %"for resampled_input.s0.y.rebased112.preheader.split.us"
  %resampled_input.s0.y.rebased114.us = phi i32 [ %3173, %"end for resampled_input.s0.x.rebased116.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased112.preheader.split.us" ]
  %2646 = add nsw i32 %2416, %resampled_input.s0.y.rebased114.us
  %2647 = mul nsw i32 %2646, %2417
  %t2367.us = add nsw i32 %2418, %2647
  %2648 = add nsw i32 %resampled_input.s0.y.rebased114.us, %a43
  %2649 = mul nsw i32 %2648, %13
  %t2366.us = add nsw i32 %2642, %2649
  br label %"for resampled_input.s0.x.rebased115.us"

"for resampled_input.s0.x.rebased115.us":         ; preds = %"for resampled_input.s0.y.rebased112.us", %"for resampled_input.s0.x.rebased115.us"
  %resampled_input.s0.x.rebased117.us = phi i32 [ %3172, %"for resampled_input.s0.x.rebased115.us" ], [ 0, %"for resampled_input.s0.y.rebased112.us" ]
  %2650 = add nsw i32 %resampled_input.s0.x.rebased117.us, %a42
  %2651 = mul nsw i32 %2650, %11
  %2652 = add nsw i32 %t2366.us, %2651
  %2653 = insertelement <128 x i32> undef, i32 %2652, i32 0
  %2654 = shufflevector <128 x i32> %2653, <128 x i32> undef, <128 x i32> zeroinitializer
  %2655 = add nsw <128 x i32> %2654, %2645
  %2656 = extractelement <128 x i32> %2655, i32 0
  %2657 = getelementptr inbounds i8, i8* %8, i32 %2656
  %2658 = load i8, i8* %2657, align 1, !tbaa !125
  %2659 = insertelement <128 x i8> undef, i8 %2658, i32 0
  %2660 = extractelement <128 x i32> %2655, i32 1
  %2661 = getelementptr inbounds i8, i8* %8, i32 %2660
  %2662 = load i8, i8* %2661, align 1, !tbaa !125
  %2663 = insertelement <128 x i8> %2659, i8 %2662, i32 1
  %2664 = extractelement <128 x i32> %2655, i32 2
  %2665 = getelementptr inbounds i8, i8* %8, i32 %2664
  %2666 = load i8, i8* %2665, align 1, !tbaa !125
  %2667 = insertelement <128 x i8> %2663, i8 %2666, i32 2
  %2668 = extractelement <128 x i32> %2655, i32 3
  %2669 = getelementptr inbounds i8, i8* %8, i32 %2668
  %2670 = load i8, i8* %2669, align 1, !tbaa !125
  %2671 = insertelement <128 x i8> %2667, i8 %2670, i32 3
  %2672 = extractelement <128 x i32> %2655, i32 4
  %2673 = getelementptr inbounds i8, i8* %8, i32 %2672
  %2674 = load i8, i8* %2673, align 1, !tbaa !125
  %2675 = insertelement <128 x i8> %2671, i8 %2674, i32 4
  %2676 = extractelement <128 x i32> %2655, i32 5
  %2677 = getelementptr inbounds i8, i8* %8, i32 %2676
  %2678 = load i8, i8* %2677, align 1, !tbaa !125
  %2679 = insertelement <128 x i8> %2675, i8 %2678, i32 5
  %2680 = extractelement <128 x i32> %2655, i32 6
  %2681 = getelementptr inbounds i8, i8* %8, i32 %2680
  %2682 = load i8, i8* %2681, align 1, !tbaa !125
  %2683 = insertelement <128 x i8> %2679, i8 %2682, i32 6
  %2684 = extractelement <128 x i32> %2655, i32 7
  %2685 = getelementptr inbounds i8, i8* %8, i32 %2684
  %2686 = load i8, i8* %2685, align 1, !tbaa !125
  %2687 = insertelement <128 x i8> %2683, i8 %2686, i32 7
  %2688 = extractelement <128 x i32> %2655, i32 8
  %2689 = getelementptr inbounds i8, i8* %8, i32 %2688
  %2690 = load i8, i8* %2689, align 1, !tbaa !125
  %2691 = insertelement <128 x i8> %2687, i8 %2690, i32 8
  %2692 = extractelement <128 x i32> %2655, i32 9
  %2693 = getelementptr inbounds i8, i8* %8, i32 %2692
  %2694 = load i8, i8* %2693, align 1, !tbaa !125
  %2695 = insertelement <128 x i8> %2691, i8 %2694, i32 9
  %2696 = extractelement <128 x i32> %2655, i32 10
  %2697 = getelementptr inbounds i8, i8* %8, i32 %2696
  %2698 = load i8, i8* %2697, align 1, !tbaa !125
  %2699 = insertelement <128 x i8> %2695, i8 %2698, i32 10
  %2700 = extractelement <128 x i32> %2655, i32 11
  %2701 = getelementptr inbounds i8, i8* %8, i32 %2700
  %2702 = load i8, i8* %2701, align 1, !tbaa !125
  %2703 = insertelement <128 x i8> %2699, i8 %2702, i32 11
  %2704 = extractelement <128 x i32> %2655, i32 12
  %2705 = getelementptr inbounds i8, i8* %8, i32 %2704
  %2706 = load i8, i8* %2705, align 1, !tbaa !125
  %2707 = insertelement <128 x i8> %2703, i8 %2706, i32 12
  %2708 = extractelement <128 x i32> %2655, i32 13
  %2709 = getelementptr inbounds i8, i8* %8, i32 %2708
  %2710 = load i8, i8* %2709, align 1, !tbaa !125
  %2711 = insertelement <128 x i8> %2707, i8 %2710, i32 13
  %2712 = extractelement <128 x i32> %2655, i32 14
  %2713 = getelementptr inbounds i8, i8* %8, i32 %2712
  %2714 = load i8, i8* %2713, align 1, !tbaa !125
  %2715 = insertelement <128 x i8> %2711, i8 %2714, i32 14
  %2716 = extractelement <128 x i32> %2655, i32 15
  %2717 = getelementptr inbounds i8, i8* %8, i32 %2716
  %2718 = load i8, i8* %2717, align 1, !tbaa !125
  %2719 = insertelement <128 x i8> %2715, i8 %2718, i32 15
  %2720 = extractelement <128 x i32> %2655, i32 16
  %2721 = getelementptr inbounds i8, i8* %8, i32 %2720
  %2722 = load i8, i8* %2721, align 1, !tbaa !125
  %2723 = insertelement <128 x i8> %2719, i8 %2722, i32 16
  %2724 = extractelement <128 x i32> %2655, i32 17
  %2725 = getelementptr inbounds i8, i8* %8, i32 %2724
  %2726 = load i8, i8* %2725, align 1, !tbaa !125
  %2727 = insertelement <128 x i8> %2723, i8 %2726, i32 17
  %2728 = extractelement <128 x i32> %2655, i32 18
  %2729 = getelementptr inbounds i8, i8* %8, i32 %2728
  %2730 = load i8, i8* %2729, align 1, !tbaa !125
  %2731 = insertelement <128 x i8> %2727, i8 %2730, i32 18
  %2732 = extractelement <128 x i32> %2655, i32 19
  %2733 = getelementptr inbounds i8, i8* %8, i32 %2732
  %2734 = load i8, i8* %2733, align 1, !tbaa !125
  %2735 = insertelement <128 x i8> %2731, i8 %2734, i32 19
  %2736 = extractelement <128 x i32> %2655, i32 20
  %2737 = getelementptr inbounds i8, i8* %8, i32 %2736
  %2738 = load i8, i8* %2737, align 1, !tbaa !125
  %2739 = insertelement <128 x i8> %2735, i8 %2738, i32 20
  %2740 = extractelement <128 x i32> %2655, i32 21
  %2741 = getelementptr inbounds i8, i8* %8, i32 %2740
  %2742 = load i8, i8* %2741, align 1, !tbaa !125
  %2743 = insertelement <128 x i8> %2739, i8 %2742, i32 21
  %2744 = extractelement <128 x i32> %2655, i32 22
  %2745 = getelementptr inbounds i8, i8* %8, i32 %2744
  %2746 = load i8, i8* %2745, align 1, !tbaa !125
  %2747 = insertelement <128 x i8> %2743, i8 %2746, i32 22
  %2748 = extractelement <128 x i32> %2655, i32 23
  %2749 = getelementptr inbounds i8, i8* %8, i32 %2748
  %2750 = load i8, i8* %2749, align 1, !tbaa !125
  %2751 = insertelement <128 x i8> %2747, i8 %2750, i32 23
  %2752 = extractelement <128 x i32> %2655, i32 24
  %2753 = getelementptr inbounds i8, i8* %8, i32 %2752
  %2754 = load i8, i8* %2753, align 1, !tbaa !125
  %2755 = insertelement <128 x i8> %2751, i8 %2754, i32 24
  %2756 = extractelement <128 x i32> %2655, i32 25
  %2757 = getelementptr inbounds i8, i8* %8, i32 %2756
  %2758 = load i8, i8* %2757, align 1, !tbaa !125
  %2759 = insertelement <128 x i8> %2755, i8 %2758, i32 25
  %2760 = extractelement <128 x i32> %2655, i32 26
  %2761 = getelementptr inbounds i8, i8* %8, i32 %2760
  %2762 = load i8, i8* %2761, align 1, !tbaa !125
  %2763 = insertelement <128 x i8> %2759, i8 %2762, i32 26
  %2764 = extractelement <128 x i32> %2655, i32 27
  %2765 = getelementptr inbounds i8, i8* %8, i32 %2764
  %2766 = load i8, i8* %2765, align 1, !tbaa !125
  %2767 = insertelement <128 x i8> %2763, i8 %2766, i32 27
  %2768 = extractelement <128 x i32> %2655, i32 28
  %2769 = getelementptr inbounds i8, i8* %8, i32 %2768
  %2770 = load i8, i8* %2769, align 1, !tbaa !125
  %2771 = insertelement <128 x i8> %2767, i8 %2770, i32 28
  %2772 = extractelement <128 x i32> %2655, i32 29
  %2773 = getelementptr inbounds i8, i8* %8, i32 %2772
  %2774 = load i8, i8* %2773, align 1, !tbaa !125
  %2775 = insertelement <128 x i8> %2771, i8 %2774, i32 29
  %2776 = extractelement <128 x i32> %2655, i32 30
  %2777 = getelementptr inbounds i8, i8* %8, i32 %2776
  %2778 = load i8, i8* %2777, align 1, !tbaa !125
  %2779 = insertelement <128 x i8> %2775, i8 %2778, i32 30
  %2780 = extractelement <128 x i32> %2655, i32 31
  %2781 = getelementptr inbounds i8, i8* %8, i32 %2780
  %2782 = load i8, i8* %2781, align 1, !tbaa !125
  %2783 = insertelement <128 x i8> %2779, i8 %2782, i32 31
  %2784 = extractelement <128 x i32> %2655, i32 32
  %2785 = getelementptr inbounds i8, i8* %8, i32 %2784
  %2786 = load i8, i8* %2785, align 1, !tbaa !125
  %2787 = insertelement <128 x i8> %2783, i8 %2786, i32 32
  %2788 = extractelement <128 x i32> %2655, i32 33
  %2789 = getelementptr inbounds i8, i8* %8, i32 %2788
  %2790 = load i8, i8* %2789, align 1, !tbaa !125
  %2791 = insertelement <128 x i8> %2787, i8 %2790, i32 33
  %2792 = extractelement <128 x i32> %2655, i32 34
  %2793 = getelementptr inbounds i8, i8* %8, i32 %2792
  %2794 = load i8, i8* %2793, align 1, !tbaa !125
  %2795 = insertelement <128 x i8> %2791, i8 %2794, i32 34
  %2796 = extractelement <128 x i32> %2655, i32 35
  %2797 = getelementptr inbounds i8, i8* %8, i32 %2796
  %2798 = load i8, i8* %2797, align 1, !tbaa !125
  %2799 = insertelement <128 x i8> %2795, i8 %2798, i32 35
  %2800 = extractelement <128 x i32> %2655, i32 36
  %2801 = getelementptr inbounds i8, i8* %8, i32 %2800
  %2802 = load i8, i8* %2801, align 1, !tbaa !125
  %2803 = insertelement <128 x i8> %2799, i8 %2802, i32 36
  %2804 = extractelement <128 x i32> %2655, i32 37
  %2805 = getelementptr inbounds i8, i8* %8, i32 %2804
  %2806 = load i8, i8* %2805, align 1, !tbaa !125
  %2807 = insertelement <128 x i8> %2803, i8 %2806, i32 37
  %2808 = extractelement <128 x i32> %2655, i32 38
  %2809 = getelementptr inbounds i8, i8* %8, i32 %2808
  %2810 = load i8, i8* %2809, align 1, !tbaa !125
  %2811 = insertelement <128 x i8> %2807, i8 %2810, i32 38
  %2812 = extractelement <128 x i32> %2655, i32 39
  %2813 = getelementptr inbounds i8, i8* %8, i32 %2812
  %2814 = load i8, i8* %2813, align 1, !tbaa !125
  %2815 = insertelement <128 x i8> %2811, i8 %2814, i32 39
  %2816 = extractelement <128 x i32> %2655, i32 40
  %2817 = getelementptr inbounds i8, i8* %8, i32 %2816
  %2818 = load i8, i8* %2817, align 1, !tbaa !125
  %2819 = insertelement <128 x i8> %2815, i8 %2818, i32 40
  %2820 = extractelement <128 x i32> %2655, i32 41
  %2821 = getelementptr inbounds i8, i8* %8, i32 %2820
  %2822 = load i8, i8* %2821, align 1, !tbaa !125
  %2823 = insertelement <128 x i8> %2819, i8 %2822, i32 41
  %2824 = extractelement <128 x i32> %2655, i32 42
  %2825 = getelementptr inbounds i8, i8* %8, i32 %2824
  %2826 = load i8, i8* %2825, align 1, !tbaa !125
  %2827 = insertelement <128 x i8> %2823, i8 %2826, i32 42
  %2828 = extractelement <128 x i32> %2655, i32 43
  %2829 = getelementptr inbounds i8, i8* %8, i32 %2828
  %2830 = load i8, i8* %2829, align 1, !tbaa !125
  %2831 = insertelement <128 x i8> %2827, i8 %2830, i32 43
  %2832 = extractelement <128 x i32> %2655, i32 44
  %2833 = getelementptr inbounds i8, i8* %8, i32 %2832
  %2834 = load i8, i8* %2833, align 1, !tbaa !125
  %2835 = insertelement <128 x i8> %2831, i8 %2834, i32 44
  %2836 = extractelement <128 x i32> %2655, i32 45
  %2837 = getelementptr inbounds i8, i8* %8, i32 %2836
  %2838 = load i8, i8* %2837, align 1, !tbaa !125
  %2839 = insertelement <128 x i8> %2835, i8 %2838, i32 45
  %2840 = extractelement <128 x i32> %2655, i32 46
  %2841 = getelementptr inbounds i8, i8* %8, i32 %2840
  %2842 = load i8, i8* %2841, align 1, !tbaa !125
  %2843 = insertelement <128 x i8> %2839, i8 %2842, i32 46
  %2844 = extractelement <128 x i32> %2655, i32 47
  %2845 = getelementptr inbounds i8, i8* %8, i32 %2844
  %2846 = load i8, i8* %2845, align 1, !tbaa !125
  %2847 = insertelement <128 x i8> %2843, i8 %2846, i32 47
  %2848 = extractelement <128 x i32> %2655, i32 48
  %2849 = getelementptr inbounds i8, i8* %8, i32 %2848
  %2850 = load i8, i8* %2849, align 1, !tbaa !125
  %2851 = insertelement <128 x i8> %2847, i8 %2850, i32 48
  %2852 = extractelement <128 x i32> %2655, i32 49
  %2853 = getelementptr inbounds i8, i8* %8, i32 %2852
  %2854 = load i8, i8* %2853, align 1, !tbaa !125
  %2855 = insertelement <128 x i8> %2851, i8 %2854, i32 49
  %2856 = extractelement <128 x i32> %2655, i32 50
  %2857 = getelementptr inbounds i8, i8* %8, i32 %2856
  %2858 = load i8, i8* %2857, align 1, !tbaa !125
  %2859 = insertelement <128 x i8> %2855, i8 %2858, i32 50
  %2860 = extractelement <128 x i32> %2655, i32 51
  %2861 = getelementptr inbounds i8, i8* %8, i32 %2860
  %2862 = load i8, i8* %2861, align 1, !tbaa !125
  %2863 = insertelement <128 x i8> %2859, i8 %2862, i32 51
  %2864 = extractelement <128 x i32> %2655, i32 52
  %2865 = getelementptr inbounds i8, i8* %8, i32 %2864
  %2866 = load i8, i8* %2865, align 1, !tbaa !125
  %2867 = insertelement <128 x i8> %2863, i8 %2866, i32 52
  %2868 = extractelement <128 x i32> %2655, i32 53
  %2869 = getelementptr inbounds i8, i8* %8, i32 %2868
  %2870 = load i8, i8* %2869, align 1, !tbaa !125
  %2871 = insertelement <128 x i8> %2867, i8 %2870, i32 53
  %2872 = extractelement <128 x i32> %2655, i32 54
  %2873 = getelementptr inbounds i8, i8* %8, i32 %2872
  %2874 = load i8, i8* %2873, align 1, !tbaa !125
  %2875 = insertelement <128 x i8> %2871, i8 %2874, i32 54
  %2876 = extractelement <128 x i32> %2655, i32 55
  %2877 = getelementptr inbounds i8, i8* %8, i32 %2876
  %2878 = load i8, i8* %2877, align 1, !tbaa !125
  %2879 = insertelement <128 x i8> %2875, i8 %2878, i32 55
  %2880 = extractelement <128 x i32> %2655, i32 56
  %2881 = getelementptr inbounds i8, i8* %8, i32 %2880
  %2882 = load i8, i8* %2881, align 1, !tbaa !125
  %2883 = insertelement <128 x i8> %2879, i8 %2882, i32 56
  %2884 = extractelement <128 x i32> %2655, i32 57
  %2885 = getelementptr inbounds i8, i8* %8, i32 %2884
  %2886 = load i8, i8* %2885, align 1, !tbaa !125
  %2887 = insertelement <128 x i8> %2883, i8 %2886, i32 57
  %2888 = extractelement <128 x i32> %2655, i32 58
  %2889 = getelementptr inbounds i8, i8* %8, i32 %2888
  %2890 = load i8, i8* %2889, align 1, !tbaa !125
  %2891 = insertelement <128 x i8> %2887, i8 %2890, i32 58
  %2892 = extractelement <128 x i32> %2655, i32 59
  %2893 = getelementptr inbounds i8, i8* %8, i32 %2892
  %2894 = load i8, i8* %2893, align 1, !tbaa !125
  %2895 = insertelement <128 x i8> %2891, i8 %2894, i32 59
  %2896 = extractelement <128 x i32> %2655, i32 60
  %2897 = getelementptr inbounds i8, i8* %8, i32 %2896
  %2898 = load i8, i8* %2897, align 1, !tbaa !125
  %2899 = insertelement <128 x i8> %2895, i8 %2898, i32 60
  %2900 = extractelement <128 x i32> %2655, i32 61
  %2901 = getelementptr inbounds i8, i8* %8, i32 %2900
  %2902 = load i8, i8* %2901, align 1, !tbaa !125
  %2903 = insertelement <128 x i8> %2899, i8 %2902, i32 61
  %2904 = extractelement <128 x i32> %2655, i32 62
  %2905 = getelementptr inbounds i8, i8* %8, i32 %2904
  %2906 = load i8, i8* %2905, align 1, !tbaa !125
  %2907 = insertelement <128 x i8> %2903, i8 %2906, i32 62
  %2908 = extractelement <128 x i32> %2655, i32 63
  %2909 = getelementptr inbounds i8, i8* %8, i32 %2908
  %2910 = load i8, i8* %2909, align 1, !tbaa !125
  %2911 = insertelement <128 x i8> %2907, i8 %2910, i32 63
  %2912 = extractelement <128 x i32> %2655, i32 64
  %2913 = getelementptr inbounds i8, i8* %8, i32 %2912
  %2914 = load i8, i8* %2913, align 1, !tbaa !125
  %2915 = insertelement <128 x i8> %2911, i8 %2914, i32 64
  %2916 = extractelement <128 x i32> %2655, i32 65
  %2917 = getelementptr inbounds i8, i8* %8, i32 %2916
  %2918 = load i8, i8* %2917, align 1, !tbaa !125
  %2919 = insertelement <128 x i8> %2915, i8 %2918, i32 65
  %2920 = extractelement <128 x i32> %2655, i32 66
  %2921 = getelementptr inbounds i8, i8* %8, i32 %2920
  %2922 = load i8, i8* %2921, align 1, !tbaa !125
  %2923 = insertelement <128 x i8> %2919, i8 %2922, i32 66
  %2924 = extractelement <128 x i32> %2655, i32 67
  %2925 = getelementptr inbounds i8, i8* %8, i32 %2924
  %2926 = load i8, i8* %2925, align 1, !tbaa !125
  %2927 = insertelement <128 x i8> %2923, i8 %2926, i32 67
  %2928 = extractelement <128 x i32> %2655, i32 68
  %2929 = getelementptr inbounds i8, i8* %8, i32 %2928
  %2930 = load i8, i8* %2929, align 1, !tbaa !125
  %2931 = insertelement <128 x i8> %2927, i8 %2930, i32 68
  %2932 = extractelement <128 x i32> %2655, i32 69
  %2933 = getelementptr inbounds i8, i8* %8, i32 %2932
  %2934 = load i8, i8* %2933, align 1, !tbaa !125
  %2935 = insertelement <128 x i8> %2931, i8 %2934, i32 69
  %2936 = extractelement <128 x i32> %2655, i32 70
  %2937 = getelementptr inbounds i8, i8* %8, i32 %2936
  %2938 = load i8, i8* %2937, align 1, !tbaa !125
  %2939 = insertelement <128 x i8> %2935, i8 %2938, i32 70
  %2940 = extractelement <128 x i32> %2655, i32 71
  %2941 = getelementptr inbounds i8, i8* %8, i32 %2940
  %2942 = load i8, i8* %2941, align 1, !tbaa !125
  %2943 = insertelement <128 x i8> %2939, i8 %2942, i32 71
  %2944 = extractelement <128 x i32> %2655, i32 72
  %2945 = getelementptr inbounds i8, i8* %8, i32 %2944
  %2946 = load i8, i8* %2945, align 1, !tbaa !125
  %2947 = insertelement <128 x i8> %2943, i8 %2946, i32 72
  %2948 = extractelement <128 x i32> %2655, i32 73
  %2949 = getelementptr inbounds i8, i8* %8, i32 %2948
  %2950 = load i8, i8* %2949, align 1, !tbaa !125
  %2951 = insertelement <128 x i8> %2947, i8 %2950, i32 73
  %2952 = extractelement <128 x i32> %2655, i32 74
  %2953 = getelementptr inbounds i8, i8* %8, i32 %2952
  %2954 = load i8, i8* %2953, align 1, !tbaa !125
  %2955 = insertelement <128 x i8> %2951, i8 %2954, i32 74
  %2956 = extractelement <128 x i32> %2655, i32 75
  %2957 = getelementptr inbounds i8, i8* %8, i32 %2956
  %2958 = load i8, i8* %2957, align 1, !tbaa !125
  %2959 = insertelement <128 x i8> %2955, i8 %2958, i32 75
  %2960 = extractelement <128 x i32> %2655, i32 76
  %2961 = getelementptr inbounds i8, i8* %8, i32 %2960
  %2962 = load i8, i8* %2961, align 1, !tbaa !125
  %2963 = insertelement <128 x i8> %2959, i8 %2962, i32 76
  %2964 = extractelement <128 x i32> %2655, i32 77
  %2965 = getelementptr inbounds i8, i8* %8, i32 %2964
  %2966 = load i8, i8* %2965, align 1, !tbaa !125
  %2967 = insertelement <128 x i8> %2963, i8 %2966, i32 77
  %2968 = extractelement <128 x i32> %2655, i32 78
  %2969 = getelementptr inbounds i8, i8* %8, i32 %2968
  %2970 = load i8, i8* %2969, align 1, !tbaa !125
  %2971 = insertelement <128 x i8> %2967, i8 %2970, i32 78
  %2972 = extractelement <128 x i32> %2655, i32 79
  %2973 = getelementptr inbounds i8, i8* %8, i32 %2972
  %2974 = load i8, i8* %2973, align 1, !tbaa !125
  %2975 = insertelement <128 x i8> %2971, i8 %2974, i32 79
  %2976 = extractelement <128 x i32> %2655, i32 80
  %2977 = getelementptr inbounds i8, i8* %8, i32 %2976
  %2978 = load i8, i8* %2977, align 1, !tbaa !125
  %2979 = insertelement <128 x i8> %2975, i8 %2978, i32 80
  %2980 = extractelement <128 x i32> %2655, i32 81
  %2981 = getelementptr inbounds i8, i8* %8, i32 %2980
  %2982 = load i8, i8* %2981, align 1, !tbaa !125
  %2983 = insertelement <128 x i8> %2979, i8 %2982, i32 81
  %2984 = extractelement <128 x i32> %2655, i32 82
  %2985 = getelementptr inbounds i8, i8* %8, i32 %2984
  %2986 = load i8, i8* %2985, align 1, !tbaa !125
  %2987 = insertelement <128 x i8> %2983, i8 %2986, i32 82
  %2988 = extractelement <128 x i32> %2655, i32 83
  %2989 = getelementptr inbounds i8, i8* %8, i32 %2988
  %2990 = load i8, i8* %2989, align 1, !tbaa !125
  %2991 = insertelement <128 x i8> %2987, i8 %2990, i32 83
  %2992 = extractelement <128 x i32> %2655, i32 84
  %2993 = getelementptr inbounds i8, i8* %8, i32 %2992
  %2994 = load i8, i8* %2993, align 1, !tbaa !125
  %2995 = insertelement <128 x i8> %2991, i8 %2994, i32 84
  %2996 = extractelement <128 x i32> %2655, i32 85
  %2997 = getelementptr inbounds i8, i8* %8, i32 %2996
  %2998 = load i8, i8* %2997, align 1, !tbaa !125
  %2999 = insertelement <128 x i8> %2995, i8 %2998, i32 85
  %3000 = extractelement <128 x i32> %2655, i32 86
  %3001 = getelementptr inbounds i8, i8* %8, i32 %3000
  %3002 = load i8, i8* %3001, align 1, !tbaa !125
  %3003 = insertelement <128 x i8> %2999, i8 %3002, i32 86
  %3004 = extractelement <128 x i32> %2655, i32 87
  %3005 = getelementptr inbounds i8, i8* %8, i32 %3004
  %3006 = load i8, i8* %3005, align 1, !tbaa !125
  %3007 = insertelement <128 x i8> %3003, i8 %3006, i32 87
  %3008 = extractelement <128 x i32> %2655, i32 88
  %3009 = getelementptr inbounds i8, i8* %8, i32 %3008
  %3010 = load i8, i8* %3009, align 1, !tbaa !125
  %3011 = insertelement <128 x i8> %3007, i8 %3010, i32 88
  %3012 = extractelement <128 x i32> %2655, i32 89
  %3013 = getelementptr inbounds i8, i8* %8, i32 %3012
  %3014 = load i8, i8* %3013, align 1, !tbaa !125
  %3015 = insertelement <128 x i8> %3011, i8 %3014, i32 89
  %3016 = extractelement <128 x i32> %2655, i32 90
  %3017 = getelementptr inbounds i8, i8* %8, i32 %3016
  %3018 = load i8, i8* %3017, align 1, !tbaa !125
  %3019 = insertelement <128 x i8> %3015, i8 %3018, i32 90
  %3020 = extractelement <128 x i32> %2655, i32 91
  %3021 = getelementptr inbounds i8, i8* %8, i32 %3020
  %3022 = load i8, i8* %3021, align 1, !tbaa !125
  %3023 = insertelement <128 x i8> %3019, i8 %3022, i32 91
  %3024 = extractelement <128 x i32> %2655, i32 92
  %3025 = getelementptr inbounds i8, i8* %8, i32 %3024
  %3026 = load i8, i8* %3025, align 1, !tbaa !125
  %3027 = insertelement <128 x i8> %3023, i8 %3026, i32 92
  %3028 = extractelement <128 x i32> %2655, i32 93
  %3029 = getelementptr inbounds i8, i8* %8, i32 %3028
  %3030 = load i8, i8* %3029, align 1, !tbaa !125
  %3031 = insertelement <128 x i8> %3027, i8 %3030, i32 93
  %3032 = extractelement <128 x i32> %2655, i32 94
  %3033 = getelementptr inbounds i8, i8* %8, i32 %3032
  %3034 = load i8, i8* %3033, align 1, !tbaa !125
  %3035 = insertelement <128 x i8> %3031, i8 %3034, i32 94
  %3036 = extractelement <128 x i32> %2655, i32 95
  %3037 = getelementptr inbounds i8, i8* %8, i32 %3036
  %3038 = load i8, i8* %3037, align 1, !tbaa !125
  %3039 = insertelement <128 x i8> %3035, i8 %3038, i32 95
  %3040 = extractelement <128 x i32> %2655, i32 96
  %3041 = getelementptr inbounds i8, i8* %8, i32 %3040
  %3042 = load i8, i8* %3041, align 1, !tbaa !125
  %3043 = insertelement <128 x i8> %3039, i8 %3042, i32 96
  %3044 = extractelement <128 x i32> %2655, i32 97
  %3045 = getelementptr inbounds i8, i8* %8, i32 %3044
  %3046 = load i8, i8* %3045, align 1, !tbaa !125
  %3047 = insertelement <128 x i8> %3043, i8 %3046, i32 97
  %3048 = extractelement <128 x i32> %2655, i32 98
  %3049 = getelementptr inbounds i8, i8* %8, i32 %3048
  %3050 = load i8, i8* %3049, align 1, !tbaa !125
  %3051 = insertelement <128 x i8> %3047, i8 %3050, i32 98
  %3052 = extractelement <128 x i32> %2655, i32 99
  %3053 = getelementptr inbounds i8, i8* %8, i32 %3052
  %3054 = load i8, i8* %3053, align 1, !tbaa !125
  %3055 = insertelement <128 x i8> %3051, i8 %3054, i32 99
  %3056 = extractelement <128 x i32> %2655, i32 100
  %3057 = getelementptr inbounds i8, i8* %8, i32 %3056
  %3058 = load i8, i8* %3057, align 1, !tbaa !125
  %3059 = insertelement <128 x i8> %3055, i8 %3058, i32 100
  %3060 = extractelement <128 x i32> %2655, i32 101
  %3061 = getelementptr inbounds i8, i8* %8, i32 %3060
  %3062 = load i8, i8* %3061, align 1, !tbaa !125
  %3063 = insertelement <128 x i8> %3059, i8 %3062, i32 101
  %3064 = extractelement <128 x i32> %2655, i32 102
  %3065 = getelementptr inbounds i8, i8* %8, i32 %3064
  %3066 = load i8, i8* %3065, align 1, !tbaa !125
  %3067 = insertelement <128 x i8> %3063, i8 %3066, i32 102
  %3068 = extractelement <128 x i32> %2655, i32 103
  %3069 = getelementptr inbounds i8, i8* %8, i32 %3068
  %3070 = load i8, i8* %3069, align 1, !tbaa !125
  %3071 = insertelement <128 x i8> %3067, i8 %3070, i32 103
  %3072 = extractelement <128 x i32> %2655, i32 104
  %3073 = getelementptr inbounds i8, i8* %8, i32 %3072
  %3074 = load i8, i8* %3073, align 1, !tbaa !125
  %3075 = insertelement <128 x i8> %3071, i8 %3074, i32 104
  %3076 = extractelement <128 x i32> %2655, i32 105
  %3077 = getelementptr inbounds i8, i8* %8, i32 %3076
  %3078 = load i8, i8* %3077, align 1, !tbaa !125
  %3079 = insertelement <128 x i8> %3075, i8 %3078, i32 105
  %3080 = extractelement <128 x i32> %2655, i32 106
  %3081 = getelementptr inbounds i8, i8* %8, i32 %3080
  %3082 = load i8, i8* %3081, align 1, !tbaa !125
  %3083 = insertelement <128 x i8> %3079, i8 %3082, i32 106
  %3084 = extractelement <128 x i32> %2655, i32 107
  %3085 = getelementptr inbounds i8, i8* %8, i32 %3084
  %3086 = load i8, i8* %3085, align 1, !tbaa !125
  %3087 = insertelement <128 x i8> %3083, i8 %3086, i32 107
  %3088 = extractelement <128 x i32> %2655, i32 108
  %3089 = getelementptr inbounds i8, i8* %8, i32 %3088
  %3090 = load i8, i8* %3089, align 1, !tbaa !125
  %3091 = insertelement <128 x i8> %3087, i8 %3090, i32 108
  %3092 = extractelement <128 x i32> %2655, i32 109
  %3093 = getelementptr inbounds i8, i8* %8, i32 %3092
  %3094 = load i8, i8* %3093, align 1, !tbaa !125
  %3095 = insertelement <128 x i8> %3091, i8 %3094, i32 109
  %3096 = extractelement <128 x i32> %2655, i32 110
  %3097 = getelementptr inbounds i8, i8* %8, i32 %3096
  %3098 = load i8, i8* %3097, align 1, !tbaa !125
  %3099 = insertelement <128 x i8> %3095, i8 %3098, i32 110
  %3100 = extractelement <128 x i32> %2655, i32 111
  %3101 = getelementptr inbounds i8, i8* %8, i32 %3100
  %3102 = load i8, i8* %3101, align 1, !tbaa !125
  %3103 = insertelement <128 x i8> %3099, i8 %3102, i32 111
  %3104 = extractelement <128 x i32> %2655, i32 112
  %3105 = getelementptr inbounds i8, i8* %8, i32 %3104
  %3106 = load i8, i8* %3105, align 1, !tbaa !125
  %3107 = insertelement <128 x i8> %3103, i8 %3106, i32 112
  %3108 = extractelement <128 x i32> %2655, i32 113
  %3109 = getelementptr inbounds i8, i8* %8, i32 %3108
  %3110 = load i8, i8* %3109, align 1, !tbaa !125
  %3111 = insertelement <128 x i8> %3107, i8 %3110, i32 113
  %3112 = extractelement <128 x i32> %2655, i32 114
  %3113 = getelementptr inbounds i8, i8* %8, i32 %3112
  %3114 = load i8, i8* %3113, align 1, !tbaa !125
  %3115 = insertelement <128 x i8> %3111, i8 %3114, i32 114
  %3116 = extractelement <128 x i32> %2655, i32 115
  %3117 = getelementptr inbounds i8, i8* %8, i32 %3116
  %3118 = load i8, i8* %3117, align 1, !tbaa !125
  %3119 = insertelement <128 x i8> %3115, i8 %3118, i32 115
  %3120 = extractelement <128 x i32> %2655, i32 116
  %3121 = getelementptr inbounds i8, i8* %8, i32 %3120
  %3122 = load i8, i8* %3121, align 1, !tbaa !125
  %3123 = insertelement <128 x i8> %3119, i8 %3122, i32 116
  %3124 = extractelement <128 x i32> %2655, i32 117
  %3125 = getelementptr inbounds i8, i8* %8, i32 %3124
  %3126 = load i8, i8* %3125, align 1, !tbaa !125
  %3127 = insertelement <128 x i8> %3123, i8 %3126, i32 117
  %3128 = extractelement <128 x i32> %2655, i32 118
  %3129 = getelementptr inbounds i8, i8* %8, i32 %3128
  %3130 = load i8, i8* %3129, align 1, !tbaa !125
  %3131 = insertelement <128 x i8> %3127, i8 %3130, i32 118
  %3132 = extractelement <128 x i32> %2655, i32 119
  %3133 = getelementptr inbounds i8, i8* %8, i32 %3132
  %3134 = load i8, i8* %3133, align 1, !tbaa !125
  %3135 = insertelement <128 x i8> %3131, i8 %3134, i32 119
  %3136 = extractelement <128 x i32> %2655, i32 120
  %3137 = getelementptr inbounds i8, i8* %8, i32 %3136
  %3138 = load i8, i8* %3137, align 1, !tbaa !125
  %3139 = insertelement <128 x i8> %3135, i8 %3138, i32 120
  %3140 = extractelement <128 x i32> %2655, i32 121
  %3141 = getelementptr inbounds i8, i8* %8, i32 %3140
  %3142 = load i8, i8* %3141, align 1, !tbaa !125
  %3143 = insertelement <128 x i8> %3139, i8 %3142, i32 121
  %3144 = extractelement <128 x i32> %2655, i32 122
  %3145 = getelementptr inbounds i8, i8* %8, i32 %3144
  %3146 = load i8, i8* %3145, align 1, !tbaa !125
  %3147 = insertelement <128 x i8> %3143, i8 %3146, i32 122
  %3148 = extractelement <128 x i32> %2655, i32 123
  %3149 = getelementptr inbounds i8, i8* %8, i32 %3148
  %3150 = load i8, i8* %3149, align 1, !tbaa !125
  %3151 = insertelement <128 x i8> %3147, i8 %3150, i32 123
  %3152 = extractelement <128 x i32> %2655, i32 124
  %3153 = getelementptr inbounds i8, i8* %8, i32 %3152
  %3154 = load i8, i8* %3153, align 1, !tbaa !125
  %3155 = insertelement <128 x i8> %3151, i8 %3154, i32 124
  %3156 = extractelement <128 x i32> %2655, i32 125
  %3157 = getelementptr inbounds i8, i8* %8, i32 %3156
  %3158 = load i8, i8* %3157, align 1, !tbaa !125
  %3159 = insertelement <128 x i8> %3155, i8 %3158, i32 125
  %3160 = extractelement <128 x i32> %2655, i32 126
  %3161 = getelementptr inbounds i8, i8* %8, i32 %3160
  %3162 = load i8, i8* %3161, align 1, !tbaa !125
  %3163 = insertelement <128 x i8> %3159, i8 %3162, i32 126
  %3164 = extractelement <128 x i32> %2655, i32 127
  %3165 = getelementptr inbounds i8, i8* %8, i32 %3164
  %3166 = load i8, i8* %3165, align 1, !tbaa !125
  %3167 = insertelement <128 x i8> %3163, i8 %3166, i32 127
  %3168 = add nsw i32 %t2367.us, %resampled_input.s0.x.rebased117.us
  %3169 = shl nsw i32 %3168, 7
  %3170 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3169
  %3171 = bitcast i8* %3170 to <128 x i8>*
  store <128 x i8> %3167, <128 x i8>* %3171, align 128, !tbaa !127
  %3172 = add nuw nsw i32 %resampled_input.s0.x.rebased117.us, 1
  %.not729.us = icmp eq i32 %resampled_input.s0.x.rebased117.us, %t2351
  br i1 %.not729.us, label %"end for resampled_input.s0.x.rebased116.loopexit.us", label %"for resampled_input.s0.x.rebased115.us"

"end for resampled_input.s0.x.rebased116.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased115.us"
  %3173 = add nuw nsw i32 %resampled_input.s0.y.rebased114.us, 1
  %.not728.us = icmp eq i32 %resampled_input.s0.y.rebased114.us, %t2350
  br i1 %.not728.us, label %"consume resampled_input121", label %"for resampled_input.s0.y.rebased112.us"

"consume resampled_input121":                     ; preds = %"end for resampled_input.s0.x.rebased116.loopexit.us", %"end for resampled_input.s0.x.rebased110.loopexit.us", %then_bb104, %"for resampled_input.s0.y.rebased112.preheader", %next_bb105
  br i1 %2429, label %"for output.s0.y.yo122.preheader", label %"end for output.s0.y.yo123", !prof !101

"for output.s0.y.yo122.preheader":                ; preds = %"consume resampled_input121"
  %3174 = add nsw i32 %output.s0.b.rebased98, %14
  %3175 = mul nsw i32 %3174, %25
  %t2374 = add i32 %2612, %3175
  br label %"for output.s0.y.yo122"

"for output.s0.y.yo122":                          ; preds = %"for output.s0.y.yo122.preheader", %"end for output.s0.x.xo126"
  %output.s0.y.yo124 = phi i32 [ %3184, %"end for output.s0.x.xo126" ], [ 0, %"for output.s0.y.yo122.preheader" ]
  %3176 = add nsw i32 %output.s0.y.yo124, %22
  %3177 = mul nsw i32 %3176, %stride_y
  %3178 = add nsw i32 %2430, %3177
  %t2390 = mul nsw i32 %3178, %2417
  %3179 = add nsw i32 %2431, %3177
  %t2392 = mul nsw i32 %3179, %2417
  %3180 = sub nsw i32 %3177, %t2346
  %t2394 = mul nsw i32 %3180, %2417
  br i1 %2432, label %"for output.s0.x.xo125.preheader", label %"end for output.s0.x.xo126", !prof !101

"for output.s0.x.xo125.preheader":                ; preds = %"for output.s0.y.yo122"
  %3181 = mul nsw i32 %3176, %24
  %3182 = add i32 %t2374, %3181
  br label %"for output.s0.x.xo125"

"end for output.s0.y.yo123":                      ; preds = %"end for output.s0.x.xo126", %"consume resampled_input121"
  %3183 = add nuw nsw i32 %output.s0.b.rebased98, 1
  %.not722 = icmp eq i32 %3183, %15
  br i1 %.not722, label %"end for output.s0.b.rebased97", label %"for output.s0.b.rebased96"

"for output.s0.x.xo125":                          ; preds = %"for output.s0.x.xo125.preheader", %"consume convolved138"
  %output.s0.x.xo127 = phi i32 [ %3553, %"consume convolved138" ], [ 0, %"for output.s0.x.xo125.preheader" ]
  store <32 x i32> %2567, <32 x i32>* %2433, align 128, !tbaa !109
  store <32 x i32> %2568, <32 x i32>* %2435, align 128, !tbaa !117
  store <32 x i32> %2569, <32 x i32>* %2437, align 128, !tbaa !119
  store <32 x i32> %2570, <32 x i32>* %2439, align 128, !tbaa !122
  br i1 %t2340, label %then_bb130, label %next_bb131

"end for output.s0.x.xo126":                      ; preds = %"consume convolved138", %"for output.s0.y.yo122"
  %3184 = add nuw nsw i32 %output.s0.y.yo124, 1
  %.not723 = icmp eq i32 %3184, %23
  br i1 %.not723, label %"end for output.s0.y.yo123", label %"for output.s0.y.yo122"

then_bb130:                                       ; preds = %"for output.s0.x.xo125"
  %3185 = load <64 x i16>, <64 x i16>* %2579, align 128, !tbaa !105
  %3186 = add nsw i32 %output.s0.x.xo127, %19
  %3187 = mul nsw i32 %3186, %stride_x
  %3188 = add i32 %3187, %2440
  %3189 = add i32 %3188, %t2390
  %3190 = shl nsw i32 %3189, 7
  %3191 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3190
  %3192 = bitcast i8* %3191 to <64 x i8>*
  %3193 = load <64 x i8>, <64 x i8>* %3192, align 128, !tbaa !127
  %3194 = zext <64 x i8> %3193 to <64 x i16>
  %3195 = load <64 x i16>, <64 x i16>* %2581, align 128, !tbaa !105
  %3196 = add i32 %3187, %2441
  %3197 = add i32 %3196, %t2390
  %3198 = shl nsw i32 %3197, 7
  %3199 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3198
  %3200 = bitcast i8* %3199 to <64 x i8>*
  %3201 = load <64 x i8>, <64 x i8>* %3200, align 128, !tbaa !127
  %3202 = zext <64 x i8> %3201 to <64 x i16>
  %3203 = load <64 x i16>, <64 x i16>* %2582, align 128, !tbaa !105
  %3204 = add i32 %3187, %t2390
  %3205 = sub i32 %3204, %t2348
  %3206 = shl nsw i32 %3205, 7
  %3207 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3206
  %3208 = bitcast i8* %3207 to <64 x i8>*
  %3209 = load <64 x i8>, <64 x i8>* %3208, align 128, !tbaa !127
  %3210 = zext <64 x i8> %3209 to <64 x i16>
  %3211 = load <64 x i16>, <64 x i16>* %2585, align 128, !tbaa !105
  %3212 = add i32 %3188, %t2392
  %3213 = shl nsw i32 %3212, 7
  %3214 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3213
  %3215 = bitcast i8* %3214 to <64 x i8>*
  %3216 = load <64 x i8>, <64 x i8>* %3215, align 128, !tbaa !127
  %3217 = zext <64 x i8> %3216 to <64 x i16>
  %3218 = load <64 x i16>, <64 x i16>* %2587, align 128, !tbaa !105
  %3219 = add i32 %3196, %t2392
  %3220 = shl nsw i32 %3219, 7
  %3221 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3220
  %3222 = bitcast i8* %3221 to <64 x i8>*
  %3223 = load <64 x i8>, <64 x i8>* %3222, align 128, !tbaa !127
  %3224 = zext <64 x i8> %3223 to <64 x i16>
  %3225 = load <64 x i16>, <64 x i16>* %2588, align 128, !tbaa !105
  %3226 = add i32 %3187, %t2392
  %3227 = sub i32 %3226, %t2348
  %3228 = shl nsw i32 %3227, 7
  %3229 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3228
  %3230 = bitcast i8* %3229 to <64 x i8>*
  %3231 = load <64 x i8>, <64 x i8>* %3230, align 128, !tbaa !127
  %3232 = zext <64 x i8> %3231 to <64 x i16>
  %3233 = load <64 x i16>, <64 x i16>* %2590, align 128, !tbaa !178
  %3234 = add i32 %3188, %t2394
  %3235 = shl nsw i32 %3234, 7
  %3236 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3235
  %3237 = bitcast i8* %3236 to <64 x i8>*
  %3238 = load <64 x i8>, <64 x i8>* %3237, align 128, !tbaa !127
  %3239 = zext <64 x i8> %3238 to <64 x i16>
  %3240 = load <64 x i16>, <64 x i16>* %2592, align 128, !tbaa !184
  %3241 = add i32 %3196, %t2394
  %3242 = shl nsw i32 %3241, 7
  %3243 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3242
  %3244 = bitcast i8* %3243 to <64 x i8>*
  %3245 = load <64 x i8>, <64 x i8>* %3244, align 128, !tbaa !127
  %3246 = zext <64 x i8> %3245 to <64 x i16>
  %3247 = load <64 x i16>, <64 x i16>* %2593, align 128, !tbaa !188
  %3248 = add i32 %3187, %t2394
  %3249 = sub i32 %3248, %t2348
  %3250 = shl nsw i32 %3249, 7
  %3251 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3250
  %3252 = bitcast i8* %3251 to <64 x i8>*
  %3253 = load <64 x i8>, <64 x i8>* %3252, align 128, !tbaa !127
  %3254 = zext <64 x i8> %3253 to <64 x i16>
  %3255 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2568, <32 x i32> %2567)
  %3256 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3203, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3257 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3210, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3258 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3256, <64 x i16> %3257, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3259 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3225, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3260 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3232, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3261 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3259, <64 x i16> %3260, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3262 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3247, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3263 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3254, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3264 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3262, <64 x i16> %3263, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3265 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3264, <64 x i32> %3255, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3266 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3233, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3267 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3239, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3268 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3265, <64 x i16> %3266, <64 x i16> %3267, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3269 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3240, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3270 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3246, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3271 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3269, <64 x i16> %3270, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3272 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3268, <64 x i32> %3271, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3273 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3261, <64 x i32> %3272, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3274 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3211, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3275 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3217, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3276 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3273, <64 x i16> %3274, <64 x i16> %3275, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3277 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3218, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3278 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3224, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3279 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3277, <64 x i16> %3278, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3280 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3276, <64 x i32> %3279, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3281 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3258, <64 x i32> %3280, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3282 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3185, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3283 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3194, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3284 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3281, <64 x i16> %3282, <64 x i16> %3283, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3285 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3195, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3286 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3202, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3287 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3285, <64 x i16> %3286, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3288 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3284, <64 x i32> %3287, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3289 = load <64 x i16>, <64 x i16>* %2595, align 128, !tbaa !105
  %3290 = getelementptr inbounds i8, i8* %3191, i32 64
  %3291 = bitcast i8* %3290 to <64 x i8>*
  %3292 = load <64 x i8>, <64 x i8>* %3291, align 64, !tbaa !127
  %3293 = zext <64 x i8> %3292 to <64 x i16>
  %3294 = load <64 x i16>, <64 x i16>* %2597, align 128, !tbaa !105
  %3295 = getelementptr inbounds i8, i8* %3199, i32 64
  %3296 = bitcast i8* %3295 to <64 x i8>*
  %3297 = load <64 x i8>, <64 x i8>* %3296, align 64, !tbaa !127
  %3298 = zext <64 x i8> %3297 to <64 x i16>
  %3299 = load <64 x i16>, <64 x i16>* %2599, align 128, !tbaa !105
  %3300 = getelementptr inbounds i8, i8* %3207, i32 64
  %3301 = bitcast i8* %3300 to <64 x i8>*
  %3302 = load <64 x i8>, <64 x i8>* %3301, align 64, !tbaa !127
  %3303 = zext <64 x i8> %3302 to <64 x i16>
  %3304 = load <64 x i16>, <64 x i16>* %2601, align 128, !tbaa !105
  %3305 = getelementptr inbounds i8, i8* %3214, i32 64
  %3306 = bitcast i8* %3305 to <64 x i8>*
  %3307 = load <64 x i8>, <64 x i8>* %3306, align 64, !tbaa !127
  %3308 = zext <64 x i8> %3307 to <64 x i16>
  %3309 = load <64 x i16>, <64 x i16>* %2603, align 128, !tbaa !105
  %3310 = getelementptr inbounds i8, i8* %3221, i32 64
  %3311 = bitcast i8* %3310 to <64 x i8>*
  %3312 = load <64 x i8>, <64 x i8>* %3311, align 64, !tbaa !127
  %3313 = zext <64 x i8> %3312 to <64 x i16>
  %3314 = load <64 x i16>, <64 x i16>* %2605, align 128, !tbaa !105
  %3315 = getelementptr inbounds i8, i8* %3229, i32 64
  %3316 = bitcast i8* %3315 to <64 x i8>*
  %3317 = load <64 x i8>, <64 x i8>* %3316, align 64, !tbaa !127
  %3318 = zext <64 x i8> %3317 to <64 x i16>
  %3319 = load <64 x i16>, <64 x i16>* %2607, align 128, !tbaa !191
  %3320 = getelementptr inbounds i8, i8* %3236, i32 64
  %3321 = bitcast i8* %3320 to <64 x i8>*
  %3322 = load <64 x i8>, <64 x i8>* %3321, align 64, !tbaa !127
  %3323 = zext <64 x i8> %3322 to <64 x i16>
  %3324 = load <64 x i16>, <64 x i16>* %2609, align 128, !tbaa !193
  %3325 = getelementptr inbounds i8, i8* %3243, i32 64
  %3326 = bitcast i8* %3325 to <64 x i8>*
  %3327 = load <64 x i8>, <64 x i8>* %3326, align 64, !tbaa !127
  %3328 = zext <64 x i8> %3327 to <64 x i16>
  %3329 = load <64 x i16>, <64 x i16>* %2611, align 128, !tbaa !195
  %3330 = getelementptr inbounds i8, i8* %3251, i32 64
  %3331 = bitcast i8* %3330 to <64 x i8>*
  %3332 = load <64 x i8>, <64 x i8>* %3331, align 64, !tbaa !127
  %3333 = zext <64 x i8> %3332 to <64 x i16>
  %3334 = load <32 x i32>, <32 x i32>* %2437, align 128, !tbaa !119
  %3335 = load <32 x i32>, <32 x i32>* %2439, align 128, !tbaa !122
  %3336 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3335, <32 x i32> %3334)
  %3337 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3299, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3338 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3303, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3339 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3337, <64 x i16> %3338, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3340 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3314, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3341 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3318, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3342 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3340, <64 x i16> %3341, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3343 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3329, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3344 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3333, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3345 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3343, <64 x i16> %3344, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3346 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3345, <64 x i32> %3336, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3347 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3319, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3348 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3323, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3349 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3346, <64 x i16> %3347, <64 x i16> %3348, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3350 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3324, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3351 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3328, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3352 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3350, <64 x i16> %3351, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3353 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3349, <64 x i32> %3352, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3354 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3342, <64 x i32> %3353, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3355 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3304, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3356 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3308, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3357 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3354, <64 x i16> %3355, <64 x i16> %3356, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3358 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3309, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3359 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3313, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3360 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3358, <64 x i16> %3359, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3361 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3357, <64 x i32> %3360, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3362 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3339, <64 x i32> %3361, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3363 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3289, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3364 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3293, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3365 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3362, <64 x i16> %3363, <64 x i16> %3364, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3366 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3294, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3367 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3298, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3368 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3366, <64 x i16> %3367, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3369 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %3365, <64 x i32> %3368, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3370 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3288)
  store <32 x i32> %3370, <32 x i32>* %2433, align 128, !tbaa !109
  %3371 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3288)
  store <32 x i32> %3371, <32 x i32>* %2435, align 128, !tbaa !117
  %3372 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3369)
  store <32 x i32> %3372, <32 x i32>* %2437, align 128, !tbaa !119
  %3373 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3369)
  store <32 x i32> %3373, <32 x i32>* %2439, align 128, !tbaa !122
  br label %"consume convolved138"

next_bb131:                                       ; preds = %"for output.s0.x.xo125"
  %3374 = add nsw i32 %output.s0.x.xo127, %19
  br i1 %2374, label %"for convolved.s1.r19$y132.preheader", label %"consume convolved138", !prof !101

"for convolved.s1.r19$y132.preheader":            ; preds = %next_bb131
  %3375 = mul nsw i32 %3374, %stride_x
  %3376 = sub i32 %3375, %t2348
  br i1 %2373, label %"for convolved.s1.r19$y132.us", label %"consume convolved138", !prof !101

"for convolved.s1.r19$y132.us":                   ; preds = %"for convolved.s1.r19$y132.preheader", %"end for convolved.s1.r19$x136.loopexit.us"
  %3377 = phi <32 x i32> [ %3415, %"end for convolved.s1.r19$x136.loopexit.us" ], [ %2568, %"for convolved.s1.r19$y132.preheader" ]
  %3378 = phi <32 x i32> [ %3414, %"end for convolved.s1.r19$x136.loopexit.us" ], [ %2567, %"for convolved.s1.r19$y132.preheader" ]
  %"convolved.s1.r19$y134.us" = phi i32 [ %3419, %"end for convolved.s1.r19$x136.loopexit.us" ], [ 0, %"for convolved.s1.r19$y132.preheader" ]
  %3379 = mul nsw i32 %"convolved.s1.r19$y134.us", %a68
  %3380 = add nsw i32 %3379, %3180
  %3381 = mul nsw i32 %3380, %2417
  %t2397.us = add nsw i32 %3376, %3381
  %3382 = mul nsw i32 %"convolved.s1.r19$y134.us", %4
  br label %"for convolved.s1.r19$x135.us"

"for convolved.s1.r19$x135.us":                   ; preds = %"for convolved.s1.r19$y132.us", %"for convolved.s1.r19$x135.us"
  %3383 = phi <32 x i32> [ %3415, %"for convolved.s1.r19$x135.us" ], [ %3377, %"for convolved.s1.r19$y132.us" ]
  %3384 = phi <32 x i32> [ %3414, %"for convolved.s1.r19$x135.us" ], [ %3378, %"for convolved.s1.r19$y132.us" ]
  %"convolved.s1.r19$x137.us" = phi i32 [ %3418, %"for convolved.s1.r19$x135.us" ], [ 0, %"for convolved.s1.r19$y132.us" ]
  %3385 = add nsw i32 %"convolved.s1.r19$x137.us", %3382
  %3386 = shl nsw i32 %3385, 7
  %3387 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %3386
  %3388 = bitcast i16* %3387 to <64 x i16>*
  %3389 = load <64 x i16>, <64 x i16>* %3388, align 128, !tbaa !105
  %3390 = mul nsw i32 %"convolved.s1.r19$x137.us", %a73
  %3391 = add nsw i32 %t2397.us, %3390
  %3392 = shl nsw i32 %3391, 7
  %3393 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3392
  %3394 = bitcast i8* %3393 to <64 x i8>*
  %3395 = load <64 x i8>, <64 x i8>* %3394, align 128, !tbaa !127
  %3396 = zext <64 x i8> %3395 to <64 x i16>
  %3397 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3383, <32 x i32> %3384)
  %3398 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3396, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3399 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3389, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3400 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3397, <64 x i16> %3398, <64 x i16> %3399, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3401 = getelementptr inbounds i16, i16* %3387, i32 64
  %3402 = bitcast i16* %3401 to <64 x i16>*
  %3403 = load <64 x i16>, <64 x i16>* %3402, align 128, !tbaa !105
  %3404 = getelementptr inbounds i8, i8* %3393, i32 64
  %3405 = bitcast i8* %3404 to <64 x i8>*
  %3406 = load <64 x i8>, <64 x i8>* %3405, align 64, !tbaa !127
  %3407 = zext <64 x i8> %3406 to <64 x i16>
  %3408 = load <32 x i32>, <32 x i32>* %2437, align 128, !tbaa !119
  %3409 = load <32 x i32>, <32 x i32>* %2439, align 128, !tbaa !122
  %3410 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3409, <32 x i32> %3408)
  %3411 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3407, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3412 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %3403, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %3413 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %3410, <64 x i16> %3411, <64 x i16> %3412, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %3414 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3400)
  store <32 x i32> %3414, <32 x i32>* %2433, align 128, !tbaa !109
  %3415 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3400)
  store <32 x i32> %3415, <32 x i32>* %2435, align 128, !tbaa !117
  %3416 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3413)
  store <32 x i32> %3416, <32 x i32>* %2437, align 128, !tbaa !119
  %3417 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3413)
  store <32 x i32> %3417, <32 x i32>* %2439, align 128, !tbaa !122
  %3418 = add nuw nsw i32 %"convolved.s1.r19$x137.us", 1
  %.not727.us = icmp eq i32 %3418, %4
  br i1 %.not727.us, label %"end for convolved.s1.r19$x136.loopexit.us", label %"for convolved.s1.r19$x135.us"

"end for convolved.s1.r19$x136.loopexit.us":      ; preds = %"for convolved.s1.r19$x135.us"
  %3419 = add nuw nsw i32 %"convolved.s1.r19$y134.us", 1
  %.not726.us = icmp eq i32 %3419, %6
  br i1 %.not726.us, label %"consume convolved138", label %"for convolved.s1.r19$y132.us"

"consume convolved138":                           ; preds = %"end for convolved.s1.r19$x136.loopexit.us", %next_bb131, %"for convolved.s1.r19$y132.preheader", %then_bb130
  %.pre-phi4852 = phi i32 [ %3186, %then_bb130 ], [ %3374, %"for convolved.s1.r19$y132.preheader" ], [ %3374, %next_bb131 ], [ %3374, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %3420 = phi <32 x i32> [ %3373, %then_bb130 ], [ %2570, %"for convolved.s1.r19$y132.preheader" ], [ %2570, %next_bb131 ], [ %3417, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %3421 = phi <32 x i32> [ %3372, %then_bb130 ], [ %2569, %"for convolved.s1.r19$y132.preheader" ], [ %2569, %next_bb131 ], [ %3416, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %3422 = phi <32 x i32> [ %3371, %then_bb130 ], [ %2568, %"for convolved.s1.r19$y132.preheader" ], [ %2568, %next_bb131 ], [ %3415, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %3423 = phi <32 x i32> [ %3370, %then_bb130 ], [ %2567, %"for convolved.s1.r19$y132.preheader" ], [ %2567, %next_bb131 ], [ %3414, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %3424 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3425 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3426 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3422, <32 x i32> %3425, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3427 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3428 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3426, <32 x i32> %3422, <32 x i32> %3427, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3429 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3424, <1 x i32> zeroinitializer, <32 x i32> %3428, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3430 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3431 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3432 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3422, <32 x i32> %3431, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3433 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3434 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3432, <32 x i32> %3422, <32 x i32> %3433, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3435 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3430, <1 x i32> zeroinitializer, <32 x i32> %3434, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3436 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3435, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3437 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3429, <64 x i16> %3436, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3438 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3439 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3440 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3423, <32 x i32> %3439, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3441 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3442 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3440, <32 x i32> %3423, <32 x i32> %3441, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3443 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3438, <1 x i32> zeroinitializer, <32 x i32> %3442, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3444 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3445 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3446 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3423, <32 x i32> %3445, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3447 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3448 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3446, <32 x i32> %3423, <32 x i32> %3447, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3449 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3444, <1 x i32> zeroinitializer, <32 x i32> %3448, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3450 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3449, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3451 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3443, <64 x i16> %3450, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3452 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %3437, <32 x i32> %3451, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %3453 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3454 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3455 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3420, <32 x i32> %3454, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3456 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3457 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3455, <32 x i32> %3420, <32 x i32> %3456, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3458 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3453, <1 x i32> zeroinitializer, <32 x i32> %3457, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3459 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3460 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3461 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3420, <32 x i32> %3460, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3462 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3463 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3461, <32 x i32> %3420, <32 x i32> %3462, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3464 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3459, <1 x i32> zeroinitializer, <32 x i32> %3463, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3465 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3464, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3466 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3458, <64 x i16> %3465, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3467 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3468 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3469 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3421, <32 x i32> %3468, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3470 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3471 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3469, <32 x i32> %3421, <32 x i32> %3470, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3472 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3467, <1 x i32> zeroinitializer, <32 x i32> %3471, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3473 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3474 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3475 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3421, <32 x i32> %3474, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3476 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3477 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3475, <32 x i32> %3421, <32 x i32> %3476, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3478 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3473, <1 x i32> zeroinitializer, <32 x i32> %3477, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3479 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3478, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3480 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3472, <64 x i16> %3479, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3481 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %3466, <32 x i32> %3480, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %3482 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %3452, <64 x i16> %3481, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3483 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %2446, <256 x i8> %3482, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %3484 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %3483, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3485 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3486 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3487 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3422, <32 x i32> %3486, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3488 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3489 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3487, <32 x i32> %3422, <32 x i32> %3488, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3490 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3485, <1 x i32> zeroinitializer, <32 x i32> %3489, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3491 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3492 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3493 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3422, <32 x i32> %3492, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3494 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3495 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3493, <32 x i32> %3422, <32 x i32> %3494, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3496 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3491, <1 x i32> zeroinitializer, <32 x i32> %3495, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3497 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3496, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3498 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3490, <64 x i16> %3497, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3499 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3500 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3501 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3423, <32 x i32> %3500, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3502 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3503 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3501, <32 x i32> %3423, <32 x i32> %3502, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3504 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3499, <1 x i32> zeroinitializer, <32 x i32> %3503, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3505 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3506 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3507 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3423, <32 x i32> %3506, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3508 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3509 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3507, <32 x i32> %3423, <32 x i32> %3508, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3510 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3505, <1 x i32> zeroinitializer, <32 x i32> %3509, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3511 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3510, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3512 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3504, <64 x i16> %3511, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3513 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %3498, <32 x i32> %3512, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %3514 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3515 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3516 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3420, <32 x i32> %3515, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3517 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3518 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3516, <32 x i32> %3420, <32 x i32> %3517, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3519 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3514, <1 x i32> zeroinitializer, <32 x i32> %3518, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3520 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3521 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3522 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3420, <32 x i32> %3521, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3523 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3524 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3522, <32 x i32> %3420, <32 x i32> %3523, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3525 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3520, <1 x i32> zeroinitializer, <32 x i32> %3524, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3526 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3525, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3527 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3519, <64 x i16> %3526, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3528 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2452, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3529 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3530 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3421, <32 x i32> %3529, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3531 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3532 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3530, <32 x i32> %3421, <32 x i32> %3531, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3533 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3528, <1 x i32> zeroinitializer, <32 x i32> %3532, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3534 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3535 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3536 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %3421, <32 x i32> %3535, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %3537 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2451, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3538 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %3536, <32 x i32> %3421, <32 x i32> %3537, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %3539 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3534, <1 x i32> zeroinitializer, <32 x i32> %3538, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %3540 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %3539, <32 x i32> %2442, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %3541 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %3533, <64 x i16> %3540, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %3542 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %3527, <32 x i32> %3541, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %3543 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %3513, <64 x i16> %3542, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3544 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %2446, <256 x i8> %3543, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %3545 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %3544, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %3546 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %3484, <128 x i8> %3545, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0) #11
  %3547 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %2448, <128 x i8> %3546, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %3548 = call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %2450, <128 x i8> %3547, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %3549 = mul nsw i32 %.pre-phi4852, %21
  %3550 = add i32 %3182, %3549
  %3551 = getelementptr inbounds i8, i8* %17, i32 %3550
  %3552 = bitcast i8* %3551 to <128 x i8>*
  store <128 x i8> %3548, <128 x i8>* %3552, align 1, !tbaa !197
  %3553 = add nuw nsw i32 %output.s0.x.xo127, 1
  %.not725 = icmp eq i32 %3553, %20
  br i1 %.not725, label %"end for output.s0.x.xo126", label %"for output.s0.x.xo125"

if.end.i893:                                      ; preds = %next_bb68
  %3554 = icmp eq i32 %4, 3
  %3555 = icmp eq i32 %6, 3
  %3556 = and i1 %3554, %3555
  %3557 = icmp sgt i32 %4, 0
  %3558 = icmp sgt i32 %6, 0
  %3559 = select i1 %3558, i32 %6, i32 0
  %.op = shl i32 %4, 8
  %3560 = select i1 %3557, i32 %.op, i32 0
  %3561 = mul i32 %3560, %3559
  %3562 = or i32 %3561, 134
  %3563 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i32 %3562, i32* %.fca.2.gep, align 4, !tbaa !97
  %cmp7.i892 = icmp ugt i32 %3562, 16384
  br i1 %cmp7.i892, label %pseudostack_alloc.exit898, label %pseudostack_alloc.exit898.thread

pseudostack_alloc.exit898.thread:                 ; preds = %if.end.i893
  store i32 %3562, i32* %.fca.1.gep, align 4, !tbaa !98
  br label %then_bb154

pseudostack_alloc.exit898:                        ; preds = %if.end.i893
  %call.i894 = tail call i8* @halide_malloc(i8* null, i32 %3562) #14
  store i8* %call.i894, i8** %.fca.0.gep, align 4, !tbaa !95
  store i32 %3562, i32* %.fca.1.gep, align 4, !tbaa !98
  %3564 = bitcast i8* %call.i894 to i16*
  %.not = icmp eq i8* %call.i894, null
  br i1 %.not, label %then_bb154, label %"produce filter_zeroed156", !prof !100

then_bb154:                                       ; preds = %pseudostack_alloc.exit898.thread, %pseudostack_alloc.exit898
  %3565 = alloca i8*, i32 %3562, align 128
  %3566 = bitcast i8** %3565 to i16*
  %3567 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %3565, i8*** %3567, align 4
  br label %"produce filter_zeroed156"

"produce filter_zeroed156":                       ; preds = %pseudostack_alloc.exit898, %then_bb154
  %filter_zeroed155 = phi i16* [ %3566, %then_bb154 ], [ %3564, %pseudostack_alloc.exit898 ]
  %t2399 = icmp sgt i32 %3, 64
  %t2398 = icmp sgt i32 %3, 63
  br i1 %3558, label %"for filter_zeroed.s0.y157.preheader", label %"produce sum_filter174", !prof !101

"for filter_zeroed.s0.y157.preheader":            ; preds = %"produce filter_zeroed156"
  %3568 = insertelement <64 x i32> undef, i32 %3, i32 0
  %3569 = shufflevector <64 x i32> %3568, <64 x i32> undef, <64 x i32> zeroinitializer
  %3570 = icmp sgt <64 x i32> %3569, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3571 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %3572 = shufflevector <64 x i8> %3571, <64 x i8> undef, <64 x i32> zeroinitializer
  %3573 = zext <64 x i8> %3572 to <64 x i16>
  %3574 = icmp sgt <64 x i32> %3569, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br i1 %3557, label %"for filter_zeroed.s0.y157.preheader.split.us", label %"produce sum_filter174", !prof !101

"for filter_zeroed.s0.y157.preheader.split.us":   ; preds = %"for filter_zeroed.s0.y157.preheader"
  br i1 %t2398, label %"for filter_zeroed.s0.y157.us.us", label %"for filter_zeroed.s0.y157.us"

"for filter_zeroed.s0.y157.us.us":                ; preds = %"for filter_zeroed.s0.y157.preheader.split.us", %"end for filter_zeroed.s0.x161.loopexit.split.us.us.us"
  %filter_zeroed.s0.y159.us.us = phi i32 [ %3596, %"end for filter_zeroed.s0.x161.loopexit.split.us.us.us" ], [ 0, %"for filter_zeroed.s0.y157.preheader.split.us" ]
  %3575 = mul nsw i32 %filter_zeroed.s0.y159.us.us, %7
  %3576 = mul nsw i32 %filter_zeroed.s0.y159.us.us, %4
  br label %"for filter_zeroed.s0.x160.us.us.us"

"for filter_zeroed.s0.x160.us.us.us":             ; preds = %after_bb163.us.us.us, %"for filter_zeroed.s0.y157.us.us"
  %filter_zeroed.s0.x162.us.us.us = phi i32 [ %3595, %after_bb163.us.us.us ], [ 0, %"for filter_zeroed.s0.y157.us.us" ]
  %3577 = mul nsw i32 %filter_zeroed.s0.x162.us.us.us, %5
  %3578 = add nsw i32 %3577, %3575
  %3579 = getelementptr inbounds i8, i8* %1, i32 %3578
  %3580 = bitcast i8* %3579 to <64 x i8>*
  %3581 = load <64 x i8>, <64 x i8>* %3580, align 1, !tbaa !102
  %3582 = zext <64 x i8> %3581 to <64 x i16>
  %3583 = call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %3582, <64 x i16> %3573, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0) #11
  %3584 = add nsw i32 %filter_zeroed.s0.x162.us.us.us, %3576
  %3585 = shl nsw i32 %3584, 7
  %3586 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3585
  %3587 = bitcast i16* %3586 to <64 x i16>*
  store <64 x i16> %3583, <64 x i16>* %3587, align 128, !tbaa !105
  br i1 %t2399, label %then_bb167.us.us.us, label %after_bb163.us.us.us

then_bb167.us.us.us:                              ; preds = %"for filter_zeroed.s0.x160.us.us.us"
  %3588 = getelementptr inbounds i8, i8* %3579, i32 64
  %3589 = bitcast i8* %3588 to <64 x i8>*
  %3590 = load <64 x i8>, <64 x i8>* %3589, align 1, !tbaa !102
  %3591 = zext <64 x i8> %3590 to <64 x i16>
  %3592 = call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %3591, <64 x i16> %3573, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0) #11
  %3593 = getelementptr inbounds i16, i16* %3586, i32 64
  %3594 = bitcast i16* %3593 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3592, <64 x i16>* nonnull %3594, i32 128, <64 x i1> %3574), !tbaa !105
  br label %after_bb163.us.us.us

after_bb163.us.us.us:                             ; preds = %then_bb167.us.us.us, %"for filter_zeroed.s0.x160.us.us.us"
  %3595 = add nuw nsw i32 %filter_zeroed.s0.x162.us.us.us, 1
  %.not716.us.us.us = icmp eq i32 %3595, %4
  br i1 %.not716.us.us.us, label %"end for filter_zeroed.s0.x161.loopexit.split.us.us.us", label %"for filter_zeroed.s0.x160.us.us.us"

"end for filter_zeroed.s0.x161.loopexit.split.us.us.us": ; preds = %after_bb163.us.us.us
  %3596 = add nuw nsw i32 %filter_zeroed.s0.y159.us.us, 1
  %.not715.us.us = icmp eq i32 %3596, %6
  br i1 %.not715.us.us, label %"produce sum_filter174", label %"for filter_zeroed.s0.y157.us.us"

"for filter_zeroed.s0.y157.us":                   ; preds = %"for filter_zeroed.s0.y157.preheader.split.us", %"end for filter_zeroed.s0.x161.loopexit.split.us4797"
  %filter_zeroed.s0.y159.us = phi i32 [ %3611, %"end for filter_zeroed.s0.x161.loopexit.split.us4797" ], [ 0, %"for filter_zeroed.s0.y157.preheader.split.us" ]
  %3597 = mul nsw i32 %filter_zeroed.s0.y159.us, %7
  %3598 = mul nsw i32 %filter_zeroed.s0.y159.us, %4
  br label %"for filter_zeroed.s0.x160.us4794"

"for filter_zeroed.s0.x160.us4794":               ; preds = %"for filter_zeroed.s0.y157.us", %"for filter_zeroed.s0.x160.us4794"
  %filter_zeroed.s0.x162.us4795 = phi i32 [ %3610, %"for filter_zeroed.s0.x160.us4794" ], [ 0, %"for filter_zeroed.s0.y157.us" ]
  %3599 = mul nsw i32 %filter_zeroed.s0.x162.us4795, %5
  %3600 = add nsw i32 %3599, %3597
  %3601 = getelementptr inbounds i8, i8* %1, i32 %3600
  %3602 = bitcast i8* %3601 to <64 x i8>*
  %3603 = load <64 x i8>, <64 x i8>* %3602, align 1, !tbaa !102
  %3604 = zext <64 x i8> %3603 to <64 x i16>
  %3605 = call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %3604, <64 x i16> %3573, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0) #11
  %3606 = add nsw i32 %filter_zeroed.s0.x162.us4795, %3598
  %3607 = shl nsw i32 %3606, 7
  %3608 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3607
  %3609 = bitcast i16* %3608 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3605, <64 x i16>* %3609, i32 128, <64 x i1> %3570), !tbaa !105
  %3610 = add nuw nsw i32 %filter_zeroed.s0.x162.us4795, 1
  %.not716.us4796 = icmp eq i32 %3610, %4
  br i1 %.not716.us4796, label %"end for filter_zeroed.s0.x161.loopexit.split.us4797", label %"for filter_zeroed.s0.x160.us4794"

"end for filter_zeroed.s0.x161.loopexit.split.us4797": ; preds = %"for filter_zeroed.s0.x160.us4794"
  %3611 = add nuw nsw i32 %filter_zeroed.s0.y159.us, 1
  %.not715.us = icmp eq i32 %3611, %6
  br i1 %.not715.us, label %"produce sum_filter174", label %"for filter_zeroed.s0.y157.us"

"produce sum_filter174":                          ; preds = %"end for filter_zeroed.s0.x161.loopexit.split.us4797", %"end for filter_zeroed.s0.x161.loopexit.split.us.us.us", %"for filter_zeroed.s0.y157.preheader", %"produce filter_zeroed156"
  %3612 = insertelement <128 x i32> undef, i32 %3, i32 0
  %3613 = shufflevector <128 x i32> %3612, <128 x i32> undef, <128 x i32> zeroinitializer
  %3614 = icmp sgt <128 x i32> %3613, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3615 = bitcast [128 x i32]* %sum_filter701 to <32 x i32>*
  %3616 = shufflevector <128 x i1> %3614, <128 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3615, i32 128, <32 x i1> %3616), !tbaa !109
  %3617 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 32
  %3618 = bitcast i32* %3617 to <32 x i32>*
  %3619 = shufflevector <128 x i1> %3614, <128 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3618, i32 128, <32 x i1> %3619), !tbaa !117
  %3620 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 64
  %3621 = bitcast i32* %3620 to <32 x i32>*
  %3622 = shufflevector <128 x i1> %3614, <128 x i1> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3621, i32 128, <32 x i1> %3622), !tbaa !119
  %3623 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 96
  %3624 = bitcast i32* %3623 to <32 x i32>*
  %3625 = shufflevector <128 x i1> %3614, <128 x i1> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3624, i32 128, <32 x i1> %3625), !tbaa !122
  %brmerge4883.demorgan = and i1 %3558, %3557
  br i1 %brmerge4883.demorgan, label %"for sum_filter.s1.r19$y175.preheader.split.us", label %"consume sum_filter199", !prof !199

"for sum_filter.s1.r19$y175.preheader.split.us":  ; preds = %"produce sum_filter174"
  %3626 = zext <128 x i1> %3614 to <128 x i8>
  %3627 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %3626) #9
  %3628 = and i8 %3627, 1
  %t2486.not.us = icmp eq i8 %3628, 0
  br label %"for sum_filter.s1.r19$y175.us"

"for sum_filter.s1.r19$y175.us":                  ; preds = %"end for sum_filter.s1.r19$x179.loopexit.us", %"for sum_filter.s1.r19$y175.preheader.split.us"
  %"sum_filter.s1.r19$y177.us" = phi i32 [ %3672, %"end for sum_filter.s1.r19$x179.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y175.preheader.split.us" ]
  %3629 = mul nsw i32 %"sum_filter.s1.r19$y177.us", %4
  br label %"for sum_filter.s1.r19$x178.us"

"for sum_filter.s1.r19$x178.us":                  ; preds = %"for sum_filter.s1.r19$y175.us", %after_bb198.us
  %"sum_filter.s1.r19$x180.us" = phi i32 [ %3671, %after_bb198.us ], [ 0, %"for sum_filter.s1.r19$y175.us" ]
  br i1 %t2486.not.us, label %after_bb195.thread.us, label %true_bb196.us

true_bb196.us:                                    ; preds = %"for sum_filter.s1.r19$x178.us"
  %3630 = load <32 x i32>, <32 x i32>* %3615, align 128, !tbaa !109
  %3631 = load <32 x i32>, <32 x i32>* %3618, align 128, !tbaa !117
  %3632 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3631, <32 x i32> %3630)
  %3633 = shufflevector <64 x i32> %3632, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3634 = bitcast <128 x i32> %3633 to <64 x i64>
  %3635 = shufflevector <64 x i64> %3634, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3636 = bitcast <32 x i64> %3635 to <64 x i32>
  %3637 = add nsw i32 %"sum_filter.s1.r19$x180.us", %3629
  %3638 = shl nsw i32 %3637, 7
  %3639 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3638
  %3640 = bitcast i16* %3639 to <32 x i32>*
  %3641 = load <32 x i32>, <32 x i32>* %3640, align 128, !tbaa !105
  %3642 = getelementptr inbounds i16, i16* %3639, i32 64
  %3643 = bitcast i16* %3642 to <32 x i32>*
  %3644 = load <32 x i32>, <32 x i32>* %3643, align 128, !tbaa !105
  %3645 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3644, <32 x i32> %3641)
  %3646 = bitcast <64 x i32> %3645 to <128 x i16>
  %3647 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %3646, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3648 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddubh_acc_128B_dsl(<64 x i32> %3636, <32 x i32> zeroinitializer, <128 x i8> %3647, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 -1, i32 32, i32 -1, i32 1, i32 -1, i32 16, i32 1024, i32 2, i32 0) #11
  %3649 = load <32 x i32>, <32 x i32>* %3621, align 128, !tbaa !119
  %3650 = load <32 x i32>, <32 x i32>* %3624, align 128, !tbaa !122
  %3651 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3650, <32 x i32> %3649)
  %3652 = shufflevector <64 x i32> %3651, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3653 = bitcast <128 x i32> %3652 to <64 x i64>
  %3654 = shufflevector <64 x i64> %3653, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3655 = bitcast <32 x i64> %3654 to <64 x i32>
  %3656 = load <32 x i32>, <32 x i32>* %3640, align 128, !tbaa !105
  %3657 = load <32 x i32>, <32 x i32>* %3643, align 128, !tbaa !105
  %3658 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3657, <32 x i32> %3656)
  %3659 = bitcast <64 x i32> %3658 to <128 x i16>
  br label %after_bb198.us

after_bb195.thread.us:                            ; preds = %"for sum_filter.s1.r19$x178.us"
  %3660 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3661 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddubh_acc_128B_dsl(<64 x i32> zeroinitializer, <32 x i32> zeroinitializer, <128 x i8> %3660, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 -1, i32 32, i32 -1, i32 1, i32 -1, i32 16, i32 1024, i32 2, i32 0) #11
  br label %after_bb198.us

after_bb198.us:                                   ; preds = %after_bb195.thread.us, %true_bb196.us
  %3662 = phi <64 x i32> [ %3655, %true_bb196.us ], [ zeroinitializer, %after_bb195.thread.us ]
  %3663 = phi <64 x i32> [ %3648, %true_bb196.us ], [ %3661, %after_bb195.thread.us ]
  %3664 = phi <128 x i16> [ %3659, %true_bb196.us ], [ zeroinitializer, %after_bb195.thread.us ]
  %3665 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %3664, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %3666 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddubh_acc_128B_dsl.1(<64 x i32> %3662, <128 x i8> %3665, <32 x i32> zeroinitializer, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 -1, i32 32, i32 -1, i32 1, i32 -1, i32 16, i32 1024, i32 2, i32 0) #11
  %3667 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3663)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3667, <32 x i32>* nonnull %3615, i32 128, <32 x i1> %3616), !tbaa !109
  %3668 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3663)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3668, <32 x i32>* nonnull %3618, i32 128, <32 x i1> %3619), !tbaa !117
  %3669 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3666)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3669, <32 x i32>* nonnull %3621, i32 128, <32 x i1> %3622), !tbaa !119
  %3670 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3666)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3670, <32 x i32>* nonnull %3624, i32 128, <32 x i1> %3625), !tbaa !122
  %3671 = add nuw nsw i32 %"sum_filter.s1.r19$x180.us", 1
  %.not714.us = icmp eq i32 %3671, %4
  br i1 %.not714.us, label %"end for sum_filter.s1.r19$x179.loopexit.us", label %"for sum_filter.s1.r19$x178.us"

"end for sum_filter.s1.r19$x179.loopexit.us":     ; preds = %after_bb198.us
  %3672 = add nuw nsw i32 %"sum_filter.s1.r19$y177.us", 1
  %.not713.us = icmp eq i32 %3672, %6
  br i1 %.not713.us, label %"consume sum_filter199", label %"for sum_filter.s1.r19$y175.us"

"consume sum_filter199":                          ; preds = %"end for sum_filter.s1.r19$x179.loopexit.us", %"produce sum_filter174"
  %3673 = zext <128 x i1> %3614 to <128 x i8>
  %3674 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %3673) #9
  %3675 = and i8 %3674, 1
  %t2487.not = icmp eq i8 %3675, 0
  br i1 %t2487.not, label %after_bb211, label %true_bb206

true_bb206:                                       ; preds = %"consume sum_filter199"
  %3676 = bitcast i8* %0 to <32 x i32>*
  %3677 = load <32 x i32>, <32 x i32>* %3676, align 4, !tbaa !200
  %3678 = getelementptr inbounds i8, i8* %0, i32 128
  %3679 = bitcast i8* %3678 to <32 x i32>*
  %3680 = load <32 x i32>, <32 x i32>* %3679, align 4, !tbaa !207
  %3681 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3680, <32 x i32> %3677)
  %3682 = shufflevector <64 x i32> %3681, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3683 = bitcast <128 x i32> %3682 to <64 x i64>
  %3684 = shufflevector <64 x i64> %3683, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3685 = bitcast <32 x i64> %3684 to <64 x i32>
  %3686 = load <32 x i32>, <32 x i32>* %3615, align 128, !tbaa !109
  %3687 = load <32 x i32>, <32 x i32>* %3618, align 128, !tbaa !117
  %3688 = load <32 x i32>, <32 x i32>* %3621, align 128, !tbaa !119
  %3689 = load <32 x i32>, <32 x i32>* %3624, align 128, !tbaa !122
  %3690 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3687, <32 x i32> %3686)
  %3691 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3689, <32 x i32> %3688)
  %3692 = shufflevector <64 x i32> %3690, <64 x i32> %3691, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast = bitcast <128 x i32> %3692 to <64 x i64>
  br label %after_bb211

after_bb211:                                      ; preds = %"consume sum_filter199", %true_bb206
  %3693 = phi <64 x i32> [ %3685, %true_bb206 ], [ zeroinitializer, %"consume sum_filter199" ]
  %3694 = phi <64 x i64> [ %phi.cast, %true_bb206 ], [ zeroinitializer, %"consume sum_filter199" ]
  %3695 = shufflevector <64 x i64> %3694, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3696 = bitcast <32 x i64> %3695 to <64 x i32>
  %3697 = zext i8 %input_zero to i32
  %3698 = insertelement <1 x i32> poison, i32 %3697, i32 0
  %3699 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3700 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %3696, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3701 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %3699, <128 x i8> %3700, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %3702 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3703 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %3696, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3704 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %3701, <32 x i32> %3702, <128 x i8> %3703, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %3705 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3706 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %3696, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %3707 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %3705, <128 x i8> %3706, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %3708 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3709 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %3696, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %3710 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %3707, <32 x i32> %3708, <128 x i8> %3709, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %3711 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %3704, <32 x i32> %3710, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3712 = call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %3693, <256 x i8> %3711, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  br i1 %t2487.not, label %after_bb223, label %true_bb218

true_bb218:                                       ; preds = %after_bb211
  %3713 = getelementptr inbounds i8, i8* %0, i32 256
  %3714 = bitcast i8* %3713 to <32 x i32>*
  %3715 = load <32 x i32>, <32 x i32>* %3714, align 4, !tbaa !209
  %3716 = getelementptr inbounds i8, i8* %0, i32 384
  %3717 = bitcast i8* %3716 to <32 x i32>*
  %3718 = load <32 x i32>, <32 x i32>* %3717, align 4, !tbaa !212
  %3719 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3718, <32 x i32> %3715)
  %3720 = shufflevector <64 x i32> %3719, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3721 = bitcast <128 x i32> %3720 to <64 x i64>
  %3722 = shufflevector <64 x i64> %3721, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3723 = bitcast <32 x i64> %3722 to <64 x i32>
  %3724 = load <32 x i32>, <32 x i32>* %3615, align 128, !tbaa !109
  %3725 = load <32 x i32>, <32 x i32>* %3618, align 128, !tbaa !117
  %3726 = load <32 x i32>, <32 x i32>* %3621, align 128, !tbaa !119
  %3727 = load <32 x i32>, <32 x i32>* %3624, align 128, !tbaa !122
  %3728 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3725, <32 x i32> %3724)
  %3729 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3727, <32 x i32> %3726)
  %3730 = shufflevector <64 x i32> %3728, <64 x i32> %3729, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast4855 = bitcast <128 x i32> %3730 to <64 x i64>
  br label %after_bb223

after_bb223:                                      ; preds = %after_bb211, %true_bb218
  %3731 = phi <64 x i32> [ %3723, %true_bb218 ], [ zeroinitializer, %after_bb211 ]
  %3732 = phi <64 x i64> [ %phi.cast4855, %true_bb218 ], [ zeroinitializer, %after_bb211 ]
  %3733 = shufflevector <64 x i64> %3732, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3734 = bitcast <32 x i64> %3733 to <64 x i32>
  %3735 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3736 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %3734, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3737 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %3735, <128 x i8> %3736, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %3738 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3739 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %3734, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3740 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %3737, <32 x i32> %3738, <128 x i8> %3739, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %3741 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3742 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %3734, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %3743 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %3741, <128 x i8> %3742, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0) #11
  %3744 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3698, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %3745 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %3734, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %3746 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %3743, <32 x i32> %3744, <128 x i8> %3745, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0) #11
  %3747 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %3740, <32 x i32> %3746, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %3748 = call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %3731, <256 x i8> %3747, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %3749 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3712)
  %3750 = bitcast [512 x i32]* %offset_c699 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3749, <32 x i32>* nonnull %3750, i32 128, <32 x i1> %3616), !tbaa !129
  %3751 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3712)
  %3752 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 32
  %3753 = bitcast i32* %3752 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3751, <32 x i32>* nonnull %3753, i32 128, <32 x i1> %3619), !tbaa !137
  %3754 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3748)
  %3755 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 64
  %3756 = bitcast i32* %3755 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3754, <32 x i32>* nonnull %3756, i32 128, <32 x i1> %3622), !tbaa !139
  %3757 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3748)
  %3758 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 96
  %3759 = bitcast i32* %3758 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3757, <32 x i32>* nonnull %3759, i32 128, <32 x i1> %3625), !tbaa !142
  %t2427 = icmp slt i32 %a73, 0
  %t2429 = icmp slt i32 %stride_x, 0
  %3760 = add nsw i32 %4, -1
  %3761 = mul nsw i32 %3760, %a73
  %t2430 = select i1 %t2427, i32 %3761, i32 0
  %t2431.s = select i1 %t2429, i32 %20, i32 1
  %t2432 = icmp slt i32 %a68, 0
  %t2434 = icmp slt i32 %stride_y, 0
  %3762 = add nsw i32 %6, -1
  %3763 = mul nsw i32 %3762, %a68
  %t2435 = select i1 %t2432, i32 %3763, i32 0
  %t2436.s = select i1 %t2434, i32 %23, i32 1
  %t2420 = icmp eq i32 %depth_multiplier, 1
  %a68.op = shl i32 %a68, 1
  %3764 = select i1 %t2432, i32 %a68.op, i32 0
  %3765 = select i1 %3556, i32 %3764, i32 %t2435
  %3766 = add i32 %22, -1
  %3767 = add i32 %3766, %t2436.s
  %3768 = mul nsw i32 %3767, %stride_y
  %a73.op = shl i32 %a73, 1
  %3769 = select i1 %t2427, i32 %a73.op, i32 0
  %3770 = select i1 %3556, i32 %3769, i32 %t2430
  %3771 = add i32 %19, -1
  %3772 = add i32 %3771, %t2431.s
  %3773 = mul nsw i32 %3772, %stride_x
  %3774 = select i1 %t2432, i32 0, i32 %3763
  %3775 = add nsw i32 %23, -1
  %3776 = select i1 %t2434, i32 0, i32 %3775
  %3777 = add nsw i32 %3776, %22
  %3778 = mul nsw i32 %3777, %stride_y
  %b67 = add nsw i32 %3778, %3774
  %3779 = select i1 %t2427, i32 0, i32 %3761
  %3780 = add nsw i32 %20, -1
  %3781 = select i1 %t2429, i32 0, i32 %3780
  %3782 = add nsw i32 %3781, %19
  %3783 = mul nsw i32 %3782, %stride_x
  %b72 = add nsw i32 %3783, %3779
  %3784 = mul nsw i32 %13, %12
  %3785 = mul nsw i32 %16, %14
  %3786 = mul nsw i32 %11, %10
  %3787 = add i32 %3784, %3786
  %t2421 = add i32 %3787, %3785
  %3788 = icmp sgt i32 %15, 0
  br i1 %3788, label %"for output.s0.b.rebased226.preheader", label %if.then.i821, !prof !101

"for output.s0.b.rebased226.preheader":           ; preds = %after_bb223
  %b71 = add nsw i32 %3773, %3770
  %b66 = add nsw i32 %3768, %3765
  %a64 = add nsw i32 %3768, %t2435
  %3789 = icmp slt i32 %t2435, %3765
  %resampled_input.y.min_realized = select i1 %3789, i32 %a64, i32 %b66
  %3790 = icmp sgt i32 %a68, 0
  %3791 = select i1 %3790, i32 %a68, i32 0
  %3792 = shl nuw nsw i32 %3791, 1
  %3793 = select i1 %3556, i32 %3792, i32 %3774
  %a65 = add nsw i32 %3778, %3793
  %3794 = icmp sgt i32 %3793, %3774
  %3795 = select i1 %3794, i32 %a65, i32 %b67
  %a77 = sub nsw i32 %3795, %resampled_input.y.min_realized
  %a69 = add nsw i32 %3773, %t2430
  %3796 = icmp slt i32 %t2430, %3770
  %resampled_input.x.min_realized = select i1 %3796, i32 %a69, i32 %b71
  %3797 = icmp sgt i32 %a73, 0
  %3798 = select i1 %3797, i32 %a73, i32 0
  %3799 = shl nuw nsw i32 %3798, 1
  %3800 = select i1 %3556, i32 %3799, i32 %3779
  %a70 = add nsw i32 %3783, %3800
  %3801 = icmp sgt i32 %3800, %3779
  %3802 = select i1 %3801, i32 %a70, i32 %b72
  %a76 = sub nsw i32 %3802, %resampled_input.x.min_realized
  %3803 = icmp sgt i32 %a76, -1
  %t2549 = select i1 %3803, i32 %a76, i32 -1
  %3804 = icmp sgt i32 %a77, -1
  %t2550 = select i1 %3804, i32 %a77, i32 -1
  %3805 = add nsw i32 %t2550, 1
  %3806 = shl i32 %t2549, 7
  %t2551 = add i32 %3806, 128
  %3807 = mul i32 %t2551, %3805
  %3808 = add i32 %3807, 131
  %3809 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2448 = sub nsw i32 %b72, %a69
  %t2447 = sub nsw i32 %b67, %a64
  %3810 = icmp sgt i32 %t2447, -1
  %3811 = sub i32 %a64, %resampled_input.y.min_realized
  %3812 = add nsw i32 %a76, 1
  %3813 = sub i32 %a69, %resampled_input.x.min_realized
  %3814 = icmp sgt i32 %t2448, -1
  %3815 = icmp sgt i32 %3, 1
  %3816 = icmp eq i32 %depth_multiplier, 0
  %t2553 = sext i1 %3816 to i32
  %3817 = sub nsw i32 %depth_multiplier, %t2553
  %3818 = add i32 %3817, 1
  %3819 = icmp ult i32 %3818, 3
  %3820 = select i1 %3819, i32 %3817, i32 0
  %3821 = xor i32 %t2553, -1
  %3822 = and i32 %3820, %3821
  %.not4731 = icmp eq i32 %3, 2
  %3823 = icmp sgt i32 %3, 3
  %.not4732 = icmp eq i32 %3, 4
  %3824 = icmp sgt i32 %3, 5
  %.not4733 = icmp eq i32 %3, 6
  %3825 = icmp sgt i32 %3, 7
  %.not4734 = icmp eq i32 %3, 8
  %3826 = icmp sgt i32 %3, 9
  %.not4735 = icmp eq i32 %3, 10
  %3827 = icmp sgt i32 %3, 11
  %.not4736 = icmp eq i32 %3, 12
  %3828 = icmp sgt i32 %3, 13
  %.not4737 = icmp eq i32 %3, 14
  %3829 = icmp sgt i32 %3, 15
  %.not4738 = icmp eq i32 %3, 16
  %3830 = icmp sgt i32 %3, 17
  %.not4739 = icmp eq i32 %3, 18
  %3831 = icmp sgt i32 %3, 19
  %.not4740 = icmp eq i32 %3, 20
  %3832 = icmp sgt i32 %3, 21
  %.not4741 = icmp eq i32 %3, 22
  %3833 = icmp sgt i32 %3, 23
  %.not4742 = icmp eq i32 %3, 24
  %3834 = icmp sgt i32 %3, 25
  %.not4743 = icmp eq i32 %3, 26
  %3835 = icmp sgt i32 %3, 27
  %.not4744 = icmp eq i32 %3, 28
  %3836 = icmp sgt i32 %3, 29
  %.not4745 = icmp eq i32 %3, 30
  %3837 = icmp sgt i32 %3, 31
  %.not4746 = icmp eq i32 %3, 32
  %3838 = icmp sgt i32 %3, 33
  %.not4747 = icmp eq i32 %3, 34
  %3839 = icmp sgt i32 %3, 35
  %.not4748 = icmp eq i32 %3, 36
  %3840 = icmp sgt i32 %3, 37
  %.not4749 = icmp eq i32 %3, 38
  %3841 = icmp sgt i32 %3, 39
  %.not4750 = icmp eq i32 %3, 40
  %3842 = icmp sgt i32 %3, 41
  %.not4751 = icmp eq i32 %3, 42
  %3843 = icmp sgt i32 %3, 43
  %.not4752 = icmp eq i32 %3, 44
  %3844 = icmp sgt i32 %3, 45
  %.not4753 = icmp eq i32 %3, 46
  %3845 = icmp sgt i32 %3, 47
  %.not4754 = icmp eq i32 %3, 48
  %3846 = icmp sgt i32 %3, 49
  %.not4755 = icmp eq i32 %3, 50
  %3847 = icmp sgt i32 %3, 51
  %.not4756 = icmp eq i32 %3, 52
  %3848 = icmp sgt i32 %3, 53
  %.not4757 = icmp eq i32 %3, 54
  %3849 = icmp sgt i32 %3, 55
  %.not4758 = icmp eq i32 %3, 56
  %3850 = icmp sgt i32 %3, 57
  %.not4759 = icmp eq i32 %3, 58
  %3851 = icmp sgt i32 %3, 59
  %.not4760 = icmp eq i32 %3, 60
  %3852 = icmp sgt i32 %3, 61
  %.not4761 = icmp eq i32 %3, 62
  %.not4700 = icmp eq i32 %3, 65
  %3853 = icmp sgt i32 %3, 66
  %.not4701 = icmp eq i32 %3, 67
  %3854 = icmp sgt i32 %3, 68
  %.not4702 = icmp eq i32 %3, 69
  %3855 = icmp sgt i32 %3, 70
  %.not4703 = icmp eq i32 %3, 71
  %3856 = icmp sgt i32 %3, 72
  %.not4704 = icmp eq i32 %3, 73
  %3857 = icmp sgt i32 %3, 74
  %.not4705 = icmp eq i32 %3, 75
  %3858 = icmp sgt i32 %3, 76
  %.not4706 = icmp eq i32 %3, 77
  %3859 = icmp sgt i32 %3, 78
  %.not4707 = icmp eq i32 %3, 79
  %3860 = icmp sgt i32 %3, 80
  %.not4708 = icmp eq i32 %3, 81
  %3861 = icmp sgt i32 %3, 82
  %.not4709 = icmp eq i32 %3, 83
  %3862 = icmp sgt i32 %3, 84
  %.not4710 = icmp eq i32 %3, 85
  %3863 = icmp sgt i32 %3, 86
  %.not4711 = icmp eq i32 %3, 87
  %3864 = icmp sgt i32 %3, 88
  %.not4712 = icmp eq i32 %3, 89
  %3865 = icmp sgt i32 %3, 90
  %.not4713 = icmp eq i32 %3, 91
  %3866 = icmp sgt i32 %3, 92
  %.not4714 = icmp eq i32 %3, 93
  %3867 = icmp sgt i32 %3, 94
  %.not4715 = icmp eq i32 %3, 95
  %3868 = icmp sgt i32 %3, 96
  %.not4716 = icmp eq i32 %3, 97
  %3869 = icmp sgt i32 %3, 98
  %.not4717 = icmp eq i32 %3, 99
  %3870 = icmp sgt i32 %3, 100
  %.not4718 = icmp eq i32 %3, 101
  %3871 = icmp sgt i32 %3, 102
  %.not4719 = icmp eq i32 %3, 103
  %3872 = icmp sgt i32 %3, 104
  %.not4720 = icmp eq i32 %3, 105
  %3873 = icmp sgt i32 %3, 106
  %.not4721 = icmp eq i32 %3, 107
  %3874 = icmp sgt i32 %3, 108
  %.not4722 = icmp eq i32 %3, 109
  %3875 = icmp sgt i32 %3, 110
  %.not4723 = icmp eq i32 %3, 111
  %3876 = icmp sgt i32 %3, 112
  %.not4724 = icmp eq i32 %3, 113
  %3877 = icmp sgt i32 %3, 114
  %.not4725 = icmp eq i32 %3, 115
  %3878 = icmp sgt i32 %3, 116
  %.not4726 = icmp eq i32 %3, 117
  %3879 = icmp sgt i32 %3, 118
  %.not4727 = icmp eq i32 %3, 119
  %3880 = icmp sgt i32 %3, 120
  %.not4728 = icmp eq i32 %3, 121
  %3881 = icmp sgt i32 %3, 122
  %.not4729 = icmp eq i32 %3, 123
  %3882 = icmp sgt i32 %3, 124
  %.not4730 = icmp eq i32 %3, 125
  %3883 = icmp sgt i32 %3, 126
  %3884 = icmp sgt i32 %23, 0
  %3885 = sub i32 %a68.op, %resampled_input.y.min_realized
  %3886 = sub i32 %a68, %resampled_input.y.min_realized
  %.neg = mul i32 %24, %22
  %.neg4762 = mul i32 %21, %19
  %.neg4763 = mul i32 %25, %14
  %3887 = icmp sgt i32 %20, 0
  %3888 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 768
  %3889 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 1024
  %3890 = bitcast i16* %3889 to <64 x i16>*
  %3891 = sub nsw i32 %a73.op, %resampled_input.x.min_realized
  %3892 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 896
  %3893 = bitcast i16* %3892 to <64 x i16>*
  %3894 = sub nsw i32 %a73, %resampled_input.x.min_realized
  %3895 = bitcast i16* %3888 to <64 x i16>*
  %3896 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 384
  %3897 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 640
  %3898 = bitcast i16* %3897 to <64 x i16>*
  %3899 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 512
  %3900 = bitcast i16* %3899 to <64 x i16>*
  %3901 = bitcast i16* %3896 to <64 x i16>*
  %3902 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 256
  %3903 = bitcast i16* %3902 to <64 x i16>*
  %3904 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 128
  %3905 = bitcast i16* %3904 to <64 x i16>*
  %3906 = bitcast i16* %filter_zeroed155 to <64 x i16>*
  %3907 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 1088
  %3908 = bitcast i16* %3907 to <64 x i16>*
  %3909 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 960
  %3910 = bitcast i16* %3909 to <64 x i16>*
  %3911 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 832
  %3912 = bitcast i16* %3911 to <64 x i16>*
  %3913 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 704
  %3914 = bitcast i16* %3913 to <64 x i16>*
  %3915 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 576
  %3916 = bitcast i16* %3915 to <64 x i16>*
  %3917 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 448
  %3918 = bitcast i16* %3917 to <64 x i16>*
  %3919 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 320
  %3920 = bitcast i16* %3919 to <64 x i16>*
  %3921 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 192
  %3922 = bitcast i16* %3921 to <64 x i16>*
  %3923 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 64
  %3924 = bitcast i16* %3923 to <64 x i16>*
  %.not705 = icmp eq i32 %output_shift, 0
  %3925 = select i1 %.not705, <32 x i32> zeroinitializer, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3926 = add i32 %output_shift, -1
  %3927 = zext i8 %output_zero to i16
  %3928 = insertelement <128 x i16> undef, i16 %3927, i32 0
  %3929 = shufflevector <128 x i16> %3928, <128 x i16> undef, <128 x i32> zeroinitializer
  %3930 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %3931 = shufflevector <128 x i8> %3930, <128 x i8> undef, <128 x i32> zeroinitializer
  %3932 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %3933 = shufflevector <128 x i8> %3932, <128 x i8> undef, <128 x i32> zeroinitializer
  %3934 = insertelement <1 x i32> poison, i32 %output_multiplier, i32 0
  %3935 = insertelement <1 x i32> poison, i32 %output_shift, i32 0
  %3936 = insertelement <1 x i32> poison, i32 %3926, i32 0
  %reass.add = add i32 %.neg, %.neg4762
  %reass.add4765 = add i32 %reass.add, %.neg4763
  br label %"for output.s0.b.rebased226"

"for output.s0.b.rebased226":                     ; preds = %"for output.s0.b.rebased226.preheader", %"end for output.s0.y.yo634"
  %output.s0.b.rebased228 = phi i32 [ %4871, %"end for output.s0.y.yo634" ], [ 0, %"for output.s0.b.rebased226.preheader" ]
  %3937 = load i32, i32* %.fca.1.gep663, align 4, !tbaa !98
  %cmp.i900 = icmp ult i32 %3937, %3808
  %3938 = load i8*, i8** %.fca.0.gep662, align 4, !tbaa !95
  br i1 %cmp.i900, label %if.then.i903, label %pseudostack_alloc.exit916, !prof !99

if.then.i903:                                     ; preds = %"for output.s0.b.rebased226"
  %tobool1.not.i902 = icmp ne i8* %3938, null
  %3939 = load i32, i32* %.fca.2.gep664, align 4
  %cmp2.i905 = icmp ugt i32 %3939, 16384
  %or.cond4699 = and i1 %tobool1.not.i902, %cmp2.i905
  br i1 %or.cond4699, label %if.then3.i907, label %if.end.i911

if.then3.i907:                                    ; preds = %if.then.i903
  call void @halide_free(i8* null, i8* nonnull %3938) #14
  %.pre = load i32, i32* %.fca.2.gep664, align 4, !tbaa !97
  br label %if.end.i911

if.end.i911:                                      ; preds = %if.then3.i907, %if.then.i903
  %3940 = phi i32 [ %.pre, %if.then3.i907 ], [ %3939, %if.then.i903 ]
  %add.i909 = add i32 %3940, %3808
  store i32 %add.i909, i32* %.fca.2.gep664, align 4, !tbaa !97
  %cmp7.i910 = icmp ugt i32 %add.i909, 16384
  br i1 %cmp7.i910, label %if.then8.i913, label %if.end11.i915

if.then8.i913:                                    ; preds = %if.end.i911
  %call.i912 = call i8* @halide_malloc(i8* null, i32 %3808) #14
  br label %if.end11.i915

if.end11.i915:                                    ; preds = %if.then8.i913, %if.end.i911
  %storemerge.i914 = phi i8* [ %call.i912, %if.then8.i913 ], [ null, %if.end.i911 ]
  store i8* %storemerge.i914, i8** %.fca.0.gep662, align 4, !tbaa !95
  store i32 %3808, i32* %.fca.1.gep663, align 4, !tbaa !98
  br label %pseudostack_alloc.exit916

pseudostack_alloc.exit916:                        ; preds = %"for output.s0.b.rebased226", %if.end11.i915
  %3941 = phi i8* [ %storemerge.i914, %if.end11.i915 ], [ %3938, %"for output.s0.b.rebased226" ]
  %.not702 = icmp eq i8* %3941, null
  br i1 %.not702, label %then_bb230, label %"produce resampled_input232", !prof !100

then_bb230:                                       ; preds = %pseudostack_alloc.exit916
  %3942 = alloca i8*, i32 %3808, align 128
  %3943 = bitcast i8** %3942 to i8*
  store i8** %3942, i8*** %3809, align 4
  br label %"produce resampled_input232"

"produce resampled_input232":                     ; preds = %pseudostack_alloc.exit916, %then_bb230
  %resampled_input231 = phi i8* [ %3943, %then_bb230 ], [ %3941, %pseudostack_alloc.exit916 ]
  br i1 %t2420, label %then_bb234, label %next_bb235

then_bb234:                                       ; preds = %"produce resampled_input232"
  br i1 %3810, label %"for resampled_input.s0.y.rebased236.preheader", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased236.preheader":  ; preds = %then_bb234
  %3944 = add nsw i32 %output.s0.b.rebased228, %14
  %3945 = mul nsw i32 %3944, %16
  %3946 = sub i32 %3945, %t2421
  br i1 %3814, label %"for resampled_input.s0.y.rebased236.us", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased236.us":         ; preds = %"for resampled_input.s0.y.rebased236.preheader", %"end for resampled_input.s0.x.rebased240.loopexit.us"
  %resampled_input.s0.y.rebased238.us = phi i32 [ %3962, %"end for resampled_input.s0.x.rebased240.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased236.preheader" ]
  %3947 = add nsw i32 %3811, %resampled_input.s0.y.rebased238.us
  %3948 = mul nsw i32 %3947, %3812
  %t2446.us = add nsw i32 %3813, %3948
  %3949 = add nsw i32 %resampled_input.s0.y.rebased238.us, %a64
  %3950 = mul nsw i32 %3949, %13
  %t2445.us = add nsw i32 %3946, %3950
  br label %"for resampled_input.s0.x.rebased239.us"

"for resampled_input.s0.x.rebased239.us":         ; preds = %"for resampled_input.s0.y.rebased236.us", %"for resampled_input.s0.x.rebased239.us"
  %resampled_input.s0.x.rebased241.us = phi i32 [ %3961, %"for resampled_input.s0.x.rebased239.us" ], [ 0, %"for resampled_input.s0.y.rebased236.us" ]
  %3951 = add nsw i32 %resampled_input.s0.x.rebased241.us, %a69
  %3952 = mul nsw i32 %3951, %11
  %3953 = add nsw i32 %t2445.us, %3952
  %3954 = getelementptr inbounds i8, i8* %8, i32 %3953
  %3955 = bitcast i8* %3954 to <128 x i8>*
  %3956 = load <128 x i8>, <128 x i8>* %3955, align 1, !tbaa !125
  %3957 = add nsw i32 %t2446.us, %resampled_input.s0.x.rebased241.us
  %3958 = shl nsw i32 %3957, 7
  %3959 = getelementptr inbounds i8, i8* %resampled_input231, i32 %3958
  %3960 = bitcast i8* %3959 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %3956, <128 x i8>* %3960, i32 128, <128 x i1> %3614), !tbaa !127
  %3961 = add nuw nsw i32 %resampled_input.s0.x.rebased241.us, 1
  %.not712.us = icmp eq i32 %resampled_input.s0.x.rebased241.us, %t2448
  br i1 %.not712.us, label %"end for resampled_input.s0.x.rebased240.loopexit.us", label %"for resampled_input.s0.x.rebased239.us"

"end for resampled_input.s0.x.rebased240.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased239.us"
  %3962 = add nuw nsw i32 %resampled_input.s0.y.rebased238.us, 1
  %.not711.us = icmp eq i32 %resampled_input.s0.y.rebased238.us, %t2447
  br i1 %.not711.us, label %"consume resampled_input632", label %"for resampled_input.s0.y.rebased236.us"

next_bb235:                                       ; preds = %"produce resampled_input232"
  br i1 %3810, label %"for resampled_input.s0.y.rebased242.preheader", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased242.preheader":  ; preds = %next_bb235
  %3963 = add nsw i32 %output.s0.b.rebased228, %14
  %3964 = mul nsw i32 %3963, %16
  %3965 = sub i32 %3964, %t2421
  br i1 %3814, label %"for resampled_input.s0.y.rebased242.us", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased242.us":         ; preds = %"for resampled_input.s0.y.rebased242.preheader", %"end for resampled_input.s0.x.rebased246.loopexit.us"
  %resampled_input.s0.y.rebased244.us = phi i32 [ %4861, %"end for resampled_input.s0.x.rebased246.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased242.preheader" ]
  %3966 = add nsw i32 %3811, %resampled_input.s0.y.rebased244.us
  %3967 = mul nsw i32 %3966, %3812
  %t2453.us = add nsw i32 %3813, %3967
  %3968 = add nsw i32 %resampled_input.s0.y.rebased244.us, %a64
  %3969 = mul nsw i32 %3968, %13
  %t2452.us = add nsw i32 %3965, %3969
  br label %"for resampled_input.s0.x.rebased245.us"

"for resampled_input.s0.x.rebased245.us":         ; preds = %"for resampled_input.s0.y.rebased242.us", %after_bb631.us
  %resampled_input.s0.x.rebased247.us = phi i32 [ %4860, %after_bb631.us ], [ 0, %"for resampled_input.s0.y.rebased242.us" ]
  %3970 = add nsw i32 %resampled_input.s0.x.rebased247.us, %a69
  %3971 = mul nsw i32 %3970, %11
  %3972 = add nsw i32 %t2452.us, %3971
  %3973 = getelementptr inbounds i8, i8* %8, i32 %3972
  %3974 = load i8, i8* %3973, align 1, !tbaa !125
  br i1 %3815, label %after_bb253.us, label %after_bb436.us

after_bb253.us:                                   ; preds = %"for resampled_input.s0.x.rebased245.us"
  %3975 = add nsw i32 %3972, %3822
  %3976 = getelementptr inbounds i8, i8* %8, i32 %3975
  %3977 = load i8, i8* %3976, align 1, !tbaa !125
  br i1 %.not4731, label %after_bb436.us, label %after_bb256.us

after_bb256.us:                                   ; preds = %after_bb253.us
  %3978 = sdiv i32 2, %3817
  %3979 = and i32 %3978, %3821
  %3980 = add nsw i32 %3979, %3972
  %3981 = getelementptr inbounds i8, i8* %8, i32 %3980
  %3982 = load i8, i8* %3981, align 1, !tbaa !125
  br i1 %3823, label %after_bb259.us, label %after_bb436.us

after_bb259.us:                                   ; preds = %after_bb256.us
  %3983 = sdiv i32 3, %3817
  %3984 = and i32 %3983, %3821
  %3985 = add nsw i32 %3984, %3972
  %3986 = getelementptr inbounds i8, i8* %8, i32 %3985
  %3987 = load i8, i8* %3986, align 1, !tbaa !125
  br i1 %.not4732, label %after_bb436.us, label %after_bb262.us

after_bb262.us:                                   ; preds = %after_bb259.us
  %3988 = sdiv i32 4, %3817
  %3989 = and i32 %3988, %3821
  %3990 = add nsw i32 %3989, %3972
  %3991 = getelementptr inbounds i8, i8* %8, i32 %3990
  %3992 = load i8, i8* %3991, align 1, !tbaa !125
  br i1 %3824, label %after_bb265.us, label %after_bb436.us

after_bb265.us:                                   ; preds = %after_bb262.us
  %3993 = sdiv i32 5, %3817
  %3994 = and i32 %3993, %3821
  %3995 = add nsw i32 %3994, %3972
  %3996 = getelementptr inbounds i8, i8* %8, i32 %3995
  %3997 = load i8, i8* %3996, align 1, !tbaa !125
  br i1 %.not4733, label %after_bb436.us, label %after_bb268.us

after_bb268.us:                                   ; preds = %after_bb265.us
  %3998 = sdiv i32 6, %3817
  %3999 = and i32 %3998, %3821
  %4000 = add nsw i32 %3999, %3972
  %4001 = getelementptr inbounds i8, i8* %8, i32 %4000
  %4002 = load i8, i8* %4001, align 1, !tbaa !125
  br i1 %3825, label %after_bb271.us, label %after_bb436.us

after_bb271.us:                                   ; preds = %after_bb268.us
  %4003 = sdiv i32 7, %3817
  %4004 = and i32 %4003, %3821
  %4005 = add nsw i32 %4004, %3972
  %4006 = getelementptr inbounds i8, i8* %8, i32 %4005
  %4007 = load i8, i8* %4006, align 1, !tbaa !125
  br i1 %.not4734, label %after_bb436.us, label %after_bb274.us

after_bb274.us:                                   ; preds = %after_bb271.us
  %4008 = sdiv i32 8, %3817
  %4009 = and i32 %4008, %3821
  %4010 = add nsw i32 %4009, %3972
  %4011 = getelementptr inbounds i8, i8* %8, i32 %4010
  %4012 = load i8, i8* %4011, align 1, !tbaa !125
  br i1 %3826, label %after_bb277.us, label %after_bb436.us

after_bb277.us:                                   ; preds = %after_bb274.us
  %4013 = sdiv i32 9, %3817
  %4014 = and i32 %4013, %3821
  %4015 = add nsw i32 %4014, %3972
  %4016 = getelementptr inbounds i8, i8* %8, i32 %4015
  %4017 = load i8, i8* %4016, align 1, !tbaa !125
  br i1 %.not4735, label %after_bb436.us, label %after_bb280.us

after_bb280.us:                                   ; preds = %after_bb277.us
  %4018 = sdiv i32 10, %3817
  %4019 = and i32 %4018, %3821
  %4020 = add nsw i32 %4019, %3972
  %4021 = getelementptr inbounds i8, i8* %8, i32 %4020
  %4022 = load i8, i8* %4021, align 1, !tbaa !125
  br i1 %3827, label %after_bb283.us, label %after_bb436.us

after_bb283.us:                                   ; preds = %after_bb280.us
  %4023 = sdiv i32 11, %3817
  %4024 = and i32 %4023, %3821
  %4025 = add nsw i32 %4024, %3972
  %4026 = getelementptr inbounds i8, i8* %8, i32 %4025
  %4027 = load i8, i8* %4026, align 1, !tbaa !125
  br i1 %.not4736, label %after_bb436.us, label %after_bb286.us

after_bb286.us:                                   ; preds = %after_bb283.us
  %4028 = sdiv i32 12, %3817
  %4029 = and i32 %4028, %3821
  %4030 = add nsw i32 %4029, %3972
  %4031 = getelementptr inbounds i8, i8* %8, i32 %4030
  %4032 = load i8, i8* %4031, align 1, !tbaa !125
  br i1 %3828, label %after_bb289.us, label %after_bb436.us

after_bb289.us:                                   ; preds = %after_bb286.us
  %4033 = sdiv i32 13, %3817
  %4034 = and i32 %4033, %3821
  %4035 = add nsw i32 %4034, %3972
  %4036 = getelementptr inbounds i8, i8* %8, i32 %4035
  %4037 = load i8, i8* %4036, align 1, !tbaa !125
  br i1 %.not4737, label %after_bb436.us, label %after_bb292.us

after_bb292.us:                                   ; preds = %after_bb289.us
  %4038 = sdiv i32 14, %3817
  %4039 = and i32 %4038, %3821
  %4040 = add nsw i32 %4039, %3972
  %4041 = getelementptr inbounds i8, i8* %8, i32 %4040
  %4042 = load i8, i8* %4041, align 1, !tbaa !125
  br i1 %3829, label %after_bb295.us, label %after_bb436.us

after_bb295.us:                                   ; preds = %after_bb292.us
  %4043 = sdiv i32 15, %3817
  %4044 = and i32 %4043, %3821
  %4045 = add nsw i32 %4044, %3972
  %4046 = getelementptr inbounds i8, i8* %8, i32 %4045
  %4047 = load i8, i8* %4046, align 1, !tbaa !125
  br i1 %.not4738, label %after_bb436.us, label %after_bb298.us

after_bb298.us:                                   ; preds = %after_bb295.us
  %4048 = sdiv i32 16, %3817
  %4049 = and i32 %4048, %3821
  %4050 = add nsw i32 %4049, %3972
  %4051 = getelementptr inbounds i8, i8* %8, i32 %4050
  %4052 = load i8, i8* %4051, align 1, !tbaa !125
  br i1 %3830, label %after_bb301.us, label %after_bb436.us

after_bb301.us:                                   ; preds = %after_bb298.us
  %4053 = sdiv i32 17, %3817
  %4054 = and i32 %4053, %3821
  %4055 = add nsw i32 %4054, %3972
  %4056 = getelementptr inbounds i8, i8* %8, i32 %4055
  %4057 = load i8, i8* %4056, align 1, !tbaa !125
  br i1 %.not4739, label %after_bb436.us, label %after_bb304.us

after_bb304.us:                                   ; preds = %after_bb301.us
  %4058 = sdiv i32 18, %3817
  %4059 = and i32 %4058, %3821
  %4060 = add nsw i32 %4059, %3972
  %4061 = getelementptr inbounds i8, i8* %8, i32 %4060
  %4062 = load i8, i8* %4061, align 1, !tbaa !125
  br i1 %3831, label %after_bb307.us, label %after_bb436.us

after_bb307.us:                                   ; preds = %after_bb304.us
  %4063 = sdiv i32 19, %3817
  %4064 = and i32 %4063, %3821
  %4065 = add nsw i32 %4064, %3972
  %4066 = getelementptr inbounds i8, i8* %8, i32 %4065
  %4067 = load i8, i8* %4066, align 1, !tbaa !125
  br i1 %.not4740, label %after_bb436.us, label %after_bb310.us

after_bb310.us:                                   ; preds = %after_bb307.us
  %4068 = sdiv i32 20, %3817
  %4069 = and i32 %4068, %3821
  %4070 = add nsw i32 %4069, %3972
  %4071 = getelementptr inbounds i8, i8* %8, i32 %4070
  %4072 = load i8, i8* %4071, align 1, !tbaa !125
  br i1 %3832, label %after_bb313.us, label %after_bb436.us

after_bb313.us:                                   ; preds = %after_bb310.us
  %4073 = sdiv i32 21, %3817
  %4074 = and i32 %4073, %3821
  %4075 = add nsw i32 %4074, %3972
  %4076 = getelementptr inbounds i8, i8* %8, i32 %4075
  %4077 = load i8, i8* %4076, align 1, !tbaa !125
  br i1 %.not4741, label %after_bb436.us, label %after_bb316.us

after_bb316.us:                                   ; preds = %after_bb313.us
  %4078 = sdiv i32 22, %3817
  %4079 = and i32 %4078, %3821
  %4080 = add nsw i32 %4079, %3972
  %4081 = getelementptr inbounds i8, i8* %8, i32 %4080
  %4082 = load i8, i8* %4081, align 1, !tbaa !125
  br i1 %3833, label %after_bb319.us, label %after_bb436.us

after_bb319.us:                                   ; preds = %after_bb316.us
  %4083 = sdiv i32 23, %3817
  %4084 = and i32 %4083, %3821
  %4085 = add nsw i32 %4084, %3972
  %4086 = getelementptr inbounds i8, i8* %8, i32 %4085
  %4087 = load i8, i8* %4086, align 1, !tbaa !125
  br i1 %.not4742, label %after_bb436.us, label %after_bb322.us

after_bb322.us:                                   ; preds = %after_bb319.us
  %4088 = sdiv i32 24, %3817
  %4089 = and i32 %4088, %3821
  %4090 = add nsw i32 %4089, %3972
  %4091 = getelementptr inbounds i8, i8* %8, i32 %4090
  %4092 = load i8, i8* %4091, align 1, !tbaa !125
  br i1 %3834, label %after_bb325.us, label %after_bb436.us

after_bb325.us:                                   ; preds = %after_bb322.us
  %4093 = sdiv i32 25, %3817
  %4094 = and i32 %4093, %3821
  %4095 = add nsw i32 %4094, %3972
  %4096 = getelementptr inbounds i8, i8* %8, i32 %4095
  %4097 = load i8, i8* %4096, align 1, !tbaa !125
  br i1 %.not4743, label %after_bb436.us, label %after_bb328.us

after_bb328.us:                                   ; preds = %after_bb325.us
  %4098 = sdiv i32 26, %3817
  %4099 = and i32 %4098, %3821
  %4100 = add nsw i32 %4099, %3972
  %4101 = getelementptr inbounds i8, i8* %8, i32 %4100
  %4102 = load i8, i8* %4101, align 1, !tbaa !125
  br i1 %3835, label %after_bb331.us, label %after_bb436.us

after_bb331.us:                                   ; preds = %after_bb328.us
  %4103 = sdiv i32 27, %3817
  %4104 = and i32 %4103, %3821
  %4105 = add nsw i32 %4104, %3972
  %4106 = getelementptr inbounds i8, i8* %8, i32 %4105
  %4107 = load i8, i8* %4106, align 1, !tbaa !125
  br i1 %.not4744, label %after_bb436.us, label %after_bb334.us

after_bb334.us:                                   ; preds = %after_bb331.us
  %4108 = sdiv i32 28, %3817
  %4109 = and i32 %4108, %3821
  %4110 = add nsw i32 %4109, %3972
  %4111 = getelementptr inbounds i8, i8* %8, i32 %4110
  %4112 = load i8, i8* %4111, align 1, !tbaa !125
  br i1 %3836, label %after_bb337.us, label %after_bb436.us

after_bb337.us:                                   ; preds = %after_bb334.us
  %4113 = sdiv i32 29, %3817
  %4114 = and i32 %4113, %3821
  %4115 = add nsw i32 %4114, %3972
  %4116 = getelementptr inbounds i8, i8* %8, i32 %4115
  %4117 = load i8, i8* %4116, align 1, !tbaa !125
  br i1 %.not4745, label %after_bb436.us, label %after_bb340.us

after_bb340.us:                                   ; preds = %after_bb337.us
  %4118 = sdiv i32 30, %3817
  %4119 = and i32 %4118, %3821
  %4120 = add nsw i32 %4119, %3972
  %4121 = getelementptr inbounds i8, i8* %8, i32 %4120
  %4122 = load i8, i8* %4121, align 1, !tbaa !125
  br i1 %3837, label %after_bb343.us, label %after_bb436.us

after_bb343.us:                                   ; preds = %after_bb340.us
  %4123 = sdiv i32 31, %3817
  %4124 = and i32 %4123, %3821
  %4125 = add nsw i32 %4124, %3972
  %4126 = getelementptr inbounds i8, i8* %8, i32 %4125
  %4127 = load i8, i8* %4126, align 1, !tbaa !125
  br i1 %.not4746, label %after_bb436.us, label %after_bb346.us

after_bb346.us:                                   ; preds = %after_bb343.us
  %4128 = sdiv i32 32, %3817
  %4129 = and i32 %4128, %3821
  %4130 = add nsw i32 %4129, %3972
  %4131 = getelementptr inbounds i8, i8* %8, i32 %4130
  %4132 = load i8, i8* %4131, align 1, !tbaa !125
  br i1 %3838, label %after_bb349.us, label %after_bb436.us

after_bb349.us:                                   ; preds = %after_bb346.us
  %4133 = sdiv i32 33, %3817
  %4134 = and i32 %4133, %3821
  %4135 = add nsw i32 %4134, %3972
  %4136 = getelementptr inbounds i8, i8* %8, i32 %4135
  %4137 = load i8, i8* %4136, align 1, !tbaa !125
  br i1 %.not4747, label %after_bb436.us, label %after_bb352.us

after_bb352.us:                                   ; preds = %after_bb349.us
  %4138 = sdiv i32 34, %3817
  %4139 = and i32 %4138, %3821
  %4140 = add nsw i32 %4139, %3972
  %4141 = getelementptr inbounds i8, i8* %8, i32 %4140
  %4142 = load i8, i8* %4141, align 1, !tbaa !125
  br i1 %3839, label %after_bb355.us, label %after_bb436.us

after_bb355.us:                                   ; preds = %after_bb352.us
  %4143 = sdiv i32 35, %3817
  %4144 = and i32 %4143, %3821
  %4145 = add nsw i32 %4144, %3972
  %4146 = getelementptr inbounds i8, i8* %8, i32 %4145
  %4147 = load i8, i8* %4146, align 1, !tbaa !125
  br i1 %.not4748, label %after_bb436.us, label %after_bb358.us

after_bb358.us:                                   ; preds = %after_bb355.us
  %4148 = sdiv i32 36, %3817
  %4149 = and i32 %4148, %3821
  %4150 = add nsw i32 %4149, %3972
  %4151 = getelementptr inbounds i8, i8* %8, i32 %4150
  %4152 = load i8, i8* %4151, align 1, !tbaa !125
  br i1 %3840, label %after_bb361.us, label %after_bb436.us

after_bb361.us:                                   ; preds = %after_bb358.us
  %4153 = sdiv i32 37, %3817
  %4154 = and i32 %4153, %3821
  %4155 = add nsw i32 %4154, %3972
  %4156 = getelementptr inbounds i8, i8* %8, i32 %4155
  %4157 = load i8, i8* %4156, align 1, !tbaa !125
  br i1 %.not4749, label %after_bb436.us, label %after_bb364.us

after_bb364.us:                                   ; preds = %after_bb361.us
  %4158 = sdiv i32 38, %3817
  %4159 = and i32 %4158, %3821
  %4160 = add nsw i32 %4159, %3972
  %4161 = getelementptr inbounds i8, i8* %8, i32 %4160
  %4162 = load i8, i8* %4161, align 1, !tbaa !125
  br i1 %3841, label %after_bb367.us, label %after_bb436.us

after_bb367.us:                                   ; preds = %after_bb364.us
  %4163 = sdiv i32 39, %3817
  %4164 = and i32 %4163, %3821
  %4165 = add nsw i32 %4164, %3972
  %4166 = getelementptr inbounds i8, i8* %8, i32 %4165
  %4167 = load i8, i8* %4166, align 1, !tbaa !125
  br i1 %.not4750, label %after_bb436.us, label %after_bb370.us

after_bb370.us:                                   ; preds = %after_bb367.us
  %4168 = sdiv i32 40, %3817
  %4169 = and i32 %4168, %3821
  %4170 = add nsw i32 %4169, %3972
  %4171 = getelementptr inbounds i8, i8* %8, i32 %4170
  %4172 = load i8, i8* %4171, align 1, !tbaa !125
  br i1 %3842, label %after_bb373.us, label %after_bb436.us

after_bb373.us:                                   ; preds = %after_bb370.us
  %4173 = sdiv i32 41, %3817
  %4174 = and i32 %4173, %3821
  %4175 = add nsw i32 %4174, %3972
  %4176 = getelementptr inbounds i8, i8* %8, i32 %4175
  %4177 = load i8, i8* %4176, align 1, !tbaa !125
  br i1 %.not4751, label %after_bb436.us, label %after_bb376.us

after_bb376.us:                                   ; preds = %after_bb373.us
  %4178 = sdiv i32 42, %3817
  %4179 = and i32 %4178, %3821
  %4180 = add nsw i32 %4179, %3972
  %4181 = getelementptr inbounds i8, i8* %8, i32 %4180
  %4182 = load i8, i8* %4181, align 1, !tbaa !125
  br i1 %3843, label %after_bb379.us, label %after_bb436.us

after_bb379.us:                                   ; preds = %after_bb376.us
  %4183 = sdiv i32 43, %3817
  %4184 = and i32 %4183, %3821
  %4185 = add nsw i32 %4184, %3972
  %4186 = getelementptr inbounds i8, i8* %8, i32 %4185
  %4187 = load i8, i8* %4186, align 1, !tbaa !125
  br i1 %.not4752, label %after_bb436.us, label %after_bb382.us

after_bb382.us:                                   ; preds = %after_bb379.us
  %4188 = sdiv i32 44, %3817
  %4189 = and i32 %4188, %3821
  %4190 = add nsw i32 %4189, %3972
  %4191 = getelementptr inbounds i8, i8* %8, i32 %4190
  %4192 = load i8, i8* %4191, align 1, !tbaa !125
  br i1 %3844, label %after_bb385.us, label %after_bb436.us

after_bb385.us:                                   ; preds = %after_bb382.us
  %4193 = sdiv i32 45, %3817
  %4194 = and i32 %4193, %3821
  %4195 = add nsw i32 %4194, %3972
  %4196 = getelementptr inbounds i8, i8* %8, i32 %4195
  %4197 = load i8, i8* %4196, align 1, !tbaa !125
  br i1 %.not4753, label %after_bb436.us, label %after_bb388.us

after_bb388.us:                                   ; preds = %after_bb385.us
  %4198 = sdiv i32 46, %3817
  %4199 = and i32 %4198, %3821
  %4200 = add nsw i32 %4199, %3972
  %4201 = getelementptr inbounds i8, i8* %8, i32 %4200
  %4202 = load i8, i8* %4201, align 1, !tbaa !125
  br i1 %3845, label %after_bb391.us, label %after_bb436.us

after_bb391.us:                                   ; preds = %after_bb388.us
  %4203 = sdiv i32 47, %3817
  %4204 = and i32 %4203, %3821
  %4205 = add nsw i32 %4204, %3972
  %4206 = getelementptr inbounds i8, i8* %8, i32 %4205
  %4207 = load i8, i8* %4206, align 1, !tbaa !125
  br i1 %.not4754, label %after_bb436.us, label %after_bb394.us

after_bb394.us:                                   ; preds = %after_bb391.us
  %4208 = sdiv i32 48, %3817
  %4209 = and i32 %4208, %3821
  %4210 = add nsw i32 %4209, %3972
  %4211 = getelementptr inbounds i8, i8* %8, i32 %4210
  %4212 = load i8, i8* %4211, align 1, !tbaa !125
  br i1 %3846, label %after_bb397.us, label %after_bb436.us

after_bb397.us:                                   ; preds = %after_bb394.us
  %4213 = sdiv i32 49, %3817
  %4214 = and i32 %4213, %3821
  %4215 = add nsw i32 %4214, %3972
  %4216 = getelementptr inbounds i8, i8* %8, i32 %4215
  %4217 = load i8, i8* %4216, align 1, !tbaa !125
  br i1 %.not4755, label %after_bb436.us, label %after_bb400.us

after_bb400.us:                                   ; preds = %after_bb397.us
  %4218 = sdiv i32 50, %3817
  %4219 = and i32 %4218, %3821
  %4220 = add nsw i32 %4219, %3972
  %4221 = getelementptr inbounds i8, i8* %8, i32 %4220
  %4222 = load i8, i8* %4221, align 1, !tbaa !125
  br i1 %3847, label %after_bb403.us, label %after_bb436.us

after_bb403.us:                                   ; preds = %after_bb400.us
  %4223 = sdiv i32 51, %3817
  %4224 = and i32 %4223, %3821
  %4225 = add nsw i32 %4224, %3972
  %4226 = getelementptr inbounds i8, i8* %8, i32 %4225
  %4227 = load i8, i8* %4226, align 1, !tbaa !125
  br i1 %.not4756, label %after_bb436.us, label %after_bb406.us

after_bb406.us:                                   ; preds = %after_bb403.us
  %4228 = sdiv i32 52, %3817
  %4229 = and i32 %4228, %3821
  %4230 = add nsw i32 %4229, %3972
  %4231 = getelementptr inbounds i8, i8* %8, i32 %4230
  %4232 = load i8, i8* %4231, align 1, !tbaa !125
  br i1 %3848, label %after_bb409.us, label %after_bb436.us

after_bb409.us:                                   ; preds = %after_bb406.us
  %4233 = sdiv i32 53, %3817
  %4234 = and i32 %4233, %3821
  %4235 = add nsw i32 %4234, %3972
  %4236 = getelementptr inbounds i8, i8* %8, i32 %4235
  %4237 = load i8, i8* %4236, align 1, !tbaa !125
  br i1 %.not4757, label %after_bb436.us, label %after_bb412.us

after_bb412.us:                                   ; preds = %after_bb409.us
  %4238 = sdiv i32 54, %3817
  %4239 = and i32 %4238, %3821
  %4240 = add nsw i32 %4239, %3972
  %4241 = getelementptr inbounds i8, i8* %8, i32 %4240
  %4242 = load i8, i8* %4241, align 1, !tbaa !125
  br i1 %3849, label %after_bb415.us, label %after_bb436.us

after_bb415.us:                                   ; preds = %after_bb412.us
  %4243 = sdiv i32 55, %3817
  %4244 = and i32 %4243, %3821
  %4245 = add nsw i32 %4244, %3972
  %4246 = getelementptr inbounds i8, i8* %8, i32 %4245
  %4247 = load i8, i8* %4246, align 1, !tbaa !125
  br i1 %.not4758, label %after_bb436.us, label %after_bb418.us

after_bb418.us:                                   ; preds = %after_bb415.us
  %4248 = sdiv i32 56, %3817
  %4249 = and i32 %4248, %3821
  %4250 = add nsw i32 %4249, %3972
  %4251 = getelementptr inbounds i8, i8* %8, i32 %4250
  %4252 = load i8, i8* %4251, align 1, !tbaa !125
  br i1 %3850, label %after_bb421.us, label %after_bb436.us

after_bb421.us:                                   ; preds = %after_bb418.us
  %4253 = sdiv i32 57, %3817
  %4254 = and i32 %4253, %3821
  %4255 = add nsw i32 %4254, %3972
  %4256 = getelementptr inbounds i8, i8* %8, i32 %4255
  %4257 = load i8, i8* %4256, align 1, !tbaa !125
  br i1 %.not4759, label %after_bb436.us, label %after_bb424.us

after_bb424.us:                                   ; preds = %after_bb421.us
  %4258 = sdiv i32 58, %3817
  %4259 = and i32 %4258, %3821
  %4260 = add nsw i32 %4259, %3972
  %4261 = getelementptr inbounds i8, i8* %8, i32 %4260
  %4262 = load i8, i8* %4261, align 1, !tbaa !125
  br i1 %3851, label %after_bb427.us, label %after_bb436.us

after_bb427.us:                                   ; preds = %after_bb424.us
  %4263 = sdiv i32 59, %3817
  %4264 = and i32 %4263, %3821
  %4265 = add nsw i32 %4264, %3972
  %4266 = getelementptr inbounds i8, i8* %8, i32 %4265
  %4267 = load i8, i8* %4266, align 1, !tbaa !125
  br i1 %.not4760, label %after_bb436.us, label %after_bb430.us

after_bb430.us:                                   ; preds = %after_bb427.us
  %4268 = sdiv i32 60, %3817
  %4269 = and i32 %4268, %3821
  %4270 = add nsw i32 %4269, %3972
  %4271 = getelementptr inbounds i8, i8* %8, i32 %4270
  %4272 = load i8, i8* %4271, align 1, !tbaa !125
  br i1 %3852, label %after_bb433.us, label %after_bb436.us

after_bb433.us:                                   ; preds = %after_bb430.us
  %4273 = sdiv i32 61, %3817
  %4274 = and i32 %4273, %3821
  %4275 = add nsw i32 %4274, %3972
  %4276 = getelementptr inbounds i8, i8* %8, i32 %4275
  %4277 = load i8, i8* %4276, align 1, !tbaa !125
  br i1 %.not4761, label %after_bb436.us, label %true_bb434.us

true_bb434.us:                                    ; preds = %after_bb433.us
  %4278 = sdiv i32 62, %3817
  %4279 = and i32 %4278, %3821
  %4280 = add nsw i32 %4279, %3972
  %4281 = getelementptr inbounds i8, i8* %8, i32 %4280
  %4282 = load i8, i8* %4281, align 1, !tbaa !125
  br label %after_bb436.us

after_bb436.us:                                   ; preds = %true_bb434.us, %after_bb433.us, %after_bb430.us, %after_bb427.us, %after_bb424.us, %after_bb421.us, %after_bb418.us, %after_bb415.us, %after_bb412.us, %after_bb409.us, %after_bb406.us, %after_bb403.us, %after_bb400.us, %after_bb397.us, %after_bb394.us, %after_bb391.us, %after_bb388.us, %after_bb385.us, %after_bb382.us, %after_bb379.us, %after_bb376.us, %after_bb373.us, %after_bb370.us, %after_bb367.us, %after_bb364.us, %after_bb361.us, %after_bb358.us, %after_bb355.us, %after_bb352.us, %after_bb349.us, %after_bb346.us, %after_bb343.us, %after_bb340.us, %after_bb337.us, %after_bb334.us, %after_bb331.us, %after_bb328.us, %after_bb325.us, %after_bb322.us, %after_bb319.us, %after_bb316.us, %after_bb313.us, %after_bb310.us, %after_bb307.us, %after_bb304.us, %after_bb301.us, %after_bb298.us, %after_bb295.us, %after_bb292.us, %after_bb289.us, %after_bb286.us, %after_bb283.us, %after_bb280.us, %after_bb277.us, %after_bb274.us, %after_bb271.us, %after_bb268.us, %after_bb265.us, %after_bb262.us, %after_bb259.us, %after_bb256.us, %after_bb253.us, %"for resampled_input.s0.x.rebased245.us"
  %4283 = phi i8 [ %4277, %true_bb434.us ], [ %4277, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4284 = phi i8 [ %4267, %true_bb434.us ], [ %4267, %after_bb433.us ], [ %4267, %after_bb430.us ], [ %4267, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4285 = phi i8 [ %4257, %true_bb434.us ], [ %4257, %after_bb433.us ], [ %4257, %after_bb430.us ], [ %4257, %after_bb427.us ], [ %4257, %after_bb424.us ], [ %4257, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4286 = phi i8 [ %4247, %true_bb434.us ], [ %4247, %after_bb433.us ], [ %4247, %after_bb430.us ], [ %4247, %after_bb427.us ], [ %4247, %after_bb424.us ], [ %4247, %after_bb421.us ], [ %4247, %after_bb418.us ], [ %4247, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4287 = phi i8 [ %4237, %true_bb434.us ], [ %4237, %after_bb433.us ], [ %4237, %after_bb430.us ], [ %4237, %after_bb427.us ], [ %4237, %after_bb424.us ], [ %4237, %after_bb421.us ], [ %4237, %after_bb418.us ], [ %4237, %after_bb415.us ], [ %4237, %after_bb412.us ], [ %4237, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4288 = phi i8 [ %4227, %true_bb434.us ], [ %4227, %after_bb433.us ], [ %4227, %after_bb430.us ], [ %4227, %after_bb427.us ], [ %4227, %after_bb424.us ], [ %4227, %after_bb421.us ], [ %4227, %after_bb418.us ], [ %4227, %after_bb415.us ], [ %4227, %after_bb412.us ], [ %4227, %after_bb409.us ], [ %4227, %after_bb406.us ], [ %4227, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4289 = phi i8 [ %4217, %true_bb434.us ], [ %4217, %after_bb433.us ], [ %4217, %after_bb430.us ], [ %4217, %after_bb427.us ], [ %4217, %after_bb424.us ], [ %4217, %after_bb421.us ], [ %4217, %after_bb418.us ], [ %4217, %after_bb415.us ], [ %4217, %after_bb412.us ], [ %4217, %after_bb409.us ], [ %4217, %after_bb406.us ], [ %4217, %after_bb403.us ], [ %4217, %after_bb400.us ], [ %4217, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4290 = phi i8 [ %4207, %true_bb434.us ], [ %4207, %after_bb433.us ], [ %4207, %after_bb430.us ], [ %4207, %after_bb427.us ], [ %4207, %after_bb424.us ], [ %4207, %after_bb421.us ], [ %4207, %after_bb418.us ], [ %4207, %after_bb415.us ], [ %4207, %after_bb412.us ], [ %4207, %after_bb409.us ], [ %4207, %after_bb406.us ], [ %4207, %after_bb403.us ], [ %4207, %after_bb400.us ], [ %4207, %after_bb397.us ], [ %4207, %after_bb394.us ], [ %4207, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4291 = phi i8 [ %4197, %true_bb434.us ], [ %4197, %after_bb433.us ], [ %4197, %after_bb430.us ], [ %4197, %after_bb427.us ], [ %4197, %after_bb424.us ], [ %4197, %after_bb421.us ], [ %4197, %after_bb418.us ], [ %4197, %after_bb415.us ], [ %4197, %after_bb412.us ], [ %4197, %after_bb409.us ], [ %4197, %after_bb406.us ], [ %4197, %after_bb403.us ], [ %4197, %after_bb400.us ], [ %4197, %after_bb397.us ], [ %4197, %after_bb394.us ], [ %4197, %after_bb391.us ], [ %4197, %after_bb388.us ], [ %4197, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4292 = phi i8 [ %4187, %true_bb434.us ], [ %4187, %after_bb433.us ], [ %4187, %after_bb430.us ], [ %4187, %after_bb427.us ], [ %4187, %after_bb424.us ], [ %4187, %after_bb421.us ], [ %4187, %after_bb418.us ], [ %4187, %after_bb415.us ], [ %4187, %after_bb412.us ], [ %4187, %after_bb409.us ], [ %4187, %after_bb406.us ], [ %4187, %after_bb403.us ], [ %4187, %after_bb400.us ], [ %4187, %after_bb397.us ], [ %4187, %after_bb394.us ], [ %4187, %after_bb391.us ], [ %4187, %after_bb388.us ], [ %4187, %after_bb385.us ], [ %4187, %after_bb382.us ], [ %4187, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4293 = phi i8 [ %4177, %true_bb434.us ], [ %4177, %after_bb433.us ], [ %4177, %after_bb430.us ], [ %4177, %after_bb427.us ], [ %4177, %after_bb424.us ], [ %4177, %after_bb421.us ], [ %4177, %after_bb418.us ], [ %4177, %after_bb415.us ], [ %4177, %after_bb412.us ], [ %4177, %after_bb409.us ], [ %4177, %after_bb406.us ], [ %4177, %after_bb403.us ], [ %4177, %after_bb400.us ], [ %4177, %after_bb397.us ], [ %4177, %after_bb394.us ], [ %4177, %after_bb391.us ], [ %4177, %after_bb388.us ], [ %4177, %after_bb385.us ], [ %4177, %after_bb382.us ], [ %4177, %after_bb379.us ], [ %4177, %after_bb376.us ], [ %4177, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4294 = phi i8 [ %4167, %true_bb434.us ], [ %4167, %after_bb433.us ], [ %4167, %after_bb430.us ], [ %4167, %after_bb427.us ], [ %4167, %after_bb424.us ], [ %4167, %after_bb421.us ], [ %4167, %after_bb418.us ], [ %4167, %after_bb415.us ], [ %4167, %after_bb412.us ], [ %4167, %after_bb409.us ], [ %4167, %after_bb406.us ], [ %4167, %after_bb403.us ], [ %4167, %after_bb400.us ], [ %4167, %after_bb397.us ], [ %4167, %after_bb394.us ], [ %4167, %after_bb391.us ], [ %4167, %after_bb388.us ], [ %4167, %after_bb385.us ], [ %4167, %after_bb382.us ], [ %4167, %after_bb379.us ], [ %4167, %after_bb376.us ], [ %4167, %after_bb373.us ], [ %4167, %after_bb370.us ], [ %4167, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4295 = phi i8 [ %4157, %true_bb434.us ], [ %4157, %after_bb433.us ], [ %4157, %after_bb430.us ], [ %4157, %after_bb427.us ], [ %4157, %after_bb424.us ], [ %4157, %after_bb421.us ], [ %4157, %after_bb418.us ], [ %4157, %after_bb415.us ], [ %4157, %after_bb412.us ], [ %4157, %after_bb409.us ], [ %4157, %after_bb406.us ], [ %4157, %after_bb403.us ], [ %4157, %after_bb400.us ], [ %4157, %after_bb397.us ], [ %4157, %after_bb394.us ], [ %4157, %after_bb391.us ], [ %4157, %after_bb388.us ], [ %4157, %after_bb385.us ], [ %4157, %after_bb382.us ], [ %4157, %after_bb379.us ], [ %4157, %after_bb376.us ], [ %4157, %after_bb373.us ], [ %4157, %after_bb370.us ], [ %4157, %after_bb367.us ], [ %4157, %after_bb364.us ], [ %4157, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4296 = phi i8 [ %4147, %true_bb434.us ], [ %4147, %after_bb433.us ], [ %4147, %after_bb430.us ], [ %4147, %after_bb427.us ], [ %4147, %after_bb424.us ], [ %4147, %after_bb421.us ], [ %4147, %after_bb418.us ], [ %4147, %after_bb415.us ], [ %4147, %after_bb412.us ], [ %4147, %after_bb409.us ], [ %4147, %after_bb406.us ], [ %4147, %after_bb403.us ], [ %4147, %after_bb400.us ], [ %4147, %after_bb397.us ], [ %4147, %after_bb394.us ], [ %4147, %after_bb391.us ], [ %4147, %after_bb388.us ], [ %4147, %after_bb385.us ], [ %4147, %after_bb382.us ], [ %4147, %after_bb379.us ], [ %4147, %after_bb376.us ], [ %4147, %after_bb373.us ], [ %4147, %after_bb370.us ], [ %4147, %after_bb367.us ], [ %4147, %after_bb364.us ], [ %4147, %after_bb361.us ], [ %4147, %after_bb358.us ], [ %4147, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4297 = phi i8 [ %4137, %true_bb434.us ], [ %4137, %after_bb433.us ], [ %4137, %after_bb430.us ], [ %4137, %after_bb427.us ], [ %4137, %after_bb424.us ], [ %4137, %after_bb421.us ], [ %4137, %after_bb418.us ], [ %4137, %after_bb415.us ], [ %4137, %after_bb412.us ], [ %4137, %after_bb409.us ], [ %4137, %after_bb406.us ], [ %4137, %after_bb403.us ], [ %4137, %after_bb400.us ], [ %4137, %after_bb397.us ], [ %4137, %after_bb394.us ], [ %4137, %after_bb391.us ], [ %4137, %after_bb388.us ], [ %4137, %after_bb385.us ], [ %4137, %after_bb382.us ], [ %4137, %after_bb379.us ], [ %4137, %after_bb376.us ], [ %4137, %after_bb373.us ], [ %4137, %after_bb370.us ], [ %4137, %after_bb367.us ], [ %4137, %after_bb364.us ], [ %4137, %after_bb361.us ], [ %4137, %after_bb358.us ], [ %4137, %after_bb355.us ], [ %4137, %after_bb352.us ], [ %4137, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4298 = phi i8 [ %4127, %true_bb434.us ], [ %4127, %after_bb433.us ], [ %4127, %after_bb430.us ], [ %4127, %after_bb427.us ], [ %4127, %after_bb424.us ], [ %4127, %after_bb421.us ], [ %4127, %after_bb418.us ], [ %4127, %after_bb415.us ], [ %4127, %after_bb412.us ], [ %4127, %after_bb409.us ], [ %4127, %after_bb406.us ], [ %4127, %after_bb403.us ], [ %4127, %after_bb400.us ], [ %4127, %after_bb397.us ], [ %4127, %after_bb394.us ], [ %4127, %after_bb391.us ], [ %4127, %after_bb388.us ], [ %4127, %after_bb385.us ], [ %4127, %after_bb382.us ], [ %4127, %after_bb379.us ], [ %4127, %after_bb376.us ], [ %4127, %after_bb373.us ], [ %4127, %after_bb370.us ], [ %4127, %after_bb367.us ], [ %4127, %after_bb364.us ], [ %4127, %after_bb361.us ], [ %4127, %after_bb358.us ], [ %4127, %after_bb355.us ], [ %4127, %after_bb352.us ], [ %4127, %after_bb349.us ], [ %4127, %after_bb346.us ], [ %4127, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4299 = phi i8 [ %4117, %true_bb434.us ], [ %4117, %after_bb433.us ], [ %4117, %after_bb430.us ], [ %4117, %after_bb427.us ], [ %4117, %after_bb424.us ], [ %4117, %after_bb421.us ], [ %4117, %after_bb418.us ], [ %4117, %after_bb415.us ], [ %4117, %after_bb412.us ], [ %4117, %after_bb409.us ], [ %4117, %after_bb406.us ], [ %4117, %after_bb403.us ], [ %4117, %after_bb400.us ], [ %4117, %after_bb397.us ], [ %4117, %after_bb394.us ], [ %4117, %after_bb391.us ], [ %4117, %after_bb388.us ], [ %4117, %after_bb385.us ], [ %4117, %after_bb382.us ], [ %4117, %after_bb379.us ], [ %4117, %after_bb376.us ], [ %4117, %after_bb373.us ], [ %4117, %after_bb370.us ], [ %4117, %after_bb367.us ], [ %4117, %after_bb364.us ], [ %4117, %after_bb361.us ], [ %4117, %after_bb358.us ], [ %4117, %after_bb355.us ], [ %4117, %after_bb352.us ], [ %4117, %after_bb349.us ], [ %4117, %after_bb346.us ], [ %4117, %after_bb343.us ], [ %4117, %after_bb340.us ], [ %4117, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4300 = phi i8 [ %4107, %true_bb434.us ], [ %4107, %after_bb433.us ], [ %4107, %after_bb430.us ], [ %4107, %after_bb427.us ], [ %4107, %after_bb424.us ], [ %4107, %after_bb421.us ], [ %4107, %after_bb418.us ], [ %4107, %after_bb415.us ], [ %4107, %after_bb412.us ], [ %4107, %after_bb409.us ], [ %4107, %after_bb406.us ], [ %4107, %after_bb403.us ], [ %4107, %after_bb400.us ], [ %4107, %after_bb397.us ], [ %4107, %after_bb394.us ], [ %4107, %after_bb391.us ], [ %4107, %after_bb388.us ], [ %4107, %after_bb385.us ], [ %4107, %after_bb382.us ], [ %4107, %after_bb379.us ], [ %4107, %after_bb376.us ], [ %4107, %after_bb373.us ], [ %4107, %after_bb370.us ], [ %4107, %after_bb367.us ], [ %4107, %after_bb364.us ], [ %4107, %after_bb361.us ], [ %4107, %after_bb358.us ], [ %4107, %after_bb355.us ], [ %4107, %after_bb352.us ], [ %4107, %after_bb349.us ], [ %4107, %after_bb346.us ], [ %4107, %after_bb343.us ], [ %4107, %after_bb340.us ], [ %4107, %after_bb337.us ], [ %4107, %after_bb334.us ], [ %4107, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4301 = phi i8 [ %4097, %true_bb434.us ], [ %4097, %after_bb433.us ], [ %4097, %after_bb430.us ], [ %4097, %after_bb427.us ], [ %4097, %after_bb424.us ], [ %4097, %after_bb421.us ], [ %4097, %after_bb418.us ], [ %4097, %after_bb415.us ], [ %4097, %after_bb412.us ], [ %4097, %after_bb409.us ], [ %4097, %after_bb406.us ], [ %4097, %after_bb403.us ], [ %4097, %after_bb400.us ], [ %4097, %after_bb397.us ], [ %4097, %after_bb394.us ], [ %4097, %after_bb391.us ], [ %4097, %after_bb388.us ], [ %4097, %after_bb385.us ], [ %4097, %after_bb382.us ], [ %4097, %after_bb379.us ], [ %4097, %after_bb376.us ], [ %4097, %after_bb373.us ], [ %4097, %after_bb370.us ], [ %4097, %after_bb367.us ], [ %4097, %after_bb364.us ], [ %4097, %after_bb361.us ], [ %4097, %after_bb358.us ], [ %4097, %after_bb355.us ], [ %4097, %after_bb352.us ], [ %4097, %after_bb349.us ], [ %4097, %after_bb346.us ], [ %4097, %after_bb343.us ], [ %4097, %after_bb340.us ], [ %4097, %after_bb337.us ], [ %4097, %after_bb334.us ], [ %4097, %after_bb331.us ], [ %4097, %after_bb328.us ], [ %4097, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4302 = phi i8 [ %4087, %true_bb434.us ], [ %4087, %after_bb433.us ], [ %4087, %after_bb430.us ], [ %4087, %after_bb427.us ], [ %4087, %after_bb424.us ], [ %4087, %after_bb421.us ], [ %4087, %after_bb418.us ], [ %4087, %after_bb415.us ], [ %4087, %after_bb412.us ], [ %4087, %after_bb409.us ], [ %4087, %after_bb406.us ], [ %4087, %after_bb403.us ], [ %4087, %after_bb400.us ], [ %4087, %after_bb397.us ], [ %4087, %after_bb394.us ], [ %4087, %after_bb391.us ], [ %4087, %after_bb388.us ], [ %4087, %after_bb385.us ], [ %4087, %after_bb382.us ], [ %4087, %after_bb379.us ], [ %4087, %after_bb376.us ], [ %4087, %after_bb373.us ], [ %4087, %after_bb370.us ], [ %4087, %after_bb367.us ], [ %4087, %after_bb364.us ], [ %4087, %after_bb361.us ], [ %4087, %after_bb358.us ], [ %4087, %after_bb355.us ], [ %4087, %after_bb352.us ], [ %4087, %after_bb349.us ], [ %4087, %after_bb346.us ], [ %4087, %after_bb343.us ], [ %4087, %after_bb340.us ], [ %4087, %after_bb337.us ], [ %4087, %after_bb334.us ], [ %4087, %after_bb331.us ], [ %4087, %after_bb328.us ], [ %4087, %after_bb325.us ], [ %4087, %after_bb322.us ], [ %4087, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4303 = phi i8 [ %4077, %true_bb434.us ], [ %4077, %after_bb433.us ], [ %4077, %after_bb430.us ], [ %4077, %after_bb427.us ], [ %4077, %after_bb424.us ], [ %4077, %after_bb421.us ], [ %4077, %after_bb418.us ], [ %4077, %after_bb415.us ], [ %4077, %after_bb412.us ], [ %4077, %after_bb409.us ], [ %4077, %after_bb406.us ], [ %4077, %after_bb403.us ], [ %4077, %after_bb400.us ], [ %4077, %after_bb397.us ], [ %4077, %after_bb394.us ], [ %4077, %after_bb391.us ], [ %4077, %after_bb388.us ], [ %4077, %after_bb385.us ], [ %4077, %after_bb382.us ], [ %4077, %after_bb379.us ], [ %4077, %after_bb376.us ], [ %4077, %after_bb373.us ], [ %4077, %after_bb370.us ], [ %4077, %after_bb367.us ], [ %4077, %after_bb364.us ], [ %4077, %after_bb361.us ], [ %4077, %after_bb358.us ], [ %4077, %after_bb355.us ], [ %4077, %after_bb352.us ], [ %4077, %after_bb349.us ], [ %4077, %after_bb346.us ], [ %4077, %after_bb343.us ], [ %4077, %after_bb340.us ], [ %4077, %after_bb337.us ], [ %4077, %after_bb334.us ], [ %4077, %after_bb331.us ], [ %4077, %after_bb328.us ], [ %4077, %after_bb325.us ], [ %4077, %after_bb322.us ], [ %4077, %after_bb319.us ], [ %4077, %after_bb316.us ], [ %4077, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4304 = phi i8 [ %4067, %true_bb434.us ], [ %4067, %after_bb433.us ], [ %4067, %after_bb430.us ], [ %4067, %after_bb427.us ], [ %4067, %after_bb424.us ], [ %4067, %after_bb421.us ], [ %4067, %after_bb418.us ], [ %4067, %after_bb415.us ], [ %4067, %after_bb412.us ], [ %4067, %after_bb409.us ], [ %4067, %after_bb406.us ], [ %4067, %after_bb403.us ], [ %4067, %after_bb400.us ], [ %4067, %after_bb397.us ], [ %4067, %after_bb394.us ], [ %4067, %after_bb391.us ], [ %4067, %after_bb388.us ], [ %4067, %after_bb385.us ], [ %4067, %after_bb382.us ], [ %4067, %after_bb379.us ], [ %4067, %after_bb376.us ], [ %4067, %after_bb373.us ], [ %4067, %after_bb370.us ], [ %4067, %after_bb367.us ], [ %4067, %after_bb364.us ], [ %4067, %after_bb361.us ], [ %4067, %after_bb358.us ], [ %4067, %after_bb355.us ], [ %4067, %after_bb352.us ], [ %4067, %after_bb349.us ], [ %4067, %after_bb346.us ], [ %4067, %after_bb343.us ], [ %4067, %after_bb340.us ], [ %4067, %after_bb337.us ], [ %4067, %after_bb334.us ], [ %4067, %after_bb331.us ], [ %4067, %after_bb328.us ], [ %4067, %after_bb325.us ], [ %4067, %after_bb322.us ], [ %4067, %after_bb319.us ], [ %4067, %after_bb316.us ], [ %4067, %after_bb313.us ], [ %4067, %after_bb310.us ], [ %4067, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4305 = phi i8 [ %4057, %true_bb434.us ], [ %4057, %after_bb433.us ], [ %4057, %after_bb430.us ], [ %4057, %after_bb427.us ], [ %4057, %after_bb424.us ], [ %4057, %after_bb421.us ], [ %4057, %after_bb418.us ], [ %4057, %after_bb415.us ], [ %4057, %after_bb412.us ], [ %4057, %after_bb409.us ], [ %4057, %after_bb406.us ], [ %4057, %after_bb403.us ], [ %4057, %after_bb400.us ], [ %4057, %after_bb397.us ], [ %4057, %after_bb394.us ], [ %4057, %after_bb391.us ], [ %4057, %after_bb388.us ], [ %4057, %after_bb385.us ], [ %4057, %after_bb382.us ], [ %4057, %after_bb379.us ], [ %4057, %after_bb376.us ], [ %4057, %after_bb373.us ], [ %4057, %after_bb370.us ], [ %4057, %after_bb367.us ], [ %4057, %after_bb364.us ], [ %4057, %after_bb361.us ], [ %4057, %after_bb358.us ], [ %4057, %after_bb355.us ], [ %4057, %after_bb352.us ], [ %4057, %after_bb349.us ], [ %4057, %after_bb346.us ], [ %4057, %after_bb343.us ], [ %4057, %after_bb340.us ], [ %4057, %after_bb337.us ], [ %4057, %after_bb334.us ], [ %4057, %after_bb331.us ], [ %4057, %after_bb328.us ], [ %4057, %after_bb325.us ], [ %4057, %after_bb322.us ], [ %4057, %after_bb319.us ], [ %4057, %after_bb316.us ], [ %4057, %after_bb313.us ], [ %4057, %after_bb310.us ], [ %4057, %after_bb307.us ], [ %4057, %after_bb304.us ], [ %4057, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4306 = phi i8 [ %4047, %true_bb434.us ], [ %4047, %after_bb433.us ], [ %4047, %after_bb430.us ], [ %4047, %after_bb427.us ], [ %4047, %after_bb424.us ], [ %4047, %after_bb421.us ], [ %4047, %after_bb418.us ], [ %4047, %after_bb415.us ], [ %4047, %after_bb412.us ], [ %4047, %after_bb409.us ], [ %4047, %after_bb406.us ], [ %4047, %after_bb403.us ], [ %4047, %after_bb400.us ], [ %4047, %after_bb397.us ], [ %4047, %after_bb394.us ], [ %4047, %after_bb391.us ], [ %4047, %after_bb388.us ], [ %4047, %after_bb385.us ], [ %4047, %after_bb382.us ], [ %4047, %after_bb379.us ], [ %4047, %after_bb376.us ], [ %4047, %after_bb373.us ], [ %4047, %after_bb370.us ], [ %4047, %after_bb367.us ], [ %4047, %after_bb364.us ], [ %4047, %after_bb361.us ], [ %4047, %after_bb358.us ], [ %4047, %after_bb355.us ], [ %4047, %after_bb352.us ], [ %4047, %after_bb349.us ], [ %4047, %after_bb346.us ], [ %4047, %after_bb343.us ], [ %4047, %after_bb340.us ], [ %4047, %after_bb337.us ], [ %4047, %after_bb334.us ], [ %4047, %after_bb331.us ], [ %4047, %after_bb328.us ], [ %4047, %after_bb325.us ], [ %4047, %after_bb322.us ], [ %4047, %after_bb319.us ], [ %4047, %after_bb316.us ], [ %4047, %after_bb313.us ], [ %4047, %after_bb310.us ], [ %4047, %after_bb307.us ], [ %4047, %after_bb304.us ], [ %4047, %after_bb301.us ], [ %4047, %after_bb298.us ], [ %4047, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4307 = phi i8 [ %4037, %true_bb434.us ], [ %4037, %after_bb433.us ], [ %4037, %after_bb430.us ], [ %4037, %after_bb427.us ], [ %4037, %after_bb424.us ], [ %4037, %after_bb421.us ], [ %4037, %after_bb418.us ], [ %4037, %after_bb415.us ], [ %4037, %after_bb412.us ], [ %4037, %after_bb409.us ], [ %4037, %after_bb406.us ], [ %4037, %after_bb403.us ], [ %4037, %after_bb400.us ], [ %4037, %after_bb397.us ], [ %4037, %after_bb394.us ], [ %4037, %after_bb391.us ], [ %4037, %after_bb388.us ], [ %4037, %after_bb385.us ], [ %4037, %after_bb382.us ], [ %4037, %after_bb379.us ], [ %4037, %after_bb376.us ], [ %4037, %after_bb373.us ], [ %4037, %after_bb370.us ], [ %4037, %after_bb367.us ], [ %4037, %after_bb364.us ], [ %4037, %after_bb361.us ], [ %4037, %after_bb358.us ], [ %4037, %after_bb355.us ], [ %4037, %after_bb352.us ], [ %4037, %after_bb349.us ], [ %4037, %after_bb346.us ], [ %4037, %after_bb343.us ], [ %4037, %after_bb340.us ], [ %4037, %after_bb337.us ], [ %4037, %after_bb334.us ], [ %4037, %after_bb331.us ], [ %4037, %after_bb328.us ], [ %4037, %after_bb325.us ], [ %4037, %after_bb322.us ], [ %4037, %after_bb319.us ], [ %4037, %after_bb316.us ], [ %4037, %after_bb313.us ], [ %4037, %after_bb310.us ], [ %4037, %after_bb307.us ], [ %4037, %after_bb304.us ], [ %4037, %after_bb301.us ], [ %4037, %after_bb298.us ], [ %4037, %after_bb295.us ], [ %4037, %after_bb292.us ], [ %4037, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4308 = phi i8 [ %4027, %true_bb434.us ], [ %4027, %after_bb433.us ], [ %4027, %after_bb430.us ], [ %4027, %after_bb427.us ], [ %4027, %after_bb424.us ], [ %4027, %after_bb421.us ], [ %4027, %after_bb418.us ], [ %4027, %after_bb415.us ], [ %4027, %after_bb412.us ], [ %4027, %after_bb409.us ], [ %4027, %after_bb406.us ], [ %4027, %after_bb403.us ], [ %4027, %after_bb400.us ], [ %4027, %after_bb397.us ], [ %4027, %after_bb394.us ], [ %4027, %after_bb391.us ], [ %4027, %after_bb388.us ], [ %4027, %after_bb385.us ], [ %4027, %after_bb382.us ], [ %4027, %after_bb379.us ], [ %4027, %after_bb376.us ], [ %4027, %after_bb373.us ], [ %4027, %after_bb370.us ], [ %4027, %after_bb367.us ], [ %4027, %after_bb364.us ], [ %4027, %after_bb361.us ], [ %4027, %after_bb358.us ], [ %4027, %after_bb355.us ], [ %4027, %after_bb352.us ], [ %4027, %after_bb349.us ], [ %4027, %after_bb346.us ], [ %4027, %after_bb343.us ], [ %4027, %after_bb340.us ], [ %4027, %after_bb337.us ], [ %4027, %after_bb334.us ], [ %4027, %after_bb331.us ], [ %4027, %after_bb328.us ], [ %4027, %after_bb325.us ], [ %4027, %after_bb322.us ], [ %4027, %after_bb319.us ], [ %4027, %after_bb316.us ], [ %4027, %after_bb313.us ], [ %4027, %after_bb310.us ], [ %4027, %after_bb307.us ], [ %4027, %after_bb304.us ], [ %4027, %after_bb301.us ], [ %4027, %after_bb298.us ], [ %4027, %after_bb295.us ], [ %4027, %after_bb292.us ], [ %4027, %after_bb289.us ], [ %4027, %after_bb286.us ], [ %4027, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4309 = phi i8 [ %4017, %true_bb434.us ], [ %4017, %after_bb433.us ], [ %4017, %after_bb430.us ], [ %4017, %after_bb427.us ], [ %4017, %after_bb424.us ], [ %4017, %after_bb421.us ], [ %4017, %after_bb418.us ], [ %4017, %after_bb415.us ], [ %4017, %after_bb412.us ], [ %4017, %after_bb409.us ], [ %4017, %after_bb406.us ], [ %4017, %after_bb403.us ], [ %4017, %after_bb400.us ], [ %4017, %after_bb397.us ], [ %4017, %after_bb394.us ], [ %4017, %after_bb391.us ], [ %4017, %after_bb388.us ], [ %4017, %after_bb385.us ], [ %4017, %after_bb382.us ], [ %4017, %after_bb379.us ], [ %4017, %after_bb376.us ], [ %4017, %after_bb373.us ], [ %4017, %after_bb370.us ], [ %4017, %after_bb367.us ], [ %4017, %after_bb364.us ], [ %4017, %after_bb361.us ], [ %4017, %after_bb358.us ], [ %4017, %after_bb355.us ], [ %4017, %after_bb352.us ], [ %4017, %after_bb349.us ], [ %4017, %after_bb346.us ], [ %4017, %after_bb343.us ], [ %4017, %after_bb340.us ], [ %4017, %after_bb337.us ], [ %4017, %after_bb334.us ], [ %4017, %after_bb331.us ], [ %4017, %after_bb328.us ], [ %4017, %after_bb325.us ], [ %4017, %after_bb322.us ], [ %4017, %after_bb319.us ], [ %4017, %after_bb316.us ], [ %4017, %after_bb313.us ], [ %4017, %after_bb310.us ], [ %4017, %after_bb307.us ], [ %4017, %after_bb304.us ], [ %4017, %after_bb301.us ], [ %4017, %after_bb298.us ], [ %4017, %after_bb295.us ], [ %4017, %after_bb292.us ], [ %4017, %after_bb289.us ], [ %4017, %after_bb286.us ], [ %4017, %after_bb283.us ], [ %4017, %after_bb280.us ], [ %4017, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4310 = phi i8 [ %4007, %true_bb434.us ], [ %4007, %after_bb433.us ], [ %4007, %after_bb430.us ], [ %4007, %after_bb427.us ], [ %4007, %after_bb424.us ], [ %4007, %after_bb421.us ], [ %4007, %after_bb418.us ], [ %4007, %after_bb415.us ], [ %4007, %after_bb412.us ], [ %4007, %after_bb409.us ], [ %4007, %after_bb406.us ], [ %4007, %after_bb403.us ], [ %4007, %after_bb400.us ], [ %4007, %after_bb397.us ], [ %4007, %after_bb394.us ], [ %4007, %after_bb391.us ], [ %4007, %after_bb388.us ], [ %4007, %after_bb385.us ], [ %4007, %after_bb382.us ], [ %4007, %after_bb379.us ], [ %4007, %after_bb376.us ], [ %4007, %after_bb373.us ], [ %4007, %after_bb370.us ], [ %4007, %after_bb367.us ], [ %4007, %after_bb364.us ], [ %4007, %after_bb361.us ], [ %4007, %after_bb358.us ], [ %4007, %after_bb355.us ], [ %4007, %after_bb352.us ], [ %4007, %after_bb349.us ], [ %4007, %after_bb346.us ], [ %4007, %after_bb343.us ], [ %4007, %after_bb340.us ], [ %4007, %after_bb337.us ], [ %4007, %after_bb334.us ], [ %4007, %after_bb331.us ], [ %4007, %after_bb328.us ], [ %4007, %after_bb325.us ], [ %4007, %after_bb322.us ], [ %4007, %after_bb319.us ], [ %4007, %after_bb316.us ], [ %4007, %after_bb313.us ], [ %4007, %after_bb310.us ], [ %4007, %after_bb307.us ], [ %4007, %after_bb304.us ], [ %4007, %after_bb301.us ], [ %4007, %after_bb298.us ], [ %4007, %after_bb295.us ], [ %4007, %after_bb292.us ], [ %4007, %after_bb289.us ], [ %4007, %after_bb286.us ], [ %4007, %after_bb283.us ], [ %4007, %after_bb280.us ], [ %4007, %after_bb277.us ], [ %4007, %after_bb274.us ], [ %4007, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4311 = phi i8 [ %3997, %true_bb434.us ], [ %3997, %after_bb433.us ], [ %3997, %after_bb430.us ], [ %3997, %after_bb427.us ], [ %3997, %after_bb424.us ], [ %3997, %after_bb421.us ], [ %3997, %after_bb418.us ], [ %3997, %after_bb415.us ], [ %3997, %after_bb412.us ], [ %3997, %after_bb409.us ], [ %3997, %after_bb406.us ], [ %3997, %after_bb403.us ], [ %3997, %after_bb400.us ], [ %3997, %after_bb397.us ], [ %3997, %after_bb394.us ], [ %3997, %after_bb391.us ], [ %3997, %after_bb388.us ], [ %3997, %after_bb385.us ], [ %3997, %after_bb382.us ], [ %3997, %after_bb379.us ], [ %3997, %after_bb376.us ], [ %3997, %after_bb373.us ], [ %3997, %after_bb370.us ], [ %3997, %after_bb367.us ], [ %3997, %after_bb364.us ], [ %3997, %after_bb361.us ], [ %3997, %after_bb358.us ], [ %3997, %after_bb355.us ], [ %3997, %after_bb352.us ], [ %3997, %after_bb349.us ], [ %3997, %after_bb346.us ], [ %3997, %after_bb343.us ], [ %3997, %after_bb340.us ], [ %3997, %after_bb337.us ], [ %3997, %after_bb334.us ], [ %3997, %after_bb331.us ], [ %3997, %after_bb328.us ], [ %3997, %after_bb325.us ], [ %3997, %after_bb322.us ], [ %3997, %after_bb319.us ], [ %3997, %after_bb316.us ], [ %3997, %after_bb313.us ], [ %3997, %after_bb310.us ], [ %3997, %after_bb307.us ], [ %3997, %after_bb304.us ], [ %3997, %after_bb301.us ], [ %3997, %after_bb298.us ], [ %3997, %after_bb295.us ], [ %3997, %after_bb292.us ], [ %3997, %after_bb289.us ], [ %3997, %after_bb286.us ], [ %3997, %after_bb283.us ], [ %3997, %after_bb280.us ], [ %3997, %after_bb277.us ], [ %3997, %after_bb274.us ], [ %3997, %after_bb271.us ], [ %3997, %after_bb268.us ], [ %3997, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4312 = phi i8 [ %3987, %true_bb434.us ], [ %3987, %after_bb433.us ], [ %3987, %after_bb430.us ], [ %3987, %after_bb427.us ], [ %3987, %after_bb424.us ], [ %3987, %after_bb421.us ], [ %3987, %after_bb418.us ], [ %3987, %after_bb415.us ], [ %3987, %after_bb412.us ], [ %3987, %after_bb409.us ], [ %3987, %after_bb406.us ], [ %3987, %after_bb403.us ], [ %3987, %after_bb400.us ], [ %3987, %after_bb397.us ], [ %3987, %after_bb394.us ], [ %3987, %after_bb391.us ], [ %3987, %after_bb388.us ], [ %3987, %after_bb385.us ], [ %3987, %after_bb382.us ], [ %3987, %after_bb379.us ], [ %3987, %after_bb376.us ], [ %3987, %after_bb373.us ], [ %3987, %after_bb370.us ], [ %3987, %after_bb367.us ], [ %3987, %after_bb364.us ], [ %3987, %after_bb361.us ], [ %3987, %after_bb358.us ], [ %3987, %after_bb355.us ], [ %3987, %after_bb352.us ], [ %3987, %after_bb349.us ], [ %3987, %after_bb346.us ], [ %3987, %after_bb343.us ], [ %3987, %after_bb340.us ], [ %3987, %after_bb337.us ], [ %3987, %after_bb334.us ], [ %3987, %after_bb331.us ], [ %3987, %after_bb328.us ], [ %3987, %after_bb325.us ], [ %3987, %after_bb322.us ], [ %3987, %after_bb319.us ], [ %3987, %after_bb316.us ], [ %3987, %after_bb313.us ], [ %3987, %after_bb310.us ], [ %3987, %after_bb307.us ], [ %3987, %after_bb304.us ], [ %3987, %after_bb301.us ], [ %3987, %after_bb298.us ], [ %3987, %after_bb295.us ], [ %3987, %after_bb292.us ], [ %3987, %after_bb289.us ], [ %3987, %after_bb286.us ], [ %3987, %after_bb283.us ], [ %3987, %after_bb280.us ], [ %3987, %after_bb277.us ], [ %3987, %after_bb274.us ], [ %3987, %after_bb271.us ], [ %3987, %after_bb268.us ], [ %3987, %after_bb265.us ], [ %3987, %after_bb262.us ], [ %3987, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4313 = phi i8 [ %3977, %true_bb434.us ], [ %3977, %after_bb433.us ], [ %3977, %after_bb430.us ], [ %3977, %after_bb427.us ], [ %3977, %after_bb424.us ], [ %3977, %after_bb421.us ], [ %3977, %after_bb418.us ], [ %3977, %after_bb415.us ], [ %3977, %after_bb412.us ], [ %3977, %after_bb409.us ], [ %3977, %after_bb406.us ], [ %3977, %after_bb403.us ], [ %3977, %after_bb400.us ], [ %3977, %after_bb397.us ], [ %3977, %after_bb394.us ], [ %3977, %after_bb391.us ], [ %3977, %after_bb388.us ], [ %3977, %after_bb385.us ], [ %3977, %after_bb382.us ], [ %3977, %after_bb379.us ], [ %3977, %after_bb376.us ], [ %3977, %after_bb373.us ], [ %3977, %after_bb370.us ], [ %3977, %after_bb367.us ], [ %3977, %after_bb364.us ], [ %3977, %after_bb361.us ], [ %3977, %after_bb358.us ], [ %3977, %after_bb355.us ], [ %3977, %after_bb352.us ], [ %3977, %after_bb349.us ], [ %3977, %after_bb346.us ], [ %3977, %after_bb343.us ], [ %3977, %after_bb340.us ], [ %3977, %after_bb337.us ], [ %3977, %after_bb334.us ], [ %3977, %after_bb331.us ], [ %3977, %after_bb328.us ], [ %3977, %after_bb325.us ], [ %3977, %after_bb322.us ], [ %3977, %after_bb319.us ], [ %3977, %after_bb316.us ], [ %3977, %after_bb313.us ], [ %3977, %after_bb310.us ], [ %3977, %after_bb307.us ], [ %3977, %after_bb304.us ], [ %3977, %after_bb301.us ], [ %3977, %after_bb298.us ], [ %3977, %after_bb295.us ], [ %3977, %after_bb292.us ], [ %3977, %after_bb289.us ], [ %3977, %after_bb286.us ], [ %3977, %after_bb283.us ], [ %3977, %after_bb280.us ], [ %3977, %after_bb277.us ], [ %3977, %after_bb274.us ], [ %3977, %after_bb271.us ], [ %3977, %after_bb268.us ], [ %3977, %after_bb265.us ], [ %3977, %after_bb262.us ], [ %3977, %after_bb259.us ], [ %3977, %after_bb256.us ], [ %3977, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4314 = phi i8 [ %3982, %true_bb434.us ], [ %3982, %after_bb433.us ], [ %3982, %after_bb430.us ], [ %3982, %after_bb427.us ], [ %3982, %after_bb424.us ], [ %3982, %after_bb421.us ], [ %3982, %after_bb418.us ], [ %3982, %after_bb415.us ], [ %3982, %after_bb412.us ], [ %3982, %after_bb409.us ], [ %3982, %after_bb406.us ], [ %3982, %after_bb403.us ], [ %3982, %after_bb400.us ], [ %3982, %after_bb397.us ], [ %3982, %after_bb394.us ], [ %3982, %after_bb391.us ], [ %3982, %after_bb388.us ], [ %3982, %after_bb385.us ], [ %3982, %after_bb382.us ], [ %3982, %after_bb379.us ], [ %3982, %after_bb376.us ], [ %3982, %after_bb373.us ], [ %3982, %after_bb370.us ], [ %3982, %after_bb367.us ], [ %3982, %after_bb364.us ], [ %3982, %after_bb361.us ], [ %3982, %after_bb358.us ], [ %3982, %after_bb355.us ], [ %3982, %after_bb352.us ], [ %3982, %after_bb349.us ], [ %3982, %after_bb346.us ], [ %3982, %after_bb343.us ], [ %3982, %after_bb340.us ], [ %3982, %after_bb337.us ], [ %3982, %after_bb334.us ], [ %3982, %after_bb331.us ], [ %3982, %after_bb328.us ], [ %3982, %after_bb325.us ], [ %3982, %after_bb322.us ], [ %3982, %after_bb319.us ], [ %3982, %after_bb316.us ], [ %3982, %after_bb313.us ], [ %3982, %after_bb310.us ], [ %3982, %after_bb307.us ], [ %3982, %after_bb304.us ], [ %3982, %after_bb301.us ], [ %3982, %after_bb298.us ], [ %3982, %after_bb295.us ], [ %3982, %after_bb292.us ], [ %3982, %after_bb289.us ], [ %3982, %after_bb286.us ], [ %3982, %after_bb283.us ], [ %3982, %after_bb280.us ], [ %3982, %after_bb277.us ], [ %3982, %after_bb274.us ], [ %3982, %after_bb271.us ], [ %3982, %after_bb268.us ], [ %3982, %after_bb265.us ], [ %3982, %after_bb262.us ], [ %3982, %after_bb259.us ], [ %3982, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4315 = phi i8 [ %3992, %true_bb434.us ], [ %3992, %after_bb433.us ], [ %3992, %after_bb430.us ], [ %3992, %after_bb427.us ], [ %3992, %after_bb424.us ], [ %3992, %after_bb421.us ], [ %3992, %after_bb418.us ], [ %3992, %after_bb415.us ], [ %3992, %after_bb412.us ], [ %3992, %after_bb409.us ], [ %3992, %after_bb406.us ], [ %3992, %after_bb403.us ], [ %3992, %after_bb400.us ], [ %3992, %after_bb397.us ], [ %3992, %after_bb394.us ], [ %3992, %after_bb391.us ], [ %3992, %after_bb388.us ], [ %3992, %after_bb385.us ], [ %3992, %after_bb382.us ], [ %3992, %after_bb379.us ], [ %3992, %after_bb376.us ], [ %3992, %after_bb373.us ], [ %3992, %after_bb370.us ], [ %3992, %after_bb367.us ], [ %3992, %after_bb364.us ], [ %3992, %after_bb361.us ], [ %3992, %after_bb358.us ], [ %3992, %after_bb355.us ], [ %3992, %after_bb352.us ], [ %3992, %after_bb349.us ], [ %3992, %after_bb346.us ], [ %3992, %after_bb343.us ], [ %3992, %after_bb340.us ], [ %3992, %after_bb337.us ], [ %3992, %after_bb334.us ], [ %3992, %after_bb331.us ], [ %3992, %after_bb328.us ], [ %3992, %after_bb325.us ], [ %3992, %after_bb322.us ], [ %3992, %after_bb319.us ], [ %3992, %after_bb316.us ], [ %3992, %after_bb313.us ], [ %3992, %after_bb310.us ], [ %3992, %after_bb307.us ], [ %3992, %after_bb304.us ], [ %3992, %after_bb301.us ], [ %3992, %after_bb298.us ], [ %3992, %after_bb295.us ], [ %3992, %after_bb292.us ], [ %3992, %after_bb289.us ], [ %3992, %after_bb286.us ], [ %3992, %after_bb283.us ], [ %3992, %after_bb280.us ], [ %3992, %after_bb277.us ], [ %3992, %after_bb274.us ], [ %3992, %after_bb271.us ], [ %3992, %after_bb268.us ], [ %3992, %after_bb265.us ], [ %3992, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4316 = phi i8 [ %4002, %true_bb434.us ], [ %4002, %after_bb433.us ], [ %4002, %after_bb430.us ], [ %4002, %after_bb427.us ], [ %4002, %after_bb424.us ], [ %4002, %after_bb421.us ], [ %4002, %after_bb418.us ], [ %4002, %after_bb415.us ], [ %4002, %after_bb412.us ], [ %4002, %after_bb409.us ], [ %4002, %after_bb406.us ], [ %4002, %after_bb403.us ], [ %4002, %after_bb400.us ], [ %4002, %after_bb397.us ], [ %4002, %after_bb394.us ], [ %4002, %after_bb391.us ], [ %4002, %after_bb388.us ], [ %4002, %after_bb385.us ], [ %4002, %after_bb382.us ], [ %4002, %after_bb379.us ], [ %4002, %after_bb376.us ], [ %4002, %after_bb373.us ], [ %4002, %after_bb370.us ], [ %4002, %after_bb367.us ], [ %4002, %after_bb364.us ], [ %4002, %after_bb361.us ], [ %4002, %after_bb358.us ], [ %4002, %after_bb355.us ], [ %4002, %after_bb352.us ], [ %4002, %after_bb349.us ], [ %4002, %after_bb346.us ], [ %4002, %after_bb343.us ], [ %4002, %after_bb340.us ], [ %4002, %after_bb337.us ], [ %4002, %after_bb334.us ], [ %4002, %after_bb331.us ], [ %4002, %after_bb328.us ], [ %4002, %after_bb325.us ], [ %4002, %after_bb322.us ], [ %4002, %after_bb319.us ], [ %4002, %after_bb316.us ], [ %4002, %after_bb313.us ], [ %4002, %after_bb310.us ], [ %4002, %after_bb307.us ], [ %4002, %after_bb304.us ], [ %4002, %after_bb301.us ], [ %4002, %after_bb298.us ], [ %4002, %after_bb295.us ], [ %4002, %after_bb292.us ], [ %4002, %after_bb289.us ], [ %4002, %after_bb286.us ], [ %4002, %after_bb283.us ], [ %4002, %after_bb280.us ], [ %4002, %after_bb277.us ], [ %4002, %after_bb274.us ], [ %4002, %after_bb271.us ], [ %4002, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4317 = phi i8 [ %4012, %true_bb434.us ], [ %4012, %after_bb433.us ], [ %4012, %after_bb430.us ], [ %4012, %after_bb427.us ], [ %4012, %after_bb424.us ], [ %4012, %after_bb421.us ], [ %4012, %after_bb418.us ], [ %4012, %after_bb415.us ], [ %4012, %after_bb412.us ], [ %4012, %after_bb409.us ], [ %4012, %after_bb406.us ], [ %4012, %after_bb403.us ], [ %4012, %after_bb400.us ], [ %4012, %after_bb397.us ], [ %4012, %after_bb394.us ], [ %4012, %after_bb391.us ], [ %4012, %after_bb388.us ], [ %4012, %after_bb385.us ], [ %4012, %after_bb382.us ], [ %4012, %after_bb379.us ], [ %4012, %after_bb376.us ], [ %4012, %after_bb373.us ], [ %4012, %after_bb370.us ], [ %4012, %after_bb367.us ], [ %4012, %after_bb364.us ], [ %4012, %after_bb361.us ], [ %4012, %after_bb358.us ], [ %4012, %after_bb355.us ], [ %4012, %after_bb352.us ], [ %4012, %after_bb349.us ], [ %4012, %after_bb346.us ], [ %4012, %after_bb343.us ], [ %4012, %after_bb340.us ], [ %4012, %after_bb337.us ], [ %4012, %after_bb334.us ], [ %4012, %after_bb331.us ], [ %4012, %after_bb328.us ], [ %4012, %after_bb325.us ], [ %4012, %after_bb322.us ], [ %4012, %after_bb319.us ], [ %4012, %after_bb316.us ], [ %4012, %after_bb313.us ], [ %4012, %after_bb310.us ], [ %4012, %after_bb307.us ], [ %4012, %after_bb304.us ], [ %4012, %after_bb301.us ], [ %4012, %after_bb298.us ], [ %4012, %after_bb295.us ], [ %4012, %after_bb292.us ], [ %4012, %after_bb289.us ], [ %4012, %after_bb286.us ], [ %4012, %after_bb283.us ], [ %4012, %after_bb280.us ], [ %4012, %after_bb277.us ], [ %4012, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4318 = phi i8 [ %4022, %true_bb434.us ], [ %4022, %after_bb433.us ], [ %4022, %after_bb430.us ], [ %4022, %after_bb427.us ], [ %4022, %after_bb424.us ], [ %4022, %after_bb421.us ], [ %4022, %after_bb418.us ], [ %4022, %after_bb415.us ], [ %4022, %after_bb412.us ], [ %4022, %after_bb409.us ], [ %4022, %after_bb406.us ], [ %4022, %after_bb403.us ], [ %4022, %after_bb400.us ], [ %4022, %after_bb397.us ], [ %4022, %after_bb394.us ], [ %4022, %after_bb391.us ], [ %4022, %after_bb388.us ], [ %4022, %after_bb385.us ], [ %4022, %after_bb382.us ], [ %4022, %after_bb379.us ], [ %4022, %after_bb376.us ], [ %4022, %after_bb373.us ], [ %4022, %after_bb370.us ], [ %4022, %after_bb367.us ], [ %4022, %after_bb364.us ], [ %4022, %after_bb361.us ], [ %4022, %after_bb358.us ], [ %4022, %after_bb355.us ], [ %4022, %after_bb352.us ], [ %4022, %after_bb349.us ], [ %4022, %after_bb346.us ], [ %4022, %after_bb343.us ], [ %4022, %after_bb340.us ], [ %4022, %after_bb337.us ], [ %4022, %after_bb334.us ], [ %4022, %after_bb331.us ], [ %4022, %after_bb328.us ], [ %4022, %after_bb325.us ], [ %4022, %after_bb322.us ], [ %4022, %after_bb319.us ], [ %4022, %after_bb316.us ], [ %4022, %after_bb313.us ], [ %4022, %after_bb310.us ], [ %4022, %after_bb307.us ], [ %4022, %after_bb304.us ], [ %4022, %after_bb301.us ], [ %4022, %after_bb298.us ], [ %4022, %after_bb295.us ], [ %4022, %after_bb292.us ], [ %4022, %after_bb289.us ], [ %4022, %after_bb286.us ], [ %4022, %after_bb283.us ], [ %4022, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4319 = phi i8 [ %4032, %true_bb434.us ], [ %4032, %after_bb433.us ], [ %4032, %after_bb430.us ], [ %4032, %after_bb427.us ], [ %4032, %after_bb424.us ], [ %4032, %after_bb421.us ], [ %4032, %after_bb418.us ], [ %4032, %after_bb415.us ], [ %4032, %after_bb412.us ], [ %4032, %after_bb409.us ], [ %4032, %after_bb406.us ], [ %4032, %after_bb403.us ], [ %4032, %after_bb400.us ], [ %4032, %after_bb397.us ], [ %4032, %after_bb394.us ], [ %4032, %after_bb391.us ], [ %4032, %after_bb388.us ], [ %4032, %after_bb385.us ], [ %4032, %after_bb382.us ], [ %4032, %after_bb379.us ], [ %4032, %after_bb376.us ], [ %4032, %after_bb373.us ], [ %4032, %after_bb370.us ], [ %4032, %after_bb367.us ], [ %4032, %after_bb364.us ], [ %4032, %after_bb361.us ], [ %4032, %after_bb358.us ], [ %4032, %after_bb355.us ], [ %4032, %after_bb352.us ], [ %4032, %after_bb349.us ], [ %4032, %after_bb346.us ], [ %4032, %after_bb343.us ], [ %4032, %after_bb340.us ], [ %4032, %after_bb337.us ], [ %4032, %after_bb334.us ], [ %4032, %after_bb331.us ], [ %4032, %after_bb328.us ], [ %4032, %after_bb325.us ], [ %4032, %after_bb322.us ], [ %4032, %after_bb319.us ], [ %4032, %after_bb316.us ], [ %4032, %after_bb313.us ], [ %4032, %after_bb310.us ], [ %4032, %after_bb307.us ], [ %4032, %after_bb304.us ], [ %4032, %after_bb301.us ], [ %4032, %after_bb298.us ], [ %4032, %after_bb295.us ], [ %4032, %after_bb292.us ], [ %4032, %after_bb289.us ], [ %4032, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4320 = phi i8 [ %4042, %true_bb434.us ], [ %4042, %after_bb433.us ], [ %4042, %after_bb430.us ], [ %4042, %after_bb427.us ], [ %4042, %after_bb424.us ], [ %4042, %after_bb421.us ], [ %4042, %after_bb418.us ], [ %4042, %after_bb415.us ], [ %4042, %after_bb412.us ], [ %4042, %after_bb409.us ], [ %4042, %after_bb406.us ], [ %4042, %after_bb403.us ], [ %4042, %after_bb400.us ], [ %4042, %after_bb397.us ], [ %4042, %after_bb394.us ], [ %4042, %after_bb391.us ], [ %4042, %after_bb388.us ], [ %4042, %after_bb385.us ], [ %4042, %after_bb382.us ], [ %4042, %after_bb379.us ], [ %4042, %after_bb376.us ], [ %4042, %after_bb373.us ], [ %4042, %after_bb370.us ], [ %4042, %after_bb367.us ], [ %4042, %after_bb364.us ], [ %4042, %after_bb361.us ], [ %4042, %after_bb358.us ], [ %4042, %after_bb355.us ], [ %4042, %after_bb352.us ], [ %4042, %after_bb349.us ], [ %4042, %after_bb346.us ], [ %4042, %after_bb343.us ], [ %4042, %after_bb340.us ], [ %4042, %after_bb337.us ], [ %4042, %after_bb334.us ], [ %4042, %after_bb331.us ], [ %4042, %after_bb328.us ], [ %4042, %after_bb325.us ], [ %4042, %after_bb322.us ], [ %4042, %after_bb319.us ], [ %4042, %after_bb316.us ], [ %4042, %after_bb313.us ], [ %4042, %after_bb310.us ], [ %4042, %after_bb307.us ], [ %4042, %after_bb304.us ], [ %4042, %after_bb301.us ], [ %4042, %after_bb298.us ], [ %4042, %after_bb295.us ], [ %4042, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4321 = phi i8 [ %4052, %true_bb434.us ], [ %4052, %after_bb433.us ], [ %4052, %after_bb430.us ], [ %4052, %after_bb427.us ], [ %4052, %after_bb424.us ], [ %4052, %after_bb421.us ], [ %4052, %after_bb418.us ], [ %4052, %after_bb415.us ], [ %4052, %after_bb412.us ], [ %4052, %after_bb409.us ], [ %4052, %after_bb406.us ], [ %4052, %after_bb403.us ], [ %4052, %after_bb400.us ], [ %4052, %after_bb397.us ], [ %4052, %after_bb394.us ], [ %4052, %after_bb391.us ], [ %4052, %after_bb388.us ], [ %4052, %after_bb385.us ], [ %4052, %after_bb382.us ], [ %4052, %after_bb379.us ], [ %4052, %after_bb376.us ], [ %4052, %after_bb373.us ], [ %4052, %after_bb370.us ], [ %4052, %after_bb367.us ], [ %4052, %after_bb364.us ], [ %4052, %after_bb361.us ], [ %4052, %after_bb358.us ], [ %4052, %after_bb355.us ], [ %4052, %after_bb352.us ], [ %4052, %after_bb349.us ], [ %4052, %after_bb346.us ], [ %4052, %after_bb343.us ], [ %4052, %after_bb340.us ], [ %4052, %after_bb337.us ], [ %4052, %after_bb334.us ], [ %4052, %after_bb331.us ], [ %4052, %after_bb328.us ], [ %4052, %after_bb325.us ], [ %4052, %after_bb322.us ], [ %4052, %after_bb319.us ], [ %4052, %after_bb316.us ], [ %4052, %after_bb313.us ], [ %4052, %after_bb310.us ], [ %4052, %after_bb307.us ], [ %4052, %after_bb304.us ], [ %4052, %after_bb301.us ], [ %4052, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4322 = phi i8 [ %4062, %true_bb434.us ], [ %4062, %after_bb433.us ], [ %4062, %after_bb430.us ], [ %4062, %after_bb427.us ], [ %4062, %after_bb424.us ], [ %4062, %after_bb421.us ], [ %4062, %after_bb418.us ], [ %4062, %after_bb415.us ], [ %4062, %after_bb412.us ], [ %4062, %after_bb409.us ], [ %4062, %after_bb406.us ], [ %4062, %after_bb403.us ], [ %4062, %after_bb400.us ], [ %4062, %after_bb397.us ], [ %4062, %after_bb394.us ], [ %4062, %after_bb391.us ], [ %4062, %after_bb388.us ], [ %4062, %after_bb385.us ], [ %4062, %after_bb382.us ], [ %4062, %after_bb379.us ], [ %4062, %after_bb376.us ], [ %4062, %after_bb373.us ], [ %4062, %after_bb370.us ], [ %4062, %after_bb367.us ], [ %4062, %after_bb364.us ], [ %4062, %after_bb361.us ], [ %4062, %after_bb358.us ], [ %4062, %after_bb355.us ], [ %4062, %after_bb352.us ], [ %4062, %after_bb349.us ], [ %4062, %after_bb346.us ], [ %4062, %after_bb343.us ], [ %4062, %after_bb340.us ], [ %4062, %after_bb337.us ], [ %4062, %after_bb334.us ], [ %4062, %after_bb331.us ], [ %4062, %after_bb328.us ], [ %4062, %after_bb325.us ], [ %4062, %after_bb322.us ], [ %4062, %after_bb319.us ], [ %4062, %after_bb316.us ], [ %4062, %after_bb313.us ], [ %4062, %after_bb310.us ], [ %4062, %after_bb307.us ], [ %4062, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4323 = phi i8 [ %4072, %true_bb434.us ], [ %4072, %after_bb433.us ], [ %4072, %after_bb430.us ], [ %4072, %after_bb427.us ], [ %4072, %after_bb424.us ], [ %4072, %after_bb421.us ], [ %4072, %after_bb418.us ], [ %4072, %after_bb415.us ], [ %4072, %after_bb412.us ], [ %4072, %after_bb409.us ], [ %4072, %after_bb406.us ], [ %4072, %after_bb403.us ], [ %4072, %after_bb400.us ], [ %4072, %after_bb397.us ], [ %4072, %after_bb394.us ], [ %4072, %after_bb391.us ], [ %4072, %after_bb388.us ], [ %4072, %after_bb385.us ], [ %4072, %after_bb382.us ], [ %4072, %after_bb379.us ], [ %4072, %after_bb376.us ], [ %4072, %after_bb373.us ], [ %4072, %after_bb370.us ], [ %4072, %after_bb367.us ], [ %4072, %after_bb364.us ], [ %4072, %after_bb361.us ], [ %4072, %after_bb358.us ], [ %4072, %after_bb355.us ], [ %4072, %after_bb352.us ], [ %4072, %after_bb349.us ], [ %4072, %after_bb346.us ], [ %4072, %after_bb343.us ], [ %4072, %after_bb340.us ], [ %4072, %after_bb337.us ], [ %4072, %after_bb334.us ], [ %4072, %after_bb331.us ], [ %4072, %after_bb328.us ], [ %4072, %after_bb325.us ], [ %4072, %after_bb322.us ], [ %4072, %after_bb319.us ], [ %4072, %after_bb316.us ], [ %4072, %after_bb313.us ], [ %4072, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4324 = phi i8 [ %4082, %true_bb434.us ], [ %4082, %after_bb433.us ], [ %4082, %after_bb430.us ], [ %4082, %after_bb427.us ], [ %4082, %after_bb424.us ], [ %4082, %after_bb421.us ], [ %4082, %after_bb418.us ], [ %4082, %after_bb415.us ], [ %4082, %after_bb412.us ], [ %4082, %after_bb409.us ], [ %4082, %after_bb406.us ], [ %4082, %after_bb403.us ], [ %4082, %after_bb400.us ], [ %4082, %after_bb397.us ], [ %4082, %after_bb394.us ], [ %4082, %after_bb391.us ], [ %4082, %after_bb388.us ], [ %4082, %after_bb385.us ], [ %4082, %after_bb382.us ], [ %4082, %after_bb379.us ], [ %4082, %after_bb376.us ], [ %4082, %after_bb373.us ], [ %4082, %after_bb370.us ], [ %4082, %after_bb367.us ], [ %4082, %after_bb364.us ], [ %4082, %after_bb361.us ], [ %4082, %after_bb358.us ], [ %4082, %after_bb355.us ], [ %4082, %after_bb352.us ], [ %4082, %after_bb349.us ], [ %4082, %after_bb346.us ], [ %4082, %after_bb343.us ], [ %4082, %after_bb340.us ], [ %4082, %after_bb337.us ], [ %4082, %after_bb334.us ], [ %4082, %after_bb331.us ], [ %4082, %after_bb328.us ], [ %4082, %after_bb325.us ], [ %4082, %after_bb322.us ], [ %4082, %after_bb319.us ], [ %4082, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4325 = phi i8 [ %4092, %true_bb434.us ], [ %4092, %after_bb433.us ], [ %4092, %after_bb430.us ], [ %4092, %after_bb427.us ], [ %4092, %after_bb424.us ], [ %4092, %after_bb421.us ], [ %4092, %after_bb418.us ], [ %4092, %after_bb415.us ], [ %4092, %after_bb412.us ], [ %4092, %after_bb409.us ], [ %4092, %after_bb406.us ], [ %4092, %after_bb403.us ], [ %4092, %after_bb400.us ], [ %4092, %after_bb397.us ], [ %4092, %after_bb394.us ], [ %4092, %after_bb391.us ], [ %4092, %after_bb388.us ], [ %4092, %after_bb385.us ], [ %4092, %after_bb382.us ], [ %4092, %after_bb379.us ], [ %4092, %after_bb376.us ], [ %4092, %after_bb373.us ], [ %4092, %after_bb370.us ], [ %4092, %after_bb367.us ], [ %4092, %after_bb364.us ], [ %4092, %after_bb361.us ], [ %4092, %after_bb358.us ], [ %4092, %after_bb355.us ], [ %4092, %after_bb352.us ], [ %4092, %after_bb349.us ], [ %4092, %after_bb346.us ], [ %4092, %after_bb343.us ], [ %4092, %after_bb340.us ], [ %4092, %after_bb337.us ], [ %4092, %after_bb334.us ], [ %4092, %after_bb331.us ], [ %4092, %after_bb328.us ], [ %4092, %after_bb325.us ], [ %4092, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4326 = phi i8 [ %4102, %true_bb434.us ], [ %4102, %after_bb433.us ], [ %4102, %after_bb430.us ], [ %4102, %after_bb427.us ], [ %4102, %after_bb424.us ], [ %4102, %after_bb421.us ], [ %4102, %after_bb418.us ], [ %4102, %after_bb415.us ], [ %4102, %after_bb412.us ], [ %4102, %after_bb409.us ], [ %4102, %after_bb406.us ], [ %4102, %after_bb403.us ], [ %4102, %after_bb400.us ], [ %4102, %after_bb397.us ], [ %4102, %after_bb394.us ], [ %4102, %after_bb391.us ], [ %4102, %after_bb388.us ], [ %4102, %after_bb385.us ], [ %4102, %after_bb382.us ], [ %4102, %after_bb379.us ], [ %4102, %after_bb376.us ], [ %4102, %after_bb373.us ], [ %4102, %after_bb370.us ], [ %4102, %after_bb367.us ], [ %4102, %after_bb364.us ], [ %4102, %after_bb361.us ], [ %4102, %after_bb358.us ], [ %4102, %after_bb355.us ], [ %4102, %after_bb352.us ], [ %4102, %after_bb349.us ], [ %4102, %after_bb346.us ], [ %4102, %after_bb343.us ], [ %4102, %after_bb340.us ], [ %4102, %after_bb337.us ], [ %4102, %after_bb334.us ], [ %4102, %after_bb331.us ], [ %4102, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4327 = phi i8 [ %4112, %true_bb434.us ], [ %4112, %after_bb433.us ], [ %4112, %after_bb430.us ], [ %4112, %after_bb427.us ], [ %4112, %after_bb424.us ], [ %4112, %after_bb421.us ], [ %4112, %after_bb418.us ], [ %4112, %after_bb415.us ], [ %4112, %after_bb412.us ], [ %4112, %after_bb409.us ], [ %4112, %after_bb406.us ], [ %4112, %after_bb403.us ], [ %4112, %after_bb400.us ], [ %4112, %after_bb397.us ], [ %4112, %after_bb394.us ], [ %4112, %after_bb391.us ], [ %4112, %after_bb388.us ], [ %4112, %after_bb385.us ], [ %4112, %after_bb382.us ], [ %4112, %after_bb379.us ], [ %4112, %after_bb376.us ], [ %4112, %after_bb373.us ], [ %4112, %after_bb370.us ], [ %4112, %after_bb367.us ], [ %4112, %after_bb364.us ], [ %4112, %after_bb361.us ], [ %4112, %after_bb358.us ], [ %4112, %after_bb355.us ], [ %4112, %after_bb352.us ], [ %4112, %after_bb349.us ], [ %4112, %after_bb346.us ], [ %4112, %after_bb343.us ], [ %4112, %after_bb340.us ], [ %4112, %after_bb337.us ], [ %4112, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4328 = phi i8 [ %4122, %true_bb434.us ], [ %4122, %after_bb433.us ], [ %4122, %after_bb430.us ], [ %4122, %after_bb427.us ], [ %4122, %after_bb424.us ], [ %4122, %after_bb421.us ], [ %4122, %after_bb418.us ], [ %4122, %after_bb415.us ], [ %4122, %after_bb412.us ], [ %4122, %after_bb409.us ], [ %4122, %after_bb406.us ], [ %4122, %after_bb403.us ], [ %4122, %after_bb400.us ], [ %4122, %after_bb397.us ], [ %4122, %after_bb394.us ], [ %4122, %after_bb391.us ], [ %4122, %after_bb388.us ], [ %4122, %after_bb385.us ], [ %4122, %after_bb382.us ], [ %4122, %after_bb379.us ], [ %4122, %after_bb376.us ], [ %4122, %after_bb373.us ], [ %4122, %after_bb370.us ], [ %4122, %after_bb367.us ], [ %4122, %after_bb364.us ], [ %4122, %after_bb361.us ], [ %4122, %after_bb358.us ], [ %4122, %after_bb355.us ], [ %4122, %after_bb352.us ], [ %4122, %after_bb349.us ], [ %4122, %after_bb346.us ], [ %4122, %after_bb343.us ], [ %4122, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4329 = phi i8 [ %4132, %true_bb434.us ], [ %4132, %after_bb433.us ], [ %4132, %after_bb430.us ], [ %4132, %after_bb427.us ], [ %4132, %after_bb424.us ], [ %4132, %after_bb421.us ], [ %4132, %after_bb418.us ], [ %4132, %after_bb415.us ], [ %4132, %after_bb412.us ], [ %4132, %after_bb409.us ], [ %4132, %after_bb406.us ], [ %4132, %after_bb403.us ], [ %4132, %after_bb400.us ], [ %4132, %after_bb397.us ], [ %4132, %after_bb394.us ], [ %4132, %after_bb391.us ], [ %4132, %after_bb388.us ], [ %4132, %after_bb385.us ], [ %4132, %after_bb382.us ], [ %4132, %after_bb379.us ], [ %4132, %after_bb376.us ], [ %4132, %after_bb373.us ], [ %4132, %after_bb370.us ], [ %4132, %after_bb367.us ], [ %4132, %after_bb364.us ], [ %4132, %after_bb361.us ], [ %4132, %after_bb358.us ], [ %4132, %after_bb355.us ], [ %4132, %after_bb352.us ], [ %4132, %after_bb349.us ], [ %4132, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4330 = phi i8 [ %4142, %true_bb434.us ], [ %4142, %after_bb433.us ], [ %4142, %after_bb430.us ], [ %4142, %after_bb427.us ], [ %4142, %after_bb424.us ], [ %4142, %after_bb421.us ], [ %4142, %after_bb418.us ], [ %4142, %after_bb415.us ], [ %4142, %after_bb412.us ], [ %4142, %after_bb409.us ], [ %4142, %after_bb406.us ], [ %4142, %after_bb403.us ], [ %4142, %after_bb400.us ], [ %4142, %after_bb397.us ], [ %4142, %after_bb394.us ], [ %4142, %after_bb391.us ], [ %4142, %after_bb388.us ], [ %4142, %after_bb385.us ], [ %4142, %after_bb382.us ], [ %4142, %after_bb379.us ], [ %4142, %after_bb376.us ], [ %4142, %after_bb373.us ], [ %4142, %after_bb370.us ], [ %4142, %after_bb367.us ], [ %4142, %after_bb364.us ], [ %4142, %after_bb361.us ], [ %4142, %after_bb358.us ], [ %4142, %after_bb355.us ], [ %4142, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4331 = phi i8 [ %4152, %true_bb434.us ], [ %4152, %after_bb433.us ], [ %4152, %after_bb430.us ], [ %4152, %after_bb427.us ], [ %4152, %after_bb424.us ], [ %4152, %after_bb421.us ], [ %4152, %after_bb418.us ], [ %4152, %after_bb415.us ], [ %4152, %after_bb412.us ], [ %4152, %after_bb409.us ], [ %4152, %after_bb406.us ], [ %4152, %after_bb403.us ], [ %4152, %after_bb400.us ], [ %4152, %after_bb397.us ], [ %4152, %after_bb394.us ], [ %4152, %after_bb391.us ], [ %4152, %after_bb388.us ], [ %4152, %after_bb385.us ], [ %4152, %after_bb382.us ], [ %4152, %after_bb379.us ], [ %4152, %after_bb376.us ], [ %4152, %after_bb373.us ], [ %4152, %after_bb370.us ], [ %4152, %after_bb367.us ], [ %4152, %after_bb364.us ], [ %4152, %after_bb361.us ], [ %4152, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4332 = phi i8 [ %4162, %true_bb434.us ], [ %4162, %after_bb433.us ], [ %4162, %after_bb430.us ], [ %4162, %after_bb427.us ], [ %4162, %after_bb424.us ], [ %4162, %after_bb421.us ], [ %4162, %after_bb418.us ], [ %4162, %after_bb415.us ], [ %4162, %after_bb412.us ], [ %4162, %after_bb409.us ], [ %4162, %after_bb406.us ], [ %4162, %after_bb403.us ], [ %4162, %after_bb400.us ], [ %4162, %after_bb397.us ], [ %4162, %after_bb394.us ], [ %4162, %after_bb391.us ], [ %4162, %after_bb388.us ], [ %4162, %after_bb385.us ], [ %4162, %after_bb382.us ], [ %4162, %after_bb379.us ], [ %4162, %after_bb376.us ], [ %4162, %after_bb373.us ], [ %4162, %after_bb370.us ], [ %4162, %after_bb367.us ], [ %4162, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4333 = phi i8 [ %4172, %true_bb434.us ], [ %4172, %after_bb433.us ], [ %4172, %after_bb430.us ], [ %4172, %after_bb427.us ], [ %4172, %after_bb424.us ], [ %4172, %after_bb421.us ], [ %4172, %after_bb418.us ], [ %4172, %after_bb415.us ], [ %4172, %after_bb412.us ], [ %4172, %after_bb409.us ], [ %4172, %after_bb406.us ], [ %4172, %after_bb403.us ], [ %4172, %after_bb400.us ], [ %4172, %after_bb397.us ], [ %4172, %after_bb394.us ], [ %4172, %after_bb391.us ], [ %4172, %after_bb388.us ], [ %4172, %after_bb385.us ], [ %4172, %after_bb382.us ], [ %4172, %after_bb379.us ], [ %4172, %after_bb376.us ], [ %4172, %after_bb373.us ], [ %4172, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4334 = phi i8 [ %4182, %true_bb434.us ], [ %4182, %after_bb433.us ], [ %4182, %after_bb430.us ], [ %4182, %after_bb427.us ], [ %4182, %after_bb424.us ], [ %4182, %after_bb421.us ], [ %4182, %after_bb418.us ], [ %4182, %after_bb415.us ], [ %4182, %after_bb412.us ], [ %4182, %after_bb409.us ], [ %4182, %after_bb406.us ], [ %4182, %after_bb403.us ], [ %4182, %after_bb400.us ], [ %4182, %after_bb397.us ], [ %4182, %after_bb394.us ], [ %4182, %after_bb391.us ], [ %4182, %after_bb388.us ], [ %4182, %after_bb385.us ], [ %4182, %after_bb382.us ], [ %4182, %after_bb379.us ], [ %4182, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4335 = phi i8 [ %4192, %true_bb434.us ], [ %4192, %after_bb433.us ], [ %4192, %after_bb430.us ], [ %4192, %after_bb427.us ], [ %4192, %after_bb424.us ], [ %4192, %after_bb421.us ], [ %4192, %after_bb418.us ], [ %4192, %after_bb415.us ], [ %4192, %after_bb412.us ], [ %4192, %after_bb409.us ], [ %4192, %after_bb406.us ], [ %4192, %after_bb403.us ], [ %4192, %after_bb400.us ], [ %4192, %after_bb397.us ], [ %4192, %after_bb394.us ], [ %4192, %after_bb391.us ], [ %4192, %after_bb388.us ], [ %4192, %after_bb385.us ], [ %4192, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4336 = phi i8 [ %4202, %true_bb434.us ], [ %4202, %after_bb433.us ], [ %4202, %after_bb430.us ], [ %4202, %after_bb427.us ], [ %4202, %after_bb424.us ], [ %4202, %after_bb421.us ], [ %4202, %after_bb418.us ], [ %4202, %after_bb415.us ], [ %4202, %after_bb412.us ], [ %4202, %after_bb409.us ], [ %4202, %after_bb406.us ], [ %4202, %after_bb403.us ], [ %4202, %after_bb400.us ], [ %4202, %after_bb397.us ], [ %4202, %after_bb394.us ], [ %4202, %after_bb391.us ], [ %4202, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4337 = phi i8 [ %4212, %true_bb434.us ], [ %4212, %after_bb433.us ], [ %4212, %after_bb430.us ], [ %4212, %after_bb427.us ], [ %4212, %after_bb424.us ], [ %4212, %after_bb421.us ], [ %4212, %after_bb418.us ], [ %4212, %after_bb415.us ], [ %4212, %after_bb412.us ], [ %4212, %after_bb409.us ], [ %4212, %after_bb406.us ], [ %4212, %after_bb403.us ], [ %4212, %after_bb400.us ], [ %4212, %after_bb397.us ], [ %4212, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4338 = phi i8 [ %4222, %true_bb434.us ], [ %4222, %after_bb433.us ], [ %4222, %after_bb430.us ], [ %4222, %after_bb427.us ], [ %4222, %after_bb424.us ], [ %4222, %after_bb421.us ], [ %4222, %after_bb418.us ], [ %4222, %after_bb415.us ], [ %4222, %after_bb412.us ], [ %4222, %after_bb409.us ], [ %4222, %after_bb406.us ], [ %4222, %after_bb403.us ], [ %4222, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4339 = phi i8 [ %4232, %true_bb434.us ], [ %4232, %after_bb433.us ], [ %4232, %after_bb430.us ], [ %4232, %after_bb427.us ], [ %4232, %after_bb424.us ], [ %4232, %after_bb421.us ], [ %4232, %after_bb418.us ], [ %4232, %after_bb415.us ], [ %4232, %after_bb412.us ], [ %4232, %after_bb409.us ], [ %4232, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4340 = phi i8 [ %4242, %true_bb434.us ], [ %4242, %after_bb433.us ], [ %4242, %after_bb430.us ], [ %4242, %after_bb427.us ], [ %4242, %after_bb424.us ], [ %4242, %after_bb421.us ], [ %4242, %after_bb418.us ], [ %4242, %after_bb415.us ], [ %4242, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4341 = phi i8 [ %4252, %true_bb434.us ], [ %4252, %after_bb433.us ], [ %4252, %after_bb430.us ], [ %4252, %after_bb427.us ], [ %4252, %after_bb424.us ], [ %4252, %after_bb421.us ], [ %4252, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4342 = phi i8 [ %4262, %true_bb434.us ], [ %4262, %after_bb433.us ], [ %4262, %after_bb430.us ], [ %4262, %after_bb427.us ], [ %4262, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4343 = phi i8 [ %4272, %true_bb434.us ], [ %4272, %after_bb433.us ], [ %4272, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4344 = phi i8 [ %4282, %true_bb434.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  br i1 %t2398, label %true_bb437.us, label %after_bb439.us

true_bb437.us:                                    ; preds = %after_bb436.us
  %4345 = sdiv i32 63, %3817
  %4346 = and i32 %4345, %3821
  %4347 = add nsw i32 %4346, %3972
  %4348 = getelementptr inbounds i8, i8* %8, i32 %4347
  %4349 = load i8, i8* %4348, align 1, !tbaa !125
  br label %after_bb439.us

after_bb439.us:                                   ; preds = %true_bb437.us, %after_bb436.us
  %4350 = phi i8 [ %4349, %true_bb437.us ], [ 0, %after_bb436.us ]
  br i1 %t2399, label %after_bb442.us, label %after_bb631.us

after_bb442.us:                                   ; preds = %after_bb439.us
  %4351 = sdiv i32 64, %3817
  %4352 = and i32 %4351, %3821
  %4353 = add nsw i32 %4352, %3972
  %4354 = getelementptr inbounds i8, i8* %8, i32 %4353
  %4355 = load i8, i8* %4354, align 1, !tbaa !125
  br i1 %.not4700, label %after_bb631.us, label %after_bb445.us

after_bb445.us:                                   ; preds = %after_bb442.us
  %4356 = sdiv i32 65, %3817
  %4357 = and i32 %4356, %3821
  %4358 = add nsw i32 %4357, %3972
  %4359 = getelementptr inbounds i8, i8* %8, i32 %4358
  %4360 = load i8, i8* %4359, align 1, !tbaa !125
  br i1 %3853, label %after_bb448.us, label %after_bb631.us

after_bb448.us:                                   ; preds = %after_bb445.us
  %4361 = sdiv i32 66, %3817
  %4362 = and i32 %4361, %3821
  %4363 = add nsw i32 %4362, %3972
  %4364 = getelementptr inbounds i8, i8* %8, i32 %4363
  %4365 = load i8, i8* %4364, align 1, !tbaa !125
  br i1 %.not4701, label %after_bb631.us, label %after_bb451.us

after_bb451.us:                                   ; preds = %after_bb448.us
  %4366 = sdiv i32 67, %3817
  %4367 = and i32 %4366, %3821
  %4368 = add nsw i32 %4367, %3972
  %4369 = getelementptr inbounds i8, i8* %8, i32 %4368
  %4370 = load i8, i8* %4369, align 1, !tbaa !125
  br i1 %3854, label %after_bb454.us, label %after_bb631.us

after_bb454.us:                                   ; preds = %after_bb451.us
  %4371 = sdiv i32 68, %3817
  %4372 = and i32 %4371, %3821
  %4373 = add nsw i32 %4372, %3972
  %4374 = getelementptr inbounds i8, i8* %8, i32 %4373
  %4375 = load i8, i8* %4374, align 1, !tbaa !125
  br i1 %.not4702, label %after_bb631.us, label %after_bb457.us

after_bb457.us:                                   ; preds = %after_bb454.us
  %4376 = sdiv i32 69, %3817
  %4377 = and i32 %4376, %3821
  %4378 = add nsw i32 %4377, %3972
  %4379 = getelementptr inbounds i8, i8* %8, i32 %4378
  %4380 = load i8, i8* %4379, align 1, !tbaa !125
  br i1 %3855, label %after_bb460.us, label %after_bb631.us

after_bb460.us:                                   ; preds = %after_bb457.us
  %4381 = sdiv i32 70, %3817
  %4382 = and i32 %4381, %3821
  %4383 = add nsw i32 %4382, %3972
  %4384 = getelementptr inbounds i8, i8* %8, i32 %4383
  %4385 = load i8, i8* %4384, align 1, !tbaa !125
  br i1 %.not4703, label %after_bb631.us, label %after_bb463.us

after_bb463.us:                                   ; preds = %after_bb460.us
  %4386 = sdiv i32 71, %3817
  %4387 = and i32 %4386, %3821
  %4388 = add nsw i32 %4387, %3972
  %4389 = getelementptr inbounds i8, i8* %8, i32 %4388
  %4390 = load i8, i8* %4389, align 1, !tbaa !125
  br i1 %3856, label %after_bb466.us, label %after_bb631.us

after_bb466.us:                                   ; preds = %after_bb463.us
  %4391 = sdiv i32 72, %3817
  %4392 = and i32 %4391, %3821
  %4393 = add nsw i32 %4392, %3972
  %4394 = getelementptr inbounds i8, i8* %8, i32 %4393
  %4395 = load i8, i8* %4394, align 1, !tbaa !125
  br i1 %.not4704, label %after_bb631.us, label %after_bb469.us

after_bb469.us:                                   ; preds = %after_bb466.us
  %4396 = sdiv i32 73, %3817
  %4397 = and i32 %4396, %3821
  %4398 = add nsw i32 %4397, %3972
  %4399 = getelementptr inbounds i8, i8* %8, i32 %4398
  %4400 = load i8, i8* %4399, align 1, !tbaa !125
  br i1 %3857, label %after_bb472.us, label %after_bb631.us

after_bb472.us:                                   ; preds = %after_bb469.us
  %4401 = sdiv i32 74, %3817
  %4402 = and i32 %4401, %3821
  %4403 = add nsw i32 %4402, %3972
  %4404 = getelementptr inbounds i8, i8* %8, i32 %4403
  %4405 = load i8, i8* %4404, align 1, !tbaa !125
  br i1 %.not4705, label %after_bb631.us, label %after_bb475.us

after_bb475.us:                                   ; preds = %after_bb472.us
  %4406 = sdiv i32 75, %3817
  %4407 = and i32 %4406, %3821
  %4408 = add nsw i32 %4407, %3972
  %4409 = getelementptr inbounds i8, i8* %8, i32 %4408
  %4410 = load i8, i8* %4409, align 1, !tbaa !125
  br i1 %3858, label %after_bb478.us, label %after_bb631.us

after_bb478.us:                                   ; preds = %after_bb475.us
  %4411 = sdiv i32 76, %3817
  %4412 = and i32 %4411, %3821
  %4413 = add nsw i32 %4412, %3972
  %4414 = getelementptr inbounds i8, i8* %8, i32 %4413
  %4415 = load i8, i8* %4414, align 1, !tbaa !125
  br i1 %.not4706, label %after_bb631.us, label %after_bb481.us

after_bb481.us:                                   ; preds = %after_bb478.us
  %4416 = sdiv i32 77, %3817
  %4417 = and i32 %4416, %3821
  %4418 = add nsw i32 %4417, %3972
  %4419 = getelementptr inbounds i8, i8* %8, i32 %4418
  %4420 = load i8, i8* %4419, align 1, !tbaa !125
  br i1 %3859, label %after_bb484.us, label %after_bb631.us

after_bb484.us:                                   ; preds = %after_bb481.us
  %4421 = sdiv i32 78, %3817
  %4422 = and i32 %4421, %3821
  %4423 = add nsw i32 %4422, %3972
  %4424 = getelementptr inbounds i8, i8* %8, i32 %4423
  %4425 = load i8, i8* %4424, align 1, !tbaa !125
  br i1 %.not4707, label %after_bb631.us, label %after_bb487.us

after_bb487.us:                                   ; preds = %after_bb484.us
  %4426 = sdiv i32 79, %3817
  %4427 = and i32 %4426, %3821
  %4428 = add nsw i32 %4427, %3972
  %4429 = getelementptr inbounds i8, i8* %8, i32 %4428
  %4430 = load i8, i8* %4429, align 1, !tbaa !125
  br i1 %3860, label %after_bb490.us, label %after_bb631.us

after_bb490.us:                                   ; preds = %after_bb487.us
  %4431 = sdiv i32 80, %3817
  %4432 = and i32 %4431, %3821
  %4433 = add nsw i32 %4432, %3972
  %4434 = getelementptr inbounds i8, i8* %8, i32 %4433
  %4435 = load i8, i8* %4434, align 1, !tbaa !125
  br i1 %.not4708, label %after_bb631.us, label %after_bb493.us

after_bb493.us:                                   ; preds = %after_bb490.us
  %4436 = sdiv i32 81, %3817
  %4437 = and i32 %4436, %3821
  %4438 = add nsw i32 %4437, %3972
  %4439 = getelementptr inbounds i8, i8* %8, i32 %4438
  %4440 = load i8, i8* %4439, align 1, !tbaa !125
  br i1 %3861, label %after_bb496.us, label %after_bb631.us

after_bb496.us:                                   ; preds = %after_bb493.us
  %4441 = sdiv i32 82, %3817
  %4442 = and i32 %4441, %3821
  %4443 = add nsw i32 %4442, %3972
  %4444 = getelementptr inbounds i8, i8* %8, i32 %4443
  %4445 = load i8, i8* %4444, align 1, !tbaa !125
  br i1 %.not4709, label %after_bb631.us, label %after_bb499.us

after_bb499.us:                                   ; preds = %after_bb496.us
  %4446 = sdiv i32 83, %3817
  %4447 = and i32 %4446, %3821
  %4448 = add nsw i32 %4447, %3972
  %4449 = getelementptr inbounds i8, i8* %8, i32 %4448
  %4450 = load i8, i8* %4449, align 1, !tbaa !125
  br i1 %3862, label %after_bb502.us, label %after_bb631.us

after_bb502.us:                                   ; preds = %after_bb499.us
  %4451 = sdiv i32 84, %3817
  %4452 = and i32 %4451, %3821
  %4453 = add nsw i32 %4452, %3972
  %4454 = getelementptr inbounds i8, i8* %8, i32 %4453
  %4455 = load i8, i8* %4454, align 1, !tbaa !125
  br i1 %.not4710, label %after_bb631.us, label %after_bb505.us

after_bb505.us:                                   ; preds = %after_bb502.us
  %4456 = sdiv i32 85, %3817
  %4457 = and i32 %4456, %3821
  %4458 = add nsw i32 %4457, %3972
  %4459 = getelementptr inbounds i8, i8* %8, i32 %4458
  %4460 = load i8, i8* %4459, align 1, !tbaa !125
  br i1 %3863, label %after_bb508.us, label %after_bb631.us

after_bb508.us:                                   ; preds = %after_bb505.us
  %4461 = sdiv i32 86, %3817
  %4462 = and i32 %4461, %3821
  %4463 = add nsw i32 %4462, %3972
  %4464 = getelementptr inbounds i8, i8* %8, i32 %4463
  %4465 = load i8, i8* %4464, align 1, !tbaa !125
  br i1 %.not4711, label %after_bb631.us, label %after_bb511.us

after_bb511.us:                                   ; preds = %after_bb508.us
  %4466 = sdiv i32 87, %3817
  %4467 = and i32 %4466, %3821
  %4468 = add nsw i32 %4467, %3972
  %4469 = getelementptr inbounds i8, i8* %8, i32 %4468
  %4470 = load i8, i8* %4469, align 1, !tbaa !125
  br i1 %3864, label %after_bb514.us, label %after_bb631.us

after_bb514.us:                                   ; preds = %after_bb511.us
  %4471 = sdiv i32 88, %3817
  %4472 = and i32 %4471, %3821
  %4473 = add nsw i32 %4472, %3972
  %4474 = getelementptr inbounds i8, i8* %8, i32 %4473
  %4475 = load i8, i8* %4474, align 1, !tbaa !125
  br i1 %.not4712, label %after_bb631.us, label %after_bb517.us

after_bb517.us:                                   ; preds = %after_bb514.us
  %4476 = sdiv i32 89, %3817
  %4477 = and i32 %4476, %3821
  %4478 = add nsw i32 %4477, %3972
  %4479 = getelementptr inbounds i8, i8* %8, i32 %4478
  %4480 = load i8, i8* %4479, align 1, !tbaa !125
  br i1 %3865, label %after_bb520.us, label %after_bb631.us

after_bb520.us:                                   ; preds = %after_bb517.us
  %4481 = sdiv i32 90, %3817
  %4482 = and i32 %4481, %3821
  %4483 = add nsw i32 %4482, %3972
  %4484 = getelementptr inbounds i8, i8* %8, i32 %4483
  %4485 = load i8, i8* %4484, align 1, !tbaa !125
  br i1 %.not4713, label %after_bb631.us, label %after_bb523.us

after_bb523.us:                                   ; preds = %after_bb520.us
  %4486 = sdiv i32 91, %3817
  %4487 = and i32 %4486, %3821
  %4488 = add nsw i32 %4487, %3972
  %4489 = getelementptr inbounds i8, i8* %8, i32 %4488
  %4490 = load i8, i8* %4489, align 1, !tbaa !125
  br i1 %3866, label %after_bb526.us, label %after_bb631.us

after_bb526.us:                                   ; preds = %after_bb523.us
  %4491 = sdiv i32 92, %3817
  %4492 = and i32 %4491, %3821
  %4493 = add nsw i32 %4492, %3972
  %4494 = getelementptr inbounds i8, i8* %8, i32 %4493
  %4495 = load i8, i8* %4494, align 1, !tbaa !125
  br i1 %.not4714, label %after_bb631.us, label %after_bb529.us

after_bb529.us:                                   ; preds = %after_bb526.us
  %4496 = sdiv i32 93, %3817
  %4497 = and i32 %4496, %3821
  %4498 = add nsw i32 %4497, %3972
  %4499 = getelementptr inbounds i8, i8* %8, i32 %4498
  %4500 = load i8, i8* %4499, align 1, !tbaa !125
  br i1 %3867, label %after_bb532.us, label %after_bb631.us

after_bb532.us:                                   ; preds = %after_bb529.us
  %4501 = sdiv i32 94, %3817
  %4502 = and i32 %4501, %3821
  %4503 = add nsw i32 %4502, %3972
  %4504 = getelementptr inbounds i8, i8* %8, i32 %4503
  %4505 = load i8, i8* %4504, align 1, !tbaa !125
  br i1 %.not4715, label %after_bb631.us, label %after_bb535.us

after_bb535.us:                                   ; preds = %after_bb532.us
  %4506 = sdiv i32 95, %3817
  %4507 = and i32 %4506, %3821
  %4508 = add nsw i32 %4507, %3972
  %4509 = getelementptr inbounds i8, i8* %8, i32 %4508
  %4510 = load i8, i8* %4509, align 1, !tbaa !125
  br i1 %3868, label %after_bb538.us, label %after_bb631.us

after_bb538.us:                                   ; preds = %after_bb535.us
  %4511 = sdiv i32 96, %3817
  %4512 = and i32 %4511, %3821
  %4513 = add nsw i32 %4512, %3972
  %4514 = getelementptr inbounds i8, i8* %8, i32 %4513
  %4515 = load i8, i8* %4514, align 1, !tbaa !125
  br i1 %.not4716, label %after_bb631.us, label %after_bb541.us

after_bb541.us:                                   ; preds = %after_bb538.us
  %4516 = sdiv i32 97, %3817
  %4517 = and i32 %4516, %3821
  %4518 = add nsw i32 %4517, %3972
  %4519 = getelementptr inbounds i8, i8* %8, i32 %4518
  %4520 = load i8, i8* %4519, align 1, !tbaa !125
  br i1 %3869, label %after_bb544.us, label %after_bb631.us

after_bb544.us:                                   ; preds = %after_bb541.us
  %4521 = sdiv i32 98, %3817
  %4522 = and i32 %4521, %3821
  %4523 = add nsw i32 %4522, %3972
  %4524 = getelementptr inbounds i8, i8* %8, i32 %4523
  %4525 = load i8, i8* %4524, align 1, !tbaa !125
  br i1 %.not4717, label %after_bb631.us, label %after_bb547.us

after_bb547.us:                                   ; preds = %after_bb544.us
  %4526 = sdiv i32 99, %3817
  %4527 = and i32 %4526, %3821
  %4528 = add nsw i32 %4527, %3972
  %4529 = getelementptr inbounds i8, i8* %8, i32 %4528
  %4530 = load i8, i8* %4529, align 1, !tbaa !125
  br i1 %3870, label %after_bb550.us, label %after_bb631.us

after_bb550.us:                                   ; preds = %after_bb547.us
  %4531 = sdiv i32 100, %3817
  %4532 = and i32 %4531, %3821
  %4533 = add nsw i32 %4532, %3972
  %4534 = getelementptr inbounds i8, i8* %8, i32 %4533
  %4535 = load i8, i8* %4534, align 1, !tbaa !125
  br i1 %.not4718, label %after_bb631.us, label %after_bb553.us

after_bb553.us:                                   ; preds = %after_bb550.us
  %4536 = sdiv i32 101, %3817
  %4537 = and i32 %4536, %3821
  %4538 = add nsw i32 %4537, %3972
  %4539 = getelementptr inbounds i8, i8* %8, i32 %4538
  %4540 = load i8, i8* %4539, align 1, !tbaa !125
  br i1 %3871, label %after_bb556.us, label %after_bb631.us

after_bb556.us:                                   ; preds = %after_bb553.us
  %4541 = sdiv i32 102, %3817
  %4542 = and i32 %4541, %3821
  %4543 = add nsw i32 %4542, %3972
  %4544 = getelementptr inbounds i8, i8* %8, i32 %4543
  %4545 = load i8, i8* %4544, align 1, !tbaa !125
  br i1 %.not4719, label %after_bb631.us, label %after_bb559.us

after_bb559.us:                                   ; preds = %after_bb556.us
  %4546 = sdiv i32 103, %3817
  %4547 = and i32 %4546, %3821
  %4548 = add nsw i32 %4547, %3972
  %4549 = getelementptr inbounds i8, i8* %8, i32 %4548
  %4550 = load i8, i8* %4549, align 1, !tbaa !125
  br i1 %3872, label %after_bb562.us, label %after_bb631.us

after_bb562.us:                                   ; preds = %after_bb559.us
  %4551 = sdiv i32 104, %3817
  %4552 = and i32 %4551, %3821
  %4553 = add nsw i32 %4552, %3972
  %4554 = getelementptr inbounds i8, i8* %8, i32 %4553
  %4555 = load i8, i8* %4554, align 1, !tbaa !125
  br i1 %.not4720, label %after_bb631.us, label %after_bb565.us

after_bb565.us:                                   ; preds = %after_bb562.us
  %4556 = sdiv i32 105, %3817
  %4557 = and i32 %4556, %3821
  %4558 = add nsw i32 %4557, %3972
  %4559 = getelementptr inbounds i8, i8* %8, i32 %4558
  %4560 = load i8, i8* %4559, align 1, !tbaa !125
  br i1 %3873, label %after_bb568.us, label %after_bb631.us

after_bb568.us:                                   ; preds = %after_bb565.us
  %4561 = sdiv i32 106, %3817
  %4562 = and i32 %4561, %3821
  %4563 = add nsw i32 %4562, %3972
  %4564 = getelementptr inbounds i8, i8* %8, i32 %4563
  %4565 = load i8, i8* %4564, align 1, !tbaa !125
  br i1 %.not4721, label %after_bb631.us, label %after_bb571.us

after_bb571.us:                                   ; preds = %after_bb568.us
  %4566 = sdiv i32 107, %3817
  %4567 = and i32 %4566, %3821
  %4568 = add nsw i32 %4567, %3972
  %4569 = getelementptr inbounds i8, i8* %8, i32 %4568
  %4570 = load i8, i8* %4569, align 1, !tbaa !125
  br i1 %3874, label %after_bb574.us, label %after_bb631.us

after_bb574.us:                                   ; preds = %after_bb571.us
  %4571 = sdiv i32 108, %3817
  %4572 = and i32 %4571, %3821
  %4573 = add nsw i32 %4572, %3972
  %4574 = getelementptr inbounds i8, i8* %8, i32 %4573
  %4575 = load i8, i8* %4574, align 1, !tbaa !125
  br i1 %.not4722, label %after_bb631.us, label %after_bb577.us

after_bb577.us:                                   ; preds = %after_bb574.us
  %4576 = sdiv i32 109, %3817
  %4577 = and i32 %4576, %3821
  %4578 = add nsw i32 %4577, %3972
  %4579 = getelementptr inbounds i8, i8* %8, i32 %4578
  %4580 = load i8, i8* %4579, align 1, !tbaa !125
  br i1 %3875, label %after_bb580.us, label %after_bb631.us

after_bb580.us:                                   ; preds = %after_bb577.us
  %4581 = sdiv i32 110, %3817
  %4582 = and i32 %4581, %3821
  %4583 = add nsw i32 %4582, %3972
  %4584 = getelementptr inbounds i8, i8* %8, i32 %4583
  %4585 = load i8, i8* %4584, align 1, !tbaa !125
  br i1 %.not4723, label %after_bb631.us, label %after_bb583.us

after_bb583.us:                                   ; preds = %after_bb580.us
  %4586 = sdiv i32 111, %3817
  %4587 = and i32 %4586, %3821
  %4588 = add nsw i32 %4587, %3972
  %4589 = getelementptr inbounds i8, i8* %8, i32 %4588
  %4590 = load i8, i8* %4589, align 1, !tbaa !125
  br i1 %3876, label %after_bb586.us, label %after_bb631.us

after_bb586.us:                                   ; preds = %after_bb583.us
  %4591 = sdiv i32 112, %3817
  %4592 = and i32 %4591, %3821
  %4593 = add nsw i32 %4592, %3972
  %4594 = getelementptr inbounds i8, i8* %8, i32 %4593
  %4595 = load i8, i8* %4594, align 1, !tbaa !125
  br i1 %.not4724, label %after_bb631.us, label %after_bb589.us

after_bb589.us:                                   ; preds = %after_bb586.us
  %4596 = sdiv i32 113, %3817
  %4597 = and i32 %4596, %3821
  %4598 = add nsw i32 %4597, %3972
  %4599 = getelementptr inbounds i8, i8* %8, i32 %4598
  %4600 = load i8, i8* %4599, align 1, !tbaa !125
  br i1 %3877, label %after_bb592.us, label %after_bb631.us

after_bb592.us:                                   ; preds = %after_bb589.us
  %4601 = sdiv i32 114, %3817
  %4602 = and i32 %4601, %3821
  %4603 = add nsw i32 %4602, %3972
  %4604 = getelementptr inbounds i8, i8* %8, i32 %4603
  %4605 = load i8, i8* %4604, align 1, !tbaa !125
  br i1 %.not4725, label %after_bb631.us, label %after_bb595.us

after_bb595.us:                                   ; preds = %after_bb592.us
  %4606 = sdiv i32 115, %3817
  %4607 = and i32 %4606, %3821
  %4608 = add nsw i32 %4607, %3972
  %4609 = getelementptr inbounds i8, i8* %8, i32 %4608
  %4610 = load i8, i8* %4609, align 1, !tbaa !125
  br i1 %3878, label %after_bb598.us, label %after_bb631.us

after_bb598.us:                                   ; preds = %after_bb595.us
  %4611 = sdiv i32 116, %3817
  %4612 = and i32 %4611, %3821
  %4613 = add nsw i32 %4612, %3972
  %4614 = getelementptr inbounds i8, i8* %8, i32 %4613
  %4615 = load i8, i8* %4614, align 1, !tbaa !125
  br i1 %.not4726, label %after_bb631.us, label %after_bb601.us

after_bb601.us:                                   ; preds = %after_bb598.us
  %4616 = sdiv i32 117, %3817
  %4617 = and i32 %4616, %3821
  %4618 = add nsw i32 %4617, %3972
  %4619 = getelementptr inbounds i8, i8* %8, i32 %4618
  %4620 = load i8, i8* %4619, align 1, !tbaa !125
  br i1 %3879, label %after_bb604.us, label %after_bb631.us

after_bb604.us:                                   ; preds = %after_bb601.us
  %4621 = sdiv i32 118, %3817
  %4622 = and i32 %4621, %3821
  %4623 = add nsw i32 %4622, %3972
  %4624 = getelementptr inbounds i8, i8* %8, i32 %4623
  %4625 = load i8, i8* %4624, align 1, !tbaa !125
  br i1 %.not4727, label %after_bb631.us, label %after_bb607.us

after_bb607.us:                                   ; preds = %after_bb604.us
  %4626 = sdiv i32 119, %3817
  %4627 = and i32 %4626, %3821
  %4628 = add nsw i32 %4627, %3972
  %4629 = getelementptr inbounds i8, i8* %8, i32 %4628
  %4630 = load i8, i8* %4629, align 1, !tbaa !125
  br i1 %3880, label %after_bb610.us, label %after_bb631.us

after_bb610.us:                                   ; preds = %after_bb607.us
  %4631 = sdiv i32 120, %3817
  %4632 = and i32 %4631, %3821
  %4633 = add nsw i32 %4632, %3972
  %4634 = getelementptr inbounds i8, i8* %8, i32 %4633
  %4635 = load i8, i8* %4634, align 1, !tbaa !125
  br i1 %.not4728, label %after_bb631.us, label %after_bb613.us

after_bb613.us:                                   ; preds = %after_bb610.us
  %4636 = sdiv i32 121, %3817
  %4637 = and i32 %4636, %3821
  %4638 = add nsw i32 %4637, %3972
  %4639 = getelementptr inbounds i8, i8* %8, i32 %4638
  %4640 = load i8, i8* %4639, align 1, !tbaa !125
  br i1 %3881, label %after_bb616.us, label %after_bb631.us

after_bb616.us:                                   ; preds = %after_bb613.us
  %4641 = sdiv i32 122, %3817
  %4642 = and i32 %4641, %3821
  %4643 = add nsw i32 %4642, %3972
  %4644 = getelementptr inbounds i8, i8* %8, i32 %4643
  %4645 = load i8, i8* %4644, align 1, !tbaa !125
  br i1 %.not4729, label %after_bb631.us, label %after_bb619.us

after_bb619.us:                                   ; preds = %after_bb616.us
  %4646 = sdiv i32 123, %3817
  %4647 = and i32 %4646, %3821
  %4648 = add nsw i32 %4647, %3972
  %4649 = getelementptr inbounds i8, i8* %8, i32 %4648
  %4650 = load i8, i8* %4649, align 1, !tbaa !125
  br i1 %3882, label %after_bb622.us, label %after_bb631.us

after_bb622.us:                                   ; preds = %after_bb619.us
  %4651 = sdiv i32 124, %3817
  %4652 = and i32 %4651, %3821
  %4653 = add nsw i32 %4652, %3972
  %4654 = getelementptr inbounds i8, i8* %8, i32 %4653
  %4655 = load i8, i8* %4654, align 1, !tbaa !125
  br i1 %.not4730, label %after_bb631.us, label %after_bb625.us

after_bb625.us:                                   ; preds = %after_bb622.us
  %4656 = sdiv i32 125, %3817
  %4657 = and i32 %4656, %3821
  %4658 = add nsw i32 %4657, %3972
  %4659 = getelementptr inbounds i8, i8* %8, i32 %4658
  %4660 = load i8, i8* %4659, align 1, !tbaa !125
  br i1 %3883, label %true_bb626.us, label %after_bb631.us

true_bb626.us:                                    ; preds = %after_bb625.us
  %4661 = sdiv i32 126, %3817
  %4662 = and i32 %4661, %3821
  %4663 = add nsw i32 %4662, %3972
  %4664 = getelementptr inbounds i8, i8* %8, i32 %4663
  %4665 = load i8, i8* %4664, align 1, !tbaa !125
  br label %after_bb631.us

after_bb631.us:                                   ; preds = %true_bb626.us, %after_bb625.us, %after_bb622.us, %after_bb619.us, %after_bb616.us, %after_bb613.us, %after_bb610.us, %after_bb607.us, %after_bb604.us, %after_bb601.us, %after_bb598.us, %after_bb595.us, %after_bb592.us, %after_bb589.us, %after_bb586.us, %after_bb583.us, %after_bb580.us, %after_bb577.us, %after_bb574.us, %after_bb571.us, %after_bb568.us, %after_bb565.us, %after_bb562.us, %after_bb559.us, %after_bb556.us, %after_bb553.us, %after_bb550.us, %after_bb547.us, %after_bb544.us, %after_bb541.us, %after_bb538.us, %after_bb535.us, %after_bb532.us, %after_bb529.us, %after_bb526.us, %after_bb523.us, %after_bb520.us, %after_bb517.us, %after_bb514.us, %after_bb511.us, %after_bb508.us, %after_bb505.us, %after_bb502.us, %after_bb499.us, %after_bb496.us, %after_bb493.us, %after_bb490.us, %after_bb487.us, %after_bb484.us, %after_bb481.us, %after_bb478.us, %after_bb475.us, %after_bb472.us, %after_bb469.us, %after_bb466.us, %after_bb463.us, %after_bb460.us, %after_bb457.us, %after_bb454.us, %after_bb451.us, %after_bb448.us, %after_bb445.us, %after_bb442.us, %after_bb439.us
  %4666 = phi i8 [ %4660, %true_bb626.us ], [ %4660, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4667 = phi i8 [ %4650, %true_bb626.us ], [ %4650, %after_bb625.us ], [ %4650, %after_bb622.us ], [ %4650, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4668 = phi i8 [ %4640, %true_bb626.us ], [ %4640, %after_bb625.us ], [ %4640, %after_bb622.us ], [ %4640, %after_bb619.us ], [ %4640, %after_bb616.us ], [ %4640, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4669 = phi i8 [ %4630, %true_bb626.us ], [ %4630, %after_bb625.us ], [ %4630, %after_bb622.us ], [ %4630, %after_bb619.us ], [ %4630, %after_bb616.us ], [ %4630, %after_bb613.us ], [ %4630, %after_bb610.us ], [ %4630, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4670 = phi i8 [ %4620, %true_bb626.us ], [ %4620, %after_bb625.us ], [ %4620, %after_bb622.us ], [ %4620, %after_bb619.us ], [ %4620, %after_bb616.us ], [ %4620, %after_bb613.us ], [ %4620, %after_bb610.us ], [ %4620, %after_bb607.us ], [ %4620, %after_bb604.us ], [ %4620, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4671 = phi i8 [ %4610, %true_bb626.us ], [ %4610, %after_bb625.us ], [ %4610, %after_bb622.us ], [ %4610, %after_bb619.us ], [ %4610, %after_bb616.us ], [ %4610, %after_bb613.us ], [ %4610, %after_bb610.us ], [ %4610, %after_bb607.us ], [ %4610, %after_bb604.us ], [ %4610, %after_bb601.us ], [ %4610, %after_bb598.us ], [ %4610, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4672 = phi i8 [ %4600, %true_bb626.us ], [ %4600, %after_bb625.us ], [ %4600, %after_bb622.us ], [ %4600, %after_bb619.us ], [ %4600, %after_bb616.us ], [ %4600, %after_bb613.us ], [ %4600, %after_bb610.us ], [ %4600, %after_bb607.us ], [ %4600, %after_bb604.us ], [ %4600, %after_bb601.us ], [ %4600, %after_bb598.us ], [ %4600, %after_bb595.us ], [ %4600, %after_bb592.us ], [ %4600, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4673 = phi i8 [ %4590, %true_bb626.us ], [ %4590, %after_bb625.us ], [ %4590, %after_bb622.us ], [ %4590, %after_bb619.us ], [ %4590, %after_bb616.us ], [ %4590, %after_bb613.us ], [ %4590, %after_bb610.us ], [ %4590, %after_bb607.us ], [ %4590, %after_bb604.us ], [ %4590, %after_bb601.us ], [ %4590, %after_bb598.us ], [ %4590, %after_bb595.us ], [ %4590, %after_bb592.us ], [ %4590, %after_bb589.us ], [ %4590, %after_bb586.us ], [ %4590, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4674 = phi i8 [ %4580, %true_bb626.us ], [ %4580, %after_bb625.us ], [ %4580, %after_bb622.us ], [ %4580, %after_bb619.us ], [ %4580, %after_bb616.us ], [ %4580, %after_bb613.us ], [ %4580, %after_bb610.us ], [ %4580, %after_bb607.us ], [ %4580, %after_bb604.us ], [ %4580, %after_bb601.us ], [ %4580, %after_bb598.us ], [ %4580, %after_bb595.us ], [ %4580, %after_bb592.us ], [ %4580, %after_bb589.us ], [ %4580, %after_bb586.us ], [ %4580, %after_bb583.us ], [ %4580, %after_bb580.us ], [ %4580, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4675 = phi i8 [ %4570, %true_bb626.us ], [ %4570, %after_bb625.us ], [ %4570, %after_bb622.us ], [ %4570, %after_bb619.us ], [ %4570, %after_bb616.us ], [ %4570, %after_bb613.us ], [ %4570, %after_bb610.us ], [ %4570, %after_bb607.us ], [ %4570, %after_bb604.us ], [ %4570, %after_bb601.us ], [ %4570, %after_bb598.us ], [ %4570, %after_bb595.us ], [ %4570, %after_bb592.us ], [ %4570, %after_bb589.us ], [ %4570, %after_bb586.us ], [ %4570, %after_bb583.us ], [ %4570, %after_bb580.us ], [ %4570, %after_bb577.us ], [ %4570, %after_bb574.us ], [ %4570, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4676 = phi i8 [ %4560, %true_bb626.us ], [ %4560, %after_bb625.us ], [ %4560, %after_bb622.us ], [ %4560, %after_bb619.us ], [ %4560, %after_bb616.us ], [ %4560, %after_bb613.us ], [ %4560, %after_bb610.us ], [ %4560, %after_bb607.us ], [ %4560, %after_bb604.us ], [ %4560, %after_bb601.us ], [ %4560, %after_bb598.us ], [ %4560, %after_bb595.us ], [ %4560, %after_bb592.us ], [ %4560, %after_bb589.us ], [ %4560, %after_bb586.us ], [ %4560, %after_bb583.us ], [ %4560, %after_bb580.us ], [ %4560, %after_bb577.us ], [ %4560, %after_bb574.us ], [ %4560, %after_bb571.us ], [ %4560, %after_bb568.us ], [ %4560, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4677 = phi i8 [ %4550, %true_bb626.us ], [ %4550, %after_bb625.us ], [ %4550, %after_bb622.us ], [ %4550, %after_bb619.us ], [ %4550, %after_bb616.us ], [ %4550, %after_bb613.us ], [ %4550, %after_bb610.us ], [ %4550, %after_bb607.us ], [ %4550, %after_bb604.us ], [ %4550, %after_bb601.us ], [ %4550, %after_bb598.us ], [ %4550, %after_bb595.us ], [ %4550, %after_bb592.us ], [ %4550, %after_bb589.us ], [ %4550, %after_bb586.us ], [ %4550, %after_bb583.us ], [ %4550, %after_bb580.us ], [ %4550, %after_bb577.us ], [ %4550, %after_bb574.us ], [ %4550, %after_bb571.us ], [ %4550, %after_bb568.us ], [ %4550, %after_bb565.us ], [ %4550, %after_bb562.us ], [ %4550, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4678 = phi i8 [ %4540, %true_bb626.us ], [ %4540, %after_bb625.us ], [ %4540, %after_bb622.us ], [ %4540, %after_bb619.us ], [ %4540, %after_bb616.us ], [ %4540, %after_bb613.us ], [ %4540, %after_bb610.us ], [ %4540, %after_bb607.us ], [ %4540, %after_bb604.us ], [ %4540, %after_bb601.us ], [ %4540, %after_bb598.us ], [ %4540, %after_bb595.us ], [ %4540, %after_bb592.us ], [ %4540, %after_bb589.us ], [ %4540, %after_bb586.us ], [ %4540, %after_bb583.us ], [ %4540, %after_bb580.us ], [ %4540, %after_bb577.us ], [ %4540, %after_bb574.us ], [ %4540, %after_bb571.us ], [ %4540, %after_bb568.us ], [ %4540, %after_bb565.us ], [ %4540, %after_bb562.us ], [ %4540, %after_bb559.us ], [ %4540, %after_bb556.us ], [ %4540, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4679 = phi i8 [ %4530, %true_bb626.us ], [ %4530, %after_bb625.us ], [ %4530, %after_bb622.us ], [ %4530, %after_bb619.us ], [ %4530, %after_bb616.us ], [ %4530, %after_bb613.us ], [ %4530, %after_bb610.us ], [ %4530, %after_bb607.us ], [ %4530, %after_bb604.us ], [ %4530, %after_bb601.us ], [ %4530, %after_bb598.us ], [ %4530, %after_bb595.us ], [ %4530, %after_bb592.us ], [ %4530, %after_bb589.us ], [ %4530, %after_bb586.us ], [ %4530, %after_bb583.us ], [ %4530, %after_bb580.us ], [ %4530, %after_bb577.us ], [ %4530, %after_bb574.us ], [ %4530, %after_bb571.us ], [ %4530, %after_bb568.us ], [ %4530, %after_bb565.us ], [ %4530, %after_bb562.us ], [ %4530, %after_bb559.us ], [ %4530, %after_bb556.us ], [ %4530, %after_bb553.us ], [ %4530, %after_bb550.us ], [ %4530, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4680 = phi i8 [ %4520, %true_bb626.us ], [ %4520, %after_bb625.us ], [ %4520, %after_bb622.us ], [ %4520, %after_bb619.us ], [ %4520, %after_bb616.us ], [ %4520, %after_bb613.us ], [ %4520, %after_bb610.us ], [ %4520, %after_bb607.us ], [ %4520, %after_bb604.us ], [ %4520, %after_bb601.us ], [ %4520, %after_bb598.us ], [ %4520, %after_bb595.us ], [ %4520, %after_bb592.us ], [ %4520, %after_bb589.us ], [ %4520, %after_bb586.us ], [ %4520, %after_bb583.us ], [ %4520, %after_bb580.us ], [ %4520, %after_bb577.us ], [ %4520, %after_bb574.us ], [ %4520, %after_bb571.us ], [ %4520, %after_bb568.us ], [ %4520, %after_bb565.us ], [ %4520, %after_bb562.us ], [ %4520, %after_bb559.us ], [ %4520, %after_bb556.us ], [ %4520, %after_bb553.us ], [ %4520, %after_bb550.us ], [ %4520, %after_bb547.us ], [ %4520, %after_bb544.us ], [ %4520, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4681 = phi i8 [ %4510, %true_bb626.us ], [ %4510, %after_bb625.us ], [ %4510, %after_bb622.us ], [ %4510, %after_bb619.us ], [ %4510, %after_bb616.us ], [ %4510, %after_bb613.us ], [ %4510, %after_bb610.us ], [ %4510, %after_bb607.us ], [ %4510, %after_bb604.us ], [ %4510, %after_bb601.us ], [ %4510, %after_bb598.us ], [ %4510, %after_bb595.us ], [ %4510, %after_bb592.us ], [ %4510, %after_bb589.us ], [ %4510, %after_bb586.us ], [ %4510, %after_bb583.us ], [ %4510, %after_bb580.us ], [ %4510, %after_bb577.us ], [ %4510, %after_bb574.us ], [ %4510, %after_bb571.us ], [ %4510, %after_bb568.us ], [ %4510, %after_bb565.us ], [ %4510, %after_bb562.us ], [ %4510, %after_bb559.us ], [ %4510, %after_bb556.us ], [ %4510, %after_bb553.us ], [ %4510, %after_bb550.us ], [ %4510, %after_bb547.us ], [ %4510, %after_bb544.us ], [ %4510, %after_bb541.us ], [ %4510, %after_bb538.us ], [ %4510, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4682 = phi i8 [ %4500, %true_bb626.us ], [ %4500, %after_bb625.us ], [ %4500, %after_bb622.us ], [ %4500, %after_bb619.us ], [ %4500, %after_bb616.us ], [ %4500, %after_bb613.us ], [ %4500, %after_bb610.us ], [ %4500, %after_bb607.us ], [ %4500, %after_bb604.us ], [ %4500, %after_bb601.us ], [ %4500, %after_bb598.us ], [ %4500, %after_bb595.us ], [ %4500, %after_bb592.us ], [ %4500, %after_bb589.us ], [ %4500, %after_bb586.us ], [ %4500, %after_bb583.us ], [ %4500, %after_bb580.us ], [ %4500, %after_bb577.us ], [ %4500, %after_bb574.us ], [ %4500, %after_bb571.us ], [ %4500, %after_bb568.us ], [ %4500, %after_bb565.us ], [ %4500, %after_bb562.us ], [ %4500, %after_bb559.us ], [ %4500, %after_bb556.us ], [ %4500, %after_bb553.us ], [ %4500, %after_bb550.us ], [ %4500, %after_bb547.us ], [ %4500, %after_bb544.us ], [ %4500, %after_bb541.us ], [ %4500, %after_bb538.us ], [ %4500, %after_bb535.us ], [ %4500, %after_bb532.us ], [ %4500, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4683 = phi i8 [ %4490, %true_bb626.us ], [ %4490, %after_bb625.us ], [ %4490, %after_bb622.us ], [ %4490, %after_bb619.us ], [ %4490, %after_bb616.us ], [ %4490, %after_bb613.us ], [ %4490, %after_bb610.us ], [ %4490, %after_bb607.us ], [ %4490, %after_bb604.us ], [ %4490, %after_bb601.us ], [ %4490, %after_bb598.us ], [ %4490, %after_bb595.us ], [ %4490, %after_bb592.us ], [ %4490, %after_bb589.us ], [ %4490, %after_bb586.us ], [ %4490, %after_bb583.us ], [ %4490, %after_bb580.us ], [ %4490, %after_bb577.us ], [ %4490, %after_bb574.us ], [ %4490, %after_bb571.us ], [ %4490, %after_bb568.us ], [ %4490, %after_bb565.us ], [ %4490, %after_bb562.us ], [ %4490, %after_bb559.us ], [ %4490, %after_bb556.us ], [ %4490, %after_bb553.us ], [ %4490, %after_bb550.us ], [ %4490, %after_bb547.us ], [ %4490, %after_bb544.us ], [ %4490, %after_bb541.us ], [ %4490, %after_bb538.us ], [ %4490, %after_bb535.us ], [ %4490, %after_bb532.us ], [ %4490, %after_bb529.us ], [ %4490, %after_bb526.us ], [ %4490, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4684 = phi i8 [ %4480, %true_bb626.us ], [ %4480, %after_bb625.us ], [ %4480, %after_bb622.us ], [ %4480, %after_bb619.us ], [ %4480, %after_bb616.us ], [ %4480, %after_bb613.us ], [ %4480, %after_bb610.us ], [ %4480, %after_bb607.us ], [ %4480, %after_bb604.us ], [ %4480, %after_bb601.us ], [ %4480, %after_bb598.us ], [ %4480, %after_bb595.us ], [ %4480, %after_bb592.us ], [ %4480, %after_bb589.us ], [ %4480, %after_bb586.us ], [ %4480, %after_bb583.us ], [ %4480, %after_bb580.us ], [ %4480, %after_bb577.us ], [ %4480, %after_bb574.us ], [ %4480, %after_bb571.us ], [ %4480, %after_bb568.us ], [ %4480, %after_bb565.us ], [ %4480, %after_bb562.us ], [ %4480, %after_bb559.us ], [ %4480, %after_bb556.us ], [ %4480, %after_bb553.us ], [ %4480, %after_bb550.us ], [ %4480, %after_bb547.us ], [ %4480, %after_bb544.us ], [ %4480, %after_bb541.us ], [ %4480, %after_bb538.us ], [ %4480, %after_bb535.us ], [ %4480, %after_bb532.us ], [ %4480, %after_bb529.us ], [ %4480, %after_bb526.us ], [ %4480, %after_bb523.us ], [ %4480, %after_bb520.us ], [ %4480, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4685 = phi i8 [ %4470, %true_bb626.us ], [ %4470, %after_bb625.us ], [ %4470, %after_bb622.us ], [ %4470, %after_bb619.us ], [ %4470, %after_bb616.us ], [ %4470, %after_bb613.us ], [ %4470, %after_bb610.us ], [ %4470, %after_bb607.us ], [ %4470, %after_bb604.us ], [ %4470, %after_bb601.us ], [ %4470, %after_bb598.us ], [ %4470, %after_bb595.us ], [ %4470, %after_bb592.us ], [ %4470, %after_bb589.us ], [ %4470, %after_bb586.us ], [ %4470, %after_bb583.us ], [ %4470, %after_bb580.us ], [ %4470, %after_bb577.us ], [ %4470, %after_bb574.us ], [ %4470, %after_bb571.us ], [ %4470, %after_bb568.us ], [ %4470, %after_bb565.us ], [ %4470, %after_bb562.us ], [ %4470, %after_bb559.us ], [ %4470, %after_bb556.us ], [ %4470, %after_bb553.us ], [ %4470, %after_bb550.us ], [ %4470, %after_bb547.us ], [ %4470, %after_bb544.us ], [ %4470, %after_bb541.us ], [ %4470, %after_bb538.us ], [ %4470, %after_bb535.us ], [ %4470, %after_bb532.us ], [ %4470, %after_bb529.us ], [ %4470, %after_bb526.us ], [ %4470, %after_bb523.us ], [ %4470, %after_bb520.us ], [ %4470, %after_bb517.us ], [ %4470, %after_bb514.us ], [ %4470, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4686 = phi i8 [ %4460, %true_bb626.us ], [ %4460, %after_bb625.us ], [ %4460, %after_bb622.us ], [ %4460, %after_bb619.us ], [ %4460, %after_bb616.us ], [ %4460, %after_bb613.us ], [ %4460, %after_bb610.us ], [ %4460, %after_bb607.us ], [ %4460, %after_bb604.us ], [ %4460, %after_bb601.us ], [ %4460, %after_bb598.us ], [ %4460, %after_bb595.us ], [ %4460, %after_bb592.us ], [ %4460, %after_bb589.us ], [ %4460, %after_bb586.us ], [ %4460, %after_bb583.us ], [ %4460, %after_bb580.us ], [ %4460, %after_bb577.us ], [ %4460, %after_bb574.us ], [ %4460, %after_bb571.us ], [ %4460, %after_bb568.us ], [ %4460, %after_bb565.us ], [ %4460, %after_bb562.us ], [ %4460, %after_bb559.us ], [ %4460, %after_bb556.us ], [ %4460, %after_bb553.us ], [ %4460, %after_bb550.us ], [ %4460, %after_bb547.us ], [ %4460, %after_bb544.us ], [ %4460, %after_bb541.us ], [ %4460, %after_bb538.us ], [ %4460, %after_bb535.us ], [ %4460, %after_bb532.us ], [ %4460, %after_bb529.us ], [ %4460, %after_bb526.us ], [ %4460, %after_bb523.us ], [ %4460, %after_bb520.us ], [ %4460, %after_bb517.us ], [ %4460, %after_bb514.us ], [ %4460, %after_bb511.us ], [ %4460, %after_bb508.us ], [ %4460, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4687 = phi i8 [ %4450, %true_bb626.us ], [ %4450, %after_bb625.us ], [ %4450, %after_bb622.us ], [ %4450, %after_bb619.us ], [ %4450, %after_bb616.us ], [ %4450, %after_bb613.us ], [ %4450, %after_bb610.us ], [ %4450, %after_bb607.us ], [ %4450, %after_bb604.us ], [ %4450, %after_bb601.us ], [ %4450, %after_bb598.us ], [ %4450, %after_bb595.us ], [ %4450, %after_bb592.us ], [ %4450, %after_bb589.us ], [ %4450, %after_bb586.us ], [ %4450, %after_bb583.us ], [ %4450, %after_bb580.us ], [ %4450, %after_bb577.us ], [ %4450, %after_bb574.us ], [ %4450, %after_bb571.us ], [ %4450, %after_bb568.us ], [ %4450, %after_bb565.us ], [ %4450, %after_bb562.us ], [ %4450, %after_bb559.us ], [ %4450, %after_bb556.us ], [ %4450, %after_bb553.us ], [ %4450, %after_bb550.us ], [ %4450, %after_bb547.us ], [ %4450, %after_bb544.us ], [ %4450, %after_bb541.us ], [ %4450, %after_bb538.us ], [ %4450, %after_bb535.us ], [ %4450, %after_bb532.us ], [ %4450, %after_bb529.us ], [ %4450, %after_bb526.us ], [ %4450, %after_bb523.us ], [ %4450, %after_bb520.us ], [ %4450, %after_bb517.us ], [ %4450, %after_bb514.us ], [ %4450, %after_bb511.us ], [ %4450, %after_bb508.us ], [ %4450, %after_bb505.us ], [ %4450, %after_bb502.us ], [ %4450, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4688 = phi i8 [ %4440, %true_bb626.us ], [ %4440, %after_bb625.us ], [ %4440, %after_bb622.us ], [ %4440, %after_bb619.us ], [ %4440, %after_bb616.us ], [ %4440, %after_bb613.us ], [ %4440, %after_bb610.us ], [ %4440, %after_bb607.us ], [ %4440, %after_bb604.us ], [ %4440, %after_bb601.us ], [ %4440, %after_bb598.us ], [ %4440, %after_bb595.us ], [ %4440, %after_bb592.us ], [ %4440, %after_bb589.us ], [ %4440, %after_bb586.us ], [ %4440, %after_bb583.us ], [ %4440, %after_bb580.us ], [ %4440, %after_bb577.us ], [ %4440, %after_bb574.us ], [ %4440, %after_bb571.us ], [ %4440, %after_bb568.us ], [ %4440, %after_bb565.us ], [ %4440, %after_bb562.us ], [ %4440, %after_bb559.us ], [ %4440, %after_bb556.us ], [ %4440, %after_bb553.us ], [ %4440, %after_bb550.us ], [ %4440, %after_bb547.us ], [ %4440, %after_bb544.us ], [ %4440, %after_bb541.us ], [ %4440, %after_bb538.us ], [ %4440, %after_bb535.us ], [ %4440, %after_bb532.us ], [ %4440, %after_bb529.us ], [ %4440, %after_bb526.us ], [ %4440, %after_bb523.us ], [ %4440, %after_bb520.us ], [ %4440, %after_bb517.us ], [ %4440, %after_bb514.us ], [ %4440, %after_bb511.us ], [ %4440, %after_bb508.us ], [ %4440, %after_bb505.us ], [ %4440, %after_bb502.us ], [ %4440, %after_bb499.us ], [ %4440, %after_bb496.us ], [ %4440, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4689 = phi i8 [ %4430, %true_bb626.us ], [ %4430, %after_bb625.us ], [ %4430, %after_bb622.us ], [ %4430, %after_bb619.us ], [ %4430, %after_bb616.us ], [ %4430, %after_bb613.us ], [ %4430, %after_bb610.us ], [ %4430, %after_bb607.us ], [ %4430, %after_bb604.us ], [ %4430, %after_bb601.us ], [ %4430, %after_bb598.us ], [ %4430, %after_bb595.us ], [ %4430, %after_bb592.us ], [ %4430, %after_bb589.us ], [ %4430, %after_bb586.us ], [ %4430, %after_bb583.us ], [ %4430, %after_bb580.us ], [ %4430, %after_bb577.us ], [ %4430, %after_bb574.us ], [ %4430, %after_bb571.us ], [ %4430, %after_bb568.us ], [ %4430, %after_bb565.us ], [ %4430, %after_bb562.us ], [ %4430, %after_bb559.us ], [ %4430, %after_bb556.us ], [ %4430, %after_bb553.us ], [ %4430, %after_bb550.us ], [ %4430, %after_bb547.us ], [ %4430, %after_bb544.us ], [ %4430, %after_bb541.us ], [ %4430, %after_bb538.us ], [ %4430, %after_bb535.us ], [ %4430, %after_bb532.us ], [ %4430, %after_bb529.us ], [ %4430, %after_bb526.us ], [ %4430, %after_bb523.us ], [ %4430, %after_bb520.us ], [ %4430, %after_bb517.us ], [ %4430, %after_bb514.us ], [ %4430, %after_bb511.us ], [ %4430, %after_bb508.us ], [ %4430, %after_bb505.us ], [ %4430, %after_bb502.us ], [ %4430, %after_bb499.us ], [ %4430, %after_bb496.us ], [ %4430, %after_bb493.us ], [ %4430, %after_bb490.us ], [ %4430, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4690 = phi i8 [ %4420, %true_bb626.us ], [ %4420, %after_bb625.us ], [ %4420, %after_bb622.us ], [ %4420, %after_bb619.us ], [ %4420, %after_bb616.us ], [ %4420, %after_bb613.us ], [ %4420, %after_bb610.us ], [ %4420, %after_bb607.us ], [ %4420, %after_bb604.us ], [ %4420, %after_bb601.us ], [ %4420, %after_bb598.us ], [ %4420, %after_bb595.us ], [ %4420, %after_bb592.us ], [ %4420, %after_bb589.us ], [ %4420, %after_bb586.us ], [ %4420, %after_bb583.us ], [ %4420, %after_bb580.us ], [ %4420, %after_bb577.us ], [ %4420, %after_bb574.us ], [ %4420, %after_bb571.us ], [ %4420, %after_bb568.us ], [ %4420, %after_bb565.us ], [ %4420, %after_bb562.us ], [ %4420, %after_bb559.us ], [ %4420, %after_bb556.us ], [ %4420, %after_bb553.us ], [ %4420, %after_bb550.us ], [ %4420, %after_bb547.us ], [ %4420, %after_bb544.us ], [ %4420, %after_bb541.us ], [ %4420, %after_bb538.us ], [ %4420, %after_bb535.us ], [ %4420, %after_bb532.us ], [ %4420, %after_bb529.us ], [ %4420, %after_bb526.us ], [ %4420, %after_bb523.us ], [ %4420, %after_bb520.us ], [ %4420, %after_bb517.us ], [ %4420, %after_bb514.us ], [ %4420, %after_bb511.us ], [ %4420, %after_bb508.us ], [ %4420, %after_bb505.us ], [ %4420, %after_bb502.us ], [ %4420, %after_bb499.us ], [ %4420, %after_bb496.us ], [ %4420, %after_bb493.us ], [ %4420, %after_bb490.us ], [ %4420, %after_bb487.us ], [ %4420, %after_bb484.us ], [ %4420, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4691 = phi i8 [ %4410, %true_bb626.us ], [ %4410, %after_bb625.us ], [ %4410, %after_bb622.us ], [ %4410, %after_bb619.us ], [ %4410, %after_bb616.us ], [ %4410, %after_bb613.us ], [ %4410, %after_bb610.us ], [ %4410, %after_bb607.us ], [ %4410, %after_bb604.us ], [ %4410, %after_bb601.us ], [ %4410, %after_bb598.us ], [ %4410, %after_bb595.us ], [ %4410, %after_bb592.us ], [ %4410, %after_bb589.us ], [ %4410, %after_bb586.us ], [ %4410, %after_bb583.us ], [ %4410, %after_bb580.us ], [ %4410, %after_bb577.us ], [ %4410, %after_bb574.us ], [ %4410, %after_bb571.us ], [ %4410, %after_bb568.us ], [ %4410, %after_bb565.us ], [ %4410, %after_bb562.us ], [ %4410, %after_bb559.us ], [ %4410, %after_bb556.us ], [ %4410, %after_bb553.us ], [ %4410, %after_bb550.us ], [ %4410, %after_bb547.us ], [ %4410, %after_bb544.us ], [ %4410, %after_bb541.us ], [ %4410, %after_bb538.us ], [ %4410, %after_bb535.us ], [ %4410, %after_bb532.us ], [ %4410, %after_bb529.us ], [ %4410, %after_bb526.us ], [ %4410, %after_bb523.us ], [ %4410, %after_bb520.us ], [ %4410, %after_bb517.us ], [ %4410, %after_bb514.us ], [ %4410, %after_bb511.us ], [ %4410, %after_bb508.us ], [ %4410, %after_bb505.us ], [ %4410, %after_bb502.us ], [ %4410, %after_bb499.us ], [ %4410, %after_bb496.us ], [ %4410, %after_bb493.us ], [ %4410, %after_bb490.us ], [ %4410, %after_bb487.us ], [ %4410, %after_bb484.us ], [ %4410, %after_bb481.us ], [ %4410, %after_bb478.us ], [ %4410, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4692 = phi i8 [ %4400, %true_bb626.us ], [ %4400, %after_bb625.us ], [ %4400, %after_bb622.us ], [ %4400, %after_bb619.us ], [ %4400, %after_bb616.us ], [ %4400, %after_bb613.us ], [ %4400, %after_bb610.us ], [ %4400, %after_bb607.us ], [ %4400, %after_bb604.us ], [ %4400, %after_bb601.us ], [ %4400, %after_bb598.us ], [ %4400, %after_bb595.us ], [ %4400, %after_bb592.us ], [ %4400, %after_bb589.us ], [ %4400, %after_bb586.us ], [ %4400, %after_bb583.us ], [ %4400, %after_bb580.us ], [ %4400, %after_bb577.us ], [ %4400, %after_bb574.us ], [ %4400, %after_bb571.us ], [ %4400, %after_bb568.us ], [ %4400, %after_bb565.us ], [ %4400, %after_bb562.us ], [ %4400, %after_bb559.us ], [ %4400, %after_bb556.us ], [ %4400, %after_bb553.us ], [ %4400, %after_bb550.us ], [ %4400, %after_bb547.us ], [ %4400, %after_bb544.us ], [ %4400, %after_bb541.us ], [ %4400, %after_bb538.us ], [ %4400, %after_bb535.us ], [ %4400, %after_bb532.us ], [ %4400, %after_bb529.us ], [ %4400, %after_bb526.us ], [ %4400, %after_bb523.us ], [ %4400, %after_bb520.us ], [ %4400, %after_bb517.us ], [ %4400, %after_bb514.us ], [ %4400, %after_bb511.us ], [ %4400, %after_bb508.us ], [ %4400, %after_bb505.us ], [ %4400, %after_bb502.us ], [ %4400, %after_bb499.us ], [ %4400, %after_bb496.us ], [ %4400, %after_bb493.us ], [ %4400, %after_bb490.us ], [ %4400, %after_bb487.us ], [ %4400, %after_bb484.us ], [ %4400, %after_bb481.us ], [ %4400, %after_bb478.us ], [ %4400, %after_bb475.us ], [ %4400, %after_bb472.us ], [ %4400, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4693 = phi i8 [ %4390, %true_bb626.us ], [ %4390, %after_bb625.us ], [ %4390, %after_bb622.us ], [ %4390, %after_bb619.us ], [ %4390, %after_bb616.us ], [ %4390, %after_bb613.us ], [ %4390, %after_bb610.us ], [ %4390, %after_bb607.us ], [ %4390, %after_bb604.us ], [ %4390, %after_bb601.us ], [ %4390, %after_bb598.us ], [ %4390, %after_bb595.us ], [ %4390, %after_bb592.us ], [ %4390, %after_bb589.us ], [ %4390, %after_bb586.us ], [ %4390, %after_bb583.us ], [ %4390, %after_bb580.us ], [ %4390, %after_bb577.us ], [ %4390, %after_bb574.us ], [ %4390, %after_bb571.us ], [ %4390, %after_bb568.us ], [ %4390, %after_bb565.us ], [ %4390, %after_bb562.us ], [ %4390, %after_bb559.us ], [ %4390, %after_bb556.us ], [ %4390, %after_bb553.us ], [ %4390, %after_bb550.us ], [ %4390, %after_bb547.us ], [ %4390, %after_bb544.us ], [ %4390, %after_bb541.us ], [ %4390, %after_bb538.us ], [ %4390, %after_bb535.us ], [ %4390, %after_bb532.us ], [ %4390, %after_bb529.us ], [ %4390, %after_bb526.us ], [ %4390, %after_bb523.us ], [ %4390, %after_bb520.us ], [ %4390, %after_bb517.us ], [ %4390, %after_bb514.us ], [ %4390, %after_bb511.us ], [ %4390, %after_bb508.us ], [ %4390, %after_bb505.us ], [ %4390, %after_bb502.us ], [ %4390, %after_bb499.us ], [ %4390, %after_bb496.us ], [ %4390, %after_bb493.us ], [ %4390, %after_bb490.us ], [ %4390, %after_bb487.us ], [ %4390, %after_bb484.us ], [ %4390, %after_bb481.us ], [ %4390, %after_bb478.us ], [ %4390, %after_bb475.us ], [ %4390, %after_bb472.us ], [ %4390, %after_bb469.us ], [ %4390, %after_bb466.us ], [ %4390, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4694 = phi i8 [ %4380, %true_bb626.us ], [ %4380, %after_bb625.us ], [ %4380, %after_bb622.us ], [ %4380, %after_bb619.us ], [ %4380, %after_bb616.us ], [ %4380, %after_bb613.us ], [ %4380, %after_bb610.us ], [ %4380, %after_bb607.us ], [ %4380, %after_bb604.us ], [ %4380, %after_bb601.us ], [ %4380, %after_bb598.us ], [ %4380, %after_bb595.us ], [ %4380, %after_bb592.us ], [ %4380, %after_bb589.us ], [ %4380, %after_bb586.us ], [ %4380, %after_bb583.us ], [ %4380, %after_bb580.us ], [ %4380, %after_bb577.us ], [ %4380, %after_bb574.us ], [ %4380, %after_bb571.us ], [ %4380, %after_bb568.us ], [ %4380, %after_bb565.us ], [ %4380, %after_bb562.us ], [ %4380, %after_bb559.us ], [ %4380, %after_bb556.us ], [ %4380, %after_bb553.us ], [ %4380, %after_bb550.us ], [ %4380, %after_bb547.us ], [ %4380, %after_bb544.us ], [ %4380, %after_bb541.us ], [ %4380, %after_bb538.us ], [ %4380, %after_bb535.us ], [ %4380, %after_bb532.us ], [ %4380, %after_bb529.us ], [ %4380, %after_bb526.us ], [ %4380, %after_bb523.us ], [ %4380, %after_bb520.us ], [ %4380, %after_bb517.us ], [ %4380, %after_bb514.us ], [ %4380, %after_bb511.us ], [ %4380, %after_bb508.us ], [ %4380, %after_bb505.us ], [ %4380, %after_bb502.us ], [ %4380, %after_bb499.us ], [ %4380, %after_bb496.us ], [ %4380, %after_bb493.us ], [ %4380, %after_bb490.us ], [ %4380, %after_bb487.us ], [ %4380, %after_bb484.us ], [ %4380, %after_bb481.us ], [ %4380, %after_bb478.us ], [ %4380, %after_bb475.us ], [ %4380, %after_bb472.us ], [ %4380, %after_bb469.us ], [ %4380, %after_bb466.us ], [ %4380, %after_bb463.us ], [ %4380, %after_bb460.us ], [ %4380, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4695 = phi i8 [ %4370, %true_bb626.us ], [ %4370, %after_bb625.us ], [ %4370, %after_bb622.us ], [ %4370, %after_bb619.us ], [ %4370, %after_bb616.us ], [ %4370, %after_bb613.us ], [ %4370, %after_bb610.us ], [ %4370, %after_bb607.us ], [ %4370, %after_bb604.us ], [ %4370, %after_bb601.us ], [ %4370, %after_bb598.us ], [ %4370, %after_bb595.us ], [ %4370, %after_bb592.us ], [ %4370, %after_bb589.us ], [ %4370, %after_bb586.us ], [ %4370, %after_bb583.us ], [ %4370, %after_bb580.us ], [ %4370, %after_bb577.us ], [ %4370, %after_bb574.us ], [ %4370, %after_bb571.us ], [ %4370, %after_bb568.us ], [ %4370, %after_bb565.us ], [ %4370, %after_bb562.us ], [ %4370, %after_bb559.us ], [ %4370, %after_bb556.us ], [ %4370, %after_bb553.us ], [ %4370, %after_bb550.us ], [ %4370, %after_bb547.us ], [ %4370, %after_bb544.us ], [ %4370, %after_bb541.us ], [ %4370, %after_bb538.us ], [ %4370, %after_bb535.us ], [ %4370, %after_bb532.us ], [ %4370, %after_bb529.us ], [ %4370, %after_bb526.us ], [ %4370, %after_bb523.us ], [ %4370, %after_bb520.us ], [ %4370, %after_bb517.us ], [ %4370, %after_bb514.us ], [ %4370, %after_bb511.us ], [ %4370, %after_bb508.us ], [ %4370, %after_bb505.us ], [ %4370, %after_bb502.us ], [ %4370, %after_bb499.us ], [ %4370, %after_bb496.us ], [ %4370, %after_bb493.us ], [ %4370, %after_bb490.us ], [ %4370, %after_bb487.us ], [ %4370, %after_bb484.us ], [ %4370, %after_bb481.us ], [ %4370, %after_bb478.us ], [ %4370, %after_bb475.us ], [ %4370, %after_bb472.us ], [ %4370, %after_bb469.us ], [ %4370, %after_bb466.us ], [ %4370, %after_bb463.us ], [ %4370, %after_bb460.us ], [ %4370, %after_bb457.us ], [ %4370, %after_bb454.us ], [ %4370, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4696 = phi i8 [ %4360, %true_bb626.us ], [ %4360, %after_bb625.us ], [ %4360, %after_bb622.us ], [ %4360, %after_bb619.us ], [ %4360, %after_bb616.us ], [ %4360, %after_bb613.us ], [ %4360, %after_bb610.us ], [ %4360, %after_bb607.us ], [ %4360, %after_bb604.us ], [ %4360, %after_bb601.us ], [ %4360, %after_bb598.us ], [ %4360, %after_bb595.us ], [ %4360, %after_bb592.us ], [ %4360, %after_bb589.us ], [ %4360, %after_bb586.us ], [ %4360, %after_bb583.us ], [ %4360, %after_bb580.us ], [ %4360, %after_bb577.us ], [ %4360, %after_bb574.us ], [ %4360, %after_bb571.us ], [ %4360, %after_bb568.us ], [ %4360, %after_bb565.us ], [ %4360, %after_bb562.us ], [ %4360, %after_bb559.us ], [ %4360, %after_bb556.us ], [ %4360, %after_bb553.us ], [ %4360, %after_bb550.us ], [ %4360, %after_bb547.us ], [ %4360, %after_bb544.us ], [ %4360, %after_bb541.us ], [ %4360, %after_bb538.us ], [ %4360, %after_bb535.us ], [ %4360, %after_bb532.us ], [ %4360, %after_bb529.us ], [ %4360, %after_bb526.us ], [ %4360, %after_bb523.us ], [ %4360, %after_bb520.us ], [ %4360, %after_bb517.us ], [ %4360, %after_bb514.us ], [ %4360, %after_bb511.us ], [ %4360, %after_bb508.us ], [ %4360, %after_bb505.us ], [ %4360, %after_bb502.us ], [ %4360, %after_bb499.us ], [ %4360, %after_bb496.us ], [ %4360, %after_bb493.us ], [ %4360, %after_bb490.us ], [ %4360, %after_bb487.us ], [ %4360, %after_bb484.us ], [ %4360, %after_bb481.us ], [ %4360, %after_bb478.us ], [ %4360, %after_bb475.us ], [ %4360, %after_bb472.us ], [ %4360, %after_bb469.us ], [ %4360, %after_bb466.us ], [ %4360, %after_bb463.us ], [ %4360, %after_bb460.us ], [ %4360, %after_bb457.us ], [ %4360, %after_bb454.us ], [ %4360, %after_bb451.us ], [ %4360, %after_bb448.us ], [ %4360, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4697 = phi i8 [ %4355, %true_bb626.us ], [ %4355, %after_bb625.us ], [ %4355, %after_bb622.us ], [ %4355, %after_bb619.us ], [ %4355, %after_bb616.us ], [ %4355, %after_bb613.us ], [ %4355, %after_bb610.us ], [ %4355, %after_bb607.us ], [ %4355, %after_bb604.us ], [ %4355, %after_bb601.us ], [ %4355, %after_bb598.us ], [ %4355, %after_bb595.us ], [ %4355, %after_bb592.us ], [ %4355, %after_bb589.us ], [ %4355, %after_bb586.us ], [ %4355, %after_bb583.us ], [ %4355, %after_bb580.us ], [ %4355, %after_bb577.us ], [ %4355, %after_bb574.us ], [ %4355, %after_bb571.us ], [ %4355, %after_bb568.us ], [ %4355, %after_bb565.us ], [ %4355, %after_bb562.us ], [ %4355, %after_bb559.us ], [ %4355, %after_bb556.us ], [ %4355, %after_bb553.us ], [ %4355, %after_bb550.us ], [ %4355, %after_bb547.us ], [ %4355, %after_bb544.us ], [ %4355, %after_bb541.us ], [ %4355, %after_bb538.us ], [ %4355, %after_bb535.us ], [ %4355, %after_bb532.us ], [ %4355, %after_bb529.us ], [ %4355, %after_bb526.us ], [ %4355, %after_bb523.us ], [ %4355, %after_bb520.us ], [ %4355, %after_bb517.us ], [ %4355, %after_bb514.us ], [ %4355, %after_bb511.us ], [ %4355, %after_bb508.us ], [ %4355, %after_bb505.us ], [ %4355, %after_bb502.us ], [ %4355, %after_bb499.us ], [ %4355, %after_bb496.us ], [ %4355, %after_bb493.us ], [ %4355, %after_bb490.us ], [ %4355, %after_bb487.us ], [ %4355, %after_bb484.us ], [ %4355, %after_bb481.us ], [ %4355, %after_bb478.us ], [ %4355, %after_bb475.us ], [ %4355, %after_bb472.us ], [ %4355, %after_bb469.us ], [ %4355, %after_bb466.us ], [ %4355, %after_bb463.us ], [ %4355, %after_bb460.us ], [ %4355, %after_bb457.us ], [ %4355, %after_bb454.us ], [ %4355, %after_bb451.us ], [ %4355, %after_bb448.us ], [ %4355, %after_bb445.us ], [ %4355, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4698 = phi i8 [ %4365, %true_bb626.us ], [ %4365, %after_bb625.us ], [ %4365, %after_bb622.us ], [ %4365, %after_bb619.us ], [ %4365, %after_bb616.us ], [ %4365, %after_bb613.us ], [ %4365, %after_bb610.us ], [ %4365, %after_bb607.us ], [ %4365, %after_bb604.us ], [ %4365, %after_bb601.us ], [ %4365, %after_bb598.us ], [ %4365, %after_bb595.us ], [ %4365, %after_bb592.us ], [ %4365, %after_bb589.us ], [ %4365, %after_bb586.us ], [ %4365, %after_bb583.us ], [ %4365, %after_bb580.us ], [ %4365, %after_bb577.us ], [ %4365, %after_bb574.us ], [ %4365, %after_bb571.us ], [ %4365, %after_bb568.us ], [ %4365, %after_bb565.us ], [ %4365, %after_bb562.us ], [ %4365, %after_bb559.us ], [ %4365, %after_bb556.us ], [ %4365, %after_bb553.us ], [ %4365, %after_bb550.us ], [ %4365, %after_bb547.us ], [ %4365, %after_bb544.us ], [ %4365, %after_bb541.us ], [ %4365, %after_bb538.us ], [ %4365, %after_bb535.us ], [ %4365, %after_bb532.us ], [ %4365, %after_bb529.us ], [ %4365, %after_bb526.us ], [ %4365, %after_bb523.us ], [ %4365, %after_bb520.us ], [ %4365, %after_bb517.us ], [ %4365, %after_bb514.us ], [ %4365, %after_bb511.us ], [ %4365, %after_bb508.us ], [ %4365, %after_bb505.us ], [ %4365, %after_bb502.us ], [ %4365, %after_bb499.us ], [ %4365, %after_bb496.us ], [ %4365, %after_bb493.us ], [ %4365, %after_bb490.us ], [ %4365, %after_bb487.us ], [ %4365, %after_bb484.us ], [ %4365, %after_bb481.us ], [ %4365, %after_bb478.us ], [ %4365, %after_bb475.us ], [ %4365, %after_bb472.us ], [ %4365, %after_bb469.us ], [ %4365, %after_bb466.us ], [ %4365, %after_bb463.us ], [ %4365, %after_bb460.us ], [ %4365, %after_bb457.us ], [ %4365, %after_bb454.us ], [ %4365, %after_bb451.us ], [ %4365, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4699 = phi i8 [ %4375, %true_bb626.us ], [ %4375, %after_bb625.us ], [ %4375, %after_bb622.us ], [ %4375, %after_bb619.us ], [ %4375, %after_bb616.us ], [ %4375, %after_bb613.us ], [ %4375, %after_bb610.us ], [ %4375, %after_bb607.us ], [ %4375, %after_bb604.us ], [ %4375, %after_bb601.us ], [ %4375, %after_bb598.us ], [ %4375, %after_bb595.us ], [ %4375, %after_bb592.us ], [ %4375, %after_bb589.us ], [ %4375, %after_bb586.us ], [ %4375, %after_bb583.us ], [ %4375, %after_bb580.us ], [ %4375, %after_bb577.us ], [ %4375, %after_bb574.us ], [ %4375, %after_bb571.us ], [ %4375, %after_bb568.us ], [ %4375, %after_bb565.us ], [ %4375, %after_bb562.us ], [ %4375, %after_bb559.us ], [ %4375, %after_bb556.us ], [ %4375, %after_bb553.us ], [ %4375, %after_bb550.us ], [ %4375, %after_bb547.us ], [ %4375, %after_bb544.us ], [ %4375, %after_bb541.us ], [ %4375, %after_bb538.us ], [ %4375, %after_bb535.us ], [ %4375, %after_bb532.us ], [ %4375, %after_bb529.us ], [ %4375, %after_bb526.us ], [ %4375, %after_bb523.us ], [ %4375, %after_bb520.us ], [ %4375, %after_bb517.us ], [ %4375, %after_bb514.us ], [ %4375, %after_bb511.us ], [ %4375, %after_bb508.us ], [ %4375, %after_bb505.us ], [ %4375, %after_bb502.us ], [ %4375, %after_bb499.us ], [ %4375, %after_bb496.us ], [ %4375, %after_bb493.us ], [ %4375, %after_bb490.us ], [ %4375, %after_bb487.us ], [ %4375, %after_bb484.us ], [ %4375, %after_bb481.us ], [ %4375, %after_bb478.us ], [ %4375, %after_bb475.us ], [ %4375, %after_bb472.us ], [ %4375, %after_bb469.us ], [ %4375, %after_bb466.us ], [ %4375, %after_bb463.us ], [ %4375, %after_bb460.us ], [ %4375, %after_bb457.us ], [ %4375, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4700 = phi i8 [ %4385, %true_bb626.us ], [ %4385, %after_bb625.us ], [ %4385, %after_bb622.us ], [ %4385, %after_bb619.us ], [ %4385, %after_bb616.us ], [ %4385, %after_bb613.us ], [ %4385, %after_bb610.us ], [ %4385, %after_bb607.us ], [ %4385, %after_bb604.us ], [ %4385, %after_bb601.us ], [ %4385, %after_bb598.us ], [ %4385, %after_bb595.us ], [ %4385, %after_bb592.us ], [ %4385, %after_bb589.us ], [ %4385, %after_bb586.us ], [ %4385, %after_bb583.us ], [ %4385, %after_bb580.us ], [ %4385, %after_bb577.us ], [ %4385, %after_bb574.us ], [ %4385, %after_bb571.us ], [ %4385, %after_bb568.us ], [ %4385, %after_bb565.us ], [ %4385, %after_bb562.us ], [ %4385, %after_bb559.us ], [ %4385, %after_bb556.us ], [ %4385, %after_bb553.us ], [ %4385, %after_bb550.us ], [ %4385, %after_bb547.us ], [ %4385, %after_bb544.us ], [ %4385, %after_bb541.us ], [ %4385, %after_bb538.us ], [ %4385, %after_bb535.us ], [ %4385, %after_bb532.us ], [ %4385, %after_bb529.us ], [ %4385, %after_bb526.us ], [ %4385, %after_bb523.us ], [ %4385, %after_bb520.us ], [ %4385, %after_bb517.us ], [ %4385, %after_bb514.us ], [ %4385, %after_bb511.us ], [ %4385, %after_bb508.us ], [ %4385, %after_bb505.us ], [ %4385, %after_bb502.us ], [ %4385, %after_bb499.us ], [ %4385, %after_bb496.us ], [ %4385, %after_bb493.us ], [ %4385, %after_bb490.us ], [ %4385, %after_bb487.us ], [ %4385, %after_bb484.us ], [ %4385, %after_bb481.us ], [ %4385, %after_bb478.us ], [ %4385, %after_bb475.us ], [ %4385, %after_bb472.us ], [ %4385, %after_bb469.us ], [ %4385, %after_bb466.us ], [ %4385, %after_bb463.us ], [ %4385, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4701 = phi i8 [ %4395, %true_bb626.us ], [ %4395, %after_bb625.us ], [ %4395, %after_bb622.us ], [ %4395, %after_bb619.us ], [ %4395, %after_bb616.us ], [ %4395, %after_bb613.us ], [ %4395, %after_bb610.us ], [ %4395, %after_bb607.us ], [ %4395, %after_bb604.us ], [ %4395, %after_bb601.us ], [ %4395, %after_bb598.us ], [ %4395, %after_bb595.us ], [ %4395, %after_bb592.us ], [ %4395, %after_bb589.us ], [ %4395, %after_bb586.us ], [ %4395, %after_bb583.us ], [ %4395, %after_bb580.us ], [ %4395, %after_bb577.us ], [ %4395, %after_bb574.us ], [ %4395, %after_bb571.us ], [ %4395, %after_bb568.us ], [ %4395, %after_bb565.us ], [ %4395, %after_bb562.us ], [ %4395, %after_bb559.us ], [ %4395, %after_bb556.us ], [ %4395, %after_bb553.us ], [ %4395, %after_bb550.us ], [ %4395, %after_bb547.us ], [ %4395, %after_bb544.us ], [ %4395, %after_bb541.us ], [ %4395, %after_bb538.us ], [ %4395, %after_bb535.us ], [ %4395, %after_bb532.us ], [ %4395, %after_bb529.us ], [ %4395, %after_bb526.us ], [ %4395, %after_bb523.us ], [ %4395, %after_bb520.us ], [ %4395, %after_bb517.us ], [ %4395, %after_bb514.us ], [ %4395, %after_bb511.us ], [ %4395, %after_bb508.us ], [ %4395, %after_bb505.us ], [ %4395, %after_bb502.us ], [ %4395, %after_bb499.us ], [ %4395, %after_bb496.us ], [ %4395, %after_bb493.us ], [ %4395, %after_bb490.us ], [ %4395, %after_bb487.us ], [ %4395, %after_bb484.us ], [ %4395, %after_bb481.us ], [ %4395, %after_bb478.us ], [ %4395, %after_bb475.us ], [ %4395, %after_bb472.us ], [ %4395, %after_bb469.us ], [ %4395, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4702 = phi i8 [ %4405, %true_bb626.us ], [ %4405, %after_bb625.us ], [ %4405, %after_bb622.us ], [ %4405, %after_bb619.us ], [ %4405, %after_bb616.us ], [ %4405, %after_bb613.us ], [ %4405, %after_bb610.us ], [ %4405, %after_bb607.us ], [ %4405, %after_bb604.us ], [ %4405, %after_bb601.us ], [ %4405, %after_bb598.us ], [ %4405, %after_bb595.us ], [ %4405, %after_bb592.us ], [ %4405, %after_bb589.us ], [ %4405, %after_bb586.us ], [ %4405, %after_bb583.us ], [ %4405, %after_bb580.us ], [ %4405, %after_bb577.us ], [ %4405, %after_bb574.us ], [ %4405, %after_bb571.us ], [ %4405, %after_bb568.us ], [ %4405, %after_bb565.us ], [ %4405, %after_bb562.us ], [ %4405, %after_bb559.us ], [ %4405, %after_bb556.us ], [ %4405, %after_bb553.us ], [ %4405, %after_bb550.us ], [ %4405, %after_bb547.us ], [ %4405, %after_bb544.us ], [ %4405, %after_bb541.us ], [ %4405, %after_bb538.us ], [ %4405, %after_bb535.us ], [ %4405, %after_bb532.us ], [ %4405, %after_bb529.us ], [ %4405, %after_bb526.us ], [ %4405, %after_bb523.us ], [ %4405, %after_bb520.us ], [ %4405, %after_bb517.us ], [ %4405, %after_bb514.us ], [ %4405, %after_bb511.us ], [ %4405, %after_bb508.us ], [ %4405, %after_bb505.us ], [ %4405, %after_bb502.us ], [ %4405, %after_bb499.us ], [ %4405, %after_bb496.us ], [ %4405, %after_bb493.us ], [ %4405, %after_bb490.us ], [ %4405, %after_bb487.us ], [ %4405, %after_bb484.us ], [ %4405, %after_bb481.us ], [ %4405, %after_bb478.us ], [ %4405, %after_bb475.us ], [ %4405, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4703 = phi i8 [ %4415, %true_bb626.us ], [ %4415, %after_bb625.us ], [ %4415, %after_bb622.us ], [ %4415, %after_bb619.us ], [ %4415, %after_bb616.us ], [ %4415, %after_bb613.us ], [ %4415, %after_bb610.us ], [ %4415, %after_bb607.us ], [ %4415, %after_bb604.us ], [ %4415, %after_bb601.us ], [ %4415, %after_bb598.us ], [ %4415, %after_bb595.us ], [ %4415, %after_bb592.us ], [ %4415, %after_bb589.us ], [ %4415, %after_bb586.us ], [ %4415, %after_bb583.us ], [ %4415, %after_bb580.us ], [ %4415, %after_bb577.us ], [ %4415, %after_bb574.us ], [ %4415, %after_bb571.us ], [ %4415, %after_bb568.us ], [ %4415, %after_bb565.us ], [ %4415, %after_bb562.us ], [ %4415, %after_bb559.us ], [ %4415, %after_bb556.us ], [ %4415, %after_bb553.us ], [ %4415, %after_bb550.us ], [ %4415, %after_bb547.us ], [ %4415, %after_bb544.us ], [ %4415, %after_bb541.us ], [ %4415, %after_bb538.us ], [ %4415, %after_bb535.us ], [ %4415, %after_bb532.us ], [ %4415, %after_bb529.us ], [ %4415, %after_bb526.us ], [ %4415, %after_bb523.us ], [ %4415, %after_bb520.us ], [ %4415, %after_bb517.us ], [ %4415, %after_bb514.us ], [ %4415, %after_bb511.us ], [ %4415, %after_bb508.us ], [ %4415, %after_bb505.us ], [ %4415, %after_bb502.us ], [ %4415, %after_bb499.us ], [ %4415, %after_bb496.us ], [ %4415, %after_bb493.us ], [ %4415, %after_bb490.us ], [ %4415, %after_bb487.us ], [ %4415, %after_bb484.us ], [ %4415, %after_bb481.us ], [ %4415, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4704 = phi i8 [ %4425, %true_bb626.us ], [ %4425, %after_bb625.us ], [ %4425, %after_bb622.us ], [ %4425, %after_bb619.us ], [ %4425, %after_bb616.us ], [ %4425, %after_bb613.us ], [ %4425, %after_bb610.us ], [ %4425, %after_bb607.us ], [ %4425, %after_bb604.us ], [ %4425, %after_bb601.us ], [ %4425, %after_bb598.us ], [ %4425, %after_bb595.us ], [ %4425, %after_bb592.us ], [ %4425, %after_bb589.us ], [ %4425, %after_bb586.us ], [ %4425, %after_bb583.us ], [ %4425, %after_bb580.us ], [ %4425, %after_bb577.us ], [ %4425, %after_bb574.us ], [ %4425, %after_bb571.us ], [ %4425, %after_bb568.us ], [ %4425, %after_bb565.us ], [ %4425, %after_bb562.us ], [ %4425, %after_bb559.us ], [ %4425, %after_bb556.us ], [ %4425, %after_bb553.us ], [ %4425, %after_bb550.us ], [ %4425, %after_bb547.us ], [ %4425, %after_bb544.us ], [ %4425, %after_bb541.us ], [ %4425, %after_bb538.us ], [ %4425, %after_bb535.us ], [ %4425, %after_bb532.us ], [ %4425, %after_bb529.us ], [ %4425, %after_bb526.us ], [ %4425, %after_bb523.us ], [ %4425, %after_bb520.us ], [ %4425, %after_bb517.us ], [ %4425, %after_bb514.us ], [ %4425, %after_bb511.us ], [ %4425, %after_bb508.us ], [ %4425, %after_bb505.us ], [ %4425, %after_bb502.us ], [ %4425, %after_bb499.us ], [ %4425, %after_bb496.us ], [ %4425, %after_bb493.us ], [ %4425, %after_bb490.us ], [ %4425, %after_bb487.us ], [ %4425, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4705 = phi i8 [ %4435, %true_bb626.us ], [ %4435, %after_bb625.us ], [ %4435, %after_bb622.us ], [ %4435, %after_bb619.us ], [ %4435, %after_bb616.us ], [ %4435, %after_bb613.us ], [ %4435, %after_bb610.us ], [ %4435, %after_bb607.us ], [ %4435, %after_bb604.us ], [ %4435, %after_bb601.us ], [ %4435, %after_bb598.us ], [ %4435, %after_bb595.us ], [ %4435, %after_bb592.us ], [ %4435, %after_bb589.us ], [ %4435, %after_bb586.us ], [ %4435, %after_bb583.us ], [ %4435, %after_bb580.us ], [ %4435, %after_bb577.us ], [ %4435, %after_bb574.us ], [ %4435, %after_bb571.us ], [ %4435, %after_bb568.us ], [ %4435, %after_bb565.us ], [ %4435, %after_bb562.us ], [ %4435, %after_bb559.us ], [ %4435, %after_bb556.us ], [ %4435, %after_bb553.us ], [ %4435, %after_bb550.us ], [ %4435, %after_bb547.us ], [ %4435, %after_bb544.us ], [ %4435, %after_bb541.us ], [ %4435, %after_bb538.us ], [ %4435, %after_bb535.us ], [ %4435, %after_bb532.us ], [ %4435, %after_bb529.us ], [ %4435, %after_bb526.us ], [ %4435, %after_bb523.us ], [ %4435, %after_bb520.us ], [ %4435, %after_bb517.us ], [ %4435, %after_bb514.us ], [ %4435, %after_bb511.us ], [ %4435, %after_bb508.us ], [ %4435, %after_bb505.us ], [ %4435, %after_bb502.us ], [ %4435, %after_bb499.us ], [ %4435, %after_bb496.us ], [ %4435, %after_bb493.us ], [ %4435, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4706 = phi i8 [ %4445, %true_bb626.us ], [ %4445, %after_bb625.us ], [ %4445, %after_bb622.us ], [ %4445, %after_bb619.us ], [ %4445, %after_bb616.us ], [ %4445, %after_bb613.us ], [ %4445, %after_bb610.us ], [ %4445, %after_bb607.us ], [ %4445, %after_bb604.us ], [ %4445, %after_bb601.us ], [ %4445, %after_bb598.us ], [ %4445, %after_bb595.us ], [ %4445, %after_bb592.us ], [ %4445, %after_bb589.us ], [ %4445, %after_bb586.us ], [ %4445, %after_bb583.us ], [ %4445, %after_bb580.us ], [ %4445, %after_bb577.us ], [ %4445, %after_bb574.us ], [ %4445, %after_bb571.us ], [ %4445, %after_bb568.us ], [ %4445, %after_bb565.us ], [ %4445, %after_bb562.us ], [ %4445, %after_bb559.us ], [ %4445, %after_bb556.us ], [ %4445, %after_bb553.us ], [ %4445, %after_bb550.us ], [ %4445, %after_bb547.us ], [ %4445, %after_bb544.us ], [ %4445, %after_bb541.us ], [ %4445, %after_bb538.us ], [ %4445, %after_bb535.us ], [ %4445, %after_bb532.us ], [ %4445, %after_bb529.us ], [ %4445, %after_bb526.us ], [ %4445, %after_bb523.us ], [ %4445, %after_bb520.us ], [ %4445, %after_bb517.us ], [ %4445, %after_bb514.us ], [ %4445, %after_bb511.us ], [ %4445, %after_bb508.us ], [ %4445, %after_bb505.us ], [ %4445, %after_bb502.us ], [ %4445, %after_bb499.us ], [ %4445, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4707 = phi i8 [ %4455, %true_bb626.us ], [ %4455, %after_bb625.us ], [ %4455, %after_bb622.us ], [ %4455, %after_bb619.us ], [ %4455, %after_bb616.us ], [ %4455, %after_bb613.us ], [ %4455, %after_bb610.us ], [ %4455, %after_bb607.us ], [ %4455, %after_bb604.us ], [ %4455, %after_bb601.us ], [ %4455, %after_bb598.us ], [ %4455, %after_bb595.us ], [ %4455, %after_bb592.us ], [ %4455, %after_bb589.us ], [ %4455, %after_bb586.us ], [ %4455, %after_bb583.us ], [ %4455, %after_bb580.us ], [ %4455, %after_bb577.us ], [ %4455, %after_bb574.us ], [ %4455, %after_bb571.us ], [ %4455, %after_bb568.us ], [ %4455, %after_bb565.us ], [ %4455, %after_bb562.us ], [ %4455, %after_bb559.us ], [ %4455, %after_bb556.us ], [ %4455, %after_bb553.us ], [ %4455, %after_bb550.us ], [ %4455, %after_bb547.us ], [ %4455, %after_bb544.us ], [ %4455, %after_bb541.us ], [ %4455, %after_bb538.us ], [ %4455, %after_bb535.us ], [ %4455, %after_bb532.us ], [ %4455, %after_bb529.us ], [ %4455, %after_bb526.us ], [ %4455, %after_bb523.us ], [ %4455, %after_bb520.us ], [ %4455, %after_bb517.us ], [ %4455, %after_bb514.us ], [ %4455, %after_bb511.us ], [ %4455, %after_bb508.us ], [ %4455, %after_bb505.us ], [ %4455, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4708 = phi i8 [ %4465, %true_bb626.us ], [ %4465, %after_bb625.us ], [ %4465, %after_bb622.us ], [ %4465, %after_bb619.us ], [ %4465, %after_bb616.us ], [ %4465, %after_bb613.us ], [ %4465, %after_bb610.us ], [ %4465, %after_bb607.us ], [ %4465, %after_bb604.us ], [ %4465, %after_bb601.us ], [ %4465, %after_bb598.us ], [ %4465, %after_bb595.us ], [ %4465, %after_bb592.us ], [ %4465, %after_bb589.us ], [ %4465, %after_bb586.us ], [ %4465, %after_bb583.us ], [ %4465, %after_bb580.us ], [ %4465, %after_bb577.us ], [ %4465, %after_bb574.us ], [ %4465, %after_bb571.us ], [ %4465, %after_bb568.us ], [ %4465, %after_bb565.us ], [ %4465, %after_bb562.us ], [ %4465, %after_bb559.us ], [ %4465, %after_bb556.us ], [ %4465, %after_bb553.us ], [ %4465, %after_bb550.us ], [ %4465, %after_bb547.us ], [ %4465, %after_bb544.us ], [ %4465, %after_bb541.us ], [ %4465, %after_bb538.us ], [ %4465, %after_bb535.us ], [ %4465, %after_bb532.us ], [ %4465, %after_bb529.us ], [ %4465, %after_bb526.us ], [ %4465, %after_bb523.us ], [ %4465, %after_bb520.us ], [ %4465, %after_bb517.us ], [ %4465, %after_bb514.us ], [ %4465, %after_bb511.us ], [ %4465, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4709 = phi i8 [ %4475, %true_bb626.us ], [ %4475, %after_bb625.us ], [ %4475, %after_bb622.us ], [ %4475, %after_bb619.us ], [ %4475, %after_bb616.us ], [ %4475, %after_bb613.us ], [ %4475, %after_bb610.us ], [ %4475, %after_bb607.us ], [ %4475, %after_bb604.us ], [ %4475, %after_bb601.us ], [ %4475, %after_bb598.us ], [ %4475, %after_bb595.us ], [ %4475, %after_bb592.us ], [ %4475, %after_bb589.us ], [ %4475, %after_bb586.us ], [ %4475, %after_bb583.us ], [ %4475, %after_bb580.us ], [ %4475, %after_bb577.us ], [ %4475, %after_bb574.us ], [ %4475, %after_bb571.us ], [ %4475, %after_bb568.us ], [ %4475, %after_bb565.us ], [ %4475, %after_bb562.us ], [ %4475, %after_bb559.us ], [ %4475, %after_bb556.us ], [ %4475, %after_bb553.us ], [ %4475, %after_bb550.us ], [ %4475, %after_bb547.us ], [ %4475, %after_bb544.us ], [ %4475, %after_bb541.us ], [ %4475, %after_bb538.us ], [ %4475, %after_bb535.us ], [ %4475, %after_bb532.us ], [ %4475, %after_bb529.us ], [ %4475, %after_bb526.us ], [ %4475, %after_bb523.us ], [ %4475, %after_bb520.us ], [ %4475, %after_bb517.us ], [ %4475, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4710 = phi i8 [ %4485, %true_bb626.us ], [ %4485, %after_bb625.us ], [ %4485, %after_bb622.us ], [ %4485, %after_bb619.us ], [ %4485, %after_bb616.us ], [ %4485, %after_bb613.us ], [ %4485, %after_bb610.us ], [ %4485, %after_bb607.us ], [ %4485, %after_bb604.us ], [ %4485, %after_bb601.us ], [ %4485, %after_bb598.us ], [ %4485, %after_bb595.us ], [ %4485, %after_bb592.us ], [ %4485, %after_bb589.us ], [ %4485, %after_bb586.us ], [ %4485, %after_bb583.us ], [ %4485, %after_bb580.us ], [ %4485, %after_bb577.us ], [ %4485, %after_bb574.us ], [ %4485, %after_bb571.us ], [ %4485, %after_bb568.us ], [ %4485, %after_bb565.us ], [ %4485, %after_bb562.us ], [ %4485, %after_bb559.us ], [ %4485, %after_bb556.us ], [ %4485, %after_bb553.us ], [ %4485, %after_bb550.us ], [ %4485, %after_bb547.us ], [ %4485, %after_bb544.us ], [ %4485, %after_bb541.us ], [ %4485, %after_bb538.us ], [ %4485, %after_bb535.us ], [ %4485, %after_bb532.us ], [ %4485, %after_bb529.us ], [ %4485, %after_bb526.us ], [ %4485, %after_bb523.us ], [ %4485, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4711 = phi i8 [ %4495, %true_bb626.us ], [ %4495, %after_bb625.us ], [ %4495, %after_bb622.us ], [ %4495, %after_bb619.us ], [ %4495, %after_bb616.us ], [ %4495, %after_bb613.us ], [ %4495, %after_bb610.us ], [ %4495, %after_bb607.us ], [ %4495, %after_bb604.us ], [ %4495, %after_bb601.us ], [ %4495, %after_bb598.us ], [ %4495, %after_bb595.us ], [ %4495, %after_bb592.us ], [ %4495, %after_bb589.us ], [ %4495, %after_bb586.us ], [ %4495, %after_bb583.us ], [ %4495, %after_bb580.us ], [ %4495, %after_bb577.us ], [ %4495, %after_bb574.us ], [ %4495, %after_bb571.us ], [ %4495, %after_bb568.us ], [ %4495, %after_bb565.us ], [ %4495, %after_bb562.us ], [ %4495, %after_bb559.us ], [ %4495, %after_bb556.us ], [ %4495, %after_bb553.us ], [ %4495, %after_bb550.us ], [ %4495, %after_bb547.us ], [ %4495, %after_bb544.us ], [ %4495, %after_bb541.us ], [ %4495, %after_bb538.us ], [ %4495, %after_bb535.us ], [ %4495, %after_bb532.us ], [ %4495, %after_bb529.us ], [ %4495, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4712 = phi i8 [ %4505, %true_bb626.us ], [ %4505, %after_bb625.us ], [ %4505, %after_bb622.us ], [ %4505, %after_bb619.us ], [ %4505, %after_bb616.us ], [ %4505, %after_bb613.us ], [ %4505, %after_bb610.us ], [ %4505, %after_bb607.us ], [ %4505, %after_bb604.us ], [ %4505, %after_bb601.us ], [ %4505, %after_bb598.us ], [ %4505, %after_bb595.us ], [ %4505, %after_bb592.us ], [ %4505, %after_bb589.us ], [ %4505, %after_bb586.us ], [ %4505, %after_bb583.us ], [ %4505, %after_bb580.us ], [ %4505, %after_bb577.us ], [ %4505, %after_bb574.us ], [ %4505, %after_bb571.us ], [ %4505, %after_bb568.us ], [ %4505, %after_bb565.us ], [ %4505, %after_bb562.us ], [ %4505, %after_bb559.us ], [ %4505, %after_bb556.us ], [ %4505, %after_bb553.us ], [ %4505, %after_bb550.us ], [ %4505, %after_bb547.us ], [ %4505, %after_bb544.us ], [ %4505, %after_bb541.us ], [ %4505, %after_bb538.us ], [ %4505, %after_bb535.us ], [ %4505, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4713 = phi i8 [ %4515, %true_bb626.us ], [ %4515, %after_bb625.us ], [ %4515, %after_bb622.us ], [ %4515, %after_bb619.us ], [ %4515, %after_bb616.us ], [ %4515, %after_bb613.us ], [ %4515, %after_bb610.us ], [ %4515, %after_bb607.us ], [ %4515, %after_bb604.us ], [ %4515, %after_bb601.us ], [ %4515, %after_bb598.us ], [ %4515, %after_bb595.us ], [ %4515, %after_bb592.us ], [ %4515, %after_bb589.us ], [ %4515, %after_bb586.us ], [ %4515, %after_bb583.us ], [ %4515, %after_bb580.us ], [ %4515, %after_bb577.us ], [ %4515, %after_bb574.us ], [ %4515, %after_bb571.us ], [ %4515, %after_bb568.us ], [ %4515, %after_bb565.us ], [ %4515, %after_bb562.us ], [ %4515, %after_bb559.us ], [ %4515, %after_bb556.us ], [ %4515, %after_bb553.us ], [ %4515, %after_bb550.us ], [ %4515, %after_bb547.us ], [ %4515, %after_bb544.us ], [ %4515, %after_bb541.us ], [ %4515, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4714 = phi i8 [ %4525, %true_bb626.us ], [ %4525, %after_bb625.us ], [ %4525, %after_bb622.us ], [ %4525, %after_bb619.us ], [ %4525, %after_bb616.us ], [ %4525, %after_bb613.us ], [ %4525, %after_bb610.us ], [ %4525, %after_bb607.us ], [ %4525, %after_bb604.us ], [ %4525, %after_bb601.us ], [ %4525, %after_bb598.us ], [ %4525, %after_bb595.us ], [ %4525, %after_bb592.us ], [ %4525, %after_bb589.us ], [ %4525, %after_bb586.us ], [ %4525, %after_bb583.us ], [ %4525, %after_bb580.us ], [ %4525, %after_bb577.us ], [ %4525, %after_bb574.us ], [ %4525, %after_bb571.us ], [ %4525, %after_bb568.us ], [ %4525, %after_bb565.us ], [ %4525, %after_bb562.us ], [ %4525, %after_bb559.us ], [ %4525, %after_bb556.us ], [ %4525, %after_bb553.us ], [ %4525, %after_bb550.us ], [ %4525, %after_bb547.us ], [ %4525, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4715 = phi i8 [ %4535, %true_bb626.us ], [ %4535, %after_bb625.us ], [ %4535, %after_bb622.us ], [ %4535, %after_bb619.us ], [ %4535, %after_bb616.us ], [ %4535, %after_bb613.us ], [ %4535, %after_bb610.us ], [ %4535, %after_bb607.us ], [ %4535, %after_bb604.us ], [ %4535, %after_bb601.us ], [ %4535, %after_bb598.us ], [ %4535, %after_bb595.us ], [ %4535, %after_bb592.us ], [ %4535, %after_bb589.us ], [ %4535, %after_bb586.us ], [ %4535, %after_bb583.us ], [ %4535, %after_bb580.us ], [ %4535, %after_bb577.us ], [ %4535, %after_bb574.us ], [ %4535, %after_bb571.us ], [ %4535, %after_bb568.us ], [ %4535, %after_bb565.us ], [ %4535, %after_bb562.us ], [ %4535, %after_bb559.us ], [ %4535, %after_bb556.us ], [ %4535, %after_bb553.us ], [ %4535, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4716 = phi i8 [ %4545, %true_bb626.us ], [ %4545, %after_bb625.us ], [ %4545, %after_bb622.us ], [ %4545, %after_bb619.us ], [ %4545, %after_bb616.us ], [ %4545, %after_bb613.us ], [ %4545, %after_bb610.us ], [ %4545, %after_bb607.us ], [ %4545, %after_bb604.us ], [ %4545, %after_bb601.us ], [ %4545, %after_bb598.us ], [ %4545, %after_bb595.us ], [ %4545, %after_bb592.us ], [ %4545, %after_bb589.us ], [ %4545, %after_bb586.us ], [ %4545, %after_bb583.us ], [ %4545, %after_bb580.us ], [ %4545, %after_bb577.us ], [ %4545, %after_bb574.us ], [ %4545, %after_bb571.us ], [ %4545, %after_bb568.us ], [ %4545, %after_bb565.us ], [ %4545, %after_bb562.us ], [ %4545, %after_bb559.us ], [ %4545, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4717 = phi i8 [ %4555, %true_bb626.us ], [ %4555, %after_bb625.us ], [ %4555, %after_bb622.us ], [ %4555, %after_bb619.us ], [ %4555, %after_bb616.us ], [ %4555, %after_bb613.us ], [ %4555, %after_bb610.us ], [ %4555, %after_bb607.us ], [ %4555, %after_bb604.us ], [ %4555, %after_bb601.us ], [ %4555, %after_bb598.us ], [ %4555, %after_bb595.us ], [ %4555, %after_bb592.us ], [ %4555, %after_bb589.us ], [ %4555, %after_bb586.us ], [ %4555, %after_bb583.us ], [ %4555, %after_bb580.us ], [ %4555, %after_bb577.us ], [ %4555, %after_bb574.us ], [ %4555, %after_bb571.us ], [ %4555, %after_bb568.us ], [ %4555, %after_bb565.us ], [ %4555, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4718 = phi i8 [ %4565, %true_bb626.us ], [ %4565, %after_bb625.us ], [ %4565, %after_bb622.us ], [ %4565, %after_bb619.us ], [ %4565, %after_bb616.us ], [ %4565, %after_bb613.us ], [ %4565, %after_bb610.us ], [ %4565, %after_bb607.us ], [ %4565, %after_bb604.us ], [ %4565, %after_bb601.us ], [ %4565, %after_bb598.us ], [ %4565, %after_bb595.us ], [ %4565, %after_bb592.us ], [ %4565, %after_bb589.us ], [ %4565, %after_bb586.us ], [ %4565, %after_bb583.us ], [ %4565, %after_bb580.us ], [ %4565, %after_bb577.us ], [ %4565, %after_bb574.us ], [ %4565, %after_bb571.us ], [ %4565, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4719 = phi i8 [ %4575, %true_bb626.us ], [ %4575, %after_bb625.us ], [ %4575, %after_bb622.us ], [ %4575, %after_bb619.us ], [ %4575, %after_bb616.us ], [ %4575, %after_bb613.us ], [ %4575, %after_bb610.us ], [ %4575, %after_bb607.us ], [ %4575, %after_bb604.us ], [ %4575, %after_bb601.us ], [ %4575, %after_bb598.us ], [ %4575, %after_bb595.us ], [ %4575, %after_bb592.us ], [ %4575, %after_bb589.us ], [ %4575, %after_bb586.us ], [ %4575, %after_bb583.us ], [ %4575, %after_bb580.us ], [ %4575, %after_bb577.us ], [ %4575, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4720 = phi i8 [ %4585, %true_bb626.us ], [ %4585, %after_bb625.us ], [ %4585, %after_bb622.us ], [ %4585, %after_bb619.us ], [ %4585, %after_bb616.us ], [ %4585, %after_bb613.us ], [ %4585, %after_bb610.us ], [ %4585, %after_bb607.us ], [ %4585, %after_bb604.us ], [ %4585, %after_bb601.us ], [ %4585, %after_bb598.us ], [ %4585, %after_bb595.us ], [ %4585, %after_bb592.us ], [ %4585, %after_bb589.us ], [ %4585, %after_bb586.us ], [ %4585, %after_bb583.us ], [ %4585, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4721 = phi i8 [ %4595, %true_bb626.us ], [ %4595, %after_bb625.us ], [ %4595, %after_bb622.us ], [ %4595, %after_bb619.us ], [ %4595, %after_bb616.us ], [ %4595, %after_bb613.us ], [ %4595, %after_bb610.us ], [ %4595, %after_bb607.us ], [ %4595, %after_bb604.us ], [ %4595, %after_bb601.us ], [ %4595, %after_bb598.us ], [ %4595, %after_bb595.us ], [ %4595, %after_bb592.us ], [ %4595, %after_bb589.us ], [ %4595, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4722 = phi i8 [ %4605, %true_bb626.us ], [ %4605, %after_bb625.us ], [ %4605, %after_bb622.us ], [ %4605, %after_bb619.us ], [ %4605, %after_bb616.us ], [ %4605, %after_bb613.us ], [ %4605, %after_bb610.us ], [ %4605, %after_bb607.us ], [ %4605, %after_bb604.us ], [ %4605, %after_bb601.us ], [ %4605, %after_bb598.us ], [ %4605, %after_bb595.us ], [ %4605, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4723 = phi i8 [ %4615, %true_bb626.us ], [ %4615, %after_bb625.us ], [ %4615, %after_bb622.us ], [ %4615, %after_bb619.us ], [ %4615, %after_bb616.us ], [ %4615, %after_bb613.us ], [ %4615, %after_bb610.us ], [ %4615, %after_bb607.us ], [ %4615, %after_bb604.us ], [ %4615, %after_bb601.us ], [ %4615, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4724 = phi i8 [ %4625, %true_bb626.us ], [ %4625, %after_bb625.us ], [ %4625, %after_bb622.us ], [ %4625, %after_bb619.us ], [ %4625, %after_bb616.us ], [ %4625, %after_bb613.us ], [ %4625, %after_bb610.us ], [ %4625, %after_bb607.us ], [ %4625, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4725 = phi i8 [ %4635, %true_bb626.us ], [ %4635, %after_bb625.us ], [ %4635, %after_bb622.us ], [ %4635, %after_bb619.us ], [ %4635, %after_bb616.us ], [ %4635, %after_bb613.us ], [ %4635, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4726 = phi i8 [ %4645, %true_bb626.us ], [ %4645, %after_bb625.us ], [ %4645, %after_bb622.us ], [ %4645, %after_bb619.us ], [ %4645, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4727 = phi i8 [ %4655, %true_bb626.us ], [ %4655, %after_bb625.us ], [ %4655, %after_bb622.us ], [ 0, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4728 = phi i8 [ %4665, %true_bb626.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %4729 = insertelement <128 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %3974, i32 0
  %4730 = insertelement <128 x i8> %4729, i8 %4313, i32 1
  %4731 = insertelement <128 x i8> %4730, i8 %4314, i32 2
  %4732 = insertelement <128 x i8> %4731, i8 %4312, i32 3
  %4733 = insertelement <128 x i8> %4732, i8 %4315, i32 4
  %4734 = insertelement <128 x i8> %4733, i8 %4311, i32 5
  %4735 = insertelement <128 x i8> %4734, i8 %4316, i32 6
  %4736 = insertelement <128 x i8> %4735, i8 %4310, i32 7
  %4737 = insertelement <128 x i8> %4736, i8 %4317, i32 8
  %4738 = insertelement <128 x i8> %4737, i8 %4309, i32 9
  %4739 = insertelement <128 x i8> %4738, i8 %4318, i32 10
  %4740 = insertelement <128 x i8> %4739, i8 %4308, i32 11
  %4741 = insertelement <128 x i8> %4740, i8 %4319, i32 12
  %4742 = insertelement <128 x i8> %4741, i8 %4307, i32 13
  %4743 = insertelement <128 x i8> %4742, i8 %4320, i32 14
  %4744 = insertelement <128 x i8> %4743, i8 %4306, i32 15
  %4745 = insertelement <128 x i8> %4744, i8 %4321, i32 16
  %4746 = insertelement <128 x i8> %4745, i8 %4305, i32 17
  %4747 = insertelement <128 x i8> %4746, i8 %4322, i32 18
  %4748 = insertelement <128 x i8> %4747, i8 %4304, i32 19
  %4749 = insertelement <128 x i8> %4748, i8 %4323, i32 20
  %4750 = insertelement <128 x i8> %4749, i8 %4303, i32 21
  %4751 = insertelement <128 x i8> %4750, i8 %4324, i32 22
  %4752 = insertelement <128 x i8> %4751, i8 %4302, i32 23
  %4753 = insertelement <128 x i8> %4752, i8 %4325, i32 24
  %4754 = insertelement <128 x i8> %4753, i8 %4301, i32 25
  %4755 = insertelement <128 x i8> %4754, i8 %4326, i32 26
  %4756 = insertelement <128 x i8> %4755, i8 %4300, i32 27
  %4757 = insertelement <128 x i8> %4756, i8 %4327, i32 28
  %4758 = insertelement <128 x i8> %4757, i8 %4299, i32 29
  %4759 = insertelement <128 x i8> %4758, i8 %4328, i32 30
  %4760 = insertelement <128 x i8> %4759, i8 %4298, i32 31
  %4761 = insertelement <128 x i8> %4760, i8 %4329, i32 32
  %4762 = insertelement <128 x i8> %4761, i8 %4297, i32 33
  %4763 = insertelement <128 x i8> %4762, i8 %4330, i32 34
  %4764 = insertelement <128 x i8> %4763, i8 %4296, i32 35
  %4765 = insertelement <128 x i8> %4764, i8 %4331, i32 36
  %4766 = insertelement <128 x i8> %4765, i8 %4295, i32 37
  %4767 = insertelement <128 x i8> %4766, i8 %4332, i32 38
  %4768 = insertelement <128 x i8> %4767, i8 %4294, i32 39
  %4769 = insertelement <128 x i8> %4768, i8 %4333, i32 40
  %4770 = insertelement <128 x i8> %4769, i8 %4293, i32 41
  %4771 = insertelement <128 x i8> %4770, i8 %4334, i32 42
  %4772 = insertelement <128 x i8> %4771, i8 %4292, i32 43
  %4773 = insertelement <128 x i8> %4772, i8 %4335, i32 44
  %4774 = insertelement <128 x i8> %4773, i8 %4291, i32 45
  %4775 = insertelement <128 x i8> %4774, i8 %4336, i32 46
  %4776 = insertelement <128 x i8> %4775, i8 %4290, i32 47
  %4777 = insertelement <128 x i8> %4776, i8 %4337, i32 48
  %4778 = insertelement <128 x i8> %4777, i8 %4289, i32 49
  %4779 = insertelement <128 x i8> %4778, i8 %4338, i32 50
  %4780 = insertelement <128 x i8> %4779, i8 %4288, i32 51
  %4781 = insertelement <128 x i8> %4780, i8 %4339, i32 52
  %4782 = insertelement <128 x i8> %4781, i8 %4287, i32 53
  %4783 = insertelement <128 x i8> %4782, i8 %4340, i32 54
  %4784 = insertelement <128 x i8> %4783, i8 %4286, i32 55
  %4785 = insertelement <128 x i8> %4784, i8 %4341, i32 56
  %4786 = insertelement <128 x i8> %4785, i8 %4285, i32 57
  %4787 = insertelement <128 x i8> %4786, i8 %4342, i32 58
  %4788 = insertelement <128 x i8> %4787, i8 %4284, i32 59
  %4789 = insertelement <128 x i8> %4788, i8 %4343, i32 60
  %4790 = insertelement <128 x i8> %4789, i8 %4283, i32 61
  %4791 = insertelement <128 x i8> %4790, i8 %4344, i32 62
  %4792 = insertelement <128 x i8> %4791, i8 %4350, i32 63
  %4793 = insertelement <128 x i8> %4792, i8 %4697, i32 64
  %4794 = insertelement <128 x i8> %4793, i8 %4696, i32 65
  %4795 = insertelement <128 x i8> %4794, i8 %4698, i32 66
  %4796 = insertelement <128 x i8> %4795, i8 %4695, i32 67
  %4797 = insertelement <128 x i8> %4796, i8 %4699, i32 68
  %4798 = insertelement <128 x i8> %4797, i8 %4694, i32 69
  %4799 = insertelement <128 x i8> %4798, i8 %4700, i32 70
  %4800 = insertelement <128 x i8> %4799, i8 %4693, i32 71
  %4801 = insertelement <128 x i8> %4800, i8 %4701, i32 72
  %4802 = insertelement <128 x i8> %4801, i8 %4692, i32 73
  %4803 = insertelement <128 x i8> %4802, i8 %4702, i32 74
  %4804 = insertelement <128 x i8> %4803, i8 %4691, i32 75
  %4805 = insertelement <128 x i8> %4804, i8 %4703, i32 76
  %4806 = insertelement <128 x i8> %4805, i8 %4690, i32 77
  %4807 = insertelement <128 x i8> %4806, i8 %4704, i32 78
  %4808 = insertelement <128 x i8> %4807, i8 %4689, i32 79
  %4809 = insertelement <128 x i8> %4808, i8 %4705, i32 80
  %4810 = insertelement <128 x i8> %4809, i8 %4688, i32 81
  %4811 = insertelement <128 x i8> %4810, i8 %4706, i32 82
  %4812 = insertelement <128 x i8> %4811, i8 %4687, i32 83
  %4813 = insertelement <128 x i8> %4812, i8 %4707, i32 84
  %4814 = insertelement <128 x i8> %4813, i8 %4686, i32 85
  %4815 = insertelement <128 x i8> %4814, i8 %4708, i32 86
  %4816 = insertelement <128 x i8> %4815, i8 %4685, i32 87
  %4817 = insertelement <128 x i8> %4816, i8 %4709, i32 88
  %4818 = insertelement <128 x i8> %4817, i8 %4684, i32 89
  %4819 = insertelement <128 x i8> %4818, i8 %4710, i32 90
  %4820 = insertelement <128 x i8> %4819, i8 %4683, i32 91
  %4821 = insertelement <128 x i8> %4820, i8 %4711, i32 92
  %4822 = insertelement <128 x i8> %4821, i8 %4682, i32 93
  %4823 = insertelement <128 x i8> %4822, i8 %4712, i32 94
  %4824 = insertelement <128 x i8> %4823, i8 %4681, i32 95
  %4825 = insertelement <128 x i8> %4824, i8 %4713, i32 96
  %4826 = insertelement <128 x i8> %4825, i8 %4680, i32 97
  %4827 = insertelement <128 x i8> %4826, i8 %4714, i32 98
  %4828 = insertelement <128 x i8> %4827, i8 %4679, i32 99
  %4829 = insertelement <128 x i8> %4828, i8 %4715, i32 100
  %4830 = insertelement <128 x i8> %4829, i8 %4678, i32 101
  %4831 = insertelement <128 x i8> %4830, i8 %4716, i32 102
  %4832 = insertelement <128 x i8> %4831, i8 %4677, i32 103
  %4833 = insertelement <128 x i8> %4832, i8 %4717, i32 104
  %4834 = insertelement <128 x i8> %4833, i8 %4676, i32 105
  %4835 = insertelement <128 x i8> %4834, i8 %4718, i32 106
  %4836 = insertelement <128 x i8> %4835, i8 %4675, i32 107
  %4837 = insertelement <128 x i8> %4836, i8 %4719, i32 108
  %4838 = insertelement <128 x i8> %4837, i8 %4674, i32 109
  %4839 = insertelement <128 x i8> %4838, i8 %4720, i32 110
  %4840 = insertelement <128 x i8> %4839, i8 %4673, i32 111
  %4841 = insertelement <128 x i8> %4840, i8 %4721, i32 112
  %4842 = insertelement <128 x i8> %4841, i8 %4672, i32 113
  %4843 = insertelement <128 x i8> %4842, i8 %4722, i32 114
  %4844 = insertelement <128 x i8> %4843, i8 %4671, i32 115
  %4845 = insertelement <128 x i8> %4844, i8 %4723, i32 116
  %4846 = insertelement <128 x i8> %4845, i8 %4670, i32 117
  %4847 = insertelement <128 x i8> %4846, i8 %4724, i32 118
  %4848 = insertelement <128 x i8> %4847, i8 %4669, i32 119
  %4849 = insertelement <128 x i8> %4848, i8 %4725, i32 120
  %4850 = insertelement <128 x i8> %4849, i8 %4668, i32 121
  %4851 = insertelement <128 x i8> %4850, i8 %4726, i32 122
  %4852 = insertelement <128 x i8> %4851, i8 %4667, i32 123
  %4853 = insertelement <128 x i8> %4852, i8 %4727, i32 124
  %4854 = insertelement <128 x i8> %4853, i8 %4666, i32 125
  %4855 = insertelement <128 x i8> %4854, i8 %4728, i32 126
  %4856 = add nsw i32 %t2453.us, %resampled_input.s0.x.rebased247.us
  %4857 = shl nsw i32 %4856, 7
  %4858 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4857
  %4859 = bitcast i8* %4858 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %4855, <128 x i8>* %4859, i32 128, <128 x i1> %3614), !tbaa !127
  %4860 = add nuw nsw i32 %resampled_input.s0.x.rebased247.us, 1
  %.not710.us = icmp eq i32 %resampled_input.s0.x.rebased247.us, %t2448
  br i1 %.not710.us, label %"end for resampled_input.s0.x.rebased246.loopexit.us", label %"for resampled_input.s0.x.rebased245.us"

"end for resampled_input.s0.x.rebased246.loopexit.us": ; preds = %after_bb631.us
  %4861 = add nuw nsw i32 %resampled_input.s0.y.rebased244.us, 1
  %.not709.us = icmp eq i32 %resampled_input.s0.y.rebased244.us, %t2447
  br i1 %.not709.us, label %"consume resampled_input632", label %"for resampled_input.s0.y.rebased242.us"

"consume resampled_input632":                     ; preds = %"end for resampled_input.s0.x.rebased246.loopexit.us", %"end for resampled_input.s0.x.rebased240.loopexit.us", %"for resampled_input.s0.y.rebased242.preheader", %"for resampled_input.s0.y.rebased236.preheader", %next_bb235, %then_bb234
  br i1 %3884, label %"for output.s0.y.yo633.preheader", label %"end for output.s0.y.yo634", !prof !101

"for output.s0.y.yo633.preheader":                ; preds = %"consume resampled_input632"
  %4862 = add nsw i32 %output.s0.b.rebased228, %14
  %4863 = mul nsw i32 %4862, %25
  br label %"for output.s0.y.yo633"

"for output.s0.y.yo633":                          ; preds = %"for output.s0.y.yo633.preheader", %"end for output.s0.x.xo637"
  %output.s0.y.yo635 = phi i32 [ %4876, %"end for output.s0.x.xo637" ], [ 0, %"for output.s0.y.yo633.preheader" ]
  %4864 = add nsw i32 %output.s0.y.yo635, %22
  %4865 = mul nsw i32 %4864, %stride_y
  %4866 = add nsw i32 %3885, %4865
  %t2476 = mul nsw i32 %4866, %3812
  %4867 = add nsw i32 %3886, %4865
  %t2478 = mul nsw i32 %4867, %3812
  %4868 = sub nsw i32 %4865, %resampled_input.y.min_realized
  %t2480 = mul nsw i32 %4868, %3812
  br i1 %3887, label %"for output.s0.x.xo636.preheader", label %"end for output.s0.x.xo637", !prof !101

"for output.s0.x.xo636.preheader":                ; preds = %"for output.s0.y.yo633"
  %4869 = mul nsw i32 %4864, %24
  %4870 = add i32 %4869, %4863
  br label %"for output.s0.x.xo636"

"end for output.s0.y.yo634":                      ; preds = %"end for output.s0.x.xo637", %"consume resampled_input632"
  %4871 = add nuw nsw i32 %output.s0.b.rebased228, 1
  %.not703 = icmp eq i32 %4871, %15
  br i1 %.not703, label %if.then.i.loopexit, label %"for output.s0.b.rebased226"

"for output.s0.x.xo636":                          ; preds = %"for output.s0.x.xo636.preheader", %"consume convolved649"
  %output.s0.x.xo638 = phi i32 [ %5233, %"consume convolved649" ], [ 0, %"for output.s0.x.xo636.preheader" ]
  %4872 = load <32 x i32>, <32 x i32>* %3750, align 128, !tbaa !129
  %4873 = load <32 x i32>, <32 x i32>* %3753, align 128, !tbaa !137
  %4874 = load <32 x i32>, <32 x i32>* %3756, align 128, !tbaa !139
  %4875 = load <32 x i32>, <32 x i32>* %3759, align 128, !tbaa !142
  br i1 %3556, label %then_bb641, label %next_bb642

"end for output.s0.x.xo637":                      ; preds = %"consume convolved649", %"for output.s0.y.yo633"
  %4876 = add nuw nsw i32 %output.s0.y.yo635, 1
  %.not704 = icmp eq i32 %4876, %23
  br i1 %.not704, label %"end for output.s0.y.yo634", label %"for output.s0.y.yo633"

then_bb641:                                       ; preds = %"for output.s0.x.xo636"
  %4877 = load <64 x i16>, <64 x i16>* %3890, align 128, !tbaa !105
  %4878 = add nsw i32 %output.s0.x.xo638, %19
  %4879 = mul nsw i32 %4878, %stride_x
  %4880 = add i32 %4879, %3891
  %4881 = add i32 %4880, %t2476
  %4882 = shl nsw i32 %4881, 7
  %4883 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4882
  %4884 = bitcast i8* %4883 to <64 x i8>*
  %4885 = load <64 x i8>, <64 x i8>* %4884, align 128, !tbaa !127
  %4886 = zext <64 x i8> %4885 to <64 x i16>
  %4887 = load <64 x i16>, <64 x i16>* %3893, align 128, !tbaa !105
  %4888 = add i32 %4879, %3894
  %4889 = add i32 %4888, %t2476
  %4890 = shl nsw i32 %4889, 7
  %4891 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4890
  %4892 = bitcast i8* %4891 to <64 x i8>*
  %4893 = load <64 x i8>, <64 x i8>* %4892, align 128, !tbaa !127
  %4894 = zext <64 x i8> %4893 to <64 x i16>
  %4895 = load <64 x i16>, <64 x i16>* %3895, align 128, !tbaa !105
  %4896 = add i32 %4879, %t2476
  %4897 = sub i32 %4896, %resampled_input.x.min_realized
  %4898 = shl nsw i32 %4897, 7
  %4899 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4898
  %4900 = bitcast i8* %4899 to <64 x i8>*
  %4901 = load <64 x i8>, <64 x i8>* %4900, align 128, !tbaa !127
  %4902 = zext <64 x i8> %4901 to <64 x i16>
  %4903 = load <64 x i16>, <64 x i16>* %3898, align 128, !tbaa !105
  %4904 = add i32 %4880, %t2478
  %4905 = shl nsw i32 %4904, 7
  %4906 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4905
  %4907 = bitcast i8* %4906 to <64 x i8>*
  %4908 = load <64 x i8>, <64 x i8>* %4907, align 128, !tbaa !127
  %4909 = zext <64 x i8> %4908 to <64 x i16>
  %4910 = load <64 x i16>, <64 x i16>* %3900, align 128, !tbaa !105
  %4911 = add i32 %4888, %t2478
  %4912 = shl nsw i32 %4911, 7
  %4913 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4912
  %4914 = bitcast i8* %4913 to <64 x i8>*
  %4915 = load <64 x i8>, <64 x i8>* %4914, align 128, !tbaa !127
  %4916 = zext <64 x i8> %4915 to <64 x i16>
  %4917 = load <64 x i16>, <64 x i16>* %3901, align 128, !tbaa !105
  %4918 = add i32 %4879, %t2478
  %4919 = sub i32 %4918, %resampled_input.x.min_realized
  %4920 = shl nsw i32 %4919, 7
  %4921 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4920
  %4922 = bitcast i8* %4921 to <64 x i8>*
  %4923 = load <64 x i8>, <64 x i8>* %4922, align 128, !tbaa !127
  %4924 = zext <64 x i8> %4923 to <64 x i16>
  %4925 = load <64 x i16>, <64 x i16>* %3903, align 128, !tbaa !178
  %4926 = add i32 %4880, %t2480
  %4927 = shl nsw i32 %4926, 7
  %4928 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4927
  %4929 = bitcast i8* %4928 to <64 x i8>*
  %4930 = load <64 x i8>, <64 x i8>* %4929, align 128, !tbaa !127
  %4931 = zext <64 x i8> %4930 to <64 x i16>
  %4932 = load <64 x i16>, <64 x i16>* %3905, align 128, !tbaa !184
  %4933 = add i32 %4888, %t2480
  %4934 = shl nsw i32 %4933, 7
  %4935 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4934
  %4936 = bitcast i8* %4935 to <64 x i8>*
  %4937 = load <64 x i8>, <64 x i8>* %4936, align 128, !tbaa !127
  %4938 = zext <64 x i8> %4937 to <64 x i16>
  %4939 = load <64 x i16>, <64 x i16>* %3906, align 128, !tbaa !188
  %4940 = add i32 %4879, %t2480
  %4941 = sub i32 %4940, %resampled_input.x.min_realized
  %4942 = shl nsw i32 %4941, 7
  %4943 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4942
  %4944 = bitcast i8* %4943 to <64 x i8>*
  %4945 = load <64 x i8>, <64 x i8>* %4944, align 128, !tbaa !127
  %4946 = zext <64 x i8> %4945 to <64 x i16>
  %4947 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4873, <32 x i32> %4872)
  %4948 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4895, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4949 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4902, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4950 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %4948, <64 x i16> %4949, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4951 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4917, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4952 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4924, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4953 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %4951, <64 x i16> %4952, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4954 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4939, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4955 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4946, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4956 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %4954, <64 x i16> %4955, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4957 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %4956, <64 x i32> %4947, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %4958 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4925, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4959 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4931, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4960 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %4957, <64 x i16> %4958, <64 x i16> %4959, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4961 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4932, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4962 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4938, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4963 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %4961, <64 x i16> %4962, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4964 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %4960, <64 x i32> %4963, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %4965 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %4953, <64 x i32> %4964, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %4966 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4903, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4967 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4909, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4968 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %4965, <64 x i16> %4966, <64 x i16> %4967, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4969 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4910, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4970 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4916, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4971 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %4969, <64 x i16> %4970, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4972 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %4968, <64 x i32> %4971, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %4973 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %4950, <64 x i32> %4972, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %4974 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4877, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4975 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4886, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4976 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %4973, <64 x i16> %4974, <64 x i16> %4975, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4977 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4887, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4978 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4894, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %4979 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %4977, <64 x i16> %4978, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %4980 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %4976, <64 x i32> %4979, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %4981 = load <64 x i16>, <64 x i16>* %3908, align 128, !tbaa !105
  %4982 = getelementptr inbounds i8, i8* %4883, i32 64
  %4983 = bitcast i8* %4982 to <64 x i8>*
  %4984 = load <64 x i8>, <64 x i8>* %4983, align 64, !tbaa !127
  %4985 = zext <64 x i8> %4984 to <64 x i16>
  %4986 = load <64 x i16>, <64 x i16>* %3910, align 128, !tbaa !105
  %4987 = getelementptr inbounds i8, i8* %4891, i32 64
  %4988 = bitcast i8* %4987 to <64 x i8>*
  %4989 = load <64 x i8>, <64 x i8>* %4988, align 64, !tbaa !127
  %4990 = zext <64 x i8> %4989 to <64 x i16>
  %4991 = load <64 x i16>, <64 x i16>* %3912, align 128, !tbaa !105
  %4992 = getelementptr inbounds i8, i8* %4899, i32 64
  %4993 = bitcast i8* %4992 to <64 x i8>*
  %4994 = load <64 x i8>, <64 x i8>* %4993, align 64, !tbaa !127
  %4995 = zext <64 x i8> %4994 to <64 x i16>
  %4996 = load <64 x i16>, <64 x i16>* %3914, align 128, !tbaa !105
  %4997 = getelementptr inbounds i8, i8* %4906, i32 64
  %4998 = bitcast i8* %4997 to <64 x i8>*
  %4999 = load <64 x i8>, <64 x i8>* %4998, align 64, !tbaa !127
  %5000 = zext <64 x i8> %4999 to <64 x i16>
  %5001 = load <64 x i16>, <64 x i16>* %3916, align 128, !tbaa !105
  %5002 = getelementptr inbounds i8, i8* %4913, i32 64
  %5003 = bitcast i8* %5002 to <64 x i8>*
  %5004 = load <64 x i8>, <64 x i8>* %5003, align 64, !tbaa !127
  %5005 = zext <64 x i8> %5004 to <64 x i16>
  %5006 = load <64 x i16>, <64 x i16>* %3918, align 128, !tbaa !105
  %5007 = getelementptr inbounds i8, i8* %4921, i32 64
  %5008 = bitcast i8* %5007 to <64 x i8>*
  %5009 = load <64 x i8>, <64 x i8>* %5008, align 64, !tbaa !127
  %5010 = zext <64 x i8> %5009 to <64 x i16>
  %5011 = load <64 x i16>, <64 x i16>* %3920, align 128, !tbaa !191
  %5012 = getelementptr inbounds i8, i8* %4928, i32 64
  %5013 = bitcast i8* %5012 to <64 x i8>*
  %5014 = load <64 x i8>, <64 x i8>* %5013, align 64, !tbaa !127
  %5015 = zext <64 x i8> %5014 to <64 x i16>
  %5016 = load <64 x i16>, <64 x i16>* %3922, align 128, !tbaa !193
  %5017 = getelementptr inbounds i8, i8* %4935, i32 64
  %5018 = bitcast i8* %5017 to <64 x i8>*
  %5019 = load <64 x i8>, <64 x i8>* %5018, align 64, !tbaa !127
  %5020 = zext <64 x i8> %5019 to <64 x i16>
  %5021 = load <64 x i16>, <64 x i16>* %3924, align 128, !tbaa !195
  %5022 = getelementptr inbounds i8, i8* %4943, i32 64
  %5023 = bitcast i8* %5022 to <64 x i8>*
  %5024 = load <64 x i8>, <64 x i8>* %5023, align 64, !tbaa !127
  %5025 = zext <64 x i8> %5024 to <64 x i16>
  %5026 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4875, <32 x i32> %4874)
  %5027 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4991, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5028 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4995, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5029 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %5027, <64 x i16> %5028, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5030 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5006, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5031 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5010, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5032 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %5030, <64 x i16> %5031, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5033 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5021, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5034 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5025, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5035 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %5033, <64 x i16> %5034, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5036 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5035, <64 x i32> %5026, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %5037 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5011, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5038 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5015, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5039 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %5036, <64 x i16> %5037, <64 x i16> %5038, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5040 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5016, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5041 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5020, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5042 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %5040, <64 x i16> %5041, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5043 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5039, <64 x i32> %5042, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %5044 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5032, <64 x i32> %5043, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %5045 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4996, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5046 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5000, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5047 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %5044, <64 x i16> %5045, <64 x i16> %5046, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5048 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5001, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5049 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5005, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5050 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %5048, <64 x i16> %5049, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5051 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5047, <64 x i32> %5050, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %5052 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5029, <64 x i32> %5051, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %5053 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4981, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5054 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4985, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5055 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %5052, <64 x i16> %5053, <64 x i16> %5054, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5056 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4986, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5057 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %4990, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5058 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %5056, <64 x i16> %5057, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5059 = call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5055, <64 x i32> %5058, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0) #11
  %5060 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4980)
  %5061 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4980)
  %5062 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5059)
  %5063 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5059)
  br label %"consume convolved649"

next_bb642:                                       ; preds = %"for output.s0.x.xo636"
  %5064 = add nsw i32 %output.s0.x.xo638, %19
  br i1 %3558, label %"for convolved.s1.r19$y643.preheader", label %"consume convolved649", !prof !101

"for convolved.s1.r19$y643.preheader":            ; preds = %next_bb642
  %5065 = mul nsw i32 %5064, %stride_x
  %5066 = sub i32 %5065, %resampled_input.x.min_realized
  br i1 %3557, label %"for convolved.s1.r19$y643.us", label %"consume convolved649", !prof !101

"for convolved.s1.r19$y643.us":                   ; preds = %"for convolved.s1.r19$y643.preheader", %"end for convolved.s1.r19$x647.loopexit.us"
  %convolved700.sroa.36.4.us = phi <32 x i32> [ %5101, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %4875, %"for convolved.s1.r19$y643.preheader" ]
  %convolved700.sroa.24.4.us = phi <32 x i32> [ %5100, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %4874, %"for convolved.s1.r19$y643.preheader" ]
  %convolved700.sroa.12.4.us = phi <32 x i32> [ %5099, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %4873, %"for convolved.s1.r19$y643.preheader" ]
  %convolved700.sroa.0.4.us = phi <32 x i32> [ %5098, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %4872, %"for convolved.s1.r19$y643.preheader" ]
  %"convolved.s1.r19$y645.us" = phi i32 [ %5103, %"end for convolved.s1.r19$x647.loopexit.us" ], [ 0, %"for convolved.s1.r19$y643.preheader" ]
  %5067 = mul nsw i32 %"convolved.s1.r19$y645.us", %a68
  %5068 = add nsw i32 %5067, %4868
  %5069 = mul nsw i32 %5068, %3812
  %t2483.us = add nsw i32 %5066, %5069
  %5070 = mul nsw i32 %"convolved.s1.r19$y645.us", %4
  br label %"for convolved.s1.r19$x646.us"

"for convolved.s1.r19$x646.us":                   ; preds = %"for convolved.s1.r19$y643.us", %"for convolved.s1.r19$x646.us"
  %convolved700.sroa.36.5.us = phi <32 x i32> [ %5101, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.36.4.us, %"for convolved.s1.r19$y643.us" ]
  %convolved700.sroa.24.5.us = phi <32 x i32> [ %5100, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.24.4.us, %"for convolved.s1.r19$y643.us" ]
  %convolved700.sroa.12.5.us = phi <32 x i32> [ %5099, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.12.4.us, %"for convolved.s1.r19$y643.us" ]
  %convolved700.sroa.0.5.us = phi <32 x i32> [ %5098, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.0.4.us, %"for convolved.s1.r19$y643.us" ]
  %"convolved.s1.r19$x648.us" = phi i32 [ %5102, %"for convolved.s1.r19$x646.us" ], [ 0, %"for convolved.s1.r19$y643.us" ]
  %5071 = add nsw i32 %"convolved.s1.r19$x648.us", %5070
  %5072 = shl nsw i32 %5071, 7
  %5073 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %5072
  %5074 = bitcast i16* %5073 to <64 x i16>*
  %5075 = load <64 x i16>, <64 x i16>* %5074, align 128, !tbaa !105
  %5076 = mul nsw i32 %"convolved.s1.r19$x648.us", %a73
  %5077 = add nsw i32 %t2483.us, %5076
  %5078 = shl nsw i32 %5077, 7
  %5079 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5078
  %5080 = bitcast i8* %5079 to <64 x i8>*
  %5081 = load <64 x i8>, <64 x i8>* %5080, align 128, !tbaa !127
  %5082 = zext <64 x i8> %5081 to <64 x i16>
  %5083 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.5.us, <32 x i32> %convolved700.sroa.0.5.us)
  %5084 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5082, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5085 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5075, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5086 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %5083, <64 x i16> %5084, <64 x i16> %5085, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5087 = getelementptr inbounds i16, i16* %5073, i32 64
  %5088 = bitcast i16* %5087 to <64 x i16>*
  %5089 = load <64 x i16>, <64 x i16>* %5088, align 128, !tbaa !105
  %5090 = getelementptr inbounds i8, i8* %5079, i32 64
  %5091 = bitcast i8* %5090 to <64 x i8>*
  %5092 = load <64 x i8>, <64 x i8>* %5091, align 64, !tbaa !127
  %5093 = zext <64 x i8> %5092 to <64 x i16>
  %5094 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.5.us, <32 x i32> %convolved700.sroa.24.5.us)
  %5095 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5093, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5096 = call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %5089, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0) #11
  %5097 = call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %5094, <64 x i16> %5095, <64 x i16> %5096, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0) #11
  %5098 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5086)
  %5099 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5086)
  %5100 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5097)
  %5101 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5097)
  %5102 = add nuw nsw i32 %"convolved.s1.r19$x648.us", 1
  %.not708.us = icmp eq i32 %5102, %4
  br i1 %.not708.us, label %"end for convolved.s1.r19$x647.loopexit.us", label %"for convolved.s1.r19$x646.us"

"end for convolved.s1.r19$x647.loopexit.us":      ; preds = %"for convolved.s1.r19$x646.us"
  %5103 = add nuw nsw i32 %"convolved.s1.r19$y645.us", 1
  %.not707.us = icmp eq i32 %5103, %6
  br i1 %.not707.us, label %"consume convolved649", label %"for convolved.s1.r19$y643.us"

"consume convolved649":                           ; preds = %"end for convolved.s1.r19$x647.loopexit.us", %next_bb642, %"for convolved.s1.r19$y643.preheader", %then_bb641
  %.pre-phi4854 = phi i32 [ %4878, %then_bb641 ], [ %5064, %"for convolved.s1.r19$y643.preheader" ], [ %5064, %next_bb642 ], [ %5064, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.36.7 = phi <32 x i32> [ %5063, %then_bb641 ], [ %4875, %"for convolved.s1.r19$y643.preheader" ], [ %4875, %next_bb642 ], [ %5101, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.24.7 = phi <32 x i32> [ %5062, %then_bb641 ], [ %4874, %"for convolved.s1.r19$y643.preheader" ], [ %4874, %next_bb642 ], [ %5100, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.12.7 = phi <32 x i32> [ %5061, %then_bb641 ], [ %4873, %"for convolved.s1.r19$y643.preheader" ], [ %4873, %next_bb642 ], [ %5099, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.0.7 = phi <32 x i32> [ %5060, %then_bb641 ], [ %4872, %"for convolved.s1.r19$y643.preheader" ], [ %4872, %next_bb642 ], [ %5098, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %5104 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5105 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5106 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5107 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5108 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5106, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5109 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5104, <1 x i32> zeroinitializer, <32 x i32> %5108, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5110 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5111 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5112 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5111, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5113 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5114 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5112, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5115 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5110, <1 x i32> zeroinitializer, <32 x i32> %5114, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5116 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5115, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5117 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5109, <64 x i16> %5116, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5118 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5119 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5120 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5119, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5121 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5122 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5120, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5121, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5123 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5118, <1 x i32> zeroinitializer, <32 x i32> %5122, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5124 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5125 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5126 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5125, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5127 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5128 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5126, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5127, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5129 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5124, <1 x i32> zeroinitializer, <32 x i32> %5128, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5130 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5129, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5131 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5123, <64 x i16> %5130, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5132 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %5117, <32 x i32> %5131, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %5133 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5134 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5135 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5134, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5136 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5137 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5135, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5136, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5138 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5133, <1 x i32> zeroinitializer, <32 x i32> %5137, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5139 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5140 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5141 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5140, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5142 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5143 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5141, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5142, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5144 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5139, <1 x i32> zeroinitializer, <32 x i32> %5143, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5145 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5144, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5146 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5138, <64 x i16> %5145, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5147 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5148 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5149 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5148, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5150 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5151 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5149, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5150, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5152 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5147, <1 x i32> zeroinitializer, <32 x i32> %5151, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5153 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5154 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5155 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5154, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5156 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5157 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5155, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5156, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5158 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5153, <1 x i32> zeroinitializer, <32 x i32> %5157, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5159 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5158, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5160 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5152, <64 x i16> %5159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5161 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %5146, <32 x i32> %5160, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %5162 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %5132, <64 x i16> %5161, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %5163 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %3929, <256 x i8> %5162, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %5164 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %5163, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %5165 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5166 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5167 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5166, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5168 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5169 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5167, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5168, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5170 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5165, <1 x i32> zeroinitializer, <32 x i32> %5169, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5171 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5172 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5173 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5172, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5174 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5175 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5173, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5174, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5176 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5171, <1 x i32> zeroinitializer, <32 x i32> %5175, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5177 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5176, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5178 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5170, <64 x i16> %5177, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5179 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5180 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5181 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5180, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5182 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5183 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5181, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5182, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5184 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5179, <1 x i32> zeroinitializer, <32 x i32> %5183, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5185 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5186 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5187 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5186, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5188 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5189 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5187, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5188, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5190 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5185, <1 x i32> zeroinitializer, <32 x i32> %5189, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5191 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5190, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5192 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5184, <64 x i16> %5191, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5193 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %5178, <32 x i32> %5192, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %5194 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5195 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5196 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5195, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5197 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5198 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5196, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5197, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5199 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5194, <1 x i32> zeroinitializer, <32 x i32> %5198, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5200 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5201 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5202 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5201, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5203 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5204 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5202, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5203, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5205 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5200, <1 x i32> zeroinitializer, <32 x i32> %5204, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5206 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5205, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5207 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5199, <64 x i16> %5206, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5208 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3935, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5209 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5210 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5209, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5211 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5212 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5210, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5211, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5213 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5208, <1 x i32> zeroinitializer, <32 x i32> %5212, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5214 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3936, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5215 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5216 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5215, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0) #11
  %5217 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3934, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #11
  %5218 = call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %5216, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5217, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0) #11
  %5219 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %5214, <1 x i32> zeroinitializer, <32 x i32> %5218, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #11
  %5220 = call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %5219, <32 x i32> %3925, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0) #11
  %5221 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5213, <64 x i16> %5220, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0) #11
  %5222 = call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %5207, <32 x i32> %5221, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0) #11
  %5223 = call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %5193, <64 x i16> %5222, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0) #11
  %5224 = call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %3929, <256 x i8> %5223, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0) #11
  %5225 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %5224, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0) #11
  %5226 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %5164, <128 x i8> %5225, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0) #11
  %5227 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %3931, <128 x i8> %5226, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %5228 = call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %3933, <128 x i8> %5227, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0) #11
  %5229 = mul nsw i32 %.pre-phi4854, %21
  %t2473 = add i32 %4870, %5229
  %5230 = sub i32 %t2473, %reass.add4765
  %5231 = getelementptr inbounds i8, i8* %17, i32 %5230
  %5232 = bitcast i8* %5231 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5228, <128 x i8>* %5232, i32 1, <128 x i1> %3614), !tbaa !197
  %5233 = add nuw nsw i32 %output.s0.x.xo638, 1
  %.not706 = icmp eq i32 %5233, %20
  br i1 %.not706, label %"end for output.s0.x.xo637", label %"for output.s0.x.xo636"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i32 12
  %44 = load i8*, i8** %43, align 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i32 13
  %47 = load i8*, i8** %46, align 4
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i32 14
  %50 = load i8*, i8** %49, align 4
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i32 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 4
  %55 = tail call i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #16
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i16.p0v64i16(<64 x i16>, <64 x i16>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i32.p0v32i32(<32 x i32>, <32 x i32>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8 @llvm.vector.reduce.umax.v128i8(<128 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v128i8.p0v128i8(<128 x i8>, <128 x i8>*, i32 immarg, <128 x i1>) #5

define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.0(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %arg, <64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0)
  ret <64 x i16> %0
}

declare <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32)

define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.1(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %arg, <64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0)
  ret <64 x i16> %0
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.2(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0)
  %1 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %0, <64 x i32> %arg, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %1
}

declare <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16>, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32>, <64 x i32>, i32, i32, i32, i32, i32, i32, i32)

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.3(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0)
  %1 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %0, <64 x i32> %arg, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %1
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.4(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %0, <128 x i8> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2, <32 x i32> %3, <128 x i8> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %6, <128 x i8> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %8, <32 x i32> %9, <128 x i8> %10, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %12 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %13 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %arg, <256 x i8> %12, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %13
}

declare <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32>, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32>, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16>, <32 x i32>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32>, <32 x i32>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32>, i32, i32, i32, i32, i32, i32)

declare <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32>, <256 x i8>, i32, i32, i32, i32, i32, i32, i32)

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.5(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %0, <128 x i8> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2, <32 x i32> %3, <128 x i8> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %6, <128 x i8> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %8, <32 x i32> %9, <128 x i8> %10, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %12 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %13 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %arg, <256 x i8> %12, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %13
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.6(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

declare <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16>, i32, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32>, <64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.7(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.8(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.9(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.10(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.11(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.12(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.13(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.14(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.15(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.16(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.17(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.18(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.19(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.20(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.21(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.22(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2, <32 x i32> %arg.5, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %8, <32 x i32> %arg.5, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %11, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %13 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %14 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %15 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %16 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %15, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %17 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %16, <32 x i32> %arg, <32 x i32> %17, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %19 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %14, <1 x i32> zeroinitializer, <32 x i32> %18, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %20 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %23 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %22, <32 x i32> %arg, <32 x i32> %23, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %25 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %20, <1 x i32> zeroinitializer, <32 x i32> %24, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %25, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %19, <64 x i16> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %28 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %13, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %29 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %30 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %31 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %32 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %31, <32 x i32> %arg.11, <32 x i32> %32, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %34 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %29, <1 x i32> zeroinitializer, <32 x i32> %33, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %35 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %38 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %37, <32 x i32> %arg.11, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %35, <1 x i32> zeroinitializer, <32 x i32> %39, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %41 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %40, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %34, <64 x i16> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %44 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %45 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %46 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %47 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %45, <32 x i32> %arg.8, <32 x i32> %46, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %43, <1 x i32> zeroinitializer, <32 x i32> %47, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %49 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %53 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %51, <32 x i32> %arg.8, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %49, <1 x i32> zeroinitializer, <32 x i32> %53, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %55 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %54, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %56 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %48, <64 x i16> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %57 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %42, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %58 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %28, <64 x i16> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %59 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %58, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %60 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %59, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %61 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %62 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %63 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %62, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %64 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %65 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %63, <32 x i32> %arg.5, <32 x i32> %64, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %66 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %61, <1 x i32> zeroinitializer, <32 x i32> %65, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %67 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %68 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %69 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %68, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %70 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %71 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %69, <32 x i32> %arg.5, <32 x i32> %70, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %72 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %67, <1 x i32> zeroinitializer, <32 x i32> %71, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %73 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %72, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %74 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %66, <64 x i16> %73, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %75 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %76 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %77 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %76, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %78 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %79 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %77, <32 x i32> %arg, <32 x i32> %78, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %80 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %75, <1 x i32> zeroinitializer, <32 x i32> %79, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %81 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %82 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %83 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %82, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %84 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %85 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %83, <32 x i32> %arg, <32 x i32> %84, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %86 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %81, <1 x i32> zeroinitializer, <32 x i32> %85, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %87 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %86, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %88 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %80, <64 x i16> %87, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %89 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %74, <32 x i32> %88, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %90 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %91 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %92 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %91, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %93 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %94 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %92, <32 x i32> %arg.11, <32 x i32> %93, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %95 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %90, <1 x i32> zeroinitializer, <32 x i32> %94, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %96 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %97 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %98 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %97, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %99 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %100 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %98, <32 x i32> %arg.11, <32 x i32> %99, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %101 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %96, <1 x i32> zeroinitializer, <32 x i32> %100, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %102 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %101, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %103 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %95, <64 x i16> %102, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %104 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %105 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %106 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %107 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %108 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %106, <32 x i32> %arg.8, <32 x i32> %107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %109 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %104, <1 x i32> zeroinitializer, <32 x i32> %108, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %110 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %111 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %112 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %111, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %113 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %114 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %112, <32 x i32> %arg.8, <32 x i32> %113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %115 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %110, <1 x i32> zeroinitializer, <32 x i32> %114, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %116 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %115, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %117 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %109, <64 x i16> %116, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %118 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %103, <32 x i32> %117, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %119 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %89, <64 x i16> %118, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %120 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %119, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %121 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %120, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %122 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %60, <128 x i8> %121, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0)
  %123 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %arg.15, <128 x i8> %122, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %124 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %arg.16, <128 x i8> %123, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %124
}

declare <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64>, <32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64>, <1 x i64>, <1 x i64>, <32 x i32>, <32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32>, <1 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16>, <256 x i8>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16>, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32)

define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.23(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2, <32 x i32> %arg.5, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %8, <32 x i32> %arg.5, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %11, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %13 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %14 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %15 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %16 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %15, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %17 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %16, <32 x i32> %arg, <32 x i32> %17, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %19 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %14, <1 x i32> zeroinitializer, <32 x i32> %18, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %20 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %23 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %22, <32 x i32> %arg, <32 x i32> %23, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %25 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %20, <1 x i32> zeroinitializer, <32 x i32> %24, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %25, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %19, <64 x i16> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %28 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %13, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %29 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %30 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %31 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %32 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %31, <32 x i32> %arg.11, <32 x i32> %32, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %34 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %29, <1 x i32> zeroinitializer, <32 x i32> %33, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %35 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %38 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %37, <32 x i32> %arg.11, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %35, <1 x i32> zeroinitializer, <32 x i32> %39, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %41 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %40, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %34, <64 x i16> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %44 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %45 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %46 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %47 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %45, <32 x i32> %arg.8, <32 x i32> %46, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %43, <1 x i32> zeroinitializer, <32 x i32> %47, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %49 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %53 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %51, <32 x i32> %arg.8, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %49, <1 x i32> zeroinitializer, <32 x i32> %53, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %55 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %54, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %56 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %48, <64 x i16> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %57 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %42, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %58 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %28, <64 x i16> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %59 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %58, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %60 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %59, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %61 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %62 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %63 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %62, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %64 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %65 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %63, <32 x i32> %arg.5, <32 x i32> %64, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %66 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %61, <1 x i32> zeroinitializer, <32 x i32> %65, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %67 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %68 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %69 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %68, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %70 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %71 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %69, <32 x i32> %arg.5, <32 x i32> %70, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %72 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %67, <1 x i32> zeroinitializer, <32 x i32> %71, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %73 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %72, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %74 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %66, <64 x i16> %73, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %75 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %76 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %77 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %76, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %78 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %79 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %77, <32 x i32> %arg, <32 x i32> %78, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %80 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %75, <1 x i32> zeroinitializer, <32 x i32> %79, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %81 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %82 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %83 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %82, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %84 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %85 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %83, <32 x i32> %arg, <32 x i32> %84, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %86 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %81, <1 x i32> zeroinitializer, <32 x i32> %85, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %87 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %86, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %88 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %80, <64 x i16> %87, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %89 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %74, <32 x i32> %88, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %90 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %91 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %92 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %91, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %93 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %94 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %92, <32 x i32> %arg.11, <32 x i32> %93, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %95 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %90, <1 x i32> zeroinitializer, <32 x i32> %94, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %96 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %97 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %98 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %97, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %99 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %100 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %98, <32 x i32> %arg.11, <32 x i32> %99, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %101 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %96, <1 x i32> zeroinitializer, <32 x i32> %100, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %102 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %101, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %103 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %95, <64 x i16> %102, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %104 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %105 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %106 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %107 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %108 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %106, <32 x i32> %arg.8, <32 x i32> %107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %109 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %104, <1 x i32> zeroinitializer, <32 x i32> %108, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %110 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %111 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %112 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %111, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %113 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %114 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %112, <32 x i32> %arg.8, <32 x i32> %113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %115 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %110, <1 x i32> zeroinitializer, <32 x i32> %114, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %116 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %115, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %117 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %109, <64 x i16> %116, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %118 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %103, <32 x i32> %117, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %119 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %89, <64 x i16> %118, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %120 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %119, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %121 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %120, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %122 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %60, <128 x i8> %121, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0)
  %123 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %arg.15, <128 x i8> %122, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %124 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %arg.16, <128 x i8> %123, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %124
}

define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.24(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2, <32 x i32> %arg.5, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %8, <32 x i32> %arg.5, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %11, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %13 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %14 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %15 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %16 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %15, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %17 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %16, <32 x i32> %arg, <32 x i32> %17, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %19 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %14, <1 x i32> zeroinitializer, <32 x i32> %18, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %20 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %23 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %22, <32 x i32> %arg, <32 x i32> %23, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %25 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %20, <1 x i32> zeroinitializer, <32 x i32> %24, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %25, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %19, <64 x i16> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %28 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %13, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %29 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %30 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %31 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %32 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %31, <32 x i32> %arg.11, <32 x i32> %32, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %34 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %29, <1 x i32> zeroinitializer, <32 x i32> %33, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %35 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %38 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %37, <32 x i32> %arg.11, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %35, <1 x i32> zeroinitializer, <32 x i32> %39, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %41 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %40, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %34, <64 x i16> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %44 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %45 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %46 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %47 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %45, <32 x i32> %arg.8, <32 x i32> %46, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %43, <1 x i32> zeroinitializer, <32 x i32> %47, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %49 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %53 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %51, <32 x i32> %arg.8, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %49, <1 x i32> zeroinitializer, <32 x i32> %53, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %55 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %54, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %56 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %48, <64 x i16> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %57 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %42, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %58 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %28, <64 x i16> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %59 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %58, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %60 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %59, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %61 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %62 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %63 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %62, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %64 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %65 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %63, <32 x i32> %arg.5, <32 x i32> %64, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %66 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %61, <1 x i32> zeroinitializer, <32 x i32> %65, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %67 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %68 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %69 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %68, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %70 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %71 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %69, <32 x i32> %arg.5, <32 x i32> %70, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %72 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %67, <1 x i32> zeroinitializer, <32 x i32> %71, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %73 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %72, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %74 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %66, <64 x i16> %73, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %75 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %76 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %77 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %76, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %78 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %79 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %77, <32 x i32> %arg, <32 x i32> %78, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %80 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %75, <1 x i32> zeroinitializer, <32 x i32> %79, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %81 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %82 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %83 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %82, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %84 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %85 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %83, <32 x i32> %arg, <32 x i32> %84, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %86 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %81, <1 x i32> zeroinitializer, <32 x i32> %85, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %87 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %86, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %88 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %80, <64 x i16> %87, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %89 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %74, <32 x i32> %88, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %90 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %91 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %92 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %91, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %93 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %94 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %92, <32 x i32> %arg.11, <32 x i32> %93, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %95 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %90, <1 x i32> zeroinitializer, <32 x i32> %94, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %96 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %97 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %98 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %97, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %99 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %100 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %98, <32 x i32> %arg.11, <32 x i32> %99, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %101 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %96, <1 x i32> zeroinitializer, <32 x i32> %100, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %102 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %101, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %103 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %95, <64 x i16> %102, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %104 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %105 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %106 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %107 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %108 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %106, <32 x i32> %arg.8, <32 x i32> %107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %109 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %104, <1 x i32> zeroinitializer, <32 x i32> %108, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %110 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %111 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %112 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %111, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %113 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %114 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %112, <32 x i32> %arg.8, <32 x i32> %113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %115 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %110, <1 x i32> zeroinitializer, <32 x i32> %114, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %116 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %115, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %117 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %109, <64 x i16> %116, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %118 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %103, <32 x i32> %117, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %119 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %89, <64 x i16> %118, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %120 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %119, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %121 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %120, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %122 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %60, <128 x i8> %121, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0)
  %123 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %arg.15, <128 x i8> %122, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %124 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %arg.16, <128 x i8> %123, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %124
}

define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.25(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2, <32 x i32> %arg.5, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %8, <32 x i32> %arg.5, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %11, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %13 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %14 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %15 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %16 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %15, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %17 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %16, <32 x i32> %arg, <32 x i32> %17, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %19 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %14, <1 x i32> zeroinitializer, <32 x i32> %18, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %20 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %23 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %22, <32 x i32> %arg, <32 x i32> %23, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %25 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %20, <1 x i32> zeroinitializer, <32 x i32> %24, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %25, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %19, <64 x i16> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %28 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %13, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %29 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %30 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %31 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %32 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %31, <32 x i32> %arg.11, <32 x i32> %32, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %34 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %29, <1 x i32> zeroinitializer, <32 x i32> %33, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %35 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %38 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %37, <32 x i32> %arg.11, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %35, <1 x i32> zeroinitializer, <32 x i32> %39, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %41 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %40, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %34, <64 x i16> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %44 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %45 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %46 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %47 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %45, <32 x i32> %arg.8, <32 x i32> %46, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %43, <1 x i32> zeroinitializer, <32 x i32> %47, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %49 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %53 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %51, <32 x i32> %arg.8, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %49, <1 x i32> zeroinitializer, <32 x i32> %53, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %55 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %54, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %56 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %48, <64 x i16> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %57 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %42, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %58 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %28, <64 x i16> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %59 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %58, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %60 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %59, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %61 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %62 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %63 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %62, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %64 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %65 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %63, <32 x i32> %arg.5, <32 x i32> %64, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %66 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %61, <1 x i32> zeroinitializer, <32 x i32> %65, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %67 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %68 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %69 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %68, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %70 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %71 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %69, <32 x i32> %arg.5, <32 x i32> %70, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %72 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %67, <1 x i32> zeroinitializer, <32 x i32> %71, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %73 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %72, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %74 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %66, <64 x i16> %73, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %75 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %76 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %77 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %76, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %78 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %79 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %77, <32 x i32> %arg, <32 x i32> %78, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %80 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %75, <1 x i32> zeroinitializer, <32 x i32> %79, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %81 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %82 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %83 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %82, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %84 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %85 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %83, <32 x i32> %arg, <32 x i32> %84, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %86 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %81, <1 x i32> zeroinitializer, <32 x i32> %85, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %87 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %86, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %88 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %80, <64 x i16> %87, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %89 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %74, <32 x i32> %88, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %90 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %91 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %92 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %91, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %93 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %94 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %92, <32 x i32> %arg.11, <32 x i32> %93, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %95 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %90, <1 x i32> zeroinitializer, <32 x i32> %94, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %96 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %97 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %98 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %97, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %99 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %100 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %98, <32 x i32> %arg.11, <32 x i32> %99, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %101 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %96, <1 x i32> zeroinitializer, <32 x i32> %100, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %102 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %101, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %103 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %95, <64 x i16> %102, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %104 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %105 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %106 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %107 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %108 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %106, <32 x i32> %arg.8, <32 x i32> %107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %109 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %104, <1 x i32> zeroinitializer, <32 x i32> %108, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %110 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %111 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %112 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %111, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %113 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %114 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %112, <32 x i32> %arg.8, <32 x i32> %113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %115 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %110, <1 x i32> zeroinitializer, <32 x i32> %114, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %116 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %115, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %117 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %109, <64 x i16> %116, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %118 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %103, <32 x i32> %117, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %119 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %89, <64 x i16> %118, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %120 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %119, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %121 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %120, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %122 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %60, <128 x i8> %121, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0)
  %123 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %arg.15, <128 x i8> %122, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %124 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %arg.16, <128 x i8> %123, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %124
}

define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.26(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %arg, <64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0)
  ret <64 x i16> %0
}

define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.27(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %arg, <64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0)
  ret <64 x i16> %0
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.28(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0)
  %1 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %0, <64 x i32> %arg, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %1
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.29(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vunpackh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 32, i32 1, i32 1, i32 0)
  %1 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %0, <64 x i32> %arg, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %1
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.30(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %0, <128 x i8> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2, <32 x i32> %3, <128 x i8> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %6, <128 x i8> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %8, <32 x i32> %9, <128 x i8> %10, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %12 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %13 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %arg, <256 x i8> %12, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %13
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.31(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %0, <128 x i8> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2, <32 x i32> %3, <128 x i8> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %6, <128 x i8> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %8, <32 x i32> %9, <128 x i8> %10, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %12 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %13 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %arg, <256 x i8> %12, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %13
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.32(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.33(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.34(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.35(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.36(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2, <32 x i32> %arg.5, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %8, <32 x i32> %arg.5, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %11, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %13 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %14 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %15 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %16 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %15, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %17 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %16, <32 x i32> %arg, <32 x i32> %17, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %19 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %14, <1 x i32> zeroinitializer, <32 x i32> %18, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %20 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %23 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %22, <32 x i32> %arg, <32 x i32> %23, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %25 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %20, <1 x i32> zeroinitializer, <32 x i32> %24, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %25, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %19, <64 x i16> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %28 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %13, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %29 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %30 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %31 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %32 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %31, <32 x i32> %arg.11, <32 x i32> %32, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %34 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %29, <1 x i32> zeroinitializer, <32 x i32> %33, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %35 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %38 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %37, <32 x i32> %arg.11, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %35, <1 x i32> zeroinitializer, <32 x i32> %39, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %41 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %40, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %34, <64 x i16> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %44 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %45 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %46 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %47 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %45, <32 x i32> %arg.8, <32 x i32> %46, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %43, <1 x i32> zeroinitializer, <32 x i32> %47, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %49 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %53 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %51, <32 x i32> %arg.8, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %49, <1 x i32> zeroinitializer, <32 x i32> %53, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %55 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %54, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %56 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %48, <64 x i16> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %57 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %42, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %58 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %28, <64 x i16> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %59 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %58, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %60 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %59, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %61 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %62 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %63 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %62, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %64 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %65 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %63, <32 x i32> %arg.5, <32 x i32> %64, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %66 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %61, <1 x i32> zeroinitializer, <32 x i32> %65, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %67 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %68 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %69 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %68, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %70 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %71 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %69, <32 x i32> %arg.5, <32 x i32> %70, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %72 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %67, <1 x i32> zeroinitializer, <32 x i32> %71, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %73 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %72, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %74 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %66, <64 x i16> %73, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %75 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %76 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %77 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %76, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %78 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %79 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %77, <32 x i32> %arg, <32 x i32> %78, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %80 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %75, <1 x i32> zeroinitializer, <32 x i32> %79, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %81 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %82 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %83 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %82, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %84 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %85 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %83, <32 x i32> %arg, <32 x i32> %84, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %86 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %81, <1 x i32> zeroinitializer, <32 x i32> %85, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %87 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %86, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %88 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %80, <64 x i16> %87, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %89 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %74, <32 x i32> %88, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %90 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %91 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %92 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %91, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %93 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %94 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %92, <32 x i32> %arg.11, <32 x i32> %93, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %95 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %90, <1 x i32> zeroinitializer, <32 x i32> %94, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %96 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %97 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %98 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %97, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %99 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %100 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %98, <32 x i32> %arg.11, <32 x i32> %99, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %101 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %96, <1 x i32> zeroinitializer, <32 x i32> %100, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %102 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %101, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %103 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %95, <64 x i16> %102, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %104 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %105 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %106 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %107 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %108 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %106, <32 x i32> %arg.8, <32 x i32> %107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %109 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %104, <1 x i32> zeroinitializer, <32 x i32> %108, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %110 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %111 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %112 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %111, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %113 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %114 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %112, <32 x i32> %arg.8, <32 x i32> %113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %115 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %110, <1 x i32> zeroinitializer, <32 x i32> %114, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %116 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %115, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %117 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %109, <64 x i16> %116, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %118 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %103, <32 x i32> %117, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %119 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %89, <64 x i16> %118, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %120 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %119, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %121 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %120, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %122 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %60, <128 x i8> %121, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0)
  %123 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %arg.15, <128 x i8> %122, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %124 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %arg.16, <128 x i8> %123, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %124
}

define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.37(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %arg, <64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0)
  ret <64 x i16> %0
}

define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.38(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %arg, <64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0)
  ret <64 x i16> %0
}

define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.39(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<64 x i16> %arg, <64 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 -1, i32 0)
  ret <64 x i16> %0
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.40(<64 x i32> %arg, <128 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %1 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddubh_acc_128B_dsl(<64 x i32> %arg, <32 x i32> zeroinitializer, <128 x i8> %0, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 -1, i32 32, i32 -1, i32 1, i32 -1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %1
}

declare <64 x i32> @llvm.hydride.hexagon_V6_vaddubh_acc_128B_dsl(<64 x i32>, <32 x i32>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.41(<64 x i32> %arg, <128 x i16> %arg.1) local_unnamed_addr {
entry:
  %0 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %1 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddubh_acc_128B_dsl.1(<64 x i32> %arg, <128 x i8> %0, <32 x i32> zeroinitializer, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 -1, i32 32, i32 -1, i32 1, i32 -1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %1
}

declare <64 x i32> @llvm.hydride.hexagon_V6_vaddubh_acc_128B_dsl.1(<64 x i32>, <128 x i8>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.42(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %0, <128 x i8> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2, <32 x i32> %3, <128 x i8> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %6, <128 x i8> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %8, <32 x i32> %9, <128 x i8> %10, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %12 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %13 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %arg, <256 x i8> %12, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %13
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.43(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %0, <128 x i8> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %2, <32 x i32> %3, <128 x i8> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyieoh_128B_dsl(<2 x i16> <i16 16, i16 0>, <32 x i32> %6, <128 x i8> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 1, i32 16, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl(<64 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyiewh_acc_128B_dsl(<32 x i32> %8, <32 x i32> %9, <128 x i8> %10, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 0)
  %12 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %13 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl.1(<64 x i32> %arg, <256 x i8> %12, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %13
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.44(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.45(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.4, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.5, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %3 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.10, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %4 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.11, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %5 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %3, <64 x i16> %4, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %6 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.16, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %7 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.17, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %8 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %6, <64 x i16> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %9 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %8, <64 x i32> %arg.18, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %10 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.12, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %11 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.13, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %12 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %9, <64 x i16> %10, <64 x i16> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.14, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.15, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %15 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %13, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %16 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %12, <64 x i32> %15, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %17 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %5, <64 x i32> %16, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %18 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.6, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %19 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.7, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %20 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %17, <64 x i16> %18, <64 x i16> %19, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %21 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.8, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %22 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.9, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %23 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %21, <64 x i16> %22, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %24 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %20, <64 x i32> %23, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %25 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %2, <64 x i32> %24, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %27 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %28 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %25, <64 x i16> %26, <64 x i16> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %29 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.2, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %30 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.3, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %31 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> zeroinitializer, <64 x i16> %29, <64 x i16> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  %32 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl(<64 x i32> %28, <64 x i32> %31, i32 2048, i32 2048, i32 0, i32 2048, i32 32, i32 -1, i32 0)
  ret <64 x i32> %32
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.46(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.47(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg.1, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %1 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vshuffh_128B_dsl(<64 x i16> %arg, i32 1024, i32 32, i32 0, i32 32, i32 16, i32 32, i32 2, i32 0)
  %2 = tail call <64 x i32> @llvm.hydride.hexagon_V6_vmpybv_acc_128B_dsl(<64 x i32> %arg.2, <64 x i16> %0, <64 x i16> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 32, i32 1, i32 -1, i32 1, i32 1, i32 32, i32 -1, i32 1, i32 1, i32 16, i32 1024, i32 2, i32 0)
  ret <64 x i32> %2
}

define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.48(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %2, <32 x i32> %arg.5, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %8, <32 x i32> %arg.5, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %11, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %13 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %14 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %15 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %16 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %15, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %17 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %16, <32 x i32> %arg, <32 x i32> %17, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %19 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %14, <1 x i32> zeroinitializer, <32 x i32> %18, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %20 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %23 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %22, <32 x i32> %arg, <32 x i32> %23, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %25 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %20, <1 x i32> zeroinitializer, <32 x i32> %24, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %26 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %25, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %19, <64 x i16> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %28 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %13, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %29 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %30 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %31 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %30, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %32 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %31, <32 x i32> %arg.11, <32 x i32> %32, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %34 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %29, <1 x i32> zeroinitializer, <32 x i32> %33, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %35 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %38 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %37, <32 x i32> %arg.11, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %35, <1 x i32> zeroinitializer, <32 x i32> %39, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %41 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %40, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %34, <64 x i16> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %44 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %45 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %46 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %47 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %45, <32 x i32> %arg.8, <32 x i32> %46, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %43, <1 x i32> zeroinitializer, <32 x i32> %47, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %49 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %53 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %51, <32 x i32> %arg.8, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %49, <1 x i32> zeroinitializer, <32 x i32> %53, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %55 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %54, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %56 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %48, <64 x i16> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %57 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %42, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %58 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %28, <64 x i16> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %59 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %58, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %60 = tail call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %59, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %61 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %62 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %63 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %62, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %64 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %65 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %63, <32 x i32> %arg.5, <32 x i32> %64, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %66 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %61, <1 x i32> zeroinitializer, <32 x i32> %65, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %67 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %68 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %69 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.5, <32 x i32> %68, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %70 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %71 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %69, <32 x i32> %arg.5, <32 x i32> %70, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %72 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %67, <1 x i32> zeroinitializer, <32 x i32> %71, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %73 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %72, <32 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %74 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %66, <64 x i16> %73, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %75 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %76 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %77 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %76, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %78 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %79 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %77, <32 x i32> %arg, <32 x i32> %78, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %80 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %75, <1 x i32> zeroinitializer, <32 x i32> %79, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %81 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %82 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %83 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg, <32 x i32> %82, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %84 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %85 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %83, <32 x i32> %arg, <32 x i32> %84, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %86 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %81, <1 x i32> zeroinitializer, <32 x i32> %85, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %87 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %86, <32 x i32> %arg.3, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %88 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %80, <64 x i16> %87, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %89 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %74, <32 x i32> %88, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %90 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %91 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %92 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %91, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %93 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %94 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %92, <32 x i32> %arg.11, <32 x i32> %93, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %95 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %90, <1 x i32> zeroinitializer, <32 x i32> %94, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %96 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.13, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %97 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %98 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.11, <32 x i32> %97, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %99 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %100 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %98, <32 x i32> %arg.11, <32 x i32> %99, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %101 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %96, <1 x i32> zeroinitializer, <32 x i32> %100, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %102 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %101, <32 x i32> %arg.12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %103 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %95, <64 x i16> %102, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %104 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %105 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %106 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %105, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %107 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %108 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %106, <32 x i32> %arg.8, <32 x i32> %107, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %109 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %104, <1 x i32> zeroinitializer, <32 x i32> %108, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %110 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %111 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %112 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyewuh_128B_dsl(<1 x i64> <i64 16>, <32 x i32> %arg.8, <32 x i32> %111, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 0, i32 64, i32 1, i32 0)
  %113 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %114 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmpyowh_rnd_sacc_128B_dsl(<1 x i64> <i64 14>, <1 x i64> <i64 1>, <1 x i64> <i64 1>, <32 x i32> %112, <32 x i32> %arg.8, <32 x i32> %113, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 32, i32 1, i32 1, i32 -1, i32 -1, i32 1, i32 64, i32 1, i32 64, i32 1, i32 16, i32 0)
  %115 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %110, <1 x i32> zeroinitializer, <32 x i32> %114, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %116 = tail call <64 x i16> @llvm.hydride.hexagon_V6_pred_and_128B_dsl(<32 x i32> %115, <32 x i32> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 0)
  %117 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.1(<32 x i32> %109, <64 x i16> %116, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %118 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vsathub_128B_dsl(<32 x i32> %103, <32 x i32> %117, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 16, i32 1, i32 32, i32 1, i32 1, i32 0)
  %119 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %89, <64 x i16> %118, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %120 = tail call <128 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<128 x i16> %arg.14, <256 x i8> %119, i32 2048, i32 2048, i32 0, i32 2048, i32 16, i32 1, i32 0)
  %121 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %120, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %122 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vpackwuh_sat_128B_dsl(<128 x i8> %60, <128 x i8> %121, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 0, i32 16, i32 1, i32 64, i32 0, i32 16, i32 1, i32 8, i32 0)
  %123 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl(<128 x i8> %arg.15, <128 x i8> %122, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %124 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl(<128 x i8> %arg.16, <128 x i8> %123, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %124
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nobuiltin "no-builtins" }
attributes #16 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!96, !11, i64 0}
!96 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !15, i64 4, !15, i64 8}
!97 = !{!96, !15, i64 8}
!98 = !{!96, !15, i64 4}
!99 = !{!"branch_weights", i32 1, i32 2000}
!100 = !{!"branch_weights", i32 0, i32 1073741824}
!101 = !{!"branch_weights", i32 1073741824, i32 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"filter", !104, i64 0}
!104 = !{!"Halide buffer"}
!105 = !{!106, !106, i64 0}
!106 = !{!"filter_zeroed", !104, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"bias", !104, i64 0}
!109 = !{!110, !110, i64 0}
!110 = !{!"offset_c.width32.base0", !111, i64 0}
!111 = !{!"offset_c.width64.base0", !112, i64 0}
!112 = !{!"offset_c.width128.base0", !113, i64 0}
!113 = !{!"offset_c.width256.base0", !114, i64 0}
!114 = !{!"offset_c.width512.base0", !115, i64 0}
!115 = !{!"offset_c.width1024.base0", !116, i64 0}
!116 = !{!"offset_c", !104, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"offset_c.width32.base32", !111, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"offset_c.width32.base64", !121, i64 0}
!121 = !{!"offset_c.width64.base64", !112, i64 0}
!122 = !{!123, !123, i64 0}
!123 = !{!"offset_c.width32.base96", !121, i64 0}
!124 = !{!"branch_weights", i32 0, i32 -2147483648}
!125 = !{!126, !126, i64 0}
!126 = !{!"input", !104, i64 0}
!127 = !{!128, !128, i64 0}
!128 = !{!"resampled_input", !104, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"convolved.width32.base0", !131, i64 0}
!131 = !{!"convolved.width64.base0", !132, i64 0}
!132 = !{!"convolved.width128.base0", !133, i64 0}
!133 = !{!"convolved.width256.base0", !134, i64 0}
!134 = !{!"convolved.width512.base0", !135, i64 0}
!135 = !{!"convolved.width1024.base0", !136, i64 0}
!136 = !{!"convolved", !104, i64 0}
!137 = !{!138, !138, i64 0}
!138 = !{!"convolved.width32.base32", !131, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"convolved.width32.base64", !141, i64 0}
!141 = !{!"convolved.width64.base64", !132, i64 0}
!142 = !{!143, !143, i64 0}
!143 = !{!"convolved.width32.base96", !141, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"convolved.width32.base128", !146, i64 0}
!146 = !{!"convolved.width64.base128", !147, i64 0}
!147 = !{!"convolved.width128.base128", !133, i64 0}
!148 = !{!149, !149, i64 0}
!149 = !{!"convolved.width32.base160", !146, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"convolved.width32.base192", !152, i64 0}
!152 = !{!"convolved.width64.base192", !147, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"convolved.width32.base224", !152, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"convolved.width32.base256", !157, i64 0}
!157 = !{!"convolved.width64.base256", !158, i64 0}
!158 = !{!"convolved.width128.base256", !159, i64 0}
!159 = !{!"convolved.width256.base256", !134, i64 0}
!160 = !{!161, !161, i64 0}
!161 = !{!"convolved.width32.base288", !157, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"convolved.width32.base320", !164, i64 0}
!164 = !{!"convolved.width64.base320", !158, i64 0}
!165 = !{!166, !166, i64 0}
!166 = !{!"convolved.width32.base352", !164, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"convolved.width32.base384", !169, i64 0}
!169 = !{!"convolved.width64.base384", !170, i64 0}
!170 = !{!"convolved.width128.base384", !159, i64 0}
!171 = !{!172, !172, i64 0}
!172 = !{!"convolved.width32.base416", !169, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"convolved.width32.base448", !175, i64 0}
!175 = !{!"convolved.width64.base448", !170, i64 0}
!176 = !{!177, !177, i64 0}
!177 = !{!"convolved.width32.base480", !175, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"filter_zeroed.width64.base256", !180, i64 0}
!180 = !{!"filter_zeroed.width128.base256", !181, i64 0}
!181 = !{!"filter_zeroed.width256.base256", !182, i64 0}
!182 = !{!"filter_zeroed.width512.base0", !183, i64 0}
!183 = !{!"filter_zeroed.width1024.base0", !106, i64 0}
!184 = !{!185, !185, i64 0}
!185 = !{!"filter_zeroed.width64.base128", !186, i64 0}
!186 = !{!"filter_zeroed.width128.base128", !187, i64 0}
!187 = !{!"filter_zeroed.width256.base0", !182, i64 0}
!188 = !{!189, !189, i64 0}
!189 = !{!"filter_zeroed.width64.base0", !190, i64 0}
!190 = !{!"filter_zeroed.width128.base0", !187, i64 0}
!191 = !{!192, !192, i64 0}
!192 = !{!"filter_zeroed.width64.base320", !180, i64 0}
!193 = !{!194, !194, i64 0}
!194 = !{!"filter_zeroed.width64.base192", !186, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"filter_zeroed.width64.base64", !190, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"output", !104, i64 0}
!199 = !{!"branch_weights", i32 -2147483648, i32 0}
!200 = !{!201, !201, i64 0}
!201 = !{!"bias.width32.base0", !202, i64 0}
!202 = !{!"bias.width64.base0", !203, i64 0}
!203 = !{!"bias.width128.base0", !204, i64 0}
!204 = !{!"bias.width256.base0", !205, i64 0}
!205 = !{!"bias.width512.base0", !206, i64 0}
!206 = !{!"bias.width1024.base0", !108, i64 0}
!207 = !{!208, !208, i64 0}
!208 = !{!"bias.width32.base32", !202, i64 0}
!209 = !{!210, !210, i64 0}
!210 = !{!"bias.width32.base64", !211, i64 0}
!211 = !{!"bias.width64.base64", !203, i64 0}
!212 = !{!213, !213, i64 0}
!213 = !{!"bias.width32.base96", !211, i64 0}
