; ModuleID = 'conv_nn_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 4
@4 = private constant i64 0
@5 = private constant i64 32
@6 = private constant i64 0
@7 = private constant i64 0
@8 = private constant i64 0
@9 = private constant i64 0
@10 = private constant [12 x i64*] [i64* @2, i64* @3, i64* @4, i64* @5, i64* @6, i64* null, i64* @7, i64* null, i64* @8, i64* null, i64* @9, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@11 = private constant i64 0
@12 = private constant [2 x i64*] [i64* @11, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [9 x i8] c"stride_x\00", align 32
@str.107 = private constant [9 x i8] c"stride_y\00", align 32
@str.108 = private constant [11 x i8] c"dilation_x\00", align 32
@str.109 = private constant [11 x i8] c"dilation_y\00", align 32
@str.110 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.111 = private constant [13 x i8] c"output_shift\00", align 32
@str.112 = private constant [12 x i8] c"output_zero\00", align 32
@str.113 = private constant [11 x i8] c"output_min\00", align 32
@str.114 = private constant [11 x i8] c"output_max\00", align 32
@13 = private constant i64 0
@14 = private constant [8 x i64*] [i64* @13, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.115 = private constant [7 x i8] c"output\00", align 32
@15 = private constant [15 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 6, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([12 x i64*], [12 x i64*]* @10, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @12, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.115, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @14, i32 0, i32 0) }]
@str.116 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.117 = private constant [15 x i8] c"conv_nn_hvx128\00", align 32
@conv_nn_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 15, %struct.halide_filter_argument_t* getelementptr inbounds ([15 x %struct.halide_filter_argument_t], [15 x %struct.halide_filter_argument_t]* @15, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.116, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.117, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #14
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #15
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #15
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #15
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #15
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #15
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #15
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #15
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #15
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #15
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #15
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #15
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #15
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #14
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #14
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #15
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #14
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #14
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #14
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #15
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #15
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #15
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #15
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #15
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #15
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #15
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #15
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #15
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #15
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #15
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #15
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #15
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #15
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #15
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #15
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #15
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #15
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #15
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #15
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #15
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #15
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #15
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #15
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #15
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #15
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #15
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #15
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #15
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #15
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #15
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #14
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #15
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #15
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #15
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #15
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #15
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #15
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #15
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #15
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #15
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #14
  %call.i = call i8* @malloc(i32 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #14
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #14
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32>, <32 x i32>, i32) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32>, <32 x i32>, i32) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32>, i32) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #14
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #14
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @conv_nn_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %stride_x, i32 %stride_y, i32 %dilation_x, i32 %dilation_y, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
if.end.i:
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = bitcast i8** %host.i to i32**
  %1 = load i32*, i32** %0, align 4, !tbaa !43
  %2 = bitcast i32* %1 to i8*
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 6
  %3 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %3, i32 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !49
  %host.i478 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %5 = load i8*, i8** %host.i478, align 4, !tbaa !43
  %dim.i479 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i479, align 8, !tbaa !46
  %extent.i494 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 2, i32 1
  %7 = load i32, i32* %extent.i494, align 4, !tbaa !49
  %stride.i500 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 3, i32 2
  %8 = load i32, i32* %stride.i500, align 4, !tbaa !50
  %extent.i504 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 4, i32 1
  %9 = load i32, i32* %extent.i504, align 4, !tbaa !49
  %stride.i506 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 4, i32 2
  %10 = load i32, i32* %stride.i506, align 4, !tbaa !50
  %extent.i510 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 5, i32 1
  %11 = load i32, i32* %extent.i510, align 4, !tbaa !49
  %stride.i512 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 5, i32 2
  %12 = load i32, i32* %stride.i512, align 4, !tbaa !50
  %host.i513 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %13 = load i8*, i8** %host.i513, align 4, !tbaa !43
  %dim.i514 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i514, align 8, !tbaa !46
  %extent.i517 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 0, i32 1
  %15 = load i32, i32* %extent.i517, align 4, !tbaa !49
  %min.i521 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 1, i32 0
  %16 = load i32, i32* %min.i521, align 4, !tbaa !47
  %stride.i523 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 1, i32 2
  %17 = load i32, i32* %stride.i523, align 4, !tbaa !50
  %min.i525 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 2, i32 0
  %18 = load i32, i32* %min.i525, align 4, !tbaa !47
  %stride.i527 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 2, i32 2
  %19 = load i32, i32* %stride.i527, align 4, !tbaa !50
  %min.i529 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 0
  %20 = load i32, i32* %min.i529, align 4, !tbaa !47
  %extent.i531 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 1
  %21 = load i32, i32* %extent.i531, align 4, !tbaa !49
  %stride.i533 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 2
  %22 = load i32, i32* %stride.i533, align 4, !tbaa !50
  %host.i534 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %23 = load i8*, i8** %host.i534, align 4, !tbaa !43
  %dim.i535 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i535, align 8, !tbaa !46
  %min.i542 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 0
  %25 = load i32, i32* %min.i542, align 4, !tbaa !47
  %extent.i544 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 1
  %26 = load i32, i32* %extent.i544, align 4, !tbaa !49
  %stride.i546 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 2
  %27 = load i32, i32* %stride.i546, align 4, !tbaa !50
  %min.i548 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 0
  %28 = load i32, i32* %min.i548, align 4, !tbaa !47
  %extent.i550 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 1
  %29 = load i32, i32* %extent.i550, align 4, !tbaa !49
  %stride.i552 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 2
  %30 = load i32, i32* %stride.i552, align 4, !tbaa !50
  %stride.i558 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 3, i32 2
  %31 = load i32, i32* %stride.i558, align 4, !tbaa !50
  %32 = add nsw i32 %4, -1
  %a0 = ashr i32 %32, 5
  %33 = icmp sgt i32 %a0, -1
  %t1217 = select i1 %33, i32 %a0, i32 -1
  %34 = shl i32 %t1217, 7
  %35 = add i32 %34, 268
  %cmp7.i = icmp ugt i32 %35, 16384
  br i1 %cmp7.i, label %pseudostack_alloc.exit, label %then_bb

pseudostack_alloc.exit:                           ; preds = %if.end.i
  %call.i = tail call i8* @halide_malloc(i8* null, i32 %35) #14
  %.not = icmp eq i8* %call.i, null
  br i1 %.not, label %then_bb, label %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge", !prof !95

"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge": ; preds = %pseudostack_alloc.exit
  %36 = bitcast i8* %call.i to i32*
  br label %"produce bias_im_global_wrapper$0"

then_bb:                                          ; preds = %if.end.i, %pseudostack_alloc.exit
  %37 = alloca i32, i32 %35, align 128
  %38 = bitcast i32* %37 to i8*
  br label %"produce bias_im_global_wrapper$0"

"produce bias_im_global_wrapper$0":               ; preds = %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge", %then_bb
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" = phi i8* [ %call.i, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %38, %then_bb ]
  %"bias_im_global_wrapper$0" = phi i32* [ %36, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %37, %then_bb ]
  %39 = icmp sgt i32 %4, 0
  br i1 %39, label %"for bias_im_global_wrapper$0.s0._0.preheader.old", label %"end for bias_im_global_wrapper$0.s0._0", !prof !96

"for bias_im_global_wrapper$0.s0._0.preheader.old": ; preds = %"produce bias_im_global_wrapper$0"
  %40 = shl nuw i32 %4, 2
  %41 = ptrtoint i32* %1 to i32
  %42 = ptrtoint i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" to i32
  %43 = bitcast i32* %1 to i8*
  %44 = icmp ult i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", %43
  %45 = sub i32 %42, %41
  %46 = icmp sle i32 %40, %45
  %47 = or i1 %44, %46
  br i1 %47, label %"for bias_im_global_wrapper$0.s0._0.rtli", label %"for bias_im_global_wrapper$0.s0._0.preheader"

"for bias_im_global_wrapper$0.s0._0.preheader":   ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  %48 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %49 = icmp ult i32 %48, 7
  br i1 %49, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0.preheader.new"

"for bias_im_global_wrapper$0.s0._0.preheader.new": ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader"
  %unroll_iter = and i32 %4, -8
  br label %"for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0.rtli":        ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 4 %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", i8* align 4 %2, i32 %40, i1 false)
  br label %"end for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0":             ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader.new"
  %"bias_im_global_wrapper$0.s0._0" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %81, %"for bias_im_global_wrapper$0.s0._0" ]
  %niter = phi i32 [ %unroll_iter, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %niter.nsub.7, %"for bias_im_global_wrapper$0.s0._0" ]
  %50 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0"
  %51 = load i32, i32* %50, align 4, !tbaa !97
  %52 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0"
  store i32 %51, i32* %52, align 4, !tbaa !100
  %53 = or i32 %"bias_im_global_wrapper$0.s0._0", 1
  %54 = getelementptr inbounds i32, i32* %1, i32 %53
  %55 = load i32, i32* %54, align 4, !tbaa !97
  %56 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %53
  store i32 %55, i32* %56, align 4, !tbaa !100
  %57 = or i32 %"bias_im_global_wrapper$0.s0._0", 2
  %58 = getelementptr inbounds i32, i32* %1, i32 %57
  %59 = load i32, i32* %58, align 4, !tbaa !97
  %60 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %57
  store i32 %59, i32* %60, align 4, !tbaa !100
  %61 = or i32 %"bias_im_global_wrapper$0.s0._0", 3
  %62 = getelementptr inbounds i32, i32* %1, i32 %61
  %63 = load i32, i32* %62, align 4, !tbaa !97
  %64 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %61
  store i32 %63, i32* %64, align 4, !tbaa !100
  %65 = or i32 %"bias_im_global_wrapper$0.s0._0", 4
  %66 = getelementptr inbounds i32, i32* %1, i32 %65
  %67 = load i32, i32* %66, align 4, !tbaa !97
  %68 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %65
  store i32 %67, i32* %68, align 4, !tbaa !100
  %69 = or i32 %"bias_im_global_wrapper$0.s0._0", 5
  %70 = getelementptr inbounds i32, i32* %1, i32 %69
  %71 = load i32, i32* %70, align 4, !tbaa !97
  %72 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %69
  store i32 %71, i32* %72, align 4, !tbaa !100
  %73 = or i32 %"bias_im_global_wrapper$0.s0._0", 6
  %74 = getelementptr inbounds i32, i32* %1, i32 %73
  %75 = load i32, i32* %74, align 4, !tbaa !97
  %76 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %73
  store i32 %75, i32* %76, align 4, !tbaa !100
  %77 = or i32 %"bias_im_global_wrapper$0.s0._0", 7
  %78 = getelementptr inbounds i32, i32* %1, i32 %77
  %79 = load i32, i32* %78, align 4, !tbaa !97
  %80 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %77
  store i32 %79, i32* %80, align 4, !tbaa !100
  %81 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0", 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0"

"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa": ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader"
  %"bias_im_global_wrapper$0.s0._0.unr" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader" ], [ %81, %"for bias_im_global_wrapper$0.s0._0" ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil"

"for bias_im_global_wrapper$0.s0._0.epil":        ; preds = %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", %"for bias_im_global_wrapper$0.s0._0.epil"
  %"bias_im_global_wrapper$0.s0._0.epil" = phi i32 [ %85, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %"bias_im_global_wrapper$0.s0._0.unr", %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %xtraiter, %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %82 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0.epil"
  %83 = load i32, i32* %82, align 4, !tbaa !97
  %84 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0.epil"
  store i32 %83, i32* %84, align 4, !tbaa !100
  %85 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0.epil", 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil", !llvm.loop !102

"end for bias_im_global_wrapper$0.s0._0":         ; preds = %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", %"for bias_im_global_wrapper$0.s0._0.epil", %"for bias_im_global_wrapper$0.s0._0.rtli", %"produce bias_im_global_wrapper$0"
  %86 = and i32 %4, 127
  %t1213 = icmp eq i32 %86, 0
  %t1214 = icmp sgt i32 %26, 7
  %87 = icmp sgt i32 %26, 5
  %88 = and i1 %t1213, %87
  %89 = or i32 %32, 127
  %90 = and i32 %4, 63
  %91 = icmp eq i32 %90, 0
  %92 = and i1 %91, %t1214
  %93 = or i32 %32, 63
  %94 = and i32 %4, 31
  %95 = icmp eq i32 %94, 0
  %96 = and i1 %95, %t1214
  %97 = or i32 %32, 31
  %98 = icmp sgt i32 %26, 0
  %99 = and i1 %t1213, %98
  %100 = icmp slt i32 %4, 32
  %101 = select i1 %100, i32 %4, i32 32
  %102 = add nsw i32 %101, -1
  %a3 = ashr i32 %102, 5
  %103 = icmp slt i32 %a0, 3
  %104 = select i1 %103, i32 %a0, i32 3
  %105 = and i32 %a3, -4
  %b5 = add nsw i32 %105, %104
  %106 = icmp slt i32 %a3, %b5
  %107 = select i1 %106, i32 %a3, i32 %b5
  %108 = add nsw i32 %107, %a0
  %109 = shl nsw i32 %108, 5
  %110 = or i32 %109, 31
  %111 = select i1 %99, i32 %89, i32 %110
  %112 = select i1 %96, i32 %97, i32 %111
  %113 = select i1 %92, i32 %93, i32 %112
  %a2 = select i1 %88, i32 %89, i32 %113
  %114 = icmp sgt i32 %a2, %97
  %115 = select i1 %114, i32 %a2, i32 %97
  %.inv = icmp slt i32 %115, 0
  %a9 = shl i32 %115, 2
  %a9.op.op = add i32 %a9, 144
  %116 = select i1 %.inv, i32 140, i32 %a9.op.op
  %117 = call i8* @halide_malloc(i8* null, i32 %116)
  %offset_c = bitcast i8* %117 to i32*
  %118 = add nsw i32 %4, 31
  %119 = ashr i32 %118, 5
  br i1 %39, label %"for offset_c.s0.c.c.preheader", label %"consume bias_im_global_wrapper$0.thread", !prof !96

"for offset_c.s0.c.c.preheader":                  ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %120 = shl nuw i32 %119, 7
  call void @llvm.memset.p0i8.i32(i8* align 128 %117, i8 0, i32 %120, i1 false)
  %.not402 = icmp eq i8 %input_zero, 0
  br i1 %.not402, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.preheader"

"for offset_c.s1.c.co.preheader":                 ; preds = %"for offset_c.s0.c.c.preheader"
  %121 = icmp sgt i32 %11, 0
  %122 = select i1 %121, i32 %11, i32 0
  %123 = icmp sgt i32 %7, 0
  %124 = insertelement <128 x i8> undef, i8 %input_zero, i32 0
  %125 = shufflevector <128 x i8> %124, <128 x i8> undef, <128 x i32> zeroinitializer
  %126 = zext <128 x i8> %125 to <128 x i16>
  %127 = bitcast <128 x i16> %126 to <64 x i32>
  %128 = icmp sgt i32 %9, 0
  %or.cond = and i1 %121, %128
  %129 = and i1 %or.cond, %123
  br i1 %129, label %"for offset_c.s1.c.co.preheader.split.us.split.us.split.us", label %"for offset_c.s2.c.c.preheader", !prof !103

"for offset_c.s1.c.co.preheader.split.us.split.us.split.us": ; preds = %"for offset_c.s1.c.co.preheader"
  %130 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %127)
  %131 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %127)
  %xtraiter1488 = and i32 %7, 1
  %132 = icmp eq i32 %7, 1
  %unroll_iter1490 = and i32 %7, -2
  %lcmp.mod1489.not = icmp eq i32 %xtraiter1488, 0
  br label %"for offset_c.s1.c.co.us.us.us"

"for offset_c.s1.c.co.us.us.us":                  ; preds = %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", %"for offset_c.s1.c.co.preheader.split.us.split.us.split.us"
  %offset_c.s1.c.co.us.us.us = phi i32 [ %259, %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.preheader.split.us.split.us.split.us" ]
  %133 = mul nsw i32 %offset_c.s1.c.co.us.us.us, %8
  %134 = shl nsw i32 %offset_c.s1.c.co.us.us.us, 5
  %135 = getelementptr inbounds i32, i32* %offset_c, i32 %134
  %136 = bitcast i32* %135 to <32 x i32>*
  %.promoted.us.us.us = load <32 x i32>, <32 x i32>* %136, align 128, !tbaa !104
  br label %"for offset_c.s1.r19$y.us.us.us.us.us"

"for offset_c.s1.r19$y.us.us.us.us.us":           ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", %"for offset_c.s1.c.co.us.us.us"
  %.lcssa897.us.lcssa.us.us904.us.us.us = phi <32 x i32> [ %.lcssa1487, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ %.promoted.us.us.us, %"for offset_c.s1.c.co.us.us.us" ]
  %"offset_c.s1.r19$y.us.us.us.us.us" = phi i32 [ %258, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.us.us.us" ]
  %137 = mul nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", %12
  %t838.us.us.us.us.us = add nsw i32 %137, %133
  br label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"for offset_c.s1.r19$x.us.us.us.us.us.us":        ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", %"for offset_c.s1.r19$y.us.us.us.us.us"
  %.lcssa897.us898.us.us.us.us.us = phi <32 x i32> [ %.lcssa1487, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ %.lcssa897.us.lcssa.us.us904.us.us.us, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %"offset_c.s1.r19$x.us.us.us.us.us.us" = phi i32 [ %257, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %138 = mul nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", %10
  %139 = add nsw i32 %t838.us.us.us.us.us, %138
  br i1 %132, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"for offset_c.s1.r19$z.r124.us.us.us.us.us.us":   ; preds = %"for offset_c.s1.r19$x.us.us.us.us.us.us", %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"
  %140 = phi <32 x i32> [ %217, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ %.lcssa897.us898.us.us.us.us.us, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us" = phi i32 [ %218, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %niter1491 = phi i32 [ %niter1491.nsub.1, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ %unroll_iter1490, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %141 = shl nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %142 = add nsw i32 %139, %141
  %143 = getelementptr inbounds i8, i8* %5, i32 %142
  %144 = bitcast i8* %143 to <128 x i8>*
  %145 = load <128 x i8>, <128 x i8>* %144, align 128, !tbaa !106
  %146 = zext <128 x i8> %145 to <128 x i16>
  %147 = bitcast <128 x i16> %146 to <64 x i32>
  %148 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %147)
  %149 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %147)
  %150 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %149, <32 x i32> %131) #11
  %151 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %148, <32 x i32> %130) #11
  %152 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %150) #11
  %153 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %150) #11
  %154 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %153, <32 x i32> %152) #11
  %155 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %151) #11
  %156 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %151) #11
  %157 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %156, <32 x i32> %155) #11
  %158 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %157, <32 x i32> %154)
  %159 = bitcast <64 x i32> %158 to <128 x i16>
  %t1220.us.us.us.us.us.us = zext <128 x i16> %159 to <128 x i32>
  %160 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %161 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %162 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %161, <32 x i32> %160, i32 -4)
  %163 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %162)
  %164 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %165 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %166 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %165, <32 x i32> %164, i32 -4)
  %167 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %166)
  %168 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %167, <32 x i32> %163)
  %169 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %162)
  %170 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %166)
  %171 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %170, <32 x i32> %169)
  %t1219.us.us.us.us.us.us = add nsw <64 x i32> %171, %168
  %172 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1219.us.us.us.us.us.us)
  %173 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1219.us.us.us.us.us.us)
  %174 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %173, <32 x i32> %172, i32 -4)
  %175 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %174)
  %176 = add nsw <32 x i32> %175, %140
  %177 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %174)
  %178 = add nsw <32 x i32> %176, %177
  %179 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %180 = or i32 %179, 128
  %181 = add nsw i32 %139, %180
  %182 = getelementptr inbounds i8, i8* %5, i32 %181
  %183 = bitcast i8* %182 to <128 x i8>*
  %184 = load <128 x i8>, <128 x i8>* %183, align 128, !tbaa !106
  %185 = zext <128 x i8> %184 to <128 x i16>
  %186 = bitcast <128 x i16> %185 to <64 x i32>
  %187 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %186)
  %188 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %186)
  %189 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %188, <32 x i32> %131) #11
  %190 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %187, <32 x i32> %130) #11
  %191 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %189) #11
  %192 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %189) #11
  %193 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %192, <32 x i32> %191) #11
  %194 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %190) #11
  %195 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %190) #11
  %196 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %195, <32 x i32> %194) #11
  %197 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %196, <32 x i32> %193)
  %198 = bitcast <64 x i32> %197 to <128 x i16>
  %t1220.us.us.us.us.us.us.1 = zext <128 x i16> %198 to <128 x i32>
  %199 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %200 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %201 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %200, <32 x i32> %199, i32 -4)
  %202 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %201)
  %203 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %204 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %205 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %204, <32 x i32> %203, i32 -4)
  %206 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %205)
  %207 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %206, <32 x i32> %202)
  %208 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %201)
  %209 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %205)
  %210 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %209, <32 x i32> %208)
  %t1219.us.us.us.us.us.us.1 = add nsw <64 x i32> %210, %207
  %211 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1219.us.us.us.us.us.us.1)
  %212 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1219.us.us.us.us.us.us.1)
  %213 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %212, <32 x i32> %211, i32 -4)
  %214 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %213)
  %215 = add nsw <32 x i32> %214, %178
  %216 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %213)
  %217 = add nsw <32 x i32> %215, %216
  %218 = add nuw nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 2
  %niter1491.nsub.1 = add i32 %niter1491, -2
  %niter1491.ncmp.1 = icmp eq i32 %niter1491.nsub.1, 0
  br i1 %niter1491.ncmp.1, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa": ; preds = %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us", %"for offset_c.s1.r19$x.us.us.us.us.us.us"
  %.lcssa1487.ph = phi <32 x i32> [ undef, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %217, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  %.unr = phi <32 x i32> [ %.lcssa897.us898.us.us.us.us.us, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %217, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.unr" = phi i32 [ 0, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %218, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  br i1 %lcmp.mod1489.not, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil"

"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa"
  %219 = shl nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.unr", 7
  %220 = add nsw i32 %139, %219
  %221 = getelementptr inbounds i8, i8* %5, i32 %220
  %222 = bitcast i8* %221 to <128 x i8>*
  %223 = load <128 x i8>, <128 x i8>* %222, align 128, !tbaa !106
  %224 = zext <128 x i8> %223 to <128 x i16>
  %225 = bitcast <128 x i16> %224 to <64 x i32>
  %226 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %225)
  %227 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %225)
  %228 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %227, <32 x i32> %131) #11
  %229 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %226, <32 x i32> %130) #11
  %230 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %228) #11
  %231 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %228) #11
  %232 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %231, <32 x i32> %230) #11
  %233 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %229) #11
  %234 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %229) #11
  %235 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %234, <32 x i32> %233) #11
  %236 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %235, <32 x i32> %232)
  %237 = bitcast <64 x i32> %236 to <128 x i16>
  %t1220.us.us.us.us.us.us.epil = zext <128 x i16> %237 to <128 x i32>
  %238 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %239 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %240 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %239, <32 x i32> %238, i32 -4)
  %241 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %240)
  %242 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %243 = shufflevector <128 x i32> %t1220.us.us.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %244 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %243, <32 x i32> %242, i32 -4)
  %245 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %244)
  %246 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %245, <32 x i32> %241)
  %247 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %240)
  %248 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %244)
  %249 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %248, <32 x i32> %247)
  %t1219.us.us.us.us.us.us.epil = add nsw <64 x i32> %249, %246
  %250 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1219.us.us.us.us.us.us.epil)
  %251 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1219.us.us.us.us.us.us.epil)
  %252 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %251, <32 x i32> %250, i32 -4)
  %253 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %252)
  %254 = add nsw <32 x i32> %253, %.unr
  %255 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %252)
  %256 = add nsw <32 x i32> %254, %255
  br label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us"

"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil"
  %.lcssa1487 = phi <32 x i32> [ %.lcssa1487.ph, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ], [ %256, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ]
  %257 = add nuw nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", 1
  %.not472.us.us.us.us.us.us = icmp eq i32 %257, %9
  br i1 %.not472.us.us.us.us.us.us, label %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us"
  %258 = add nuw nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", 1
  %.not471.us.us.us.us.us = icmp eq i32 %258, %122
  br i1 %.not471.us.us.us.us.us, label %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", label %"for offset_c.s1.r19$y.us.us.us.us.us"

"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us": ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us"
  store <32 x i32> %.lcssa1487, <32 x i32>* %136, align 128, !tbaa !104
  %259 = add nuw nsw i32 %offset_c.s1.c.co.us.us.us, 1
  %.not470.us.us.us = icmp eq i32 %259, %119
  br i1 %.not470.us.us.us, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.us.us.us"

"consume bias_im_global_wrapper$0.thread":        ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %260 = zext i8 %filter_zero to i32
  br label %"consume offset_c"

"for offset_c.s2.c.c.preheader":                  ; preds = %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", %"for offset_c.s1.c.co.preheader", %"for offset_c.s0.c.c.preheader"
  %261 = zext i8 %filter_zero to i32
  %262 = zext i8 %input_zero to i32
  %263 = shl nuw nsw i32 %262, 2
  %264 = mul nuw nsw i32 %263, %261
  %265 = mul i32 %264, %7
  %t841.s = mul i32 %265, %9
  %266 = mul i32 %t841.s, %11
  %267 = insertelement <32 x i32> undef, i32 %266, i32 0
  %268 = shufflevector <32 x i32> %267, <32 x i32> undef, <32 x i32> zeroinitializer
  %269 = add nsw i32 %119, -1
  %xtraiter1492 = and i32 %119, 7
  %270 = icmp ult i32 %269, 7
  br i1 %270, label %"consume offset_c.loopexit.unr-lcssa", label %"for offset_c.s2.c.c.preheader.new"

"for offset_c.s2.c.c.preheader.new":              ; preds = %"for offset_c.s2.c.c.preheader"
  %unroll_iter1495 = and i32 %119, -8
  br label %"for offset_c.s2.c.c"

"for offset_c.s2.c.c":                            ; preds = %"for offset_c.s2.c.c", %"for offset_c.s2.c.c.preheader.new"
  %offset_c.s2.c.c = phi i32 [ 0, %"for offset_c.s2.c.c.preheader.new" ], [ %350, %"for offset_c.s2.c.c" ]
  %niter1496 = phi i32 [ %unroll_iter1495, %"for offset_c.s2.c.c.preheader.new" ], [ %niter1496.nsub.7, %"for offset_c.s2.c.c" ]
  %271 = shl nsw i32 %offset_c.s2.c.c, 5
  %272 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %271
  %273 = bitcast i32* %272 to <32 x i32>*
  %274 = load <32 x i32>, <32 x i32>* %273, align 128, !tbaa !100
  %275 = add nsw <32 x i32> %274, %268
  %276 = getelementptr inbounds i32, i32* %offset_c, i32 %271
  %277 = bitcast i32* %276 to <32 x i32>*
  %278 = load <32 x i32>, <32 x i32>* %277, align 128, !tbaa !104
  %279 = sub <32 x i32> %275, %278
  store <32 x i32> %279, <32 x i32>* %277, align 128, !tbaa !104
  %280 = shl i32 %offset_c.s2.c.c, 5
  %281 = or i32 %280, 32
  %282 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %281
  %283 = bitcast i32* %282 to <32 x i32>*
  %284 = load <32 x i32>, <32 x i32>* %283, align 128, !tbaa !100
  %285 = add nsw <32 x i32> %284, %268
  %286 = getelementptr inbounds i32, i32* %offset_c, i32 %281
  %287 = bitcast i32* %286 to <32 x i32>*
  %288 = load <32 x i32>, <32 x i32>* %287, align 128, !tbaa !104
  %289 = sub <32 x i32> %285, %288
  store <32 x i32> %289, <32 x i32>* %287, align 128, !tbaa !104
  %290 = shl i32 %offset_c.s2.c.c, 5
  %291 = or i32 %290, 64
  %292 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %291
  %293 = bitcast i32* %292 to <32 x i32>*
  %294 = load <32 x i32>, <32 x i32>* %293, align 128, !tbaa !100
  %295 = add nsw <32 x i32> %294, %268
  %296 = getelementptr inbounds i32, i32* %offset_c, i32 %291
  %297 = bitcast i32* %296 to <32 x i32>*
  %298 = load <32 x i32>, <32 x i32>* %297, align 128, !tbaa !104
  %299 = sub <32 x i32> %295, %298
  store <32 x i32> %299, <32 x i32>* %297, align 128, !tbaa !104
  %300 = shl i32 %offset_c.s2.c.c, 5
  %301 = or i32 %300, 96
  %302 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %301
  %303 = bitcast i32* %302 to <32 x i32>*
  %304 = load <32 x i32>, <32 x i32>* %303, align 128, !tbaa !100
  %305 = add nsw <32 x i32> %304, %268
  %306 = getelementptr inbounds i32, i32* %offset_c, i32 %301
  %307 = bitcast i32* %306 to <32 x i32>*
  %308 = load <32 x i32>, <32 x i32>* %307, align 128, !tbaa !104
  %309 = sub <32 x i32> %305, %308
  store <32 x i32> %309, <32 x i32>* %307, align 128, !tbaa !104
  %310 = shl i32 %offset_c.s2.c.c, 5
  %311 = or i32 %310, 128
  %312 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %311
  %313 = bitcast i32* %312 to <32 x i32>*
  %314 = load <32 x i32>, <32 x i32>* %313, align 128, !tbaa !100
  %315 = add nsw <32 x i32> %314, %268
  %316 = getelementptr inbounds i32, i32* %offset_c, i32 %311
  %317 = bitcast i32* %316 to <32 x i32>*
  %318 = load <32 x i32>, <32 x i32>* %317, align 128, !tbaa !104
  %319 = sub <32 x i32> %315, %318
  store <32 x i32> %319, <32 x i32>* %317, align 128, !tbaa !104
  %320 = shl i32 %offset_c.s2.c.c, 5
  %321 = or i32 %320, 160
  %322 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %321
  %323 = bitcast i32* %322 to <32 x i32>*
  %324 = load <32 x i32>, <32 x i32>* %323, align 128, !tbaa !100
  %325 = add nsw <32 x i32> %324, %268
  %326 = getelementptr inbounds i32, i32* %offset_c, i32 %321
  %327 = bitcast i32* %326 to <32 x i32>*
  %328 = load <32 x i32>, <32 x i32>* %327, align 128, !tbaa !104
  %329 = sub <32 x i32> %325, %328
  store <32 x i32> %329, <32 x i32>* %327, align 128, !tbaa !104
  %330 = shl i32 %offset_c.s2.c.c, 5
  %331 = or i32 %330, 192
  %332 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %331
  %333 = bitcast i32* %332 to <32 x i32>*
  %334 = load <32 x i32>, <32 x i32>* %333, align 128, !tbaa !100
  %335 = add nsw <32 x i32> %334, %268
  %336 = getelementptr inbounds i32, i32* %offset_c, i32 %331
  %337 = bitcast i32* %336 to <32 x i32>*
  %338 = load <32 x i32>, <32 x i32>* %337, align 128, !tbaa !104
  %339 = sub <32 x i32> %335, %338
  store <32 x i32> %339, <32 x i32>* %337, align 128, !tbaa !104
  %340 = shl i32 %offset_c.s2.c.c, 5
  %341 = or i32 %340, 224
  %342 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %341
  %343 = bitcast i32* %342 to <32 x i32>*
  %344 = load <32 x i32>, <32 x i32>* %343, align 128, !tbaa !100
  %345 = add nsw <32 x i32> %344, %268
  %346 = getelementptr inbounds i32, i32* %offset_c, i32 %341
  %347 = bitcast i32* %346 to <32 x i32>*
  %348 = load <32 x i32>, <32 x i32>* %347, align 128, !tbaa !104
  %349 = sub <32 x i32> %345, %348
  store <32 x i32> %349, <32 x i32>* %347, align 128, !tbaa !104
  %350 = add nuw nsw i32 %offset_c.s2.c.c, 8
  %niter1496.nsub.7 = add i32 %niter1496, -8
  %niter1496.ncmp.7 = icmp eq i32 %niter1496.nsub.7, 0
  br i1 %niter1496.ncmp.7, label %"consume offset_c.loopexit.unr-lcssa", label %"for offset_c.s2.c.c"

"consume offset_c.loopexit.unr-lcssa":            ; preds = %"for offset_c.s2.c.c", %"for offset_c.s2.c.c.preheader"
  %offset_c.s2.c.c.unr = phi i32 [ 0, %"for offset_c.s2.c.c.preheader" ], [ %350, %"for offset_c.s2.c.c" ]
  %lcmp.mod1494.not = icmp eq i32 %xtraiter1492, 0
  br i1 %lcmp.mod1494.not, label %"consume offset_c", label %"for offset_c.s2.c.c.epil"

"for offset_c.s2.c.c.epil":                       ; preds = %"consume offset_c.loopexit.unr-lcssa", %"for offset_c.s2.c.c.epil"
  %offset_c.s2.c.c.epil = phi i32 [ %360, %"for offset_c.s2.c.c.epil" ], [ %offset_c.s2.c.c.unr, %"consume offset_c.loopexit.unr-lcssa" ]
  %epil.iter1493 = phi i32 [ %epil.iter1493.sub, %"for offset_c.s2.c.c.epil" ], [ %xtraiter1492, %"consume offset_c.loopexit.unr-lcssa" ]
  %351 = shl nsw i32 %offset_c.s2.c.c.epil, 5
  %352 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %351
  %353 = bitcast i32* %352 to <32 x i32>*
  %354 = load <32 x i32>, <32 x i32>* %353, align 128, !tbaa !100
  %355 = add nsw <32 x i32> %354, %268
  %356 = getelementptr inbounds i32, i32* %offset_c, i32 %351
  %357 = bitcast i32* %356 to <32 x i32>*
  %358 = load <32 x i32>, <32 x i32>* %357, align 128, !tbaa !104
  %359 = sub <32 x i32> %355, %358
  store <32 x i32> %359, <32 x i32>* %357, align 128, !tbaa !104
  %360 = add nuw nsw i32 %offset_c.s2.c.c.epil, 1
  %epil.iter1493.sub = add i32 %epil.iter1493, -1
  %epil.iter1493.cmp.not = icmp eq i32 %epil.iter1493.sub, 0
  br i1 %epil.iter1493.cmp.not, label %"consume offset_c", label %"for offset_c.s2.c.c.epil", !llvm.loop !108

"consume offset_c":                               ; preds = %"consume offset_c.loopexit.unr-lcssa", %"for offset_c.s2.c.c.epil", %"consume bias_im_global_wrapper$0.thread"
  %361 = phi i32 [ %260, %"consume bias_im_global_wrapper$0.thread" ], [ %261, %"for offset_c.s2.c.c.epil" ], [ %261, %"consume offset_c.loopexit.unr-lcssa" ]
  %362 = icmp eq i32 %stride_x, 1
  %363 = icmp eq i32 %7, 1
  %364 = and i1 %362, %363
  %365 = icmp eq i32 %15, 4
  %366 = icmp eq i32 %17, 4
  %367 = and i1 %365, %366
  %t844 = and i1 %364, %367
  %t843.not = icmp eq i8 %filter_zero, 0
  br i1 %88, label %then_bb4, label %next_bb5

after_bb3:                                        ; preds = %"end for output.s0.y.rebased249", %"end for output.s0.y.rebased197.loopexit.us", %"end for output.s0.y.rebased120.loopexit.us", %"end for output.s0.y.rebased43.loopexit.us", %"end for output.s0.y.rebased.loopexit.us", %"for output.s0.b.rebased193.preheader", %"for output.s0.b.rebased116.preheader", %"for output.s0.b.rebased39.preheader", %"for output.s0.b.rebased.preheader", %next_bb192, %then_bb191, %then_bb114, %then_bb37, %then_bb4
  %tobool.not.i.not = icmp eq i8* %117, null
  br i1 %tobool.not.i.not, label %land.lhs.true.i574, label %if.then.i559

if.then.i559:                                     ; preds = %after_bb3
  call void @halide_free(i8* null, i8* nonnull %117) #14
  br label %land.lhs.true.i574

land.lhs.true.i574:                               ; preds = %after_bb3, %if.then.i559
  br i1 %cmp7.i, label %if.then.i575, label %call_destructor.exit570

if.then.i575:                                     ; preds = %land.lhs.true.i574
  call void @halide_free(i8* null, i8* nonnull %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0") #14
  br label %call_destructor.exit570

call_destructor.exit570:                          ; preds = %if.then.i575, %land.lhs.true.i574
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #14
  ret i32 0

then_bb4:                                         ; preds = %"consume offset_c"
  %368 = mul nsw i32 %19, %18
  %369 = mul nsw i32 %22, %20
  %370 = mul nsw i32 %17, %16
  %371 = add i32 %369, %368
  %t852 = add i32 %371, %370
  %372 = icmp sgt i32 %21, 0
  br i1 %372, label %"for output.s0.b.rebased.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.preheader":              ; preds = %then_bb4
  %373 = mul nsw i32 %17, %stride_x
  %374 = mul nsw i32 %373, 5
  %375 = shl nsw i32 %373, 2
  %376 = mul nsw i32 %373, 3
  %377 = shl nsw i32 %373, 1
  %378 = sub nsw i32 %stride_x, %16
  %379 = mul nsw i32 %378, %17
  %380 = icmp sgt i32 %29, 0
  %.neg821 = mul i32 %30, %28
  %.neg822 = mul i32 %27, %25
  %.neg823 = mul i32 %31, %20
  %reass.add825 = add i32 %.neg821, %.neg822
  %reass.add826 = add i32 %reass.add825, %.neg823
  %381 = add nuw nsw i32 %26, 5
  %382 = ashr i32 %381, 31
  %383 = xor i32 %382, %381
  %384 = zext i32 %383 to i64
  %385 = mul nuw i64 %384, 2863311531
  %386 = lshr i64 %385, 34
  %387 = trunc i64 %386 to i32
  %388 = xor i32 %382, %387
  %389 = icmp sgt i32 %388, 0
  %b14 = add nsw i32 %26, -6
  %390 = icmp sgt i32 %11, 0
  %391 = icmp sgt i32 %9, 0
  %392 = icmp sgt i32 %7, 0
  %393 = ashr i32 %4, 7
  %394 = icmp sgt i32 %4, 127
  %395 = insertelement <128 x i32> undef, i32 %output_multiplier, i32 0
  %396 = shufflevector <128 x i32> %395, <128 x i32> undef, <128 x i32> zeroinitializer
  %397 = sext <128 x i32> %396 to <128 x i64>
  %398 = icmp sgt i32 %output_shift, 0
  %399 = select i1 %398, <128 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <128 x i32> zeroinitializer
  %400 = add nsw i32 %output_shift, -1
  %401 = zext i8 %output_zero to i16
  %402 = insertelement <128 x i16> undef, i16 %401, i32 0
  %403 = shufflevector <128 x i16> %402, <128 x i16> undef, <128 x i32> zeroinitializer
  %404 = bitcast <128 x i16> %403 to <64 x i32>
  %405 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %406 = shufflevector <128 x i8> %405, <128 x i8> undef, <128 x i32> zeroinitializer
  %407 = bitcast <128 x i8> %406 to <32 x i32>
  %408 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %409 = shufflevector <128 x i8> %408, <128 x i8> undef, <128 x i32> zeroinitializer
  %410 = bitcast <128 x i8> %409 to <32 x i32>
  br i1 %380, label %"for output.s0.b.rebased.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.us.preheader":           ; preds = %"for output.s0.b.rebased.preheader"
  %411 = add i32 %370, %368
  %412 = add i32 %9, -1
  %brmerge1331.demorgan = and i1 %391, %392
  %xtraiter1553 = and i32 %7, 1
  %413 = icmp eq i32 %7, 1
  %unroll_iter1555 = and i32 %7, -2
  %lcmp.mod1554.not = icmp eq i32 %xtraiter1553, 0
  %xtraiter1557 = and i32 %9, 3
  %414 = icmp ult i32 %412, 3
  %unroll_iter1561 = and i32 %9, -4
  %lcmp.mod1559.not = icmp eq i32 %xtraiter1557, 0
  br label %"for output.s0.b.rebased.us"

"for output.s0.b.rebased.us":                     ; preds = %"for output.s0.b.rebased.us.preheader", %"end for output.s0.y.rebased.loopexit.us"
  %sum_input401.sroa.0.0.us = phi <6 x i32> [ %.us-phi1146.us, %"end for output.s0.y.rebased.loopexit.us" ], [ undef, %"for output.s0.b.rebased.us.preheader" ]
  %output.s0.b.rebased.us = phi i32 [ %421, %"end for output.s0.y.rebased.loopexit.us" ], [ 0, %"for output.s0.b.rebased.us.preheader" ]
  %415 = add nsw i32 %output.s0.b.rebased.us, %20
  %416 = mul nsw i32 %415, %31
  %417 = sub i32 %416, %reass.add826
  %418 = mul nsw i32 %415, %22
  %419 = sub i32 %418, %371
  %420 = sub nsw i32 %418, %t852
  br i1 %389, label %"for output.s0.y.rebased.us.us", label %"end for output.s0.y.rebased.loopexit.us", !prof !96

"end for output.s0.y.rebased.loopexit.us":        ; preds = %"end for output.s0.x.xo.loopexit.us.us", %"for output.s0.b.rebased.us"
  %.us-phi1146.us = phi <6 x i32> [ %sum_input401.sroa.0.0.us, %"for output.s0.b.rebased.us" ], [ %sum_input401.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ]
  %421 = add nuw nsw i32 %output.s0.b.rebased.us, 1
  %.not457.us = icmp eq i32 %421, %21
  br i1 %.not457.us, label %after_bb3, label %"for output.s0.b.rebased.us"

"for output.s0.y.rebased.us.us":                  ; preds = %"for output.s0.b.rebased.us", %"end for output.s0.x.xo.loopexit.us.us"
  %sum_input401.sroa.0.1.us.us = phi <6 x i32> [ %sum_input401.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ], [ %sum_input401.sroa.0.0.us, %"for output.s0.b.rebased.us" ]
  %output.s0.y.rebased.us.us = phi i32 [ %1898, %"end for output.s0.x.xo.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased.us" ]
  %422 = add nsw i32 %output.s0.y.rebased.us.us, %28
  %423 = mul nsw i32 %422, %30
  %t877.us.us = add i32 %417, %423
  %424 = mul nsw i32 %422, %stride_y
  br label %"for output.s0.x.xo.us.us"

"for output.s0.x.xo.us.us":                       ; preds = %"end for output.s0.c.co.us.us", %"for output.s0.y.rebased.us.us"
  %sum_input401.sroa.0.3.us.us = phi <6 x i32> [ %sum_input401.sroa.0.13.us.us, %"end for output.s0.c.co.us.us" ], [ %sum_input401.sroa.0.1.us.us, %"for output.s0.y.rebased.us.us" ]
  %output.s0.x.xo.us.us = phi i32 [ %1833, %"end for output.s0.c.co.us.us" ], [ 0, %"for output.s0.y.rebased.us.us" ]
  %a12.us.us = mul nsw i32 %output.s0.x.xo.us.us, 6
  %425 = icmp slt i32 %a12.us.us, %b14
  %output.s0.x.x.base.s.us.us = select i1 %425, i32 %a12.us.us, i32 %b14
  br i1 %t843.not, label %"consume sum_input.us.us", label %then_bb7.us.us

then_bb7.us.us:                                   ; preds = %"for output.s0.x.xo.us.us"
  br i1 %t844, label %then_bb10.us.us, label %next_bb11.us.us

next_bb11.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %390, label %"for sum_input.s1.r19$y12.preheader.us.us", label %"consume sum_input.us.us", !prof !96

then_bb10.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %390, label %"for sum_input.s1.r19$y.preheader.us.us", label %"consume sum_input.us.us", !prof !96

"for sum_input.s1.r19$y.us.us":                   ; preds = %"for sum_input.s1.r19$y.preheader.us.us", %"end for sum_input.s1.r19$x.us.us"
  %sum_input401.sroa.0.5.us.us = phi <6 x i32> [ %sum_input401.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y.preheader.us.us" ]
  %"sum_input.s1.r19$y.us.us" = phi i32 [ %536, %"end for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$y.preheader.us.us" ]
  br i1 %391, label %"for sum_input.s1.r19$x.preheader.us.us", label %"end for sum_input.s1.r19$x.us.us", !prof !96

"for sum_input.s1.r19$x.us.us":                   ; preds = %"for sum_input.s1.r19$x.preheader.us.us", %"for sum_input.s1.r19$x.us.us"
  %sum_input401.sroa.0.6.us.us = phi <6 x i32> [ %512, %"for sum_input.s1.r19$x.us.us" ], [ %sum_input401.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %"sum_input.s1.r19$x.us.us" = phi i32 [ %513, %"for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %niter1562 = phi i32 [ %niter1562.nsub.3, %"for sum_input.s1.r19$x.us.us" ], [ %unroll_iter1561, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %426 = mul nsw i32 %"sum_input.s1.r19$x.us.us", %dilation_x
  %reass.add831.us.us = add i32 %1895, %426
  %reass.mul832.us.us = shl i32 %reass.add831.us.us, 2
  %427 = add i32 %t880.us.us, %reass.mul832.us.us
  %428 = getelementptr inbounds i8, i8* %13, i32 %427
  %429 = bitcast i8* %428 to <24 x i8>*
  %430 = load <24 x i8>, <24 x i8>* %429, align 4, !tbaa !109
  %t1222.us.us = zext <24 x i8> %430 to <24 x i16>
  %431 = shufflevector <24 x i16> %t1222.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %432 = bitcast <64 x i16> %431 to <32 x i32>
  %433 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %432)
  %434 = bitcast <32 x i32> %433 to <64 x i16>
  %435 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %432)
  %436 = bitcast <32 x i32> %435 to <64 x i16>
  %437 = add <64 x i16> %436, %434
  %438 = shufflevector <64 x i16> %437, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1221.us.us = zext <12 x i16> %438 to <12 x i32>
  %439 = shufflevector <12 x i32> %t1221.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %440 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %439, i32 -4)
  %441 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %440)
  %442 = shufflevector <32 x i32> %441, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %443 = add nsw <6 x i32> %442, %sum_input401.sroa.0.6.us.us
  %444 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %440)
  %445 = shufflevector <32 x i32> %444, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %446 = add nsw <6 x i32> %443, %445
  %447 = or i32 %"sum_input.s1.r19$x.us.us", 1
  %448 = mul nsw i32 %447, %dilation_x
  %reass.add831.us.us.1 = add i32 %1895, %448
  %reass.mul832.us.us.1 = shl i32 %reass.add831.us.us.1, 2
  %449 = add i32 %t880.us.us, %reass.mul832.us.us.1
  %450 = getelementptr inbounds i8, i8* %13, i32 %449
  %451 = bitcast i8* %450 to <24 x i8>*
  %452 = load <24 x i8>, <24 x i8>* %451, align 4, !tbaa !109
  %t1222.us.us.1 = zext <24 x i8> %452 to <24 x i16>
  %453 = shufflevector <24 x i16> %t1222.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %454 = bitcast <64 x i16> %453 to <32 x i32>
  %455 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %454)
  %456 = bitcast <32 x i32> %455 to <64 x i16>
  %457 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %454)
  %458 = bitcast <32 x i32> %457 to <64 x i16>
  %459 = add <64 x i16> %458, %456
  %460 = shufflevector <64 x i16> %459, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1221.us.us.1 = zext <12 x i16> %460 to <12 x i32>
  %461 = shufflevector <12 x i32> %t1221.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %462 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %461, i32 -4)
  %463 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %462)
  %464 = shufflevector <32 x i32> %463, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %465 = add nsw <6 x i32> %464, %446
  %466 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %462)
  %467 = shufflevector <32 x i32> %466, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %468 = add nsw <6 x i32> %465, %467
  %469 = or i32 %"sum_input.s1.r19$x.us.us", 2
  %470 = mul nsw i32 %469, %dilation_x
  %reass.add831.us.us.2 = add i32 %1895, %470
  %reass.mul832.us.us.2 = shl i32 %reass.add831.us.us.2, 2
  %471 = add i32 %t880.us.us, %reass.mul832.us.us.2
  %472 = getelementptr inbounds i8, i8* %13, i32 %471
  %473 = bitcast i8* %472 to <24 x i8>*
  %474 = load <24 x i8>, <24 x i8>* %473, align 4, !tbaa !109
  %t1222.us.us.2 = zext <24 x i8> %474 to <24 x i16>
  %475 = shufflevector <24 x i16> %t1222.us.us.2, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %476 = bitcast <64 x i16> %475 to <32 x i32>
  %477 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %476)
  %478 = bitcast <32 x i32> %477 to <64 x i16>
  %479 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %476)
  %480 = bitcast <32 x i32> %479 to <64 x i16>
  %481 = add <64 x i16> %480, %478
  %482 = shufflevector <64 x i16> %481, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1221.us.us.2 = zext <12 x i16> %482 to <12 x i32>
  %483 = shufflevector <12 x i32> %t1221.us.us.2, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %484 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %483, i32 -4)
  %485 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %484)
  %486 = shufflevector <32 x i32> %485, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %487 = add nsw <6 x i32> %486, %468
  %488 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %484)
  %489 = shufflevector <32 x i32> %488, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %490 = add nsw <6 x i32> %487, %489
  %491 = or i32 %"sum_input.s1.r19$x.us.us", 3
  %492 = mul nsw i32 %491, %dilation_x
  %reass.add831.us.us.3 = add i32 %1895, %492
  %reass.mul832.us.us.3 = shl i32 %reass.add831.us.us.3, 2
  %493 = add i32 %t880.us.us, %reass.mul832.us.us.3
  %494 = getelementptr inbounds i8, i8* %13, i32 %493
  %495 = bitcast i8* %494 to <24 x i8>*
  %496 = load <24 x i8>, <24 x i8>* %495, align 4, !tbaa !109
  %t1222.us.us.3 = zext <24 x i8> %496 to <24 x i16>
  %497 = shufflevector <24 x i16> %t1222.us.us.3, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %498 = bitcast <64 x i16> %497 to <32 x i32>
  %499 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %498)
  %500 = bitcast <32 x i32> %499 to <64 x i16>
  %501 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %498)
  %502 = bitcast <32 x i32> %501 to <64 x i16>
  %503 = add <64 x i16> %502, %500
  %504 = shufflevector <64 x i16> %503, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1221.us.us.3 = zext <12 x i16> %504 to <12 x i32>
  %505 = shufflevector <12 x i32> %t1221.us.us.3, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %506 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %505, i32 -4)
  %507 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %506)
  %508 = shufflevector <32 x i32> %507, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %509 = add nsw <6 x i32> %508, %490
  %510 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %506)
  %511 = shufflevector <32 x i32> %510, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %512 = add nsw <6 x i32> %509, %511
  %513 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us", 4
  %niter1562.nsub.3 = add i32 %niter1562, -4
  %niter1562.ncmp.3 = icmp eq i32 %niter1562.nsub.3, 0
  br i1 %niter1562.ncmp.3, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x.us.us", %"for sum_input.s1.r19$x.preheader.us.us"
  %.lcssa1421.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %512, %"for sum_input.s1.r19$x.us.us" ]
  %sum_input401.sroa.0.6.us.us.unr = phi <6 x i32> [ %sum_input401.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %512, %"for sum_input.s1.r19$x.us.us" ]
  %"sum_input.s1.r19$x.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %513, %"for sum_input.s1.r19$x.us.us" ]
  br i1 %lcmp.mod1559.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil"

"for sum_input.s1.r19$x.us.us.epil":              ; preds = %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x.us.us.epil"
  %sum_input401.sroa.0.6.us.us.epil = phi <6 x i32> [ %534, %"for sum_input.s1.r19$x.us.us.epil" ], [ %sum_input401.sroa.0.6.us.us.unr, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x.us.us.epil" = phi i32 [ %535, %"for sum_input.s1.r19$x.us.us.epil" ], [ %"sum_input.s1.r19$x.us.us.unr", %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %epil.iter1558 = phi i32 [ %epil.iter1558.sub, %"for sum_input.s1.r19$x.us.us.epil" ], [ %xtraiter1557, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %514 = mul nsw i32 %"sum_input.s1.r19$x.us.us.epil", %dilation_x
  %reass.add831.us.us.epil = add i32 %1895, %514
  %reass.mul832.us.us.epil = shl i32 %reass.add831.us.us.epil, 2
  %515 = add i32 %t880.us.us, %reass.mul832.us.us.epil
  %516 = getelementptr inbounds i8, i8* %13, i32 %515
  %517 = bitcast i8* %516 to <24 x i8>*
  %518 = load <24 x i8>, <24 x i8>* %517, align 4, !tbaa !109
  %t1222.us.us.epil = zext <24 x i8> %518 to <24 x i16>
  %519 = shufflevector <24 x i16> %t1222.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %520 = bitcast <64 x i16> %519 to <32 x i32>
  %521 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %520)
  %522 = bitcast <32 x i32> %521 to <64 x i16>
  %523 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %520)
  %524 = bitcast <32 x i32> %523 to <64 x i16>
  %525 = add <64 x i16> %524, %522
  %526 = shufflevector <64 x i16> %525, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1221.us.us.epil = zext <12 x i16> %526 to <12 x i32>
  %527 = shufflevector <12 x i32> %t1221.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %528 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %527, i32 -4)
  %529 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %528)
  %530 = shufflevector <32 x i32> %529, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %531 = add nsw <6 x i32> %530, %sum_input401.sroa.0.6.us.us.epil
  %532 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %528)
  %533 = shufflevector <32 x i32> %532, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %534 = add nsw <6 x i32> %531, %533
  %535 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us.epil", 1
  %epil.iter1558.sub = add i32 %epil.iter1558, -1
  %epil.iter1558.cmp.not = icmp eq i32 %epil.iter1558.sub, 0
  br i1 %epil.iter1558.cmp.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil", !llvm.loop !111

"end for sum_input.s1.r19$x.us.us":               ; preds = %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x.us.us.epil", %"for sum_input.s1.r19$y.us.us"
  %sum_input401.sroa.0.7.us.us = phi <6 x i32> [ %sum_input401.sroa.0.5.us.us, %"for sum_input.s1.r19$y.us.us" ], [ %.lcssa1421.ph, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ], [ %534, %"for sum_input.s1.r19$x.us.us.epil" ]
  %536 = add nuw nsw i32 %"sum_input.s1.r19$y.us.us", 1
  %.not467.us.us = icmp eq i32 %536, %11
  br i1 %.not467.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y.us.us"

"consume sum_input.us.us":                        ; preds = %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x.us.us", %"for sum_input.s1.r19$y12.preheader.us.us", %then_bb10.us.us, %next_bb11.us.us, %"for output.s0.x.xo.us.us"
  %sum_input401.sroa.0.13.us.us = phi <6 x i32> [ %sum_input401.sroa.0.3.us.us, %"for output.s0.x.xo.us.us" ], [ zeroinitializer, %then_bb10.us.us ], [ zeroinitializer, %next_bb11.us.us ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ], [ %sum_input401.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ]
  br i1 %394, label %"for output.s0.c.co.preheader.us.us", label %"end for output.s0.c.co.us.us", !prof !96

"for output.s0.c.co.us.us":                       ; preds = %"for output.s0.c.co.preheader.us.us", %"consume convolved.us.us"
  %output.s0.c.co.us.us = phi i32 [ %1832, %"consume convolved.us.us" ], [ 0, %"for output.s0.c.co.preheader.us.us" ]
  %537 = shl nsw i32 %output.s0.c.co.us.us, 7
  %538 = getelementptr inbounds i32, i32* %offset_c, i32 %537
  %539 = bitcast i32* %538 to <32 x i32>*
  %540 = load <32 x i32>, <32 x i32>* %539, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb19.us.us, label %next_bb20.us.us

next_bb20.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %541 = sub nsw <32 x i32> %540, %1856
  %542 = sub nsw <32 x i32> %540, %1859
  %543 = sub nsw <32 x i32> %540, %1862
  %544 = sub nsw <32 x i32> %540, %1865
  %545 = sub nsw <32 x i32> %540, %1868
  %546 = sub nsw <32 x i32> %540, %1871
  %547 = getelementptr inbounds i32, i32* %538, i32 32
  %548 = bitcast i32* %547 to <32 x i32>*
  %549 = load <32 x i32>, <32 x i32>* %548, align 128, !tbaa !104
  %550 = sub nsw <32 x i32> %549, %1856
  %551 = sub nsw <32 x i32> %549, %1859
  %552 = sub nsw <32 x i32> %549, %1862
  %553 = sub nsw <32 x i32> %549, %1865
  %554 = sub nsw <32 x i32> %549, %1868
  %555 = sub nsw <32 x i32> %549, %1871
  %556 = getelementptr inbounds i32, i32* %538, i32 64
  %557 = bitcast i32* %556 to <32 x i32>*
  %558 = load <32 x i32>, <32 x i32>* %557, align 128, !tbaa !104
  %559 = sub nsw <32 x i32> %558, %1856
  %560 = sub nsw <32 x i32> %558, %1859
  %561 = sub nsw <32 x i32> %558, %1862
  %562 = sub nsw <32 x i32> %558, %1865
  %563 = sub nsw <32 x i32> %558, %1868
  %564 = sub nsw <32 x i32> %558, %1871
  %565 = getelementptr inbounds i32, i32* %538, i32 96
  %566 = bitcast i32* %565 to <32 x i32>*
  %567 = load <32 x i32>, <32 x i32>* %566, align 128, !tbaa !104
  %568 = sub nsw <32 x i32> %567, %1856
  %569 = sub nsw <32 x i32> %567, %1859
  %570 = sub nsw <32 x i32> %567, %1862
  %571 = sub nsw <32 x i32> %567, %1865
  %572 = sub nsw <32 x i32> %567, %1868
  %573 = sub nsw <32 x i32> %567, %1871
  br label %after_bb18.us.us

then_bb19.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %574 = getelementptr inbounds i32, i32* %538, i32 32
  %575 = bitcast i32* %574 to <32 x i32>*
  %576 = load <32 x i32>, <32 x i32>* %575, align 128, !tbaa !104
  %577 = getelementptr inbounds i32, i32* %538, i32 64
  %578 = bitcast i32* %577 to <32 x i32>*
  %579 = load <32 x i32>, <32 x i32>* %578, align 128, !tbaa !104
  %580 = getelementptr inbounds i32, i32* %538, i32 96
  %581 = bitcast i32* %580 to <32 x i32>*
  %582 = load <32 x i32>, <32 x i32>* %581, align 128, !tbaa !104
  br label %after_bb18.us.us

after_bb18.us.us:                                 ; preds = %then_bb19.us.us, %next_bb20.us.us
  %convolved400.sroa.208.0.us.us = phi <32 x i32> [ %582, %then_bb19.us.us ], [ %573, %next_bb20.us.us ]
  %convolved400.sroa.203.0.us.us = phi <32 x i32> [ %579, %then_bb19.us.us ], [ %564, %next_bb20.us.us ]
  %convolved400.sroa.198.0.us.us = phi <32 x i32> [ %576, %then_bb19.us.us ], [ %555, %next_bb20.us.us ]
  %convolved400.sroa.193.0.us.us = phi <32 x i32> [ %540, %then_bb19.us.us ], [ %546, %next_bb20.us.us ]
  %convolved400.sroa.188.0.us.us = phi <32 x i32> [ %582, %then_bb19.us.us ], [ %572, %next_bb20.us.us ]
  %convolved400.sroa.183.0.us.us = phi <32 x i32> [ %579, %then_bb19.us.us ], [ %563, %next_bb20.us.us ]
  %convolved400.sroa.178.0.us.us = phi <32 x i32> [ %576, %then_bb19.us.us ], [ %554, %next_bb20.us.us ]
  %convolved400.sroa.173.0.us.us = phi <32 x i32> [ %540, %then_bb19.us.us ], [ %545, %next_bb20.us.us ]
  %convolved400.sroa.168.0.us.us = phi <32 x i32> [ %582, %then_bb19.us.us ], [ %571, %next_bb20.us.us ]
  %convolved400.sroa.163.0.us.us = phi <32 x i32> [ %579, %then_bb19.us.us ], [ %562, %next_bb20.us.us ]
  %convolved400.sroa.158.0.us.us = phi <32 x i32> [ %576, %then_bb19.us.us ], [ %553, %next_bb20.us.us ]
  %convolved400.sroa.153.0.us.us = phi <32 x i32> [ %540, %then_bb19.us.us ], [ %544, %next_bb20.us.us ]
  %convolved400.sroa.148.0.us.us = phi <32 x i32> [ %582, %then_bb19.us.us ], [ %570, %next_bb20.us.us ]
  %convolved400.sroa.143.0.us.us = phi <32 x i32> [ %579, %then_bb19.us.us ], [ %561, %next_bb20.us.us ]
  %convolved400.sroa.138.0.us.us = phi <32 x i32> [ %576, %then_bb19.us.us ], [ %552, %next_bb20.us.us ]
  %convolved400.sroa.133.0.us.us = phi <32 x i32> [ %540, %then_bb19.us.us ], [ %543, %next_bb20.us.us ]
  %convolved400.sroa.123.0.us.us = phi <32 x i32> [ %582, %then_bb19.us.us ], [ %569, %next_bb20.us.us ]
  %convolved400.sroa.113.0.us.us = phi <32 x i32> [ %579, %then_bb19.us.us ], [ %560, %next_bb20.us.us ]
  %convolved400.sroa.103.0.us.us = phi <32 x i32> [ %576, %then_bb19.us.us ], [ %551, %next_bb20.us.us ]
  %convolved400.sroa.93.0.us.us = phi <32 x i32> [ %540, %then_bb19.us.us ], [ %542, %next_bb20.us.us ]
  %convolved400.sroa.78.0.us.us = phi <32 x i32> [ %582, %then_bb19.us.us ], [ %568, %next_bb20.us.us ]
  %convolved400.sroa.63.0.us.us = phi <32 x i32> [ %579, %then_bb19.us.us ], [ %559, %next_bb20.us.us ]
  %convolved400.sroa.48.0.us.us = phi <32 x i32> [ %576, %then_bb19.us.us ], [ %550, %next_bb20.us.us ]
  %convolved400.sroa.0.0.us.us = phi <32 x i32> [ %540, %then_bb19.us.us ], [ %541, %next_bb20.us.us ]
  br i1 %390, label %"for convolved.s1.r19$y.preheader.us.us", label %"consume convolved.us.us", !prof !96

"for convolved.s1.r19$y.us.us":                   ; preds = %"for convolved.s1.r19$y.preheader.us.us", %"end for convolved.s1.r19$x.us.us"
  %convolved400.sroa.208.1.us.us = phi <32 x i32> [ %convolved400.sroa.208.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.208.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.203.1.us.us = phi <32 x i32> [ %convolved400.sroa.203.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.203.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.198.1.us.us = phi <32 x i32> [ %convolved400.sroa.198.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.198.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.193.1.us.us = phi <32 x i32> [ %convolved400.sroa.193.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.193.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.188.1.us.us = phi <32 x i32> [ %convolved400.sroa.188.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.188.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.183.1.us.us = phi <32 x i32> [ %convolved400.sroa.183.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.183.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.178.1.us.us = phi <32 x i32> [ %convolved400.sroa.178.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.178.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.173.1.us.us = phi <32 x i32> [ %convolved400.sroa.173.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.173.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.168.1.us.us = phi <32 x i32> [ %convolved400.sroa.168.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.168.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.163.1.us.us = phi <32 x i32> [ %convolved400.sroa.163.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.163.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.158.1.us.us = phi <32 x i32> [ %convolved400.sroa.158.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.158.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.153.1.us.us = phi <32 x i32> [ %convolved400.sroa.153.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.153.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.148.1.us.us = phi <32 x i32> [ %convolved400.sroa.148.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.148.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.143.1.us.us = phi <32 x i32> [ %convolved400.sroa.143.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.143.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.138.1.us.us = phi <32 x i32> [ %convolved400.sroa.138.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.138.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.133.1.us.us = phi <32 x i32> [ %convolved400.sroa.133.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.133.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.123.1.us.us = phi <32 x i32> [ %convolved400.sroa.123.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.123.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.113.1.us.us = phi <32 x i32> [ %convolved400.sroa.113.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.113.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.103.1.us.us = phi <32 x i32> [ %convolved400.sroa.103.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.103.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.93.1.us.us = phi <32 x i32> [ %convolved400.sroa.93.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.93.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.78.1.us.us = phi <32 x i32> [ %convolved400.sroa.78.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.78.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.63.1.us.us = phi <32 x i32> [ %convolved400.sroa.63.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.63.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.48.1.us.us = phi <32 x i32> [ %convolved400.sroa.48.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.48.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved400.sroa.0.1.us.us = phi <32 x i32> [ %convolved400.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved400.sroa.0.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %"convolved.s1.r19$y.us.us" = phi i32 [ %1445, %"end for convolved.s1.r19$x.us.us" ], [ 0, %"for convolved.s1.r19$y.preheader.us.us" ]
  %583 = mul nsw i32 %"convolved.s1.r19$y.us.us", %dilation_y
  %584 = add nsw i32 %583, %424
  %585 = mul nsw i32 %584, %19
  %t913.us.us = add nsw i32 %585, %420
  %586 = mul nsw i32 %"convolved.s1.r19$y.us.us", %12
  br i1 %391, label %"for convolved.s1.r19$x.us.us", label %"end for convolved.s1.r19$x.us.us", !prof !96

"for convolved.s1.r19$x.us.us":                   ; preds = %"for convolved.s1.r19$y.us.us", %"end for convolved.s1.r19$z.r124.us.us"
  %convolved400.sroa.208.2.us.us = phi <32 x i32> [ %convolved400.sroa.208.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.208.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.203.2.us.us = phi <32 x i32> [ %convolved400.sroa.203.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.203.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.198.2.us.us = phi <32 x i32> [ %convolved400.sroa.198.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.198.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.193.2.us.us = phi <32 x i32> [ %convolved400.sroa.193.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.193.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.188.2.us.us = phi <32 x i32> [ %convolved400.sroa.188.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.188.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.183.2.us.us = phi <32 x i32> [ %convolved400.sroa.183.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.183.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.178.2.us.us = phi <32 x i32> [ %convolved400.sroa.178.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.178.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.173.2.us.us = phi <32 x i32> [ %convolved400.sroa.173.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.173.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.168.2.us.us = phi <32 x i32> [ %convolved400.sroa.168.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.168.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.163.2.us.us = phi <32 x i32> [ %convolved400.sroa.163.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.163.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.158.2.us.us = phi <32 x i32> [ %convolved400.sroa.158.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.158.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.153.2.us.us = phi <32 x i32> [ %convolved400.sroa.153.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.153.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.148.2.us.us = phi <32 x i32> [ %convolved400.sroa.148.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.148.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.143.2.us.us = phi <32 x i32> [ %convolved400.sroa.143.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.143.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.138.2.us.us = phi <32 x i32> [ %convolved400.sroa.138.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.138.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.133.2.us.us = phi <32 x i32> [ %convolved400.sroa.133.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.133.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.123.2.us.us = phi <32 x i32> [ %convolved400.sroa.123.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.123.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.113.2.us.us = phi <32 x i32> [ %convolved400.sroa.113.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.113.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.103.2.us.us = phi <32 x i32> [ %convolved400.sroa.103.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.103.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.93.2.us.us = phi <32 x i32> [ %convolved400.sroa.93.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.93.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.78.2.us.us = phi <32 x i32> [ %convolved400.sroa.78.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.78.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.63.2.us.us = phi <32 x i32> [ %convolved400.sroa.63.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.63.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.48.2.us.us = phi <32 x i32> [ %convolved400.sroa.48.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.48.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved400.sroa.0.2.us.us = phi <32 x i32> [ %convolved400.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %"convolved.s1.r19$x.us.us" = phi i32 [ %1444, %"end for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$y.us.us" ]
  %587 = mul nsw i32 %"convolved.s1.r19$x.us.us", %dilation_x
  %588 = mul nsw i32 %"convolved.s1.r19$x.us.us", %10
  %t920.us.us = add i32 %588, %586
  br i1 %392, label %"for convolved.s1.r19$z.r124.preheader.us.us", label %"end for convolved.s1.r19$z.r124.us.us", !prof !96

"for convolved.s1.r19$z.r124.us.us":              ; preds = %"for convolved.s1.r19$z.r124.preheader.us.us", %"for convolved.s1.r19$z.r124.us.us"
  %convolved400.sroa.208.4.us.us = phi <32 x i32> [ %1442, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.208.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.203.4.us.us = phi <32 x i32> [ %1413, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.203.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.198.4.us.us = phi <32 x i32> [ %1384, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.198.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.193.4.us.us = phi <32 x i32> [ %1355, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.193.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.188.4.us.us = phi <32 x i32> [ %1306, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.188.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.183.4.us.us = phi <32 x i32> [ %1277, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.183.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.178.4.us.us = phi <32 x i32> [ %1248, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.178.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.173.4.us.us = phi <32 x i32> [ %1219, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.173.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.168.4.us.us = phi <32 x i32> [ %1170, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.168.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.163.4.us.us = phi <32 x i32> [ %1141, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.163.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.158.4.us.us = phi <32 x i32> [ %1112, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.158.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.153.4.us.us = phi <32 x i32> [ %1083, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.153.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.148.4.us.us = phi <32 x i32> [ %1034, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.148.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.143.4.us.us = phi <32 x i32> [ %1005, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.143.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.138.4.us.us = phi <32 x i32> [ %976, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.138.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.133.4.us.us = phi <32 x i32> [ %947, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.133.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.123.4.us.us = phi <32 x i32> [ %898, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.123.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.113.4.us.us = phi <32 x i32> [ %869, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.113.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.103.4.us.us = phi <32 x i32> [ %840, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.103.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.93.4.us.us = phi <32 x i32> [ %811, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.93.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.78.4.us.us = phi <32 x i32> [ %762, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.78.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.63.4.us.us = phi <32 x i32> [ %725, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.63.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.48.4.us.us = phi <32 x i32> [ %688, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.48.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved400.sroa.0.4.us.us = phi <32 x i32> [ %650, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved400.sroa.0.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %"convolved.s1.r19$z.r124.us.us" = phi i32 [ %1443, %"for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %589 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 2
  %590 = add i32 %589, %t913.us.us
  %591 = add i32 %590, %1834
  %592 = getelementptr inbounds i8, i8* %13, i32 %591
  %593 = bitcast i8* %592 to <1 x i32>*
  %594 = load <1 x i32>, <1 x i32>* %593, align 4, !tbaa !109
  %595 = shufflevector <1 x i32> %594, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %596 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %595, <32 x i32> %595, i32 -4)
  %597 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %596)
  %598 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %597, <32 x i32> %597, i32 -4)
  %599 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %598)
  %600 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %599, <32 x i32> %599, i32 -4)
  %601 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %600)
  %602 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %601, <32 x i32> %601, i32 -4)
  %603 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %602)
  %604 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %603, <32 x i32> %603, i32 -4)
  %605 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %604)
  %606 = bitcast <32 x i32> %605 to <128 x i8>
  %607 = zext <128 x i8> %606 to <128 x i16>
  %608 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 5
  %609 = add nsw i32 %608, %1850
  %610 = shl nsw i32 %609, 2
  %611 = add nsw i32 %t920.us.us, %610
  %612 = getelementptr inbounds i8, i8* %5, i32 %611
  %613 = bitcast i8* %612 to <128 x i8>*
  %614 = load <128 x i8>, <128 x i8>* %613, align 128, !tbaa !106
  %615 = zext <128 x i8> %614 to <128 x i16>
  %616 = bitcast <128 x i16> %607 to <64 x i32>
  %617 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %616)
  %618 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %616)
  %619 = bitcast <128 x i16> %615 to <64 x i32>
  %620 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %619)
  %621 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %619)
  %622 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %618, <32 x i32> %621) #11
  %623 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %617, <32 x i32> %620) #11
  %624 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %622) #11
  %625 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %622) #11
  %626 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %625, <32 x i32> %624) #11
  %627 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %623) #11
  %628 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %623) #11
  %629 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %628, <32 x i32> %627) #11
  %630 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %629, <32 x i32> %626)
  %631 = bitcast <64 x i32> %630 to <128 x i16>
  %t1227.us.us = zext <128 x i16> %631 to <128 x i32>
  %632 = shufflevector <128 x i32> %t1227.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %633 = shufflevector <128 x i32> %t1227.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %634 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %633, <32 x i32> %632, i32 -4)
  %635 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %634)
  %636 = shufflevector <128 x i32> %t1227.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %637 = shufflevector <128 x i32> %t1227.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %638 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %637, <32 x i32> %636, i32 -4)
  %639 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %638)
  %640 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %639, <32 x i32> %635)
  %641 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %634)
  %642 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %638)
  %643 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %642, <32 x i32> %641)
  %t1226.us.us = add nsw <64 x i32> %643, %640
  %644 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1226.us.us)
  %645 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1226.us.us)
  %646 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %645, <32 x i32> %644, i32 -4)
  %647 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %646)
  %648 = add nsw <32 x i32> %647, %convolved400.sroa.0.4.us.us
  %649 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %646)
  %650 = add nsw <32 x i32> %648, %649
  %651 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 7
  %652 = add i32 %1835, %651
  %653 = getelementptr inbounds i8, i8* %5, i32 %652
  %654 = bitcast i8* %653 to <128 x i8>*
  %655 = load <128 x i8>, <128 x i8>* %654, align 128, !tbaa !106
  %656 = zext <128 x i8> %655 to <128 x i16>
  %657 = bitcast <128 x i16> %656 to <64 x i32>
  %658 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %657)
  %659 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %657)
  %660 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %618, <32 x i32> %659) #11
  %661 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %617, <32 x i32> %658) #11
  %662 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %660) #11
  %663 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %660) #11
  %664 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %663, <32 x i32> %662) #11
  %665 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %661) #11
  %666 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %661) #11
  %667 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %666, <32 x i32> %665) #11
  %668 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %667, <32 x i32> %664)
  %669 = bitcast <64 x i32> %668 to <128 x i16>
  %t1229.us.us = zext <128 x i16> %669 to <128 x i32>
  %670 = shufflevector <128 x i32> %t1229.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %671 = shufflevector <128 x i32> %t1229.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %672 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %671, <32 x i32> %670, i32 -4)
  %673 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %672)
  %674 = shufflevector <128 x i32> %t1229.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %675 = shufflevector <128 x i32> %t1229.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %676 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %675, <32 x i32> %674, i32 -4)
  %677 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %676)
  %678 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %677, <32 x i32> %673)
  %679 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %672)
  %680 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %676)
  %681 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %680, <32 x i32> %679)
  %t1228.us.us = add nsw <64 x i32> %681, %678
  %682 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1228.us.us)
  %683 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1228.us.us)
  %684 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %683, <32 x i32> %682, i32 -4)
  %685 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %684)
  %686 = add nsw <32 x i32> %685, %convolved400.sroa.48.4.us.us
  %687 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %684)
  %688 = add nsw <32 x i32> %686, %687
  %689 = add i32 %1836, %651
  %690 = getelementptr inbounds i8, i8* %5, i32 %689
  %691 = bitcast i8* %690 to <128 x i8>*
  %692 = load <128 x i8>, <128 x i8>* %691, align 128, !tbaa !106
  %693 = zext <128 x i8> %692 to <128 x i16>
  %694 = bitcast <128 x i16> %693 to <64 x i32>
  %695 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %694)
  %696 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %694)
  %697 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %618, <32 x i32> %696) #11
  %698 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %617, <32 x i32> %695) #11
  %699 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %697) #11
  %700 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %697) #11
  %701 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %700, <32 x i32> %699) #11
  %702 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %698) #11
  %703 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %698) #11
  %704 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %703, <32 x i32> %702) #11
  %705 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %704, <32 x i32> %701)
  %706 = bitcast <64 x i32> %705 to <128 x i16>
  %t1231.us.us = zext <128 x i16> %706 to <128 x i32>
  %707 = shufflevector <128 x i32> %t1231.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %708 = shufflevector <128 x i32> %t1231.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %709 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %708, <32 x i32> %707, i32 -4)
  %710 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %709)
  %711 = shufflevector <128 x i32> %t1231.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %712 = shufflevector <128 x i32> %t1231.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %713 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %712, <32 x i32> %711, i32 -4)
  %714 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %713)
  %715 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %714, <32 x i32> %710)
  %716 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %709)
  %717 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %713)
  %718 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %717, <32 x i32> %716)
  %t1230.us.us = add nsw <64 x i32> %718, %715
  %719 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1230.us.us)
  %720 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1230.us.us)
  %721 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %720, <32 x i32> %719, i32 -4)
  %722 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %721)
  %723 = add nsw <32 x i32> %722, %convolved400.sroa.63.4.us.us
  %724 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %721)
  %725 = add nsw <32 x i32> %723, %724
  %726 = add i32 %1837, %651
  %727 = getelementptr inbounds i8, i8* %5, i32 %726
  %728 = bitcast i8* %727 to <128 x i8>*
  %729 = load <128 x i8>, <128 x i8>* %728, align 128, !tbaa !106
  %730 = zext <128 x i8> %729 to <128 x i16>
  %731 = bitcast <128 x i16> %730 to <64 x i32>
  %732 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %731)
  %733 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %731)
  %734 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %618, <32 x i32> %733) #11
  %735 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %617, <32 x i32> %732) #11
  %736 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %734) #11
  %737 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %734) #11
  %738 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %737, <32 x i32> %736) #11
  %739 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %735) #11
  %740 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %735) #11
  %741 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %740, <32 x i32> %739) #11
  %742 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %741, <32 x i32> %738)
  %743 = bitcast <64 x i32> %742 to <128 x i16>
  %t1233.us.us = zext <128 x i16> %743 to <128 x i32>
  %744 = shufflevector <128 x i32> %t1233.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %745 = shufflevector <128 x i32> %t1233.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %746 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %745, <32 x i32> %744, i32 -4)
  %747 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %746)
  %748 = shufflevector <128 x i32> %t1233.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %749 = shufflevector <128 x i32> %t1233.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %750 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %749, <32 x i32> %748, i32 -4)
  %751 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %750)
  %752 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %751, <32 x i32> %747)
  %753 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %746)
  %754 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %750)
  %755 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %754, <32 x i32> %753)
  %t1232.us.us = add nsw <64 x i32> %755, %752
  %756 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1232.us.us)
  %757 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1232.us.us)
  %758 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %757, <32 x i32> %756, i32 -4)
  %759 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %758)
  %760 = add nsw <32 x i32> %759, %convolved400.sroa.78.4.us.us
  %761 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %758)
  %762 = add nsw <32 x i32> %760, %761
  %763 = add i32 %590, %1838
  %764 = getelementptr inbounds i8, i8* %13, i32 %763
  %765 = bitcast i8* %764 to <1 x i32>*
  %766 = load <1 x i32>, <1 x i32>* %765, align 4, !tbaa !109
  %767 = shufflevector <1 x i32> %766, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %768 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %767, <32 x i32> %767, i32 -4)
  %769 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %768)
  %770 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %769, <32 x i32> %769, i32 -4)
  %771 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %770)
  %772 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %771, <32 x i32> %771, i32 -4)
  %773 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %772)
  %774 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %773, <32 x i32> %773, i32 -4)
  %775 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %774)
  %776 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %775, <32 x i32> %775, i32 -4)
  %777 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %776)
  %778 = bitcast <32 x i32> %777 to <128 x i8>
  %779 = zext <128 x i8> %778 to <128 x i16>
  %780 = bitcast <128 x i16> %779 to <64 x i32>
  %781 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %780)
  %782 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %780)
  %783 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %782, <32 x i32> %621) #11
  %784 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %781, <32 x i32> %620) #11
  %785 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %783) #11
  %786 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %783) #11
  %787 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %786, <32 x i32> %785) #11
  %788 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %784) #11
  %789 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %784) #11
  %790 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %789, <32 x i32> %788) #11
  %791 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %790, <32 x i32> %787)
  %792 = bitcast <64 x i32> %791 to <128 x i16>
  %t1235.us.us = zext <128 x i16> %792 to <128 x i32>
  %793 = shufflevector <128 x i32> %t1235.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %794 = shufflevector <128 x i32> %t1235.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %795 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %794, <32 x i32> %793, i32 -4)
  %796 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %795)
  %797 = shufflevector <128 x i32> %t1235.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %798 = shufflevector <128 x i32> %t1235.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %799 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %798, <32 x i32> %797, i32 -4)
  %800 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %799)
  %801 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %800, <32 x i32> %796)
  %802 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %795)
  %803 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %799)
  %804 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %803, <32 x i32> %802)
  %t1234.us.us = add nsw <64 x i32> %804, %801
  %805 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1234.us.us)
  %806 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1234.us.us)
  %807 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %806, <32 x i32> %805, i32 -4)
  %808 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %807)
  %809 = add nsw <32 x i32> %808, %convolved400.sroa.93.4.us.us
  %810 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %807)
  %811 = add nsw <32 x i32> %809, %810
  %812 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %782, <32 x i32> %659) #11
  %813 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %781, <32 x i32> %658) #11
  %814 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %812) #11
  %815 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %812) #11
  %816 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %815, <32 x i32> %814) #11
  %817 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %813) #11
  %818 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %813) #11
  %819 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %818, <32 x i32> %817) #11
  %820 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %819, <32 x i32> %816)
  %821 = bitcast <64 x i32> %820 to <128 x i16>
  %t1237.us.us = zext <128 x i16> %821 to <128 x i32>
  %822 = shufflevector <128 x i32> %t1237.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %823 = shufflevector <128 x i32> %t1237.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %824 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %823, <32 x i32> %822, i32 -4)
  %825 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %824)
  %826 = shufflevector <128 x i32> %t1237.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %827 = shufflevector <128 x i32> %t1237.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %828 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %827, <32 x i32> %826, i32 -4)
  %829 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %828)
  %830 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %829, <32 x i32> %825)
  %831 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %824)
  %832 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %828)
  %833 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %832, <32 x i32> %831)
  %t1236.us.us = add nsw <64 x i32> %833, %830
  %834 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1236.us.us)
  %835 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1236.us.us)
  %836 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %835, <32 x i32> %834, i32 -4)
  %837 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %836)
  %838 = add nsw <32 x i32> %837, %convolved400.sroa.103.4.us.us
  %839 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %836)
  %840 = add nsw <32 x i32> %838, %839
  %841 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %782, <32 x i32> %696) #11
  %842 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %781, <32 x i32> %695) #11
  %843 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %841) #11
  %844 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %841) #11
  %845 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %844, <32 x i32> %843) #11
  %846 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %842) #11
  %847 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %842) #11
  %848 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %847, <32 x i32> %846) #11
  %849 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %848, <32 x i32> %845)
  %850 = bitcast <64 x i32> %849 to <128 x i16>
  %t1239.us.us = zext <128 x i16> %850 to <128 x i32>
  %851 = shufflevector <128 x i32> %t1239.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %852 = shufflevector <128 x i32> %t1239.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %853 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %852, <32 x i32> %851, i32 -4)
  %854 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %853)
  %855 = shufflevector <128 x i32> %t1239.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %856 = shufflevector <128 x i32> %t1239.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %857 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %856, <32 x i32> %855, i32 -4)
  %858 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %857)
  %859 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %858, <32 x i32> %854)
  %860 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %853)
  %861 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %857)
  %862 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %861, <32 x i32> %860)
  %t1238.us.us = add nsw <64 x i32> %862, %859
  %863 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1238.us.us)
  %864 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1238.us.us)
  %865 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %864, <32 x i32> %863, i32 -4)
  %866 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %865)
  %867 = add nsw <32 x i32> %866, %convolved400.sroa.113.4.us.us
  %868 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %865)
  %869 = add nsw <32 x i32> %867, %868
  %870 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %782, <32 x i32> %733) #11
  %871 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %781, <32 x i32> %732) #11
  %872 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %870) #11
  %873 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %870) #11
  %874 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %873, <32 x i32> %872) #11
  %875 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %871) #11
  %876 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %871) #11
  %877 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %876, <32 x i32> %875) #11
  %878 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %877, <32 x i32> %874)
  %879 = bitcast <64 x i32> %878 to <128 x i16>
  %t1241.us.us = zext <128 x i16> %879 to <128 x i32>
  %880 = shufflevector <128 x i32> %t1241.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %881 = shufflevector <128 x i32> %t1241.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %882 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %881, <32 x i32> %880, i32 -4)
  %883 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %882)
  %884 = shufflevector <128 x i32> %t1241.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %885 = shufflevector <128 x i32> %t1241.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %886 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %885, <32 x i32> %884, i32 -4)
  %887 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %886)
  %888 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %887, <32 x i32> %883)
  %889 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %882)
  %890 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %886)
  %891 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %890, <32 x i32> %889)
  %t1240.us.us = add nsw <64 x i32> %891, %888
  %892 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1240.us.us)
  %893 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1240.us.us)
  %894 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %893, <32 x i32> %892, i32 -4)
  %895 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %894)
  %896 = add nsw <32 x i32> %895, %convolved400.sroa.123.4.us.us
  %897 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %894)
  %898 = add nsw <32 x i32> %896, %897
  %899 = add i32 %590, %1839
  %900 = getelementptr inbounds i8, i8* %13, i32 %899
  %901 = bitcast i8* %900 to <1 x i32>*
  %902 = load <1 x i32>, <1 x i32>* %901, align 4, !tbaa !109
  %903 = shufflevector <1 x i32> %902, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %904 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %903, <32 x i32> %903, i32 -4)
  %905 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %904)
  %906 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %905, <32 x i32> %905, i32 -4)
  %907 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %906)
  %908 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %907, <32 x i32> %907, i32 -4)
  %909 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %908)
  %910 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %909, <32 x i32> %909, i32 -4)
  %911 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %910)
  %912 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %911, <32 x i32> %911, i32 -4)
  %913 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %912)
  %914 = bitcast <32 x i32> %913 to <128 x i8>
  %915 = zext <128 x i8> %914 to <128 x i16>
  %916 = bitcast <128 x i16> %915 to <64 x i32>
  %917 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %916)
  %918 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %916)
  %919 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %918, <32 x i32> %621) #11
  %920 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %917, <32 x i32> %620) #11
  %921 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %919) #11
  %922 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %919) #11
  %923 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %922, <32 x i32> %921) #11
  %924 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %920) #11
  %925 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %920) #11
  %926 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %925, <32 x i32> %924) #11
  %927 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %926, <32 x i32> %923)
  %928 = bitcast <64 x i32> %927 to <128 x i16>
  %t1243.us.us = zext <128 x i16> %928 to <128 x i32>
  %929 = shufflevector <128 x i32> %t1243.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %930 = shufflevector <128 x i32> %t1243.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %931 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %930, <32 x i32> %929, i32 -4)
  %932 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %931)
  %933 = shufflevector <128 x i32> %t1243.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %934 = shufflevector <128 x i32> %t1243.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %935 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %934, <32 x i32> %933, i32 -4)
  %936 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %935)
  %937 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %936, <32 x i32> %932)
  %938 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %931)
  %939 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %935)
  %940 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %939, <32 x i32> %938)
  %t1242.us.us = add nsw <64 x i32> %940, %937
  %941 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1242.us.us)
  %942 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1242.us.us)
  %943 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %942, <32 x i32> %941, i32 -4)
  %944 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %943)
  %945 = add nsw <32 x i32> %944, %convolved400.sroa.133.4.us.us
  %946 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %943)
  %947 = add nsw <32 x i32> %945, %946
  %948 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %918, <32 x i32> %659) #11
  %949 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %917, <32 x i32> %658) #11
  %950 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %948) #11
  %951 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %948) #11
  %952 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %951, <32 x i32> %950) #11
  %953 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %949) #11
  %954 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %949) #11
  %955 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %954, <32 x i32> %953) #11
  %956 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %955, <32 x i32> %952)
  %957 = bitcast <64 x i32> %956 to <128 x i16>
  %t1245.us.us = zext <128 x i16> %957 to <128 x i32>
  %958 = shufflevector <128 x i32> %t1245.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %959 = shufflevector <128 x i32> %t1245.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %960 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %959, <32 x i32> %958, i32 -4)
  %961 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %960)
  %962 = shufflevector <128 x i32> %t1245.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %963 = shufflevector <128 x i32> %t1245.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %964 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %963, <32 x i32> %962, i32 -4)
  %965 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %964)
  %966 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %965, <32 x i32> %961)
  %967 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %960)
  %968 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %964)
  %969 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %968, <32 x i32> %967)
  %t1244.us.us = add nsw <64 x i32> %969, %966
  %970 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1244.us.us)
  %971 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1244.us.us)
  %972 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %971, <32 x i32> %970, i32 -4)
  %973 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %972)
  %974 = add nsw <32 x i32> %973, %convolved400.sroa.138.4.us.us
  %975 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %972)
  %976 = add nsw <32 x i32> %974, %975
  %977 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %918, <32 x i32> %696) #11
  %978 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %917, <32 x i32> %695) #11
  %979 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %977) #11
  %980 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %977) #11
  %981 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %980, <32 x i32> %979) #11
  %982 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %978) #11
  %983 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %978) #11
  %984 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %983, <32 x i32> %982) #11
  %985 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %984, <32 x i32> %981)
  %986 = bitcast <64 x i32> %985 to <128 x i16>
  %t1247.us.us = zext <128 x i16> %986 to <128 x i32>
  %987 = shufflevector <128 x i32> %t1247.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %988 = shufflevector <128 x i32> %t1247.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %989 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %988, <32 x i32> %987, i32 -4)
  %990 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %989)
  %991 = shufflevector <128 x i32> %t1247.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %992 = shufflevector <128 x i32> %t1247.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %993 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %992, <32 x i32> %991, i32 -4)
  %994 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %993)
  %995 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %994, <32 x i32> %990)
  %996 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %989)
  %997 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %993)
  %998 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %997, <32 x i32> %996)
  %t1246.us.us = add nsw <64 x i32> %998, %995
  %999 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1246.us.us)
  %1000 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1246.us.us)
  %1001 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1000, <32 x i32> %999, i32 -4)
  %1002 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1001)
  %1003 = add nsw <32 x i32> %1002, %convolved400.sroa.143.4.us.us
  %1004 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1001)
  %1005 = add nsw <32 x i32> %1003, %1004
  %1006 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %918, <32 x i32> %733) #11
  %1007 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %917, <32 x i32> %732) #11
  %1008 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1006) #11
  %1009 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1006) #11
  %1010 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1009, <32 x i32> %1008) #11
  %1011 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1007) #11
  %1012 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1007) #11
  %1013 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1012, <32 x i32> %1011) #11
  %1014 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1013, <32 x i32> %1010)
  %1015 = bitcast <64 x i32> %1014 to <128 x i16>
  %t1249.us.us = zext <128 x i16> %1015 to <128 x i32>
  %1016 = shufflevector <128 x i32> %t1249.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1017 = shufflevector <128 x i32> %t1249.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1018 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1017, <32 x i32> %1016, i32 -4)
  %1019 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1018)
  %1020 = shufflevector <128 x i32> %t1249.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1021 = shufflevector <128 x i32> %t1249.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1022 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1021, <32 x i32> %1020, i32 -4)
  %1023 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1022)
  %1024 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1023, <32 x i32> %1019)
  %1025 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1018)
  %1026 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1022)
  %1027 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1026, <32 x i32> %1025)
  %t1248.us.us = add nsw <64 x i32> %1027, %1024
  %1028 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1248.us.us)
  %1029 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1248.us.us)
  %1030 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1029, <32 x i32> %1028, i32 -4)
  %1031 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1030)
  %1032 = add nsw <32 x i32> %1031, %convolved400.sroa.148.4.us.us
  %1033 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1030)
  %1034 = add nsw <32 x i32> %1032, %1033
  %1035 = add i32 %590, %1840
  %1036 = getelementptr inbounds i8, i8* %13, i32 %1035
  %1037 = bitcast i8* %1036 to <1 x i32>*
  %1038 = load <1 x i32>, <1 x i32>* %1037, align 4, !tbaa !109
  %1039 = shufflevector <1 x i32> %1038, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1040 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1039, <32 x i32> %1039, i32 -4)
  %1041 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1040)
  %1042 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1041, <32 x i32> %1041, i32 -4)
  %1043 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1042)
  %1044 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1043, <32 x i32> %1043, i32 -4)
  %1045 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1044)
  %1046 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1045, <32 x i32> %1045, i32 -4)
  %1047 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1046)
  %1048 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1047, <32 x i32> %1047, i32 -4)
  %1049 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1048)
  %1050 = bitcast <32 x i32> %1049 to <128 x i8>
  %1051 = zext <128 x i8> %1050 to <128 x i16>
  %1052 = bitcast <128 x i16> %1051 to <64 x i32>
  %1053 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1052)
  %1054 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1052)
  %1055 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1054, <32 x i32> %621) #11
  %1056 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1053, <32 x i32> %620) #11
  %1057 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1055) #11
  %1058 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1055) #11
  %1059 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1058, <32 x i32> %1057) #11
  %1060 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1056) #11
  %1061 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1056) #11
  %1062 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1061, <32 x i32> %1060) #11
  %1063 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1062, <32 x i32> %1059)
  %1064 = bitcast <64 x i32> %1063 to <128 x i16>
  %t1251.us.us = zext <128 x i16> %1064 to <128 x i32>
  %1065 = shufflevector <128 x i32> %t1251.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1066 = shufflevector <128 x i32> %t1251.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1067 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1066, <32 x i32> %1065, i32 -4)
  %1068 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1067)
  %1069 = shufflevector <128 x i32> %t1251.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1070 = shufflevector <128 x i32> %t1251.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1071 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1070, <32 x i32> %1069, i32 -4)
  %1072 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1071)
  %1073 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1072, <32 x i32> %1068)
  %1074 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1067)
  %1075 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1071)
  %1076 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1075, <32 x i32> %1074)
  %t1250.us.us = add nsw <64 x i32> %1076, %1073
  %1077 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1250.us.us)
  %1078 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1250.us.us)
  %1079 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1078, <32 x i32> %1077, i32 -4)
  %1080 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1079)
  %1081 = add nsw <32 x i32> %1080, %convolved400.sroa.153.4.us.us
  %1082 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1079)
  %1083 = add nsw <32 x i32> %1081, %1082
  %1084 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1054, <32 x i32> %659) #11
  %1085 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1053, <32 x i32> %658) #11
  %1086 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1084) #11
  %1087 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1084) #11
  %1088 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1087, <32 x i32> %1086) #11
  %1089 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1085) #11
  %1090 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1085) #11
  %1091 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1090, <32 x i32> %1089) #11
  %1092 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1091, <32 x i32> %1088)
  %1093 = bitcast <64 x i32> %1092 to <128 x i16>
  %t1253.us.us = zext <128 x i16> %1093 to <128 x i32>
  %1094 = shufflevector <128 x i32> %t1253.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1095 = shufflevector <128 x i32> %t1253.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1096 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1095, <32 x i32> %1094, i32 -4)
  %1097 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1096)
  %1098 = shufflevector <128 x i32> %t1253.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1099 = shufflevector <128 x i32> %t1253.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1100 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1099, <32 x i32> %1098, i32 -4)
  %1101 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1100)
  %1102 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1101, <32 x i32> %1097)
  %1103 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1096)
  %1104 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1100)
  %1105 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1104, <32 x i32> %1103)
  %t1252.us.us = add nsw <64 x i32> %1105, %1102
  %1106 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1252.us.us)
  %1107 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1252.us.us)
  %1108 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1107, <32 x i32> %1106, i32 -4)
  %1109 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1108)
  %1110 = add nsw <32 x i32> %1109, %convolved400.sroa.158.4.us.us
  %1111 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1108)
  %1112 = add nsw <32 x i32> %1110, %1111
  %1113 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1054, <32 x i32> %696) #11
  %1114 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1053, <32 x i32> %695) #11
  %1115 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1113) #11
  %1116 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1113) #11
  %1117 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1116, <32 x i32> %1115) #11
  %1118 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1114) #11
  %1119 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1114) #11
  %1120 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1119, <32 x i32> %1118) #11
  %1121 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1120, <32 x i32> %1117)
  %1122 = bitcast <64 x i32> %1121 to <128 x i16>
  %t1255.us.us = zext <128 x i16> %1122 to <128 x i32>
  %1123 = shufflevector <128 x i32> %t1255.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1124 = shufflevector <128 x i32> %t1255.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1125 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1124, <32 x i32> %1123, i32 -4)
  %1126 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1125)
  %1127 = shufflevector <128 x i32> %t1255.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1128 = shufflevector <128 x i32> %t1255.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1129 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1128, <32 x i32> %1127, i32 -4)
  %1130 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1129)
  %1131 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1130, <32 x i32> %1126)
  %1132 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1125)
  %1133 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1129)
  %1134 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1133, <32 x i32> %1132)
  %t1254.us.us = add nsw <64 x i32> %1134, %1131
  %1135 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1254.us.us)
  %1136 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1254.us.us)
  %1137 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1136, <32 x i32> %1135, i32 -4)
  %1138 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1137)
  %1139 = add nsw <32 x i32> %1138, %convolved400.sroa.163.4.us.us
  %1140 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1137)
  %1141 = add nsw <32 x i32> %1139, %1140
  %1142 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1054, <32 x i32> %733) #11
  %1143 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1053, <32 x i32> %732) #11
  %1144 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1142) #11
  %1145 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1142) #11
  %1146 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1145, <32 x i32> %1144) #11
  %1147 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1143) #11
  %1148 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1143) #11
  %1149 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1148, <32 x i32> %1147) #11
  %1150 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1149, <32 x i32> %1146)
  %1151 = bitcast <64 x i32> %1150 to <128 x i16>
  %t1257.us.us = zext <128 x i16> %1151 to <128 x i32>
  %1152 = shufflevector <128 x i32> %t1257.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1153 = shufflevector <128 x i32> %t1257.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1154 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1153, <32 x i32> %1152, i32 -4)
  %1155 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1154)
  %1156 = shufflevector <128 x i32> %t1257.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1157 = shufflevector <128 x i32> %t1257.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1158 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1157, <32 x i32> %1156, i32 -4)
  %1159 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1158)
  %1160 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1159, <32 x i32> %1155)
  %1161 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1154)
  %1162 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1158)
  %1163 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1162, <32 x i32> %1161)
  %t1256.us.us = add nsw <64 x i32> %1163, %1160
  %1164 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1256.us.us)
  %1165 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1256.us.us)
  %1166 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1165, <32 x i32> %1164, i32 -4)
  %1167 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1166)
  %1168 = add nsw <32 x i32> %1167, %convolved400.sroa.168.4.us.us
  %1169 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1166)
  %1170 = add nsw <32 x i32> %1168, %1169
  %1171 = add i32 %590, %1841
  %1172 = getelementptr inbounds i8, i8* %13, i32 %1171
  %1173 = bitcast i8* %1172 to <1 x i32>*
  %1174 = load <1 x i32>, <1 x i32>* %1173, align 4, !tbaa !109
  %1175 = shufflevector <1 x i32> %1174, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1176 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1175, <32 x i32> %1175, i32 -4)
  %1177 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1176)
  %1178 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1177, <32 x i32> %1177, i32 -4)
  %1179 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1178)
  %1180 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1179, <32 x i32> %1179, i32 -4)
  %1181 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1180)
  %1182 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1181, <32 x i32> %1181, i32 -4)
  %1183 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1182)
  %1184 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1183, <32 x i32> %1183, i32 -4)
  %1185 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1184)
  %1186 = bitcast <32 x i32> %1185 to <128 x i8>
  %1187 = zext <128 x i8> %1186 to <128 x i16>
  %1188 = bitcast <128 x i16> %1187 to <64 x i32>
  %1189 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1188)
  %1190 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1188)
  %1191 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1190, <32 x i32> %621) #11
  %1192 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1189, <32 x i32> %620) #11
  %1193 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1191) #11
  %1194 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1191) #11
  %1195 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1194, <32 x i32> %1193) #11
  %1196 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1192) #11
  %1197 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1192) #11
  %1198 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1197, <32 x i32> %1196) #11
  %1199 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1198, <32 x i32> %1195)
  %1200 = bitcast <64 x i32> %1199 to <128 x i16>
  %t1259.us.us = zext <128 x i16> %1200 to <128 x i32>
  %1201 = shufflevector <128 x i32> %t1259.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1202 = shufflevector <128 x i32> %t1259.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1203 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1202, <32 x i32> %1201, i32 -4)
  %1204 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1203)
  %1205 = shufflevector <128 x i32> %t1259.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1206 = shufflevector <128 x i32> %t1259.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1207 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1206, <32 x i32> %1205, i32 -4)
  %1208 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1207)
  %1209 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1208, <32 x i32> %1204)
  %1210 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1203)
  %1211 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1207)
  %1212 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1211, <32 x i32> %1210)
  %t1258.us.us = add nsw <64 x i32> %1212, %1209
  %1213 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1258.us.us)
  %1214 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1258.us.us)
  %1215 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1214, <32 x i32> %1213, i32 -4)
  %1216 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1215)
  %1217 = add nsw <32 x i32> %1216, %convolved400.sroa.173.4.us.us
  %1218 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1215)
  %1219 = add nsw <32 x i32> %1217, %1218
  %1220 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1190, <32 x i32> %659) #11
  %1221 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1189, <32 x i32> %658) #11
  %1222 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1220) #11
  %1223 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1220) #11
  %1224 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1223, <32 x i32> %1222) #11
  %1225 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1221) #11
  %1226 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1221) #11
  %1227 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1226, <32 x i32> %1225) #11
  %1228 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1227, <32 x i32> %1224)
  %1229 = bitcast <64 x i32> %1228 to <128 x i16>
  %t1261.us.us = zext <128 x i16> %1229 to <128 x i32>
  %1230 = shufflevector <128 x i32> %t1261.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1231 = shufflevector <128 x i32> %t1261.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1232 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1231, <32 x i32> %1230, i32 -4)
  %1233 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1232)
  %1234 = shufflevector <128 x i32> %t1261.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1235 = shufflevector <128 x i32> %t1261.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1236 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1235, <32 x i32> %1234, i32 -4)
  %1237 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1236)
  %1238 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1237, <32 x i32> %1233)
  %1239 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1232)
  %1240 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1236)
  %1241 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1240, <32 x i32> %1239)
  %t1260.us.us = add nsw <64 x i32> %1241, %1238
  %1242 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1260.us.us)
  %1243 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1260.us.us)
  %1244 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1243, <32 x i32> %1242, i32 -4)
  %1245 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1244)
  %1246 = add nsw <32 x i32> %1245, %convolved400.sroa.178.4.us.us
  %1247 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1244)
  %1248 = add nsw <32 x i32> %1246, %1247
  %1249 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1190, <32 x i32> %696) #11
  %1250 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1189, <32 x i32> %695) #11
  %1251 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1249) #11
  %1252 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1249) #11
  %1253 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1252, <32 x i32> %1251) #11
  %1254 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1250) #11
  %1255 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1250) #11
  %1256 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1255, <32 x i32> %1254) #11
  %1257 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1256, <32 x i32> %1253)
  %1258 = bitcast <64 x i32> %1257 to <128 x i16>
  %t1263.us.us = zext <128 x i16> %1258 to <128 x i32>
  %1259 = shufflevector <128 x i32> %t1263.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1260 = shufflevector <128 x i32> %t1263.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1261 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1260, <32 x i32> %1259, i32 -4)
  %1262 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1261)
  %1263 = shufflevector <128 x i32> %t1263.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1264 = shufflevector <128 x i32> %t1263.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1265 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1264, <32 x i32> %1263, i32 -4)
  %1266 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1265)
  %1267 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1266, <32 x i32> %1262)
  %1268 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1261)
  %1269 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1265)
  %1270 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1269, <32 x i32> %1268)
  %t1262.us.us = add nsw <64 x i32> %1270, %1267
  %1271 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1262.us.us)
  %1272 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1262.us.us)
  %1273 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1272, <32 x i32> %1271, i32 -4)
  %1274 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1273)
  %1275 = add nsw <32 x i32> %1274, %convolved400.sroa.183.4.us.us
  %1276 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1273)
  %1277 = add nsw <32 x i32> %1275, %1276
  %1278 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1190, <32 x i32> %733) #11
  %1279 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1189, <32 x i32> %732) #11
  %1280 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1278) #11
  %1281 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1278) #11
  %1282 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1281, <32 x i32> %1280) #11
  %1283 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1279) #11
  %1284 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1279) #11
  %1285 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1284, <32 x i32> %1283) #11
  %1286 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1285, <32 x i32> %1282)
  %1287 = bitcast <64 x i32> %1286 to <128 x i16>
  %t1265.us.us = zext <128 x i16> %1287 to <128 x i32>
  %1288 = shufflevector <128 x i32> %t1265.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1289 = shufflevector <128 x i32> %t1265.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1290 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1289, <32 x i32> %1288, i32 -4)
  %1291 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1290)
  %1292 = shufflevector <128 x i32> %t1265.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1293 = shufflevector <128 x i32> %t1265.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1294 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1293, <32 x i32> %1292, i32 -4)
  %1295 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1294)
  %1296 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1295, <32 x i32> %1291)
  %1297 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1290)
  %1298 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1294)
  %1299 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1298, <32 x i32> %1297)
  %t1264.us.us = add nsw <64 x i32> %1299, %1296
  %1300 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1264.us.us)
  %1301 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1264.us.us)
  %1302 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1301, <32 x i32> %1300, i32 -4)
  %1303 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1302)
  %1304 = add nsw <32 x i32> %1303, %convolved400.sroa.188.4.us.us
  %1305 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1302)
  %1306 = add nsw <32 x i32> %1304, %1305
  %1307 = add i32 %590, %1842
  %1308 = getelementptr inbounds i8, i8* %13, i32 %1307
  %1309 = bitcast i8* %1308 to <1 x i32>*
  %1310 = load <1 x i32>, <1 x i32>* %1309, align 4, !tbaa !109
  %1311 = shufflevector <1 x i32> %1310, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1312 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1311, <32 x i32> %1311, i32 -4)
  %1313 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1312)
  %1314 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1313, <32 x i32> %1313, i32 -4)
  %1315 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1314)
  %1316 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1315, <32 x i32> %1315, i32 -4)
  %1317 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1316)
  %1318 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1317, <32 x i32> %1317, i32 -4)
  %1319 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1318)
  %1320 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %1319, <32 x i32> %1319, i32 -4)
  %1321 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1320)
  %1322 = bitcast <32 x i32> %1321 to <128 x i8>
  %1323 = zext <128 x i8> %1322 to <128 x i16>
  %1324 = bitcast <128 x i16> %1323 to <64 x i32>
  %1325 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1324)
  %1326 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1324)
  %1327 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1326, <32 x i32> %621) #11
  %1328 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1325, <32 x i32> %620) #11
  %1329 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1327) #11
  %1330 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1327) #11
  %1331 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1330, <32 x i32> %1329) #11
  %1332 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1328) #11
  %1333 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1328) #11
  %1334 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1333, <32 x i32> %1332) #11
  %1335 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1334, <32 x i32> %1331)
  %1336 = bitcast <64 x i32> %1335 to <128 x i16>
  %t1267.us.us = zext <128 x i16> %1336 to <128 x i32>
  %1337 = shufflevector <128 x i32> %t1267.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1338 = shufflevector <128 x i32> %t1267.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1339 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1338, <32 x i32> %1337, i32 -4)
  %1340 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1339)
  %1341 = shufflevector <128 x i32> %t1267.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1342 = shufflevector <128 x i32> %t1267.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1343 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1342, <32 x i32> %1341, i32 -4)
  %1344 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1343)
  %1345 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1344, <32 x i32> %1340)
  %1346 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1339)
  %1347 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1343)
  %1348 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1347, <32 x i32> %1346)
  %t1266.us.us = add nsw <64 x i32> %1348, %1345
  %1349 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1266.us.us)
  %1350 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1266.us.us)
  %1351 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1350, <32 x i32> %1349, i32 -4)
  %1352 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1351)
  %1353 = add nsw <32 x i32> %1352, %convolved400.sroa.193.4.us.us
  %1354 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1351)
  %1355 = add nsw <32 x i32> %1353, %1354
  %1356 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1326, <32 x i32> %659) #11
  %1357 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1325, <32 x i32> %658) #11
  %1358 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1356) #11
  %1359 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1356) #11
  %1360 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1359, <32 x i32> %1358) #11
  %1361 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1357) #11
  %1362 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1357) #11
  %1363 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1362, <32 x i32> %1361) #11
  %1364 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1363, <32 x i32> %1360)
  %1365 = bitcast <64 x i32> %1364 to <128 x i16>
  %t1269.us.us = zext <128 x i16> %1365 to <128 x i32>
  %1366 = shufflevector <128 x i32> %t1269.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1367 = shufflevector <128 x i32> %t1269.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1368 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1367, <32 x i32> %1366, i32 -4)
  %1369 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1368)
  %1370 = shufflevector <128 x i32> %t1269.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1371 = shufflevector <128 x i32> %t1269.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1372 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1371, <32 x i32> %1370, i32 -4)
  %1373 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1372)
  %1374 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1373, <32 x i32> %1369)
  %1375 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1368)
  %1376 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1372)
  %1377 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1376, <32 x i32> %1375)
  %t1268.us.us = add nsw <64 x i32> %1377, %1374
  %1378 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1268.us.us)
  %1379 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1268.us.us)
  %1380 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1379, <32 x i32> %1378, i32 -4)
  %1381 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1380)
  %1382 = add nsw <32 x i32> %1381, %convolved400.sroa.198.4.us.us
  %1383 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1380)
  %1384 = add nsw <32 x i32> %1382, %1383
  %1385 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1326, <32 x i32> %696) #11
  %1386 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1325, <32 x i32> %695) #11
  %1387 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1385) #11
  %1388 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1385) #11
  %1389 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1388, <32 x i32> %1387) #11
  %1390 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1386) #11
  %1391 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1386) #11
  %1392 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1391, <32 x i32> %1390) #11
  %1393 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1392, <32 x i32> %1389)
  %1394 = bitcast <64 x i32> %1393 to <128 x i16>
  %t1271.us.us = zext <128 x i16> %1394 to <128 x i32>
  %1395 = shufflevector <128 x i32> %t1271.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1396 = shufflevector <128 x i32> %t1271.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1397 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1396, <32 x i32> %1395, i32 -4)
  %1398 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1397)
  %1399 = shufflevector <128 x i32> %t1271.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1400 = shufflevector <128 x i32> %t1271.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1401 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1400, <32 x i32> %1399, i32 -4)
  %1402 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1401)
  %1403 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1402, <32 x i32> %1398)
  %1404 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1397)
  %1405 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1401)
  %1406 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1405, <32 x i32> %1404)
  %t1270.us.us = add nsw <64 x i32> %1406, %1403
  %1407 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1270.us.us)
  %1408 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1270.us.us)
  %1409 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1408, <32 x i32> %1407, i32 -4)
  %1410 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1409)
  %1411 = add nsw <32 x i32> %1410, %convolved400.sroa.203.4.us.us
  %1412 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1409)
  %1413 = add nsw <32 x i32> %1411, %1412
  %1414 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1326, <32 x i32> %733) #11
  %1415 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %1325, <32 x i32> %732) #11
  %1416 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1414) #11
  %1417 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1414) #11
  %1418 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1417, <32 x i32> %1416) #11
  %1419 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1415) #11
  %1420 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1415) #11
  %1421 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %1420, <32 x i32> %1419) #11
  %1422 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1421, <32 x i32> %1418)
  %1423 = bitcast <64 x i32> %1422 to <128 x i16>
  %t1273.us.us = zext <128 x i16> %1423 to <128 x i32>
  %1424 = shufflevector <128 x i32> %t1273.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1425 = shufflevector <128 x i32> %t1273.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1426 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1425, <32 x i32> %1424, i32 -4)
  %1427 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1426)
  %1428 = shufflevector <128 x i32> %t1273.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1429 = shufflevector <128 x i32> %t1273.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1430 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1429, <32 x i32> %1428, i32 -4)
  %1431 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1430)
  %1432 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1431, <32 x i32> %1427)
  %1433 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1426)
  %1434 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1430)
  %1435 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1434, <32 x i32> %1433)
  %t1272.us.us = add nsw <64 x i32> %1435, %1432
  %1436 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1272.us.us)
  %1437 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1272.us.us)
  %1438 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %1437, <32 x i32> %1436, i32 -4)
  %1439 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1438)
  %1440 = add nsw <32 x i32> %1439, %convolved400.sroa.208.4.us.us
  %1441 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1438)
  %1442 = add nsw <32 x i32> %1440, %1441
  %1443 = add nuw nsw i32 %"convolved.s1.r19$z.r124.us.us", 1
  %.not463.us.us = icmp eq i32 %1443, %7
  br i1 %.not463.us.us, label %"end for convolved.s1.r19$z.r124.us.us", label %"for convolved.s1.r19$z.r124.us.us"

"end for convolved.s1.r19$z.r124.us.us":          ; preds = %"for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$x.us.us"
  %convolved400.sroa.208.5.us.us = phi <32 x i32> [ %convolved400.sroa.208.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1442, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.203.5.us.us = phi <32 x i32> [ %convolved400.sroa.203.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1413, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.198.5.us.us = phi <32 x i32> [ %convolved400.sroa.198.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1384, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.193.5.us.us = phi <32 x i32> [ %convolved400.sroa.193.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1355, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.188.5.us.us = phi <32 x i32> [ %convolved400.sroa.188.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1306, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.183.5.us.us = phi <32 x i32> [ %convolved400.sroa.183.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1277, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.178.5.us.us = phi <32 x i32> [ %convolved400.sroa.178.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1248, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.173.5.us.us = phi <32 x i32> [ %convolved400.sroa.173.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1219, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.168.5.us.us = phi <32 x i32> [ %convolved400.sroa.168.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1170, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.163.5.us.us = phi <32 x i32> [ %convolved400.sroa.163.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1141, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.158.5.us.us = phi <32 x i32> [ %convolved400.sroa.158.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1112, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.153.5.us.us = phi <32 x i32> [ %convolved400.sroa.153.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1083, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.148.5.us.us = phi <32 x i32> [ %convolved400.sroa.148.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1034, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.143.5.us.us = phi <32 x i32> [ %convolved400.sroa.143.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %1005, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.138.5.us.us = phi <32 x i32> [ %convolved400.sroa.138.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %976, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.133.5.us.us = phi <32 x i32> [ %convolved400.sroa.133.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %947, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.123.5.us.us = phi <32 x i32> [ %convolved400.sroa.123.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %898, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.113.5.us.us = phi <32 x i32> [ %convolved400.sroa.113.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %869, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.103.5.us.us = phi <32 x i32> [ %convolved400.sroa.103.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %840, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.93.5.us.us = phi <32 x i32> [ %convolved400.sroa.93.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %811, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.78.5.us.us = phi <32 x i32> [ %convolved400.sroa.78.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %762, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.63.5.us.us = phi <32 x i32> [ %convolved400.sroa.63.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %725, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.48.5.us.us = phi <32 x i32> [ %convolved400.sroa.48.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %688, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.0.5.us.us = phi <32 x i32> [ %convolved400.sroa.0.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %650, %"for convolved.s1.r19$z.r124.us.us" ]
  %1444 = add nuw nsw i32 %"convolved.s1.r19$x.us.us", 1
  %.not462.us.us = icmp eq i32 %1444, %9
  br i1 %.not462.us.us, label %"end for convolved.s1.r19$x.us.us", label %"for convolved.s1.r19$x.us.us"

"end for convolved.s1.r19$x.us.us":               ; preds = %"end for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$y.us.us"
  %convolved400.sroa.208.3.us.us = phi <32 x i32> [ %convolved400.sroa.208.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.208.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.203.3.us.us = phi <32 x i32> [ %convolved400.sroa.203.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.203.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.198.3.us.us = phi <32 x i32> [ %convolved400.sroa.198.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.198.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.193.3.us.us = phi <32 x i32> [ %convolved400.sroa.193.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.193.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.188.3.us.us = phi <32 x i32> [ %convolved400.sroa.188.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.188.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.183.3.us.us = phi <32 x i32> [ %convolved400.sroa.183.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.183.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.178.3.us.us = phi <32 x i32> [ %convolved400.sroa.178.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.178.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.173.3.us.us = phi <32 x i32> [ %convolved400.sroa.173.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.173.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.168.3.us.us = phi <32 x i32> [ %convolved400.sroa.168.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.168.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.163.3.us.us = phi <32 x i32> [ %convolved400.sroa.163.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.163.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.158.3.us.us = phi <32 x i32> [ %convolved400.sroa.158.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.158.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.153.3.us.us = phi <32 x i32> [ %convolved400.sroa.153.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.153.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.148.3.us.us = phi <32 x i32> [ %convolved400.sroa.148.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.148.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.143.3.us.us = phi <32 x i32> [ %convolved400.sroa.143.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.143.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.138.3.us.us = phi <32 x i32> [ %convolved400.sroa.138.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.138.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.133.3.us.us = phi <32 x i32> [ %convolved400.sroa.133.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.133.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.123.3.us.us = phi <32 x i32> [ %convolved400.sroa.123.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.123.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.113.3.us.us = phi <32 x i32> [ %convolved400.sroa.113.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.113.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.103.3.us.us = phi <32 x i32> [ %convolved400.sroa.103.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.103.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.93.3.us.us = phi <32 x i32> [ %convolved400.sroa.93.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.93.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.78.3.us.us = phi <32 x i32> [ %convolved400.sroa.78.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.78.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.63.3.us.us = phi <32 x i32> [ %convolved400.sroa.63.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.63.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.48.3.us.us = phi <32 x i32> [ %convolved400.sroa.48.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.48.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved400.sroa.0.3.us.us = phi <32 x i32> [ %convolved400.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved400.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %1445 = add nuw nsw i32 %"convolved.s1.r19$y.us.us", 1
  %.not461.us.us = icmp eq i32 %1445, %11
  br i1 %.not461.us.us, label %"consume convolved.us.us", label %"for convolved.s1.r19$y.us.us"

"consume convolved.us.us":                        ; preds = %"end for convolved.s1.r19$x.us.us", %after_bb18.us.us
  %convolved400.sroa.208.6.us.us = phi <32 x i32> [ %convolved400.sroa.208.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.208.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.203.6.us.us = phi <32 x i32> [ %convolved400.sroa.203.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.203.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.198.6.us.us = phi <32 x i32> [ %convolved400.sroa.198.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.198.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.193.6.us.us = phi <32 x i32> [ %convolved400.sroa.193.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.193.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.188.6.us.us = phi <32 x i32> [ %convolved400.sroa.188.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.188.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.183.6.us.us = phi <32 x i32> [ %convolved400.sroa.183.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.183.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.178.6.us.us = phi <32 x i32> [ %convolved400.sroa.178.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.178.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.173.6.us.us = phi <32 x i32> [ %convolved400.sroa.173.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.173.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.168.6.us.us = phi <32 x i32> [ %convolved400.sroa.168.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.168.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.163.6.us.us = phi <32 x i32> [ %convolved400.sroa.163.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.163.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.158.6.us.us = phi <32 x i32> [ %convolved400.sroa.158.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.158.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.153.6.us.us = phi <32 x i32> [ %convolved400.sroa.153.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.153.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.148.6.us.us = phi <32 x i32> [ %convolved400.sroa.148.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.148.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.143.6.us.us = phi <32 x i32> [ %convolved400.sroa.143.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.143.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.138.6.us.us = phi <32 x i32> [ %convolved400.sroa.138.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.138.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.133.6.us.us = phi <32 x i32> [ %convolved400.sroa.133.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.133.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.123.6.us.us = phi <32 x i32> [ %convolved400.sroa.123.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.123.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.113.6.us.us = phi <32 x i32> [ %convolved400.sroa.113.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.113.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.103.6.us.us = phi <32 x i32> [ %convolved400.sroa.103.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.103.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.93.6.us.us = phi <32 x i32> [ %convolved400.sroa.93.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.93.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.78.6.us.us = phi <32 x i32> [ %convolved400.sroa.78.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.78.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.63.6.us.us = phi <32 x i32> [ %convolved400.sroa.63.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.63.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.48.6.us.us = phi <32 x i32> [ %convolved400.sroa.48.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.48.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved400.sroa.0.6.us.us = phi <32 x i32> [ %convolved400.sroa.0.0.us.us, %after_bb18.us.us ], [ %convolved400.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %1446 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.48.6.us.us, <32 x i32> %convolved400.sroa.0.6.us.us)
  %1447 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.78.6.us.us, <32 x i32> %convolved400.sroa.63.6.us.us)
  %1448 = shufflevector <64 x i32> %1446, <64 x i32> %1447, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1449 = sext <128 x i32> %1448 to <128 x i64>
  %1450 = mul nsw <128 x i64> %1449, %397
  %1451 = ashr <128 x i64> %1450, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1452 = add nsw <128 x i64> %1451, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a14.us.us = ashr <128 x i64> %1452, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1453 = icmp slt <128 x i64> %a14.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a13.us.us = select <128 x i1> %1453, <128 x i64> %a14.us.us, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1454 = icmp sgt <128 x i64> %a13.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1455 = select <128 x i1> %1454, <128 x i64> %a13.us.us, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1456 = trunc <128 x i64> %1455 to <128 x i32>
  %1457 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1458 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1457, i32 %output_shift) #11
  %1459 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1460 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1459, i32 %output_shift) #11
  %1461 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1462 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1461, i32 %output_shift) #11
  %1463 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1464 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1463, i32 %output_shift) #11
  %1465 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1460, <32 x i32> %1458)
  %1466 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1464, <32 x i32> %1462)
  %1467 = shufflevector <64 x i32> %1465, <64 x i32> %1466, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1468 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1457, i32 %400) #11
  %1469 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1459, i32 %400) #11
  %1470 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1461, i32 %400) #11
  %1471 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1463, i32 %400) #11
  %1472 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1469, <32 x i32> %1468)
  %1473 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1471, <32 x i32> %1470)
  %1474 = shufflevector <64 x i32> %1472, <64 x i32> %1473, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1475 = and <128 x i32> %1474, %399
  %1476 = add nsw <128 x i32> %1475, %1467
  %1477 = shufflevector <128 x i32> %1476, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1478 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1477, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1479 = shufflevector <128 x i32> %1476, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1480 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1479, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1481 = shufflevector <128 x i32> %1476, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1482 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1481, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1483 = shufflevector <128 x i32> %1476, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1484 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1483, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1485 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1478, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1486 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1480, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1487 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1482, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1488 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1484, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1489 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1486, <32 x i32> %1485)
  %1490 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1488, <32 x i32> %1487)
  %1491 = shufflevector <64 x i32> %1489, <64 x i32> %1490, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1492 = trunc <128 x i32> %1491 to <128 x i16>
  %1493 = bitcast <128 x i16> %1492 to <64 x i32>
  %1494 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1493, <64 x i32> %404) #11
  %1495 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1494)
  %1496 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1494)
  %1497 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1496, <32 x i32> %1885) #11
  %1498 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1495, <32 x i32> %1884) #11
  %1499 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1497, <32 x i32> %1887) #11
  %1500 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1498, <32 x i32> %1886) #11
  %1501 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1500, <32 x i32> %1499)
  %1502 = bitcast <64 x i32> %1501 to <128 x i16>
  %1503 = trunc <128 x i16> %1502 to <128 x i8>
  %1504 = bitcast <128 x i8> %1503 to <32 x i32>
  %1505 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1504, <32 x i32> %407) #11
  %1506 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1505, <32 x i32> %410) #11
  %1507 = shl nsw i32 %output.s0.c.co.us.us, 7
  %1508 = add i32 %1507, %t877.us.us
  %1509 = add i32 %1508, %1888
  %1510 = getelementptr inbounds i8, i8* %23, i32 %1509
  %1511 = bitcast i8* %1510 to <32 x i32>*
  store <32 x i32> %1506, <32 x i32>* %1511, align 1, !tbaa !112
  %1512 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.103.6.us.us, <32 x i32> %convolved400.sroa.93.6.us.us)
  %1513 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.123.6.us.us, <32 x i32> %convolved400.sroa.113.6.us.us)
  %1514 = shufflevector <64 x i32> %1512, <64 x i32> %1513, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1515 = sext <128 x i32> %1514 to <128 x i64>
  %1516 = mul nsw <128 x i64> %1515, %397
  %1517 = ashr <128 x i64> %1516, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1518 = add nsw <128 x i64> %1517, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a18.us.us = ashr <128 x i64> %1518, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1519 = icmp slt <128 x i64> %a18.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a17.us.us = select <128 x i1> %1519, <128 x i64> %a18.us.us, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1520 = icmp sgt <128 x i64> %a17.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1521 = select <128 x i1> %1520, <128 x i64> %a17.us.us, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1522 = trunc <128 x i64> %1521 to <128 x i32>
  %1523 = shufflevector <128 x i32> %1522, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1524 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1523, i32 %output_shift) #11
  %1525 = shufflevector <128 x i32> %1522, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1526 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1525, i32 %output_shift) #11
  %1527 = shufflevector <128 x i32> %1522, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1528 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1527, i32 %output_shift) #11
  %1529 = shufflevector <128 x i32> %1522, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1530 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1529, i32 %output_shift) #11
  %1531 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1526, <32 x i32> %1524)
  %1532 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1530, <32 x i32> %1528)
  %1533 = shufflevector <64 x i32> %1531, <64 x i32> %1532, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1534 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1523, i32 %400) #11
  %1535 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1525, i32 %400) #11
  %1536 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1527, i32 %400) #11
  %1537 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1529, i32 %400) #11
  %1538 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1535, <32 x i32> %1534)
  %1539 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1537, <32 x i32> %1536)
  %1540 = shufflevector <64 x i32> %1538, <64 x i32> %1539, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1541 = and <128 x i32> %1540, %399
  %1542 = add nsw <128 x i32> %1541, %1533
  %1543 = shufflevector <128 x i32> %1542, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1544 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1543, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1545 = shufflevector <128 x i32> %1542, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1546 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1545, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1547 = shufflevector <128 x i32> %1542, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1548 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1547, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1549 = shufflevector <128 x i32> %1542, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1550 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1549, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1551 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1544, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1552 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1546, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1553 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1548, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1554 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1550, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1555 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1552, <32 x i32> %1551)
  %1556 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1554, <32 x i32> %1553)
  %1557 = shufflevector <64 x i32> %1555, <64 x i32> %1556, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1558 = trunc <128 x i32> %1557 to <128 x i16>
  %1559 = bitcast <128 x i16> %1558 to <64 x i32>
  %1560 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1559, <64 x i32> %404) #11
  %1561 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1560)
  %1562 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1560)
  %1563 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1562, <32 x i32> %1885) #11
  %1564 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1561, <32 x i32> %1884) #11
  %1565 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1563, <32 x i32> %1887) #11
  %1566 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1564, <32 x i32> %1886) #11
  %1567 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1566, <32 x i32> %1565)
  %1568 = bitcast <64 x i32> %1567 to <128 x i16>
  %1569 = trunc <128 x i16> %1568 to <128 x i8>
  %1570 = bitcast <128 x i8> %1569 to <32 x i32>
  %1571 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1570, <32 x i32> %407) #11
  %1572 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1571, <32 x i32> %410) #11
  %1573 = add i32 %1508, %1889
  %1574 = getelementptr inbounds i8, i8* %23, i32 %1573
  %1575 = bitcast i8* %1574 to <32 x i32>*
  store <32 x i32> %1572, <32 x i32>* %1575, align 1, !tbaa !112
  %1576 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.138.6.us.us, <32 x i32> %convolved400.sroa.133.6.us.us)
  %1577 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.148.6.us.us, <32 x i32> %convolved400.sroa.143.6.us.us)
  %1578 = shufflevector <64 x i32> %1576, <64 x i32> %1577, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1579 = sext <128 x i32> %1578 to <128 x i64>
  %1580 = mul nsw <128 x i64> %1579, %397
  %1581 = ashr <128 x i64> %1580, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1582 = add nsw <128 x i64> %1581, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a22.us.us = ashr <128 x i64> %1582, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1583 = icmp slt <128 x i64> %a22.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a21.us.us = select <128 x i1> %1583, <128 x i64> %a22.us.us, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1584 = icmp sgt <128 x i64> %a21.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1585 = select <128 x i1> %1584, <128 x i64> %a21.us.us, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1586 = trunc <128 x i64> %1585 to <128 x i32>
  %1587 = shufflevector <128 x i32> %1586, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1588 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1587, i32 %output_shift) #11
  %1589 = shufflevector <128 x i32> %1586, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1590 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1589, i32 %output_shift) #11
  %1591 = shufflevector <128 x i32> %1586, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1592 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1591, i32 %output_shift) #11
  %1593 = shufflevector <128 x i32> %1586, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1594 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1593, i32 %output_shift) #11
  %1595 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1590, <32 x i32> %1588)
  %1596 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1594, <32 x i32> %1592)
  %1597 = shufflevector <64 x i32> %1595, <64 x i32> %1596, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1598 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1587, i32 %400) #11
  %1599 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1589, i32 %400) #11
  %1600 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1591, i32 %400) #11
  %1601 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1593, i32 %400) #11
  %1602 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1599, <32 x i32> %1598)
  %1603 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1601, <32 x i32> %1600)
  %1604 = shufflevector <64 x i32> %1602, <64 x i32> %1603, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1605 = and <128 x i32> %1604, %399
  %1606 = add nsw <128 x i32> %1605, %1597
  %1607 = shufflevector <128 x i32> %1606, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1608 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1607, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1609 = shufflevector <128 x i32> %1606, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1610 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1609, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1611 = shufflevector <128 x i32> %1606, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1612 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1611, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1613 = shufflevector <128 x i32> %1606, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1614 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1613, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1615 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1608, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1616 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1610, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1617 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1612, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1618 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1614, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1619 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1616, <32 x i32> %1615)
  %1620 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1618, <32 x i32> %1617)
  %1621 = shufflevector <64 x i32> %1619, <64 x i32> %1620, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1622 = trunc <128 x i32> %1621 to <128 x i16>
  %1623 = bitcast <128 x i16> %1622 to <64 x i32>
  %1624 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1623, <64 x i32> %404) #11
  %1625 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1624)
  %1626 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1624)
  %1627 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1626, <32 x i32> %1885) #11
  %1628 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1625, <32 x i32> %1884) #11
  %1629 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1627, <32 x i32> %1887) #11
  %1630 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1628, <32 x i32> %1886) #11
  %1631 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1630, <32 x i32> %1629)
  %1632 = bitcast <64 x i32> %1631 to <128 x i16>
  %1633 = trunc <128 x i16> %1632 to <128 x i8>
  %1634 = bitcast <128 x i8> %1633 to <32 x i32>
  %1635 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1634, <32 x i32> %407) #11
  %1636 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1635, <32 x i32> %410) #11
  %1637 = add i32 %1508, %1890
  %1638 = getelementptr inbounds i8, i8* %23, i32 %1637
  %1639 = bitcast i8* %1638 to <32 x i32>*
  store <32 x i32> %1636, <32 x i32>* %1639, align 1, !tbaa !112
  %1640 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.158.6.us.us, <32 x i32> %convolved400.sroa.153.6.us.us)
  %1641 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.168.6.us.us, <32 x i32> %convolved400.sroa.163.6.us.us)
  %1642 = shufflevector <64 x i32> %1640, <64 x i32> %1641, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1643 = sext <128 x i32> %1642 to <128 x i64>
  %1644 = mul nsw <128 x i64> %1643, %397
  %1645 = ashr <128 x i64> %1644, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1646 = add nsw <128 x i64> %1645, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a26.us.us = ashr <128 x i64> %1646, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1647 = icmp slt <128 x i64> %a26.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a25.us.us = select <128 x i1> %1647, <128 x i64> %a26.us.us, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1648 = icmp sgt <128 x i64> %a25.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1649 = select <128 x i1> %1648, <128 x i64> %a25.us.us, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1650 = trunc <128 x i64> %1649 to <128 x i32>
  %1651 = shufflevector <128 x i32> %1650, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1652 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1651, i32 %output_shift) #11
  %1653 = shufflevector <128 x i32> %1650, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1654 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1653, i32 %output_shift) #11
  %1655 = shufflevector <128 x i32> %1650, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1656 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1655, i32 %output_shift) #11
  %1657 = shufflevector <128 x i32> %1650, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1658 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1657, i32 %output_shift) #11
  %1659 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1654, <32 x i32> %1652)
  %1660 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1658, <32 x i32> %1656)
  %1661 = shufflevector <64 x i32> %1659, <64 x i32> %1660, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1662 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1651, i32 %400) #11
  %1663 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1653, i32 %400) #11
  %1664 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1655, i32 %400) #11
  %1665 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1657, i32 %400) #11
  %1666 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1663, <32 x i32> %1662)
  %1667 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1665, <32 x i32> %1664)
  %1668 = shufflevector <64 x i32> %1666, <64 x i32> %1667, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1669 = and <128 x i32> %1668, %399
  %1670 = add nsw <128 x i32> %1669, %1661
  %1671 = shufflevector <128 x i32> %1670, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1672 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1671, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1673 = shufflevector <128 x i32> %1670, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1674 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1673, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1675 = shufflevector <128 x i32> %1670, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1676 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1675, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1677 = shufflevector <128 x i32> %1670, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1678 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1677, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1679 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1672, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1680 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1674, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1681 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1676, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1682 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1678, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1683 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1680, <32 x i32> %1679)
  %1684 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1682, <32 x i32> %1681)
  %1685 = shufflevector <64 x i32> %1683, <64 x i32> %1684, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1686 = trunc <128 x i32> %1685 to <128 x i16>
  %1687 = bitcast <128 x i16> %1686 to <64 x i32>
  %1688 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1687, <64 x i32> %404) #11
  %1689 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1688)
  %1690 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1688)
  %1691 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1690, <32 x i32> %1885) #11
  %1692 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1689, <32 x i32> %1884) #11
  %1693 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1691, <32 x i32> %1887) #11
  %1694 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1692, <32 x i32> %1886) #11
  %1695 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1694, <32 x i32> %1693)
  %1696 = bitcast <64 x i32> %1695 to <128 x i16>
  %1697 = trunc <128 x i16> %1696 to <128 x i8>
  %1698 = bitcast <128 x i8> %1697 to <32 x i32>
  %1699 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1698, <32 x i32> %407) #11
  %1700 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1699, <32 x i32> %410) #11
  %1701 = add i32 %1508, %1891
  %1702 = getelementptr inbounds i8, i8* %23, i32 %1701
  %1703 = bitcast i8* %1702 to <32 x i32>*
  store <32 x i32> %1700, <32 x i32>* %1703, align 1, !tbaa !112
  %1704 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.178.6.us.us, <32 x i32> %convolved400.sroa.173.6.us.us)
  %1705 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.188.6.us.us, <32 x i32> %convolved400.sroa.183.6.us.us)
  %1706 = shufflevector <64 x i32> %1704, <64 x i32> %1705, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1707 = sext <128 x i32> %1706 to <128 x i64>
  %1708 = mul nsw <128 x i64> %1707, %397
  %1709 = ashr <128 x i64> %1708, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1710 = add nsw <128 x i64> %1709, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a30.us.us = ashr <128 x i64> %1710, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1711 = icmp slt <128 x i64> %a30.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a29.us.us = select <128 x i1> %1711, <128 x i64> %a30.us.us, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1712 = icmp sgt <128 x i64> %a29.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1713 = select <128 x i1> %1712, <128 x i64> %a29.us.us, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1714 = trunc <128 x i64> %1713 to <128 x i32>
  %1715 = shufflevector <128 x i32> %1714, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1716 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1715, i32 %output_shift) #11
  %1717 = shufflevector <128 x i32> %1714, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1718 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1717, i32 %output_shift) #11
  %1719 = shufflevector <128 x i32> %1714, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1720 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1719, i32 %output_shift) #11
  %1721 = shufflevector <128 x i32> %1714, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1722 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1721, i32 %output_shift) #11
  %1723 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1718, <32 x i32> %1716)
  %1724 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1722, <32 x i32> %1720)
  %1725 = shufflevector <64 x i32> %1723, <64 x i32> %1724, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1726 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1715, i32 %400) #11
  %1727 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1717, i32 %400) #11
  %1728 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1719, i32 %400) #11
  %1729 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1721, i32 %400) #11
  %1730 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1727, <32 x i32> %1726)
  %1731 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1729, <32 x i32> %1728)
  %1732 = shufflevector <64 x i32> %1730, <64 x i32> %1731, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1733 = and <128 x i32> %1732, %399
  %1734 = add nsw <128 x i32> %1733, %1725
  %1735 = shufflevector <128 x i32> %1734, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1736 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1735, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1737 = shufflevector <128 x i32> %1734, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1738 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1737, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1739 = shufflevector <128 x i32> %1734, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1740 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1739, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1741 = shufflevector <128 x i32> %1734, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1742 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1741, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1743 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1736, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1744 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1738, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1745 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1740, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1746 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1742, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1747 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1744, <32 x i32> %1743)
  %1748 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1746, <32 x i32> %1745)
  %1749 = shufflevector <64 x i32> %1747, <64 x i32> %1748, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1750 = trunc <128 x i32> %1749 to <128 x i16>
  %1751 = bitcast <128 x i16> %1750 to <64 x i32>
  %1752 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1751, <64 x i32> %404) #11
  %1753 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1752)
  %1754 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1752)
  %1755 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1754, <32 x i32> %1885) #11
  %1756 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1753, <32 x i32> %1884) #11
  %1757 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1755, <32 x i32> %1887) #11
  %1758 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1756, <32 x i32> %1886) #11
  %1759 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1758, <32 x i32> %1757)
  %1760 = bitcast <64 x i32> %1759 to <128 x i16>
  %1761 = trunc <128 x i16> %1760 to <128 x i8>
  %1762 = bitcast <128 x i8> %1761 to <32 x i32>
  %1763 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1762, <32 x i32> %407) #11
  %1764 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1763, <32 x i32> %410) #11
  %1765 = add i32 %1508, %1892
  %1766 = getelementptr inbounds i8, i8* %23, i32 %1765
  %1767 = bitcast i8* %1766 to <32 x i32>*
  store <32 x i32> %1764, <32 x i32>* %1767, align 1, !tbaa !112
  %1768 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.198.6.us.us, <32 x i32> %convolved400.sroa.193.6.us.us)
  %1769 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.208.6.us.us, <32 x i32> %convolved400.sroa.203.6.us.us)
  %1770 = shufflevector <64 x i32> %1768, <64 x i32> %1769, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1771 = sext <128 x i32> %1770 to <128 x i64>
  %1772 = mul nsw <128 x i64> %1771, %397
  %1773 = ashr <128 x i64> %1772, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1774 = add nsw <128 x i64> %1773, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a34.us.us = ashr <128 x i64> %1774, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1775 = icmp slt <128 x i64> %a34.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a33.us.us = select <128 x i1> %1775, <128 x i64> %a34.us.us, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1776 = icmp sgt <128 x i64> %a33.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1777 = select <128 x i1> %1776, <128 x i64> %a33.us.us, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1778 = trunc <128 x i64> %1777 to <128 x i32>
  %1779 = shufflevector <128 x i32> %1778, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1780 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1779, i32 %output_shift) #11
  %1781 = shufflevector <128 x i32> %1778, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1782 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1781, i32 %output_shift) #11
  %1783 = shufflevector <128 x i32> %1778, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1784 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1783, i32 %output_shift) #11
  %1785 = shufflevector <128 x i32> %1778, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1786 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1785, i32 %output_shift) #11
  %1787 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1782, <32 x i32> %1780)
  %1788 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1786, <32 x i32> %1784)
  %1789 = shufflevector <64 x i32> %1787, <64 x i32> %1788, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1790 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1779, i32 %400) #11
  %1791 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1781, i32 %400) #11
  %1792 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1783, i32 %400) #11
  %1793 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1785, i32 %400) #11
  %1794 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1791, <32 x i32> %1790)
  %1795 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1793, <32 x i32> %1792)
  %1796 = shufflevector <64 x i32> %1794, <64 x i32> %1795, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1797 = and <128 x i32> %1796, %399
  %1798 = add nsw <128 x i32> %1797, %1789
  %1799 = shufflevector <128 x i32> %1798, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1800 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1799, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1801 = shufflevector <128 x i32> %1798, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1802 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1801, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1803 = shufflevector <128 x i32> %1798, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1804 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1803, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1805 = shufflevector <128 x i32> %1798, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1806 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1805, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1807 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1800, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1808 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1802, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1809 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1804, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1810 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1806, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1811 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1808, <32 x i32> %1807)
  %1812 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1810, <32 x i32> %1809)
  %1813 = shufflevector <64 x i32> %1811, <64 x i32> %1812, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1814 = trunc <128 x i32> %1813 to <128 x i16>
  %1815 = bitcast <128 x i16> %1814 to <64 x i32>
  %1816 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1815, <64 x i32> %404) #11
  %1817 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1816)
  %1818 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1816)
  %1819 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1818, <32 x i32> %1885) #11
  %1820 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %1817, <32 x i32> %1884) #11
  %1821 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1819, <32 x i32> %1887) #11
  %1822 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1820, <32 x i32> %1886) #11
  %1823 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1822, <32 x i32> %1821)
  %1824 = bitcast <64 x i32> %1823 to <128 x i16>
  %1825 = trunc <128 x i16> %1824 to <128 x i8>
  %1826 = bitcast <128 x i8> %1825 to <32 x i32>
  %1827 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1826, <32 x i32> %407) #11
  %1828 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1827, <32 x i32> %410) #11
  %1829 = add i32 %1508, %1893
  %1830 = getelementptr inbounds i8, i8* %23, i32 %1829
  %1831 = bitcast i8* %1830 to <32 x i32>*
  store <32 x i32> %1828, <32 x i32>* %1831, align 1, !tbaa !112
  %1832 = add nuw nsw i32 %output.s0.c.co.us.us, 1
  %.not460.us.us = icmp eq i32 %1832, %393
  br i1 %.not460.us.us, label %"end for output.s0.c.co.us.us", label %"for output.s0.c.co.us.us"

"end for output.s0.c.co.us.us":                   ; preds = %"consume convolved.us.us", %"consume sum_input.us.us"
  %1833 = add nuw nsw i32 %output.s0.x.xo.us.us, 1
  %.not459.us.us = icmp eq i32 %1833, %388
  br i1 %.not459.us.us, label %"end for output.s0.x.xo.loopexit.us.us", label %"for output.s0.x.xo.us.us"

"for convolved.s1.r19$z.r124.preheader.us.us":    ; preds = %"for convolved.s1.r19$x.us.us"
  %t919.s.us.us = add nsw i32 %587, %1883
  %t924.s.us.us = add nsw i32 %587, %1882
  %t925.s.us.us = add nsw i32 %587, %1880
  %t926.s.us.us = add nsw i32 %587, %1878
  %t927.s.us.us = add nsw i32 %587, %1876
  %t928.s.us.us = add nsw i32 %587, %1874
  %1834 = mul nsw i32 %t919.s.us.us, %17
  %1835 = add i32 %t920.us.us, %1849
  %1836 = add i32 %t920.us.us, %1847
  %1837 = add i32 %t920.us.us, %1845
  %1838 = mul nsw i32 %t924.s.us.us, %17
  %1839 = mul nsw i32 %t925.s.us.us, %17
  %1840 = mul nsw i32 %t926.s.us.us, %17
  %1841 = mul nsw i32 %t927.s.us.us, %17
  %1842 = mul nsw i32 %t928.s.us.us, %17
  br label %"for convolved.s1.r19$z.r124.us.us"

"for convolved.s1.r19$y.preheader.us.us":         ; preds = %after_bb18.us.us
  %1843 = shl nsw i32 %output.s0.c.co.us.us, 2
  %1844 = or i32 %1843, 3
  %1845 = mul nsw i32 %1844, %8
  %1846 = or i32 %1843, 2
  %1847 = mul nsw i32 %1846, %8
  %1848 = or i32 %1843, 1
  %1849 = mul nsw i32 %1848, %8
  %1850 = mul nsw i32 %output.s0.c.co.us.us, %8
  br label %"for convolved.s1.r19$y.us.us"

"for sum_input.s1.r19$x.preheader.us.us":         ; preds = %"for sum_input.s1.r19$y.us.us"
  %1851 = mul nsw i32 %"sum_input.s1.r19$y.us.us", %dilation_y
  %1852 = add nsw i32 %1851, %424
  %1853 = mul nsw i32 %1852, %19
  %t880.us.us = add i32 %419, %1853
  br i1 %414, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"for output.s0.c.co.preheader.us.us":             ; preds = %"consume sum_input.us.us"
  %sum_input401.sroa.0.0.vec.extract605.us.us = extractelement <6 x i32> %sum_input401.sroa.0.13.us.us, i32 0
  %1854 = mul nsw i32 %sum_input401.sroa.0.0.vec.extract605.us.us, %361
  %1855 = insertelement <32 x i32> undef, i32 %1854, i32 0
  %1856 = shufflevector <32 x i32> %1855, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input401.sroa.0.4.vec.extract611.us.us = extractelement <6 x i32> %sum_input401.sroa.0.13.us.us, i32 1
  %1857 = mul nsw i32 %sum_input401.sroa.0.4.vec.extract611.us.us, %361
  %1858 = insertelement <32 x i32> undef, i32 %1857, i32 0
  %1859 = shufflevector <32 x i32> %1858, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input401.sroa.0.8.vec.extract617.us.us = extractelement <6 x i32> %sum_input401.sroa.0.13.us.us, i32 2
  %1860 = mul nsw i32 %sum_input401.sroa.0.8.vec.extract617.us.us, %361
  %1861 = insertelement <32 x i32> undef, i32 %1860, i32 0
  %1862 = shufflevector <32 x i32> %1861, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input401.sroa.0.12.vec.extract623.us.us = extractelement <6 x i32> %sum_input401.sroa.0.13.us.us, i32 3
  %1863 = mul nsw i32 %sum_input401.sroa.0.12.vec.extract623.us.us, %361
  %1864 = insertelement <32 x i32> undef, i32 %1863, i32 0
  %1865 = shufflevector <32 x i32> %1864, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input401.sroa.0.16.vec.extract629.us.us = extractelement <6 x i32> %sum_input401.sroa.0.13.us.us, i32 4
  %1866 = mul nsw i32 %sum_input401.sroa.0.16.vec.extract629.us.us, %361
  %1867 = insertelement <32 x i32> undef, i32 %1866, i32 0
  %1868 = shufflevector <32 x i32> %1867, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input401.sroa.0.20.vec.extract635.us.us = extractelement <6 x i32> %sum_input401.sroa.0.13.us.us, i32 5
  %1869 = mul nsw i32 %sum_input401.sroa.0.20.vec.extract635.us.us, %361
  %1870 = insertelement <32 x i32> undef, i32 %1869, i32 0
  %1871 = shufflevector <32 x i32> %1870, <32 x i32> undef, <32 x i32> zeroinitializer
  %1872 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %1873 = add nsw i32 %1872, 5
  %1874 = mul nsw i32 %1873, %stride_x
  %1875 = add nsw i32 %1872, 4
  %1876 = mul nsw i32 %1875, %stride_x
  %1877 = add nsw i32 %1872, 3
  %1878 = mul nsw i32 %1877, %stride_x
  %1879 = add nsw i32 %1872, 2
  %1880 = mul nsw i32 %1879, %stride_x
  %1881 = add nsw i32 %1872, 1
  %1882 = mul nsw i32 %1881, %stride_x
  %1883 = mul nsw i32 %1872, %stride_x
  %1884 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %1885 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %1886 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  %1887 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %1888 = mul nsw i32 %1872, %27
  %1889 = mul nsw i32 %1881, %27
  %1890 = mul nsw i32 %1879, %27
  %1891 = mul nsw i32 %1877, %27
  %1892 = mul nsw i32 %1875, %27
  %1893 = mul nsw i32 %1873, %27
  br label %"for output.s0.c.co.us.us"

"for sum_input.s1.r19$y.preheader.us.us":         ; preds = %then_bb10.us.us
  %1894 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %1895 = sub i32 %1894, %16
  br label %"for sum_input.s1.r19$y.us.us"

"for sum_input.s1.r19$y12.preheader.us.us":       ; preds = %next_bb11.us.us
  %1896 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %1897 = mul nsw i32 %1896, %stride_x
  br i1 %brmerge1331.demorgan, label %"for sum_input.s1.r19$y12.us.us.us.us", label %"consume sum_input.us.us", !prof !103

"end for output.s0.x.xo.loopexit.us.us":          ; preds = %"end for output.s0.c.co.us.us"
  %1898 = add nuw nsw i32 %output.s0.y.rebased.us.us, 1
  %.not458.us.us = icmp eq i32 %1898, %29
  br i1 %.not458.us.us, label %"end for output.s0.y.rebased.loopexit.us", label %"for output.s0.y.rebased.us.us"

"for sum_input.s1.r19$y12.us.us.us.us":           ; preds = %"for sum_input.s1.r19$y12.preheader.us.us", %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us"
  %sum_input401.sroa.0.8.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %"sum_input.s1.r19$y14.us.us.us.us" = phi i32 [ %2059, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %1899 = mul nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", %dilation_y
  %t882.s.us.us.us.us = add nsw i32 %1899, %424
  %1900 = mul nsw i32 %t882.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"for sum_input.s1.r19$x15.us.us.us.us.us":        ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y12.us.us.us.us"
  %sum_input401.sroa.0.9.us.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ %sum_input401.sroa.0.8.us.us.us.us, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %"sum_input.s1.r19$x17.us.us.us.us.us" = phi i32 [ %2058, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %1901 = mul nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", %dilation_x
  %t883.s.us.us.us.us.us = add nsw i32 %1901, %1897
  %t1223.us.us.us.us.us = mul nsw i32 %t883.s.us.us.us.us.us, %17
  %1902 = add i32 %t1223.us.us.us.us.us, %1900
  %t884.us.us.us.us.us = sub i32 %1902, %t852
  %1903 = add i32 %t884.us.us.us.us.us, %418
  %t860.us.us.us.us.us = add i32 %1902, %379
  %1904 = sub i32 %t860.us.us.us.us.us, %368
  %t885.us.us.us.us.us = sub i32 %1904, %369
  %1905 = add i32 %t885.us.us.us.us.us, %418
  %1906 = add i32 %1902, %377
  %1907 = sub i32 %1906, %411
  %t886.us.us.us.us.us = sub i32 %1907, %369
  %1908 = add i32 %t886.us.us.us.us.us, %418
  %1909 = add i32 %1902, %376
  %1910 = sub i32 %1909, %411
  %t887.us.us.us.us.us = sub i32 %1910, %369
  %1911 = add i32 %t887.us.us.us.us.us, %418
  %1912 = add i32 %1902, %375
  %1913 = sub i32 %1912, %411
  %t888.us.us.us.us.us = sub i32 %1913, %369
  %1914 = add i32 %t888.us.us.us.us.us, %418
  %1915 = add i32 %1902, %374
  %1916 = sub i32 %1915, %411
  %t889.us.us.us.us.us = sub i32 %1916, %369
  %1917 = add i32 %t889.us.us.us.us.us, %418
  br i1 %413, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"for sum_input.s1.r19$z.r124.us.us.us.us.us":     ; preds = %"for sum_input.s1.r19$x15.us.us.us.us.us", %"for sum_input.s1.r19$z.r124.us.us.us.us.us"
  %sum_input401.sroa.0.11.us.us.us.us.us = phi <6 x i32> [ %2010, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %sum_input401.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us" = phi i32 [ %2011, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %niter1556 = phi i32 [ %niter1556.nsub.1, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %unroll_iter1555, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %1918 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %1919 = add i32 %1903, %1918
  %1920 = getelementptr inbounds i8, i8* %13, i32 %1919
  %1921 = bitcast i8* %1920 to <4 x i8>*
  %1922 = load <4 x i8>, <4 x i8>* %1921, align 4, !tbaa !109
  %1923 = add i32 %1905, %1918
  %1924 = getelementptr inbounds i8, i8* %13, i32 %1923
  %1925 = bitcast i8* %1924 to <4 x i8>*
  %1926 = load <4 x i8>, <4 x i8>* %1925, align 4, !tbaa !109
  %1927 = add i32 %1908, %1918
  %1928 = getelementptr inbounds i8, i8* %13, i32 %1927
  %1929 = bitcast i8* %1928 to <4 x i8>*
  %1930 = load <4 x i8>, <4 x i8>* %1929, align 4, !tbaa !109
  %1931 = add i32 %1911, %1918
  %1932 = getelementptr inbounds i8, i8* %13, i32 %1931
  %1933 = bitcast i8* %1932 to <4 x i8>*
  %1934 = load <4 x i8>, <4 x i8>* %1933, align 4, !tbaa !109
  %1935 = add i32 %1914, %1918
  %1936 = getelementptr inbounds i8, i8* %13, i32 %1935
  %1937 = bitcast i8* %1936 to <4 x i8>*
  %1938 = load <4 x i8>, <4 x i8>* %1937, align 4, !tbaa !109
  %1939 = add i32 %1917, %1918
  %1940 = getelementptr inbounds i8, i8* %13, i32 %1939
  %1941 = bitcast i8* %1940 to <4 x i8>*
  %1942 = load <4 x i8>, <4 x i8>* %1941, align 4, !tbaa !109
  %1943 = shufflevector <4 x i8> %1922, <4 x i8> %1926, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1944 = shufflevector <4 x i8> %1930, <4 x i8> %1934, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1945 = shufflevector <8 x i8> %1943, <8 x i8> %1944, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1946 = shufflevector <4 x i8> %1938, <4 x i8> %1942, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1947 = shufflevector <16 x i8> %1945, <16 x i8> %1946, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1225.us.us.us.us.us = zext <24 x i8> %1947 to <24 x i16>
  %1948 = shufflevector <24 x i16> %t1225.us.us.us.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1949 = bitcast <64 x i16> %1948 to <32 x i32>
  %1950 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1949)
  %1951 = bitcast <32 x i32> %1950 to <64 x i16>
  %1952 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1949)
  %1953 = bitcast <32 x i32> %1952 to <64 x i16>
  %1954 = add <64 x i16> %1953, %1951
  %1955 = shufflevector <64 x i16> %1954, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1224.us.us.us.us.us = zext <12 x i16> %1955 to <12 x i32>
  %1956 = shufflevector <12 x i32> %t1224.us.us.us.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1957 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1956, i32 -4)
  %1958 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1957)
  %1959 = shufflevector <32 x i32> %1958, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1960 = add nsw <6 x i32> %1959, %sum_input401.sroa.0.11.us.us.us.us.us
  %1961 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1957)
  %1962 = shufflevector <32 x i32> %1961, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1963 = add nsw <6 x i32> %1960, %1962
  %1964 = shl i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %1965 = or i32 %1964, 4
  %1966 = add i32 %1903, %1965
  %1967 = getelementptr inbounds i8, i8* %13, i32 %1966
  %1968 = bitcast i8* %1967 to <4 x i8>*
  %1969 = load <4 x i8>, <4 x i8>* %1968, align 4, !tbaa !109
  %1970 = add i32 %1905, %1965
  %1971 = getelementptr inbounds i8, i8* %13, i32 %1970
  %1972 = bitcast i8* %1971 to <4 x i8>*
  %1973 = load <4 x i8>, <4 x i8>* %1972, align 4, !tbaa !109
  %1974 = add i32 %1908, %1965
  %1975 = getelementptr inbounds i8, i8* %13, i32 %1974
  %1976 = bitcast i8* %1975 to <4 x i8>*
  %1977 = load <4 x i8>, <4 x i8>* %1976, align 4, !tbaa !109
  %1978 = add i32 %1911, %1965
  %1979 = getelementptr inbounds i8, i8* %13, i32 %1978
  %1980 = bitcast i8* %1979 to <4 x i8>*
  %1981 = load <4 x i8>, <4 x i8>* %1980, align 4, !tbaa !109
  %1982 = add i32 %1914, %1965
  %1983 = getelementptr inbounds i8, i8* %13, i32 %1982
  %1984 = bitcast i8* %1983 to <4 x i8>*
  %1985 = load <4 x i8>, <4 x i8>* %1984, align 4, !tbaa !109
  %1986 = add i32 %1917, %1965
  %1987 = getelementptr inbounds i8, i8* %13, i32 %1986
  %1988 = bitcast i8* %1987 to <4 x i8>*
  %1989 = load <4 x i8>, <4 x i8>* %1988, align 4, !tbaa !109
  %1990 = shufflevector <4 x i8> %1969, <4 x i8> %1973, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1991 = shufflevector <4 x i8> %1977, <4 x i8> %1981, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1992 = shufflevector <8 x i8> %1990, <8 x i8> %1991, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1993 = shufflevector <4 x i8> %1985, <4 x i8> %1989, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1994 = shufflevector <16 x i8> %1992, <16 x i8> %1993, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1225.us.us.us.us.us.1 = zext <24 x i8> %1994 to <24 x i16>
  %1995 = shufflevector <24 x i16> %t1225.us.us.us.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1996 = bitcast <64 x i16> %1995 to <32 x i32>
  %1997 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1996)
  %1998 = bitcast <32 x i32> %1997 to <64 x i16>
  %1999 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1996)
  %2000 = bitcast <32 x i32> %1999 to <64 x i16>
  %2001 = add <64 x i16> %2000, %1998
  %2002 = shufflevector <64 x i16> %2001, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1224.us.us.us.us.us.1 = zext <12 x i16> %2002 to <12 x i32>
  %2003 = shufflevector <12 x i32> %t1224.us.us.us.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2004 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2003, i32 -4)
  %2005 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2004)
  %2006 = shufflevector <32 x i32> %2005, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %2007 = add nsw <6 x i32> %2006, %1963
  %2008 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2004)
  %2009 = shufflevector <32 x i32> %2008, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %2010 = add nsw <6 x i32> %2007, %2009
  %2011 = add nuw nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %niter1556.nsub.1 = add i32 %niter1556, -2
  %niter1556.ncmp.1 = icmp eq i32 %niter1556.nsub.1, 0
  br i1 %niter1556.ncmp.1, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124.us.us.us.us.us", %"for sum_input.s1.r19$x15.us.us.us.us.us"
  %.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %2010, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %sum_input401.sroa.0.11.us.us.us.us.us.unr = phi <6 x i32> [ %sum_input401.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %2010, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %2011, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  br i1 %lcmp.mod1554.not, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa"
  %2012 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr", 2
  %2013 = add i32 %1903, %2012
  %2014 = getelementptr inbounds i8, i8* %13, i32 %2013
  %2015 = bitcast i8* %2014 to <4 x i8>*
  %2016 = load <4 x i8>, <4 x i8>* %2015, align 4, !tbaa !109
  %2017 = add i32 %1905, %2012
  %2018 = getelementptr inbounds i8, i8* %13, i32 %2017
  %2019 = bitcast i8* %2018 to <4 x i8>*
  %2020 = load <4 x i8>, <4 x i8>* %2019, align 4, !tbaa !109
  %2021 = add i32 %1908, %2012
  %2022 = getelementptr inbounds i8, i8* %13, i32 %2021
  %2023 = bitcast i8* %2022 to <4 x i8>*
  %2024 = load <4 x i8>, <4 x i8>* %2023, align 4, !tbaa !109
  %2025 = add i32 %1911, %2012
  %2026 = getelementptr inbounds i8, i8* %13, i32 %2025
  %2027 = bitcast i8* %2026 to <4 x i8>*
  %2028 = load <4 x i8>, <4 x i8>* %2027, align 4, !tbaa !109
  %2029 = add i32 %1914, %2012
  %2030 = getelementptr inbounds i8, i8* %13, i32 %2029
  %2031 = bitcast i8* %2030 to <4 x i8>*
  %2032 = load <4 x i8>, <4 x i8>* %2031, align 4, !tbaa !109
  %2033 = add i32 %1917, %2012
  %2034 = getelementptr inbounds i8, i8* %13, i32 %2033
  %2035 = bitcast i8* %2034 to <4 x i8>*
  %2036 = load <4 x i8>, <4 x i8>* %2035, align 4, !tbaa !109
  %2037 = shufflevector <4 x i8> %2016, <4 x i8> %2020, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2038 = shufflevector <4 x i8> %2024, <4 x i8> %2028, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2039 = shufflevector <8 x i8> %2037, <8 x i8> %2038, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2040 = shufflevector <4 x i8> %2032, <4 x i8> %2036, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2041 = shufflevector <16 x i8> %2039, <16 x i8> %2040, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1225.us.us.us.us.us.epil = zext <24 x i8> %2041 to <24 x i16>
  %2042 = shufflevector <24 x i16> %t1225.us.us.us.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2043 = bitcast <64 x i16> %2042 to <32 x i32>
  %2044 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2043)
  %2045 = bitcast <32 x i32> %2044 to <64 x i16>
  %2046 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2043)
  %2047 = bitcast <32 x i32> %2046 to <64 x i16>
  %2048 = add <64 x i16> %2047, %2045
  %2049 = shufflevector <64 x i16> %2048, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1224.us.us.us.us.us.epil = zext <12 x i16> %2049 to <12 x i32>
  %2050 = shufflevector <12 x i32> %t1224.us.us.us.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2051 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2050, i32 -4)
  %2052 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2051)
  %2053 = shufflevector <32 x i32> %2052, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %2054 = add nsw <6 x i32> %2053, %sum_input401.sroa.0.11.us.us.us.us.us.unr
  %2055 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2051)
  %2056 = shufflevector <32 x i32> %2055, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %2057 = add nsw <6 x i32> %2054, %2056
  br label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil"
  %.lcssa = phi <6 x i32> [ %.lcssa.ph, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa" ], [ %2057, %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil" ]
  %2058 = add nuw nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", 1
  %.not465.us.us.us.us.us = icmp eq i32 %2058, %9
  br i1 %.not465.us.us.us.us.us, label %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"
  %2059 = add nuw nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", 1
  %.not464.us.us.us.us = icmp eq i32 %2059, %11
  br i1 %.not464.us.us.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y12.us.us.us.us"

next_bb5:                                         ; preds = %"consume offset_c"
  br i1 %92, label %then_bb37, label %next_bb38

then_bb37:                                        ; preds = %next_bb5
  %2060 = mul nsw i32 %19, %18
  %2061 = mul nsw i32 %22, %20
  %2062 = mul nsw i32 %17, %16
  %2063 = add i32 %2061, %2060
  %t941 = add i32 %2063, %2062
  %2064 = icmp sgt i32 %21, 0
  br i1 %2064, label %"for output.s0.b.rebased39.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased39.preheader":            ; preds = %then_bb37
  %2065 = mul nsw i32 %17, %stride_x
  %2066 = mul nsw i32 %2065, 7
  %2067 = mul nsw i32 %2065, 6
  %2068 = mul nsw i32 %2065, 5
  %2069 = shl nsw i32 %2065, 2
  %2070 = mul nsw i32 %2065, 3
  %2071 = shl nsw i32 %2065, 1
  %2072 = sub nsw i32 %stride_x, %16
  %2073 = mul nsw i32 %2072, %17
  %2074 = icmp sgt i32 %29, 0
  %.neg806 = mul i32 %30, %28
  %.neg807 = mul i32 %27, %25
  %.neg808 = mul i32 %31, %20
  %reass.add810 = add i32 %.neg806, %.neg807
  %reass.add811 = add i32 %reass.add810, %.neg808
  %2075 = add nuw nsw i32 %26, 7
  %2076 = ashr i32 %2075, 3
  %b39 = add nsw i32 %26, -8
  %2077 = icmp sgt i32 %11, 0
  %2078 = icmp sgt i32 %9, 0
  %2079 = icmp sgt i32 %7, 0
  %2080 = ashr i32 %4, 6
  %2081 = icmp sgt i32 %4, 63
  %2082 = insertelement <64 x i32> undef, i32 %output_multiplier, i32 0
  %2083 = shufflevector <64 x i32> %2082, <64 x i32> undef, <64 x i32> zeroinitializer
  %2084 = sext <64 x i32> %2083 to <64 x i64>
  %2085 = icmp sgt i32 %output_shift, 0
  %2086 = select i1 %2085, <64 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <64 x i32> zeroinitializer
  %2087 = add nsw i32 %output_shift, -1
  %2088 = zext i8 %output_zero to i16
  %2089 = insertelement <64 x i16> undef, i16 %2088, i32 0
  %2090 = shufflevector <64 x i16> %2089, <64 x i16> undef, <64 x i32> zeroinitializer
  %2091 = bitcast <64 x i16> %2090 to <32 x i32>
  %2092 = insertelement <64 x i8> undef, i8 %output_max, i32 0
  %2093 = shufflevector <64 x i8> %2092, <64 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2094 = bitcast <128 x i8> %2093 to <32 x i32>
  %2095 = insertelement <64 x i8> undef, i8 %output_min, i32 0
  %2096 = shufflevector <64 x i8> %2095, <64 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2097 = bitcast <128 x i8> %2096 to <32 x i32>
  br i1 %2074, label %"for output.s0.b.rebased39.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased39.us.preheader":         ; preds = %"for output.s0.b.rebased39.preheader"
  %2098 = add i32 %2062, %2060
  %2099 = add i32 %9, -1
  %brmerge1334.demorgan = and i1 %2078, %2079
  %xtraiter1543 = and i32 %7, 1
  %2100 = icmp eq i32 %7, 1
  %unroll_iter1545 = and i32 %7, -2
  %lcmp.mod1544.not = icmp eq i32 %xtraiter1543, 0
  %xtraiter1547 = and i32 %9, 3
  %2101 = icmp ult i32 %2099, 3
  %unroll_iter1551 = and i32 %9, -4
  %lcmp.mod1549.not = icmp eq i32 %xtraiter1547, 0
  br label %"for output.s0.b.rebased39.us"

"for output.s0.b.rebased39.us":                   ; preds = %"for output.s0.b.rebased39.us.preheader", %"end for output.s0.y.rebased43.loopexit.us"
  %convolved400.sroa.0.7.us = phi <32 x i32> [ %.us-phi1122.us, %"end for output.s0.y.rebased43.loopexit.us" ], [ undef, %"for output.s0.b.rebased39.us.preheader" ]
  %output.s0.b.rebased41.us = phi i32 [ %2108, %"end for output.s0.y.rebased43.loopexit.us" ], [ 0, %"for output.s0.b.rebased39.us.preheader" ]
  %2102 = add nsw i32 %output.s0.b.rebased41.us, %20
  %2103 = mul nsw i32 %2102, %31
  %2104 = sub i32 %2103, %reass.add811
  %2105 = mul nsw i32 %2102, %22
  %2106 = sub i32 %2105, %2063
  %2107 = sub nsw i32 %2105, %t941
  br i1 %98, label %"for output.s0.y.rebased42.us.us", label %"end for output.s0.y.rebased43.loopexit.us", !prof !96

"end for output.s0.y.rebased43.loopexit.us":      ; preds = %"end for output.s0.x.xo46.loopexit.us.us", %"for output.s0.b.rebased39.us"
  %.us-phi1122.us = phi <32 x i32> [ %convolved400.sroa.0.7.us, %"for output.s0.b.rebased39.us" ], [ %convolved400.sroa.0.20.us.us, %"end for output.s0.x.xo46.loopexit.us.us" ]
  %2108 = add nuw nsw i32 %output.s0.b.rebased41.us, 1
  %.not445.us = icmp eq i32 %2108, %21
  br i1 %.not445.us, label %after_bb3, label %"for output.s0.b.rebased39.us"

"for output.s0.y.rebased42.us.us":                ; preds = %"for output.s0.b.rebased39.us", %"end for output.s0.x.xo46.loopexit.us.us"
  %convolved400.sroa.0.8.us.us = phi <32 x i32> [ %convolved400.sroa.0.20.us.us, %"end for output.s0.x.xo46.loopexit.us.us" ], [ %convolved400.sroa.0.7.us, %"for output.s0.b.rebased39.us" ]
  %output.s0.y.rebased44.us.us = phi i32 [ %2643, %"end for output.s0.x.xo46.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased39.us" ]
  %2109 = add nsw i32 %output.s0.y.rebased44.us.us, %28
  %2110 = mul nsw i32 %2109, %30
  %t970.us.us = add i32 %2104, %2110
  %2111 = mul nsw i32 %2109, %stride_y
  br label %"for output.s0.x.xo45.us.us"

"for output.s0.x.xo45.us.us":                     ; preds = %"end for output.s0.c.co74.us.us", %"for output.s0.y.rebased42.us.us"
  %convolved400.sroa.0.10.us.us = phi <32 x i32> [ %convolved400.sroa.0.20.us.us, %"end for output.s0.c.co74.us.us" ], [ %convolved400.sroa.0.8.us.us, %"for output.s0.y.rebased42.us.us" ]
  %output.s0.x.xo47.us.us = phi i32 [ %2579, %"end for output.s0.c.co74.us.us" ], [ 0, %"for output.s0.y.rebased42.us.us" ]
  %a37.us.us = shl nsw i32 %output.s0.x.xo47.us.us, 3
  %2112 = icmp slt i32 %a37.us.us, %b39
  %output.s0.x.x.base.s48.us.us = select i1 %2112, i32 %a37.us.us, i32 %b39
  br i1 %t843.not, label %"consume sum_input72.us.us", label %then_bb52.us.us

then_bb52.us.us:                                  ; preds = %"for output.s0.x.xo45.us.us"
  %convolved400.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %convolved400.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb55.us.us, label %next_bb56.us.us

next_bb56.us.us:                                  ; preds = %then_bb52.us.us
  br i1 %2077, label %"for sum_input.s1.r19$y63.preheader.us.us", label %"consume sum_input72.us.us", !prof !96

then_bb55.us.us:                                  ; preds = %then_bb52.us.us
  br i1 %2077, label %"for sum_input.s1.r19$y57.preheader.us.us", label %"consume sum_input72.us.us", !prof !96

"for sum_input.s1.r19$y57.us.us":                 ; preds = %"for sum_input.s1.r19$y57.preheader.us.us", %"end for sum_input.s1.r19$x61.us.us"
  %convolved400.sroa.0.12.us.us = phi <32 x i32> [ %convolved400.sroa.0.14.us.us, %"end for sum_input.s1.r19$x61.us.us" ], [ %convolved400.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y57.preheader.us.us" ]
  %"sum_input.s1.r19$y59.us.us" = phi i32 [ %2213, %"end for sum_input.s1.r19$x61.us.us" ], [ 0, %"for sum_input.s1.r19$y57.preheader.us.us" ]
  br i1 %2078, label %"for sum_input.s1.r19$x60.preheader.us.us", label %"end for sum_input.s1.r19$x61.us.us", !prof !96

"for sum_input.s1.r19$x60.us.us":                 ; preds = %"for sum_input.s1.r19$x60.preheader.us.us", %"for sum_input.s1.r19$x60.us.us"
  %convolved400.sroa.0.13.us.us = phi <32 x i32> [ %convolved400.sroa.0.0.vecblend650.us.us.3, %"for sum_input.s1.r19$x60.us.us" ], [ %convolved400.sroa.0.12.us.us, %"for sum_input.s1.r19$x60.preheader.us.us" ]
  %"sum_input.s1.r19$x62.us.us" = phi i32 [ %2192, %"for sum_input.s1.r19$x60.us.us" ], [ 0, %"for sum_input.s1.r19$x60.preheader.us.us" ]
  %niter1552 = phi i32 [ %niter1552.nsub.3, %"for sum_input.s1.r19$x60.us.us" ], [ %unroll_iter1551, %"for sum_input.s1.r19$x60.preheader.us.us" ]
  %2113 = mul nsw i32 %"sum_input.s1.r19$x62.us.us", %dilation_x
  %reass.add816.us.us = add i32 %2640, %2113
  %reass.mul817.us.us = shl i32 %reass.add816.us.us, 2
  %2114 = add i32 %t973.us.us, %reass.mul817.us.us
  %2115 = getelementptr inbounds i8, i8* %13, i32 %2114
  %2116 = bitcast i8* %2115 to <32 x i8>*
  %2117 = load <32 x i8>, <32 x i8>* %2116, align 4, !tbaa !109
  %t1275.us.us = zext <32 x i8> %2117 to <32 x i16>
  %2118 = shufflevector <32 x i16> %t1275.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2119 = bitcast <64 x i16> %2118 to <32 x i32>
  %2120 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2119)
  %2121 = bitcast <32 x i32> %2120 to <64 x i16>
  %2122 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2119)
  %2123 = bitcast <32 x i32> %2122 to <64 x i16>
  %2124 = add <64 x i16> %2123, %2121
  %2125 = shufflevector <64 x i16> %2124, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1274.us.us = zext <16 x i16> %2125 to <16 x i32>
  %2126 = shufflevector <16 x i32> %t1274.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2127 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2126, i32 -4)
  %2128 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2127)
  %2129 = add nsw <32 x i32> %2128, %convolved400.sroa.0.13.us.us
  %2130 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2127)
  %2131 = add nsw <32 x i32> %2129, %2130
  %convolved400.sroa.0.0.vecblend650.us.us = shufflevector <32 x i32> %2131, <32 x i32> %convolved400.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2132 = or i32 %"sum_input.s1.r19$x62.us.us", 1
  %2133 = mul nsw i32 %2132, %dilation_x
  %reass.add816.us.us.1 = add i32 %2640, %2133
  %reass.mul817.us.us.1 = shl i32 %reass.add816.us.us.1, 2
  %2134 = add i32 %t973.us.us, %reass.mul817.us.us.1
  %2135 = getelementptr inbounds i8, i8* %13, i32 %2134
  %2136 = bitcast i8* %2135 to <32 x i8>*
  %2137 = load <32 x i8>, <32 x i8>* %2136, align 4, !tbaa !109
  %t1275.us.us.1 = zext <32 x i8> %2137 to <32 x i16>
  %2138 = shufflevector <32 x i16> %t1275.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2139 = bitcast <64 x i16> %2138 to <32 x i32>
  %2140 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2139)
  %2141 = bitcast <32 x i32> %2140 to <64 x i16>
  %2142 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2139)
  %2143 = bitcast <32 x i32> %2142 to <64 x i16>
  %2144 = add <64 x i16> %2143, %2141
  %2145 = shufflevector <64 x i16> %2144, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1274.us.us.1 = zext <16 x i16> %2145 to <16 x i32>
  %2146 = shufflevector <16 x i32> %t1274.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2147 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2146, i32 -4)
  %2148 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2147)
  %2149 = add nsw <32 x i32> %2148, %convolved400.sroa.0.0.vecblend650.us.us
  %2150 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2147)
  %2151 = add nsw <32 x i32> %2149, %2150
  %convolved400.sroa.0.0.vecblend650.us.us.1 = shufflevector <32 x i32> %2151, <32 x i32> %convolved400.sroa.0.0.vecblend650.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2152 = or i32 %"sum_input.s1.r19$x62.us.us", 2
  %2153 = mul nsw i32 %2152, %dilation_x
  %reass.add816.us.us.2 = add i32 %2640, %2153
  %reass.mul817.us.us.2 = shl i32 %reass.add816.us.us.2, 2
  %2154 = add i32 %t973.us.us, %reass.mul817.us.us.2
  %2155 = getelementptr inbounds i8, i8* %13, i32 %2154
  %2156 = bitcast i8* %2155 to <32 x i8>*
  %2157 = load <32 x i8>, <32 x i8>* %2156, align 4, !tbaa !109
  %t1275.us.us.2 = zext <32 x i8> %2157 to <32 x i16>
  %2158 = shufflevector <32 x i16> %t1275.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2159 = bitcast <64 x i16> %2158 to <32 x i32>
  %2160 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2159)
  %2161 = bitcast <32 x i32> %2160 to <64 x i16>
  %2162 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2159)
  %2163 = bitcast <32 x i32> %2162 to <64 x i16>
  %2164 = add <64 x i16> %2163, %2161
  %2165 = shufflevector <64 x i16> %2164, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1274.us.us.2 = zext <16 x i16> %2165 to <16 x i32>
  %2166 = shufflevector <16 x i32> %t1274.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2167 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2166, i32 -4)
  %2168 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2167)
  %2169 = add nsw <32 x i32> %2168, %convolved400.sroa.0.0.vecblend650.us.us.1
  %2170 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2167)
  %2171 = add nsw <32 x i32> %2169, %2170
  %convolved400.sroa.0.0.vecblend650.us.us.2 = shufflevector <32 x i32> %2171, <32 x i32> %convolved400.sroa.0.0.vecblend650.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2172 = or i32 %"sum_input.s1.r19$x62.us.us", 3
  %2173 = mul nsw i32 %2172, %dilation_x
  %reass.add816.us.us.3 = add i32 %2640, %2173
  %reass.mul817.us.us.3 = shl i32 %reass.add816.us.us.3, 2
  %2174 = add i32 %t973.us.us, %reass.mul817.us.us.3
  %2175 = getelementptr inbounds i8, i8* %13, i32 %2174
  %2176 = bitcast i8* %2175 to <32 x i8>*
  %2177 = load <32 x i8>, <32 x i8>* %2176, align 4, !tbaa !109
  %t1275.us.us.3 = zext <32 x i8> %2177 to <32 x i16>
  %2178 = shufflevector <32 x i16> %t1275.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2179 = bitcast <64 x i16> %2178 to <32 x i32>
  %2180 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2179)
  %2181 = bitcast <32 x i32> %2180 to <64 x i16>
  %2182 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2179)
  %2183 = bitcast <32 x i32> %2182 to <64 x i16>
  %2184 = add <64 x i16> %2183, %2181
  %2185 = shufflevector <64 x i16> %2184, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1274.us.us.3 = zext <16 x i16> %2185 to <16 x i32>
  %2186 = shufflevector <16 x i32> %t1274.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2187 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2186, i32 -4)
  %2188 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2187)
  %2189 = add nsw <32 x i32> %2188, %convolved400.sroa.0.0.vecblend650.us.us.2
  %2190 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2187)
  %2191 = add nsw <32 x i32> %2189, %2190
  %convolved400.sroa.0.0.vecblend650.us.us.3 = shufflevector <32 x i32> %2191, <32 x i32> %convolved400.sroa.0.0.vecblend650.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2192 = add nuw nsw i32 %"sum_input.s1.r19$x62.us.us", 4
  %niter1552.nsub.3 = add i32 %niter1552, -4
  %niter1552.ncmp.3 = icmp eq i32 %niter1552.nsub.3, 0
  br i1 %niter1552.ncmp.3, label %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x60.us.us"

"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x60.us.us", %"for sum_input.s1.r19$x60.preheader.us.us"
  %convolved400.sroa.0.0.vecblend650.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x60.preheader.us.us" ], [ %convolved400.sroa.0.0.vecblend650.us.us.3, %"for sum_input.s1.r19$x60.us.us" ]
  %convolved400.sroa.0.13.us.us.unr = phi <32 x i32> [ %convolved400.sroa.0.12.us.us, %"for sum_input.s1.r19$x60.preheader.us.us" ], [ %convolved400.sroa.0.0.vecblend650.us.us.3, %"for sum_input.s1.r19$x60.us.us" ]
  %"sum_input.s1.r19$x62.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x60.preheader.us.us" ], [ %2192, %"for sum_input.s1.r19$x60.us.us" ]
  br i1 %lcmp.mod1549.not, label %"end for sum_input.s1.r19$x61.us.us", label %"for sum_input.s1.r19$x60.us.us.epil"

"for sum_input.s1.r19$x60.us.us.epil":            ; preds = %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x60.us.us.epil"
  %convolved400.sroa.0.13.us.us.epil = phi <32 x i32> [ %convolved400.sroa.0.0.vecblend650.us.us.epil, %"for sum_input.s1.r19$x60.us.us.epil" ], [ %convolved400.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x62.us.us.epil" = phi i32 [ %2212, %"for sum_input.s1.r19$x60.us.us.epil" ], [ %"sum_input.s1.r19$x62.us.us.unr", %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa" ]
  %epil.iter1548 = phi i32 [ %epil.iter1548.sub, %"for sum_input.s1.r19$x60.us.us.epil" ], [ %xtraiter1547, %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa" ]
  %2193 = mul nsw i32 %"sum_input.s1.r19$x62.us.us.epil", %dilation_x
  %reass.add816.us.us.epil = add i32 %2640, %2193
  %reass.mul817.us.us.epil = shl i32 %reass.add816.us.us.epil, 2
  %2194 = add i32 %t973.us.us, %reass.mul817.us.us.epil
  %2195 = getelementptr inbounds i8, i8* %13, i32 %2194
  %2196 = bitcast i8* %2195 to <32 x i8>*
  %2197 = load <32 x i8>, <32 x i8>* %2196, align 4, !tbaa !109
  %t1275.us.us.epil = zext <32 x i8> %2197 to <32 x i16>
  %2198 = shufflevector <32 x i16> %t1275.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2199 = bitcast <64 x i16> %2198 to <32 x i32>
  %2200 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2199)
  %2201 = bitcast <32 x i32> %2200 to <64 x i16>
  %2202 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2199)
  %2203 = bitcast <32 x i32> %2202 to <64 x i16>
  %2204 = add <64 x i16> %2203, %2201
  %2205 = shufflevector <64 x i16> %2204, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1274.us.us.epil = zext <16 x i16> %2205 to <16 x i32>
  %2206 = shufflevector <16 x i32> %t1274.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2207 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2206, i32 -4)
  %2208 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2207)
  %2209 = add nsw <32 x i32> %2208, %convolved400.sroa.0.13.us.us.epil
  %2210 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2207)
  %2211 = add nsw <32 x i32> %2209, %2210
  %convolved400.sroa.0.0.vecblend650.us.us.epil = shufflevector <32 x i32> %2211, <32 x i32> %convolved400.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2212 = add nuw nsw i32 %"sum_input.s1.r19$x62.us.us.epil", 1
  %epil.iter1548.sub = add i32 %epil.iter1548, -1
  %epil.iter1548.cmp.not = icmp eq i32 %epil.iter1548.sub, 0
  br i1 %epil.iter1548.cmp.not, label %"end for sum_input.s1.r19$x61.us.us", label %"for sum_input.s1.r19$x60.us.us.epil", !llvm.loop !114

"end for sum_input.s1.r19$x61.us.us":             ; preds = %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x60.us.us.epil", %"for sum_input.s1.r19$y57.us.us"
  %convolved400.sroa.0.14.us.us = phi <32 x i32> [ %convolved400.sroa.0.12.us.us, %"for sum_input.s1.r19$y57.us.us" ], [ %convolved400.sroa.0.0.vecblend650.us.us.lcssa.ph, %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa" ], [ %convolved400.sroa.0.0.vecblend650.us.us.epil, %"for sum_input.s1.r19$x60.us.us.epil" ]
  %2213 = add nuw nsw i32 %"sum_input.s1.r19$y59.us.us", 1
  %.not455.us.us = icmp eq i32 %2213, %11
  br i1 %.not455.us.us, label %"consume sum_input72.us.us", label %"for sum_input.s1.r19$y57.us.us"

"consume sum_input72.us.us":                      ; preds = %"end for sum_input.s1.r19$x67.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x61.us.us", %"for sum_input.s1.r19$y63.preheader.us.us", %then_bb55.us.us, %next_bb56.us.us, %"for output.s0.x.xo45.us.us"
  %convolved400.sroa.0.20.us.us = phi <32 x i32> [ %convolved400.sroa.0.10.us.us, %"for output.s0.x.xo45.us.us" ], [ %convolved400.sroa.0.0.vecblend.us.us, %then_bb55.us.us ], [ %convolved400.sroa.0.0.vecblend.us.us, %next_bb56.us.us ], [ %convolved400.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y63.preheader.us.us" ], [ %convolved400.sroa.0.14.us.us, %"end for sum_input.s1.r19$x61.us.us" ], [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x67.loopexit.split.us.us.us.us.us" ]
  br i1 %2081, label %"for output.s0.c.co73.preheader.us.us", label %"end for output.s0.c.co74.us.us", !prof !96

"for output.s0.c.co73.us.us":                     ; preds = %"for output.s0.c.co73.preheader.us.us", %"consume convolved89.us.us"
  %output.s0.c.co75.us.us = phi i32 [ %2578, %"consume convolved89.us.us" ], [ 0, %"for output.s0.c.co73.preheader.us.us" ]
  %2214 = shl nsw i32 %output.s0.c.co75.us.us, 6
  %2215 = getelementptr inbounds i32, i32* %offset_c, i32 %2214
  %2216 = bitcast i32* %2215 to <32 x i32>*
  %2217 = load <32 x i32>, <32 x i32>* %2216, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb78.us.us, label %next_bb79.us.us

next_bb79.us.us:                                  ; preds = %"for output.s0.c.co73.us.us"
  %2218 = sub nsw <32 x i32> %2217, %2589
  %2219 = sub nsw <32 x i32> %2217, %2592
  %2220 = sub nsw <32 x i32> %2217, %2595
  %2221 = sub nsw <32 x i32> %2217, %2598
  %2222 = sub nsw <32 x i32> %2217, %2601
  %2223 = sub nsw <32 x i32> %2217, %2604
  %2224 = sub nsw <32 x i32> %2217, %2607
  %2225 = sub nsw <32 x i32> %2217, %2610
  %2226 = getelementptr inbounds i32, i32* %2215, i32 32
  %2227 = bitcast i32* %2226 to <32 x i32>*
  %2228 = load <32 x i32>, <32 x i32>* %2227, align 128, !tbaa !104
  %2229 = sub nsw <32 x i32> %2228, %2589
  %2230 = sub nsw <32 x i32> %2228, %2592
  %2231 = sub nsw <32 x i32> %2228, %2595
  %2232 = sub nsw <32 x i32> %2228, %2598
  %2233 = sub nsw <32 x i32> %2228, %2601
  %2234 = sub nsw <32 x i32> %2228, %2604
  %2235 = sub nsw <32 x i32> %2228, %2607
  %2236 = sub nsw <32 x i32> %2228, %2610
  br label %after_bb77.us.us

then_bb78.us.us:                                  ; preds = %"for output.s0.c.co73.us.us"
  %2237 = getelementptr inbounds i32, i32* %2215, i32 32
  %2238 = bitcast i32* %2237 to <32 x i32>*
  %2239 = load <32 x i32>, <32 x i32>* %2238, align 128, !tbaa !104
  br label %after_bb77.us.us

after_bb77.us.us:                                 ; preds = %then_bb78.us.us, %next_bb79.us.us
  %sum_input254399.sroa.95.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2236, %next_bb79.us.us ]
  %sum_input254399.sroa.90.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2225, %next_bb79.us.us ]
  %sum_input254399.sroa.85.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2235, %next_bb79.us.us ]
  %sum_input254399.sroa.80.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2224, %next_bb79.us.us ]
  %sum_input254399.sroa.75.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2234, %next_bb79.us.us ]
  %sum_input254399.sroa.70.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2223, %next_bb79.us.us ]
  %sum_input254399.sroa.65.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2233, %next_bb79.us.us ]
  %sum_input254399.sroa.60.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2222, %next_bb79.us.us ]
  %sum_input254399.sroa.55.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2232, %next_bb79.us.us ]
  %sum_input254399.sroa.50.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2221, %next_bb79.us.us ]
  %sum_input254399.sroa.45.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2231, %next_bb79.us.us ]
  %sum_input254399.sroa.40.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2220, %next_bb79.us.us ]
  %sum_input254399.sroa.35.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2230, %next_bb79.us.us ]
  %sum_input254399.sroa.30.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2219, %next_bb79.us.us ]
  %sum_input254399.sroa.25.0.us.us = phi <32 x i32> [ %2239, %then_bb78.us.us ], [ %2229, %next_bb79.us.us ]
  %sum_input254399.sroa.0.0.us.us = phi <32 x i32> [ %2217, %then_bb78.us.us ], [ %2218, %next_bb79.us.us ]
  br i1 %2077, label %"for convolved.s1.r19$y80.preheader.us.us", label %"consume convolved89.us.us", !prof !96

"consume convolved89.us.us":                      ; preds = %"end for convolved.s1.r19$x84.loopexit.us.us.us", %"for convolved.s1.r19$y80.preheader.us.us", %after_bb77.us.us
  %sum_input254399.sroa.95.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.95.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.95.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1069.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.90.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.90.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.90.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1070.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.85.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.85.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.85.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1071.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.80.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.80.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.80.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1072.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.75.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.75.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.75.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1073.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.70.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.70.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.70.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1074.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.65.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.65.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.65.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1075.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.60.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.60.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.60.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1076.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.55.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.55.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.55.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1077.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.50.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.50.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.50.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1078.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.45.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.45.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.45.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1079.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.40.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.40.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.40.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1080.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.35.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.35.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.35.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1081.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.30.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.30.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.30.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1082.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.25.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.25.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.25.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1083.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %sum_input254399.sroa.0.6.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.us.us, %after_bb77.us.us ], [ %sum_input254399.sroa.0.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ], [ %.us-phi1084.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ]
  %2240 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.25.6.us.us, <32 x i32> %sum_input254399.sroa.0.6.us.us)
  %2241 = sext <64 x i32> %2240 to <64 x i64>
  %2242 = mul nsw <64 x i64> %2241, %2084
  %2243 = ashr <64 x i64> %2242, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2244 = add nsw <64 x i64> %2243, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a39.us.us = ashr <64 x i64> %2244, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2245 = icmp slt <64 x i64> %a39.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a38.us.us = select <64 x i1> %2245, <64 x i64> %a39.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2246 = icmp sgt <64 x i64> %a38.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2247 = select <64 x i1> %2246, <64 x i64> %a38.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2248 = trunc <64 x i64> %2247 to <64 x i32>
  %2249 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2248)
  %2250 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2249, i32 %output_shift) #11
  %2251 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2248)
  %2252 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2251, i32 %output_shift) #11
  %2253 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2252, <32 x i32> %2250)
  %2254 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2249, i32 %2087) #11
  %2255 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2251, i32 %2087) #11
  %2256 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2255, <32 x i32> %2254)
  %2257 = and <64 x i32> %2256, %2086
  %2258 = add nsw <64 x i32> %2257, %2253
  %2259 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2258)
  %2260 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2259, <32 x i32> %2627) #11
  %2261 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2258)
  %2262 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2261, <32 x i32> %2628) #11
  %2263 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2260, <32 x i32> %2629) #11
  %2264 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2262, <32 x i32> %2630) #11
  %2265 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2264, <32 x i32> %2263)
  %2266 = trunc <64 x i32> %2265 to <64 x i16>
  %2267 = bitcast <64 x i16> %2266 to <32 x i32>
  %2268 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2267, <32 x i32> %2091) #11
  %2269 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2268, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2270 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2269, <32 x i32> zeroinitializer) #11
  %2271 = bitcast <32 x i32> %2270 to <64 x i16>
  %2272 = trunc <64 x i16> %2271 to <64 x i8>
  %2273 = shufflevector <64 x i8> %2272, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2274 = bitcast <128 x i8> %2273 to <32 x i32>
  %2275 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2274, <32 x i32> %2094) #11
  %2276 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2275, <32 x i32> %2097) #11
  %2277 = bitcast <32 x i32> %2276 to <128 x i8>
  %2278 = shufflevector <128 x i8> %2277, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2279 = shl nsw i32 %output.s0.c.co75.us.us, 6
  %2280 = add i32 %2279, %t970.us.us
  %2281 = add i32 %2280, %2631
  %2282 = getelementptr inbounds i8, i8* %23, i32 %2281
  %2283 = bitcast i8* %2282 to <64 x i8>*
  store <64 x i8> %2278, <64 x i8>* %2283, align 1, !tbaa !112
  %2284 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.35.6.us.us, <32 x i32> %sum_input254399.sroa.30.6.us.us)
  %2285 = sext <64 x i32> %2284 to <64 x i64>
  %2286 = mul nsw <64 x i64> %2285, %2084
  %2287 = ashr <64 x i64> %2286, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2288 = add nsw <64 x i64> %2287, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a43.us.us = ashr <64 x i64> %2288, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2289 = icmp slt <64 x i64> %a43.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a42.us.us = select <64 x i1> %2289, <64 x i64> %a43.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2290 = icmp sgt <64 x i64> %a42.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2291 = select <64 x i1> %2290, <64 x i64> %a42.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2292 = trunc <64 x i64> %2291 to <64 x i32>
  %2293 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2292)
  %2294 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2293, i32 %output_shift) #11
  %2295 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2292)
  %2296 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2295, i32 %output_shift) #11
  %2297 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2296, <32 x i32> %2294)
  %2298 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2293, i32 %2087) #11
  %2299 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2295, i32 %2087) #11
  %2300 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2299, <32 x i32> %2298)
  %2301 = and <64 x i32> %2300, %2086
  %2302 = add nsw <64 x i32> %2301, %2297
  %2303 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2302)
  %2304 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2303, <32 x i32> %2627) #11
  %2305 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2302)
  %2306 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2305, <32 x i32> %2628) #11
  %2307 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2304, <32 x i32> %2629) #11
  %2308 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2306, <32 x i32> %2630) #11
  %2309 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2308, <32 x i32> %2307)
  %2310 = trunc <64 x i32> %2309 to <64 x i16>
  %2311 = bitcast <64 x i16> %2310 to <32 x i32>
  %2312 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2311, <32 x i32> %2091) #11
  %2313 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2312, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2314 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2313, <32 x i32> zeroinitializer) #11
  %2315 = bitcast <32 x i32> %2314 to <64 x i16>
  %2316 = trunc <64 x i16> %2315 to <64 x i8>
  %2317 = shufflevector <64 x i8> %2316, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2318 = bitcast <128 x i8> %2317 to <32 x i32>
  %2319 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2318, <32 x i32> %2094) #11
  %2320 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2319, <32 x i32> %2097) #11
  %2321 = bitcast <32 x i32> %2320 to <128 x i8>
  %2322 = shufflevector <128 x i8> %2321, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2323 = add i32 %2280, %2632
  %2324 = getelementptr inbounds i8, i8* %23, i32 %2323
  %2325 = bitcast i8* %2324 to <64 x i8>*
  store <64 x i8> %2322, <64 x i8>* %2325, align 1, !tbaa !112
  %2326 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.45.6.us.us, <32 x i32> %sum_input254399.sroa.40.6.us.us)
  %2327 = sext <64 x i32> %2326 to <64 x i64>
  %2328 = mul nsw <64 x i64> %2327, %2084
  %2329 = ashr <64 x i64> %2328, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2330 = add nsw <64 x i64> %2329, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a47.us.us = ashr <64 x i64> %2330, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2331 = icmp slt <64 x i64> %a47.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a46.us.us = select <64 x i1> %2331, <64 x i64> %a47.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2332 = icmp sgt <64 x i64> %a46.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2333 = select <64 x i1> %2332, <64 x i64> %a46.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2334 = trunc <64 x i64> %2333 to <64 x i32>
  %2335 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2334)
  %2336 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2335, i32 %output_shift) #11
  %2337 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2334)
  %2338 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2337, i32 %output_shift) #11
  %2339 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2338, <32 x i32> %2336)
  %2340 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2335, i32 %2087) #11
  %2341 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2337, i32 %2087) #11
  %2342 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2341, <32 x i32> %2340)
  %2343 = and <64 x i32> %2342, %2086
  %2344 = add nsw <64 x i32> %2343, %2339
  %2345 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2344)
  %2346 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2345, <32 x i32> %2627) #11
  %2347 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2344)
  %2348 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2347, <32 x i32> %2628) #11
  %2349 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2346, <32 x i32> %2629) #11
  %2350 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2348, <32 x i32> %2630) #11
  %2351 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2350, <32 x i32> %2349)
  %2352 = trunc <64 x i32> %2351 to <64 x i16>
  %2353 = bitcast <64 x i16> %2352 to <32 x i32>
  %2354 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2353, <32 x i32> %2091) #11
  %2355 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2354, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2356 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2355, <32 x i32> zeroinitializer) #11
  %2357 = bitcast <32 x i32> %2356 to <64 x i16>
  %2358 = trunc <64 x i16> %2357 to <64 x i8>
  %2359 = shufflevector <64 x i8> %2358, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2360 = bitcast <128 x i8> %2359 to <32 x i32>
  %2361 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2360, <32 x i32> %2094) #11
  %2362 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2361, <32 x i32> %2097) #11
  %2363 = bitcast <32 x i32> %2362 to <128 x i8>
  %2364 = shufflevector <128 x i8> %2363, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2365 = add i32 %2280, %2633
  %2366 = getelementptr inbounds i8, i8* %23, i32 %2365
  %2367 = bitcast i8* %2366 to <64 x i8>*
  store <64 x i8> %2364, <64 x i8>* %2367, align 1, !tbaa !112
  %2368 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.55.6.us.us, <32 x i32> %sum_input254399.sroa.50.6.us.us)
  %2369 = sext <64 x i32> %2368 to <64 x i64>
  %2370 = mul nsw <64 x i64> %2369, %2084
  %2371 = ashr <64 x i64> %2370, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2372 = add nsw <64 x i64> %2371, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a51.us.us = ashr <64 x i64> %2372, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2373 = icmp slt <64 x i64> %a51.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a50.us.us = select <64 x i1> %2373, <64 x i64> %a51.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2374 = icmp sgt <64 x i64> %a50.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2375 = select <64 x i1> %2374, <64 x i64> %a50.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2376 = trunc <64 x i64> %2375 to <64 x i32>
  %2377 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2376)
  %2378 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2377, i32 %output_shift) #11
  %2379 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2376)
  %2380 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2379, i32 %output_shift) #11
  %2381 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2380, <32 x i32> %2378)
  %2382 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2377, i32 %2087) #11
  %2383 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2379, i32 %2087) #11
  %2384 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2383, <32 x i32> %2382)
  %2385 = and <64 x i32> %2384, %2086
  %2386 = add nsw <64 x i32> %2385, %2381
  %2387 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2386)
  %2388 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2387, <32 x i32> %2627) #11
  %2389 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2386)
  %2390 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2389, <32 x i32> %2628) #11
  %2391 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2388, <32 x i32> %2629) #11
  %2392 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2390, <32 x i32> %2630) #11
  %2393 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2392, <32 x i32> %2391)
  %2394 = trunc <64 x i32> %2393 to <64 x i16>
  %2395 = bitcast <64 x i16> %2394 to <32 x i32>
  %2396 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2395, <32 x i32> %2091) #11
  %2397 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2396, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2398 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2397, <32 x i32> zeroinitializer) #11
  %2399 = bitcast <32 x i32> %2398 to <64 x i16>
  %2400 = trunc <64 x i16> %2399 to <64 x i8>
  %2401 = shufflevector <64 x i8> %2400, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2402 = bitcast <128 x i8> %2401 to <32 x i32>
  %2403 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2402, <32 x i32> %2094) #11
  %2404 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2403, <32 x i32> %2097) #11
  %2405 = bitcast <32 x i32> %2404 to <128 x i8>
  %2406 = shufflevector <128 x i8> %2405, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2407 = add i32 %2280, %2634
  %2408 = getelementptr inbounds i8, i8* %23, i32 %2407
  %2409 = bitcast i8* %2408 to <64 x i8>*
  store <64 x i8> %2406, <64 x i8>* %2409, align 1, !tbaa !112
  %2410 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.65.6.us.us, <32 x i32> %sum_input254399.sroa.60.6.us.us)
  %2411 = sext <64 x i32> %2410 to <64 x i64>
  %2412 = mul nsw <64 x i64> %2411, %2084
  %2413 = ashr <64 x i64> %2412, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2414 = add nsw <64 x i64> %2413, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a55.us.us = ashr <64 x i64> %2414, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2415 = icmp slt <64 x i64> %a55.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a54.us.us = select <64 x i1> %2415, <64 x i64> %a55.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2416 = icmp sgt <64 x i64> %a54.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2417 = select <64 x i1> %2416, <64 x i64> %a54.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2418 = trunc <64 x i64> %2417 to <64 x i32>
  %2419 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2418)
  %2420 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2419, i32 %output_shift) #11
  %2421 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2418)
  %2422 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2421, i32 %output_shift) #11
  %2423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2422, <32 x i32> %2420)
  %2424 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2419, i32 %2087) #11
  %2425 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2421, i32 %2087) #11
  %2426 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2425, <32 x i32> %2424)
  %2427 = and <64 x i32> %2426, %2086
  %2428 = add nsw <64 x i32> %2427, %2423
  %2429 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2428)
  %2430 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2429, <32 x i32> %2627) #11
  %2431 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2428)
  %2432 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2431, <32 x i32> %2628) #11
  %2433 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2430, <32 x i32> %2629) #11
  %2434 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2432, <32 x i32> %2630) #11
  %2435 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2434, <32 x i32> %2433)
  %2436 = trunc <64 x i32> %2435 to <64 x i16>
  %2437 = bitcast <64 x i16> %2436 to <32 x i32>
  %2438 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2437, <32 x i32> %2091) #11
  %2439 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2438, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2440 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2439, <32 x i32> zeroinitializer) #11
  %2441 = bitcast <32 x i32> %2440 to <64 x i16>
  %2442 = trunc <64 x i16> %2441 to <64 x i8>
  %2443 = shufflevector <64 x i8> %2442, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2444 = bitcast <128 x i8> %2443 to <32 x i32>
  %2445 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2444, <32 x i32> %2094) #11
  %2446 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2445, <32 x i32> %2097) #11
  %2447 = bitcast <32 x i32> %2446 to <128 x i8>
  %2448 = shufflevector <128 x i8> %2447, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2449 = add i32 %2280, %2635
  %2450 = getelementptr inbounds i8, i8* %23, i32 %2449
  %2451 = bitcast i8* %2450 to <64 x i8>*
  store <64 x i8> %2448, <64 x i8>* %2451, align 1, !tbaa !112
  %2452 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.75.6.us.us, <32 x i32> %sum_input254399.sroa.70.6.us.us)
  %2453 = sext <64 x i32> %2452 to <64 x i64>
  %2454 = mul nsw <64 x i64> %2453, %2084
  %2455 = ashr <64 x i64> %2454, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2456 = add nsw <64 x i64> %2455, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a59.us.us = ashr <64 x i64> %2456, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2457 = icmp slt <64 x i64> %a59.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a58.us.us = select <64 x i1> %2457, <64 x i64> %a59.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2458 = icmp sgt <64 x i64> %a58.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2459 = select <64 x i1> %2458, <64 x i64> %a58.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2460 = trunc <64 x i64> %2459 to <64 x i32>
  %2461 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2460)
  %2462 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2461, i32 %output_shift) #11
  %2463 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2460)
  %2464 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2463, i32 %output_shift) #11
  %2465 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2464, <32 x i32> %2462)
  %2466 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2461, i32 %2087) #11
  %2467 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2463, i32 %2087) #11
  %2468 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2467, <32 x i32> %2466)
  %2469 = and <64 x i32> %2468, %2086
  %2470 = add nsw <64 x i32> %2469, %2465
  %2471 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2470)
  %2472 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2471, <32 x i32> %2627) #11
  %2473 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2470)
  %2474 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2473, <32 x i32> %2628) #11
  %2475 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2472, <32 x i32> %2629) #11
  %2476 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2474, <32 x i32> %2630) #11
  %2477 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2476, <32 x i32> %2475)
  %2478 = trunc <64 x i32> %2477 to <64 x i16>
  %2479 = bitcast <64 x i16> %2478 to <32 x i32>
  %2480 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2479, <32 x i32> %2091) #11
  %2481 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2480, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2482 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2481, <32 x i32> zeroinitializer) #11
  %2483 = bitcast <32 x i32> %2482 to <64 x i16>
  %2484 = trunc <64 x i16> %2483 to <64 x i8>
  %2485 = shufflevector <64 x i8> %2484, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2486 = bitcast <128 x i8> %2485 to <32 x i32>
  %2487 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2486, <32 x i32> %2094) #11
  %2488 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2487, <32 x i32> %2097) #11
  %2489 = bitcast <32 x i32> %2488 to <128 x i8>
  %2490 = shufflevector <128 x i8> %2489, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2491 = add i32 %2280, %2636
  %2492 = getelementptr inbounds i8, i8* %23, i32 %2491
  %2493 = bitcast i8* %2492 to <64 x i8>*
  store <64 x i8> %2490, <64 x i8>* %2493, align 1, !tbaa !112
  %2494 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.85.6.us.us, <32 x i32> %sum_input254399.sroa.80.6.us.us)
  %2495 = sext <64 x i32> %2494 to <64 x i64>
  %2496 = mul nsw <64 x i64> %2495, %2084
  %2497 = ashr <64 x i64> %2496, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2498 = add nsw <64 x i64> %2497, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a63.us.us = ashr <64 x i64> %2498, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2499 = icmp slt <64 x i64> %a63.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a62.us.us = select <64 x i1> %2499, <64 x i64> %a63.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2500 = icmp sgt <64 x i64> %a62.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2501 = select <64 x i1> %2500, <64 x i64> %a62.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2502 = trunc <64 x i64> %2501 to <64 x i32>
  %2503 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2502)
  %2504 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2503, i32 %output_shift) #11
  %2505 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2502)
  %2506 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2505, i32 %output_shift) #11
  %2507 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2506, <32 x i32> %2504)
  %2508 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2503, i32 %2087) #11
  %2509 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2505, i32 %2087) #11
  %2510 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2509, <32 x i32> %2508)
  %2511 = and <64 x i32> %2510, %2086
  %2512 = add nsw <64 x i32> %2511, %2507
  %2513 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2512)
  %2514 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2513, <32 x i32> %2627) #11
  %2515 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2512)
  %2516 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2515, <32 x i32> %2628) #11
  %2517 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2514, <32 x i32> %2629) #11
  %2518 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2516, <32 x i32> %2630) #11
  %2519 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2518, <32 x i32> %2517)
  %2520 = trunc <64 x i32> %2519 to <64 x i16>
  %2521 = bitcast <64 x i16> %2520 to <32 x i32>
  %2522 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2521, <32 x i32> %2091) #11
  %2523 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2522, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2524 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2523, <32 x i32> zeroinitializer) #11
  %2525 = bitcast <32 x i32> %2524 to <64 x i16>
  %2526 = trunc <64 x i16> %2525 to <64 x i8>
  %2527 = shufflevector <64 x i8> %2526, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2528 = bitcast <128 x i8> %2527 to <32 x i32>
  %2529 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2528, <32 x i32> %2094) #11
  %2530 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2529, <32 x i32> %2097) #11
  %2531 = bitcast <32 x i32> %2530 to <128 x i8>
  %2532 = shufflevector <128 x i8> %2531, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2533 = add i32 %2280, %2637
  %2534 = getelementptr inbounds i8, i8* %23, i32 %2533
  %2535 = bitcast i8* %2534 to <64 x i8>*
  store <64 x i8> %2532, <64 x i8>* %2535, align 1, !tbaa !112
  %2536 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %sum_input254399.sroa.95.6.us.us, <32 x i32> %sum_input254399.sroa.90.6.us.us)
  %2537 = sext <64 x i32> %2536 to <64 x i64>
  %2538 = mul nsw <64 x i64> %2537, %2084
  %2539 = ashr <64 x i64> %2538, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2540 = add nsw <64 x i64> %2539, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a67.us.us = ashr <64 x i64> %2540, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2541 = icmp slt <64 x i64> %a67.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a66.us.us = select <64 x i1> %2541, <64 x i64> %a67.us.us, <64 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2542 = icmp sgt <64 x i64> %a66.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2543 = select <64 x i1> %2542, <64 x i64> %a66.us.us, <64 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2544 = trunc <64 x i64> %2543 to <64 x i32>
  %2545 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2544)
  %2546 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2545, i32 %output_shift) #11
  %2547 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2544)
  %2548 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2547, i32 %output_shift) #11
  %2549 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2548, <32 x i32> %2546)
  %2550 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2545, i32 %2087) #11
  %2551 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2547, i32 %2087) #11
  %2552 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2551, <32 x i32> %2550)
  %2553 = and <64 x i32> %2552, %2086
  %2554 = add nsw <64 x i32> %2553, %2549
  %2555 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2554)
  %2556 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2555, <32 x i32> %2627) #11
  %2557 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2554)
  %2558 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2557, <32 x i32> %2628) #11
  %2559 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2556, <32 x i32> %2629) #11
  %2560 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2558, <32 x i32> %2630) #11
  %2561 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2560, <32 x i32> %2559)
  %2562 = trunc <64 x i32> %2561 to <64 x i16>
  %2563 = bitcast <64 x i16> %2562 to <32 x i32>
  %2564 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2563, <32 x i32> %2091) #11
  %2565 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2564, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>) #11
  %2566 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2565, <32 x i32> zeroinitializer) #11
  %2567 = bitcast <32 x i32> %2566 to <64 x i16>
  %2568 = trunc <64 x i16> %2567 to <64 x i8>
  %2569 = shufflevector <64 x i8> %2568, <64 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2570 = bitcast <128 x i8> %2569 to <32 x i32>
  %2571 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2570, <32 x i32> %2094) #11
  %2572 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2571, <32 x i32> %2097) #11
  %2573 = bitcast <32 x i32> %2572 to <128 x i8>
  %2574 = shufflevector <128 x i8> %2573, <128 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2575 = add i32 %2280, %2638
  %2576 = getelementptr inbounds i8, i8* %23, i32 %2575
  %2577 = bitcast i8* %2576 to <64 x i8>*
  store <64 x i8> %2574, <64 x i8>* %2577, align 1, !tbaa !112
  %2578 = add nuw nsw i32 %output.s0.c.co75.us.us, 1
  %.not448.us.us = icmp eq i32 %2578, %2080
  br i1 %.not448.us.us, label %"end for output.s0.c.co74.us.us", label %"for output.s0.c.co73.us.us"

"end for output.s0.c.co74.us.us":                 ; preds = %"consume convolved89.us.us", %"consume sum_input72.us.us"
  %2579 = add nuw nsw i32 %output.s0.x.xo47.us.us, 1
  %.not447.us.us = icmp eq i32 %2579, %2076
  br i1 %.not447.us.us, label %"end for output.s0.x.xo46.loopexit.us.us", label %"for output.s0.x.xo45.us.us"

"for convolved.s1.r19$y80.preheader.us.us":       ; preds = %after_bb77.us.us
  %2580 = shl nuw nsw i32 %output.s0.c.co75.us.us, 1
  %2581 = or i32 %2580, 1
  %2582 = mul nsw i32 %2581, %8
  %2583 = mul nsw i32 %output.s0.c.co75.us.us, %8
  br i1 %2078, label %"for convolved.s1.r19$y80.us.us.us", label %"consume convolved89.us.us", !prof !96

"for sum_input.s1.r19$x60.preheader.us.us":       ; preds = %"for sum_input.s1.r19$y57.us.us"
  %2584 = mul nsw i32 %"sum_input.s1.r19$y59.us.us", %dilation_y
  %2585 = add nsw i32 %2584, %2111
  %2586 = mul nsw i32 %2585, %19
  %t973.us.us = add i32 %2106, %2586
  br i1 %2101, label %"end for sum_input.s1.r19$x61.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x60.us.us"

"for output.s0.c.co73.preheader.us.us":           ; preds = %"consume sum_input72.us.us"
  %convolved400.sroa.0.0.vec.extract659.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 0
  %2587 = mul nsw i32 %convolved400.sroa.0.0.vec.extract659.us.us, %361
  %2588 = insertelement <32 x i32> undef, i32 %2587, i32 0
  %2589 = shufflevector <32 x i32> %2588, <32 x i32> undef, <32 x i32> zeroinitializer
  %convolved400.sroa.0.4.vec.extract661.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 1
  %2590 = mul nsw i32 %convolved400.sroa.0.4.vec.extract661.us.us, %361
  %2591 = insertelement <32 x i32> undef, i32 %2590, i32 0
  %2592 = shufflevector <32 x i32> %2591, <32 x i32> undef, <32 x i32> zeroinitializer
  %convolved400.sroa.0.8.vec.extract663.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 2
  %2593 = mul nsw i32 %convolved400.sroa.0.8.vec.extract663.us.us, %361
  %2594 = insertelement <32 x i32> undef, i32 %2593, i32 0
  %2595 = shufflevector <32 x i32> %2594, <32 x i32> undef, <32 x i32> zeroinitializer
  %convolved400.sroa.0.12.vec.extract665.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 3
  %2596 = mul nsw i32 %convolved400.sroa.0.12.vec.extract665.us.us, %361
  %2597 = insertelement <32 x i32> undef, i32 %2596, i32 0
  %2598 = shufflevector <32 x i32> %2597, <32 x i32> undef, <32 x i32> zeroinitializer
  %convolved400.sroa.0.16.vec.extract667.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 4
  %2599 = mul nsw i32 %convolved400.sroa.0.16.vec.extract667.us.us, %361
  %2600 = insertelement <32 x i32> undef, i32 %2599, i32 0
  %2601 = shufflevector <32 x i32> %2600, <32 x i32> undef, <32 x i32> zeroinitializer
  %convolved400.sroa.0.20.vec.extract669.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 5
  %2602 = mul nsw i32 %convolved400.sroa.0.20.vec.extract669.us.us, %361
  %2603 = insertelement <32 x i32> undef, i32 %2602, i32 0
  %2604 = shufflevector <32 x i32> %2603, <32 x i32> undef, <32 x i32> zeroinitializer
  %convolved400.sroa.0.24.vec.extract671.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 6
  %2605 = mul nsw i32 %convolved400.sroa.0.24.vec.extract671.us.us, %361
  %2606 = insertelement <32 x i32> undef, i32 %2605, i32 0
  %2607 = shufflevector <32 x i32> %2606, <32 x i32> undef, <32 x i32> zeroinitializer
  %convolved400.sroa.0.28.vec.extract673.us.us = extractelement <32 x i32> %convolved400.sroa.0.20.us.us, i32 7
  %2608 = mul nsw i32 %convolved400.sroa.0.28.vec.extract673.us.us, %361
  %2609 = insertelement <32 x i32> undef, i32 %2608, i32 0
  %2610 = shufflevector <32 x i32> %2609, <32 x i32> undef, <32 x i32> zeroinitializer
  %2611 = add nsw i32 %output.s0.x.x.base.s48.us.us, %25
  %2612 = add nsw i32 %2611, 7
  %2613 = mul nsw i32 %2612, %stride_x
  %2614 = add nsw i32 %2611, 6
  %2615 = mul nsw i32 %2614, %stride_x
  %2616 = add nsw i32 %2611, 5
  %2617 = mul nsw i32 %2616, %stride_x
  %2618 = add nsw i32 %2611, 4
  %2619 = mul nsw i32 %2618, %stride_x
  %2620 = add nsw i32 %2611, 3
  %2621 = mul nsw i32 %2620, %stride_x
  %2622 = add nsw i32 %2611, 2
  %2623 = mul nsw i32 %2622, %stride_x
  %2624 = add nsw i32 %2611, 1
  %2625 = mul nsw i32 %2624, %stride_x
  %2626 = mul nsw i32 %2611, %stride_x
  %2627 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %2628 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %2629 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %2630 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %2631 = mul nsw i32 %2611, %27
  %2632 = mul nsw i32 %2624, %27
  %2633 = mul nsw i32 %2622, %27
  %2634 = mul nsw i32 %2620, %27
  %2635 = mul nsw i32 %2618, %27
  %2636 = mul nsw i32 %2616, %27
  %2637 = mul nsw i32 %2614, %27
  %2638 = mul nsw i32 %2612, %27
  br label %"for output.s0.c.co73.us.us"

"for sum_input.s1.r19$y57.preheader.us.us":       ; preds = %then_bb55.us.us
  %2639 = add nsw i32 %output.s0.x.x.base.s48.us.us, %25
  %2640 = sub i32 %2639, %16
  br label %"for sum_input.s1.r19$y57.us.us"

"for sum_input.s1.r19$y63.preheader.us.us":       ; preds = %next_bb56.us.us
  %2641 = add nsw i32 %output.s0.x.x.base.s48.us.us, %25
  %2642 = mul nsw i32 %2641, %stride_x
  br i1 %brmerge1334.demorgan, label %"for sum_input.s1.r19$y63.us.us.us.us", label %"consume sum_input72.us.us", !prof !103

"end for output.s0.x.xo46.loopexit.us.us":        ; preds = %"end for output.s0.c.co74.us.us"
  %2643 = add nuw nsw i32 %output.s0.y.rebased44.us.us, 1
  %.not446.us.us = icmp eq i32 %2643, %29
  br i1 %.not446.us.us, label %"end for output.s0.y.rebased43.loopexit.us", label %"for output.s0.y.rebased42.us.us"

"for sum_input.s1.r19$y63.us.us.us.us":           ; preds = %"for sum_input.s1.r19$y63.preheader.us.us", %"end for sum_input.s1.r19$x67.loopexit.split.us.us.us.us.us"
  %convolved400.sroa.0.15.us.us.us.us = phi <32 x i32> [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x67.loopexit.split.us.us.us.us.us" ], [ %convolved400.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y63.preheader.us.us" ]
  %"sum_input.s1.r19$y65.us.us.us.us" = phi i32 [ %2834, %"end for sum_input.s1.r19$x67.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y63.preheader.us.us" ]
  %2644 = mul nsw i32 %"sum_input.s1.r19$y65.us.us.us.us", %dilation_y
  %t975.s.us.us.us.us = add nsw i32 %2644, %2111
  %2645 = mul nsw i32 %t975.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x66.us.us.us.us.us"

"for sum_input.s1.r19$x66.us.us.us.us.us":        ; preds = %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y63.us.us.us.us"
  %convolved400.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us" ], [ %convolved400.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y63.us.us.us.us" ]
  %"sum_input.s1.r19$x68.us.us.us.us.us" = phi i32 [ %2833, %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y63.us.us.us.us" ]
  %2646 = mul nsw i32 %"sum_input.s1.r19$x68.us.us.us.us.us", %dilation_x
  %t976.s.us.us.us.us.us = add nsw i32 %2646, %2642
  %t1276.us.us.us.us.us = mul nsw i32 %t976.s.us.us.us.us.us, %17
  %2647 = add i32 %t1276.us.us.us.us.us, %2645
  %t977.us.us.us.us.us = sub i32 %2647, %t941
  %2648 = add i32 %t977.us.us.us.us.us, %2105
  %t949.us.us.us.us.us = add i32 %2647, %2073
  %2649 = sub i32 %t949.us.us.us.us.us, %2060
  %t978.us.us.us.us.us = sub i32 %2649, %2061
  %2650 = add i32 %t978.us.us.us.us.us, %2105
  %2651 = add i32 %2647, %2071
  %2652 = sub i32 %2651, %2098
  %t979.us.us.us.us.us = sub i32 %2652, %2061
  %2653 = add i32 %t979.us.us.us.us.us, %2105
  %2654 = add i32 %2647, %2070
  %2655 = sub i32 %2654, %2098
  %t980.us.us.us.us.us = sub i32 %2655, %2061
  %2656 = add i32 %t980.us.us.us.us.us, %2105
  %2657 = add i32 %2647, %2069
  %2658 = sub i32 %2657, %2098
  %t981.us.us.us.us.us = sub i32 %2658, %2061
  %2659 = add i32 %t981.us.us.us.us.us, %2105
  %2660 = add i32 %2647, %2068
  %2661 = sub i32 %2660, %2098
  %t982.us.us.us.us.us = sub i32 %2661, %2061
  %2662 = add i32 %t982.us.us.us.us.us, %2105
  %2663 = add i32 %2647, %2067
  %2664 = sub i32 %2663, %2098
  %t983.us.us.us.us.us = sub i32 %2664, %2061
  %2665 = add i32 %t983.us.us.us.us.us, %2105
  %2666 = add i32 %2647, %2066
  %2667 = sub i32 %2666, %2098
  %t984.us.us.us.us.us = sub i32 %2667, %2061
  %2668 = add i32 %t984.us.us.us.us.us, %2105
  br i1 %2100, label %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r12469.us.us.us.us.us"

"for sum_input.s1.r19$z.r12469.us.us.us.us.us":   ; preds = %"for sum_input.s1.r19$x66.us.us.us.us.us", %"for sum_input.s1.r19$z.r12469.us.us.us.us.us"
  %convolved400.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12469.us.us.us.us.us" ], [ %convolved400.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x66.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r12471.us.us.us.us.us" = phi i32 [ %2778, %"for sum_input.s1.r19$z.r12469.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x66.us.us.us.us.us" ]
  %niter1546 = phi i32 [ %niter1546.nsub.1, %"for sum_input.s1.r19$z.r12469.us.us.us.us.us" ], [ %unroll_iter1545, %"for sum_input.s1.r19$x66.us.us.us.us.us" ]
  %2669 = shl nsw i32 %"sum_input.s1.r19$z.r12471.us.us.us.us.us", 2
  %2670 = add i32 %2648, %2669
  %2671 = getelementptr inbounds i8, i8* %13, i32 %2670
  %2672 = bitcast i8* %2671 to <4 x i8>*
  %2673 = load <4 x i8>, <4 x i8>* %2672, align 4, !tbaa !109
  %2674 = add i32 %2650, %2669
  %2675 = getelementptr inbounds i8, i8* %13, i32 %2674
  %2676 = bitcast i8* %2675 to <4 x i8>*
  %2677 = load <4 x i8>, <4 x i8>* %2676, align 4, !tbaa !109
  %2678 = add i32 %2653, %2669
  %2679 = getelementptr inbounds i8, i8* %13, i32 %2678
  %2680 = bitcast i8* %2679 to <4 x i8>*
  %2681 = load <4 x i8>, <4 x i8>* %2680, align 4, !tbaa !109
  %2682 = add i32 %2656, %2669
  %2683 = getelementptr inbounds i8, i8* %13, i32 %2682
  %2684 = bitcast i8* %2683 to <4 x i8>*
  %2685 = load <4 x i8>, <4 x i8>* %2684, align 4, !tbaa !109
  %2686 = add i32 %2659, %2669
  %2687 = getelementptr inbounds i8, i8* %13, i32 %2686
  %2688 = bitcast i8* %2687 to <4 x i8>*
  %2689 = load <4 x i8>, <4 x i8>* %2688, align 4, !tbaa !109
  %2690 = add i32 %2662, %2669
  %2691 = getelementptr inbounds i8, i8* %13, i32 %2690
  %2692 = bitcast i8* %2691 to <4 x i8>*
  %2693 = load <4 x i8>, <4 x i8>* %2692, align 4, !tbaa !109
  %2694 = add i32 %2665, %2669
  %2695 = getelementptr inbounds i8, i8* %13, i32 %2694
  %2696 = bitcast i8* %2695 to <4 x i8>*
  %2697 = load <4 x i8>, <4 x i8>* %2696, align 4, !tbaa !109
  %2698 = add i32 %2668, %2669
  %2699 = getelementptr inbounds i8, i8* %13, i32 %2698
  %2700 = bitcast i8* %2699 to <4 x i8>*
  %2701 = load <4 x i8>, <4 x i8>* %2700, align 4, !tbaa !109
  %2702 = shufflevector <4 x i8> %2673, <4 x i8> %2677, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2703 = shufflevector <4 x i8> %2681, <4 x i8> %2685, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2704 = shufflevector <4 x i8> %2689, <4 x i8> %2693, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2705 = shufflevector <4 x i8> %2697, <4 x i8> %2701, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2706 = shufflevector <8 x i8> %2702, <8 x i8> %2703, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2707 = shufflevector <8 x i8> %2704, <8 x i8> %2705, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2708 = shufflevector <16 x i8> %2706, <16 x i8> %2707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1278.us.us.us.us.us = zext <32 x i8> %2708 to <32 x i16>
  %2709 = shufflevector <32 x i16> %t1278.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2710 = bitcast <64 x i16> %2709 to <32 x i32>
  %2711 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2710)
  %2712 = bitcast <32 x i32> %2711 to <64 x i16>
  %2713 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2710)
  %2714 = bitcast <32 x i32> %2713 to <64 x i16>
  %2715 = add <64 x i16> %2714, %2712
  %2716 = shufflevector <64 x i16> %2715, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1277.us.us.us.us.us = zext <16 x i16> %2716 to <16 x i32>
  %2717 = shufflevector <16 x i32> %t1277.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2718 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2717, i32 -4)
  %2719 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2718)
  %2720 = add nsw <32 x i32> %2719, %convolved400.sroa.0.18.us.us.us.us.us
  %2721 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2718)
  %2722 = add nsw <32 x i32> %2720, %2721
  %convolved400.sroa.0.0.vecblend655.us.us.us.us.us = shufflevector <32 x i32> %2722, <32 x i32> %convolved400.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2723 = shl i32 %"sum_input.s1.r19$z.r12471.us.us.us.us.us", 2
  %2724 = or i32 %2723, 4
  %2725 = add i32 %2648, %2724
  %2726 = getelementptr inbounds i8, i8* %13, i32 %2725
  %2727 = bitcast i8* %2726 to <4 x i8>*
  %2728 = load <4 x i8>, <4 x i8>* %2727, align 4, !tbaa !109
  %2729 = add i32 %2650, %2724
  %2730 = getelementptr inbounds i8, i8* %13, i32 %2729
  %2731 = bitcast i8* %2730 to <4 x i8>*
  %2732 = load <4 x i8>, <4 x i8>* %2731, align 4, !tbaa !109
  %2733 = add i32 %2653, %2724
  %2734 = getelementptr inbounds i8, i8* %13, i32 %2733
  %2735 = bitcast i8* %2734 to <4 x i8>*
  %2736 = load <4 x i8>, <4 x i8>* %2735, align 4, !tbaa !109
  %2737 = add i32 %2656, %2724
  %2738 = getelementptr inbounds i8, i8* %13, i32 %2737
  %2739 = bitcast i8* %2738 to <4 x i8>*
  %2740 = load <4 x i8>, <4 x i8>* %2739, align 4, !tbaa !109
  %2741 = add i32 %2659, %2724
  %2742 = getelementptr inbounds i8, i8* %13, i32 %2741
  %2743 = bitcast i8* %2742 to <4 x i8>*
  %2744 = load <4 x i8>, <4 x i8>* %2743, align 4, !tbaa !109
  %2745 = add i32 %2662, %2724
  %2746 = getelementptr inbounds i8, i8* %13, i32 %2745
  %2747 = bitcast i8* %2746 to <4 x i8>*
  %2748 = load <4 x i8>, <4 x i8>* %2747, align 4, !tbaa !109
  %2749 = add i32 %2665, %2724
  %2750 = getelementptr inbounds i8, i8* %13, i32 %2749
  %2751 = bitcast i8* %2750 to <4 x i8>*
  %2752 = load <4 x i8>, <4 x i8>* %2751, align 4, !tbaa !109
  %2753 = add i32 %2668, %2724
  %2754 = getelementptr inbounds i8, i8* %13, i32 %2753
  %2755 = bitcast i8* %2754 to <4 x i8>*
  %2756 = load <4 x i8>, <4 x i8>* %2755, align 4, !tbaa !109
  %2757 = shufflevector <4 x i8> %2728, <4 x i8> %2732, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2758 = shufflevector <4 x i8> %2736, <4 x i8> %2740, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2759 = shufflevector <4 x i8> %2744, <4 x i8> %2748, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2760 = shufflevector <4 x i8> %2752, <4 x i8> %2756, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2761 = shufflevector <8 x i8> %2757, <8 x i8> %2758, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2762 = shufflevector <8 x i8> %2759, <8 x i8> %2760, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2763 = shufflevector <16 x i8> %2761, <16 x i8> %2762, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1278.us.us.us.us.us.1 = zext <32 x i8> %2763 to <32 x i16>
  %2764 = shufflevector <32 x i16> %t1278.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2765 = bitcast <64 x i16> %2764 to <32 x i32>
  %2766 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2765)
  %2767 = bitcast <32 x i32> %2766 to <64 x i16>
  %2768 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2765)
  %2769 = bitcast <32 x i32> %2768 to <64 x i16>
  %2770 = add <64 x i16> %2769, %2767
  %2771 = shufflevector <64 x i16> %2770, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1277.us.us.us.us.us.1 = zext <16 x i16> %2771 to <16 x i32>
  %2772 = shufflevector <16 x i32> %t1277.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2773 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2772, i32 -4)
  %2774 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2773)
  %2775 = add nsw <32 x i32> %2774, %convolved400.sroa.0.0.vecblend655.us.us.us.us.us
  %2776 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2773)
  %2777 = add nsw <32 x i32> %2775, %2776
  %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.1 = shufflevector <32 x i32> %2777, <32 x i32> %convolved400.sroa.0.0.vecblend655.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2778 = add nuw nsw i32 %"sum_input.s1.r19$z.r12471.us.us.us.us.us", 2
  %niter1546.nsub.1 = add i32 %niter1546, -2
  %niter1546.ncmp.1 = icmp eq i32 %niter1546.nsub.1, 0
  br i1 %niter1546.ncmp.1, label %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r12469.us.us.us.us.us"

"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r12469.us.us.us.us.us", %"for sum_input.s1.r19$x66.us.us.us.us.us"
  %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x66.us.us.us.us.us" ], [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12469.us.us.us.us.us" ]
  %convolved400.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %convolved400.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x66.us.us.us.us.us" ], [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12469.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r12471.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x66.us.us.us.us.us" ], [ %2778, %"for sum_input.s1.r19$z.r12469.us.us.us.us.us" ]
  br i1 %lcmp.mod1544.not, label %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r12469.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r12469.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us.unr-lcssa"
  %2779 = shl nsw i32 %"sum_input.s1.r19$z.r12471.us.us.us.us.us.unr", 2
  %2780 = add i32 %2648, %2779
  %2781 = getelementptr inbounds i8, i8* %13, i32 %2780
  %2782 = bitcast i8* %2781 to <4 x i8>*
  %2783 = load <4 x i8>, <4 x i8>* %2782, align 4, !tbaa !109
  %2784 = add i32 %2650, %2779
  %2785 = getelementptr inbounds i8, i8* %13, i32 %2784
  %2786 = bitcast i8* %2785 to <4 x i8>*
  %2787 = load <4 x i8>, <4 x i8>* %2786, align 4, !tbaa !109
  %2788 = add i32 %2653, %2779
  %2789 = getelementptr inbounds i8, i8* %13, i32 %2788
  %2790 = bitcast i8* %2789 to <4 x i8>*
  %2791 = load <4 x i8>, <4 x i8>* %2790, align 4, !tbaa !109
  %2792 = add i32 %2656, %2779
  %2793 = getelementptr inbounds i8, i8* %13, i32 %2792
  %2794 = bitcast i8* %2793 to <4 x i8>*
  %2795 = load <4 x i8>, <4 x i8>* %2794, align 4, !tbaa !109
  %2796 = add i32 %2659, %2779
  %2797 = getelementptr inbounds i8, i8* %13, i32 %2796
  %2798 = bitcast i8* %2797 to <4 x i8>*
  %2799 = load <4 x i8>, <4 x i8>* %2798, align 4, !tbaa !109
  %2800 = add i32 %2662, %2779
  %2801 = getelementptr inbounds i8, i8* %13, i32 %2800
  %2802 = bitcast i8* %2801 to <4 x i8>*
  %2803 = load <4 x i8>, <4 x i8>* %2802, align 4, !tbaa !109
  %2804 = add i32 %2665, %2779
  %2805 = getelementptr inbounds i8, i8* %13, i32 %2804
  %2806 = bitcast i8* %2805 to <4 x i8>*
  %2807 = load <4 x i8>, <4 x i8>* %2806, align 4, !tbaa !109
  %2808 = add i32 %2668, %2779
  %2809 = getelementptr inbounds i8, i8* %13, i32 %2808
  %2810 = bitcast i8* %2809 to <4 x i8>*
  %2811 = load <4 x i8>, <4 x i8>* %2810, align 4, !tbaa !109
  %2812 = shufflevector <4 x i8> %2783, <4 x i8> %2787, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2813 = shufflevector <4 x i8> %2791, <4 x i8> %2795, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2814 = shufflevector <4 x i8> %2799, <4 x i8> %2803, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2815 = shufflevector <4 x i8> %2807, <4 x i8> %2811, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2816 = shufflevector <8 x i8> %2812, <8 x i8> %2813, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2817 = shufflevector <8 x i8> %2814, <8 x i8> %2815, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2818 = shufflevector <16 x i8> %2816, <16 x i8> %2817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1278.us.us.us.us.us.epil = zext <32 x i8> %2818 to <32 x i16>
  %2819 = shufflevector <32 x i16> %t1278.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2820 = bitcast <64 x i16> %2819 to <32 x i32>
  %2821 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2820)
  %2822 = bitcast <32 x i32> %2821 to <64 x i16>
  %2823 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2820)
  %2824 = bitcast <32 x i32> %2823 to <64 x i16>
  %2825 = add <64 x i16> %2824, %2822
  %2826 = shufflevector <64 x i16> %2825, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1277.us.us.us.us.us.epil = zext <16 x i16> %2826 to <16 x i32>
  %2827 = shufflevector <16 x i32> %t1277.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2828 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2827, i32 -4)
  %2829 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2828)
  %2830 = add nsw <32 x i32> %2829, %convolved400.sroa.0.18.us.us.us.us.us.unr
  %2831 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2828)
  %2832 = add nsw <32 x i32> %2830, %2831
  %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.epil = shufflevector <32 x i32> %2832, <32 x i32> %convolved400.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r12469.us.us.us.us.us.epil"
  %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.lcssa = phi <32 x i32> [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us.unr-lcssa" ], [ %convolved400.sroa.0.0.vecblend655.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r12469.us.us.us.us.us.epil" ]
  %2833 = add nuw nsw i32 %"sum_input.s1.r19$x68.us.us.us.us.us", 1
  %.not453.us.us.us.us.us = icmp eq i32 %2833, %9
  br i1 %.not453.us.us.us.us.us, label %"end for sum_input.s1.r19$x67.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x66.us.us.us.us.us"

"end for sum_input.s1.r19$x67.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r12470.loopexit.us.us.us.us.us"
  %2834 = add nuw nsw i32 %"sum_input.s1.r19$y65.us.us.us.us", 1
  %.not452.us.us.us.us = icmp eq i32 %2834, %11
  br i1 %.not452.us.us.us.us, label %"consume sum_input72.us.us", label %"for sum_input.s1.r19$y63.us.us.us.us"

"for convolved.s1.r19$y80.us.us.us":              ; preds = %"for convolved.s1.r19$y80.preheader.us.us", %"end for convolved.s1.r19$x84.loopexit.us.us.us"
  %sum_input254399.sroa.95.1.us.us.us = phi <32 x i32> [ %.us-phi1069.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.95.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.90.1.us.us.us = phi <32 x i32> [ %.us-phi1070.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.90.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.85.1.us.us.us = phi <32 x i32> [ %.us-phi1071.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.85.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.80.1.us.us.us = phi <32 x i32> [ %.us-phi1072.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.80.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.75.1.us.us.us = phi <32 x i32> [ %.us-phi1073.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.75.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.70.1.us.us.us = phi <32 x i32> [ %.us-phi1074.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.70.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.65.1.us.us.us = phi <32 x i32> [ %.us-phi1075.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.65.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.60.1.us.us.us = phi <32 x i32> [ %.us-phi1076.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.60.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.55.1.us.us.us = phi <32 x i32> [ %.us-phi1077.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.55.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.50.1.us.us.us = phi <32 x i32> [ %.us-phi1078.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.50.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.45.1.us.us.us = phi <32 x i32> [ %.us-phi1079.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.45.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.40.1.us.us.us = phi <32 x i32> [ %.us-phi1080.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.40.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.35.1.us.us.us = phi <32 x i32> [ %.us-phi1081.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.35.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.30.1.us.us.us = phi <32 x i32> [ %.us-phi1082.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.30.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.25.1.us.us.us = phi <32 x i32> [ %.us-phi1083.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.25.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %sum_input254399.sroa.0.1.us.us.us = phi <32 x i32> [ %.us-phi1084.us.us.us, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ %sum_input254399.sroa.0.0.us.us, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %"convolved.s1.r19$y82.us.us.us" = phi i32 [ %2839, %"end for convolved.s1.r19$x84.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y80.preheader.us.us" ]
  %2835 = mul nsw i32 %"convolved.s1.r19$y82.us.us.us", %dilation_y
  %2836 = add nsw i32 %2835, %2111
  %2837 = mul nsw i32 %2836, %19
  %t1011.us.us.us = add nsw i32 %2837, %2107
  %2838 = mul nsw i32 %"convolved.s1.r19$y82.us.us.us", %12
  br i1 %2079, label %"for convolved.s1.r19$x83.us.us.us.us", label %"end for convolved.s1.r19$x84.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x84.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us", %"for convolved.s1.r19$y80.us.us.us"
  %.us-phi1069.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.95.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3496, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1070.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.90.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3467, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1071.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.85.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3418, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1072.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.80.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3389, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1073.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.75.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3340, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1074.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.70.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3311, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1075.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.65.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3262, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1076.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.60.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3233, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1077.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.55.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3184, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1078.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.50.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3155, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1079.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.45.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3106, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1080.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.40.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3077, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1081.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.35.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %3028, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1082.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.30.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %2999, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1083.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.25.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %2950, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %.us-phi1084.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ], [ %2912, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ]
  %2839 = add nuw nsw i32 %"convolved.s1.r19$y82.us.us.us", 1
  %.not449.us.us.us = icmp eq i32 %2839, %11
  br i1 %.not449.us.us.us, label %"consume convolved89.us.us", label %"for convolved.s1.r19$y80.us.us.us"

"for convolved.s1.r19$x83.us.us.us.us":           ; preds = %"for convolved.s1.r19$y80.us.us.us", %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us"
  %sum_input254399.sroa.95.2.us.us.us.us = phi <32 x i32> [ %3496, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.95.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.90.2.us.us.us.us = phi <32 x i32> [ %3467, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.90.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.85.2.us.us.us.us = phi <32 x i32> [ %3418, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.85.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.80.2.us.us.us.us = phi <32 x i32> [ %3389, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.80.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.75.2.us.us.us.us = phi <32 x i32> [ %3340, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.75.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.70.2.us.us.us.us = phi <32 x i32> [ %3311, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.70.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.65.2.us.us.us.us = phi <32 x i32> [ %3262, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.65.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.60.2.us.us.us.us = phi <32 x i32> [ %3233, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.60.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.55.2.us.us.us.us = phi <32 x i32> [ %3184, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.55.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.50.2.us.us.us.us = phi <32 x i32> [ %3155, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.50.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.45.2.us.us.us.us = phi <32 x i32> [ %3106, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.45.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.40.2.us.us.us.us = phi <32 x i32> [ %3077, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.40.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.35.2.us.us.us.us = phi <32 x i32> [ %3028, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.35.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.30.2.us.us.us.us = phi <32 x i32> [ %2999, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.30.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.25.2.us.us.us.us = phi <32 x i32> [ %2950, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.25.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %sum_input254399.sroa.0.2.us.us.us.us = phi <32 x i32> [ %2912, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ %sum_input254399.sroa.0.1.us.us.us, %"for convolved.s1.r19$y80.us.us.us" ]
  %"convolved.s1.r19$x85.us.us.us.us" = phi i32 [ %3498, %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y80.us.us.us" ]
  %2840 = mul nsw i32 %"convolved.s1.r19$x85.us.us.us.us", %dilation_x
  %t1024.s.us.us.us.us = add nsw i32 %2840, %2613
  %t1023.s.us.us.us.us = add nsw i32 %2840, %2615
  %t1022.s.us.us.us.us = add nsw i32 %2840, %2617
  %t1021.s.us.us.us.us = add nsw i32 %2840, %2619
  %t1020.s.us.us.us.us = add nsw i32 %2840, %2621
  %t1019.s.us.us.us.us = add nsw i32 %2840, %2623
  %t1018.s.us.us.us.us = add nsw i32 %2840, %2625
  %t1015.s.us.us.us.us = add nsw i32 %2840, %2626
  %2841 = mul nsw i32 %"convolved.s1.r19$x85.us.us.us.us", %10
  %t1016.us.us.us.us = add i32 %2841, %2838
  %2842 = mul nsw i32 %t1015.s.us.us.us.us, %17
  %2843 = add i32 %t1016.us.us.us.us, %2582
  %2844 = mul nsw i32 %t1018.s.us.us.us.us, %17
  %2845 = mul nsw i32 %t1019.s.us.us.us.us, %17
  %2846 = mul nsw i32 %t1020.s.us.us.us.us, %17
  %2847 = mul nsw i32 %t1021.s.us.us.us.us, %17
  %2848 = mul nsw i32 %t1022.s.us.us.us.us, %17
  %2849 = mul nsw i32 %t1023.s.us.us.us.us, %17
  %2850 = mul nsw i32 %t1024.s.us.us.us.us, %17
  br label %"for convolved.s1.r19$z.r12486.us.us.us.us"

"for convolved.s1.r19$z.r12486.us.us.us.us":      ; preds = %"for convolved.s1.r19$z.r12486.us.us.us.us", %"for convolved.s1.r19$x83.us.us.us.us"
  %sum_input254399.sroa.95.4.us.us.us.us = phi <32 x i32> [ %3496, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.95.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.90.4.us.us.us.us = phi <32 x i32> [ %3467, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.90.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.85.4.us.us.us.us = phi <32 x i32> [ %3418, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.85.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.80.4.us.us.us.us = phi <32 x i32> [ %3389, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.80.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.75.4.us.us.us.us = phi <32 x i32> [ %3340, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.75.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.70.4.us.us.us.us = phi <32 x i32> [ %3311, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.70.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.65.4.us.us.us.us = phi <32 x i32> [ %3262, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.65.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.60.4.us.us.us.us = phi <32 x i32> [ %3233, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.60.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.55.4.us.us.us.us = phi <32 x i32> [ %3184, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.55.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.50.4.us.us.us.us = phi <32 x i32> [ %3155, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.50.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.45.4.us.us.us.us = phi <32 x i32> [ %3106, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.45.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.40.4.us.us.us.us = phi <32 x i32> [ %3077, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.40.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.35.4.us.us.us.us = phi <32 x i32> [ %3028, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.35.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.30.4.us.us.us.us = phi <32 x i32> [ %2999, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.30.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.25.4.us.us.us.us = phi <32 x i32> [ %2950, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.25.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %sum_input254399.sroa.0.4.us.us.us.us = phi <32 x i32> [ %2912, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ %sum_input254399.sroa.0.2.us.us.us.us, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %"convolved.s1.r19$z.r12488.us.us.us.us" = phi i32 [ %3497, %"for convolved.s1.r19$z.r12486.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x83.us.us.us.us" ]
  %2851 = shl nsw i32 %"convolved.s1.r19$z.r12488.us.us.us.us", 2
  %2852 = add i32 %2851, %t1011.us.us.us
  %2853 = add i32 %2852, %2842
  %2854 = getelementptr inbounds i8, i8* %13, i32 %2853
  %2855 = bitcast i8* %2854 to <1 x i32>*
  %2856 = load <1 x i32>, <1 x i32>* %2855, align 4, !tbaa !109
  %2857 = shufflevector <1 x i32> %2856, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2858 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2857, <32 x i32> %2857, i32 -4)
  %2859 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2858)
  %2860 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2859, <32 x i32> %2859, i32 -4)
  %2861 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2860)
  %2862 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2861, <32 x i32> %2861, i32 -4)
  %2863 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2862)
  %2864 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2863, <32 x i32> %2863, i32 -4)
  %2865 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2864)
  %2866 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2865, <32 x i32> %2865, i32 -4)
  %2867 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2866)
  %2868 = bitcast <32 x i32> %2867 to <128 x i8>
  %2869 = zext <128 x i8> %2868 to <128 x i16>
  %2870 = shl nsw i32 %"convolved.s1.r19$z.r12488.us.us.us.us", 6
  %2871 = add nsw i32 %2870, %2583
  %2872 = shl nsw i32 %2871, 1
  %2873 = add nsw i32 %t1016.us.us.us.us, %2872
  %2874 = getelementptr inbounds i8, i8* %5, i32 %2873
  %2875 = bitcast i8* %2874 to <128 x i8>*
  %2876 = load <128 x i8>, <128 x i8>* %2875, align 128, !tbaa !106
  %2877 = zext <128 x i8> %2876 to <128 x i16>
  %2878 = bitcast <128 x i16> %2869 to <64 x i32>
  %2879 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2878)
  %2880 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2878)
  %2881 = bitcast <128 x i16> %2877 to <64 x i32>
  %2882 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2881)
  %2883 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2881)
  %2884 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2880, <32 x i32> %2883) #11
  %2885 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2879, <32 x i32> %2882) #11
  %2886 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2884) #11
  %2887 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2884) #11
  %2888 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %2887, <32 x i32> %2886) #11
  %2889 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2885) #11
  %2890 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2885) #11
  %2891 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %2890, <32 x i32> %2889) #11
  %2892 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2891, <32 x i32> %2888)
  %2893 = bitcast <64 x i32> %2892 to <128 x i16>
  %t1280.us.us.us.us = zext <128 x i16> %2893 to <128 x i32>
  %2894 = shufflevector <128 x i32> %t1280.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2895 = shufflevector <128 x i32> %t1280.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2896 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2895, <32 x i32> %2894, i32 -4)
  %2897 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2896)
  %2898 = shufflevector <128 x i32> %t1280.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2899 = shufflevector <128 x i32> %t1280.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2900 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2899, <32 x i32> %2898, i32 -4)
  %2901 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2900)
  %2902 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2901, <32 x i32> %2897)
  %2903 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2896)
  %2904 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2900)
  %2905 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2904, <32 x i32> %2903)
  %t1279.us.us.us.us = add nsw <64 x i32> %2905, %2902
  %2906 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1279.us.us.us.us)
  %2907 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1279.us.us.us.us)
  %2908 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2907, <32 x i32> %2906, i32 -4)
  %2909 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2908)
  %2910 = add nsw <32 x i32> %2909, %sum_input254399.sroa.0.4.us.us.us.us
  %2911 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2908)
  %2912 = add nsw <32 x i32> %2910, %2911
  %2913 = shl nsw i32 %"convolved.s1.r19$z.r12488.us.us.us.us", 7
  %2914 = add i32 %2843, %2913
  %2915 = getelementptr inbounds i8, i8* %5, i32 %2914
  %2916 = bitcast i8* %2915 to <128 x i8>*
  %2917 = load <128 x i8>, <128 x i8>* %2916, align 128, !tbaa !106
  %2918 = zext <128 x i8> %2917 to <128 x i16>
  %2919 = bitcast <128 x i16> %2918 to <64 x i32>
  %2920 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2919)
  %2921 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2919)
  %2922 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2880, <32 x i32> %2921) #11
  %2923 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2879, <32 x i32> %2920) #11
  %2924 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2922) #11
  %2925 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2922) #11
  %2926 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %2925, <32 x i32> %2924) #11
  %2927 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2923) #11
  %2928 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2923) #11
  %2929 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %2928, <32 x i32> %2927) #11
  %2930 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2929, <32 x i32> %2926)
  %2931 = bitcast <64 x i32> %2930 to <128 x i16>
  %t1282.us.us.us.us = zext <128 x i16> %2931 to <128 x i32>
  %2932 = shufflevector <128 x i32> %t1282.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2933 = shufflevector <128 x i32> %t1282.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2934 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2933, <32 x i32> %2932, i32 -4)
  %2935 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2934)
  %2936 = shufflevector <128 x i32> %t1282.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2937 = shufflevector <128 x i32> %t1282.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2938 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2937, <32 x i32> %2936, i32 -4)
  %2939 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2938)
  %2940 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2939, <32 x i32> %2935)
  %2941 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2934)
  %2942 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2938)
  %2943 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2942, <32 x i32> %2941)
  %t1281.us.us.us.us = add nsw <64 x i32> %2943, %2940
  %2944 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1281.us.us.us.us)
  %2945 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1281.us.us.us.us)
  %2946 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2945, <32 x i32> %2944, i32 -4)
  %2947 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2946)
  %2948 = add nsw <32 x i32> %2947, %sum_input254399.sroa.25.4.us.us.us.us
  %2949 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2946)
  %2950 = add nsw <32 x i32> %2948, %2949
  %2951 = add i32 %2852, %2844
  %2952 = getelementptr inbounds i8, i8* %13, i32 %2951
  %2953 = bitcast i8* %2952 to <1 x i32>*
  %2954 = load <1 x i32>, <1 x i32>* %2953, align 4, !tbaa !109
  %2955 = shufflevector <1 x i32> %2954, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2956 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2955, <32 x i32> %2955, i32 -4)
  %2957 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2956)
  %2958 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2957, <32 x i32> %2957, i32 -4)
  %2959 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2958)
  %2960 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2959, <32 x i32> %2959, i32 -4)
  %2961 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2960)
  %2962 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2961, <32 x i32> %2961, i32 -4)
  %2963 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2962)
  %2964 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %2963, <32 x i32> %2963, i32 -4)
  %2965 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2964)
  %2966 = bitcast <32 x i32> %2965 to <128 x i8>
  %2967 = zext <128 x i8> %2966 to <128 x i16>
  %2968 = bitcast <128 x i16> %2967 to <64 x i32>
  %2969 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2968)
  %2970 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2968)
  %2971 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2970, <32 x i32> %2883) #11
  %2972 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2969, <32 x i32> %2882) #11
  %2973 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2971) #11
  %2974 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2971) #11
  %2975 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %2974, <32 x i32> %2973) #11
  %2976 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2972) #11
  %2977 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2972) #11
  %2978 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %2977, <32 x i32> %2976) #11
  %2979 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2978, <32 x i32> %2975)
  %2980 = bitcast <64 x i32> %2979 to <128 x i16>
  %t1284.us.us.us.us = zext <128 x i16> %2980 to <128 x i32>
  %2981 = shufflevector <128 x i32> %t1284.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2982 = shufflevector <128 x i32> %t1284.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2983 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2982, <32 x i32> %2981, i32 -4)
  %2984 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2983)
  %2985 = shufflevector <128 x i32> %t1284.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2986 = shufflevector <128 x i32> %t1284.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2987 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2986, <32 x i32> %2985, i32 -4)
  %2988 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2987)
  %2989 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2988, <32 x i32> %2984)
  %2990 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2983)
  %2991 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2987)
  %2992 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2991, <32 x i32> %2990)
  %t1283.us.us.us.us = add nsw <64 x i32> %2992, %2989
  %2993 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1283.us.us.us.us)
  %2994 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1283.us.us.us.us)
  %2995 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %2994, <32 x i32> %2993, i32 -4)
  %2996 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2995)
  %2997 = add nsw <32 x i32> %2996, %sum_input254399.sroa.30.4.us.us.us.us
  %2998 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2995)
  %2999 = add nsw <32 x i32> %2997, %2998
  %3000 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2970, <32 x i32> %2921) #11
  %3001 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %2969, <32 x i32> %2920) #11
  %3002 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3000) #11
  %3003 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3000) #11
  %3004 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3003, <32 x i32> %3002) #11
  %3005 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3001) #11
  %3006 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3001) #11
  %3007 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3006, <32 x i32> %3005) #11
  %3008 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3007, <32 x i32> %3004)
  %3009 = bitcast <64 x i32> %3008 to <128 x i16>
  %t1286.us.us.us.us = zext <128 x i16> %3009 to <128 x i32>
  %3010 = shufflevector <128 x i32> %t1286.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3011 = shufflevector <128 x i32> %t1286.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3012 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3011, <32 x i32> %3010, i32 -4)
  %3013 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3012)
  %3014 = shufflevector <128 x i32> %t1286.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3015 = shufflevector <128 x i32> %t1286.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3016 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3015, <32 x i32> %3014, i32 -4)
  %3017 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3016)
  %3018 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3017, <32 x i32> %3013)
  %3019 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3012)
  %3020 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3016)
  %3021 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3020, <32 x i32> %3019)
  %t1285.us.us.us.us = add nsw <64 x i32> %3021, %3018
  %3022 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1285.us.us.us.us)
  %3023 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1285.us.us.us.us)
  %3024 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3023, <32 x i32> %3022, i32 -4)
  %3025 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3024)
  %3026 = add nsw <32 x i32> %3025, %sum_input254399.sroa.35.4.us.us.us.us
  %3027 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3024)
  %3028 = add nsw <32 x i32> %3026, %3027
  %3029 = add i32 %2852, %2845
  %3030 = getelementptr inbounds i8, i8* %13, i32 %3029
  %3031 = bitcast i8* %3030 to <1 x i32>*
  %3032 = load <1 x i32>, <1 x i32>* %3031, align 4, !tbaa !109
  %3033 = shufflevector <1 x i32> %3032, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3034 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3033, <32 x i32> %3033, i32 -4)
  %3035 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3034)
  %3036 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3035, <32 x i32> %3035, i32 -4)
  %3037 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3036)
  %3038 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3037, <32 x i32> %3037, i32 -4)
  %3039 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3038)
  %3040 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3039, <32 x i32> %3039, i32 -4)
  %3041 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3040)
  %3042 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3041, <32 x i32> %3041, i32 -4)
  %3043 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3042)
  %3044 = bitcast <32 x i32> %3043 to <128 x i8>
  %3045 = zext <128 x i8> %3044 to <128 x i16>
  %3046 = bitcast <128 x i16> %3045 to <64 x i32>
  %3047 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3046)
  %3048 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3046)
  %3049 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3048, <32 x i32> %2883) #11
  %3050 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3047, <32 x i32> %2882) #11
  %3051 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3049) #11
  %3052 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3049) #11
  %3053 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3052, <32 x i32> %3051) #11
  %3054 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3050) #11
  %3055 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3050) #11
  %3056 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3055, <32 x i32> %3054) #11
  %3057 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3056, <32 x i32> %3053)
  %3058 = bitcast <64 x i32> %3057 to <128 x i16>
  %t1288.us.us.us.us = zext <128 x i16> %3058 to <128 x i32>
  %3059 = shufflevector <128 x i32> %t1288.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3060 = shufflevector <128 x i32> %t1288.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3061 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3060, <32 x i32> %3059, i32 -4)
  %3062 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3061)
  %3063 = shufflevector <128 x i32> %t1288.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3064 = shufflevector <128 x i32> %t1288.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3065 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3064, <32 x i32> %3063, i32 -4)
  %3066 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3065)
  %3067 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3066, <32 x i32> %3062)
  %3068 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3061)
  %3069 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3065)
  %3070 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3069, <32 x i32> %3068)
  %t1287.us.us.us.us = add nsw <64 x i32> %3070, %3067
  %3071 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1287.us.us.us.us)
  %3072 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1287.us.us.us.us)
  %3073 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3072, <32 x i32> %3071, i32 -4)
  %3074 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3073)
  %3075 = add nsw <32 x i32> %3074, %sum_input254399.sroa.40.4.us.us.us.us
  %3076 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3073)
  %3077 = add nsw <32 x i32> %3075, %3076
  %3078 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3048, <32 x i32> %2921) #11
  %3079 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3047, <32 x i32> %2920) #11
  %3080 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3078) #11
  %3081 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3078) #11
  %3082 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3081, <32 x i32> %3080) #11
  %3083 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3079) #11
  %3084 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3079) #11
  %3085 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3084, <32 x i32> %3083) #11
  %3086 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3085, <32 x i32> %3082)
  %3087 = bitcast <64 x i32> %3086 to <128 x i16>
  %t1290.us.us.us.us = zext <128 x i16> %3087 to <128 x i32>
  %3088 = shufflevector <128 x i32> %t1290.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3089 = shufflevector <128 x i32> %t1290.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3090 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3089, <32 x i32> %3088, i32 -4)
  %3091 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3090)
  %3092 = shufflevector <128 x i32> %t1290.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3093 = shufflevector <128 x i32> %t1290.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3094 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3093, <32 x i32> %3092, i32 -4)
  %3095 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3094)
  %3096 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3095, <32 x i32> %3091)
  %3097 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3090)
  %3098 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3094)
  %3099 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3098, <32 x i32> %3097)
  %t1289.us.us.us.us = add nsw <64 x i32> %3099, %3096
  %3100 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1289.us.us.us.us)
  %3101 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1289.us.us.us.us)
  %3102 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3101, <32 x i32> %3100, i32 -4)
  %3103 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3102)
  %3104 = add nsw <32 x i32> %3103, %sum_input254399.sroa.45.4.us.us.us.us
  %3105 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3102)
  %3106 = add nsw <32 x i32> %3104, %3105
  %3107 = add i32 %2852, %2846
  %3108 = getelementptr inbounds i8, i8* %13, i32 %3107
  %3109 = bitcast i8* %3108 to <1 x i32>*
  %3110 = load <1 x i32>, <1 x i32>* %3109, align 4, !tbaa !109
  %3111 = shufflevector <1 x i32> %3110, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3112 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3111, <32 x i32> %3111, i32 -4)
  %3113 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3112)
  %3114 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3113, <32 x i32> %3113, i32 -4)
  %3115 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3114)
  %3116 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3115, <32 x i32> %3115, i32 -4)
  %3117 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3116)
  %3118 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3117, <32 x i32> %3117, i32 -4)
  %3119 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3118)
  %3120 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3119, <32 x i32> %3119, i32 -4)
  %3121 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3120)
  %3122 = bitcast <32 x i32> %3121 to <128 x i8>
  %3123 = zext <128 x i8> %3122 to <128 x i16>
  %3124 = bitcast <128 x i16> %3123 to <64 x i32>
  %3125 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3124)
  %3126 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3124)
  %3127 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3126, <32 x i32> %2883) #11
  %3128 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3125, <32 x i32> %2882) #11
  %3129 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3127) #11
  %3130 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3127) #11
  %3131 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3130, <32 x i32> %3129) #11
  %3132 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3128) #11
  %3133 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3128) #11
  %3134 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3133, <32 x i32> %3132) #11
  %3135 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3134, <32 x i32> %3131)
  %3136 = bitcast <64 x i32> %3135 to <128 x i16>
  %t1292.us.us.us.us = zext <128 x i16> %3136 to <128 x i32>
  %3137 = shufflevector <128 x i32> %t1292.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3138 = shufflevector <128 x i32> %t1292.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3139 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3138, <32 x i32> %3137, i32 -4)
  %3140 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3139)
  %3141 = shufflevector <128 x i32> %t1292.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3142 = shufflevector <128 x i32> %t1292.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3143 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3142, <32 x i32> %3141, i32 -4)
  %3144 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3143)
  %3145 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3144, <32 x i32> %3140)
  %3146 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3139)
  %3147 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3143)
  %3148 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3147, <32 x i32> %3146)
  %t1291.us.us.us.us = add nsw <64 x i32> %3148, %3145
  %3149 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1291.us.us.us.us)
  %3150 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1291.us.us.us.us)
  %3151 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3150, <32 x i32> %3149, i32 -4)
  %3152 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3151)
  %3153 = add nsw <32 x i32> %3152, %sum_input254399.sroa.50.4.us.us.us.us
  %3154 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3151)
  %3155 = add nsw <32 x i32> %3153, %3154
  %3156 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3126, <32 x i32> %2921) #11
  %3157 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3125, <32 x i32> %2920) #11
  %3158 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3156) #11
  %3159 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3156) #11
  %3160 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3159, <32 x i32> %3158) #11
  %3161 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3157) #11
  %3162 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3157) #11
  %3163 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3162, <32 x i32> %3161) #11
  %3164 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3163, <32 x i32> %3160)
  %3165 = bitcast <64 x i32> %3164 to <128 x i16>
  %t1294.us.us.us.us = zext <128 x i16> %3165 to <128 x i32>
  %3166 = shufflevector <128 x i32> %t1294.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3167 = shufflevector <128 x i32> %t1294.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3168 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3167, <32 x i32> %3166, i32 -4)
  %3169 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3168)
  %3170 = shufflevector <128 x i32> %t1294.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3171 = shufflevector <128 x i32> %t1294.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3172 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3171, <32 x i32> %3170, i32 -4)
  %3173 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3172)
  %3174 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3173, <32 x i32> %3169)
  %3175 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3168)
  %3176 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3172)
  %3177 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3176, <32 x i32> %3175)
  %t1293.us.us.us.us = add nsw <64 x i32> %3177, %3174
  %3178 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1293.us.us.us.us)
  %3179 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1293.us.us.us.us)
  %3180 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3179, <32 x i32> %3178, i32 -4)
  %3181 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3180)
  %3182 = add nsw <32 x i32> %3181, %sum_input254399.sroa.55.4.us.us.us.us
  %3183 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3180)
  %3184 = add nsw <32 x i32> %3182, %3183
  %3185 = add i32 %2852, %2847
  %3186 = getelementptr inbounds i8, i8* %13, i32 %3185
  %3187 = bitcast i8* %3186 to <1 x i32>*
  %3188 = load <1 x i32>, <1 x i32>* %3187, align 4, !tbaa !109
  %3189 = shufflevector <1 x i32> %3188, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3190 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3189, <32 x i32> %3189, i32 -4)
  %3191 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3190)
  %3192 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3191, <32 x i32> %3191, i32 -4)
  %3193 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3192)
  %3194 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3193, <32 x i32> %3193, i32 -4)
  %3195 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3194)
  %3196 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3195, <32 x i32> %3195, i32 -4)
  %3197 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3196)
  %3198 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3197, <32 x i32> %3197, i32 -4)
  %3199 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3198)
  %3200 = bitcast <32 x i32> %3199 to <128 x i8>
  %3201 = zext <128 x i8> %3200 to <128 x i16>
  %3202 = bitcast <128 x i16> %3201 to <64 x i32>
  %3203 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3202)
  %3204 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3202)
  %3205 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3204, <32 x i32> %2883) #11
  %3206 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3203, <32 x i32> %2882) #11
  %3207 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3205) #11
  %3208 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3205) #11
  %3209 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3208, <32 x i32> %3207) #11
  %3210 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3206) #11
  %3211 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3206) #11
  %3212 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3211, <32 x i32> %3210) #11
  %3213 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3212, <32 x i32> %3209)
  %3214 = bitcast <64 x i32> %3213 to <128 x i16>
  %t1296.us.us.us.us = zext <128 x i16> %3214 to <128 x i32>
  %3215 = shufflevector <128 x i32> %t1296.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3216 = shufflevector <128 x i32> %t1296.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3217 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3216, <32 x i32> %3215, i32 -4)
  %3218 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3217)
  %3219 = shufflevector <128 x i32> %t1296.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3220 = shufflevector <128 x i32> %t1296.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3221 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3220, <32 x i32> %3219, i32 -4)
  %3222 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3221)
  %3223 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3222, <32 x i32> %3218)
  %3224 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3217)
  %3225 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3221)
  %3226 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3225, <32 x i32> %3224)
  %t1295.us.us.us.us = add nsw <64 x i32> %3226, %3223
  %3227 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1295.us.us.us.us)
  %3228 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1295.us.us.us.us)
  %3229 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3228, <32 x i32> %3227, i32 -4)
  %3230 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3229)
  %3231 = add nsw <32 x i32> %3230, %sum_input254399.sroa.60.4.us.us.us.us
  %3232 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3229)
  %3233 = add nsw <32 x i32> %3231, %3232
  %3234 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3204, <32 x i32> %2921) #11
  %3235 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3203, <32 x i32> %2920) #11
  %3236 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3234) #11
  %3237 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3234) #11
  %3238 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3237, <32 x i32> %3236) #11
  %3239 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3235) #11
  %3240 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3235) #11
  %3241 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3240, <32 x i32> %3239) #11
  %3242 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3241, <32 x i32> %3238)
  %3243 = bitcast <64 x i32> %3242 to <128 x i16>
  %t1298.us.us.us.us = zext <128 x i16> %3243 to <128 x i32>
  %3244 = shufflevector <128 x i32> %t1298.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3245 = shufflevector <128 x i32> %t1298.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3246 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3245, <32 x i32> %3244, i32 -4)
  %3247 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3246)
  %3248 = shufflevector <128 x i32> %t1298.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3249 = shufflevector <128 x i32> %t1298.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3250 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3249, <32 x i32> %3248, i32 -4)
  %3251 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3250)
  %3252 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3251, <32 x i32> %3247)
  %3253 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3246)
  %3254 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3250)
  %3255 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3254, <32 x i32> %3253)
  %t1297.us.us.us.us = add nsw <64 x i32> %3255, %3252
  %3256 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1297.us.us.us.us)
  %3257 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1297.us.us.us.us)
  %3258 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3257, <32 x i32> %3256, i32 -4)
  %3259 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3258)
  %3260 = add nsw <32 x i32> %3259, %sum_input254399.sroa.65.4.us.us.us.us
  %3261 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3258)
  %3262 = add nsw <32 x i32> %3260, %3261
  %3263 = add i32 %2852, %2848
  %3264 = getelementptr inbounds i8, i8* %13, i32 %3263
  %3265 = bitcast i8* %3264 to <1 x i32>*
  %3266 = load <1 x i32>, <1 x i32>* %3265, align 4, !tbaa !109
  %3267 = shufflevector <1 x i32> %3266, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3268 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3267, <32 x i32> %3267, i32 -4)
  %3269 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3268)
  %3270 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3269, <32 x i32> %3269, i32 -4)
  %3271 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3270)
  %3272 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3271, <32 x i32> %3271, i32 -4)
  %3273 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3272)
  %3274 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3273, <32 x i32> %3273, i32 -4)
  %3275 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3274)
  %3276 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3275, <32 x i32> %3275, i32 -4)
  %3277 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3276)
  %3278 = bitcast <32 x i32> %3277 to <128 x i8>
  %3279 = zext <128 x i8> %3278 to <128 x i16>
  %3280 = bitcast <128 x i16> %3279 to <64 x i32>
  %3281 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3280)
  %3282 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3280)
  %3283 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3282, <32 x i32> %2883) #11
  %3284 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3281, <32 x i32> %2882) #11
  %3285 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3283) #11
  %3286 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3283) #11
  %3287 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3286, <32 x i32> %3285) #11
  %3288 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3284) #11
  %3289 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3284) #11
  %3290 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3289, <32 x i32> %3288) #11
  %3291 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3290, <32 x i32> %3287)
  %3292 = bitcast <64 x i32> %3291 to <128 x i16>
  %t1300.us.us.us.us = zext <128 x i16> %3292 to <128 x i32>
  %3293 = shufflevector <128 x i32> %t1300.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3294 = shufflevector <128 x i32> %t1300.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3295 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3294, <32 x i32> %3293, i32 -4)
  %3296 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3295)
  %3297 = shufflevector <128 x i32> %t1300.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3298 = shufflevector <128 x i32> %t1300.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3299 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3298, <32 x i32> %3297, i32 -4)
  %3300 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3299)
  %3301 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3300, <32 x i32> %3296)
  %3302 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3295)
  %3303 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3299)
  %3304 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3303, <32 x i32> %3302)
  %t1299.us.us.us.us = add nsw <64 x i32> %3304, %3301
  %3305 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1299.us.us.us.us)
  %3306 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1299.us.us.us.us)
  %3307 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3306, <32 x i32> %3305, i32 -4)
  %3308 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3307)
  %3309 = add nsw <32 x i32> %3308, %sum_input254399.sroa.70.4.us.us.us.us
  %3310 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3307)
  %3311 = add nsw <32 x i32> %3309, %3310
  %3312 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3282, <32 x i32> %2921) #11
  %3313 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3281, <32 x i32> %2920) #11
  %3314 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3312) #11
  %3315 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3312) #11
  %3316 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3315, <32 x i32> %3314) #11
  %3317 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3313) #11
  %3318 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3313) #11
  %3319 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3318, <32 x i32> %3317) #11
  %3320 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3319, <32 x i32> %3316)
  %3321 = bitcast <64 x i32> %3320 to <128 x i16>
  %t1302.us.us.us.us = zext <128 x i16> %3321 to <128 x i32>
  %3322 = shufflevector <128 x i32> %t1302.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3323 = shufflevector <128 x i32> %t1302.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3324 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3323, <32 x i32> %3322, i32 -4)
  %3325 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3324)
  %3326 = shufflevector <128 x i32> %t1302.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3327 = shufflevector <128 x i32> %t1302.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3328 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3327, <32 x i32> %3326, i32 -4)
  %3329 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3328)
  %3330 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3329, <32 x i32> %3325)
  %3331 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3324)
  %3332 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3328)
  %3333 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3332, <32 x i32> %3331)
  %t1301.us.us.us.us = add nsw <64 x i32> %3333, %3330
  %3334 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1301.us.us.us.us)
  %3335 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1301.us.us.us.us)
  %3336 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3335, <32 x i32> %3334, i32 -4)
  %3337 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3336)
  %3338 = add nsw <32 x i32> %3337, %sum_input254399.sroa.75.4.us.us.us.us
  %3339 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3336)
  %3340 = add nsw <32 x i32> %3338, %3339
  %3341 = add i32 %2852, %2849
  %3342 = getelementptr inbounds i8, i8* %13, i32 %3341
  %3343 = bitcast i8* %3342 to <1 x i32>*
  %3344 = load <1 x i32>, <1 x i32>* %3343, align 4, !tbaa !109
  %3345 = shufflevector <1 x i32> %3344, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3346 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3345, <32 x i32> %3345, i32 -4)
  %3347 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3346)
  %3348 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3347, <32 x i32> %3347, i32 -4)
  %3349 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3348)
  %3350 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3349, <32 x i32> %3349, i32 -4)
  %3351 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3350)
  %3352 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3351, <32 x i32> %3351, i32 -4)
  %3353 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3352)
  %3354 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3353, <32 x i32> %3353, i32 -4)
  %3355 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3354)
  %3356 = bitcast <32 x i32> %3355 to <128 x i8>
  %3357 = zext <128 x i8> %3356 to <128 x i16>
  %3358 = bitcast <128 x i16> %3357 to <64 x i32>
  %3359 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3358)
  %3360 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3358)
  %3361 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3360, <32 x i32> %2883) #11
  %3362 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3359, <32 x i32> %2882) #11
  %3363 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3361) #11
  %3364 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3361) #11
  %3365 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3364, <32 x i32> %3363) #11
  %3366 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3362) #11
  %3367 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3362) #11
  %3368 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3367, <32 x i32> %3366) #11
  %3369 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3368, <32 x i32> %3365)
  %3370 = bitcast <64 x i32> %3369 to <128 x i16>
  %t1304.us.us.us.us = zext <128 x i16> %3370 to <128 x i32>
  %3371 = shufflevector <128 x i32> %t1304.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3372 = shufflevector <128 x i32> %t1304.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3373 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3372, <32 x i32> %3371, i32 -4)
  %3374 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3373)
  %3375 = shufflevector <128 x i32> %t1304.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3376 = shufflevector <128 x i32> %t1304.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3377 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3376, <32 x i32> %3375, i32 -4)
  %3378 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3377)
  %3379 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3378, <32 x i32> %3374)
  %3380 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3373)
  %3381 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3377)
  %3382 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3381, <32 x i32> %3380)
  %t1303.us.us.us.us = add nsw <64 x i32> %3382, %3379
  %3383 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1303.us.us.us.us)
  %3384 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1303.us.us.us.us)
  %3385 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3384, <32 x i32> %3383, i32 -4)
  %3386 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3385)
  %3387 = add nsw <32 x i32> %3386, %sum_input254399.sroa.80.4.us.us.us.us
  %3388 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3385)
  %3389 = add nsw <32 x i32> %3387, %3388
  %3390 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3360, <32 x i32> %2921) #11
  %3391 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3359, <32 x i32> %2920) #11
  %3392 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3390) #11
  %3393 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3390) #11
  %3394 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3393, <32 x i32> %3392) #11
  %3395 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3391) #11
  %3396 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3391) #11
  %3397 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3396, <32 x i32> %3395) #11
  %3398 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3397, <32 x i32> %3394)
  %3399 = bitcast <64 x i32> %3398 to <128 x i16>
  %t1306.us.us.us.us = zext <128 x i16> %3399 to <128 x i32>
  %3400 = shufflevector <128 x i32> %t1306.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3401 = shufflevector <128 x i32> %t1306.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3402 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3401, <32 x i32> %3400, i32 -4)
  %3403 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3402)
  %3404 = shufflevector <128 x i32> %t1306.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3405 = shufflevector <128 x i32> %t1306.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3406 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3405, <32 x i32> %3404, i32 -4)
  %3407 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3406)
  %3408 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3407, <32 x i32> %3403)
  %3409 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3402)
  %3410 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3406)
  %3411 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3410, <32 x i32> %3409)
  %t1305.us.us.us.us = add nsw <64 x i32> %3411, %3408
  %3412 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1305.us.us.us.us)
  %3413 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1305.us.us.us.us)
  %3414 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3413, <32 x i32> %3412, i32 -4)
  %3415 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3414)
  %3416 = add nsw <32 x i32> %3415, %sum_input254399.sroa.85.4.us.us.us.us
  %3417 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3414)
  %3418 = add nsw <32 x i32> %3416, %3417
  %3419 = add i32 %2852, %2850
  %3420 = getelementptr inbounds i8, i8* %13, i32 %3419
  %3421 = bitcast i8* %3420 to <1 x i32>*
  %3422 = load <1 x i32>, <1 x i32>* %3421, align 4, !tbaa !109
  %3423 = shufflevector <1 x i32> %3422, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3424 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3423, <32 x i32> %3423, i32 -4)
  %3425 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3424)
  %3426 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3425, <32 x i32> %3425, i32 -4)
  %3427 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3426)
  %3428 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3427, <32 x i32> %3427, i32 -4)
  %3429 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3428)
  %3430 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3429, <32 x i32> %3429, i32 -4)
  %3431 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3430)
  %3432 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %3431, <32 x i32> %3431, i32 -4)
  %3433 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3432)
  %3434 = bitcast <32 x i32> %3433 to <128 x i8>
  %3435 = zext <128 x i8> %3434 to <128 x i16>
  %3436 = bitcast <128 x i16> %3435 to <64 x i32>
  %3437 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3436)
  %3438 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3436)
  %3439 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3438, <32 x i32> %2883) #11
  %3440 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3437, <32 x i32> %2882) #11
  %3441 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3439) #11
  %3442 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3439) #11
  %3443 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3442, <32 x i32> %3441) #11
  %3444 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3440) #11
  %3445 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3440) #11
  %3446 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3445, <32 x i32> %3444) #11
  %3447 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3446, <32 x i32> %3443)
  %3448 = bitcast <64 x i32> %3447 to <128 x i16>
  %t1308.us.us.us.us = zext <128 x i16> %3448 to <128 x i32>
  %3449 = shufflevector <128 x i32> %t1308.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3450 = shufflevector <128 x i32> %t1308.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3451 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3450, <32 x i32> %3449, i32 -4)
  %3452 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3451)
  %3453 = shufflevector <128 x i32> %t1308.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3454 = shufflevector <128 x i32> %t1308.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3455 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3454, <32 x i32> %3453, i32 -4)
  %3456 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3455)
  %3457 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3456, <32 x i32> %3452)
  %3458 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3451)
  %3459 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3455)
  %3460 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3459, <32 x i32> %3458)
  %t1307.us.us.us.us = add nsw <64 x i32> %3460, %3457
  %3461 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1307.us.us.us.us)
  %3462 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1307.us.us.us.us)
  %3463 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3462, <32 x i32> %3461, i32 -4)
  %3464 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3463)
  %3465 = add nsw <32 x i32> %3464, %sum_input254399.sroa.90.4.us.us.us.us
  %3466 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3463)
  %3467 = add nsw <32 x i32> %3465, %3466
  %3468 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3438, <32 x i32> %2921) #11
  %3469 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %3437, <32 x i32> %2920) #11
  %3470 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3468) #11
  %3471 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3468) #11
  %3472 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3471, <32 x i32> %3470) #11
  %3473 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3469) #11
  %3474 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3469) #11
  %3475 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %3474, <32 x i32> %3473) #11
  %3476 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3475, <32 x i32> %3472)
  %3477 = bitcast <64 x i32> %3476 to <128 x i16>
  %t1310.us.us.us.us = zext <128 x i16> %3477 to <128 x i32>
  %3478 = shufflevector <128 x i32> %t1310.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3479 = shufflevector <128 x i32> %t1310.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3480 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3479, <32 x i32> %3478, i32 -4)
  %3481 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3480)
  %3482 = shufflevector <128 x i32> %t1310.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3483 = shufflevector <128 x i32> %t1310.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3484 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3483, <32 x i32> %3482, i32 -4)
  %3485 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3484)
  %3486 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3485, <32 x i32> %3481)
  %3487 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3480)
  %3488 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3484)
  %3489 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3488, <32 x i32> %3487)
  %t1309.us.us.us.us = add nsw <64 x i32> %3489, %3486
  %3490 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1309.us.us.us.us)
  %3491 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1309.us.us.us.us)
  %3492 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %3491, <32 x i32> %3490, i32 -4)
  %3493 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3492)
  %3494 = add nsw <32 x i32> %3493, %sum_input254399.sroa.95.4.us.us.us.us
  %3495 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3492)
  %3496 = add nsw <32 x i32> %3494, %3495
  %3497 = add nuw nsw i32 %"convolved.s1.r19$z.r12488.us.us.us.us", 1
  %.not451.us.us.us.us = icmp eq i32 %3497, %7
  br i1 %.not451.us.us.us.us, label %"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r12486.us.us.us.us"

"end for convolved.s1.r19$z.r12487.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r12486.us.us.us.us"
  %3498 = add nuw nsw i32 %"convolved.s1.r19$x85.us.us.us.us", 1
  %.not450.us.us.us.us = icmp eq i32 %3498, %9
  br i1 %.not450.us.us.us.us, label %"end for convolved.s1.r19$x84.loopexit.us.us.us", label %"for convolved.s1.r19$x83.us.us.us.us"

next_bb38:                                        ; preds = %next_bb5
  br i1 %96, label %then_bb114, label %next_bb115

then_bb114:                                       ; preds = %next_bb38
  %3499 = mul nsw i32 %19, %18
  %3500 = mul nsw i32 %22, %20
  %3501 = mul nsw i32 %17, %16
  %3502 = add i32 %3500, %3499
  %t1037 = add i32 %3502, %3501
  %3503 = icmp sgt i32 %21, 0
  br i1 %3503, label %"for output.s0.b.rebased116.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased116.preheader":           ; preds = %then_bb114
  %3504 = mul nsw i32 %17, %stride_x
  %3505 = mul nsw i32 %3504, 7
  %3506 = mul nsw i32 %3504, 6
  %3507 = mul nsw i32 %3504, 5
  %3508 = shl nsw i32 %3504, 2
  %3509 = mul nsw i32 %3504, 3
  %3510 = shl nsw i32 %3504, 1
  %3511 = sub nsw i32 %stride_x, %16
  %3512 = mul nsw i32 %3511, %17
  %3513 = icmp sgt i32 %29, 0
  %.neg791 = mul i32 %30, %28
  %.neg792 = mul i32 %27, %25
  %.neg793 = mul i32 %31, %20
  %reass.add795 = add i32 %.neg791, %.neg792
  %reass.add796 = add i32 %reass.add795, %.neg793
  %3514 = add nuw nsw i32 %26, 7
  %3515 = ashr i32 %3514, 3
  %b72 = add nsw i32 %26, -8
  %3516 = icmp sgt i32 %11, 0
  %3517 = icmp sgt i32 %9, 0
  %3518 = icmp sgt i32 %7, 0
  %3519 = ashr i32 %4, 5
  %3520 = icmp sgt i32 %4, 31
  %3521 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %3522 = shufflevector <32 x i32> %3521, <32 x i32> undef, <32 x i32> zeroinitializer
  %3523 = sext <32 x i32> %3522 to <32 x i64>
  %3524 = icmp sgt i32 %output_shift, 0
  %3525 = select i1 %3524, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %3526 = add nsw i32 %output_shift, -1
  %3527 = zext i8 %output_zero to i16
  %3528 = insertelement <32 x i16> undef, i16 %3527, i32 0
  %3529 = shufflevector <32 x i16> %3528, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3530 = bitcast <64 x i16> %3529 to <32 x i32>
  %3531 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %3532 = shufflevector <32 x i8> %3531, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3533 = bitcast <128 x i8> %3532 to <32 x i32>
  %3534 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %3535 = shufflevector <32 x i8> %3534, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3536 = bitcast <128 x i8> %3535 to <32 x i32>
  br i1 %3513, label %"for output.s0.b.rebased116.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased116.us.preheader":        ; preds = %"for output.s0.b.rebased116.preheader"
  %3537 = add i32 %3501, %3499
  %3538 = add i32 %9, -1
  %brmerge1337.demorgan = and i1 %3517, %3518
  %xtraiter1533 = and i32 %7, 1
  %3539 = icmp eq i32 %7, 1
  %unroll_iter1535 = and i32 %7, -2
  %lcmp.mod1534.not = icmp eq i32 %xtraiter1533, 0
  %xtraiter1537 = and i32 %9, 3
  %3540 = icmp ult i32 %3538, 3
  %unroll_iter1541 = and i32 %9, -4
  %lcmp.mod1539.not = icmp eq i32 %xtraiter1537, 0
  br label %"for output.s0.b.rebased116.us"

"for output.s0.b.rebased116.us":                  ; preds = %"for output.s0.b.rebased116.us.preheader", %"end for output.s0.y.rebased120.loopexit.us"
  %sum_input254399.sroa.0.7.us = phi <32 x i32> [ %.us-phi1056.us, %"end for output.s0.y.rebased120.loopexit.us" ], [ undef, %"for output.s0.b.rebased116.us.preheader" ]
  %output.s0.b.rebased118.us = phi i32 [ %3547, %"end for output.s0.y.rebased120.loopexit.us" ], [ 0, %"for output.s0.b.rebased116.us.preheader" ]
  %3541 = add nsw i32 %output.s0.b.rebased118.us, %20
  %3542 = mul nsw i32 %3541, %31
  %3543 = sub i32 %3542, %reass.add796
  %3544 = mul nsw i32 %3541, %22
  %3545 = sub i32 %3544, %3502
  %3546 = sub nsw i32 %3544, %t1037
  br i1 %98, label %"for output.s0.y.rebased119.us.us", label %"end for output.s0.y.rebased120.loopexit.us", !prof !96

"end for output.s0.y.rebased120.loopexit.us":     ; preds = %"end for output.s0.x.xo123.loopexit.us.us", %"for output.s0.b.rebased116.us"
  %.us-phi1056.us = phi <32 x i32> [ %sum_input254399.sroa.0.7.us, %"for output.s0.b.rebased116.us" ], [ %sum_input254399.sroa.0.20.us.us, %"end for output.s0.x.xo123.loopexit.us.us" ]
  %3547 = add nuw nsw i32 %output.s0.b.rebased118.us, 1
  %.not433.us = icmp eq i32 %3547, %21
  br i1 %.not433.us, label %after_bb3, label %"for output.s0.b.rebased116.us"

"for output.s0.y.rebased119.us.us":               ; preds = %"for output.s0.b.rebased116.us", %"end for output.s0.x.xo123.loopexit.us.us"
  %sum_input254399.sroa.0.8.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.20.us.us, %"end for output.s0.x.xo123.loopexit.us.us" ], [ %sum_input254399.sroa.0.7.us, %"for output.s0.b.rebased116.us" ]
  %output.s0.y.rebased121.us.us = phi i32 [ %3981, %"end for output.s0.x.xo123.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased116.us" ]
  %3548 = add nsw i32 %output.s0.y.rebased121.us.us, %28
  %3549 = mul nsw i32 %3548, %30
  %t1066.us.us = add i32 %3543, %3549
  %3550 = mul nsw i32 %3548, %stride_y
  br label %"for output.s0.x.xo122.us.us"

"for output.s0.x.xo122.us.us":                    ; preds = %"end for output.s0.c.co151.us.us", %"for output.s0.y.rebased119.us.us"
  %sum_input254399.sroa.0.10.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.20.us.us, %"end for output.s0.c.co151.us.us" ], [ %sum_input254399.sroa.0.8.us.us, %"for output.s0.y.rebased119.us.us" ]
  %output.s0.x.xo124.us.us = phi i32 [ %3924, %"end for output.s0.c.co151.us.us" ], [ 0, %"for output.s0.y.rebased119.us.us" ]
  %a70.us.us = shl nsw i32 %output.s0.x.xo124.us.us, 3
  %3551 = icmp slt i32 %a70.us.us, %b72
  %output.s0.x.x.base.s125.us.us = select i1 %3551, i32 %a70.us.us, i32 %b72
  br i1 %t843.not, label %"consume sum_input149.us.us", label %then_bb129.us.us

then_bb129.us.us:                                 ; preds = %"for output.s0.x.xo122.us.us"
  %sum_input254399.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %sum_input254399.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb132.us.us, label %next_bb133.us.us

next_bb133.us.us:                                 ; preds = %then_bb129.us.us
  br i1 %3516, label %"for sum_input.s1.r19$y140.preheader.us.us", label %"consume sum_input149.us.us", !prof !96

then_bb132.us.us:                                 ; preds = %then_bb129.us.us
  br i1 %3516, label %"for sum_input.s1.r19$y134.preheader.us.us", label %"consume sum_input149.us.us", !prof !96

"for sum_input.s1.r19$y134.us.us":                ; preds = %"for sum_input.s1.r19$y134.preheader.us.us", %"end for sum_input.s1.r19$x138.us.us"
  %sum_input254399.sroa.0.12.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.14.us.us, %"end for sum_input.s1.r19$x138.us.us" ], [ %sum_input254399.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y134.preheader.us.us" ]
  %"sum_input.s1.r19$y136.us.us" = phi i32 [ %3652, %"end for sum_input.s1.r19$x138.us.us" ], [ 0, %"for sum_input.s1.r19$y134.preheader.us.us" ]
  br i1 %3517, label %"for sum_input.s1.r19$x137.preheader.us.us", label %"end for sum_input.s1.r19$x138.us.us", !prof !96

"for sum_input.s1.r19$x137.us.us":                ; preds = %"for sum_input.s1.r19$x137.preheader.us.us", %"for sum_input.s1.r19$x137.us.us"
  %sum_input254399.sroa.0.13.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.vecblend721.us.us.3, %"for sum_input.s1.r19$x137.us.us" ], [ %sum_input254399.sroa.0.12.us.us, %"for sum_input.s1.r19$x137.preheader.us.us" ]
  %"sum_input.s1.r19$x139.us.us" = phi i32 [ %3631, %"for sum_input.s1.r19$x137.us.us" ], [ 0, %"for sum_input.s1.r19$x137.preheader.us.us" ]
  %niter1542 = phi i32 [ %niter1542.nsub.3, %"for sum_input.s1.r19$x137.us.us" ], [ %unroll_iter1541, %"for sum_input.s1.r19$x137.preheader.us.us" ]
  %3552 = mul nsw i32 %"sum_input.s1.r19$x139.us.us", %dilation_x
  %reass.add801.us.us = add i32 %3978, %3552
  %reass.mul802.us.us = shl i32 %reass.add801.us.us, 2
  %3553 = add i32 %t1069.us.us, %reass.mul802.us.us
  %3554 = getelementptr inbounds i8, i8* %13, i32 %3553
  %3555 = bitcast i8* %3554 to <32 x i8>*
  %3556 = load <32 x i8>, <32 x i8>* %3555, align 4, !tbaa !109
  %t1312.us.us = zext <32 x i8> %3556 to <32 x i16>
  %3557 = shufflevector <32 x i16> %t1312.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3558 = bitcast <64 x i16> %3557 to <32 x i32>
  %3559 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %3558)
  %3560 = bitcast <32 x i32> %3559 to <64 x i16>
  %3561 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %3558)
  %3562 = bitcast <32 x i32> %3561 to <64 x i16>
  %3563 = add <64 x i16> %3562, %3560
  %3564 = shufflevector <64 x i16> %3563, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1311.us.us = zext <16 x i16> %3564 to <16 x i32>
  %3565 = shufflevector <16 x i32> %t1311.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3566 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %3565, i32 -4)
  %3567 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3566)
  %3568 = add nsw <32 x i32> %3567, %sum_input254399.sroa.0.13.us.us
  %3569 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3566)
  %3570 = add nsw <32 x i32> %3568, %3569
  %sum_input254399.sroa.0.0.vecblend721.us.us = shufflevector <32 x i32> %3570, <32 x i32> %sum_input254399.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3571 = or i32 %"sum_input.s1.r19$x139.us.us", 1
  %3572 = mul nsw i32 %3571, %dilation_x
  %reass.add801.us.us.1 = add i32 %3978, %3572
  %reass.mul802.us.us.1 = shl i32 %reass.add801.us.us.1, 2
  %3573 = add i32 %t1069.us.us, %reass.mul802.us.us.1
  %3574 = getelementptr inbounds i8, i8* %13, i32 %3573
  %3575 = bitcast i8* %3574 to <32 x i8>*
  %3576 = load <32 x i8>, <32 x i8>* %3575, align 4, !tbaa !109
  %t1312.us.us.1 = zext <32 x i8> %3576 to <32 x i16>
  %3577 = shufflevector <32 x i16> %t1312.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3578 = bitcast <64 x i16> %3577 to <32 x i32>
  %3579 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %3578)
  %3580 = bitcast <32 x i32> %3579 to <64 x i16>
  %3581 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %3578)
  %3582 = bitcast <32 x i32> %3581 to <64 x i16>
  %3583 = add <64 x i16> %3582, %3580
  %3584 = shufflevector <64 x i16> %3583, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1311.us.us.1 = zext <16 x i16> %3584 to <16 x i32>
  %3585 = shufflevector <16 x i32> %t1311.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3586 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %3585, i32 -4)
  %3587 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3586)
  %3588 = add nsw <32 x i32> %3587, %sum_input254399.sroa.0.0.vecblend721.us.us
  %3589 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3586)
  %3590 = add nsw <32 x i32> %3588, %3589
  %sum_input254399.sroa.0.0.vecblend721.us.us.1 = shufflevector <32 x i32> %3590, <32 x i32> %sum_input254399.sroa.0.0.vecblend721.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3591 = or i32 %"sum_input.s1.r19$x139.us.us", 2
  %3592 = mul nsw i32 %3591, %dilation_x
  %reass.add801.us.us.2 = add i32 %3978, %3592
  %reass.mul802.us.us.2 = shl i32 %reass.add801.us.us.2, 2
  %3593 = add i32 %t1069.us.us, %reass.mul802.us.us.2
  %3594 = getelementptr inbounds i8, i8* %13, i32 %3593
  %3595 = bitcast i8* %3594 to <32 x i8>*
  %3596 = load <32 x i8>, <32 x i8>* %3595, align 4, !tbaa !109
  %t1312.us.us.2 = zext <32 x i8> %3596 to <32 x i16>
  %3597 = shufflevector <32 x i16> %t1312.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3598 = bitcast <64 x i16> %3597 to <32 x i32>
  %3599 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %3598)
  %3600 = bitcast <32 x i32> %3599 to <64 x i16>
  %3601 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %3598)
  %3602 = bitcast <32 x i32> %3601 to <64 x i16>
  %3603 = add <64 x i16> %3602, %3600
  %3604 = shufflevector <64 x i16> %3603, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1311.us.us.2 = zext <16 x i16> %3604 to <16 x i32>
  %3605 = shufflevector <16 x i32> %t1311.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3606 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %3605, i32 -4)
  %3607 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3606)
  %3608 = add nsw <32 x i32> %3607, %sum_input254399.sroa.0.0.vecblend721.us.us.1
  %3609 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3606)
  %3610 = add nsw <32 x i32> %3608, %3609
  %sum_input254399.sroa.0.0.vecblend721.us.us.2 = shufflevector <32 x i32> %3610, <32 x i32> %sum_input254399.sroa.0.0.vecblend721.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3611 = or i32 %"sum_input.s1.r19$x139.us.us", 3
  %3612 = mul nsw i32 %3611, %dilation_x
  %reass.add801.us.us.3 = add i32 %3978, %3612
  %reass.mul802.us.us.3 = shl i32 %reass.add801.us.us.3, 2
  %3613 = add i32 %t1069.us.us, %reass.mul802.us.us.3
  %3614 = getelementptr inbounds i8, i8* %13, i32 %3613
  %3615 = bitcast i8* %3614 to <32 x i8>*
  %3616 = load <32 x i8>, <32 x i8>* %3615, align 4, !tbaa !109
  %t1312.us.us.3 = zext <32 x i8> %3616 to <32 x i16>
  %3617 = shufflevector <32 x i16> %t1312.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3618 = bitcast <64 x i16> %3617 to <32 x i32>
  %3619 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %3618)
  %3620 = bitcast <32 x i32> %3619 to <64 x i16>
  %3621 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %3618)
  %3622 = bitcast <32 x i32> %3621 to <64 x i16>
  %3623 = add <64 x i16> %3622, %3620
  %3624 = shufflevector <64 x i16> %3623, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1311.us.us.3 = zext <16 x i16> %3624 to <16 x i32>
  %3625 = shufflevector <16 x i32> %t1311.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3626 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %3625, i32 -4)
  %3627 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3626)
  %3628 = add nsw <32 x i32> %3627, %sum_input254399.sroa.0.0.vecblend721.us.us.2
  %3629 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3626)
  %3630 = add nsw <32 x i32> %3628, %3629
  %sum_input254399.sroa.0.0.vecblend721.us.us.3 = shufflevector <32 x i32> %3630, <32 x i32> %sum_input254399.sroa.0.0.vecblend721.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3631 = add nuw nsw i32 %"sum_input.s1.r19$x139.us.us", 4
  %niter1542.nsub.3 = add i32 %niter1542, -4
  %niter1542.ncmp.3 = icmp eq i32 %niter1542.nsub.3, 0
  br i1 %niter1542.ncmp.3, label %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x137.us.us"

"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x137.us.us", %"for sum_input.s1.r19$x137.preheader.us.us"
  %sum_input254399.sroa.0.0.vecblend721.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x137.preheader.us.us" ], [ %sum_input254399.sroa.0.0.vecblend721.us.us.3, %"for sum_input.s1.r19$x137.us.us" ]
  %sum_input254399.sroa.0.13.us.us.unr = phi <32 x i32> [ %sum_input254399.sroa.0.12.us.us, %"for sum_input.s1.r19$x137.preheader.us.us" ], [ %sum_input254399.sroa.0.0.vecblend721.us.us.3, %"for sum_input.s1.r19$x137.us.us" ]
  %"sum_input.s1.r19$x139.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x137.preheader.us.us" ], [ %3631, %"for sum_input.s1.r19$x137.us.us" ]
  br i1 %lcmp.mod1539.not, label %"end for sum_input.s1.r19$x138.us.us", label %"for sum_input.s1.r19$x137.us.us.epil"

"for sum_input.s1.r19$x137.us.us.epil":           ; preds = %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x137.us.us.epil"
  %sum_input254399.sroa.0.13.us.us.epil = phi <32 x i32> [ %sum_input254399.sroa.0.0.vecblend721.us.us.epil, %"for sum_input.s1.r19$x137.us.us.epil" ], [ %sum_input254399.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x139.us.us.epil" = phi i32 [ %3651, %"for sum_input.s1.r19$x137.us.us.epil" ], [ %"sum_input.s1.r19$x139.us.us.unr", %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa" ]
  %epil.iter1538 = phi i32 [ %epil.iter1538.sub, %"for sum_input.s1.r19$x137.us.us.epil" ], [ %xtraiter1537, %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa" ]
  %3632 = mul nsw i32 %"sum_input.s1.r19$x139.us.us.epil", %dilation_x
  %reass.add801.us.us.epil = add i32 %3978, %3632
  %reass.mul802.us.us.epil = shl i32 %reass.add801.us.us.epil, 2
  %3633 = add i32 %t1069.us.us, %reass.mul802.us.us.epil
  %3634 = getelementptr inbounds i8, i8* %13, i32 %3633
  %3635 = bitcast i8* %3634 to <32 x i8>*
  %3636 = load <32 x i8>, <32 x i8>* %3635, align 4, !tbaa !109
  %t1312.us.us.epil = zext <32 x i8> %3636 to <32 x i16>
  %3637 = shufflevector <32 x i16> %t1312.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3638 = bitcast <64 x i16> %3637 to <32 x i32>
  %3639 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %3638)
  %3640 = bitcast <32 x i32> %3639 to <64 x i16>
  %3641 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %3638)
  %3642 = bitcast <32 x i32> %3641 to <64 x i16>
  %3643 = add <64 x i16> %3642, %3640
  %3644 = shufflevector <64 x i16> %3643, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1311.us.us.epil = zext <16 x i16> %3644 to <16 x i32>
  %3645 = shufflevector <16 x i32> %t1311.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3646 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %3645, i32 -4)
  %3647 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3646)
  %3648 = add nsw <32 x i32> %3647, %sum_input254399.sroa.0.13.us.us.epil
  %3649 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3646)
  %3650 = add nsw <32 x i32> %3648, %3649
  %sum_input254399.sroa.0.0.vecblend721.us.us.epil = shufflevector <32 x i32> %3650, <32 x i32> %sum_input254399.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3651 = add nuw nsw i32 %"sum_input.s1.r19$x139.us.us.epil", 1
  %epil.iter1538.sub = add i32 %epil.iter1538, -1
  %epil.iter1538.cmp.not = icmp eq i32 %epil.iter1538.sub, 0
  br i1 %epil.iter1538.cmp.not, label %"end for sum_input.s1.r19$x138.us.us", label %"for sum_input.s1.r19$x137.us.us.epil", !llvm.loop !115

"end for sum_input.s1.r19$x138.us.us":            ; preds = %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x137.us.us.epil", %"for sum_input.s1.r19$y134.us.us"
  %sum_input254399.sroa.0.14.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.12.us.us, %"for sum_input.s1.r19$y134.us.us" ], [ %sum_input254399.sroa.0.0.vecblend721.us.us.lcssa.ph, %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa" ], [ %sum_input254399.sroa.0.0.vecblend721.us.us.epil, %"for sum_input.s1.r19$x137.us.us.epil" ]
  %3652 = add nuw nsw i32 %"sum_input.s1.r19$y136.us.us", 1
  %.not443.us.us = icmp eq i32 %3652, %11
  br i1 %.not443.us.us, label %"consume sum_input149.us.us", label %"for sum_input.s1.r19$y134.us.us"

"consume sum_input149.us.us":                     ; preds = %"end for sum_input.s1.r19$x144.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x138.us.us", %"for sum_input.s1.r19$y140.preheader.us.us", %then_bb132.us.us, %next_bb133.us.us, %"for output.s0.x.xo122.us.us"
  %sum_input254399.sroa.0.20.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.10.us.us, %"for output.s0.x.xo122.us.us" ], [ %sum_input254399.sroa.0.0.vecblend.us.us, %then_bb132.us.us ], [ %sum_input254399.sroa.0.0.vecblend.us.us, %next_bb133.us.us ], [ %sum_input254399.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y140.preheader.us.us" ], [ %sum_input254399.sroa.0.14.us.us, %"end for sum_input.s1.r19$x138.us.us" ], [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x144.loopexit.split.us.us.us.us.us" ]
  br i1 %3520, label %"for output.s0.c.co150.preheader.us.us", label %"end for output.s0.c.co151.us.us", !prof !96

"for output.s0.c.co150.us.us":                    ; preds = %"for output.s0.c.co150.preheader.us.us", %"consume convolved166.us.us"
  %output.s0.c.co152.us.us = phi i32 [ %3923, %"consume convolved166.us.us" ], [ 0, %"for output.s0.c.co150.preheader.us.us" ]
  %3653 = shl nsw i32 %output.s0.c.co152.us.us, 5
  %3654 = getelementptr inbounds i32, i32* %offset_c, i32 %3653
  %3655 = bitcast i32* %3654 to <32 x i32>*
  %3656 = load <32 x i32>, <32 x i32>* %3655, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb154.us.us, label %next_bb156.us.us

next_bb156.us.us:                                 ; preds = %"for output.s0.c.co150.us.us"
  %3657 = sub nsw <32 x i32> %3656, %3931
  %3658 = sub nsw <32 x i32> %3656, %3934
  %3659 = sub nsw <32 x i32> %3656, %3937
  %3660 = sub nsw <32 x i32> %3656, %3940
  %3661 = sub nsw <32 x i32> %3656, %3943
  %3662 = sub nsw <32 x i32> %3656, %3946
  %3663 = sub nsw <32 x i32> %3656, %3949
  %3664 = sub nsw <32 x i32> %3656, %3952
  br label %after_bb154.us.us

after_bb154.us.us:                                ; preds = %"for output.s0.c.co150.us.us", %next_bb156.us.us
  %convolved400.sroa.123.7.us.us = phi <32 x i32> [ %3664, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  %convolved400.sroa.113.7.us.us = phi <32 x i32> [ %3663, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  %convolved400.sroa.103.7.us.us = phi <32 x i32> [ %3662, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  %convolved400.sroa.93.7.us.us = phi <32 x i32> [ %3661, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  %convolved400.sroa.78.7.us.us = phi <32 x i32> [ %3660, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  %convolved400.sroa.63.7.us.us = phi <32 x i32> [ %3659, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  %convolved400.sroa.48.7.us.us = phi <32 x i32> [ %3658, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  %convolved400.sroa.0.21.us.us = phi <32 x i32> [ %3657, %next_bb156.us.us ], [ %3656, %"for output.s0.c.co150.us.us" ]
  br i1 %3516, label %"for convolved.s1.r19$y157.preheader.us.us", label %"consume convolved166.us.us", !prof !96

"consume convolved166.us.us":                     ; preds = %"end for convolved.s1.r19$x161.loopexit.us.us.us", %"for convolved.s1.r19$y157.preheader.us.us", %after_bb154.us.us
  %convolved400.sroa.123.13.us.us = phi <32 x i32> [ %convolved400.sroa.123.7.us.us, %after_bb154.us.us ], [ %convolved400.sroa.123.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1019.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %convolved400.sroa.113.13.us.us = phi <32 x i32> [ %convolved400.sroa.113.7.us.us, %after_bb154.us.us ], [ %convolved400.sroa.113.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1020.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %convolved400.sroa.103.13.us.us = phi <32 x i32> [ %convolved400.sroa.103.7.us.us, %after_bb154.us.us ], [ %convolved400.sroa.103.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1021.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %convolved400.sroa.93.13.us.us = phi <32 x i32> [ %convolved400.sroa.93.7.us.us, %after_bb154.us.us ], [ %convolved400.sroa.93.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1022.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %convolved400.sroa.78.13.us.us = phi <32 x i32> [ %convolved400.sroa.78.7.us.us, %after_bb154.us.us ], [ %convolved400.sroa.78.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1023.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %convolved400.sroa.63.13.us.us = phi <32 x i32> [ %convolved400.sroa.63.7.us.us, %after_bb154.us.us ], [ %convolved400.sroa.63.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1024.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %convolved400.sroa.48.13.us.us = phi <32 x i32> [ %convolved400.sroa.48.7.us.us, %after_bb154.us.us ], [ %convolved400.sroa.48.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1025.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %convolved400.sroa.0.27.us.us = phi <32 x i32> [ %convolved400.sroa.0.21.us.us, %after_bb154.us.us ], [ %convolved400.sroa.0.21.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ], [ %.us-phi1026.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ]
  %3665 = sext <32 x i32> %convolved400.sroa.0.27.us.us to <32 x i64>
  %3666 = mul nsw <32 x i64> %3665, %3523
  %3667 = ashr <32 x i64> %3666, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3668 = add nsw <32 x i64> %3667, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a72.us.us = ashr <32 x i64> %3668, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3669 = icmp slt <32 x i64> %a72.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a71.us.us = select <32 x i1> %3669, <32 x i64> %a72.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3670 = icmp sgt <32 x i64> %a71.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3671 = select <32 x i1> %3670, <32 x i64> %a71.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3672 = trunc <32 x i64> %3671 to <32 x i32>
  %3673 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3672, i32 %output_shift) #11
  %3674 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3672, i32 %3526) #11
  %3675 = and <32 x i32> %3674, %3525
  %3676 = add nsw <32 x i32> %3675, %3673
  %3677 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3676, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3678 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3677, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3679 = trunc <32 x i32> %3678 to <32 x i16>
  %3680 = shufflevector <32 x i16> %3679, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3681 = bitcast <64 x i16> %3680 to <32 x i32>
  %3682 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3681, <32 x i32> %3530) #11
  %3683 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3682, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3684 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3683, <32 x i32> zeroinitializer) #11
  %3685 = bitcast <32 x i32> %3684 to <64 x i16>
  %3686 = shufflevector <64 x i16> %3685, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3687 = trunc <32 x i16> %3686 to <32 x i8>
  %3688 = shufflevector <32 x i8> %3687, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3689 = bitcast <128 x i8> %3688 to <32 x i32>
  %3690 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3689, <32 x i32> %3533) #11
  %3691 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3690, <32 x i32> %3536) #11
  %3692 = bitcast <32 x i32> %3691 to <128 x i8>
  %3693 = shufflevector <128 x i8> %3692, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3694 = shl nsw i32 %output.s0.c.co152.us.us, 5
  %3695 = add i32 %3694, %t1066.us.us
  %3696 = add i32 %3695, %3969
  %3697 = getelementptr inbounds i8, i8* %23, i32 %3696
  %3698 = bitcast i8* %3697 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3698, align 1, !tbaa !112
  %3699 = sext <32 x i32> %convolved400.sroa.48.13.us.us to <32 x i64>
  %3700 = mul nsw <32 x i64> %3699, %3523
  %3701 = ashr <32 x i64> %3700, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3702 = add nsw <32 x i64> %3701, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a76.us.us = ashr <32 x i64> %3702, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3703 = icmp slt <32 x i64> %a76.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a75.us.us = select <32 x i1> %3703, <32 x i64> %a76.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3704 = icmp sgt <32 x i64> %a75.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3705 = select <32 x i1> %3704, <32 x i64> %a75.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3706 = trunc <32 x i64> %3705 to <32 x i32>
  %3707 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3706, i32 %output_shift) #11
  %3708 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3706, i32 %3526) #11
  %3709 = and <32 x i32> %3708, %3525
  %3710 = add nsw <32 x i32> %3709, %3707
  %3711 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3710, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3712 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3711, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3713 = trunc <32 x i32> %3712 to <32 x i16>
  %3714 = shufflevector <32 x i16> %3713, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3715 = bitcast <64 x i16> %3714 to <32 x i32>
  %3716 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3715, <32 x i32> %3530) #11
  %3717 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3716, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3718 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3717, <32 x i32> zeroinitializer) #11
  %3719 = bitcast <32 x i32> %3718 to <64 x i16>
  %3720 = shufflevector <64 x i16> %3719, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3721 = trunc <32 x i16> %3720 to <32 x i8>
  %3722 = shufflevector <32 x i8> %3721, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3723 = bitcast <128 x i8> %3722 to <32 x i32>
  %3724 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3723, <32 x i32> %3533) #11
  %3725 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3724, <32 x i32> %3536) #11
  %3726 = bitcast <32 x i32> %3725 to <128 x i8>
  %3727 = shufflevector <128 x i8> %3726, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3728 = add i32 %3695, %3970
  %3729 = getelementptr inbounds i8, i8* %23, i32 %3728
  %3730 = bitcast i8* %3729 to <32 x i8>*
  store <32 x i8> %3727, <32 x i8>* %3730, align 1, !tbaa !112
  %3731 = sext <32 x i32> %convolved400.sroa.63.13.us.us to <32 x i64>
  %3732 = mul nsw <32 x i64> %3731, %3523
  %3733 = ashr <32 x i64> %3732, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3734 = add nsw <32 x i64> %3733, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a80.us.us = ashr <32 x i64> %3734, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3735 = icmp slt <32 x i64> %a80.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a79.us.us = select <32 x i1> %3735, <32 x i64> %a80.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3736 = icmp sgt <32 x i64> %a79.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3737 = select <32 x i1> %3736, <32 x i64> %a79.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3738 = trunc <32 x i64> %3737 to <32 x i32>
  %3739 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3738, i32 %output_shift) #11
  %3740 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3738, i32 %3526) #11
  %3741 = and <32 x i32> %3740, %3525
  %3742 = add nsw <32 x i32> %3741, %3739
  %3743 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3742, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3744 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3743, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3745 = trunc <32 x i32> %3744 to <32 x i16>
  %3746 = shufflevector <32 x i16> %3745, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3747 = bitcast <64 x i16> %3746 to <32 x i32>
  %3748 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3747, <32 x i32> %3530) #11
  %3749 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3748, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3750 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3749, <32 x i32> zeroinitializer) #11
  %3751 = bitcast <32 x i32> %3750 to <64 x i16>
  %3752 = shufflevector <64 x i16> %3751, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3753 = trunc <32 x i16> %3752 to <32 x i8>
  %3754 = shufflevector <32 x i8> %3753, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3755 = bitcast <128 x i8> %3754 to <32 x i32>
  %3756 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3755, <32 x i32> %3533) #11
  %3757 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3756, <32 x i32> %3536) #11
  %3758 = bitcast <32 x i32> %3757 to <128 x i8>
  %3759 = shufflevector <128 x i8> %3758, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3760 = add i32 %3695, %3971
  %3761 = getelementptr inbounds i8, i8* %23, i32 %3760
  %3762 = bitcast i8* %3761 to <32 x i8>*
  store <32 x i8> %3759, <32 x i8>* %3762, align 1, !tbaa !112
  %3763 = sext <32 x i32> %convolved400.sroa.78.13.us.us to <32 x i64>
  %3764 = mul nsw <32 x i64> %3763, %3523
  %3765 = ashr <32 x i64> %3764, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3766 = add nsw <32 x i64> %3765, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a84.us.us = ashr <32 x i64> %3766, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3767 = icmp slt <32 x i64> %a84.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a83.us.us = select <32 x i1> %3767, <32 x i64> %a84.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3768 = icmp sgt <32 x i64> %a83.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3769 = select <32 x i1> %3768, <32 x i64> %a83.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3770 = trunc <32 x i64> %3769 to <32 x i32>
  %3771 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3770, i32 %output_shift) #11
  %3772 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3770, i32 %3526) #11
  %3773 = and <32 x i32> %3772, %3525
  %3774 = add nsw <32 x i32> %3773, %3771
  %3775 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3774, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3776 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3775, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3777 = trunc <32 x i32> %3776 to <32 x i16>
  %3778 = shufflevector <32 x i16> %3777, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3779 = bitcast <64 x i16> %3778 to <32 x i32>
  %3780 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3779, <32 x i32> %3530) #11
  %3781 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3780, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3782 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3781, <32 x i32> zeroinitializer) #11
  %3783 = bitcast <32 x i32> %3782 to <64 x i16>
  %3784 = shufflevector <64 x i16> %3783, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3785 = trunc <32 x i16> %3784 to <32 x i8>
  %3786 = shufflevector <32 x i8> %3785, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3787 = bitcast <128 x i8> %3786 to <32 x i32>
  %3788 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3787, <32 x i32> %3533) #11
  %3789 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3788, <32 x i32> %3536) #11
  %3790 = bitcast <32 x i32> %3789 to <128 x i8>
  %3791 = shufflevector <128 x i8> %3790, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3792 = add i32 %3695, %3972
  %3793 = getelementptr inbounds i8, i8* %23, i32 %3792
  %3794 = bitcast i8* %3793 to <32 x i8>*
  store <32 x i8> %3791, <32 x i8>* %3794, align 1, !tbaa !112
  %3795 = sext <32 x i32> %convolved400.sroa.93.13.us.us to <32 x i64>
  %3796 = mul nsw <32 x i64> %3795, %3523
  %3797 = ashr <32 x i64> %3796, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3798 = add nsw <32 x i64> %3797, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a88.us.us = ashr <32 x i64> %3798, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3799 = icmp slt <32 x i64> %a88.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a87.us.us = select <32 x i1> %3799, <32 x i64> %a88.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3800 = icmp sgt <32 x i64> %a87.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3801 = select <32 x i1> %3800, <32 x i64> %a87.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3802 = trunc <32 x i64> %3801 to <32 x i32>
  %3803 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3802, i32 %output_shift) #11
  %3804 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3802, i32 %3526) #11
  %3805 = and <32 x i32> %3804, %3525
  %3806 = add nsw <32 x i32> %3805, %3803
  %3807 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3806, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3808 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3807, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3809 = trunc <32 x i32> %3808 to <32 x i16>
  %3810 = shufflevector <32 x i16> %3809, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3811 = bitcast <64 x i16> %3810 to <32 x i32>
  %3812 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3811, <32 x i32> %3530) #11
  %3813 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3812, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3814 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3813, <32 x i32> zeroinitializer) #11
  %3815 = bitcast <32 x i32> %3814 to <64 x i16>
  %3816 = shufflevector <64 x i16> %3815, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3817 = trunc <32 x i16> %3816 to <32 x i8>
  %3818 = shufflevector <32 x i8> %3817, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3819 = bitcast <128 x i8> %3818 to <32 x i32>
  %3820 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3819, <32 x i32> %3533) #11
  %3821 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3820, <32 x i32> %3536) #11
  %3822 = bitcast <32 x i32> %3821 to <128 x i8>
  %3823 = shufflevector <128 x i8> %3822, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3824 = add i32 %3695, %3973
  %3825 = getelementptr inbounds i8, i8* %23, i32 %3824
  %3826 = bitcast i8* %3825 to <32 x i8>*
  store <32 x i8> %3823, <32 x i8>* %3826, align 1, !tbaa !112
  %3827 = sext <32 x i32> %convolved400.sroa.103.13.us.us to <32 x i64>
  %3828 = mul nsw <32 x i64> %3827, %3523
  %3829 = ashr <32 x i64> %3828, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3830 = add nsw <32 x i64> %3829, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a92.us.us = ashr <32 x i64> %3830, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3831 = icmp slt <32 x i64> %a92.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a91.us.us = select <32 x i1> %3831, <32 x i64> %a92.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3832 = icmp sgt <32 x i64> %a91.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3833 = select <32 x i1> %3832, <32 x i64> %a91.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3834 = trunc <32 x i64> %3833 to <32 x i32>
  %3835 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3834, i32 %output_shift) #11
  %3836 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3834, i32 %3526) #11
  %3837 = and <32 x i32> %3836, %3525
  %3838 = add nsw <32 x i32> %3837, %3835
  %3839 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3838, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3840 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3839, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3841 = trunc <32 x i32> %3840 to <32 x i16>
  %3842 = shufflevector <32 x i16> %3841, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3843 = bitcast <64 x i16> %3842 to <32 x i32>
  %3844 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3843, <32 x i32> %3530) #11
  %3845 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3844, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3846 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3845, <32 x i32> zeroinitializer) #11
  %3847 = bitcast <32 x i32> %3846 to <64 x i16>
  %3848 = shufflevector <64 x i16> %3847, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3849 = trunc <32 x i16> %3848 to <32 x i8>
  %3850 = shufflevector <32 x i8> %3849, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3851 = bitcast <128 x i8> %3850 to <32 x i32>
  %3852 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3851, <32 x i32> %3533) #11
  %3853 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3852, <32 x i32> %3536) #11
  %3854 = bitcast <32 x i32> %3853 to <128 x i8>
  %3855 = shufflevector <128 x i8> %3854, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3856 = add i32 %3695, %3974
  %3857 = getelementptr inbounds i8, i8* %23, i32 %3856
  %3858 = bitcast i8* %3857 to <32 x i8>*
  store <32 x i8> %3855, <32 x i8>* %3858, align 1, !tbaa !112
  %3859 = sext <32 x i32> %convolved400.sroa.113.13.us.us to <32 x i64>
  %3860 = mul nsw <32 x i64> %3859, %3523
  %3861 = ashr <32 x i64> %3860, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3862 = add nsw <32 x i64> %3861, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a96.us.us = ashr <32 x i64> %3862, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3863 = icmp slt <32 x i64> %a96.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a95.us.us = select <32 x i1> %3863, <32 x i64> %a96.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3864 = icmp sgt <32 x i64> %a95.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3865 = select <32 x i1> %3864, <32 x i64> %a95.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3866 = trunc <32 x i64> %3865 to <32 x i32>
  %3867 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3866, i32 %output_shift) #11
  %3868 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3866, i32 %3526) #11
  %3869 = and <32 x i32> %3868, %3525
  %3870 = add nsw <32 x i32> %3869, %3867
  %3871 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3870, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3872 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3871, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3873 = trunc <32 x i32> %3872 to <32 x i16>
  %3874 = shufflevector <32 x i16> %3873, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3875 = bitcast <64 x i16> %3874 to <32 x i32>
  %3876 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3875, <32 x i32> %3530) #11
  %3877 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3876, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3878 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3877, <32 x i32> zeroinitializer) #11
  %3879 = bitcast <32 x i32> %3878 to <64 x i16>
  %3880 = shufflevector <64 x i16> %3879, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3881 = trunc <32 x i16> %3880 to <32 x i8>
  %3882 = shufflevector <32 x i8> %3881, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3883 = bitcast <128 x i8> %3882 to <32 x i32>
  %3884 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3883, <32 x i32> %3533) #11
  %3885 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3884, <32 x i32> %3536) #11
  %3886 = bitcast <32 x i32> %3885 to <128 x i8>
  %3887 = shufflevector <128 x i8> %3886, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3888 = add i32 %3695, %3975
  %3889 = getelementptr inbounds i8, i8* %23, i32 %3888
  %3890 = bitcast i8* %3889 to <32 x i8>*
  store <32 x i8> %3887, <32 x i8>* %3890, align 1, !tbaa !112
  %3891 = sext <32 x i32> %convolved400.sroa.123.13.us.us to <32 x i64>
  %3892 = mul nsw <32 x i64> %3891, %3523
  %3893 = ashr <32 x i64> %3892, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3894 = add nsw <32 x i64> %3893, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a100.us.us = ashr <32 x i64> %3894, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3895 = icmp slt <32 x i64> %a100.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a99.us.us = select <32 x i1> %3895, <32 x i64> %a100.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3896 = icmp sgt <32 x i64> %a99.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3897 = select <32 x i1> %3896, <32 x i64> %a99.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3898 = trunc <32 x i64> %3897 to <32 x i32>
  %3899 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3898, i32 %output_shift) #11
  %3900 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3898, i32 %3526) #11
  %3901 = and <32 x i32> %3900, %3525
  %3902 = add nsw <32 x i32> %3901, %3899
  %3903 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3902, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3904 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3903, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3905 = trunc <32 x i32> %3904 to <32 x i16>
  %3906 = shufflevector <32 x i16> %3905, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3907 = bitcast <64 x i16> %3906 to <32 x i32>
  %3908 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3907, <32 x i32> %3530) #11
  %3909 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3908, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3910 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3909, <32 x i32> zeroinitializer) #11
  %3911 = bitcast <32 x i32> %3910 to <64 x i16>
  %3912 = shufflevector <64 x i16> %3911, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3913 = trunc <32 x i16> %3912 to <32 x i8>
  %3914 = shufflevector <32 x i8> %3913, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3915 = bitcast <128 x i8> %3914 to <32 x i32>
  %3916 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3915, <32 x i32> %3533) #11
  %3917 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3916, <32 x i32> %3536) #11
  %3918 = bitcast <32 x i32> %3917 to <128 x i8>
  %3919 = shufflevector <128 x i8> %3918, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3920 = add i32 %3695, %3976
  %3921 = getelementptr inbounds i8, i8* %23, i32 %3920
  %3922 = bitcast i8* %3921 to <32 x i8>*
  store <32 x i8> %3919, <32 x i8>* %3922, align 1, !tbaa !112
  %3923 = add nuw nsw i32 %output.s0.c.co152.us.us, 1
  %.not436.us.us = icmp eq i32 %3923, %3519
  br i1 %.not436.us.us, label %"end for output.s0.c.co151.us.us", label %"for output.s0.c.co150.us.us"

"end for output.s0.c.co151.us.us":                ; preds = %"consume convolved166.us.us", %"consume sum_input149.us.us"
  %3924 = add nuw nsw i32 %output.s0.x.xo124.us.us, 1
  %.not435.us.us = icmp eq i32 %3924, %3515
  br i1 %.not435.us.us, label %"end for output.s0.x.xo123.loopexit.us.us", label %"for output.s0.x.xo122.us.us"

"for convolved.s1.r19$y157.preheader.us.us":      ; preds = %after_bb154.us.us
  %3925 = mul nsw i32 %output.s0.c.co152.us.us, %8
  br i1 %3517, label %"for convolved.s1.r19$y157.us.us.us", label %"consume convolved166.us.us", !prof !96

"for sum_input.s1.r19$x137.preheader.us.us":      ; preds = %"for sum_input.s1.r19$y134.us.us"
  %3926 = mul nsw i32 %"sum_input.s1.r19$y136.us.us", %dilation_y
  %3927 = add nsw i32 %3926, %3550
  %3928 = mul nsw i32 %3927, %19
  %t1069.us.us = add i32 %3545, %3928
  br i1 %3540, label %"end for sum_input.s1.r19$x138.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x137.us.us"

"for output.s0.c.co150.preheader.us.us":          ; preds = %"consume sum_input149.us.us"
  %sum_input254399.sroa.0.0.vec.extract741.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 0
  %3929 = mul nsw i32 %sum_input254399.sroa.0.0.vec.extract741.us.us, %361
  %3930 = insertelement <32 x i32> undef, i32 %3929, i32 0
  %3931 = shufflevector <32 x i32> %3930, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input254399.sroa.0.4.vec.extract.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 1
  %3932 = mul nsw i32 %sum_input254399.sroa.0.4.vec.extract.us.us, %361
  %3933 = insertelement <32 x i32> undef, i32 %3932, i32 0
  %3934 = shufflevector <32 x i32> %3933, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input254399.sroa.0.8.vec.extract.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 2
  %3935 = mul nsw i32 %sum_input254399.sroa.0.8.vec.extract.us.us, %361
  %3936 = insertelement <32 x i32> undef, i32 %3935, i32 0
  %3937 = shufflevector <32 x i32> %3936, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input254399.sroa.0.12.vec.extract.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 3
  %3938 = mul nsw i32 %sum_input254399.sroa.0.12.vec.extract.us.us, %361
  %3939 = insertelement <32 x i32> undef, i32 %3938, i32 0
  %3940 = shufflevector <32 x i32> %3939, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input254399.sroa.0.16.vec.extract.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 4
  %3941 = mul nsw i32 %sum_input254399.sroa.0.16.vec.extract.us.us, %361
  %3942 = insertelement <32 x i32> undef, i32 %3941, i32 0
  %3943 = shufflevector <32 x i32> %3942, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input254399.sroa.0.20.vec.extract.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 5
  %3944 = mul nsw i32 %sum_input254399.sroa.0.20.vec.extract.us.us, %361
  %3945 = insertelement <32 x i32> undef, i32 %3944, i32 0
  %3946 = shufflevector <32 x i32> %3945, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input254399.sroa.0.24.vec.extract.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 6
  %3947 = mul nsw i32 %sum_input254399.sroa.0.24.vec.extract.us.us, %361
  %3948 = insertelement <32 x i32> undef, i32 %3947, i32 0
  %3949 = shufflevector <32 x i32> %3948, <32 x i32> undef, <32 x i32> zeroinitializer
  %sum_input254399.sroa.0.28.vec.extract.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.20.us.us, i32 7
  %3950 = mul nsw i32 %sum_input254399.sroa.0.28.vec.extract.us.us, %361
  %3951 = insertelement <32 x i32> undef, i32 %3950, i32 0
  %3952 = shufflevector <32 x i32> %3951, <32 x i32> undef, <32 x i32> zeroinitializer
  %3953 = add nsw i32 %output.s0.x.x.base.s125.us.us, %25
  %3954 = add nsw i32 %3953, 7
  %3955 = mul nsw i32 %3954, %stride_x
  %3956 = add nsw i32 %3953, 6
  %3957 = mul nsw i32 %3956, %stride_x
  %3958 = add nsw i32 %3953, 5
  %3959 = mul nsw i32 %3958, %stride_x
  %3960 = add nsw i32 %3953, 4
  %3961 = mul nsw i32 %3960, %stride_x
  %3962 = add nsw i32 %3953, 3
  %3963 = mul nsw i32 %3962, %stride_x
  %3964 = add nsw i32 %3953, 2
  %3965 = mul nsw i32 %3964, %stride_x
  %3966 = add nsw i32 %3953, 1
  %3967 = mul nsw i32 %3966, %stride_x
  %3968 = mul nsw i32 %3953, %stride_x
  %3969 = mul nsw i32 %3953, %27
  %3970 = mul nsw i32 %3966, %27
  %3971 = mul nsw i32 %3964, %27
  %3972 = mul nsw i32 %3962, %27
  %3973 = mul nsw i32 %3960, %27
  %3974 = mul nsw i32 %3958, %27
  %3975 = mul nsw i32 %3956, %27
  %3976 = mul nsw i32 %3954, %27
  br label %"for output.s0.c.co150.us.us"

"for sum_input.s1.r19$y134.preheader.us.us":      ; preds = %then_bb132.us.us
  %3977 = add nsw i32 %output.s0.x.x.base.s125.us.us, %25
  %3978 = sub i32 %3977, %16
  br label %"for sum_input.s1.r19$y134.us.us"

"for sum_input.s1.r19$y140.preheader.us.us":      ; preds = %next_bb133.us.us
  %3979 = add nsw i32 %output.s0.x.x.base.s125.us.us, %25
  %3980 = mul nsw i32 %3979, %stride_x
  br i1 %brmerge1337.demorgan, label %"for sum_input.s1.r19$y140.us.us.us.us", label %"consume sum_input149.us.us", !prof !103

"end for output.s0.x.xo123.loopexit.us.us":       ; preds = %"end for output.s0.c.co151.us.us"
  %3981 = add nuw nsw i32 %output.s0.y.rebased121.us.us, 1
  %.not434.us.us = icmp eq i32 %3981, %29
  br i1 %.not434.us.us, label %"end for output.s0.y.rebased120.loopexit.us", label %"for output.s0.y.rebased119.us.us"

"for sum_input.s1.r19$y140.us.us.us.us":          ; preds = %"for sum_input.s1.r19$y140.preheader.us.us", %"end for sum_input.s1.r19$x144.loopexit.split.us.us.us.us.us"
  %sum_input254399.sroa.0.15.us.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x144.loopexit.split.us.us.us.us.us" ], [ %sum_input254399.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y140.preheader.us.us" ]
  %"sum_input.s1.r19$y142.us.us.us.us" = phi i32 [ %4172, %"end for sum_input.s1.r19$x144.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y140.preheader.us.us" ]
  %3982 = mul nsw i32 %"sum_input.s1.r19$y142.us.us.us.us", %dilation_y
  %t1071.s.us.us.us.us = add nsw i32 %3982, %3550
  %3983 = mul nsw i32 %t1071.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x143.us.us.us.us.us"

"for sum_input.s1.r19$x143.us.us.us.us.us":       ; preds = %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y140.us.us.us.us"
  %sum_input254399.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us" ], [ %sum_input254399.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y140.us.us.us.us" ]
  %"sum_input.s1.r19$x145.us.us.us.us.us" = phi i32 [ %4171, %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y140.us.us.us.us" ]
  %3984 = mul nsw i32 %"sum_input.s1.r19$x145.us.us.us.us.us", %dilation_x
  %t1072.s.us.us.us.us.us = add nsw i32 %3984, %3980
  %t1313.us.us.us.us.us = mul nsw i32 %t1072.s.us.us.us.us.us, %17
  %3985 = add i32 %t1313.us.us.us.us.us, %3983
  %t1073.us.us.us.us.us = sub i32 %3985, %t1037
  %3986 = add i32 %t1073.us.us.us.us.us, %3544
  %t1045.us.us.us.us.us = add i32 %3985, %3512
  %3987 = sub i32 %t1045.us.us.us.us.us, %3499
  %t1074.us.us.us.us.us = sub i32 %3987, %3500
  %3988 = add i32 %t1074.us.us.us.us.us, %3544
  %3989 = add i32 %3985, %3510
  %3990 = sub i32 %3989, %3537
  %t1075.us.us.us.us.us = sub i32 %3990, %3500
  %3991 = add i32 %t1075.us.us.us.us.us, %3544
  %3992 = add i32 %3985, %3509
  %3993 = sub i32 %3992, %3537
  %t1076.us.us.us.us.us = sub i32 %3993, %3500
  %3994 = add i32 %t1076.us.us.us.us.us, %3544
  %3995 = add i32 %3985, %3508
  %3996 = sub i32 %3995, %3537
  %t1077.us.us.us.us.us = sub i32 %3996, %3500
  %3997 = add i32 %t1077.us.us.us.us.us, %3544
  %3998 = add i32 %3985, %3507
  %3999 = sub i32 %3998, %3537
  %t1078.us.us.us.us.us = sub i32 %3999, %3500
  %4000 = add i32 %t1078.us.us.us.us.us, %3544
  %4001 = add i32 %3985, %3506
  %4002 = sub i32 %4001, %3537
  %t1079.us.us.us.us.us = sub i32 %4002, %3500
  %4003 = add i32 %t1079.us.us.us.us.us, %3544
  %4004 = add i32 %3985, %3505
  %4005 = sub i32 %4004, %3537
  %t1080.us.us.us.us.us = sub i32 %4005, %3500
  %4006 = add i32 %t1080.us.us.us.us.us, %3544
  br i1 %3539, label %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124146.us.us.us.us.us"

"for sum_input.s1.r19$z.r124146.us.us.us.us.us":  ; preds = %"for sum_input.s1.r19$x143.us.us.us.us.us", %"for sum_input.s1.r19$z.r124146.us.us.us.us.us"
  %sum_input254399.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124146.us.us.us.us.us" ], [ %sum_input254399.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x143.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124148.us.us.us.us.us" = phi i32 [ %4116, %"for sum_input.s1.r19$z.r124146.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x143.us.us.us.us.us" ]
  %niter1536 = phi i32 [ %niter1536.nsub.1, %"for sum_input.s1.r19$z.r124146.us.us.us.us.us" ], [ %unroll_iter1535, %"for sum_input.s1.r19$x143.us.us.us.us.us" ]
  %4007 = shl nsw i32 %"sum_input.s1.r19$z.r124148.us.us.us.us.us", 2
  %4008 = add i32 %3986, %4007
  %4009 = getelementptr inbounds i8, i8* %13, i32 %4008
  %4010 = bitcast i8* %4009 to <4 x i8>*
  %4011 = load <4 x i8>, <4 x i8>* %4010, align 4, !tbaa !109
  %4012 = add i32 %3988, %4007
  %4013 = getelementptr inbounds i8, i8* %13, i32 %4012
  %4014 = bitcast i8* %4013 to <4 x i8>*
  %4015 = load <4 x i8>, <4 x i8>* %4014, align 4, !tbaa !109
  %4016 = add i32 %3991, %4007
  %4017 = getelementptr inbounds i8, i8* %13, i32 %4016
  %4018 = bitcast i8* %4017 to <4 x i8>*
  %4019 = load <4 x i8>, <4 x i8>* %4018, align 4, !tbaa !109
  %4020 = add i32 %3994, %4007
  %4021 = getelementptr inbounds i8, i8* %13, i32 %4020
  %4022 = bitcast i8* %4021 to <4 x i8>*
  %4023 = load <4 x i8>, <4 x i8>* %4022, align 4, !tbaa !109
  %4024 = add i32 %3997, %4007
  %4025 = getelementptr inbounds i8, i8* %13, i32 %4024
  %4026 = bitcast i8* %4025 to <4 x i8>*
  %4027 = load <4 x i8>, <4 x i8>* %4026, align 4, !tbaa !109
  %4028 = add i32 %4000, %4007
  %4029 = getelementptr inbounds i8, i8* %13, i32 %4028
  %4030 = bitcast i8* %4029 to <4 x i8>*
  %4031 = load <4 x i8>, <4 x i8>* %4030, align 4, !tbaa !109
  %4032 = add i32 %4003, %4007
  %4033 = getelementptr inbounds i8, i8* %13, i32 %4032
  %4034 = bitcast i8* %4033 to <4 x i8>*
  %4035 = load <4 x i8>, <4 x i8>* %4034, align 4, !tbaa !109
  %4036 = add i32 %4006, %4007
  %4037 = getelementptr inbounds i8, i8* %13, i32 %4036
  %4038 = bitcast i8* %4037 to <4 x i8>*
  %4039 = load <4 x i8>, <4 x i8>* %4038, align 4, !tbaa !109
  %4040 = shufflevector <4 x i8> %4011, <4 x i8> %4015, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4041 = shufflevector <4 x i8> %4019, <4 x i8> %4023, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4042 = shufflevector <4 x i8> %4027, <4 x i8> %4031, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4043 = shufflevector <4 x i8> %4035, <4 x i8> %4039, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4044 = shufflevector <8 x i8> %4040, <8 x i8> %4041, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4045 = shufflevector <8 x i8> %4042, <8 x i8> %4043, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4046 = shufflevector <16 x i8> %4044, <16 x i8> %4045, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1315.us.us.us.us.us = zext <32 x i8> %4046 to <32 x i16>
  %4047 = shufflevector <32 x i16> %t1315.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4048 = bitcast <64 x i16> %4047 to <32 x i32>
  %4049 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %4048)
  %4050 = bitcast <32 x i32> %4049 to <64 x i16>
  %4051 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %4048)
  %4052 = bitcast <32 x i32> %4051 to <64 x i16>
  %4053 = add <64 x i16> %4052, %4050
  %4054 = shufflevector <64 x i16> %4053, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1314.us.us.us.us.us = zext <16 x i16> %4054 to <16 x i32>
  %4055 = shufflevector <16 x i32> %t1314.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4056 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %4055, i32 -4)
  %4057 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4056)
  %4058 = add nsw <32 x i32> %4057, %sum_input254399.sroa.0.18.us.us.us.us.us
  %4059 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4056)
  %4060 = add nsw <32 x i32> %4058, %4059
  %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us = shufflevector <32 x i32> %4060, <32 x i32> %sum_input254399.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4061 = shl i32 %"sum_input.s1.r19$z.r124148.us.us.us.us.us", 2
  %4062 = or i32 %4061, 4
  %4063 = add i32 %3986, %4062
  %4064 = getelementptr inbounds i8, i8* %13, i32 %4063
  %4065 = bitcast i8* %4064 to <4 x i8>*
  %4066 = load <4 x i8>, <4 x i8>* %4065, align 4, !tbaa !109
  %4067 = add i32 %3988, %4062
  %4068 = getelementptr inbounds i8, i8* %13, i32 %4067
  %4069 = bitcast i8* %4068 to <4 x i8>*
  %4070 = load <4 x i8>, <4 x i8>* %4069, align 4, !tbaa !109
  %4071 = add i32 %3991, %4062
  %4072 = getelementptr inbounds i8, i8* %13, i32 %4071
  %4073 = bitcast i8* %4072 to <4 x i8>*
  %4074 = load <4 x i8>, <4 x i8>* %4073, align 4, !tbaa !109
  %4075 = add i32 %3994, %4062
  %4076 = getelementptr inbounds i8, i8* %13, i32 %4075
  %4077 = bitcast i8* %4076 to <4 x i8>*
  %4078 = load <4 x i8>, <4 x i8>* %4077, align 4, !tbaa !109
  %4079 = add i32 %3997, %4062
  %4080 = getelementptr inbounds i8, i8* %13, i32 %4079
  %4081 = bitcast i8* %4080 to <4 x i8>*
  %4082 = load <4 x i8>, <4 x i8>* %4081, align 4, !tbaa !109
  %4083 = add i32 %4000, %4062
  %4084 = getelementptr inbounds i8, i8* %13, i32 %4083
  %4085 = bitcast i8* %4084 to <4 x i8>*
  %4086 = load <4 x i8>, <4 x i8>* %4085, align 4, !tbaa !109
  %4087 = add i32 %4003, %4062
  %4088 = getelementptr inbounds i8, i8* %13, i32 %4087
  %4089 = bitcast i8* %4088 to <4 x i8>*
  %4090 = load <4 x i8>, <4 x i8>* %4089, align 4, !tbaa !109
  %4091 = add i32 %4006, %4062
  %4092 = getelementptr inbounds i8, i8* %13, i32 %4091
  %4093 = bitcast i8* %4092 to <4 x i8>*
  %4094 = load <4 x i8>, <4 x i8>* %4093, align 4, !tbaa !109
  %4095 = shufflevector <4 x i8> %4066, <4 x i8> %4070, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4096 = shufflevector <4 x i8> %4074, <4 x i8> %4078, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4097 = shufflevector <4 x i8> %4082, <4 x i8> %4086, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4098 = shufflevector <4 x i8> %4090, <4 x i8> %4094, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4099 = shufflevector <8 x i8> %4095, <8 x i8> %4096, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4100 = shufflevector <8 x i8> %4097, <8 x i8> %4098, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4101 = shufflevector <16 x i8> %4099, <16 x i8> %4100, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1315.us.us.us.us.us.1 = zext <32 x i8> %4101 to <32 x i16>
  %4102 = shufflevector <32 x i16> %t1315.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4103 = bitcast <64 x i16> %4102 to <32 x i32>
  %4104 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %4103)
  %4105 = bitcast <32 x i32> %4104 to <64 x i16>
  %4106 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %4103)
  %4107 = bitcast <32 x i32> %4106 to <64 x i16>
  %4108 = add <64 x i16> %4107, %4105
  %4109 = shufflevector <64 x i16> %4108, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1314.us.us.us.us.us.1 = zext <16 x i16> %4109 to <16 x i32>
  %4110 = shufflevector <16 x i32> %t1314.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4111 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %4110, i32 -4)
  %4112 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4111)
  %4113 = add nsw <32 x i32> %4112, %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us
  %4114 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4111)
  %4115 = add nsw <32 x i32> %4113, %4114
  %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.1 = shufflevector <32 x i32> %4115, <32 x i32> %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4116 = add nuw nsw i32 %"sum_input.s1.r19$z.r124148.us.us.us.us.us", 2
  %niter1536.nsub.1 = add i32 %niter1536, -2
  %niter1536.ncmp.1 = icmp eq i32 %niter1536.nsub.1, 0
  br i1 %niter1536.ncmp.1, label %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124146.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124146.us.us.us.us.us", %"for sum_input.s1.r19$x143.us.us.us.us.us"
  %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x143.us.us.us.us.us" ], [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124146.us.us.us.us.us" ]
  %sum_input254399.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %sum_input254399.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x143.us.us.us.us.us" ], [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124146.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124148.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x143.us.us.us.us.us" ], [ %4116, %"for sum_input.s1.r19$z.r124146.us.us.us.us.us" ]
  br i1 %lcmp.mod1534.not, label %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124146.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124146.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us.unr-lcssa"
  %4117 = shl nsw i32 %"sum_input.s1.r19$z.r124148.us.us.us.us.us.unr", 2
  %4118 = add i32 %3986, %4117
  %4119 = getelementptr inbounds i8, i8* %13, i32 %4118
  %4120 = bitcast i8* %4119 to <4 x i8>*
  %4121 = load <4 x i8>, <4 x i8>* %4120, align 4, !tbaa !109
  %4122 = add i32 %3988, %4117
  %4123 = getelementptr inbounds i8, i8* %13, i32 %4122
  %4124 = bitcast i8* %4123 to <4 x i8>*
  %4125 = load <4 x i8>, <4 x i8>* %4124, align 4, !tbaa !109
  %4126 = add i32 %3991, %4117
  %4127 = getelementptr inbounds i8, i8* %13, i32 %4126
  %4128 = bitcast i8* %4127 to <4 x i8>*
  %4129 = load <4 x i8>, <4 x i8>* %4128, align 4, !tbaa !109
  %4130 = add i32 %3994, %4117
  %4131 = getelementptr inbounds i8, i8* %13, i32 %4130
  %4132 = bitcast i8* %4131 to <4 x i8>*
  %4133 = load <4 x i8>, <4 x i8>* %4132, align 4, !tbaa !109
  %4134 = add i32 %3997, %4117
  %4135 = getelementptr inbounds i8, i8* %13, i32 %4134
  %4136 = bitcast i8* %4135 to <4 x i8>*
  %4137 = load <4 x i8>, <4 x i8>* %4136, align 4, !tbaa !109
  %4138 = add i32 %4000, %4117
  %4139 = getelementptr inbounds i8, i8* %13, i32 %4138
  %4140 = bitcast i8* %4139 to <4 x i8>*
  %4141 = load <4 x i8>, <4 x i8>* %4140, align 4, !tbaa !109
  %4142 = add i32 %4003, %4117
  %4143 = getelementptr inbounds i8, i8* %13, i32 %4142
  %4144 = bitcast i8* %4143 to <4 x i8>*
  %4145 = load <4 x i8>, <4 x i8>* %4144, align 4, !tbaa !109
  %4146 = add i32 %4006, %4117
  %4147 = getelementptr inbounds i8, i8* %13, i32 %4146
  %4148 = bitcast i8* %4147 to <4 x i8>*
  %4149 = load <4 x i8>, <4 x i8>* %4148, align 4, !tbaa !109
  %4150 = shufflevector <4 x i8> %4121, <4 x i8> %4125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4151 = shufflevector <4 x i8> %4129, <4 x i8> %4133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4152 = shufflevector <4 x i8> %4137, <4 x i8> %4141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4153 = shufflevector <4 x i8> %4145, <4 x i8> %4149, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4154 = shufflevector <8 x i8> %4150, <8 x i8> %4151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4155 = shufflevector <8 x i8> %4152, <8 x i8> %4153, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4156 = shufflevector <16 x i8> %4154, <16 x i8> %4155, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1315.us.us.us.us.us.epil = zext <32 x i8> %4156 to <32 x i16>
  %4157 = shufflevector <32 x i16> %t1315.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4158 = bitcast <64 x i16> %4157 to <32 x i32>
  %4159 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %4158)
  %4160 = bitcast <32 x i32> %4159 to <64 x i16>
  %4161 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %4158)
  %4162 = bitcast <32 x i32> %4161 to <64 x i16>
  %4163 = add <64 x i16> %4162, %4160
  %4164 = shufflevector <64 x i16> %4163, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1314.us.us.us.us.us.epil = zext <16 x i16> %4164 to <16 x i32>
  %4165 = shufflevector <16 x i32> %t1314.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4166 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %4165, i32 -4)
  %4167 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4166)
  %4168 = add nsw <32 x i32> %4167, %sum_input254399.sroa.0.18.us.us.us.us.us.unr
  %4169 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4166)
  %4170 = add nsw <32 x i32> %4168, %4169
  %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.epil = shufflevector <32 x i32> %4170, <32 x i32> %sum_input254399.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124146.us.us.us.us.us.epil"
  %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.lcssa = phi <32 x i32> [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us.unr-lcssa" ], [ %sum_input254399.sroa.0.0.vecblend726.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124146.us.us.us.us.us.epil" ]
  %4171 = add nuw nsw i32 %"sum_input.s1.r19$x145.us.us.us.us.us", 1
  %.not441.us.us.us.us.us = icmp eq i32 %4171, %9
  br i1 %.not441.us.us.us.us.us, label %"end for sum_input.s1.r19$x144.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x143.us.us.us.us.us"

"end for sum_input.s1.r19$x144.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124147.loopexit.us.us.us.us.us"
  %4172 = add nuw nsw i32 %"sum_input.s1.r19$y142.us.us.us.us", 1
  %.not440.us.us.us.us = icmp eq i32 %4172, %11
  br i1 %.not440.us.us.us.us, label %"consume sum_input149.us.us", label %"for sum_input.s1.r19$y140.us.us.us.us"

"for convolved.s1.r19$y157.us.us.us":             ; preds = %"for convolved.s1.r19$y157.preheader.us.us", %"end for convolved.s1.r19$x161.loopexit.us.us.us"
  %convolved400.sroa.123.8.us.us.us = phi <32 x i32> [ %.us-phi1019.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.123.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %convolved400.sroa.113.8.us.us.us = phi <32 x i32> [ %.us-phi1020.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.113.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %convolved400.sroa.103.8.us.us.us = phi <32 x i32> [ %.us-phi1021.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.103.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %convolved400.sroa.93.8.us.us.us = phi <32 x i32> [ %.us-phi1022.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.93.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %convolved400.sroa.78.8.us.us.us = phi <32 x i32> [ %.us-phi1023.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.78.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %convolved400.sroa.63.8.us.us.us = phi <32 x i32> [ %.us-phi1024.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.63.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %convolved400.sroa.48.8.us.us.us = phi <32 x i32> [ %.us-phi1025.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.48.7.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %convolved400.sroa.0.22.us.us.us = phi <32 x i32> [ %.us-phi1026.us.us.us, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ %convolved400.sroa.0.21.us.us, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %"convolved.s1.r19$y159.us.us.us" = phi i32 [ %4177, %"end for convolved.s1.r19$x161.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y157.preheader.us.us" ]
  %4173 = mul nsw i32 %"convolved.s1.r19$y159.us.us.us", %dilation_y
  %4174 = add nsw i32 %4173, %3550
  %4175 = mul nsw i32 %4174, %19
  %t1106.us.us.us = add nsw i32 %4175, %3546
  %4176 = mul nsw i32 %"convolved.s1.r19$y159.us.us.us", %12
  %t1107.us.us.us = add nsw i32 %4176, %3925
  br i1 %3518, label %"for convolved.s1.r19$x160.us.us.us.us", label %"end for convolved.s1.r19$x161.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x161.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us", %"for convolved.s1.r19$y157.us.us.us"
  %.us-phi1019.us.us.us = phi <32 x i32> [ %convolved400.sroa.123.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4591, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %.us-phi1020.us.us.us = phi <32 x i32> [ %convolved400.sroa.113.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4542, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %.us-phi1021.us.us.us = phi <32 x i32> [ %convolved400.sroa.103.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4493, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %.us-phi1022.us.us.us = phi <32 x i32> [ %convolved400.sroa.93.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4444, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %.us-phi1023.us.us.us = phi <32 x i32> [ %convolved400.sroa.78.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4395, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %.us-phi1024.us.us.us = phi <32 x i32> [ %convolved400.sroa.63.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4346, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %.us-phi1025.us.us.us = phi <32 x i32> [ %convolved400.sroa.48.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4297, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %.us-phi1026.us.us.us = phi <32 x i32> [ %convolved400.sroa.0.22.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ], [ %4248, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ]
  %4177 = add nuw nsw i32 %"convolved.s1.r19$y159.us.us.us", 1
  %.not437.us.us.us = icmp eq i32 %4177, %11
  br i1 %.not437.us.us.us, label %"consume convolved166.us.us", label %"for convolved.s1.r19$y157.us.us.us"

"for convolved.s1.r19$x160.us.us.us.us":          ; preds = %"for convolved.s1.r19$y157.us.us.us", %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us"
  %convolved400.sroa.123.9.us.us.us.us = phi <32 x i32> [ %4591, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.123.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %convolved400.sroa.113.9.us.us.us.us = phi <32 x i32> [ %4542, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.113.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %convolved400.sroa.103.9.us.us.us.us = phi <32 x i32> [ %4493, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.103.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %convolved400.sroa.93.9.us.us.us.us = phi <32 x i32> [ %4444, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.93.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %convolved400.sroa.78.9.us.us.us.us = phi <32 x i32> [ %4395, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.78.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %convolved400.sroa.63.9.us.us.us.us = phi <32 x i32> [ %4346, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.63.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %convolved400.sroa.48.9.us.us.us.us = phi <32 x i32> [ %4297, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.48.8.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %convolved400.sroa.0.23.us.us.us.us = phi <32 x i32> [ %4248, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ %convolved400.sroa.0.22.us.us.us, %"for convolved.s1.r19$y157.us.us.us" ]
  %"convolved.s1.r19$x162.us.us.us.us" = phi i32 [ %4593, %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y157.us.us.us" ]
  %4178 = mul nsw i32 %"convolved.s1.r19$x162.us.us.us.us", %dilation_x
  %t1116.s.us.us.us.us = add nsw i32 %4178, %3955
  %t1115.s.us.us.us.us = add nsw i32 %4178, %3957
  %t1114.s.us.us.us.us = add nsw i32 %4178, %3959
  %t1113.s.us.us.us.us = add nsw i32 %4178, %3961
  %t1112.s.us.us.us.us = add nsw i32 %4178, %3963
  %t1111.s.us.us.us.us = add nsw i32 %4178, %3965
  %t1110.s.us.us.us.us = add nsw i32 %4178, %3967
  %t1108.s.us.us.us.us = add nsw i32 %4178, %3968
  %4179 = mul nsw i32 %t1108.s.us.us.us.us, %17
  %4180 = mul nsw i32 %"convolved.s1.r19$x162.us.us.us.us", %10
  %4181 = add nsw i32 %t1107.us.us.us, %4180
  %4182 = mul nsw i32 %t1110.s.us.us.us.us, %17
  %4183 = mul nsw i32 %t1111.s.us.us.us.us, %17
  %4184 = mul nsw i32 %t1112.s.us.us.us.us, %17
  %4185 = mul nsw i32 %t1113.s.us.us.us.us, %17
  %4186 = mul nsw i32 %t1114.s.us.us.us.us, %17
  %4187 = mul nsw i32 %t1115.s.us.us.us.us, %17
  %4188 = mul nsw i32 %t1116.s.us.us.us.us, %17
  br label %"for convolved.s1.r19$z.r124163.us.us.us.us"

"for convolved.s1.r19$z.r124163.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r124163.us.us.us.us", %"for convolved.s1.r19$x160.us.us.us.us"
  %convolved400.sroa.123.11.us.us.us.us = phi <32 x i32> [ %4591, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.123.9.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %convolved400.sroa.113.11.us.us.us.us = phi <32 x i32> [ %4542, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.113.9.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %convolved400.sroa.103.11.us.us.us.us = phi <32 x i32> [ %4493, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.103.9.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %convolved400.sroa.93.11.us.us.us.us = phi <32 x i32> [ %4444, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.93.9.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %convolved400.sroa.78.11.us.us.us.us = phi <32 x i32> [ %4395, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.78.9.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %convolved400.sroa.63.11.us.us.us.us = phi <32 x i32> [ %4346, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.63.9.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %convolved400.sroa.48.11.us.us.us.us = phi <32 x i32> [ %4297, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.48.9.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %convolved400.sroa.0.25.us.us.us.us = phi <32 x i32> [ %4248, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ %convolved400.sroa.0.23.us.us.us.us, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %"convolved.s1.r19$z.r124165.us.us.us.us" = phi i32 [ %4592, %"for convolved.s1.r19$z.r124163.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x160.us.us.us.us" ]
  %4189 = shl nsw i32 %"convolved.s1.r19$z.r124165.us.us.us.us", 2
  %4190 = add i32 %4189, %t1106.us.us.us
  %4191 = add i32 %4190, %4179
  %4192 = getelementptr inbounds i8, i8* %13, i32 %4191
  %4193 = bitcast i8* %4192 to <1 x i32>*
  %4194 = load <1 x i32>, <1 x i32>* %4193, align 4, !tbaa !109
  %4195 = shufflevector <1 x i32> %4194, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4196 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4195, <32 x i32> %4195, i32 -4)
  %4197 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4196)
  %4198 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4197, <32 x i32> %4197, i32 -4)
  %4199 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4198)
  %4200 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4199, <32 x i32> %4199, i32 -4)
  %4201 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4200)
  %4202 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4201, <32 x i32> %4201, i32 -4)
  %4203 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4202)
  %4204 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4203, <32 x i32> %4203, i32 -4)
  %4205 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4204)
  %4206 = bitcast <32 x i32> %4205 to <128 x i8>
  %4207 = zext <128 x i8> %4206 to <128 x i16>
  %4208 = shl nsw i32 %"convolved.s1.r19$z.r124165.us.us.us.us", 7
  %4209 = add nsw i32 %4181, %4208
  %4210 = getelementptr inbounds i8, i8* %5, i32 %4209
  %4211 = bitcast i8* %4210 to <128 x i8>*
  %4212 = load <128 x i8>, <128 x i8>* %4211, align 128, !tbaa !106
  %4213 = zext <128 x i8> %4212 to <128 x i16>
  %4214 = bitcast <128 x i16> %4207 to <64 x i32>
  %4215 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4214)
  %4216 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4214)
  %4217 = bitcast <128 x i16> %4213 to <64 x i32>
  %4218 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4217)
  %4219 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4217)
  %4220 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4216, <32 x i32> %4219) #11
  %4221 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4215, <32 x i32> %4218) #11
  %4222 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4220) #11
  %4223 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4220) #11
  %4224 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4223, <32 x i32> %4222) #11
  %4225 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4221) #11
  %4226 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4221) #11
  %4227 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4226, <32 x i32> %4225) #11
  %4228 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4227, <32 x i32> %4224)
  %4229 = bitcast <64 x i32> %4228 to <128 x i16>
  %t1317.us.us.us.us = zext <128 x i16> %4229 to <128 x i32>
  %4230 = shufflevector <128 x i32> %t1317.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4231 = shufflevector <128 x i32> %t1317.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4232 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4231, <32 x i32> %4230, i32 -4)
  %4233 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4232)
  %4234 = shufflevector <128 x i32> %t1317.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4235 = shufflevector <128 x i32> %t1317.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4236 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4235, <32 x i32> %4234, i32 -4)
  %4237 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4236)
  %4238 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4237, <32 x i32> %4233)
  %4239 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4232)
  %4240 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4236)
  %4241 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4240, <32 x i32> %4239)
  %t1316.us.us.us.us = add nsw <64 x i32> %4241, %4238
  %4242 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1316.us.us.us.us)
  %4243 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1316.us.us.us.us)
  %4244 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4243, <32 x i32> %4242, i32 -4)
  %4245 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4244)
  %4246 = add nsw <32 x i32> %4245, %convolved400.sroa.0.25.us.us.us.us
  %4247 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4244)
  %4248 = add nsw <32 x i32> %4246, %4247
  %4249 = add i32 %4190, %4182
  %4250 = getelementptr inbounds i8, i8* %13, i32 %4249
  %4251 = bitcast i8* %4250 to <1 x i32>*
  %4252 = load <1 x i32>, <1 x i32>* %4251, align 4, !tbaa !109
  %4253 = shufflevector <1 x i32> %4252, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4254 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4253, <32 x i32> %4253, i32 -4)
  %4255 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4254)
  %4256 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4255, <32 x i32> %4255, i32 -4)
  %4257 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4256)
  %4258 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4257, <32 x i32> %4257, i32 -4)
  %4259 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4258)
  %4260 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4259, <32 x i32> %4259, i32 -4)
  %4261 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4260)
  %4262 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4261, <32 x i32> %4261, i32 -4)
  %4263 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4262)
  %4264 = bitcast <32 x i32> %4263 to <128 x i8>
  %4265 = zext <128 x i8> %4264 to <128 x i16>
  %4266 = bitcast <128 x i16> %4265 to <64 x i32>
  %4267 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4266)
  %4268 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4266)
  %4269 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4268, <32 x i32> %4219) #11
  %4270 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4267, <32 x i32> %4218) #11
  %4271 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4269) #11
  %4272 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4269) #11
  %4273 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4272, <32 x i32> %4271) #11
  %4274 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4270) #11
  %4275 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4270) #11
  %4276 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4275, <32 x i32> %4274) #11
  %4277 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4276, <32 x i32> %4273)
  %4278 = bitcast <64 x i32> %4277 to <128 x i16>
  %t1319.us.us.us.us = zext <128 x i16> %4278 to <128 x i32>
  %4279 = shufflevector <128 x i32> %t1319.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4280 = shufflevector <128 x i32> %t1319.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4281 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4280, <32 x i32> %4279, i32 -4)
  %4282 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4281)
  %4283 = shufflevector <128 x i32> %t1319.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4284 = shufflevector <128 x i32> %t1319.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4285 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4284, <32 x i32> %4283, i32 -4)
  %4286 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4285)
  %4287 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4286, <32 x i32> %4282)
  %4288 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4281)
  %4289 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4285)
  %4290 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4289, <32 x i32> %4288)
  %t1318.us.us.us.us = add nsw <64 x i32> %4290, %4287
  %4291 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1318.us.us.us.us)
  %4292 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1318.us.us.us.us)
  %4293 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4292, <32 x i32> %4291, i32 -4)
  %4294 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4293)
  %4295 = add nsw <32 x i32> %4294, %convolved400.sroa.48.11.us.us.us.us
  %4296 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4293)
  %4297 = add nsw <32 x i32> %4295, %4296
  %4298 = add i32 %4190, %4183
  %4299 = getelementptr inbounds i8, i8* %13, i32 %4298
  %4300 = bitcast i8* %4299 to <1 x i32>*
  %4301 = load <1 x i32>, <1 x i32>* %4300, align 4, !tbaa !109
  %4302 = shufflevector <1 x i32> %4301, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4303 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4302, <32 x i32> %4302, i32 -4)
  %4304 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4303)
  %4305 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4304, <32 x i32> %4304, i32 -4)
  %4306 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4305)
  %4307 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4306, <32 x i32> %4306, i32 -4)
  %4308 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4307)
  %4309 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4308, <32 x i32> %4308, i32 -4)
  %4310 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4309)
  %4311 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4310, <32 x i32> %4310, i32 -4)
  %4312 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4311)
  %4313 = bitcast <32 x i32> %4312 to <128 x i8>
  %4314 = zext <128 x i8> %4313 to <128 x i16>
  %4315 = bitcast <128 x i16> %4314 to <64 x i32>
  %4316 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4315)
  %4317 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4315)
  %4318 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4317, <32 x i32> %4219) #11
  %4319 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4316, <32 x i32> %4218) #11
  %4320 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4318) #11
  %4321 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4318) #11
  %4322 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4321, <32 x i32> %4320) #11
  %4323 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4319) #11
  %4324 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4319) #11
  %4325 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4324, <32 x i32> %4323) #11
  %4326 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4325, <32 x i32> %4322)
  %4327 = bitcast <64 x i32> %4326 to <128 x i16>
  %t1321.us.us.us.us = zext <128 x i16> %4327 to <128 x i32>
  %4328 = shufflevector <128 x i32> %t1321.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4329 = shufflevector <128 x i32> %t1321.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4330 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4329, <32 x i32> %4328, i32 -4)
  %4331 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4330)
  %4332 = shufflevector <128 x i32> %t1321.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4333 = shufflevector <128 x i32> %t1321.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4334 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4333, <32 x i32> %4332, i32 -4)
  %4335 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4334)
  %4336 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4335, <32 x i32> %4331)
  %4337 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4330)
  %4338 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4334)
  %4339 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4338, <32 x i32> %4337)
  %t1320.us.us.us.us = add nsw <64 x i32> %4339, %4336
  %4340 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1320.us.us.us.us)
  %4341 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1320.us.us.us.us)
  %4342 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4341, <32 x i32> %4340, i32 -4)
  %4343 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4342)
  %4344 = add nsw <32 x i32> %4343, %convolved400.sroa.63.11.us.us.us.us
  %4345 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4342)
  %4346 = add nsw <32 x i32> %4344, %4345
  %4347 = add i32 %4190, %4184
  %4348 = getelementptr inbounds i8, i8* %13, i32 %4347
  %4349 = bitcast i8* %4348 to <1 x i32>*
  %4350 = load <1 x i32>, <1 x i32>* %4349, align 4, !tbaa !109
  %4351 = shufflevector <1 x i32> %4350, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4352 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4351, <32 x i32> %4351, i32 -4)
  %4353 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4352)
  %4354 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4353, <32 x i32> %4353, i32 -4)
  %4355 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4354)
  %4356 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4355, <32 x i32> %4355, i32 -4)
  %4357 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4356)
  %4358 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4357, <32 x i32> %4357, i32 -4)
  %4359 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4358)
  %4360 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4359, <32 x i32> %4359, i32 -4)
  %4361 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4360)
  %4362 = bitcast <32 x i32> %4361 to <128 x i8>
  %4363 = zext <128 x i8> %4362 to <128 x i16>
  %4364 = bitcast <128 x i16> %4363 to <64 x i32>
  %4365 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4364)
  %4366 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4364)
  %4367 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4366, <32 x i32> %4219) #11
  %4368 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4365, <32 x i32> %4218) #11
  %4369 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4367) #11
  %4370 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4367) #11
  %4371 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4370, <32 x i32> %4369) #11
  %4372 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4368) #11
  %4373 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4368) #11
  %4374 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4373, <32 x i32> %4372) #11
  %4375 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4374, <32 x i32> %4371)
  %4376 = bitcast <64 x i32> %4375 to <128 x i16>
  %t1323.us.us.us.us = zext <128 x i16> %4376 to <128 x i32>
  %4377 = shufflevector <128 x i32> %t1323.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4378 = shufflevector <128 x i32> %t1323.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4379 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4378, <32 x i32> %4377, i32 -4)
  %4380 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4379)
  %4381 = shufflevector <128 x i32> %t1323.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4382 = shufflevector <128 x i32> %t1323.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4383 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4382, <32 x i32> %4381, i32 -4)
  %4384 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4383)
  %4385 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4384, <32 x i32> %4380)
  %4386 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4379)
  %4387 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4383)
  %4388 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4387, <32 x i32> %4386)
  %t1322.us.us.us.us = add nsw <64 x i32> %4388, %4385
  %4389 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1322.us.us.us.us)
  %4390 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1322.us.us.us.us)
  %4391 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4390, <32 x i32> %4389, i32 -4)
  %4392 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4391)
  %4393 = add nsw <32 x i32> %4392, %convolved400.sroa.78.11.us.us.us.us
  %4394 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4391)
  %4395 = add nsw <32 x i32> %4393, %4394
  %4396 = add i32 %4190, %4185
  %4397 = getelementptr inbounds i8, i8* %13, i32 %4396
  %4398 = bitcast i8* %4397 to <1 x i32>*
  %4399 = load <1 x i32>, <1 x i32>* %4398, align 4, !tbaa !109
  %4400 = shufflevector <1 x i32> %4399, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4401 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4400, <32 x i32> %4400, i32 -4)
  %4402 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4401)
  %4403 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4402, <32 x i32> %4402, i32 -4)
  %4404 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4403)
  %4405 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4404, <32 x i32> %4404, i32 -4)
  %4406 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4405)
  %4407 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4406, <32 x i32> %4406, i32 -4)
  %4408 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4407)
  %4409 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4408, <32 x i32> %4408, i32 -4)
  %4410 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4409)
  %4411 = bitcast <32 x i32> %4410 to <128 x i8>
  %4412 = zext <128 x i8> %4411 to <128 x i16>
  %4413 = bitcast <128 x i16> %4412 to <64 x i32>
  %4414 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4413)
  %4415 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4413)
  %4416 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4415, <32 x i32> %4219) #11
  %4417 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4414, <32 x i32> %4218) #11
  %4418 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4416) #11
  %4419 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4416) #11
  %4420 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4419, <32 x i32> %4418) #11
  %4421 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4417) #11
  %4422 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4417) #11
  %4423 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4422, <32 x i32> %4421) #11
  %4424 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4423, <32 x i32> %4420)
  %4425 = bitcast <64 x i32> %4424 to <128 x i16>
  %t1325.us.us.us.us = zext <128 x i16> %4425 to <128 x i32>
  %4426 = shufflevector <128 x i32> %t1325.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4427 = shufflevector <128 x i32> %t1325.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4428 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4427, <32 x i32> %4426, i32 -4)
  %4429 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4428)
  %4430 = shufflevector <128 x i32> %t1325.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4431 = shufflevector <128 x i32> %t1325.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4432 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4431, <32 x i32> %4430, i32 -4)
  %4433 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4432)
  %4434 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4433, <32 x i32> %4429)
  %4435 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4428)
  %4436 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4432)
  %4437 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4436, <32 x i32> %4435)
  %t1324.us.us.us.us = add nsw <64 x i32> %4437, %4434
  %4438 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1324.us.us.us.us)
  %4439 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1324.us.us.us.us)
  %4440 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4439, <32 x i32> %4438, i32 -4)
  %4441 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4440)
  %4442 = add nsw <32 x i32> %4441, %convolved400.sroa.93.11.us.us.us.us
  %4443 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4440)
  %4444 = add nsw <32 x i32> %4442, %4443
  %4445 = add i32 %4190, %4186
  %4446 = getelementptr inbounds i8, i8* %13, i32 %4445
  %4447 = bitcast i8* %4446 to <1 x i32>*
  %4448 = load <1 x i32>, <1 x i32>* %4447, align 4, !tbaa !109
  %4449 = shufflevector <1 x i32> %4448, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4450 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4449, <32 x i32> %4449, i32 -4)
  %4451 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4450)
  %4452 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4451, <32 x i32> %4451, i32 -4)
  %4453 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4452)
  %4454 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4453, <32 x i32> %4453, i32 -4)
  %4455 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4454)
  %4456 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4455, <32 x i32> %4455, i32 -4)
  %4457 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4456)
  %4458 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4457, <32 x i32> %4457, i32 -4)
  %4459 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4458)
  %4460 = bitcast <32 x i32> %4459 to <128 x i8>
  %4461 = zext <128 x i8> %4460 to <128 x i16>
  %4462 = bitcast <128 x i16> %4461 to <64 x i32>
  %4463 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4462)
  %4464 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4462)
  %4465 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4464, <32 x i32> %4219) #11
  %4466 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4463, <32 x i32> %4218) #11
  %4467 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4465) #11
  %4468 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4465) #11
  %4469 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4468, <32 x i32> %4467) #11
  %4470 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4466) #11
  %4471 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4466) #11
  %4472 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4471, <32 x i32> %4470) #11
  %4473 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4472, <32 x i32> %4469)
  %4474 = bitcast <64 x i32> %4473 to <128 x i16>
  %t1327.us.us.us.us = zext <128 x i16> %4474 to <128 x i32>
  %4475 = shufflevector <128 x i32> %t1327.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4476 = shufflevector <128 x i32> %t1327.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4477 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4476, <32 x i32> %4475, i32 -4)
  %4478 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4477)
  %4479 = shufflevector <128 x i32> %t1327.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4480 = shufflevector <128 x i32> %t1327.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4481 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4480, <32 x i32> %4479, i32 -4)
  %4482 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4481)
  %4483 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4482, <32 x i32> %4478)
  %4484 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4477)
  %4485 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4481)
  %4486 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4485, <32 x i32> %4484)
  %t1326.us.us.us.us = add nsw <64 x i32> %4486, %4483
  %4487 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1326.us.us.us.us)
  %4488 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1326.us.us.us.us)
  %4489 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4488, <32 x i32> %4487, i32 -4)
  %4490 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4489)
  %4491 = add nsw <32 x i32> %4490, %convolved400.sroa.103.11.us.us.us.us
  %4492 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4489)
  %4493 = add nsw <32 x i32> %4491, %4492
  %4494 = add i32 %4190, %4187
  %4495 = getelementptr inbounds i8, i8* %13, i32 %4494
  %4496 = bitcast i8* %4495 to <1 x i32>*
  %4497 = load <1 x i32>, <1 x i32>* %4496, align 4, !tbaa !109
  %4498 = shufflevector <1 x i32> %4497, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4499 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4498, <32 x i32> %4498, i32 -4)
  %4500 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4499)
  %4501 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4500, <32 x i32> %4500, i32 -4)
  %4502 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4501)
  %4503 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4502, <32 x i32> %4502, i32 -4)
  %4504 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4503)
  %4505 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4504, <32 x i32> %4504, i32 -4)
  %4506 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4505)
  %4507 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4506, <32 x i32> %4506, i32 -4)
  %4508 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4507)
  %4509 = bitcast <32 x i32> %4508 to <128 x i8>
  %4510 = zext <128 x i8> %4509 to <128 x i16>
  %4511 = bitcast <128 x i16> %4510 to <64 x i32>
  %4512 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4511)
  %4513 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4511)
  %4514 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4513, <32 x i32> %4219) #11
  %4515 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4512, <32 x i32> %4218) #11
  %4516 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4514) #11
  %4517 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4514) #11
  %4518 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4517, <32 x i32> %4516) #11
  %4519 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4515) #11
  %4520 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4515) #11
  %4521 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4520, <32 x i32> %4519) #11
  %4522 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4521, <32 x i32> %4518)
  %4523 = bitcast <64 x i32> %4522 to <128 x i16>
  %t1329.us.us.us.us = zext <128 x i16> %4523 to <128 x i32>
  %4524 = shufflevector <128 x i32> %t1329.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4525 = shufflevector <128 x i32> %t1329.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4526 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4525, <32 x i32> %4524, i32 -4)
  %4527 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4526)
  %4528 = shufflevector <128 x i32> %t1329.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4529 = shufflevector <128 x i32> %t1329.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4530 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4529, <32 x i32> %4528, i32 -4)
  %4531 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4530)
  %4532 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4531, <32 x i32> %4527)
  %4533 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4526)
  %4534 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4530)
  %4535 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4534, <32 x i32> %4533)
  %t1328.us.us.us.us = add nsw <64 x i32> %4535, %4532
  %4536 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1328.us.us.us.us)
  %4537 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1328.us.us.us.us)
  %4538 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4537, <32 x i32> %4536, i32 -4)
  %4539 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4538)
  %4540 = add nsw <32 x i32> %4539, %convolved400.sroa.113.11.us.us.us.us
  %4541 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4538)
  %4542 = add nsw <32 x i32> %4540, %4541
  %4543 = add i32 %4190, %4188
  %4544 = getelementptr inbounds i8, i8* %13, i32 %4543
  %4545 = bitcast i8* %4544 to <1 x i32>*
  %4546 = load <1 x i32>, <1 x i32>* %4545, align 4, !tbaa !109
  %4547 = shufflevector <1 x i32> %4546, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4548 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4547, <32 x i32> %4547, i32 -4)
  %4549 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4548)
  %4550 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4549, <32 x i32> %4549, i32 -4)
  %4551 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4550)
  %4552 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4551, <32 x i32> %4551, i32 -4)
  %4553 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4552)
  %4554 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4553, <32 x i32> %4553, i32 -4)
  %4555 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4554)
  %4556 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4555, <32 x i32> %4555, i32 -4)
  %4557 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4556)
  %4558 = bitcast <32 x i32> %4557 to <128 x i8>
  %4559 = zext <128 x i8> %4558 to <128 x i16>
  %4560 = bitcast <128 x i16> %4559 to <64 x i32>
  %4561 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4560)
  %4562 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4560)
  %4563 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4562, <32 x i32> %4219) #11
  %4564 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4561, <32 x i32> %4218) #11
  %4565 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4563) #11
  %4566 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4563) #11
  %4567 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4566, <32 x i32> %4565) #11
  %4568 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4564) #11
  %4569 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4564) #11
  %4570 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4569, <32 x i32> %4568) #11
  %4571 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4570, <32 x i32> %4567)
  %4572 = bitcast <64 x i32> %4571 to <128 x i16>
  %t1331.us.us.us.us = zext <128 x i16> %4572 to <128 x i32>
  %4573 = shufflevector <128 x i32> %t1331.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4574 = shufflevector <128 x i32> %t1331.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4575 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4574, <32 x i32> %4573, i32 -4)
  %4576 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4575)
  %4577 = shufflevector <128 x i32> %t1331.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4578 = shufflevector <128 x i32> %t1331.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4579 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4578, <32 x i32> %4577, i32 -4)
  %4580 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4579)
  %4581 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4580, <32 x i32> %4576)
  %4582 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4575)
  %4583 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4579)
  %4584 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4583, <32 x i32> %4582)
  %t1330.us.us.us.us = add nsw <64 x i32> %4584, %4581
  %4585 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1330.us.us.us.us)
  %4586 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1330.us.us.us.us)
  %4587 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4586, <32 x i32> %4585, i32 -4)
  %4588 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4587)
  %4589 = add nsw <32 x i32> %4588, %convolved400.sroa.123.11.us.us.us.us
  %4590 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4587)
  %4591 = add nsw <32 x i32> %4589, %4590
  %4592 = add nuw nsw i32 %"convolved.s1.r19$z.r124165.us.us.us.us", 1
  %.not439.us.us.us.us = icmp eq i32 %4592, %7
  br i1 %.not439.us.us.us.us, label %"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124163.us.us.us.us"

"end for convolved.s1.r19$z.r124164.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124163.us.us.us.us"
  %4593 = add nuw nsw i32 %"convolved.s1.r19$x162.us.us.us.us", 1
  %.not438.us.us.us.us = icmp eq i32 %4593, %9
  br i1 %.not438.us.us.us.us, label %"end for convolved.s1.r19$x161.loopexit.us.us.us", label %"for convolved.s1.r19$x160.us.us.us.us"

next_bb115:                                       ; preds = %next_bb38
  br i1 %99, label %then_bb191, label %next_bb192

then_bb191:                                       ; preds = %next_bb115
  %4594 = mul nsw i32 %19, %18
  %4595 = mul nsw i32 %17, %16
  %4596 = mul nsw i32 %22, %20
  %4597 = add i32 %4596, %4594
  %t1121 = add i32 %4597, %4595
  %4598 = icmp sgt i32 %21, 0
  br i1 %4598, label %"for output.s0.b.rebased193.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased193.preheader":           ; preds = %then_bb191
  %4599 = icmp sgt i32 %29, 0
  %.neg774 = mul i32 %30, %28
  %.neg775 = mul i32 %27, %25
  %.neg776 = mul i32 %31, %20
  %4600 = icmp sgt i32 %11, 0
  %4601 = icmp sgt i32 %9, 0
  %4602 = icmp sgt i32 %7, 0
  %4603 = ashr i32 %4, 7
  %4604 = icmp sgt i32 %4, 127
  %4605 = insertelement <128 x i32> undef, i32 %output_multiplier, i32 0
  %4606 = shufflevector <128 x i32> %4605, <128 x i32> undef, <128 x i32> zeroinitializer
  %4607 = sext <128 x i32> %4606 to <128 x i64>
  %4608 = icmp sgt i32 %output_shift, 0
  %4609 = select i1 %4608, <128 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <128 x i32> zeroinitializer
  %4610 = add nsw i32 %output_shift, -1
  %4611 = zext i8 %output_zero to i16
  %4612 = insertelement <128 x i16> undef, i16 %4611, i32 0
  %4613 = shufflevector <128 x i16> %4612, <128 x i16> undef, <128 x i32> zeroinitializer
  %4614 = bitcast <128 x i16> %4613 to <64 x i32>
  %4615 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %4616 = shufflevector <128 x i8> %4615, <128 x i8> undef, <128 x i32> zeroinitializer
  %4617 = bitcast <128 x i8> %4616 to <32 x i32>
  %4618 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %4619 = shufflevector <128 x i8> %4618, <128 x i8> undef, <128 x i32> zeroinitializer
  %4620 = bitcast <128 x i8> %4619 to <32 x i32>
  %reass.add785 = add i32 %.neg774, %.neg775
  %reass.add786 = add i32 %reass.add785, %.neg776
  br i1 %4599, label %"for output.s0.b.rebased193.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased193.us.preheader":        ; preds = %"for output.s0.b.rebased193.preheader"
  %4621 = add i32 %7, -1
  %4622 = add i32 %9, -1
  %brmerge1340.demorgan = and i1 %4601, %4602
  %xtraiter1519 = and i32 %7, 7
  %4623 = icmp ult i32 %4621, 7
  %unroll_iter1524 = and i32 %7, -8
  %lcmp.mod1521.not = icmp eq i32 %xtraiter1519, 0
  %xtraiter1526 = and i32 %9, 3
  %4624 = icmp ult i32 %4622, 3
  %unroll_iter1531 = and i32 %9, -4
  %lcmp.mod1528.not = icmp eq i32 %xtraiter1526, 0
  br label %"for output.s0.b.rebased193.us"

"for output.s0.b.rebased193.us":                  ; preds = %"for output.s0.b.rebased193.us.preheader", %"end for output.s0.y.rebased197.loopexit.us"
  %sum_input401.sroa.0.14.us = phi <6 x i32> [ %sum_input401.sroa.0.26.us, %"end for output.s0.y.rebased197.loopexit.us" ], [ undef, %"for output.s0.b.rebased193.us.preheader" ]
  %output.s0.b.rebased195.us = phi i32 [ %4800, %"end for output.s0.y.rebased197.loopexit.us" ], [ 0, %"for output.s0.b.rebased193.us.preheader" ]
  %4625 = add nsw i32 %output.s0.b.rebased195.us, %20
  %4626 = mul nsw i32 %4625, %31
  %4627 = mul nsw i32 %4625, %22
  %4628 = sub i32 %4627, %t1121
  %4629 = sub i32 %4627, %4597
  %4630 = sub i32 %4626, %reass.add786
  br label %"for output.s0.y.rebased196.us"

"for output.s0.y.rebased196.us":                  ; preds = %"for output.s0.b.rebased193.us", %"end for output.s0.x.xo200.us"
  %sum_input401.sroa.0.15.us = phi <6 x i32> [ %sum_input401.sroa.0.26.us, %"end for output.s0.x.xo200.us" ], [ %sum_input401.sroa.0.14.us, %"for output.s0.b.rebased193.us" ]
  %output.s0.y.rebased198.us = phi i32 [ %4773, %"end for output.s0.x.xo200.us" ], [ 0, %"for output.s0.b.rebased193.us" ]
  %4631 = add nsw i32 %output.s0.y.rebased198.us, %28
  %4632 = mul nsw i32 %4631, %30
  %4633 = mul nsw i32 %4631, %stride_y
  %t1133.us = add i32 %4630, %4632
  br label %"for output.s0.x.xo199.us"

"for output.s0.x.xo199.us":                       ; preds = %"end for output.s0.c.co226.us", %"for output.s0.y.rebased196.us"
  %sum_input401.sroa.0.17.us = phi <6 x i32> [ %sum_input401.sroa.0.15.us, %"for output.s0.y.rebased196.us" ], [ %sum_input401.sroa.0.26.us, %"end for output.s0.c.co226.us" ]
  %output.s0.x.xo201.us = phi i32 [ 0, %"for output.s0.y.rebased196.us" ], [ %4772, %"end for output.s0.c.co226.us" ]
  br i1 %t843.not, label %"consume sum_input224.us", label %then_bb204.us

then_bb204.us:                                    ; preds = %"for output.s0.x.xo199.us"
  %sum_input401.sroa.0.0.vec.insert597.us = insertelement <6 x i32> %sum_input401.sroa.0.17.us, i32 0, i32 0
  br i1 %t844, label %then_bb207.us, label %next_bb208.us

next_bb208.us:                                    ; preds = %then_bb204.us
  br i1 %4600, label %"for sum_input.s1.r19$y215.preheader.us", label %"consume sum_input224.us", !prof !96

then_bb207.us:                                    ; preds = %then_bb204.us
  br i1 %4600, label %"for sum_input.s1.r19$y209.preheader.us", label %"consume sum_input224.us", !prof !96

"for sum_input.s1.r19$y209.us":                   ; preds = %"for sum_input.s1.r19$y209.preheader.us", %"end for sum_input.s1.r19$x213.us"
  %sum_input401.sroa.0.18.us = phi <6 x i32> [ %sum_input401.sroa.0.20.us, %"end for sum_input.s1.r19$x213.us" ], [ %sum_input401.sroa.0.0.vec.insert597.us, %"for sum_input.s1.r19$y209.preheader.us" ]
  %"sum_input.s1.r19$y211.us" = phi i32 [ %4679, %"end for sum_input.s1.r19$x213.us" ], [ 0, %"for sum_input.s1.r19$y209.preheader.us" ]
  br i1 %4601, label %"for sum_input.s1.r19$x212.preheader.us", label %"end for sum_input.s1.r19$x213.us", !prof !96

"for sum_input.s1.r19$x212.us":                   ; preds = %"for sum_input.s1.r19$x212.preheader.us", %"for sum_input.s1.r19$x212.us"
  %sum_input401.sroa.0.19.us = phi <6 x i32> [ %sum_input401.sroa.0.0.vec.insert593.us.3, %"for sum_input.s1.r19$x212.us" ], [ %sum_input401.sroa.0.18.us, %"for sum_input.s1.r19$x212.preheader.us" ]
  %"sum_input.s1.r19$x214.us" = phi i32 [ %4669, %"for sum_input.s1.r19$x212.us" ], [ 0, %"for sum_input.s1.r19$x212.preheader.us" ]
  %niter1532 = phi i32 [ %niter1532.nsub.3, %"for sum_input.s1.r19$x212.us" ], [ %unroll_iter1531, %"for sum_input.s1.r19$x212.preheader.us" ]
  %sum_input401.sroa.0.0.vec.extract595.us = extractelement <6 x i32> %sum_input401.sroa.0.19.us, i32 0
  %4634 = mul nsw i32 %"sum_input.s1.r19$x214.us", %dilation_x
  %reass.add783.us = add i32 %4797, %4634
  %reass.mul784.us = shl i32 %reass.add783.us, 2
  %4635 = add i32 %t1136.us, %reass.mul784.us
  %4636 = getelementptr inbounds i8, i8* %13, i32 %4635
  %4637 = bitcast i8* %4636 to <4 x i8>*
  %4638 = load <4 x i8>, <4 x i8>* %4637, align 4, !tbaa !109
  %4639 = zext <4 x i8> %4638 to <4 x i32>
  %4640 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4639) #9
  %4641 = add nsw i32 %4640, %sum_input401.sroa.0.0.vec.extract595.us
  %4642 = or i32 %"sum_input.s1.r19$x214.us", 1
  %4643 = mul nsw i32 %4642, %dilation_x
  %reass.add783.us.1 = add i32 %4797, %4643
  %reass.mul784.us.1 = shl i32 %reass.add783.us.1, 2
  %4644 = add i32 %t1136.us, %reass.mul784.us.1
  %4645 = getelementptr inbounds i8, i8* %13, i32 %4644
  %4646 = bitcast i8* %4645 to <4 x i8>*
  %4647 = load <4 x i8>, <4 x i8>* %4646, align 4, !tbaa !109
  %4648 = zext <4 x i8> %4647 to <4 x i32>
  %4649 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4648) #9
  %4650 = add nsw i32 %4649, %4641
  %4651 = or i32 %"sum_input.s1.r19$x214.us", 2
  %4652 = mul nsw i32 %4651, %dilation_x
  %reass.add783.us.2 = add i32 %4797, %4652
  %reass.mul784.us.2 = shl i32 %reass.add783.us.2, 2
  %4653 = add i32 %t1136.us, %reass.mul784.us.2
  %4654 = getelementptr inbounds i8, i8* %13, i32 %4653
  %4655 = bitcast i8* %4654 to <4 x i8>*
  %4656 = load <4 x i8>, <4 x i8>* %4655, align 4, !tbaa !109
  %4657 = zext <4 x i8> %4656 to <4 x i32>
  %4658 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4657) #9
  %4659 = add nsw i32 %4658, %4650
  %sum_input401.sroa.0.0.vec.insert593.us.2 = insertelement <6 x i32> %sum_input401.sroa.0.19.us, i32 %4659, i32 0
  %4660 = or i32 %"sum_input.s1.r19$x214.us", 3
  %4661 = mul nsw i32 %4660, %dilation_x
  %reass.add783.us.3 = add i32 %4797, %4661
  %reass.mul784.us.3 = shl i32 %reass.add783.us.3, 2
  %4662 = add i32 %t1136.us, %reass.mul784.us.3
  %4663 = getelementptr inbounds i8, i8* %13, i32 %4662
  %4664 = bitcast i8* %4663 to <4 x i8>*
  %4665 = load <4 x i8>, <4 x i8>* %4664, align 4, !tbaa !109
  %4666 = zext <4 x i8> %4665 to <4 x i32>
  %4667 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4666) #9
  %4668 = add nsw i32 %4667, %4659
  %sum_input401.sroa.0.0.vec.insert593.us.3 = insertelement <6 x i32> %sum_input401.sroa.0.0.vec.insert593.us.2, i32 %4668, i32 0
  %4669 = add nuw nsw i32 %"sum_input.s1.r19$x214.us", 4
  %niter1532.nsub.3 = add i32 %niter1532, -4
  %niter1532.ncmp.3 = icmp eq i32 %niter1532.nsub.3, 0
  br i1 %niter1532.ncmp.3, label %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x212.us"

"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x212.us"
  %sum_input401.sroa.0.0.vec.insert593.us.2.le = insertelement <6 x i32> %sum_input401.sroa.0.19.us, i32 %4659, i32 0
  %sum_input401.sroa.0.0.vec.insert593.us.3.le = insertelement <6 x i32> %sum_input401.sroa.0.0.vec.insert593.us.2.le, i32 %4668, i32 0
  br label %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa": ; preds = %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa.loopexit", %"for sum_input.s1.r19$x212.preheader.us"
  %sum_input401.sroa.0.19.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x212.preheader.us" ], [ %sum_input401.sroa.0.0.vec.insert593.us.2.le, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1476.ph = phi i32 [ undef, %"for sum_input.s1.r19$x212.preheader.us" ], [ %4668, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input401.sroa.0.19.us.unr = phi <6 x i32> [ %sum_input401.sroa.0.18.us, %"for sum_input.s1.r19$x212.preheader.us" ], [ %sum_input401.sroa.0.0.vec.insert593.us.3.le, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x214.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x212.preheader.us" ], [ %4669, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1528.not, label %"end for sum_input.s1.r19$x213.us.loopexit", label %"for sum_input.s1.r19$x212.us.epil"

"for sum_input.s1.r19$x212.us.epil":              ; preds = %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x212.us.epil"
  %sum_input401.sroa.0.19.us.epil = phi <6 x i32> [ %sum_input401.sroa.0.0.vec.insert593.us.epil, %"for sum_input.s1.r19$x212.us.epil" ], [ %sum_input401.sroa.0.19.us.unr, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x214.us.epil" = phi i32 [ %4678, %"for sum_input.s1.r19$x212.us.epil" ], [ %"sum_input.s1.r19$x214.us.unr", %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa" ]
  %epil.iter1527 = phi i32 [ %epil.iter1527.sub, %"for sum_input.s1.r19$x212.us.epil" ], [ %xtraiter1526, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa" ]
  %sum_input401.sroa.0.0.vec.extract595.us.epil = extractelement <6 x i32> %sum_input401.sroa.0.19.us.epil, i32 0
  %4670 = mul nsw i32 %"sum_input.s1.r19$x214.us.epil", %dilation_x
  %reass.add783.us.epil = add i32 %4797, %4670
  %reass.mul784.us.epil = shl i32 %reass.add783.us.epil, 2
  %4671 = add i32 %t1136.us, %reass.mul784.us.epil
  %4672 = getelementptr inbounds i8, i8* %13, i32 %4671
  %4673 = bitcast i8* %4672 to <4 x i8>*
  %4674 = load <4 x i8>, <4 x i8>* %4673, align 4, !tbaa !109
  %4675 = zext <4 x i8> %4674 to <4 x i32>
  %4676 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4675) #9
  %4677 = add nsw i32 %4676, %sum_input401.sroa.0.0.vec.extract595.us.epil
  %sum_input401.sroa.0.0.vec.insert593.us.epil = insertelement <6 x i32> %sum_input401.sroa.0.19.us.epil, i32 %4677, i32 0
  %4678 = add nuw nsw i32 %"sum_input.s1.r19$x214.us.epil", 1
  %epil.iter1527.sub = add i32 %epil.iter1527, -1
  %epil.iter1527.cmp.not = icmp eq i32 %epil.iter1527.sub, 0
  br i1 %epil.iter1527.cmp.not, label %"end for sum_input.s1.r19$x213.us.loopexit", label %"for sum_input.s1.r19$x212.us.epil", !llvm.loop !116

"end for sum_input.s1.r19$x213.us.loopexit":      ; preds = %"for sum_input.s1.r19$x212.us.epil", %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa"
  %sum_input401.sroa.0.19.us.lcssa = phi <6 x i32> [ %sum_input401.sroa.0.19.us.lcssa.ph, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa" ], [ %sum_input401.sroa.0.19.us.epil, %"for sum_input.s1.r19$x212.us.epil" ]
  %.lcssa1476 = phi i32 [ %.lcssa1476.ph, %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa" ], [ %4677, %"for sum_input.s1.r19$x212.us.epil" ]
  %sum_input401.sroa.0.0.vec.insert593.us.le = insertelement <6 x i32> %sum_input401.sroa.0.19.us.lcssa, i32 %.lcssa1476, i32 0
  br label %"end for sum_input.s1.r19$x213.us"

"end for sum_input.s1.r19$x213.us":               ; preds = %"end for sum_input.s1.r19$x213.us.loopexit", %"for sum_input.s1.r19$y209.us"
  %sum_input401.sroa.0.20.us = phi <6 x i32> [ %sum_input401.sroa.0.18.us, %"for sum_input.s1.r19$y209.us" ], [ %sum_input401.sroa.0.0.vec.insert593.us.le, %"end for sum_input.s1.r19$x213.us.loopexit" ]
  %4679 = add nuw nsw i32 %"sum_input.s1.r19$y211.us", 1
  %.not431.us = icmp eq i32 %4679, %11
  br i1 %.not431.us, label %"consume sum_input224.us", label %"for sum_input.s1.r19$y209.us"

"consume sum_input224.us.loopexit1264":           ; preds = %"end for sum_input.s1.r19$x219.loopexit.split.us.us.us.us"
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.le.le.le = insertelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1475, i32 0
  br label %"consume sum_input224.us"

"consume sum_input224.us":                        ; preds = %"end for sum_input.s1.r19$x213.us", %"for sum_input.s1.r19$y215.preheader.us", %"consume sum_input224.us.loopexit1264", %then_bb207.us, %next_bb208.us, %"for output.s0.x.xo199.us"
  %sum_input401.sroa.0.26.us = phi <6 x i32> [ %sum_input401.sroa.0.17.us, %"for output.s0.x.xo199.us" ], [ %sum_input401.sroa.0.0.vec.insert597.us, %then_bb207.us ], [ %sum_input401.sroa.0.0.vec.insert597.us, %next_bb208.us ], [ %sum_input401.sroa.0.0.vec.insert597.us, %"for sum_input.s1.r19$y215.preheader.us" ], [ %sum_input401.sroa.0.0.vec.insert.us.us.us.us.le.le.le, %"consume sum_input224.us.loopexit1264" ], [ %sum_input401.sroa.0.20.us, %"end for sum_input.s1.r19$x213.us" ]
  br i1 %4604, label %"for output.s0.c.co225.preheader.us", label %"end for output.s0.c.co226.us", !prof !96

"for output.s0.c.co225.us":                       ; preds = %"for output.s0.c.co225.preheader.us", %"consume convolved241.us"
  %output.s0.c.co227.us = phi i32 [ %4771, %"consume convolved241.us" ], [ 0, %"for output.s0.c.co225.preheader.us" ]
  %4680 = shl nsw i32 %output.s0.c.co227.us, 7
  %4681 = getelementptr inbounds i32, i32* %offset_c, i32 %4680
  %4682 = bitcast i32* %4681 to <32 x i32>*
  %4683 = load <32 x i32>, <32 x i32>* %4682, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb230.us, label %next_bb231.us

next_bb231.us:                                    ; preds = %"for output.s0.c.co225.us"
  %4684 = sub nsw <32 x i32> %4683, %4787
  %4685 = getelementptr inbounds i32, i32* %4681, i32 32
  %4686 = bitcast i32* %4685 to <32 x i32>*
  %4687 = load <32 x i32>, <32 x i32>* %4686, align 128, !tbaa !104
  %4688 = sub nsw <32 x i32> %4687, %4787
  %4689 = getelementptr inbounds i32, i32* %4681, i32 64
  %4690 = bitcast i32* %4689 to <32 x i32>*
  %4691 = load <32 x i32>, <32 x i32>* %4690, align 128, !tbaa !104
  %4692 = sub nsw <32 x i32> %4691, %4787
  %4693 = getelementptr inbounds i32, i32* %4681, i32 96
  %4694 = bitcast i32* %4693 to <32 x i32>*
  %4695 = load <32 x i32>, <32 x i32>* %4694, align 128, !tbaa !104
  %4696 = sub nsw <32 x i32> %4695, %4787
  br label %after_bb229.us

then_bb230.us:                                    ; preds = %"for output.s0.c.co225.us"
  %4697 = getelementptr inbounds i32, i32* %4681, i32 32
  %4698 = bitcast i32* %4697 to <32 x i32>*
  %4699 = load <32 x i32>, <32 x i32>* %4698, align 128, !tbaa !104
  %4700 = getelementptr inbounds i32, i32* %4681, i32 64
  %4701 = bitcast i32* %4700 to <32 x i32>*
  %4702 = load <32 x i32>, <32 x i32>* %4701, align 128, !tbaa !104
  %4703 = getelementptr inbounds i32, i32* %4681, i32 96
  %4704 = bitcast i32* %4703 to <32 x i32>*
  %4705 = load <32 x i32>, <32 x i32>* %4704, align 128, !tbaa !104
  br label %after_bb229.us

after_bb229.us:                                   ; preds = %then_bb230.us, %next_bb231.us
  %convolved400.sroa.78.14.us = phi <32 x i32> [ %4705, %then_bb230.us ], [ %4696, %next_bb231.us ]
  %convolved400.sroa.63.14.us = phi <32 x i32> [ %4702, %then_bb230.us ], [ %4692, %next_bb231.us ]
  %convolved400.sroa.48.14.us = phi <32 x i32> [ %4699, %then_bb230.us ], [ %4688, %next_bb231.us ]
  %convolved400.sroa.0.28.us = phi <32 x i32> [ %4683, %then_bb230.us ], [ %4684, %next_bb231.us ]
  br i1 %4600, label %"for convolved.s1.r19$y232.preheader.us", label %"consume convolved241.us", !prof !96

"consume convolved241.us":                        ; preds = %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us", %"for convolved.s1.r19$y232.preheader.split.us.us", %"for convolved.s1.r19$y232.preheader.us", %after_bb229.us
  %convolved400.sroa.78.20.us = phi <32 x i32> [ %convolved400.sroa.78.14.us, %after_bb229.us ], [ %convolved400.sroa.78.14.us, %"for convolved.s1.r19$y232.preheader.us" ], [ %convolved400.sroa.78.14.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ], [ %5073, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ]
  %convolved400.sroa.63.20.us = phi <32 x i32> [ %convolved400.sroa.63.14.us, %after_bb229.us ], [ %convolved400.sroa.63.14.us, %"for convolved.s1.r19$y232.preheader.us" ], [ %convolved400.sroa.63.14.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ], [ %5036, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ]
  %convolved400.sroa.48.20.us = phi <32 x i32> [ %convolved400.sroa.48.14.us, %after_bb229.us ], [ %convolved400.sroa.48.14.us, %"for convolved.s1.r19$y232.preheader.us" ], [ %convolved400.sroa.48.14.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ], [ %4999, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ]
  %convolved400.sroa.0.34.us = phi <32 x i32> [ %convolved400.sroa.0.28.us, %after_bb229.us ], [ %convolved400.sroa.0.28.us, %"for convolved.s1.r19$y232.preheader.us" ], [ %convolved400.sroa.0.28.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ], [ %4961, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ]
  %4706 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.48.20.us, <32 x i32> %convolved400.sroa.0.34.us)
  %4707 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved400.sroa.78.20.us, <32 x i32> %convolved400.sroa.63.20.us)
  %4708 = shufflevector <64 x i32> %4706, <64 x i32> %4707, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4709 = sext <128 x i32> %4708 to <128 x i64>
  %4710 = mul nsw <128 x i64> %4709, %4607
  %4711 = ashr <128 x i64> %4710, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %4712 = add nsw <128 x i64> %4711, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a104.us = ashr <128 x i64> %4712, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %4713 = icmp slt <128 x i64> %a104.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a103.us = select <128 x i1> %4713, <128 x i64> %a104.us, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4714 = icmp sgt <128 x i64> %a103.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4715 = select <128 x i1> %4714, <128 x i64> %a103.us, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4716 = trunc <128 x i64> %4715 to <128 x i32>
  %4717 = shufflevector <128 x i32> %4716, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4718 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4717, i32 %output_shift) #11
  %4719 = shufflevector <128 x i32> %4716, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4720 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4719, i32 %output_shift) #11
  %4721 = shufflevector <128 x i32> %4716, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4722 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4721, i32 %output_shift) #11
  %4723 = shufflevector <128 x i32> %4716, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4724 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4723, i32 %output_shift) #11
  %4725 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4720, <32 x i32> %4718)
  %4726 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4724, <32 x i32> %4722)
  %4727 = shufflevector <64 x i32> %4725, <64 x i32> %4726, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4728 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4717, i32 %4610) #11
  %4729 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4719, i32 %4610) #11
  %4730 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4721, i32 %4610) #11
  %4731 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %4723, i32 %4610) #11
  %4732 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4729, <32 x i32> %4728)
  %4733 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4731, <32 x i32> %4730)
  %4734 = shufflevector <64 x i32> %4732, <64 x i32> %4733, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4735 = and <128 x i32> %4734, %4609
  %4736 = add nsw <128 x i32> %4735, %4727
  %4737 = shufflevector <128 x i32> %4736, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4738 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4737, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4739 = shufflevector <128 x i32> %4736, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4740 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4739, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4741 = shufflevector <128 x i32> %4736, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4742 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4741, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4743 = shufflevector <128 x i32> %4736, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4744 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %4743, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %4745 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %4738, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %4746 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %4740, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %4747 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %4742, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %4748 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %4744, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %4749 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4746, <32 x i32> %4745)
  %4750 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4748, <32 x i32> %4747)
  %4751 = shufflevector <64 x i32> %4749, <64 x i32> %4750, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4752 = trunc <128 x i32> %4751 to <128 x i16>
  %4753 = bitcast <128 x i16> %4752 to <64 x i32>
  %4754 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %4753, <64 x i32> %4614) #11
  %4755 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4754)
  %4756 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4754)
  %4757 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %4756, <32 x i32> %4791) #11
  %4758 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %4755, <32 x i32> %4790) #11
  %4759 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4757, <32 x i32> %4793) #11
  %4760 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %4758, <32 x i32> %4792) #11
  %4761 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4760, <32 x i32> %4759)
  %4762 = bitcast <64 x i32> %4761 to <128 x i16>
  %4763 = trunc <128 x i16> %4762 to <128 x i8>
  %4764 = bitcast <128 x i8> %4763 to <32 x i32>
  %4765 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %4764, <32 x i32> %4617) #11
  %4766 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %4765, <32 x i32> %4620) #11
  %4767 = shl nsw i32 %output.s0.c.co227.us, 7
  %4768 = add i32 %4795, %4767
  %4769 = getelementptr inbounds i8, i8* %23, i32 %4768
  %4770 = bitcast i8* %4769 to <32 x i32>*
  store <32 x i32> %4766, <32 x i32>* %4770, align 1, !tbaa !112
  %4771 = add nuw nsw i32 %output.s0.c.co227.us, 1
  %.not424.us = icmp eq i32 %4771, %4603
  br i1 %.not424.us, label %"end for output.s0.c.co226.us", label %"for output.s0.c.co225.us"

"end for output.s0.c.co226.us":                   ; preds = %"consume convolved241.us", %"consume sum_input224.us"
  %4772 = add nuw nsw i32 %output.s0.x.xo201.us, 1
  %.not422.us = icmp eq i32 %4772, %26
  br i1 %.not422.us, label %"end for output.s0.x.xo200.us", label %"for output.s0.x.xo199.us"

"end for output.s0.x.xo200.us":                   ; preds = %"end for output.s0.c.co226.us"
  %4773 = add nuw nsw i32 %output.s0.y.rebased198.us, 1
  %.not423.us = icmp eq i32 %4773, %29
  br i1 %.not423.us, label %"end for output.s0.y.rebased197.loopexit.us", label %"for output.s0.y.rebased196.us"

"for convolved.s1.r19$y232.preheader.us":         ; preds = %after_bb229.us
  %4774 = shl nsw i32 %output.s0.c.co227.us, 2
  %4775 = or i32 %4774, 3
  %4776 = mul nsw i32 %4775, %8
  %4777 = or i32 %4774, 2
  %4778 = mul nsw i32 %4777, %8
  %4779 = or i32 %4774, 1
  %4780 = mul nsw i32 %4779, %8
  %4781 = mul nsw i32 %output.s0.c.co227.us, %8
  br i1 %4601, label %"for convolved.s1.r19$y232.preheader.split.us.us", label %"consume convolved241.us", !prof !96

"for sum_input.s1.r19$x212.preheader.us":         ; preds = %"for sum_input.s1.r19$y209.us"
  %4782 = mul nsw i32 %"sum_input.s1.r19$y211.us", %dilation_y
  %4783 = add nsw i32 %4782, %4633
  %4784 = mul nsw i32 %4783, %19
  %t1136.us = add i32 %4629, %4784
  br i1 %4624, label %"end for sum_input.s1.r19$x213.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x212.us"

"for output.s0.c.co225.preheader.us":             ; preds = %"consume sum_input224.us"
  %sum_input401.sroa.0.0.vec.extract588.us = extractelement <6 x i32> %sum_input401.sroa.0.26.us, i32 0
  %4785 = mul nsw i32 %sum_input401.sroa.0.0.vec.extract588.us, %361
  %4786 = insertelement <32 x i32> undef, i32 %4785, i32 0
  %4787 = shufflevector <32 x i32> %4786, <32 x i32> undef, <32 x i32> zeroinitializer
  %4788 = add nsw i32 %output.s0.x.xo201.us, %25
  %4789 = mul nsw i32 %4788, %stride_x
  %4790 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %4791 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %4792 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  %4793 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %4794 = mul nsw i32 %4788, %27
  %4795 = add i32 %t1133.us, %4794
  br label %"for output.s0.c.co225.us"

"for sum_input.s1.r19$y209.preheader.us":         ; preds = %then_bb207.us
  %4796 = add nsw i32 %output.s0.x.xo201.us, %25
  %4797 = sub i32 %4796, %16
  br label %"for sum_input.s1.r19$y209.us"

"for sum_input.s1.r19$y215.preheader.us":         ; preds = %next_bb208.us
  %4798 = add nsw i32 %output.s0.x.xo201.us, %25
  %4799 = mul nsw i32 %4798, %stride_x
  br i1 %brmerge1340.demorgan, label %"for sum_input.s1.r19$y215.us.us.us", label %"consume sum_input224.us", !prof !103

"end for output.s0.y.rebased197.loopexit.us":     ; preds = %"end for output.s0.x.xo200.us"
  %4800 = add nuw nsw i32 %output.s0.b.rebased195.us, 1
  %.not421.us = icmp eq i32 %4800, %21
  br i1 %.not421.us, label %after_bb3, label %"for output.s0.b.rebased193.us"

"for sum_input.s1.r19$y215.us.us.us":             ; preds = %"for sum_input.s1.r19$y215.preheader.us", %"end for sum_input.s1.r19$x219.loopexit.split.us.us.us.us"
  %sum_input401.sroa.0.21.us.us.us = phi <6 x i32> [ %sum_input401.sroa.0.0.vec.insert.us.us.us.us.le.le, %"end for sum_input.s1.r19$x219.loopexit.split.us.us.us.us" ], [ %sum_input401.sroa.0.0.vec.insert597.us, %"for sum_input.s1.r19$y215.preheader.us" ]
  %"sum_input.s1.r19$y217.us.us.us" = phi i32 [ %4889, %"end for sum_input.s1.r19$x219.loopexit.split.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y215.preheader.us" ]
  %4801 = mul nsw i32 %"sum_input.s1.r19$y217.us.us.us", %dilation_y
  %4802 = add nsw i32 %4801, %4633
  %4803 = mul nsw i32 %4802, %19
  %t1138.us.us.us = add nsw i32 %4628, %4803
  br label %"for sum_input.s1.r19$x218.us.us.us.us"

"for sum_input.s1.r19$x218.us.us.us.us":          ; preds = %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us", %"for sum_input.s1.r19$y215.us.us.us"
  %sum_input401.sroa.0.22.us.us.us.us = phi <6 x i32> [ %sum_input401.sroa.0.0.vec.insert.us.us.us.us.le, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us" ], [ %sum_input401.sroa.0.21.us.us.us, %"for sum_input.s1.r19$y215.us.us.us" ]
  %"sum_input.s1.r19$x220.us.us.us.us" = phi i32 [ %4888, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y215.us.us.us" ]
  %4804 = mul nsw i32 %"sum_input.s1.r19$x220.us.us.us.us", %dilation_x
  %t1139.s.us.us.us.us = add nsw i32 %4804, %4799
  %4805 = mul nsw i32 %t1139.s.us.us.us.us, %17
  %4806 = add nsw i32 %t1138.us.us.us, %4805
  br i1 %4623, label %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124221.us.us.us.us"

"for sum_input.s1.r19$z.r124221.us.us.us.us":     ; preds = %"for sum_input.s1.r19$x218.us.us.us.us", %"for sum_input.s1.r19$z.r124221.us.us.us.us"
  %sum_input401.sroa.0.24.us.us.us.us = phi <6 x i32> [ %sum_input401.sroa.0.0.vec.insert.us.us.us.us.7, %"for sum_input.s1.r19$z.r124221.us.us.us.us" ], [ %sum_input401.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x218.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124223.us.us.us.us" = phi i32 [ %4878, %"for sum_input.s1.r19$z.r124221.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x218.us.us.us.us" ]
  %niter1525 = phi i32 [ %niter1525.nsub.7, %"for sum_input.s1.r19$z.r124221.us.us.us.us" ], [ %unroll_iter1524, %"for sum_input.s1.r19$x218.us.us.us.us" ]
  %sum_input401.sroa.0.0.vec.extract591.us.us.us.us = extractelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us, i32 0
  %4807 = shl nsw i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4808 = add nsw i32 %4806, %4807
  %4809 = getelementptr inbounds i8, i8* %13, i32 %4808
  %4810 = bitcast i8* %4809 to <4 x i8>*
  %4811 = load <4 x i8>, <4 x i8>* %4810, align 4, !tbaa !109
  %4812 = zext <4 x i8> %4811 to <4 x i32>
  %4813 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4812) #9
  %4814 = add nsw i32 %4813, %sum_input401.sroa.0.0.vec.extract591.us.us.us.us
  %4815 = shl i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4816 = or i32 %4815, 4
  %4817 = add nsw i32 %4806, %4816
  %4818 = getelementptr inbounds i8, i8* %13, i32 %4817
  %4819 = bitcast i8* %4818 to <4 x i8>*
  %4820 = load <4 x i8>, <4 x i8>* %4819, align 4, !tbaa !109
  %4821 = zext <4 x i8> %4820 to <4 x i32>
  %4822 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4821) #9
  %4823 = add nsw i32 %4822, %4814
  %4824 = shl i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4825 = or i32 %4824, 8
  %4826 = add nsw i32 %4806, %4825
  %4827 = getelementptr inbounds i8, i8* %13, i32 %4826
  %4828 = bitcast i8* %4827 to <4 x i8>*
  %4829 = load <4 x i8>, <4 x i8>* %4828, align 4, !tbaa !109
  %4830 = zext <4 x i8> %4829 to <4 x i32>
  %4831 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4830) #9
  %4832 = add nsw i32 %4831, %4823
  %4833 = shl i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4834 = or i32 %4833, 12
  %4835 = add nsw i32 %4806, %4834
  %4836 = getelementptr inbounds i8, i8* %13, i32 %4835
  %4837 = bitcast i8* %4836 to <4 x i8>*
  %4838 = load <4 x i8>, <4 x i8>* %4837, align 4, !tbaa !109
  %4839 = zext <4 x i8> %4838 to <4 x i32>
  %4840 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4839) #9
  %4841 = add nsw i32 %4840, %4832
  %4842 = shl i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4843 = or i32 %4842, 16
  %4844 = add nsw i32 %4806, %4843
  %4845 = getelementptr inbounds i8, i8* %13, i32 %4844
  %4846 = bitcast i8* %4845 to <4 x i8>*
  %4847 = load <4 x i8>, <4 x i8>* %4846, align 4, !tbaa !109
  %4848 = zext <4 x i8> %4847 to <4 x i32>
  %4849 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4848) #9
  %4850 = add nsw i32 %4849, %4841
  %4851 = shl i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4852 = or i32 %4851, 20
  %4853 = add nsw i32 %4806, %4852
  %4854 = getelementptr inbounds i8, i8* %13, i32 %4853
  %4855 = bitcast i8* %4854 to <4 x i8>*
  %4856 = load <4 x i8>, <4 x i8>* %4855, align 4, !tbaa !109
  %4857 = zext <4 x i8> %4856 to <4 x i32>
  %4858 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4857) #9
  %4859 = add nsw i32 %4858, %4850
  %4860 = shl i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4861 = or i32 %4860, 24
  %4862 = add nsw i32 %4806, %4861
  %4863 = getelementptr inbounds i8, i8* %13, i32 %4862
  %4864 = bitcast i8* %4863 to <4 x i8>*
  %4865 = load <4 x i8>, <4 x i8>* %4864, align 4, !tbaa !109
  %4866 = zext <4 x i8> %4865 to <4 x i32>
  %4867 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4866) #9
  %4868 = add nsw i32 %4867, %4859
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.6 = insertelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us, i32 %4868, i32 0
  %4869 = shl i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 2
  %4870 = or i32 %4869, 28
  %4871 = add nsw i32 %4806, %4870
  %4872 = getelementptr inbounds i8, i8* %13, i32 %4871
  %4873 = bitcast i8* %4872 to <4 x i8>*
  %4874 = load <4 x i8>, <4 x i8>* %4873, align 4, !tbaa !109
  %4875 = zext <4 x i8> %4874 to <4 x i32>
  %4876 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4875) #9
  %4877 = add nsw i32 %4876, %4868
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.7 = insertelement <6 x i32> %sum_input401.sroa.0.0.vec.insert.us.us.us.us.6, i32 %4877, i32 0
  %4878 = add nuw nsw i32 %"sum_input.s1.r19$z.r124223.us.us.us.us", 8
  %niter1525.nsub.7 = add i32 %niter1525, -8
  %niter1525.ncmp.7 = icmp eq i32 %niter1525.nsub.7, 0
  br i1 %niter1525.ncmp.7, label %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124221.us.us.us.us"

"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124221.us.us.us.us"
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.6.le = insertelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us, i32 %4868, i32 0
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.7.le = insertelement <6 x i32> %sum_input401.sroa.0.0.vec.insert.us.us.us.us.6.le, i32 %4877, i32 0
  br label %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x218.us.us.us.us"
  %sum_input401.sroa.0.24.us.us.us.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x218.us.us.us.us" ], [ %sum_input401.sroa.0.0.vec.insert.us.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1475.ph = phi i32 [ undef, %"for sum_input.s1.r19$x218.us.us.us.us" ], [ %4877, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %sum_input401.sroa.0.24.us.us.us.us.unr = phi <6 x i32> [ %sum_input401.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x218.us.us.us.us" ], [ %sum_input401.sroa.0.0.vec.insert.us.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124223.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x218.us.us.us.us" ], [ %4878, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1521.not, label %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124221.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil"
  %sum_input401.sroa.0.24.us.us.us.us.epil = phi <6 x i32> [ %sum_input401.sroa.0.0.vec.insert.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil" ], [ %sum_input401.sroa.0.24.us.us.us.us.unr, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124223.us.us.us.us.epil" = phi i32 [ %4887, %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124223.us.us.us.us.unr", %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1520 = phi i32 [ %epil.iter1520.sub, %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil" ], [ %xtraiter1519, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa" ]
  %sum_input401.sroa.0.0.vec.extract591.us.us.us.us.epil = extractelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us.epil, i32 0
  %4879 = shl nsw i32 %"sum_input.s1.r19$z.r124223.us.us.us.us.epil", 2
  %4880 = add nsw i32 %4806, %4879
  %4881 = getelementptr inbounds i8, i8* %13, i32 %4880
  %4882 = bitcast i8* %4881 to <4 x i8>*
  %4883 = load <4 x i8>, <4 x i8>* %4882, align 4, !tbaa !109
  %4884 = zext <4 x i8> %4883 to <4 x i32>
  %4885 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %4884) #9
  %4886 = add nsw i32 %4885, %sum_input401.sroa.0.0.vec.extract591.us.us.us.us.epil
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.epil = insertelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us.epil, i32 %4886, i32 0
  %4887 = add nuw nsw i32 %"sum_input.s1.r19$z.r124223.us.us.us.us.epil", 1
  %epil.iter1520.sub = add i32 %epil.iter1520, -1
  %epil.iter1520.cmp.not = icmp eq i32 %epil.iter1520.sub, 0
  br i1 %epil.iter1520.cmp.not, label %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil", !llvm.loop !117

"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa"
  %sum_input401.sroa.0.24.us.us.us.us.lcssa = phi <6 x i32> [ %sum_input401.sroa.0.24.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa" ], [ %sum_input401.sroa.0.24.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil" ]
  %.lcssa1475 = phi i32 [ %.lcssa1475.ph, %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us.unr-lcssa" ], [ %4886, %"for sum_input.s1.r19$z.r124221.us.us.us.us.epil" ]
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.le = insertelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1475, i32 0
  %4888 = add nuw nsw i32 %"sum_input.s1.r19$x220.us.us.us.us", 1
  %.not429.us.us.us.us = icmp eq i32 %4888, %9
  br i1 %.not429.us.us.us.us, label %"end for sum_input.s1.r19$x219.loopexit.split.us.us.us.us", label %"for sum_input.s1.r19$x218.us.us.us.us"

"end for sum_input.s1.r19$x219.loopexit.split.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124222.loopexit.us.us.us.us"
  %sum_input401.sroa.0.0.vec.insert.us.us.us.us.le.le = insertelement <6 x i32> %sum_input401.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1475, i32 0
  %4889 = add nuw nsw i32 %"sum_input.s1.r19$y217.us.us.us", 1
  %.not428.us.us.us = icmp eq i32 %4889, %11
  br i1 %.not428.us.us.us, label %"consume sum_input224.us.loopexit1264", label %"for sum_input.s1.r19$y215.us.us.us"

"for convolved.s1.r19$y232.preheader.split.us.us": ; preds = %"for convolved.s1.r19$y232.preheader.us"
  br i1 %4602, label %"for convolved.s1.r19$y232.us.us.us", label %"consume convolved241.us", !prof !96

"for convolved.s1.r19$y232.us.us.us":             ; preds = %"for convolved.s1.r19$y232.preheader.split.us.us", %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us"
  %convolved400.sroa.78.15.us.us.us = phi <32 x i32> [ %5073, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ], [ %convolved400.sroa.78.14.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ]
  %convolved400.sroa.63.15.us.us.us = phi <32 x i32> [ %5036, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ], [ %convolved400.sroa.63.14.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ]
  %convolved400.sroa.48.15.us.us.us = phi <32 x i32> [ %4999, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ], [ %convolved400.sroa.48.14.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ]
  %convolved400.sroa.0.29.us.us.us = phi <32 x i32> [ %4961, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ], [ %convolved400.sroa.0.28.us, %"for convolved.s1.r19$y232.preheader.split.us.us" ]
  %"convolved.s1.r19$y234.us.us.us" = phi i32 [ %5076, %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y232.preheader.split.us.us" ]
  %4890 = mul nsw i32 %"convolved.s1.r19$y234.us.us.us", %dilation_y
  %4891 = add nsw i32 %4890, %4633
  %4892 = mul nsw i32 %4891, %19
  %t1148.us.us.us = add nsw i32 %4628, %4892
  %4893 = mul nsw i32 %"convolved.s1.r19$y234.us.us.us", %12
  br label %"for convolved.s1.r19$x235.us.us.us.us"

"for convolved.s1.r19$x235.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us", %"for convolved.s1.r19$y232.us.us.us"
  %convolved400.sroa.78.16.us.us.us.us = phi <32 x i32> [ %5073, %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us" ], [ %convolved400.sroa.78.15.us.us.us, %"for convolved.s1.r19$y232.us.us.us" ]
  %convolved400.sroa.63.16.us.us.us.us = phi <32 x i32> [ %5036, %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us" ], [ %convolved400.sroa.63.15.us.us.us, %"for convolved.s1.r19$y232.us.us.us" ]
  %convolved400.sroa.48.16.us.us.us.us = phi <32 x i32> [ %4999, %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us" ], [ %convolved400.sroa.48.15.us.us.us, %"for convolved.s1.r19$y232.us.us.us" ]
  %convolved400.sroa.0.30.us.us.us.us = phi <32 x i32> [ %4961, %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us" ], [ %convolved400.sroa.0.29.us.us.us, %"for convolved.s1.r19$y232.us.us.us" ]
  %"convolved.s1.r19$x237.us.us.us.us" = phi i32 [ %5075, %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y232.us.us.us" ]
  %4894 = mul nsw i32 %"convolved.s1.r19$x237.us.us.us.us", %dilation_x
  %t1154.s.us.us.us.us = add nsw i32 %4894, %4789
  %4895 = mul nsw i32 %"convolved.s1.r19$x237.us.us.us.us", %10
  %t1155.us.us.us.us = add i32 %4895, %4893
  %4896 = mul nsw i32 %t1154.s.us.us.us.us, %17
  %4897 = add nsw i32 %t1148.us.us.us, %4896
  %4898 = add i32 %t1155.us.us.us.us, %4780
  %4899 = add i32 %t1155.us.us.us.us, %4778
  %4900 = add i32 %t1155.us.us.us.us, %4776
  br label %"for convolved.s1.r19$z.r124238.us.us.us.us"

"for convolved.s1.r19$z.r124238.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r124238.us.us.us.us", %"for convolved.s1.r19$x235.us.us.us.us"
  %convolved400.sroa.78.18.us.us.us.us = phi <32 x i32> [ %5073, %"for convolved.s1.r19$z.r124238.us.us.us.us" ], [ %convolved400.sroa.78.16.us.us.us.us, %"for convolved.s1.r19$x235.us.us.us.us" ]
  %convolved400.sroa.63.18.us.us.us.us = phi <32 x i32> [ %5036, %"for convolved.s1.r19$z.r124238.us.us.us.us" ], [ %convolved400.sroa.63.16.us.us.us.us, %"for convolved.s1.r19$x235.us.us.us.us" ]
  %convolved400.sroa.48.18.us.us.us.us = phi <32 x i32> [ %4999, %"for convolved.s1.r19$z.r124238.us.us.us.us" ], [ %convolved400.sroa.48.16.us.us.us.us, %"for convolved.s1.r19$x235.us.us.us.us" ]
  %convolved400.sroa.0.32.us.us.us.us = phi <32 x i32> [ %4961, %"for convolved.s1.r19$z.r124238.us.us.us.us" ], [ %convolved400.sroa.0.30.us.us.us.us, %"for convolved.s1.r19$x235.us.us.us.us" ]
  %"convolved.s1.r19$z.r124240.us.us.us.us" = phi i32 [ %5074, %"for convolved.s1.r19$z.r124238.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x235.us.us.us.us" ]
  %4901 = shl nsw i32 %"convolved.s1.r19$z.r124240.us.us.us.us", 2
  %4902 = add nsw i32 %4897, %4901
  %4903 = getelementptr inbounds i8, i8* %13, i32 %4902
  %4904 = bitcast i8* %4903 to <1 x i32>*
  %4905 = load <1 x i32>, <1 x i32>* %4904, align 4, !tbaa !109
  %4906 = shufflevector <1 x i32> %4905, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4907 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4906, <32 x i32> %4906, i32 -4)
  %4908 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4907)
  %4909 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4908, <32 x i32> %4908, i32 -4)
  %4910 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4909)
  %4911 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4910, <32 x i32> %4910, i32 -4)
  %4912 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4911)
  %4913 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4912, <32 x i32> %4912, i32 -4)
  %4914 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4913)
  %4915 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %4914, <32 x i32> %4914, i32 -4)
  %4916 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4915)
  %4917 = bitcast <32 x i32> %4916 to <128 x i8>
  %4918 = zext <128 x i8> %4917 to <128 x i16>
  %4919 = shl nsw i32 %"convolved.s1.r19$z.r124240.us.us.us.us", 5
  %4920 = add nsw i32 %4919, %4781
  %4921 = shl nsw i32 %4920, 2
  %4922 = add nsw i32 %t1155.us.us.us.us, %4921
  %4923 = getelementptr inbounds i8, i8* %5, i32 %4922
  %4924 = bitcast i8* %4923 to <128 x i8>*
  %4925 = load <128 x i8>, <128 x i8>* %4924, align 128, !tbaa !106
  %4926 = zext <128 x i8> %4925 to <128 x i16>
  %4927 = bitcast <128 x i16> %4918 to <64 x i32>
  %4928 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4927)
  %4929 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4927)
  %4930 = bitcast <128 x i16> %4926 to <64 x i32>
  %4931 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4930)
  %4932 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4930)
  %4933 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4929, <32 x i32> %4932) #11
  %4934 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4928, <32 x i32> %4931) #11
  %4935 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4933) #11
  %4936 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4933) #11
  %4937 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4936, <32 x i32> %4935) #11
  %4938 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4934) #11
  %4939 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4934) #11
  %4940 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4939, <32 x i32> %4938) #11
  %4941 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4940, <32 x i32> %4937)
  %4942 = bitcast <64 x i32> %4941 to <128 x i16>
  %t1333.us.us.us.us = zext <128 x i16> %4942 to <128 x i32>
  %4943 = shufflevector <128 x i32> %t1333.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4944 = shufflevector <128 x i32> %t1333.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4945 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4944, <32 x i32> %4943, i32 -4)
  %4946 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4945)
  %4947 = shufflevector <128 x i32> %t1333.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4948 = shufflevector <128 x i32> %t1333.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4949 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4948, <32 x i32> %4947, i32 -4)
  %4950 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4949)
  %4951 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4950, <32 x i32> %4946)
  %4952 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4945)
  %4953 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4949)
  %4954 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4953, <32 x i32> %4952)
  %t1332.us.us.us.us = add nsw <64 x i32> %4954, %4951
  %4955 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1332.us.us.us.us)
  %4956 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1332.us.us.us.us)
  %4957 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4956, <32 x i32> %4955, i32 -4)
  %4958 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4957)
  %4959 = add nsw <32 x i32> %4958, %convolved400.sroa.0.32.us.us.us.us
  %4960 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4957)
  %4961 = add nsw <32 x i32> %4959, %4960
  %4962 = shl nsw i32 %"convolved.s1.r19$z.r124240.us.us.us.us", 7
  %4963 = add i32 %4898, %4962
  %4964 = getelementptr inbounds i8, i8* %5, i32 %4963
  %4965 = bitcast i8* %4964 to <128 x i8>*
  %4966 = load <128 x i8>, <128 x i8>* %4965, align 128, !tbaa !106
  %4967 = zext <128 x i8> %4966 to <128 x i16>
  %4968 = bitcast <128 x i16> %4967 to <64 x i32>
  %4969 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4968)
  %4970 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4968)
  %4971 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4929, <32 x i32> %4970) #11
  %4972 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4928, <32 x i32> %4969) #11
  %4973 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4971) #11
  %4974 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4971) #11
  %4975 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4974, <32 x i32> %4973) #11
  %4976 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4972) #11
  %4977 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4972) #11
  %4978 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %4977, <32 x i32> %4976) #11
  %4979 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4978, <32 x i32> %4975)
  %4980 = bitcast <64 x i32> %4979 to <128 x i16>
  %t1335.us.us.us.us = zext <128 x i16> %4980 to <128 x i32>
  %4981 = shufflevector <128 x i32> %t1335.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4982 = shufflevector <128 x i32> %t1335.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4983 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4982, <32 x i32> %4981, i32 -4)
  %4984 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4983)
  %4985 = shufflevector <128 x i32> %t1335.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4986 = shufflevector <128 x i32> %t1335.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4987 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4986, <32 x i32> %4985, i32 -4)
  %4988 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4987)
  %4989 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4988, <32 x i32> %4984)
  %4990 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4983)
  %4991 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4987)
  %4992 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4991, <32 x i32> %4990)
  %t1334.us.us.us.us = add nsw <64 x i32> %4992, %4989
  %4993 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1334.us.us.us.us)
  %4994 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1334.us.us.us.us)
  %4995 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %4994, <32 x i32> %4993, i32 -4)
  %4996 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4995)
  %4997 = add nsw <32 x i32> %4996, %convolved400.sroa.48.18.us.us.us.us
  %4998 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4995)
  %4999 = add nsw <32 x i32> %4997, %4998
  %5000 = add i32 %4899, %4962
  %5001 = getelementptr inbounds i8, i8* %5, i32 %5000
  %5002 = bitcast i8* %5001 to <128 x i8>*
  %5003 = load <128 x i8>, <128 x i8>* %5002, align 128, !tbaa !106
  %5004 = zext <128 x i8> %5003 to <128 x i16>
  %5005 = bitcast <128 x i16> %5004 to <64 x i32>
  %5006 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5005)
  %5007 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5005)
  %5008 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4929, <32 x i32> %5007) #11
  %5009 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4928, <32 x i32> %5006) #11
  %5010 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5008) #11
  %5011 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5008) #11
  %5012 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5011, <32 x i32> %5010) #11
  %5013 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5009) #11
  %5014 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5009) #11
  %5015 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5014, <32 x i32> %5013) #11
  %5016 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5015, <32 x i32> %5012)
  %5017 = bitcast <64 x i32> %5016 to <128 x i16>
  %t1337.us.us.us.us = zext <128 x i16> %5017 to <128 x i32>
  %5018 = shufflevector <128 x i32> %t1337.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5019 = shufflevector <128 x i32> %t1337.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5020 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5019, <32 x i32> %5018, i32 -4)
  %5021 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5020)
  %5022 = shufflevector <128 x i32> %t1337.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5023 = shufflevector <128 x i32> %t1337.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5024 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5023, <32 x i32> %5022, i32 -4)
  %5025 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5024)
  %5026 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5025, <32 x i32> %5021)
  %5027 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5020)
  %5028 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5024)
  %5029 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5028, <32 x i32> %5027)
  %t1336.us.us.us.us = add nsw <64 x i32> %5029, %5026
  %5030 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1336.us.us.us.us)
  %5031 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1336.us.us.us.us)
  %5032 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5031, <32 x i32> %5030, i32 -4)
  %5033 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5032)
  %5034 = add nsw <32 x i32> %5033, %convolved400.sroa.63.18.us.us.us.us
  %5035 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5032)
  %5036 = add nsw <32 x i32> %5034, %5035
  %5037 = add i32 %4900, %4962
  %5038 = getelementptr inbounds i8, i8* %5, i32 %5037
  %5039 = bitcast i8* %5038 to <128 x i8>*
  %5040 = load <128 x i8>, <128 x i8>* %5039, align 128, !tbaa !106
  %5041 = zext <128 x i8> %5040 to <128 x i16>
  %5042 = bitcast <128 x i16> %5041 to <64 x i32>
  %5043 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5042)
  %5044 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5042)
  %5045 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4929, <32 x i32> %5044) #11
  %5046 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %4928, <32 x i32> %5043) #11
  %5047 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5045) #11
  %5048 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5045) #11
  %5049 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5048, <32 x i32> %5047) #11
  %5050 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5046) #11
  %5051 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5046) #11
  %5052 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5051, <32 x i32> %5050) #11
  %5053 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5052, <32 x i32> %5049)
  %5054 = bitcast <64 x i32> %5053 to <128 x i16>
  %t1339.us.us.us.us = zext <128 x i16> %5054 to <128 x i32>
  %5055 = shufflevector <128 x i32> %t1339.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5056 = shufflevector <128 x i32> %t1339.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5057 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5056, <32 x i32> %5055, i32 -4)
  %5058 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5057)
  %5059 = shufflevector <128 x i32> %t1339.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5060 = shufflevector <128 x i32> %t1339.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5061 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5060, <32 x i32> %5059, i32 -4)
  %5062 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5061)
  %5063 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5062, <32 x i32> %5058)
  %5064 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5057)
  %5065 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5061)
  %5066 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5065, <32 x i32> %5064)
  %t1338.us.us.us.us = add nsw <64 x i32> %5066, %5063
  %5067 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1338.us.us.us.us)
  %5068 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1338.us.us.us.us)
  %5069 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5068, <32 x i32> %5067, i32 -4)
  %5070 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5069)
  %5071 = add nsw <32 x i32> %5070, %convolved400.sroa.78.18.us.us.us.us
  %5072 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5069)
  %5073 = add nsw <32 x i32> %5071, %5072
  %5074 = add nuw nsw i32 %"convolved.s1.r19$z.r124240.us.us.us.us", 1
  %.not427.us.us.us.us = icmp eq i32 %5074, %7
  br i1 %.not427.us.us.us.us, label %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124238.us.us.us.us"

"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124238.us.us.us.us"
  %5075 = add nuw nsw i32 %"convolved.s1.r19$x237.us.us.us.us", 1
  %.not426.us.us.us.us = icmp eq i32 %5075, %9
  br i1 %.not426.us.us.us.us, label %"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x235.us.us.us.us"

"end for convolved.s1.r19$x236.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124239.loopexit.us.us.us.us"
  %5076 = add nuw nsw i32 %"convolved.s1.r19$y234.us.us.us", 1
  %.not425.us.us.us = icmp eq i32 %5076, %11
  br i1 %.not425.us.us.us, label %"consume convolved241.us", label %"for convolved.s1.r19$y232.us.us.us"

next_bb192:                                       ; preds = %next_bb115
  %a107 = ashr i32 %4, 5
  %5077 = icmp sgt i32 %4, 31
  %5078 = select i1 %5077, i32 %a107, i32 0
  %t1167 = sub nsw i32 %119, %5078
  %5079 = mul nsw i32 %19, %18
  %5080 = mul nsw i32 %17, %16
  %5081 = mul nsw i32 %22, %20
  %5082 = add i32 %5081, %5079
  %t1163 = add i32 %5082, %5080
  %5083 = icmp sgt i32 %21, 0
  br i1 %5083, label %"for output.s0.b.rebased245.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased245.preheader":           ; preds = %next_bb192
  %5084 = icmp sgt i32 %29, 0
  %.neg763 = mul i32 %30, %28
  %.neg764 = mul i32 %27, %25
  %.neg765 = mul i32 %31, %20
  %reass.add = add i32 %.neg763, %.neg764
  %reass.add767 = add i32 %reass.add, %.neg765
  %5085 = icmp sgt i32 %11, 0
  %5086 = icmp sgt i32 %9, 0
  %5087 = icmp sgt i32 %7, 0
  %5088 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %5089 = shufflevector <32 x i32> %5088, <32 x i32> undef, <32 x i32> zeroinitializer
  %5090 = sext <32 x i32> %5089 to <32 x i64>
  %5091 = icmp sgt i32 %output_shift, 0
  %5092 = select i1 %5091, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %5093 = add nsw i32 %output_shift, -1
  %5094 = zext i8 %output_zero to i16
  %5095 = insertelement <32 x i16> undef, i16 %5094, i32 0
  %5096 = shufflevector <32 x i16> %5095, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5097 = bitcast <64 x i16> %5096 to <32 x i32>
  %5098 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %5099 = shufflevector <32 x i8> %5098, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5100 = bitcast <128 x i8> %5099 to <32 x i32>
  %5101 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %5102 = shufflevector <32 x i8> %5101, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5103 = bitcast <128 x i8> %5102 to <32 x i32>
  %5104 = icmp sgt i32 %t1167, 0
  %5105 = insertelement <32 x i32> undef, i32 %4, i32 0
  %5106 = shufflevector <32 x i32> %5105, <32 x i32> undef, <32 x i32> zeroinitializer
  %5107 = add i32 %7, -1
  %5108 = add i32 %9, -1
  %xtraiter1497 = and i32 %7, 7
  %5109 = icmp ult i32 %5107, 7
  %unroll_iter1502 = and i32 %7, -8
  %lcmp.mod1499.not = icmp eq i32 %xtraiter1497, 0
  %xtraiter1504 = and i32 %9, 3
  %5110 = icmp ult i32 %5108, 3
  %unroll_iter1509 = and i32 %9, -4
  %lcmp.mod1506.not = icmp eq i32 %xtraiter1504, 0
  %brmerge1345.demorgan = and i1 %5086, %5087
  %or.cond1419 = and i1 %5085, %brmerge1345.demorgan
  %xtraiter1511 = and i32 %7, 1
  %5111 = icmp eq i32 %5107, 0
  %unroll_iter1513 = and i32 %7, -2
  %lcmp.mod1512.not = icmp eq i32 %xtraiter1511, 0
  %brmerge1348.demorgan = and i1 %5086, %5087
  %or.cond1418 = and i1 %5085, %brmerge1348.demorgan
  %xtraiter1515 = and i32 %7, 1
  %5112 = icmp eq i32 %5107, 0
  %unroll_iter1517 = and i32 %7, -2
  %lcmp.mod1516.not = icmp eq i32 %xtraiter1515, 0
  br label %"for output.s0.b.rebased245"

"for output.s0.b.rebased245":                     ; preds = %"for output.s0.b.rebased245.preheader", %"end for output.s0.y.rebased249"
  %sum_input254399.sroa.0.21 = phi <32 x i32> [ %sum_input254399.sroa.0.23, %"end for output.s0.y.rebased249" ], [ undef, %"for output.s0.b.rebased245.preheader" ]
  %convolved400.sroa.0.35 = phi <32 x i32> [ %convolved400.sroa.0.37, %"end for output.s0.y.rebased249" ], [ undef, %"for output.s0.b.rebased245.preheader" ]
  %output.s0.b.rebased247 = phi i32 [ %5785, %"end for output.s0.y.rebased249" ], [ 0, %"for output.s0.b.rebased245.preheader" ]
  br i1 %5084, label %"for output.s0.y.rebased248.preheader", label %"end for output.s0.y.rebased249", !prof !96

"for output.s0.y.rebased248.preheader":           ; preds = %"for output.s0.b.rebased245"
  %5113 = add nsw i32 %output.s0.b.rebased247, %20
  %5114 = mul nsw i32 %5113, %31
  %5115 = sub i32 %5114, %reass.add767
  %5116 = mul nsw i32 %5113, %22
  %5117 = sub i32 %5116, %t1163
  %5118 = sub i32 %5116, %5082
  br i1 %98, label %"for output.s0.y.rebased248.us", label %"end for output.s0.y.rebased249", !prof !96

"for output.s0.y.rebased248.us":                  ; preds = %"for output.s0.y.rebased248.preheader", %"end for output.s0.x.xo252.loopexit.us"
  %sum_input254399.sroa.0.22.us = phi <32 x i32> [ %sum_input254399.sroa.0.34.us, %"end for output.s0.x.xo252.loopexit.us" ], [ %sum_input254399.sroa.0.21, %"for output.s0.y.rebased248.preheader" ]
  %convolved400.sroa.0.36.us = phi <32 x i32> [ %convolved400.sroa.0.50.us, %"end for output.s0.x.xo252.loopexit.us" ], [ %convolved400.sroa.0.35, %"for output.s0.y.rebased248.preheader" ]
  %output.s0.y.rebased250.us = phi i32 [ %5315, %"end for output.s0.x.xo252.loopexit.us" ], [ 0, %"for output.s0.y.rebased248.preheader" ]
  %5119 = add nsw i32 %output.s0.y.rebased250.us, %28
  %5120 = mul nsw i32 %5119, %30
  %t1180.us = add i32 %5115, %5120
  %5121 = mul nsw i32 %5119, %stride_y
  br label %"for output.s0.x.xo251.us"

"for output.s0.x.xo251.us":                       ; preds = %"for output.s0.y.rebased248.us", %"end for output.s0.c.co.rebased.us"
  %sum_input254399.sroa.0.24.us = phi <32 x i32> [ %sum_input254399.sroa.0.34.us, %"end for output.s0.c.co.rebased.us" ], [ %sum_input254399.sroa.0.22.us, %"for output.s0.y.rebased248.us" ]
  %convolved400.sroa.0.38.us = phi <32 x i32> [ %convolved400.sroa.0.50.us, %"end for output.s0.c.co.rebased.us" ], [ %convolved400.sroa.0.36.us, %"for output.s0.y.rebased248.us" ]
  %output.s0.x.xo253.us = phi i32 [ %5291, %"end for output.s0.c.co.rebased.us" ], [ 0, %"for output.s0.y.rebased248.us" ]
  br i1 %t843.not, label %"consume sum_input277.us", label %then_bb257.us

then_bb257.us:                                    ; preds = %"for output.s0.x.xo251.us"
  %sum_input254399.sroa.0.0.vec.insert739.us = insertelement <32 x i32> %sum_input254399.sroa.0.24.us, i32 0, i32 0
  br i1 %t844, label %then_bb260.us, label %next_bb261.us

next_bb261.us:                                    ; preds = %then_bb257.us
  br i1 %5085, label %"for sum_input.s1.r19$y268.preheader.us", label %"consume sum_input277.us", !prof !96

then_bb260.us:                                    ; preds = %then_bb257.us
  br i1 %5085, label %"for sum_input.s1.r19$y262.preheader.us", label %"consume sum_input277.us", !prof !96

"for sum_input.s1.r19$y262.us":                   ; preds = %"for sum_input.s1.r19$y262.preheader.us", %"end for sum_input.s1.r19$x266.us"
  %sum_input254399.sroa.0.26.us = phi <32 x i32> [ %sum_input254399.sroa.0.28.us, %"end for sum_input.s1.r19$x266.us" ], [ %sum_input254399.sroa.0.0.vec.insert739.us, %"for sum_input.s1.r19$y262.preheader.us" ]
  %"sum_input.s1.r19$y264.us" = phi i32 [ %5167, %"end for sum_input.s1.r19$x266.us" ], [ 0, %"for sum_input.s1.r19$y262.preheader.us" ]
  br i1 %5086, label %"for sum_input.s1.r19$x265.preheader.us", label %"end for sum_input.s1.r19$x266.us", !prof !96

"for sum_input.s1.r19$x265.us":                   ; preds = %"for sum_input.s1.r19$x265.preheader.us", %"for sum_input.s1.r19$x265.us"
  %sum_input254399.sroa.0.27.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.vec.insert735.us.3, %"for sum_input.s1.r19$x265.us" ], [ %sum_input254399.sroa.0.26.us, %"for sum_input.s1.r19$x265.preheader.us" ]
  %"sum_input.s1.r19$x267.us" = phi i32 [ %5157, %"for sum_input.s1.r19$x265.us" ], [ 0, %"for sum_input.s1.r19$x265.preheader.us" ]
  %niter1510 = phi i32 [ %niter1510.nsub.3, %"for sum_input.s1.r19$x265.us" ], [ %unroll_iter1509, %"for sum_input.s1.r19$x265.preheader.us" ]
  %sum_input254399.sroa.0.0.vec.extract737.us = extractelement <32 x i32> %sum_input254399.sroa.0.27.us, i32 0
  %5122 = mul nsw i32 %"sum_input.s1.r19$x267.us", %dilation_x
  %reass.add772.us = add i32 %5312, %5122
  %reass.mul773.us = shl i32 %reass.add772.us, 2
  %5123 = add i32 %t1183.us, %reass.mul773.us
  %5124 = getelementptr inbounds i8, i8* %13, i32 %5123
  %5125 = bitcast i8* %5124 to <4 x i8>*
  %5126 = load <4 x i8>, <4 x i8>* %5125, align 4, !tbaa !109
  %5127 = zext <4 x i8> %5126 to <4 x i32>
  %5128 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5127) #9
  %5129 = add nsw i32 %5128, %sum_input254399.sroa.0.0.vec.extract737.us
  %5130 = or i32 %"sum_input.s1.r19$x267.us", 1
  %5131 = mul nsw i32 %5130, %dilation_x
  %reass.add772.us.1 = add i32 %5312, %5131
  %reass.mul773.us.1 = shl i32 %reass.add772.us.1, 2
  %5132 = add i32 %t1183.us, %reass.mul773.us.1
  %5133 = getelementptr inbounds i8, i8* %13, i32 %5132
  %5134 = bitcast i8* %5133 to <4 x i8>*
  %5135 = load <4 x i8>, <4 x i8>* %5134, align 4, !tbaa !109
  %5136 = zext <4 x i8> %5135 to <4 x i32>
  %5137 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5136) #9
  %5138 = add nsw i32 %5137, %5129
  %5139 = or i32 %"sum_input.s1.r19$x267.us", 2
  %5140 = mul nsw i32 %5139, %dilation_x
  %reass.add772.us.2 = add i32 %5312, %5140
  %reass.mul773.us.2 = shl i32 %reass.add772.us.2, 2
  %5141 = add i32 %t1183.us, %reass.mul773.us.2
  %5142 = getelementptr inbounds i8, i8* %13, i32 %5141
  %5143 = bitcast i8* %5142 to <4 x i8>*
  %5144 = load <4 x i8>, <4 x i8>* %5143, align 4, !tbaa !109
  %5145 = zext <4 x i8> %5144 to <4 x i32>
  %5146 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5145) #9
  %5147 = add nsw i32 %5146, %5138
  %sum_input254399.sroa.0.0.vec.insert735.us.2 = insertelement <32 x i32> %sum_input254399.sroa.0.27.us, i32 %5147, i32 0
  %5148 = or i32 %"sum_input.s1.r19$x267.us", 3
  %5149 = mul nsw i32 %5148, %dilation_x
  %reass.add772.us.3 = add i32 %5312, %5149
  %reass.mul773.us.3 = shl i32 %reass.add772.us.3, 2
  %5150 = add i32 %t1183.us, %reass.mul773.us.3
  %5151 = getelementptr inbounds i8, i8* %13, i32 %5150
  %5152 = bitcast i8* %5151 to <4 x i8>*
  %5153 = load <4 x i8>, <4 x i8>* %5152, align 4, !tbaa !109
  %5154 = zext <4 x i8> %5153 to <4 x i32>
  %5155 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5154) #9
  %5156 = add nsw i32 %5155, %5147
  %sum_input254399.sroa.0.0.vec.insert735.us.3 = insertelement <32 x i32> %sum_input254399.sroa.0.0.vec.insert735.us.2, i32 %5156, i32 0
  %5157 = add nuw nsw i32 %"sum_input.s1.r19$x267.us", 4
  %niter1510.nsub.3 = add i32 %niter1510, -4
  %niter1510.ncmp.3 = icmp eq i32 %niter1510.nsub.3, 0
  br i1 %niter1510.ncmp.3, label %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x265.us"

"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x265.us"
  %sum_input254399.sroa.0.0.vec.insert735.us.2.le = insertelement <32 x i32> %sum_input254399.sroa.0.27.us, i32 %5147, i32 0
  %sum_input254399.sroa.0.0.vec.insert735.us.3.le = insertelement <32 x i32> %sum_input254399.sroa.0.0.vec.insert735.us.2.le, i32 %5156, i32 0
  br label %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa": ; preds = %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa.loopexit", %"for sum_input.s1.r19$x265.preheader.us"
  %sum_input254399.sroa.0.27.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x265.preheader.us" ], [ %sum_input254399.sroa.0.0.vec.insert735.us.2.le, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1484.ph = phi i32 [ undef, %"for sum_input.s1.r19$x265.preheader.us" ], [ %5156, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input254399.sroa.0.27.us.unr = phi <32 x i32> [ %sum_input254399.sroa.0.26.us, %"for sum_input.s1.r19$x265.preheader.us" ], [ %sum_input254399.sroa.0.0.vec.insert735.us.3.le, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x267.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x265.preheader.us" ], [ %5157, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1506.not, label %"end for sum_input.s1.r19$x266.us.loopexit", label %"for sum_input.s1.r19$x265.us.epil"

"for sum_input.s1.r19$x265.us.epil":              ; preds = %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x265.us.epil"
  %sum_input254399.sroa.0.27.us.epil = phi <32 x i32> [ %sum_input254399.sroa.0.0.vec.insert735.us.epil, %"for sum_input.s1.r19$x265.us.epil" ], [ %sum_input254399.sroa.0.27.us.unr, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x267.us.epil" = phi i32 [ %5166, %"for sum_input.s1.r19$x265.us.epil" ], [ %"sum_input.s1.r19$x267.us.unr", %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa" ]
  %epil.iter1505 = phi i32 [ %epil.iter1505.sub, %"for sum_input.s1.r19$x265.us.epil" ], [ %xtraiter1504, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa" ]
  %sum_input254399.sroa.0.0.vec.extract737.us.epil = extractelement <32 x i32> %sum_input254399.sroa.0.27.us.epil, i32 0
  %5158 = mul nsw i32 %"sum_input.s1.r19$x267.us.epil", %dilation_x
  %reass.add772.us.epil = add i32 %5312, %5158
  %reass.mul773.us.epil = shl i32 %reass.add772.us.epil, 2
  %5159 = add i32 %t1183.us, %reass.mul773.us.epil
  %5160 = getelementptr inbounds i8, i8* %13, i32 %5159
  %5161 = bitcast i8* %5160 to <4 x i8>*
  %5162 = load <4 x i8>, <4 x i8>* %5161, align 4, !tbaa !109
  %5163 = zext <4 x i8> %5162 to <4 x i32>
  %5164 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5163) #9
  %5165 = add nsw i32 %5164, %sum_input254399.sroa.0.0.vec.extract737.us.epil
  %sum_input254399.sroa.0.0.vec.insert735.us.epil = insertelement <32 x i32> %sum_input254399.sroa.0.27.us.epil, i32 %5165, i32 0
  %5166 = add nuw nsw i32 %"sum_input.s1.r19$x267.us.epil", 1
  %epil.iter1505.sub = add i32 %epil.iter1505, -1
  %epil.iter1505.cmp.not = icmp eq i32 %epil.iter1505.sub, 0
  br i1 %epil.iter1505.cmp.not, label %"end for sum_input.s1.r19$x266.us.loopexit", label %"for sum_input.s1.r19$x265.us.epil", !llvm.loop !118

"end for sum_input.s1.r19$x266.us.loopexit":      ; preds = %"for sum_input.s1.r19$x265.us.epil", %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa"
  %sum_input254399.sroa.0.27.us.lcssa = phi <32 x i32> [ %sum_input254399.sroa.0.27.us.lcssa.ph, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa" ], [ %sum_input254399.sroa.0.27.us.epil, %"for sum_input.s1.r19$x265.us.epil" ]
  %.lcssa1484 = phi i32 [ %.lcssa1484.ph, %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa" ], [ %5165, %"for sum_input.s1.r19$x265.us.epil" ]
  %sum_input254399.sroa.0.0.vec.insert735.us.le = insertelement <32 x i32> %sum_input254399.sroa.0.27.us.lcssa, i32 %.lcssa1484, i32 0
  br label %"end for sum_input.s1.r19$x266.us"

"end for sum_input.s1.r19$x266.us":               ; preds = %"end for sum_input.s1.r19$x266.us.loopexit", %"for sum_input.s1.r19$y262.us"
  %sum_input254399.sroa.0.28.us = phi <32 x i32> [ %sum_input254399.sroa.0.26.us, %"for sum_input.s1.r19$y262.us" ], [ %sum_input254399.sroa.0.0.vec.insert735.us.le, %"end for sum_input.s1.r19$x266.us.loopexit" ]
  %5167 = add nuw nsw i32 %"sum_input.s1.r19$y264.us", 1
  %.not419.us = icmp eq i32 %5167, %11
  br i1 %.not419.us, label %"consume sum_input277.us", label %"for sum_input.s1.r19$y262.us"

"consume sum_input277.us":                        ; preds = %"end for sum_input.s1.r19$x272.loopexit.us.us", %"end for sum_input.s1.r19$x266.us", %"for sum_input.s1.r19$y268.preheader.us", %then_bb260.us, %next_bb261.us, %"for output.s0.x.xo251.us"
  %sum_input254399.sroa.0.34.us = phi <32 x i32> [ %sum_input254399.sroa.0.24.us, %"for output.s0.x.xo251.us" ], [ %sum_input254399.sroa.0.0.vec.insert739.us, %then_bb260.us ], [ %sum_input254399.sroa.0.0.vec.insert739.us, %next_bb261.us ], [ %sum_input254399.sroa.0.0.vec.insert739.us, %"for sum_input.s1.r19$y268.preheader.us" ], [ %sum_input254399.sroa.0.28.us, %"end for sum_input.s1.r19$x266.us" ], [ %.us-phi.us.us, %"end for sum_input.s1.r19$x272.loopexit.us.us" ]
  br i1 %5077, label %"for output.s0.c.co278.preheader.us", label %"end for output.s0.c.co279.us", !prof !96

"for output.s0.c.co278.us":                       ; preds = %"for output.s0.c.co278.preheader.us", %"consume convolved297.us"
  %convolved400.sroa.0.40.us = phi <32 x i32> [ %convolved400.sroa.0.48.us, %"consume convolved297.us" ], [ %convolved400.sroa.0.38.us, %"for output.s0.c.co278.preheader.us" ]
  %output.s0.c.co280.us = phi i32 [ %5206, %"consume convolved297.us" ], [ 0, %"for output.s0.c.co278.preheader.us" ]
  %5168 = shl nsw i32 %output.s0.c.co280.us, 5
  %5169 = icmp slt i32 %5168, %4
  br i1 %5169, label %then_bb283.us, label %"consume convolved297.us"

then_bb283.us:                                    ; preds = %"for output.s0.c.co278.us"
  %5170 = getelementptr inbounds i32, i32* %offset_c, i32 %5168
  %5171 = bitcast i32* %5170 to <32 x i32>*
  %5172 = load <32 x i32>, <32 x i32>* %5171, align 128, !tbaa !104
  %convolved400.sroa.0.42.us = sub nsw <32 x i32> %5172, %5310
  %5173 = mul nsw i32 %output.s0.c.co280.us, %8
  br i1 %or.cond1419, label %"for convolved.s1.r19$y288.us.us.us", label %"consume convolved297.us", !prof !103

"consume convolved297.us":                        ; preds = %"end for convolved.s1.r19$x292.loopexit.split.us.us.us.us", %then_bb283.us, %"for output.s0.c.co278.us"
  %convolved400.sroa.0.48.us = phi <32 x i32> [ %convolved400.sroa.0.42.us, %then_bb283.us ], [ %convolved400.sroa.0.40.us, %"for output.s0.c.co278.us" ], [ %.lcssa1485, %"end for convolved.s1.r19$x292.loopexit.split.us.us.us.us" ]
  %5174 = sext <32 x i32> %convolved400.sroa.0.48.us to <32 x i64>
  %5175 = mul nsw <32 x i64> %5174, %5090
  %5176 = ashr <32 x i64> %5175, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5177 = add nsw <32 x i64> %5176, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a110.us = ashr <32 x i64> %5177, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5178 = icmp slt <32 x i64> %a110.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a109.us = select <32 x i1> %5178, <32 x i64> %a110.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5179 = icmp sgt <32 x i64> %a109.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5180 = select <32 x i1> %5179, <32 x i64> %a109.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5181 = trunc <32 x i64> %5180 to <32 x i32>
  %5182 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5181, i32 %output_shift) #11
  %5183 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5181, i32 %5093) #11
  %5184 = and <32 x i32> %5183, %5092
  %5185 = add nsw <32 x i32> %5184, %5182
  %5186 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5185, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %5187 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %5186, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %5188 = trunc <32 x i32> %5187 to <32 x i16>
  %5189 = shufflevector <32 x i16> %5188, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5190 = bitcast <64 x i16> %5189 to <32 x i32>
  %5191 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %5190, <32 x i32> %5097) #11
  %5192 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %5191, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %5193 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %5192, <32 x i32> zeroinitializer) #11
  %5194 = bitcast <32 x i32> %5193 to <64 x i16>
  %5195 = shufflevector <64 x i16> %5194, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5196 = trunc <32 x i16> %5195 to <32 x i8>
  %5197 = shufflevector <32 x i8> %5196, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5198 = bitcast <128 x i8> %5197 to <32 x i32>
  %5199 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %5198, <32 x i32> %5100) #11
  %5200 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %5199, <32 x i32> %5103) #11
  %5201 = bitcast <32 x i32> %5200 to <128 x i8>
  %5202 = shufflevector <128 x i8> %5201, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5203 = add nsw i32 %5309, %5168
  %5204 = getelementptr inbounds i8, i8* %23, i32 %5203
  %5205 = bitcast i8* %5204 to <32 x i8>*
  store <32 x i8> %5202, <32 x i8>* %5205, align 1, !tbaa !112
  %5206 = add nuw nsw i32 %output.s0.c.co280.us, 1
  %.not412.us = icmp eq i32 %5206, %5078
  br i1 %.not412.us, label %"end for output.s0.c.co279.us", label %"for output.s0.c.co278.us"

"end for output.s0.c.co279.us":                   ; preds = %"consume convolved297.us", %"consume sum_input277.us"
  %convolved400.sroa.0.41.us = phi <32 x i32> [ %convolved400.sroa.0.38.us, %"consume sum_input277.us" ], [ %convolved400.sroa.0.48.us, %"consume convolved297.us" ]
  br i1 %5104, label %"for output.s0.c.co.rebased.preheader.us", label %"end for output.s0.c.co.rebased.us", !prof !96

"for output.s0.c.co.rebased.us":                  ; preds = %"for output.s0.c.co.rebased.preheader.us", %after_bb324.us
  %convolved400.sroa.0.49.us = phi <32 x i32> [ %convolved400.sroa.0.57.us, %after_bb324.us ], [ %convolved400.sroa.0.41.us, %"for output.s0.c.co.rebased.preheader.us" ]
  %output.s0.c.co.rebased.us = phi i32 [ %5290, %after_bb324.us ], [ 0, %"for output.s0.c.co.rebased.preheader.us" ]
  %5207 = add nsw i32 %output.s0.c.co.rebased.us, %5078
  %5208 = icmp sgt i32 %5207, %a0
  %5209 = shl nsw i32 %5207, 5
  %5210 = icmp sge i32 %5209, %4
  %.not1341 = or i1 %5208, %5210
  %5211 = add nsw i32 %output.s0.c.co.rebased.us, %a107
  %.not1258 = icmp sgt i32 %5211, %a0
  %or.cond1342 = or i1 %.not1341, %.not1258
  br i1 %or.cond1342, label %"consume convolved323.us", label %then_bb306.us

then_bb306.us:                                    ; preds = %"for output.s0.c.co.rebased.us"
  %5212 = shl nsw i32 %5211, 5
  %5213 = getelementptr inbounds i32, i32* %offset_c, i32 %5212
  %5214 = bitcast i32* %5213 to <32 x i32>*
  %5215 = load <32 x i32>, <32 x i32>* %5214, align 128, !tbaa !104
  %convolved400.sroa.0.51.us = sub nsw <32 x i32> %5215, %5302
  %5216 = mul nsw i32 %5211, %8
  br i1 %or.cond1418, label %"for convolved.s1.r19$y314.us.us.us", label %"consume convolved323.us", !prof !119

"consume convolved323.us":                        ; preds = %"end for convolved.s1.r19$x318.loopexit.split.us.us.us.us", %then_bb306.us, %"for output.s0.c.co.rebased.us"
  %convolved400.sroa.0.57.us = phi <32 x i32> [ %convolved400.sroa.0.51.us, %then_bb306.us ], [ %convolved400.sroa.0.49.us, %"for output.s0.c.co.rebased.us" ], [ %.lcssa1486, %"end for convolved.s1.r19$x318.loopexit.split.us.us.us.us" ]
  %5217 = add nsw i32 %5209, 32
  %.not406.us = icmp sgt i32 %5217, %4
  br i1 %.not406.us, label %next_bb326.us, label %then_bb325.us

then_bb325.us:                                    ; preds = %"consume convolved323.us"
  %5218 = sext <32 x i32> %convolved400.sroa.0.57.us to <32 x i64>
  %5219 = mul nsw <32 x i64> %5218, %5090
  %5220 = ashr <32 x i64> %5219, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5221 = add nsw <32 x i64> %5220, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a117.us = ashr <32 x i64> %5221, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5222 = icmp slt <32 x i64> %a117.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a116.us = select <32 x i1> %5222, <32 x i64> %a117.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5223 = icmp sgt <32 x i64> %a116.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5224 = select <32 x i1> %5223, <32 x i64> %a116.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5225 = trunc <32 x i64> %5224 to <32 x i32>
  %5226 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5225, i32 %output_shift) #11
  %5227 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5225, i32 %5093) #11
  %5228 = and <32 x i32> %5227, %5092
  %5229 = add nsw <32 x i32> %5228, %5226
  %5230 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5229, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %5231 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %5230, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %5232 = trunc <32 x i32> %5231 to <32 x i16>
  %5233 = shufflevector <32 x i16> %5232, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5234 = bitcast <64 x i16> %5233 to <32 x i32>
  %5235 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %5234, <32 x i32> %5097) #11
  %5236 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %5235, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %5237 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %5236, <32 x i32> zeroinitializer) #11
  %5238 = bitcast <32 x i32> %5237 to <64 x i16>
  %5239 = shufflevector <64 x i16> %5238, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5240 = trunc <32 x i16> %5239 to <32 x i8>
  %5241 = shufflevector <32 x i8> %5240, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5242 = bitcast <128 x i8> %5241 to <32 x i32>
  %5243 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %5242, <32 x i32> %5100) #11
  %5244 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %5243, <32 x i32> %5103) #11
  %5245 = bitcast <32 x i32> %5244 to <128 x i8>
  %5246 = shufflevector <128 x i8> %5245, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5247 = add nsw i32 %output.s0.c.co.rebased.us, %a107
  %5248 = shl nsw i32 %5247, 5
  %5249 = add nsw i32 %5301, %5248
  %5250 = getelementptr inbounds i8, i8* %23, i32 %5249
  %5251 = bitcast i8* %5250 to <32 x i8>*
  store <32 x i8> %5246, <32 x i8>* %5251, align 1, !tbaa !112
  br label %after_bb324.us

next_bb326.us:                                    ; preds = %"consume convolved323.us"
  %5252 = or i32 %5209, 1
  %5253 = insertelement <32 x i32> undef, i32 %5252, i32 0
  %5254 = shufflevector <32 x i32> %5253, <32 x i32> undef, <32 x i32> zeroinitializer
  %5255 = add nsw <32 x i32> %5254, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5256 = icmp sle <32 x i32> %5255, %5106
  %.not407.us = icmp sgt i32 %5252, %4
  %5257 = sext <32 x i32> %convolved400.sroa.0.57.us to <32 x i64>
  %5258 = select i1 %.not407.us, <32 x i64> zeroinitializer, <32 x i64> %5257
  %5259 = mul nsw <32 x i64> %5258, %5090
  %5260 = ashr <32 x i64> %5259, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5261 = add nsw <32 x i64> %5260, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a122.us = ashr <32 x i64> %5261, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5262 = icmp slt <32 x i64> %a122.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a121.us = select <32 x i1> %5262, <32 x i64> %a122.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5263 = icmp sgt <32 x i64> %a121.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5264 = select <32 x i1> %5263, <32 x i64> %a121.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5265 = trunc <32 x i64> %5264 to <32 x i32>
  %5266 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5265, i32 %output_shift) #11
  %5267 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5265, i32 %5093) #11
  %5268 = and <32 x i32> %5267, %5092
  %5269 = add nsw <32 x i32> %5268, %5266
  %5270 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5269, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %5271 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %5270, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %5272 = trunc <32 x i32> %5271 to <32 x i16>
  %5273 = shufflevector <32 x i16> %5272, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5274 = bitcast <64 x i16> %5273 to <32 x i32>
  %5275 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %5274, <32 x i32> %5097) #11
  %5276 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %5275, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %5277 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %5276, <32 x i32> zeroinitializer) #11
  %5278 = bitcast <32 x i32> %5277 to <64 x i16>
  %5279 = shufflevector <64 x i16> %5278, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5280 = trunc <32 x i16> %5279 to <32 x i8>
  %5281 = shufflevector <32 x i8> %5280, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5282 = bitcast <128 x i8> %5281 to <32 x i32>
  %5283 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %5282, <32 x i32> %5100) #11
  %5284 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %5283, <32 x i32> %5103) #11
  %5285 = bitcast <32 x i32> %5284 to <128 x i8>
  %5286 = shufflevector <128 x i8> %5285, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5287 = add nsw i32 %5301, %5209
  %5288 = getelementptr inbounds i8, i8* %23, i32 %5287
  %5289 = bitcast i8* %5288 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %5286, <32 x i8>* %5289, i32 1, <32 x i1> %5256), !tbaa !112
  br label %after_bb324.us

after_bb324.us:                                   ; preds = %next_bb326.us, %then_bb325.us
  %5290 = add nuw nsw i32 %output.s0.c.co.rebased.us, 1
  %.not408.us = icmp eq i32 %5290, %t1167
  br i1 %.not408.us, label %"end for output.s0.c.co.rebased.us", label %"for output.s0.c.co.rebased.us"

"end for output.s0.c.co.rebased.us":              ; preds = %after_bb324.us, %"end for output.s0.c.co279.us"
  %convolved400.sroa.0.50.us = phi <32 x i32> [ %convolved400.sroa.0.41.us, %"end for output.s0.c.co279.us" ], [ %convolved400.sroa.0.57.us, %after_bb324.us ]
  %5291 = add nuw nsw i32 %output.s0.x.xo253.us, 1
  %.not405.us = icmp eq i32 %5291, %26
  br i1 %.not405.us, label %"end for output.s0.x.xo252.loopexit.us", label %"for output.s0.x.xo251.us"

"for sum_input.s1.r19$x265.preheader.us":         ; preds = %"for sum_input.s1.r19$y262.us"
  %5292 = mul nsw i32 %"sum_input.s1.r19$y264.us", %dilation_y
  %5293 = add nsw i32 %5292, %5121
  %5294 = mul nsw i32 %5293, %19
  %t1183.us = add i32 %5118, %5294
  br i1 %5110, label %"end for sum_input.s1.r19$x266.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x265.us"

"for output.s0.c.co.rebased.preheader.us":        ; preds = %"end for output.s0.c.co279.us"
  %sum_input254399.sroa.0.0.vec.extract728.us = extractelement <32 x i32> %sum_input254399.sroa.0.34.us, i32 0
  %5295 = mul nsw i32 %sum_input254399.sroa.0.0.vec.extract728.us, %361
  %5296 = insertelement <32 x i32> undef, i32 %5295, i32 0
  %5297 = shufflevector <32 x i32> %5296, <32 x i32> undef, <32 x i32> zeroinitializer
  %5298 = add nsw i32 %output.s0.x.xo253.us, %25
  %5299 = mul nsw i32 %5298, %stride_x
  %5300 = mul nsw i32 %5298, %27
  %5301 = add nsw i32 %5300, %t1180.us
  %5302 = select i1 %t843.not, <32 x i32> zeroinitializer, <32 x i32> %5297
  br label %"for output.s0.c.co.rebased.us"

"for output.s0.c.co278.preheader.us":             ; preds = %"consume sum_input277.us"
  %sum_input254399.sroa.0.0.vec.extract730.us = extractelement <32 x i32> %sum_input254399.sroa.0.34.us, i32 0
  %5303 = mul nsw i32 %sum_input254399.sroa.0.0.vec.extract730.us, %361
  %5304 = insertelement <32 x i32> undef, i32 %5303, i32 0
  %5305 = shufflevector <32 x i32> %5304, <32 x i32> undef, <32 x i32> zeroinitializer
  %5306 = add nsw i32 %output.s0.x.xo253.us, %25
  %5307 = mul nsw i32 %5306, %stride_x
  %5308 = mul nsw i32 %5306, %27
  %5309 = add nsw i32 %5308, %t1180.us
  %5310 = select i1 %t843.not, <32 x i32> zeroinitializer, <32 x i32> %5305
  br label %"for output.s0.c.co278.us"

"for sum_input.s1.r19$y262.preheader.us":         ; preds = %then_bb260.us
  %5311 = add nsw i32 %output.s0.x.xo253.us, %25
  %5312 = sub i32 %5311, %16
  br label %"for sum_input.s1.r19$y262.us"

"for sum_input.s1.r19$y268.preheader.us":         ; preds = %next_bb261.us
  %5313 = add nsw i32 %output.s0.x.xo253.us, %25
  %5314 = mul nsw i32 %5313, %stride_x
  br i1 %5086, label %"for sum_input.s1.r19$y268.us.us", label %"consume sum_input277.us", !prof !96

"end for output.s0.x.xo252.loopexit.us":          ; preds = %"end for output.s0.c.co.rebased.us"
  %5315 = add nuw nsw i32 %output.s0.y.rebased250.us, 1
  %.not404.us = icmp eq i32 %5315, %29
  br i1 %.not404.us, label %"end for output.s0.y.rebased249", label %"for output.s0.y.rebased248.us"

"for sum_input.s1.r19$y268.us.us":                ; preds = %"for sum_input.s1.r19$y268.preheader.us", %"end for sum_input.s1.r19$x272.loopexit.us.us"
  %sum_input254399.sroa.0.29.us.us = phi <32 x i32> [ %.us-phi.us.us, %"end for sum_input.s1.r19$x272.loopexit.us.us" ], [ %sum_input254399.sroa.0.0.vec.insert739.us, %"for sum_input.s1.r19$y268.preheader.us" ]
  %"sum_input.s1.r19$y270.us.us" = phi i32 [ %5319, %"end for sum_input.s1.r19$x272.loopexit.us.us" ], [ 0, %"for sum_input.s1.r19$y268.preheader.us" ]
  %5316 = mul nsw i32 %"sum_input.s1.r19$y270.us.us", %dilation_y
  %5317 = add nsw i32 %5316, %5121
  %5318 = mul nsw i32 %5317, %19
  %t1185.us.us = add nsw i32 %5117, %5318
  br i1 %5087, label %"for sum_input.s1.r19$x271.us.us.us", label %"end for sum_input.s1.r19$x272.loopexit.us.us", !prof !96

"end for sum_input.s1.r19$x272.loopexit.us.us.loopexit": ; preds = %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us"
  %sum_input254399.sroa.0.0.vec.insert.us.us.us.le.le = insertelement <32 x i32> %sum_input254399.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1483, i32 0
  br label %"end for sum_input.s1.r19$x272.loopexit.us.us"

"end for sum_input.s1.r19$x272.loopexit.us.us":   ; preds = %"end for sum_input.s1.r19$x272.loopexit.us.us.loopexit", %"for sum_input.s1.r19$y268.us.us"
  %.us-phi.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.29.us.us, %"for sum_input.s1.r19$y268.us.us" ], [ %sum_input254399.sroa.0.0.vec.insert.us.us.us.le.le, %"end for sum_input.s1.r19$x272.loopexit.us.us.loopexit" ]
  %5319 = add nuw nsw i32 %"sum_input.s1.r19$y270.us.us", 1
  %.not416.us.us = icmp eq i32 %5319, %11
  br i1 %.not416.us.us, label %"consume sum_input277.us", label %"for sum_input.s1.r19$y268.us.us"

"for sum_input.s1.r19$x271.us.us.us":             ; preds = %"for sum_input.s1.r19$y268.us.us", %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us"
  %sum_input254399.sroa.0.30.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.vec.insert.us.us.us.le, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us" ], [ %sum_input254399.sroa.0.29.us.us, %"for sum_input.s1.r19$y268.us.us" ]
  %"sum_input.s1.r19$x273.us.us.us" = phi i32 [ %5404, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us" ], [ 0, %"for sum_input.s1.r19$y268.us.us" ]
  %5320 = mul nsw i32 %"sum_input.s1.r19$x273.us.us.us", %dilation_x
  %t1186.s.us.us.us = add nsw i32 %5320, %5314
  %5321 = mul nsw i32 %t1186.s.us.us.us, %17
  %5322 = add nsw i32 %t1185.us.us, %5321
  br i1 %5109, label %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124274.us.us.us"

"for sum_input.s1.r19$z.r124274.us.us.us":        ; preds = %"for sum_input.s1.r19$x271.us.us.us", %"for sum_input.s1.r19$z.r124274.us.us.us"
  %sum_input254399.sroa.0.32.us.us.us = phi <32 x i32> [ %sum_input254399.sroa.0.0.vec.insert.us.us.us.7, %"for sum_input.s1.r19$z.r124274.us.us.us" ], [ %sum_input254399.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x271.us.us.us" ]
  %"sum_input.s1.r19$z.r124276.us.us.us" = phi i32 [ %5394, %"for sum_input.s1.r19$z.r124274.us.us.us" ], [ 0, %"for sum_input.s1.r19$x271.us.us.us" ]
  %niter1503 = phi i32 [ %niter1503.nsub.7, %"for sum_input.s1.r19$z.r124274.us.us.us" ], [ %unroll_iter1502, %"for sum_input.s1.r19$x271.us.us.us" ]
  %sum_input254399.sroa.0.0.vec.extract733.us.us.us = extractelement <32 x i32> %sum_input254399.sroa.0.32.us.us.us, i32 0
  %5323 = shl nsw i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5324 = add nsw i32 %5322, %5323
  %5325 = getelementptr inbounds i8, i8* %13, i32 %5324
  %5326 = bitcast i8* %5325 to <4 x i8>*
  %5327 = load <4 x i8>, <4 x i8>* %5326, align 4, !tbaa !109
  %5328 = zext <4 x i8> %5327 to <4 x i32>
  %5329 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5328) #9
  %5330 = add nsw i32 %5329, %sum_input254399.sroa.0.0.vec.extract733.us.us.us
  %5331 = shl i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5332 = or i32 %5331, 4
  %5333 = add nsw i32 %5322, %5332
  %5334 = getelementptr inbounds i8, i8* %13, i32 %5333
  %5335 = bitcast i8* %5334 to <4 x i8>*
  %5336 = load <4 x i8>, <4 x i8>* %5335, align 4, !tbaa !109
  %5337 = zext <4 x i8> %5336 to <4 x i32>
  %5338 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5337) #9
  %5339 = add nsw i32 %5338, %5330
  %5340 = shl i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5341 = or i32 %5340, 8
  %5342 = add nsw i32 %5322, %5341
  %5343 = getelementptr inbounds i8, i8* %13, i32 %5342
  %5344 = bitcast i8* %5343 to <4 x i8>*
  %5345 = load <4 x i8>, <4 x i8>* %5344, align 4, !tbaa !109
  %5346 = zext <4 x i8> %5345 to <4 x i32>
  %5347 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5346) #9
  %5348 = add nsw i32 %5347, %5339
  %5349 = shl i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5350 = or i32 %5349, 12
  %5351 = add nsw i32 %5322, %5350
  %5352 = getelementptr inbounds i8, i8* %13, i32 %5351
  %5353 = bitcast i8* %5352 to <4 x i8>*
  %5354 = load <4 x i8>, <4 x i8>* %5353, align 4, !tbaa !109
  %5355 = zext <4 x i8> %5354 to <4 x i32>
  %5356 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5355) #9
  %5357 = add nsw i32 %5356, %5348
  %5358 = shl i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5359 = or i32 %5358, 16
  %5360 = add nsw i32 %5322, %5359
  %5361 = getelementptr inbounds i8, i8* %13, i32 %5360
  %5362 = bitcast i8* %5361 to <4 x i8>*
  %5363 = load <4 x i8>, <4 x i8>* %5362, align 4, !tbaa !109
  %5364 = zext <4 x i8> %5363 to <4 x i32>
  %5365 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5364) #9
  %5366 = add nsw i32 %5365, %5357
  %5367 = shl i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5368 = or i32 %5367, 20
  %5369 = add nsw i32 %5322, %5368
  %5370 = getelementptr inbounds i8, i8* %13, i32 %5369
  %5371 = bitcast i8* %5370 to <4 x i8>*
  %5372 = load <4 x i8>, <4 x i8>* %5371, align 4, !tbaa !109
  %5373 = zext <4 x i8> %5372 to <4 x i32>
  %5374 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5373) #9
  %5375 = add nsw i32 %5374, %5366
  %5376 = shl i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5377 = or i32 %5376, 24
  %5378 = add nsw i32 %5322, %5377
  %5379 = getelementptr inbounds i8, i8* %13, i32 %5378
  %5380 = bitcast i8* %5379 to <4 x i8>*
  %5381 = load <4 x i8>, <4 x i8>* %5380, align 4, !tbaa !109
  %5382 = zext <4 x i8> %5381 to <4 x i32>
  %5383 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5382) #9
  %5384 = add nsw i32 %5383, %5375
  %sum_input254399.sroa.0.0.vec.insert.us.us.us.6 = insertelement <32 x i32> %sum_input254399.sroa.0.32.us.us.us, i32 %5384, i32 0
  %5385 = shl i32 %"sum_input.s1.r19$z.r124276.us.us.us", 2
  %5386 = or i32 %5385, 28
  %5387 = add nsw i32 %5322, %5386
  %5388 = getelementptr inbounds i8, i8* %13, i32 %5387
  %5389 = bitcast i8* %5388 to <4 x i8>*
  %5390 = load <4 x i8>, <4 x i8>* %5389, align 4, !tbaa !109
  %5391 = zext <4 x i8> %5390 to <4 x i32>
  %5392 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5391) #9
  %5393 = add nsw i32 %5392, %5384
  %sum_input254399.sroa.0.0.vec.insert.us.us.us.7 = insertelement <32 x i32> %sum_input254399.sroa.0.0.vec.insert.us.us.us.6, i32 %5393, i32 0
  %5394 = add nuw nsw i32 %"sum_input.s1.r19$z.r124276.us.us.us", 8
  %niter1503.nsub.7 = add i32 %niter1503, -8
  %niter1503.ncmp.7 = icmp eq i32 %niter1503.nsub.7, 0
  br i1 %niter1503.ncmp.7, label %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124274.us.us.us"

"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124274.us.us.us"
  %sum_input254399.sroa.0.0.vec.insert.us.us.us.6.le = insertelement <32 x i32> %sum_input254399.sroa.0.32.us.us.us, i32 %5384, i32 0
  %sum_input254399.sroa.0.0.vec.insert.us.us.us.7.le = insertelement <32 x i32> %sum_input254399.sroa.0.0.vec.insert.us.us.us.6.le, i32 %5393, i32 0
  br label %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x271.us.us.us"
  %sum_input254399.sroa.0.32.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x271.us.us.us" ], [ %sum_input254399.sroa.0.0.vec.insert.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1483.ph = phi i32 [ undef, %"for sum_input.s1.r19$x271.us.us.us" ], [ %5393, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %sum_input254399.sroa.0.32.us.us.us.unr = phi <32 x i32> [ %sum_input254399.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x271.us.us.us" ], [ %sum_input254399.sroa.0.0.vec.insert.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124276.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x271.us.us.us" ], [ %5394, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1499.not, label %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124274.us.us.us.epil"

"for sum_input.s1.r19$z.r124274.us.us.us.epil":   ; preds = %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124274.us.us.us.epil"
  %sum_input254399.sroa.0.32.us.us.us.epil = phi <32 x i32> [ %sum_input254399.sroa.0.0.vec.insert.us.us.us.epil, %"for sum_input.s1.r19$z.r124274.us.us.us.epil" ], [ %sum_input254399.sroa.0.32.us.us.us.unr, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124276.us.us.us.epil" = phi i32 [ %5403, %"for sum_input.s1.r19$z.r124274.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124276.us.us.us.unr", %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa" ]
  %epil.iter1498 = phi i32 [ %epil.iter1498.sub, %"for sum_input.s1.r19$z.r124274.us.us.us.epil" ], [ %xtraiter1497, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa" ]
  %sum_input254399.sroa.0.0.vec.extract733.us.us.us.epil = extractelement <32 x i32> %sum_input254399.sroa.0.32.us.us.us.epil, i32 0
  %5395 = shl nsw i32 %"sum_input.s1.r19$z.r124276.us.us.us.epil", 2
  %5396 = add nsw i32 %5322, %5395
  %5397 = getelementptr inbounds i8, i8* %13, i32 %5396
  %5398 = bitcast i8* %5397 to <4 x i8>*
  %5399 = load <4 x i8>, <4 x i8>* %5398, align 4, !tbaa !109
  %5400 = zext <4 x i8> %5399 to <4 x i32>
  %5401 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %5400) #9
  %5402 = add nsw i32 %5401, %sum_input254399.sroa.0.0.vec.extract733.us.us.us.epil
  %sum_input254399.sroa.0.0.vec.insert.us.us.us.epil = insertelement <32 x i32> %sum_input254399.sroa.0.32.us.us.us.epil, i32 %5402, i32 0
  %5403 = add nuw nsw i32 %"sum_input.s1.r19$z.r124276.us.us.us.epil", 1
  %epil.iter1498.sub = add i32 %epil.iter1498, -1
  %epil.iter1498.cmp.not = icmp eq i32 %epil.iter1498.sub, 0
  br i1 %epil.iter1498.cmp.not, label %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124274.us.us.us.epil", !llvm.loop !120

"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124274.us.us.us.epil", %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa"
  %sum_input254399.sroa.0.32.us.us.us.lcssa = phi <32 x i32> [ %sum_input254399.sroa.0.32.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa" ], [ %sum_input254399.sroa.0.32.us.us.us.epil, %"for sum_input.s1.r19$z.r124274.us.us.us.epil" ]
  %.lcssa1483 = phi i32 [ %.lcssa1483.ph, %"end for sum_input.s1.r19$z.r124275.loopexit.us.us.us.unr-lcssa" ], [ %5402, %"for sum_input.s1.r19$z.r124274.us.us.us.epil" ]
  %sum_input254399.sroa.0.0.vec.insert.us.us.us.le = insertelement <32 x i32> %sum_input254399.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1483, i32 0
  %5404 = add nuw nsw i32 %"sum_input.s1.r19$x273.us.us.us", 1
  %.not417.us.us.us = icmp eq i32 %5404, %9
  br i1 %.not417.us.us.us, label %"end for sum_input.s1.r19$x272.loopexit.us.us.loopexit", label %"for sum_input.s1.r19$x271.us.us.us"

"for convolved.s1.r19$y288.us.us.us":             ; preds = %then_bb283.us, %"end for convolved.s1.r19$x292.loopexit.split.us.us.us.us"
  %convolved400.sroa.0.43.us.us.us = phi <32 x i32> [ %.lcssa1485, %"end for convolved.s1.r19$x292.loopexit.split.us.us.us.us" ], [ %convolved400.sroa.0.42.us, %then_bb283.us ]
  %"convolved.s1.r19$y290.us.us.us" = phi i32 [ %5594, %"end for convolved.s1.r19$x292.loopexit.split.us.us.us.us" ], [ 0, %then_bb283.us ]
  %5405 = mul nsw i32 %"convolved.s1.r19$y290.us.us.us", %dilation_y
  %5406 = add nsw i32 %5405, %5121
  %5407 = mul nsw i32 %5406, %19
  %t1191.us.us.us = add nsw i32 %5117, %5407
  %5408 = mul nsw i32 %"convolved.s1.r19$y290.us.us.us", %12
  %t1192.us.us.us = add nsw i32 %5408, %5173
  br label %"for convolved.s1.r19$x291.us.us.us.us"

"for convolved.s1.r19$x291.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us", %"for convolved.s1.r19$y288.us.us.us"
  %convolved400.sroa.0.44.us.us.us.us = phi <32 x i32> [ %.lcssa1485, %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us" ], [ %convolved400.sroa.0.43.us.us.us, %"for convolved.s1.r19$y288.us.us.us" ]
  %"convolved.s1.r19$x293.us.us.us.us" = phi i32 [ %5593, %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y288.us.us.us" ]
  %5409 = mul nsw i32 %"convolved.s1.r19$x293.us.us.us.us", %dilation_x
  %t1193.s.us.us.us.us = add nsw i32 %5409, %5307
  %5410 = mul nsw i32 %t1193.s.us.us.us.us, %17
  %5411 = add nsw i32 %t1191.us.us.us, %5410
  %5412 = mul nsw i32 %"convolved.s1.r19$x293.us.us.us.us", %10
  %5413 = add nsw i32 %t1192.us.us.us, %5412
  br i1 %5111, label %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124294.us.us.us.us"

"for convolved.s1.r19$z.r124294.us.us.us.us":     ; preds = %"for convolved.s1.r19$x291.us.us.us.us", %"for convolved.s1.r19$z.r124294.us.us.us.us"
  %convolved400.sroa.0.46.us.us.us.us = phi <32 x i32> [ %5532, %"for convolved.s1.r19$z.r124294.us.us.us.us" ], [ %convolved400.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x291.us.us.us.us" ]
  %"convolved.s1.r19$z.r124296.us.us.us.us" = phi i32 [ %5533, %"for convolved.s1.r19$z.r124294.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x291.us.us.us.us" ]
  %niter1514 = phi i32 [ %niter1514.nsub.1, %"for convolved.s1.r19$z.r124294.us.us.us.us" ], [ %unroll_iter1513, %"for convolved.s1.r19$x291.us.us.us.us" ]
  %5414 = shl nsw i32 %"convolved.s1.r19$z.r124296.us.us.us.us", 2
  %5415 = add nsw i32 %5411, %5414
  %5416 = getelementptr inbounds i8, i8* %13, i32 %5415
  %5417 = bitcast i8* %5416 to <1 x i32>*
  %5418 = load <1 x i32>, <1 x i32>* %5417, align 4, !tbaa !109
  %5419 = shufflevector <1 x i32> %5418, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5420 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5419, <32 x i32> %5419, i32 -4)
  %5421 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5420)
  %5422 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5421, <32 x i32> %5421, i32 -4)
  %5423 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5422)
  %5424 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5423, <32 x i32> %5423, i32 -4)
  %5425 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5424)
  %5426 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5425, <32 x i32> %5425, i32 -4)
  %5427 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5426)
  %5428 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5427, <32 x i32> %5427, i32 -4)
  %5429 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5428)
  %5430 = bitcast <32 x i32> %5429 to <128 x i8>
  %5431 = zext <128 x i8> %5430 to <128 x i16>
  %5432 = shl nsw i32 %"convolved.s1.r19$z.r124296.us.us.us.us", 7
  %5433 = add nsw i32 %5413, %5432
  %5434 = getelementptr inbounds i8, i8* %5, i32 %5433
  %5435 = bitcast i8* %5434 to <128 x i8>*
  %5436 = load <128 x i8>, <128 x i8>* %5435, align 128, !tbaa !106
  %5437 = zext <128 x i8> %5436 to <128 x i16>
  %5438 = bitcast <128 x i16> %5431 to <64 x i32>
  %5439 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5438)
  %5440 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5438)
  %5441 = bitcast <128 x i16> %5437 to <64 x i32>
  %5442 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5441)
  %5443 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5441)
  %5444 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5440, <32 x i32> %5443) #11
  %5445 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5439, <32 x i32> %5442) #11
  %5446 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5444) #11
  %5447 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5444) #11
  %5448 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5447, <32 x i32> %5446) #11
  %5449 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5445) #11
  %5450 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5445) #11
  %5451 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5450, <32 x i32> %5449) #11
  %5452 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5451, <32 x i32> %5448)
  %5453 = bitcast <64 x i32> %5452 to <128 x i16>
  %t1341.us.us.us.us = zext <128 x i16> %5453 to <128 x i32>
  %5454 = shufflevector <128 x i32> %t1341.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5455 = shufflevector <128 x i32> %t1341.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5456 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5455, <32 x i32> %5454, i32 -4)
  %5457 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5456)
  %5458 = shufflevector <128 x i32> %t1341.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5459 = shufflevector <128 x i32> %t1341.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5460 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5459, <32 x i32> %5458, i32 -4)
  %5461 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5460)
  %5462 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5461, <32 x i32> %5457)
  %5463 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5456)
  %5464 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5460)
  %5465 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5464, <32 x i32> %5463)
  %t1340.us.us.us.us = add nsw <64 x i32> %5465, %5462
  %5466 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1340.us.us.us.us)
  %5467 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1340.us.us.us.us)
  %5468 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5467, <32 x i32> %5466, i32 -4)
  %5469 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5468)
  %5470 = add nsw <32 x i32> %5469, %convolved400.sroa.0.46.us.us.us.us
  %5471 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5468)
  %5472 = add nsw <32 x i32> %5470, %5471
  %5473 = or i32 %"convolved.s1.r19$z.r124296.us.us.us.us", 1
  %5474 = shl nsw i32 %5473, 2
  %5475 = add nsw i32 %5411, %5474
  %5476 = getelementptr inbounds i8, i8* %13, i32 %5475
  %5477 = bitcast i8* %5476 to <1 x i32>*
  %5478 = load <1 x i32>, <1 x i32>* %5477, align 4, !tbaa !109
  %5479 = shufflevector <1 x i32> %5478, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5480 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5479, <32 x i32> %5479, i32 -4)
  %5481 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5480)
  %5482 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5481, <32 x i32> %5481, i32 -4)
  %5483 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5482)
  %5484 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5483, <32 x i32> %5483, i32 -4)
  %5485 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5484)
  %5486 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5485, <32 x i32> %5485, i32 -4)
  %5487 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5486)
  %5488 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5487, <32 x i32> %5487, i32 -4)
  %5489 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5488)
  %5490 = bitcast <32 x i32> %5489 to <128 x i8>
  %5491 = zext <128 x i8> %5490 to <128 x i16>
  %5492 = shl nsw i32 %5473, 7
  %5493 = add nsw i32 %5413, %5492
  %5494 = getelementptr inbounds i8, i8* %5, i32 %5493
  %5495 = bitcast i8* %5494 to <128 x i8>*
  %5496 = load <128 x i8>, <128 x i8>* %5495, align 128, !tbaa !106
  %5497 = zext <128 x i8> %5496 to <128 x i16>
  %5498 = bitcast <128 x i16> %5491 to <64 x i32>
  %5499 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5498)
  %5500 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5498)
  %5501 = bitcast <128 x i16> %5497 to <64 x i32>
  %5502 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5501)
  %5503 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5501)
  %5504 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5500, <32 x i32> %5503) #11
  %5505 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5499, <32 x i32> %5502) #11
  %5506 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5504) #11
  %5507 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5504) #11
  %5508 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5507, <32 x i32> %5506) #11
  %5509 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5505) #11
  %5510 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5505) #11
  %5511 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5510, <32 x i32> %5509) #11
  %5512 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5511, <32 x i32> %5508)
  %5513 = bitcast <64 x i32> %5512 to <128 x i16>
  %t1341.us.us.us.us.1 = zext <128 x i16> %5513 to <128 x i32>
  %5514 = shufflevector <128 x i32> %t1341.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5515 = shufflevector <128 x i32> %t1341.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5516 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5515, <32 x i32> %5514, i32 -4)
  %5517 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5516)
  %5518 = shufflevector <128 x i32> %t1341.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5519 = shufflevector <128 x i32> %t1341.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5520 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5519, <32 x i32> %5518, i32 -4)
  %5521 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5520)
  %5522 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5521, <32 x i32> %5517)
  %5523 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5516)
  %5524 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5520)
  %5525 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5524, <32 x i32> %5523)
  %t1340.us.us.us.us.1 = add nsw <64 x i32> %5525, %5522
  %5526 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1340.us.us.us.us.1)
  %5527 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1340.us.us.us.us.1)
  %5528 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5527, <32 x i32> %5526, i32 -4)
  %5529 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5528)
  %5530 = add nsw <32 x i32> %5529, %5472
  %5531 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5528)
  %5532 = add nsw <32 x i32> %5530, %5531
  %5533 = add nuw nsw i32 %"convolved.s1.r19$z.r124296.us.us.us.us", 2
  %niter1514.nsub.1 = add i32 %niter1514, -2
  %niter1514.ncmp.1 = icmp eq i32 %niter1514.nsub.1, 0
  br i1 %niter1514.ncmp.1, label %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124294.us.us.us.us"

"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124294.us.us.us.us", %"for convolved.s1.r19$x291.us.us.us.us"
  %.lcssa1485.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x291.us.us.us.us" ], [ %5532, %"for convolved.s1.r19$z.r124294.us.us.us.us" ]
  %convolved400.sroa.0.46.us.us.us.us.unr = phi <32 x i32> [ %convolved400.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x291.us.us.us.us" ], [ %5532, %"for convolved.s1.r19$z.r124294.us.us.us.us" ]
  %"convolved.s1.r19$z.r124296.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x291.us.us.us.us" ], [ %5533, %"for convolved.s1.r19$z.r124294.us.us.us.us" ]
  br i1 %lcmp.mod1512.not, label %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124294.us.us.us.us.epil"

"for convolved.s1.r19$z.r124294.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us.unr-lcssa"
  %5534 = shl nsw i32 %"convolved.s1.r19$z.r124296.us.us.us.us.unr", 2
  %5535 = add nsw i32 %5411, %5534
  %5536 = getelementptr inbounds i8, i8* %13, i32 %5535
  %5537 = bitcast i8* %5536 to <1 x i32>*
  %5538 = load <1 x i32>, <1 x i32>* %5537, align 4, !tbaa !109
  %5539 = shufflevector <1 x i32> %5538, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5540 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5539, <32 x i32> %5539, i32 -4)
  %5541 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5540)
  %5542 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5541, <32 x i32> %5541, i32 -4)
  %5543 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5542)
  %5544 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5543, <32 x i32> %5543, i32 -4)
  %5545 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5544)
  %5546 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5545, <32 x i32> %5545, i32 -4)
  %5547 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5546)
  %5548 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5547, <32 x i32> %5547, i32 -4)
  %5549 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5548)
  %5550 = bitcast <32 x i32> %5549 to <128 x i8>
  %5551 = zext <128 x i8> %5550 to <128 x i16>
  %5552 = shl nsw i32 %"convolved.s1.r19$z.r124296.us.us.us.us.unr", 7
  %5553 = add nsw i32 %5413, %5552
  %5554 = getelementptr inbounds i8, i8* %5, i32 %5553
  %5555 = bitcast i8* %5554 to <128 x i8>*
  %5556 = load <128 x i8>, <128 x i8>* %5555, align 128, !tbaa !106
  %5557 = zext <128 x i8> %5556 to <128 x i16>
  %5558 = bitcast <128 x i16> %5551 to <64 x i32>
  %5559 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5558)
  %5560 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5558)
  %5561 = bitcast <128 x i16> %5557 to <64 x i32>
  %5562 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5561)
  %5563 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5561)
  %5564 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5560, <32 x i32> %5563) #11
  %5565 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5559, <32 x i32> %5562) #11
  %5566 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5564) #11
  %5567 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5564) #11
  %5568 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5567, <32 x i32> %5566) #11
  %5569 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5565) #11
  %5570 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5565) #11
  %5571 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5570, <32 x i32> %5569) #11
  %5572 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5571, <32 x i32> %5568)
  %5573 = bitcast <64 x i32> %5572 to <128 x i16>
  %t1341.us.us.us.us.epil = zext <128 x i16> %5573 to <128 x i32>
  %5574 = shufflevector <128 x i32> %t1341.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5575 = shufflevector <128 x i32> %t1341.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5576 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5575, <32 x i32> %5574, i32 -4)
  %5577 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5576)
  %5578 = shufflevector <128 x i32> %t1341.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5579 = shufflevector <128 x i32> %t1341.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5580 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5579, <32 x i32> %5578, i32 -4)
  %5581 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5580)
  %5582 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5581, <32 x i32> %5577)
  %5583 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5576)
  %5584 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5580)
  %5585 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5584, <32 x i32> %5583)
  %t1340.us.us.us.us.epil = add nsw <64 x i32> %5585, %5582
  %5586 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1340.us.us.us.us.epil)
  %5587 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1340.us.us.us.us.epil)
  %5588 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5587, <32 x i32> %5586, i32 -4)
  %5589 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5588)
  %5590 = add nsw <32 x i32> %5589, %convolved400.sroa.0.46.us.us.us.us.unr
  %5591 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5588)
  %5592 = add nsw <32 x i32> %5590, %5591
  br label %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us"

"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124294.us.us.us.us.epil"
  %.lcssa1485 = phi <32 x i32> [ %.lcssa1485.ph, %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us.unr-lcssa" ], [ %5592, %"for convolved.s1.r19$z.r124294.us.us.us.us.epil" ]
  %5593 = add nuw nsw i32 %"convolved.s1.r19$x293.us.us.us.us", 1
  %.not414.us.us.us.us = icmp eq i32 %5593, %9
  br i1 %.not414.us.us.us.us, label %"end for convolved.s1.r19$x292.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x291.us.us.us.us"

"end for convolved.s1.r19$x292.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124295.loopexit.us.us.us.us"
  %5594 = add nuw nsw i32 %"convolved.s1.r19$y290.us.us.us", 1
  %.not413.us.us.us = icmp eq i32 %5594, %11
  br i1 %.not413.us.us.us, label %"consume convolved297.us", label %"for convolved.s1.r19$y288.us.us.us"

"for convolved.s1.r19$y314.us.us.us":             ; preds = %then_bb306.us, %"end for convolved.s1.r19$x318.loopexit.split.us.us.us.us"
  %convolved400.sroa.0.52.us.us.us = phi <32 x i32> [ %.lcssa1486, %"end for convolved.s1.r19$x318.loopexit.split.us.us.us.us" ], [ %convolved400.sroa.0.51.us, %then_bb306.us ]
  %"convolved.s1.r19$y316.us.us.us" = phi i32 [ %5784, %"end for convolved.s1.r19$x318.loopexit.split.us.us.us.us" ], [ 0, %then_bb306.us ]
  %5595 = mul nsw i32 %"convolved.s1.r19$y316.us.us.us", %dilation_y
  %5596 = add nsw i32 %5595, %5121
  %5597 = mul nsw i32 %5596, %19
  %t1201.us.us.us = add nsw i32 %5117, %5597
  %5598 = mul nsw i32 %"convolved.s1.r19$y316.us.us.us", %12
  %t1202.us.us.us = add nsw i32 %5598, %5216
  br label %"for convolved.s1.r19$x317.us.us.us.us"

"for convolved.s1.r19$x317.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us", %"for convolved.s1.r19$y314.us.us.us"
  %convolved400.sroa.0.53.us.us.us.us = phi <32 x i32> [ %.lcssa1486, %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us" ], [ %convolved400.sroa.0.52.us.us.us, %"for convolved.s1.r19$y314.us.us.us" ]
  %"convolved.s1.r19$x319.us.us.us.us" = phi i32 [ %5783, %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y314.us.us.us" ]
  %5599 = mul nsw i32 %"convolved.s1.r19$x319.us.us.us.us", %dilation_x
  %t1203.s.us.us.us.us = add nsw i32 %5599, %5299
  %5600 = mul nsw i32 %t1203.s.us.us.us.us, %17
  %5601 = add nsw i32 %t1201.us.us.us, %5600
  %5602 = mul nsw i32 %"convolved.s1.r19$x319.us.us.us.us", %10
  %5603 = add nsw i32 %t1202.us.us.us, %5602
  br i1 %5112, label %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124320.us.us.us.us"

"for convolved.s1.r19$z.r124320.us.us.us.us":     ; preds = %"for convolved.s1.r19$x317.us.us.us.us", %"for convolved.s1.r19$z.r124320.us.us.us.us"
  %convolved400.sroa.0.55.us.us.us.us = phi <32 x i32> [ %5722, %"for convolved.s1.r19$z.r124320.us.us.us.us" ], [ %convolved400.sroa.0.53.us.us.us.us, %"for convolved.s1.r19$x317.us.us.us.us" ]
  %"convolved.s1.r19$z.r124322.us.us.us.us" = phi i32 [ %5723, %"for convolved.s1.r19$z.r124320.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x317.us.us.us.us" ]
  %niter1518 = phi i32 [ %niter1518.nsub.1, %"for convolved.s1.r19$z.r124320.us.us.us.us" ], [ %unroll_iter1517, %"for convolved.s1.r19$x317.us.us.us.us" ]
  %5604 = shl nsw i32 %"convolved.s1.r19$z.r124322.us.us.us.us", 2
  %5605 = add nsw i32 %5601, %5604
  %5606 = getelementptr inbounds i8, i8* %13, i32 %5605
  %5607 = bitcast i8* %5606 to <1 x i32>*
  %5608 = load <1 x i32>, <1 x i32>* %5607, align 4, !tbaa !109
  %5609 = shufflevector <1 x i32> %5608, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5610 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5609, <32 x i32> %5609, i32 -4)
  %5611 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5610)
  %5612 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5611, <32 x i32> %5611, i32 -4)
  %5613 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5612)
  %5614 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5613, <32 x i32> %5613, i32 -4)
  %5615 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5614)
  %5616 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5615, <32 x i32> %5615, i32 -4)
  %5617 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5616)
  %5618 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5617, <32 x i32> %5617, i32 -4)
  %5619 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5618)
  %5620 = bitcast <32 x i32> %5619 to <128 x i8>
  %5621 = zext <128 x i8> %5620 to <128 x i16>
  %5622 = shl nsw i32 %"convolved.s1.r19$z.r124322.us.us.us.us", 7
  %5623 = add nsw i32 %5603, %5622
  %5624 = getelementptr inbounds i8, i8* %5, i32 %5623
  %5625 = bitcast i8* %5624 to <128 x i8>*
  %5626 = load <128 x i8>, <128 x i8>* %5625, align 128, !tbaa !106
  %5627 = zext <128 x i8> %5626 to <128 x i16>
  %5628 = bitcast <128 x i16> %5621 to <64 x i32>
  %5629 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5628)
  %5630 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5628)
  %5631 = bitcast <128 x i16> %5627 to <64 x i32>
  %5632 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5631)
  %5633 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5631)
  %5634 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5630, <32 x i32> %5633) #11
  %5635 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5629, <32 x i32> %5632) #11
  %5636 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5634) #11
  %5637 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5634) #11
  %5638 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5637, <32 x i32> %5636) #11
  %5639 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5635) #11
  %5640 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5635) #11
  %5641 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5640, <32 x i32> %5639) #11
  %5642 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5641, <32 x i32> %5638)
  %5643 = bitcast <64 x i32> %5642 to <128 x i16>
  %t1343.us.us.us.us = zext <128 x i16> %5643 to <128 x i32>
  %5644 = shufflevector <128 x i32> %t1343.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5645 = shufflevector <128 x i32> %t1343.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5646 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5645, <32 x i32> %5644, i32 -4)
  %5647 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5646)
  %5648 = shufflevector <128 x i32> %t1343.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5649 = shufflevector <128 x i32> %t1343.us.us.us.us, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5650 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5649, <32 x i32> %5648, i32 -4)
  %5651 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5650)
  %5652 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5651, <32 x i32> %5647)
  %5653 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5646)
  %5654 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5650)
  %5655 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5654, <32 x i32> %5653)
  %t1342.us.us.us.us = add nsw <64 x i32> %5655, %5652
  %5656 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1342.us.us.us.us)
  %5657 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1342.us.us.us.us)
  %5658 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5657, <32 x i32> %5656, i32 -4)
  %5659 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5658)
  %5660 = add nsw <32 x i32> %5659, %convolved400.sroa.0.55.us.us.us.us
  %5661 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5658)
  %5662 = add nsw <32 x i32> %5660, %5661
  %5663 = or i32 %"convolved.s1.r19$z.r124322.us.us.us.us", 1
  %5664 = shl nsw i32 %5663, 2
  %5665 = add nsw i32 %5601, %5664
  %5666 = getelementptr inbounds i8, i8* %13, i32 %5665
  %5667 = bitcast i8* %5666 to <1 x i32>*
  %5668 = load <1 x i32>, <1 x i32>* %5667, align 4, !tbaa !109
  %5669 = shufflevector <1 x i32> %5668, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5670 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5669, <32 x i32> %5669, i32 -4)
  %5671 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5670)
  %5672 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5671, <32 x i32> %5671, i32 -4)
  %5673 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5672)
  %5674 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5673, <32 x i32> %5673, i32 -4)
  %5675 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5674)
  %5676 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5675, <32 x i32> %5675, i32 -4)
  %5677 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5676)
  %5678 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5677, <32 x i32> %5677, i32 -4)
  %5679 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5678)
  %5680 = bitcast <32 x i32> %5679 to <128 x i8>
  %5681 = zext <128 x i8> %5680 to <128 x i16>
  %5682 = shl nsw i32 %5663, 7
  %5683 = add nsw i32 %5603, %5682
  %5684 = getelementptr inbounds i8, i8* %5, i32 %5683
  %5685 = bitcast i8* %5684 to <128 x i8>*
  %5686 = load <128 x i8>, <128 x i8>* %5685, align 128, !tbaa !106
  %5687 = zext <128 x i8> %5686 to <128 x i16>
  %5688 = bitcast <128 x i16> %5681 to <64 x i32>
  %5689 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5688)
  %5690 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5688)
  %5691 = bitcast <128 x i16> %5687 to <64 x i32>
  %5692 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5691)
  %5693 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5691)
  %5694 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5690, <32 x i32> %5693) #11
  %5695 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5689, <32 x i32> %5692) #11
  %5696 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5694) #11
  %5697 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5694) #11
  %5698 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5697, <32 x i32> %5696) #11
  %5699 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5695) #11
  %5700 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5695) #11
  %5701 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5700, <32 x i32> %5699) #11
  %5702 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5701, <32 x i32> %5698)
  %5703 = bitcast <64 x i32> %5702 to <128 x i16>
  %t1343.us.us.us.us.1 = zext <128 x i16> %5703 to <128 x i32>
  %5704 = shufflevector <128 x i32> %t1343.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5705 = shufflevector <128 x i32> %t1343.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5706 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5705, <32 x i32> %5704, i32 -4)
  %5707 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5706)
  %5708 = shufflevector <128 x i32> %t1343.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5709 = shufflevector <128 x i32> %t1343.us.us.us.us.1, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5710 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5709, <32 x i32> %5708, i32 -4)
  %5711 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5710)
  %5712 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5711, <32 x i32> %5707)
  %5713 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5706)
  %5714 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5710)
  %5715 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5714, <32 x i32> %5713)
  %t1342.us.us.us.us.1 = add nsw <64 x i32> %5715, %5712
  %5716 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1342.us.us.us.us.1)
  %5717 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1342.us.us.us.us.1)
  %5718 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5717, <32 x i32> %5716, i32 -4)
  %5719 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5718)
  %5720 = add nsw <32 x i32> %5719, %5662
  %5721 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5718)
  %5722 = add nsw <32 x i32> %5720, %5721
  %5723 = add nuw nsw i32 %"convolved.s1.r19$z.r124322.us.us.us.us", 2
  %niter1518.nsub.1 = add i32 %niter1518, -2
  %niter1518.ncmp.1 = icmp eq i32 %niter1518.nsub.1, 0
  br i1 %niter1518.ncmp.1, label %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124320.us.us.us.us"

"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124320.us.us.us.us", %"for convolved.s1.r19$x317.us.us.us.us"
  %.lcssa1486.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x317.us.us.us.us" ], [ %5722, %"for convolved.s1.r19$z.r124320.us.us.us.us" ]
  %convolved400.sroa.0.55.us.us.us.us.unr = phi <32 x i32> [ %convolved400.sroa.0.53.us.us.us.us, %"for convolved.s1.r19$x317.us.us.us.us" ], [ %5722, %"for convolved.s1.r19$z.r124320.us.us.us.us" ]
  %"convolved.s1.r19$z.r124322.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x317.us.us.us.us" ], [ %5723, %"for convolved.s1.r19$z.r124320.us.us.us.us" ]
  br i1 %lcmp.mod1516.not, label %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124320.us.us.us.us.epil"

"for convolved.s1.r19$z.r124320.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us.unr-lcssa"
  %5724 = shl nsw i32 %"convolved.s1.r19$z.r124322.us.us.us.us.unr", 2
  %5725 = add nsw i32 %5601, %5724
  %5726 = getelementptr inbounds i8, i8* %13, i32 %5725
  %5727 = bitcast i8* %5726 to <1 x i32>*
  %5728 = load <1 x i32>, <1 x i32>* %5727, align 4, !tbaa !109
  %5729 = shufflevector <1 x i32> %5728, <1 x i32> undef, <32 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5730 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5729, <32 x i32> %5729, i32 -4)
  %5731 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5730)
  %5732 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5731, <32 x i32> %5731, i32 -4)
  %5733 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5732)
  %5734 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5733, <32 x i32> %5733, i32 -4)
  %5735 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5734)
  %5736 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5735, <32 x i32> %5735, i32 -4)
  %5737 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5736)
  %5738 = call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %5737, <32 x i32> %5737, i32 -4)
  %5739 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5738)
  %5740 = bitcast <32 x i32> %5739 to <128 x i8>
  %5741 = zext <128 x i8> %5740 to <128 x i16>
  %5742 = shl nsw i32 %"convolved.s1.r19$z.r124322.us.us.us.us.unr", 7
  %5743 = add nsw i32 %5603, %5742
  %5744 = getelementptr inbounds i8, i8* %5, i32 %5743
  %5745 = bitcast i8* %5744 to <128 x i8>*
  %5746 = load <128 x i8>, <128 x i8>* %5745, align 128, !tbaa !106
  %5747 = zext <128 x i8> %5746 to <128 x i16>
  %5748 = bitcast <128 x i16> %5741 to <64 x i32>
  %5749 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5748)
  %5750 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5748)
  %5751 = bitcast <128 x i16> %5747 to <64 x i32>
  %5752 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5751)
  %5753 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5751)
  %5754 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5750, <32 x i32> %5753) #11
  %5755 = call <64 x i32> @llvm.hexagon.V6.vmpyuhv.128B(<32 x i32> %5749, <32 x i32> %5752) #11
  %5756 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5754) #11
  %5757 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5754) #11
  %5758 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5757, <32 x i32> %5756) #11
  %5759 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5755) #11
  %5760 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5755) #11
  %5761 = call <32 x i32> @llvm.hexagon.V6.vshufeh.128B(<32 x i32> %5760, <32 x i32> %5759) #11
  %5762 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5761, <32 x i32> %5758)
  %5763 = bitcast <64 x i32> %5762 to <128 x i16>
  %t1343.us.us.us.us.epil = zext <128 x i16> %5763 to <128 x i32>
  %5764 = shufflevector <128 x i32> %t1343.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5765 = shufflevector <128 x i32> %t1343.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5766 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5765, <32 x i32> %5764, i32 -4)
  %5767 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5766)
  %5768 = shufflevector <128 x i32> %t1343.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5769 = shufflevector <128 x i32> %t1343.us.us.us.us.epil, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5770 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5769, <32 x i32> %5768, i32 -4)
  %5771 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5770)
  %5772 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5771, <32 x i32> %5767)
  %5773 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5766)
  %5774 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5770)
  %5775 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5774, <32 x i32> %5773)
  %t1342.us.us.us.us.epil = add nsw <64 x i32> %5775, %5772
  %5776 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %t1342.us.us.us.us.epil)
  %5777 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %t1342.us.us.us.us.epil)
  %5778 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> %5777, <32 x i32> %5776, i32 -4)
  %5779 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5778)
  %5780 = add nsw <32 x i32> %5779, %convolved400.sroa.0.55.us.us.us.us.unr
  %5781 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5778)
  %5782 = add nsw <32 x i32> %5780, %5781
  br label %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us"

"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124320.us.us.us.us.epil"
  %.lcssa1486 = phi <32 x i32> [ %.lcssa1486.ph, %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us.unr-lcssa" ], [ %5782, %"for convolved.s1.r19$z.r124320.us.us.us.us.epil" ]
  %5783 = add nuw nsw i32 %"convolved.s1.r19$x319.us.us.us.us", 1
  %.not410.us.us.us.us = icmp eq i32 %5783, %9
  br i1 %.not410.us.us.us.us, label %"end for convolved.s1.r19$x318.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x317.us.us.us.us"

"end for convolved.s1.r19$x318.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124321.loopexit.us.us.us.us"
  %5784 = add nuw nsw i32 %"convolved.s1.r19$y316.us.us.us", 1
  %.not409.us.us.us = icmp eq i32 %5784, %11
  br i1 %.not409.us.us.us, label %"consume convolved323.us", label %"for convolved.s1.r19$y314.us.us.us"

"end for output.s0.y.rebased249":                 ; preds = %"end for output.s0.x.xo252.loopexit.us", %"for output.s0.y.rebased248.preheader", %"for output.s0.b.rebased245"
  %sum_input254399.sroa.0.23 = phi <32 x i32> [ %sum_input254399.sroa.0.21, %"for output.s0.b.rebased245" ], [ %sum_input254399.sroa.0.21, %"for output.s0.y.rebased248.preheader" ], [ %sum_input254399.sroa.0.34.us, %"end for output.s0.x.xo252.loopexit.us" ]
  %convolved400.sroa.0.37 = phi <32 x i32> [ %convolved400.sroa.0.35, %"for output.s0.b.rebased245" ], [ %convolved400.sroa.0.35, %"for output.s0.y.rebased248.preheader" ], [ %convolved400.sroa.0.50.us, %"end for output.s0.x.xo252.loopexit.us" ]
  %5785 = add nuw nsw i32 %output.s0.b.rebased247, 1
  %.not403 = icmp eq i32 %5785, %21
  br i1 %.not403, label %after_bb3, label %"for output.s0.b.rebased245"
}

; Function Attrs: nounwind
define i32 @conv_nn_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = load i8*, i8** %39, align 4
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr i8*, i8** %0, i32 12
  %43 = load i8*, i8** %42, align 4
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr i8*, i8** %0, i32 13
  %46 = load i8*, i8** %45, align 4
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr i8*, i8** %0, i32 14
  %49 = bitcast i8** %48 to %struct.halide_buffer_t**
  %50 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %49, align 4
  %51 = tail call i32 @conv_nn_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i8 %41, i8 %44, i8 %47, %struct.halide_buffer_t* %50) #16
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata_storage
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i8.p0v32i8(<32 x i8>, <32 x i8>*, i32 immarg, <32 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1 immarg) #3

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nobuiltin "no-builtins" }
attributes #16 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!"branch_weights", i32 0, i32 1073741824}
!96 = !{!"branch_weights", i32 1073741824, i32 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"bias", !99, i64 0}
!99 = !{!"Halide buffer"}
!100 = !{!101, !101, i64 0}
!101 = !{!"bias_im_global_wrapper$0", !99, i64 0}
!102 = distinct !{!102, !32}
!103 = !{!"branch_weights", i32 -2147483648, i32 0}
!104 = !{!105, !105, i64 0}
!105 = !{!"offset_c", !99, i64 0}
!106 = !{!107, !107, i64 0}
!107 = !{!"filter", !99, i64 0}
!108 = distinct !{!108, !32}
!109 = !{!110, !110, i64 0}
!110 = !{!"input", !99, i64 0}
!111 = distinct !{!111, !32}
!112 = !{!113, !113, i64 0}
!113 = !{!"output", !99, i64 0}
!114 = distinct !{!114, !32}
!115 = distinct !{!115, !32}
!116 = distinct !{!116, !32}
!117 = distinct !{!117, !32}
!118 = distinct !{!118, !32}
!119 = !{!"branch_weights", i32 -2147483648, i32 -2147483648}
!120 = distinct !{!120, !32}
