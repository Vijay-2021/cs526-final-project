; ModuleID = 'conv_nn_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 4
@4 = private constant i64 0
@5 = private constant i64 32
@6 = private constant i64 0
@7 = private constant i64 0
@8 = private constant i64 0
@9 = private constant i64 0
@10 = private constant [12 x i64*] [i64* @2, i64* @3, i64* @4, i64* @5, i64* @6, i64* null, i64* @7, i64* null, i64* @8, i64* null, i64* @9, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@11 = private constant i64 0
@12 = private constant [2 x i64*] [i64* @11, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [9 x i8] c"stride_x\00", align 32
@str.107 = private constant [9 x i8] c"stride_y\00", align 32
@str.108 = private constant [11 x i8] c"dilation_x\00", align 32
@str.109 = private constant [11 x i8] c"dilation_y\00", align 32
@str.110 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.111 = private constant [13 x i8] c"output_shift\00", align 32
@str.112 = private constant [12 x i8] c"output_zero\00", align 32
@str.113 = private constant [11 x i8] c"output_min\00", align 32
@str.114 = private constant [11 x i8] c"output_max\00", align 32
@13 = private constant i64 0
@14 = private constant [8 x i64*] [i64* @13, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.115 = private constant [7 x i8] c"output\00", align 32
@15 = private constant [15 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 6, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([12 x i64*], [12 x i64*]* @10, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @12, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.115, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @14, i32 0, i32 0) }]
@str.116 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.117 = private constant [15 x i8] c"conv_nn_hvx128\00", align 32
@conv_nn_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 15, %struct.halide_filter_argument_t* getelementptr inbounds ([15 x %struct.halide_filter_argument_t], [15 x %struct.halide_filter_argument_t]* @15, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.116, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.117, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #15
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #16
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #16
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #16
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #16
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #16
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #16
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #16
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #16
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #16
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #16
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #16
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #16
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #16
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #15
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #15
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #15
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #16
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #16
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #16
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #15
  %call.i = call i8* @malloc(i32 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32>, <32 x i32>, i32) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #15
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #15
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @conv_nn_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %stride_x, i32 %stride_y, i32 %dilation_x, i32 %dilation_y, i32 %output_multiplier, i32 %a497, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
if.end.i:
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = bitcast i8** %host.i to i32**
  %1 = load i32*, i32** %0, align 4, !tbaa !43
  %2 = bitcast i32* %1 to i8*
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 6
  %3 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %3, i32 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !49
  %host.i391 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %5 = load i8*, i8** %host.i391, align 4, !tbaa !43
  %dim.i392 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i392, align 8, !tbaa !46
  %extent.i407 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 2, i32 1
  %7 = load i32, i32* %extent.i407, align 4, !tbaa !49
  %stride.i413 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 3, i32 2
  %8 = load i32, i32* %stride.i413, align 4, !tbaa !50
  %extent.i417 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 4, i32 1
  %9 = load i32, i32* %extent.i417, align 4, !tbaa !49
  %stride.i419 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 4, i32 2
  %10 = load i32, i32* %stride.i419, align 4, !tbaa !50
  %extent.i423 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 5, i32 1
  %11 = load i32, i32* %extent.i423, align 4, !tbaa !49
  %stride.i425 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 5, i32 2
  %12 = load i32, i32* %stride.i425, align 4, !tbaa !50
  %host.i426 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %13 = load i8*, i8** %host.i426, align 4, !tbaa !43
  %dim.i427 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i427, align 8, !tbaa !46
  %extent.i430 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 0, i32 1
  %15 = load i32, i32* %extent.i430, align 4, !tbaa !49
  %min.i434 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 1, i32 0
  %16 = load i32, i32* %min.i434, align 4, !tbaa !47
  %stride.i436 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 1, i32 2
  %17 = load i32, i32* %stride.i436, align 4, !tbaa !50
  %min.i438 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 2, i32 0
  %18 = load i32, i32* %min.i438, align 4, !tbaa !47
  %stride.i440 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 2, i32 2
  %19 = load i32, i32* %stride.i440, align 4, !tbaa !50
  %min.i442 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 0
  %20 = load i32, i32* %min.i442, align 4, !tbaa !47
  %extent.i444 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 1
  %21 = load i32, i32* %extent.i444, align 4, !tbaa !49
  %stride.i446 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 3, i32 2
  %22 = load i32, i32* %stride.i446, align 4, !tbaa !50
  %host.i447 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %23 = load i8*, i8** %host.i447, align 4, !tbaa !43
  %dim.i448 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i448, align 8, !tbaa !46
  %min.i455 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 0
  %25 = load i32, i32* %min.i455, align 4, !tbaa !47
  %extent.i457 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 1
  %26 = load i32, i32* %extent.i457, align 4, !tbaa !49
  %stride.i459 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 1, i32 2
  %27 = load i32, i32* %stride.i459, align 4, !tbaa !50
  %min.i461 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 0
  %28 = load i32, i32* %min.i461, align 4, !tbaa !47
  %extent.i463 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 1
  %29 = load i32, i32* %extent.i463, align 4, !tbaa !49
  %stride.i465 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 2, i32 2
  %30 = load i32, i32* %stride.i465, align 4, !tbaa !50
  %stride.i471 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i32 3, i32 2
  %31 = load i32, i32* %stride.i471, align 4, !tbaa !50
  %32 = add nsw i32 %4, -1
  %a0 = ashr i32 %32, 5
  %33 = icmp sgt i32 %a0, -1
  %t1217 = select i1 %33, i32 %a0, i32 -1
  %34 = shl i32 %t1217, 7
  %35 = add i32 %34, 268
  %cmp7.i = icmp ugt i32 %35, 16384
  br i1 %cmp7.i, label %pseudostack_alloc.exit, label %then_bb

pseudostack_alloc.exit:                           ; preds = %if.end.i
  %call.i = tail call i8* @halide_malloc(i8* null, i32 %35) #15
  %.not = icmp eq i8* %call.i, null
  br i1 %.not, label %then_bb, label %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge", !prof !95

"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge": ; preds = %pseudostack_alloc.exit
  %36 = bitcast i8* %call.i to i32*
  br label %"produce bias_im_global_wrapper$0"

then_bb:                                          ; preds = %if.end.i, %pseudostack_alloc.exit
  %37 = alloca i32, i32 %35, align 128
  %38 = bitcast i32* %37 to i8*
  br label %"produce bias_im_global_wrapper$0"

"produce bias_im_global_wrapper$0":               ; preds = %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge", %then_bb
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" = phi i8* [ %call.i, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %38, %then_bb ]
  %"bias_im_global_wrapper$0" = phi i32* [ %36, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %37, %then_bb ]
  %39 = icmp sgt i32 %4, 0
  br i1 %39, label %"for bias_im_global_wrapper$0.s0._0.preheader.old", label %"end for bias_im_global_wrapper$0.s0._0", !prof !96

"for bias_im_global_wrapper$0.s0._0.preheader.old": ; preds = %"produce bias_im_global_wrapper$0"
  %40 = shl nuw i32 %4, 2
  %41 = ptrtoint i32* %1 to i32
  %42 = ptrtoint i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" to i32
  %43 = bitcast i32* %1 to i8*
  %44 = icmp ult i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", %43
  %45 = sub i32 %42, %41
  %46 = icmp sle i32 %40, %45
  %47 = or i1 %44, %46
  br i1 %47, label %"for bias_im_global_wrapper$0.s0._0.rtli", label %"for bias_im_global_wrapper$0.s0._0.preheader"

"for bias_im_global_wrapper$0.s0._0.preheader":   ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  %48 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %49 = icmp ult i32 %48, 7
  br i1 %49, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0.preheader.new"

"for bias_im_global_wrapper$0.s0._0.preheader.new": ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader"
  %unroll_iter = and i32 %4, -8
  br label %"for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0.rtli":        ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  call void @llvm.memmove.p0i8.p0i8.i32(i8* nonnull align 4 %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", i8* align 4 %2, i32 %40, i1 false)
  br label %"end for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0":             ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader.new"
  %"bias_im_global_wrapper$0.s0._0" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %81, %"for bias_im_global_wrapper$0.s0._0" ]
  %niter = phi i32 [ %unroll_iter, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %niter.nsub.7, %"for bias_im_global_wrapper$0.s0._0" ]
  %50 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0"
  %51 = load i32, i32* %50, align 4, !tbaa !97
  %52 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0"
  store i32 %51, i32* %52, align 4, !tbaa !100
  %53 = or i32 %"bias_im_global_wrapper$0.s0._0", 1
  %54 = getelementptr inbounds i32, i32* %1, i32 %53
  %55 = load i32, i32* %54, align 4, !tbaa !97
  %56 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %53
  store i32 %55, i32* %56, align 4, !tbaa !100
  %57 = or i32 %"bias_im_global_wrapper$0.s0._0", 2
  %58 = getelementptr inbounds i32, i32* %1, i32 %57
  %59 = load i32, i32* %58, align 4, !tbaa !97
  %60 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %57
  store i32 %59, i32* %60, align 4, !tbaa !100
  %61 = or i32 %"bias_im_global_wrapper$0.s0._0", 3
  %62 = getelementptr inbounds i32, i32* %1, i32 %61
  %63 = load i32, i32* %62, align 4, !tbaa !97
  %64 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %61
  store i32 %63, i32* %64, align 4, !tbaa !100
  %65 = or i32 %"bias_im_global_wrapper$0.s0._0", 4
  %66 = getelementptr inbounds i32, i32* %1, i32 %65
  %67 = load i32, i32* %66, align 4, !tbaa !97
  %68 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %65
  store i32 %67, i32* %68, align 4, !tbaa !100
  %69 = or i32 %"bias_im_global_wrapper$0.s0._0", 5
  %70 = getelementptr inbounds i32, i32* %1, i32 %69
  %71 = load i32, i32* %70, align 4, !tbaa !97
  %72 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %69
  store i32 %71, i32* %72, align 4, !tbaa !100
  %73 = or i32 %"bias_im_global_wrapper$0.s0._0", 6
  %74 = getelementptr inbounds i32, i32* %1, i32 %73
  %75 = load i32, i32* %74, align 4, !tbaa !97
  %76 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %73
  store i32 %75, i32* %76, align 4, !tbaa !100
  %77 = or i32 %"bias_im_global_wrapper$0.s0._0", 7
  %78 = getelementptr inbounds i32, i32* %1, i32 %77
  %79 = load i32, i32* %78, align 4, !tbaa !97
  %80 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %77
  store i32 %79, i32* %80, align 4, !tbaa !100
  %81 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0", 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0"

"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa": ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader"
  %"bias_im_global_wrapper$0.s0._0.unr" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader" ], [ %81, %"for bias_im_global_wrapper$0.s0._0" ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil"

"for bias_im_global_wrapper$0.s0._0.epil":        ; preds = %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", %"for bias_im_global_wrapper$0.s0._0.epil"
  %"bias_im_global_wrapper$0.s0._0.epil" = phi i32 [ %85, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %"bias_im_global_wrapper$0.s0._0.unr", %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %xtraiter, %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %82 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0.epil"
  %83 = load i32, i32* %82, align 4, !tbaa !97
  %84 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0.epil"
  store i32 %83, i32* %84, align 4, !tbaa !100
  %85 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0.epil", 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil", !llvm.loop !102

"end for bias_im_global_wrapper$0.s0._0":         ; preds = %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", %"for bias_im_global_wrapper$0.s0._0.epil", %"for bias_im_global_wrapper$0.s0._0.rtli", %"produce bias_im_global_wrapper$0"
  %86 = icmp sgt i32 %26, 5
  %87 = and i32 %4, 127
  %88 = icmp eq i32 %87, 0
  %89 = and i1 %88, %86
  %90 = or i32 %32, 127
  %91 = icmp sgt i32 %26, 7
  %92 = and i32 %4, 63
  %93 = icmp eq i32 %92, 0
  %94 = and i1 %93, %91
  %95 = or i32 %32, 63
  %96 = and i32 %4, 31
  %97 = icmp eq i32 %96, 0
  %98 = and i1 %97, %91
  %99 = or i32 %32, 31
  %100 = icmp sgt i32 %26, 0
  %101 = and i1 %88, %100
  %102 = icmp slt i32 %4, 32
  %103 = select i1 %102, i32 %4, i32 32
  %104 = add nsw i32 %103, -1
  %a3 = ashr i32 %104, 5
  %105 = icmp slt i32 %a0, 3
  %106 = select i1 %105, i32 %a0, i32 3
  %107 = and i32 %a3, -4
  %b5 = add nsw i32 %107, %106
  %108 = icmp slt i32 %a3, %b5
  %109 = select i1 %108, i32 %a3, i32 %b5
  %110 = add nsw i32 %109, %a0
  %111 = shl nsw i32 %110, 5
  %112 = or i32 %111, 31
  %113 = select i1 %101, i32 %90, i32 %112
  %114 = select i1 %98, i32 %99, i32 %113
  %115 = select i1 %94, i32 %95, i32 %114
  %a2 = select i1 %89, i32 %90, i32 %115
  %116 = icmp sgt i32 %a2, %99
  %a9 = select i1 %116, i32 %a2, i32 %99
  %117 = icmp sgt i32 %a9, -1
  %t1218 = select i1 %117, i32 %a9, i32 -1
  %118 = shl i32 %t1218, 2
  %119 = add i32 %118, 144
  %120 = call i8* @halide_malloc(i8* null, i32 %119)
  %offset_c = bitcast i8* %120 to i32*
  %121 = add nsw i32 %4, 31
  %122 = ashr i32 %121, 5
  br i1 %39, label %"for offset_c.s0.c.c.preheader", label %"consume bias_im_global_wrapper$0.thread", !prof !96

"for offset_c.s0.c.c.preheader":                  ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %123 = shl nuw i32 %122, 7
  call void @llvm.memset.p0i8.i32(i8* align 128 %120, i8 0, i32 %123, i1 false)
  %.not315 = icmp eq i8 %input_zero, 0
  br i1 %.not315, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.preheader"

"for offset_c.s1.c.co.preheader":                 ; preds = %"for offset_c.s0.c.c.preheader"
  %124 = icmp sgt i32 %11, 0
  %125 = select i1 %124, i32 %11, i32 0
  %126 = icmp sgt i32 %7, 0
  %127 = insertelement <128 x i8> undef, i8 %input_zero, i32 0
  %128 = shufflevector <128 x i8> %127, <128 x i8> undef, <128 x i32> zeroinitializer
  %129 = bitcast <128 x i8> %128 to <32 x i32>
  %130 = icmp sgt i32 %9, 0
  %or.cond = and i1 %124, %130
  %131 = and i1 %or.cond, %126
  br i1 %131, label %"for offset_c.s1.c.co.us.us.us.preheader", label %"for offset_c.s2.c.c.preheader", !prof !103

"for offset_c.s1.c.co.us.us.us.preheader":        ; preds = %"for offset_c.s1.c.co.preheader"
  %132 = add i32 %7, -1
  %xtraiter1463 = and i32 %7, 7
  %133 = icmp ult i32 %132, 7
  %unroll_iter1467 = and i32 %7, -8
  %lcmp.mod1465.not = icmp eq i32 %xtraiter1463, 0
  br label %"for offset_c.s1.c.co.us.us.us"

"for offset_c.s1.c.co.us.us.us":                  ; preds = %"for offset_c.s1.c.co.us.us.us.preheader", %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us"
  %offset_c.s1.c.co.us.us.us = phi i32 [ %208, %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.us.us.us.preheader" ]
  %134 = mul nsw i32 %offset_c.s1.c.co.us.us.us, %8
  %135 = shl nsw i32 %offset_c.s1.c.co.us.us.us, 5
  %136 = getelementptr inbounds i32, i32* %offset_c, i32 %135
  %137 = bitcast i32* %136 to <32 x i32>*
  %.promoted.us.us.us = load <32 x i32>, <32 x i32>* %137, align 128, !tbaa !104
  br label %"for offset_c.s1.r19$y.us.us.us.us.us"

"for offset_c.s1.r19$y.us.us.us.us.us":           ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", %"for offset_c.s1.c.co.us.us.us"
  %.lcssa872.us.lcssa.us.us879.us.us.us = phi <32 x i32> [ %.lcssa1462, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ %.promoted.us.us.us, %"for offset_c.s1.c.co.us.us.us" ]
  %"offset_c.s1.r19$y.us.us.us.us.us" = phi i32 [ %207, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.us.us.us" ]
  %138 = mul nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", %12
  %t838.us.us.us.us.us = add nsw i32 %138, %134
  br label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"for offset_c.s1.r19$x.us.us.us.us.us.us":        ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", %"for offset_c.s1.r19$y.us.us.us.us.us"
  %.lcssa872.us873.us.us.us.us.us = phi <32 x i32> [ %.lcssa1462, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ %.lcssa872.us.lcssa.us.us879.us.us.us, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %"offset_c.s1.r19$x.us.us.us.us.us.us" = phi i32 [ %206, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %139 = mul nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", %10
  %140 = add nsw i32 %t838.us.us.us.us.us, %139
  br i1 %133, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"for offset_c.s1.r19$z.r124.us.us.us.us.us.us":   ; preds = %"for offset_c.s1.r19$x.us.us.us.us.us.us", %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"
  %141 = phi <32 x i32> [ %196, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ %.lcssa872.us873.us.us.us.us.us, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us" = phi i32 [ %197, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %niter1468 = phi i32 [ %niter1468.nsub.7, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ %unroll_iter1467, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %142 = shl nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %143 = add nsw i32 %140, %142
  %144 = getelementptr inbounds i8, i8* %5, i32 %143
  %145 = bitcast i8* %144 to <32 x i32>*
  %146 = load <32 x i32>, <32 x i32>* %145, align 128, !tbaa !106
  %147 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %141, <32 x i32> %129, <32 x i32> %146) #11
  %148 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %149 = or i32 %148, 128
  %150 = add nsw i32 %140, %149
  %151 = getelementptr inbounds i8, i8* %5, i32 %150
  %152 = bitcast i8* %151 to <32 x i32>*
  %153 = load <32 x i32>, <32 x i32>* %152, align 128, !tbaa !106
  %154 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %147, <32 x i32> %129, <32 x i32> %153) #11
  %155 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %156 = or i32 %155, 256
  %157 = add nsw i32 %140, %156
  %158 = getelementptr inbounds i8, i8* %5, i32 %157
  %159 = bitcast i8* %158 to <32 x i32>*
  %160 = load <32 x i32>, <32 x i32>* %159, align 128, !tbaa !106
  %161 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %154, <32 x i32> %129, <32 x i32> %160) #11
  %162 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %163 = or i32 %162, 384
  %164 = add nsw i32 %140, %163
  %165 = getelementptr inbounds i8, i8* %5, i32 %164
  %166 = bitcast i8* %165 to <32 x i32>*
  %167 = load <32 x i32>, <32 x i32>* %166, align 128, !tbaa !106
  %168 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %161, <32 x i32> %129, <32 x i32> %167) #11
  %169 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %170 = or i32 %169, 512
  %171 = add nsw i32 %140, %170
  %172 = getelementptr inbounds i8, i8* %5, i32 %171
  %173 = bitcast i8* %172 to <32 x i32>*
  %174 = load <32 x i32>, <32 x i32>* %173, align 128, !tbaa !106
  %175 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %168, <32 x i32> %129, <32 x i32> %174) #11
  %176 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %177 = or i32 %176, 640
  %178 = add nsw i32 %140, %177
  %179 = getelementptr inbounds i8, i8* %5, i32 %178
  %180 = bitcast i8* %179 to <32 x i32>*
  %181 = load <32 x i32>, <32 x i32>* %180, align 128, !tbaa !106
  %182 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %175, <32 x i32> %129, <32 x i32> %181) #11
  %183 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %184 = or i32 %183, 768
  %185 = add nsw i32 %140, %184
  %186 = getelementptr inbounds i8, i8* %5, i32 %185
  %187 = bitcast i8* %186 to <32 x i32>*
  %188 = load <32 x i32>, <32 x i32>* %187, align 128, !tbaa !106
  %189 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %182, <32 x i32> %129, <32 x i32> %188) #11
  %190 = shl i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %191 = or i32 %190, 896
  %192 = add nsw i32 %140, %191
  %193 = getelementptr inbounds i8, i8* %5, i32 %192
  %194 = bitcast i8* %193 to <32 x i32>*
  %195 = load <32 x i32>, <32 x i32>* %194, align 128, !tbaa !106
  %196 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %189, <32 x i32> %129, <32 x i32> %195) #11
  %197 = add nuw nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 8
  %niter1468.nsub.7 = add i32 %niter1468, -8
  %niter1468.ncmp.7 = icmp eq i32 %niter1468.nsub.7, 0
  br i1 %niter1468.ncmp.7, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa": ; preds = %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us", %"for offset_c.s1.r19$x.us.us.us.us.us.us"
  %.lcssa1462.ph = phi <32 x i32> [ undef, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %196, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  %.unr = phi <32 x i32> [ %.lcssa872.us873.us.us.us.us.us, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %196, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.unr" = phi i32 [ 0, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ], [ %197, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ]
  br i1 %lcmp.mod1465.not, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil"

"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa", %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil"
  %198 = phi <32 x i32> [ %204, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ], [ %.unr, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" = phi i32 [ %205, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ], [ %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.unr", %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ]
  %epil.iter1464 = phi i32 [ %epil.iter1464.sub, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ], [ %xtraiter1463, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ]
  %199 = shl nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", 7
  %200 = add nsw i32 %140, %199
  %201 = getelementptr inbounds i8, i8* %5, i32 %200
  %202 = bitcast i8* %201 to <32 x i32>*
  %203 = load <32 x i32>, <32 x i32>* %202, align 128, !tbaa !106
  %204 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %198, <32 x i32> %129, <32 x i32> %203) #11
  %205 = add nuw nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", 1
  %epil.iter1464.sub = add i32 %epil.iter1464, -1
  %epil.iter1464.cmp.not = icmp eq i32 %epil.iter1464.sub, 0
  br i1 %epil.iter1464.cmp.not, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", !llvm.loop !108

"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us": ; preds = %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil", %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa"
  %.lcssa1462 = phi <32 x i32> [ %.lcssa1462.ph, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us.unr-lcssa" ], [ %204, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us.epil" ]
  %206 = add nuw nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", 1
  %.not385.us.us.us.us.us.us = icmp eq i32 %206, %9
  br i1 %.not385.us.us.us.us.us.us, label %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us"
  %207 = add nuw nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", 1
  %.not384.us.us.us.us.us = icmp eq i32 %207, %125
  br i1 %.not384.us.us.us.us.us, label %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", label %"for offset_c.s1.r19$y.us.us.us.us.us"

"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us": ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us"
  store <32 x i32> %.lcssa1462, <32 x i32>* %137, align 128, !tbaa !104
  %208 = add nuw nsw i32 %offset_c.s1.c.co.us.us.us, 1
  %.not383.us.us.us = icmp eq i32 %208, %122
  br i1 %.not383.us.us.us, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.us.us.us"

"consume bias_im_global_wrapper$0.thread":        ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %209 = zext i8 %filter_zero to i32
  br label %"consume offset_c"

"for offset_c.s2.c.c.preheader":                  ; preds = %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", %"for offset_c.s1.c.co.preheader", %"for offset_c.s0.c.c.preheader"
  %210 = zext i8 %filter_zero to i32
  %211 = zext i8 %input_zero to i32
  %212 = shl nuw nsw i32 %211, 2
  %213 = mul nuw nsw i32 %212, %210
  %214 = mul i32 %213, %7
  %t841.s = mul i32 %214, %9
  %215 = mul i32 %t841.s, %11
  %216 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %215) #11
  %217 = add nsw i32 %122, -1
  %xtraiter1469 = and i32 %122, 7
  %218 = icmp ult i32 %217, 7
  br i1 %218, label %"consume offset_c.loopexit.unr-lcssa", label %"for offset_c.s2.c.c.preheader.new"

"for offset_c.s2.c.c.preheader.new":              ; preds = %"for offset_c.s2.c.c.preheader"
  %unroll_iter1472 = and i32 %122, -8
  br label %"for offset_c.s2.c.c"

"for offset_c.s2.c.c":                            ; preds = %"for offset_c.s2.c.c", %"for offset_c.s2.c.c.preheader.new"
  %offset_c.s2.c.c = phi i32 [ 0, %"for offset_c.s2.c.c.preheader.new" ], [ %298, %"for offset_c.s2.c.c" ]
  %niter1473 = phi i32 [ %unroll_iter1472, %"for offset_c.s2.c.c.preheader.new" ], [ %niter1473.nsub.7, %"for offset_c.s2.c.c" ]
  %219 = shl nsw i32 %offset_c.s2.c.c, 5
  %220 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %219
  %221 = bitcast i32* %220 to <32 x i32>*
  %222 = load <32 x i32>, <32 x i32>* %221, align 128, !tbaa !100
  %223 = getelementptr inbounds i32, i32* %offset_c, i32 %219
  %224 = bitcast i32* %223 to <32 x i32>*
  %225 = load <32 x i32>, <32 x i32>* %224, align 128, !tbaa !104
  %226 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %222, <32 x i32> %225) #11
  %227 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %226, <32 x i32> %216) #11
  store <32 x i32> %227, <32 x i32>* %224, align 128, !tbaa !104
  %228 = shl i32 %offset_c.s2.c.c, 5
  %229 = or i32 %228, 32
  %230 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %229
  %231 = bitcast i32* %230 to <32 x i32>*
  %232 = load <32 x i32>, <32 x i32>* %231, align 128, !tbaa !100
  %233 = getelementptr inbounds i32, i32* %offset_c, i32 %229
  %234 = bitcast i32* %233 to <32 x i32>*
  %235 = load <32 x i32>, <32 x i32>* %234, align 128, !tbaa !104
  %236 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %232, <32 x i32> %235) #11
  %237 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %236, <32 x i32> %216) #11
  store <32 x i32> %237, <32 x i32>* %234, align 128, !tbaa !104
  %238 = shl i32 %offset_c.s2.c.c, 5
  %239 = or i32 %238, 64
  %240 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %239
  %241 = bitcast i32* %240 to <32 x i32>*
  %242 = load <32 x i32>, <32 x i32>* %241, align 128, !tbaa !100
  %243 = getelementptr inbounds i32, i32* %offset_c, i32 %239
  %244 = bitcast i32* %243 to <32 x i32>*
  %245 = load <32 x i32>, <32 x i32>* %244, align 128, !tbaa !104
  %246 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %242, <32 x i32> %245) #11
  %247 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %246, <32 x i32> %216) #11
  store <32 x i32> %247, <32 x i32>* %244, align 128, !tbaa !104
  %248 = shl i32 %offset_c.s2.c.c, 5
  %249 = or i32 %248, 96
  %250 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %249
  %251 = bitcast i32* %250 to <32 x i32>*
  %252 = load <32 x i32>, <32 x i32>* %251, align 128, !tbaa !100
  %253 = getelementptr inbounds i32, i32* %offset_c, i32 %249
  %254 = bitcast i32* %253 to <32 x i32>*
  %255 = load <32 x i32>, <32 x i32>* %254, align 128, !tbaa !104
  %256 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %252, <32 x i32> %255) #11
  %257 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %256, <32 x i32> %216) #11
  store <32 x i32> %257, <32 x i32>* %254, align 128, !tbaa !104
  %258 = shl i32 %offset_c.s2.c.c, 5
  %259 = or i32 %258, 128
  %260 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %259
  %261 = bitcast i32* %260 to <32 x i32>*
  %262 = load <32 x i32>, <32 x i32>* %261, align 128, !tbaa !100
  %263 = getelementptr inbounds i32, i32* %offset_c, i32 %259
  %264 = bitcast i32* %263 to <32 x i32>*
  %265 = load <32 x i32>, <32 x i32>* %264, align 128, !tbaa !104
  %266 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %262, <32 x i32> %265) #11
  %267 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %266, <32 x i32> %216) #11
  store <32 x i32> %267, <32 x i32>* %264, align 128, !tbaa !104
  %268 = shl i32 %offset_c.s2.c.c, 5
  %269 = or i32 %268, 160
  %270 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %269
  %271 = bitcast i32* %270 to <32 x i32>*
  %272 = load <32 x i32>, <32 x i32>* %271, align 128, !tbaa !100
  %273 = getelementptr inbounds i32, i32* %offset_c, i32 %269
  %274 = bitcast i32* %273 to <32 x i32>*
  %275 = load <32 x i32>, <32 x i32>* %274, align 128, !tbaa !104
  %276 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %272, <32 x i32> %275) #11
  %277 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %276, <32 x i32> %216) #11
  store <32 x i32> %277, <32 x i32>* %274, align 128, !tbaa !104
  %278 = shl i32 %offset_c.s2.c.c, 5
  %279 = or i32 %278, 192
  %280 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %279
  %281 = bitcast i32* %280 to <32 x i32>*
  %282 = load <32 x i32>, <32 x i32>* %281, align 128, !tbaa !100
  %283 = getelementptr inbounds i32, i32* %offset_c, i32 %279
  %284 = bitcast i32* %283 to <32 x i32>*
  %285 = load <32 x i32>, <32 x i32>* %284, align 128, !tbaa !104
  %286 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %282, <32 x i32> %285) #11
  %287 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %286, <32 x i32> %216) #11
  store <32 x i32> %287, <32 x i32>* %284, align 128, !tbaa !104
  %288 = shl i32 %offset_c.s2.c.c, 5
  %289 = or i32 %288, 224
  %290 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %289
  %291 = bitcast i32* %290 to <32 x i32>*
  %292 = load <32 x i32>, <32 x i32>* %291, align 128, !tbaa !100
  %293 = getelementptr inbounds i32, i32* %offset_c, i32 %289
  %294 = bitcast i32* %293 to <32 x i32>*
  %295 = load <32 x i32>, <32 x i32>* %294, align 128, !tbaa !104
  %296 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %292, <32 x i32> %295) #11
  %297 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %296, <32 x i32> %216) #11
  store <32 x i32> %297, <32 x i32>* %294, align 128, !tbaa !104
  %298 = add nuw nsw i32 %offset_c.s2.c.c, 8
  %niter1473.nsub.7 = add i32 %niter1473, -8
  %niter1473.ncmp.7 = icmp eq i32 %niter1473.nsub.7, 0
  br i1 %niter1473.ncmp.7, label %"consume offset_c.loopexit.unr-lcssa", label %"for offset_c.s2.c.c"

"consume offset_c.loopexit.unr-lcssa":            ; preds = %"for offset_c.s2.c.c", %"for offset_c.s2.c.c.preheader"
  %offset_c.s2.c.c.unr = phi i32 [ 0, %"for offset_c.s2.c.c.preheader" ], [ %298, %"for offset_c.s2.c.c" ]
  %lcmp.mod1471.not = icmp eq i32 %xtraiter1469, 0
  br i1 %lcmp.mod1471.not, label %"consume offset_c", label %"for offset_c.s2.c.c.epil"

"for offset_c.s2.c.c.epil":                       ; preds = %"consume offset_c.loopexit.unr-lcssa", %"for offset_c.s2.c.c.epil"
  %offset_c.s2.c.c.epil = phi i32 [ %308, %"for offset_c.s2.c.c.epil" ], [ %offset_c.s2.c.c.unr, %"consume offset_c.loopexit.unr-lcssa" ]
  %epil.iter1470 = phi i32 [ %epil.iter1470.sub, %"for offset_c.s2.c.c.epil" ], [ %xtraiter1469, %"consume offset_c.loopexit.unr-lcssa" ]
  %299 = shl nsw i32 %offset_c.s2.c.c.epil, 5
  %300 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %299
  %301 = bitcast i32* %300 to <32 x i32>*
  %302 = load <32 x i32>, <32 x i32>* %301, align 128, !tbaa !100
  %303 = getelementptr inbounds i32, i32* %offset_c, i32 %299
  %304 = bitcast i32* %303 to <32 x i32>*
  %305 = load <32 x i32>, <32 x i32>* %304, align 128, !tbaa !104
  %306 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %302, <32 x i32> %305) #11
  %307 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %306, <32 x i32> %216) #11
  store <32 x i32> %307, <32 x i32>* %304, align 128, !tbaa !104
  %308 = add nuw nsw i32 %offset_c.s2.c.c.epil, 1
  %epil.iter1470.sub = add i32 %epil.iter1470, -1
  %epil.iter1470.cmp.not = icmp eq i32 %epil.iter1470.sub, 0
  br i1 %epil.iter1470.cmp.not, label %"consume offset_c", label %"for offset_c.s2.c.c.epil", !llvm.loop !109

"consume offset_c":                               ; preds = %"consume offset_c.loopexit.unr-lcssa", %"for offset_c.s2.c.c.epil", %"consume bias_im_global_wrapper$0.thread"
  %309 = phi i32 [ %209, %"consume bias_im_global_wrapper$0.thread" ], [ %210, %"for offset_c.s2.c.c.epil" ], [ %210, %"consume offset_c.loopexit.unr-lcssa" ]
  %310 = icmp eq i32 %stride_x, 1
  %311 = icmp eq i32 %7, 1
  %312 = and i1 %310, %311
  %313 = icmp eq i32 %15, 4
  %314 = icmp eq i32 %17, 4
  %315 = and i1 %313, %314
  %t844 = and i1 %312, %315
  %t843.not = icmp eq i8 %filter_zero, 0
  br i1 %89, label %then_bb4, label %next_bb5

after_bb3:                                        ; preds = %"end for output.s0.y.rebased182", %"end for output.s0.y.rebased133.loopexit.us", %"end for output.s0.y.rebased80.loopexit.us", %"end for output.s0.y.rebased27.loopexit.us", %"end for output.s0.y.rebased.loopexit.us", %"for output.s0.b.rebased129.preheader", %"for output.s0.b.rebased76.preheader", %"for output.s0.b.rebased23.preheader", %"for output.s0.b.rebased.preheader", %next_bb128, %then_bb127, %then_bb74, %then_bb21, %then_bb4
  %tobool.not.i.not = icmp eq i8* %120, null
  br i1 %tobool.not.i.not, label %land.lhs.true.i487, label %if.then.i472

if.then.i472:                                     ; preds = %after_bb3
  call void @halide_free(i8* null, i8* nonnull %120) #15
  br label %land.lhs.true.i487

land.lhs.true.i487:                               ; preds = %after_bb3, %if.then.i472
  br i1 %cmp7.i, label %if.then.i488, label %call_destructor.exit483

if.then.i488:                                     ; preds = %land.lhs.true.i487
  call void @halide_free(i8* null, i8* nonnull %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0") #15
  br label %call_destructor.exit483

call_destructor.exit483:                          ; preds = %if.then.i488, %land.lhs.true.i487
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #15
  ret i32 0

then_bb4:                                         ; preds = %"consume offset_c"
  %316 = mul nsw i32 %19, %18
  %317 = mul nsw i32 %22, %20
  %318 = mul nsw i32 %17, %16
  %319 = add i32 %317, %316
  %t852 = add i32 %319, %318
  %320 = icmp sgt i32 %21, 0
  br i1 %320, label %"for output.s0.b.rebased.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.preheader":              ; preds = %then_bb4
  %321 = mul nsw i32 %17, %stride_x
  %322 = mul nsw i32 %321, 5
  %323 = shl nsw i32 %321, 2
  %324 = mul nsw i32 %321, 3
  %325 = shl nsw i32 %321, 1
  %326 = sub nsw i32 %stride_x, %16
  %327 = mul nsw i32 %326, %17
  %328 = icmp sgt i32 %29, 0
  %.neg796 = mul i32 %30, %28
  %.neg797 = mul i32 %27, %25
  %.neg798 = mul i32 %31, %20
  %reass.add800 = add i32 %.neg796, %.neg797
  %reass.add801 = add i32 %reass.add800, %.neg798
  %329 = add nuw nsw i32 %26, 5
  %330 = ashr i32 %329, 31
  %331 = xor i32 %330, %329
  %332 = zext i32 %331 to i64
  %333 = mul nuw i64 %332, 2863311531
  %334 = lshr i64 %333, 34
  %335 = trunc i64 %334 to i32
  %336 = xor i32 %330, %335
  %337 = icmp sgt i32 %336, 0
  %b14 = add nsw i32 %26, -6
  %338 = icmp sgt i32 %11, 0
  %339 = icmp sgt i32 %9, 0
  %340 = icmp sgt i32 %7, 0
  %341 = ashr i32 %4, 7
  %342 = icmp sgt i32 %4, 127
  %343 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %344 = shufflevector <32 x i32> %343, <32 x i32> undef, <32 x i32> zeroinitializer
  %345 = sext <32 x i32> %344 to <32 x i64>
  %346 = icmp sgt i32 %a497, 0
  %347 = select i1 %346, i32 %a497, i32 0
  %348 = shl nuw i32 1, %347
  %349 = ashr i32 %348, 1
  %350 = zext i8 %output_zero to i16
  %351 = insertelement <128 x i16> undef, i16 %350, i32 0
  %352 = shufflevector <128 x i16> %351, <128 x i16> undef, <128 x i32> zeroinitializer
  %353 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %354 = shufflevector <128 x i8> %353, <128 x i8> undef, <128 x i32> zeroinitializer
  %355 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %356 = shufflevector <128 x i8> %355, <128 x i8> undef, <128 x i32> zeroinitializer
  %357 = bitcast <128 x i16> %352 to <64 x i32>
  %358 = bitcast <128 x i8> %354 to <32 x i32>
  %359 = bitcast <128 x i8> %356 to <32 x i32>
  br i1 %328, label %"for output.s0.b.rebased.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.us.preheader":           ; preds = %"for output.s0.b.rebased.preheader"
  %360 = add i32 %318, %316
  %361 = add i32 %9, -1
  %brmerge1306.demorgan = and i1 %339, %340
  %xtraiter1547 = and i32 %7, 1
  %362 = icmp eq i32 %7, 1
  %unroll_iter1549 = and i32 %7, -2
  %lcmp.mod1548.not = icmp eq i32 %xtraiter1547, 0
  %xtraiter1551 = and i32 %9, 3
  %363 = icmp ult i32 %361, 3
  %unroll_iter1555 = and i32 %9, -4
  %lcmp.mod1553.not = icmp eq i32 %xtraiter1551, 0
  br label %"for output.s0.b.rebased.us"

"for output.s0.b.rebased.us":                     ; preds = %"for output.s0.b.rebased.us.preheader", %"end for output.s0.y.rebased.loopexit.us"
  %sum_input314.sroa.0.0.us = phi <6 x i32> [ %.us-phi1121.us, %"end for output.s0.y.rebased.loopexit.us" ], [ undef, %"for output.s0.b.rebased.us.preheader" ]
  %output.s0.b.rebased.us = phi i32 [ %370, %"end for output.s0.y.rebased.loopexit.us" ], [ 0, %"for output.s0.b.rebased.us.preheader" ]
  %364 = add nsw i32 %output.s0.b.rebased.us, %20
  %365 = mul nsw i32 %364, %31
  %366 = sub i32 %365, %reass.add801
  %367 = mul nsw i32 %364, %22
  %368 = sub i32 %367, %319
  %369 = sub nsw i32 %367, %t852
  br i1 %337, label %"for output.s0.y.rebased.us.us", label %"end for output.s0.y.rebased.loopexit.us", !prof !96

"end for output.s0.y.rebased.loopexit.us":        ; preds = %"end for output.s0.x.xo.loopexit.us.us", %"for output.s0.b.rebased.us"
  %.us-phi1121.us = phi <6 x i32> [ %sum_input314.sroa.0.0.us, %"for output.s0.b.rebased.us" ], [ %sum_input314.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ]
  %370 = add nuw nsw i32 %output.s0.b.rebased.us, 1
  %.not370.us = icmp eq i32 %370, %21
  br i1 %.not370.us, label %after_bb3, label %"for output.s0.b.rebased.us"

"for output.s0.y.rebased.us.us":                  ; preds = %"for output.s0.b.rebased.us", %"end for output.s0.x.xo.loopexit.us.us"
  %sum_input314.sroa.0.1.us.us = phi <6 x i32> [ %sum_input314.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ], [ %sum_input314.sroa.0.0.us, %"for output.s0.b.rebased.us" ]
  %output.s0.y.rebased.us.us = phi i32 [ %1151, %"end for output.s0.x.xo.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased.us" ]
  %371 = add nsw i32 %output.s0.y.rebased.us.us, %28
  %372 = mul nsw i32 %371, %30
  %t877.us.us = add i32 %366, %372
  %373 = mul nsw i32 %371, %stride_y
  br label %"for output.s0.x.xo.us.us"

"for output.s0.x.xo.us.us":                       ; preds = %"end for output.s0.c.co.us.us", %"for output.s0.y.rebased.us.us"
  %sum_input314.sroa.0.3.us.us = phi <6 x i32> [ %sum_input314.sroa.0.13.us.us, %"end for output.s0.c.co.us.us" ], [ %sum_input314.sroa.0.1.us.us, %"for output.s0.y.rebased.us.us" ]
  %output.s0.x.xo.us.us = phi i32 [ %1100, %"end for output.s0.c.co.us.us" ], [ 0, %"for output.s0.y.rebased.us.us" ]
  %a12.us.us = mul nsw i32 %output.s0.x.xo.us.us, 6
  %374 = icmp slt i32 %a12.us.us, %b14
  %output.s0.x.x.base.s.us.us = select i1 %374, i32 %a12.us.us, i32 %b14
  br i1 %t843.not, label %"consume sum_input.us.us", label %then_bb7.us.us

then_bb7.us.us:                                   ; preds = %"for output.s0.x.xo.us.us"
  br i1 %t844, label %then_bb10.us.us, label %next_bb11.us.us

next_bb11.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %338, label %"for sum_input.s1.r19$y12.preheader.us.us", label %"consume sum_input.us.us", !prof !96

then_bb10.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %338, label %"for sum_input.s1.r19$y.preheader.us.us", label %"consume sum_input.us.us", !prof !96

"for sum_input.s1.r19$y.us.us":                   ; preds = %"for sum_input.s1.r19$y.preheader.us.us", %"end for sum_input.s1.r19$x.us.us"
  %sum_input314.sroa.0.5.us.us = phi <6 x i32> [ %sum_input314.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y.preheader.us.us" ]
  %"sum_input.s1.r19$y.us.us" = phi i32 [ %485, %"end for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$y.preheader.us.us" ]
  br i1 %339, label %"for sum_input.s1.r19$x.preheader.us.us", label %"end for sum_input.s1.r19$x.us.us", !prof !96

"for sum_input.s1.r19$x.us.us":                   ; preds = %"for sum_input.s1.r19$x.preheader.us.us", %"for sum_input.s1.r19$x.us.us"
  %sum_input314.sroa.0.6.us.us = phi <6 x i32> [ %461, %"for sum_input.s1.r19$x.us.us" ], [ %sum_input314.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %"sum_input.s1.r19$x.us.us" = phi i32 [ %462, %"for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %niter1556 = phi i32 [ %niter1556.nsub.3, %"for sum_input.s1.r19$x.us.us" ], [ %unroll_iter1555, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %375 = mul nsw i32 %"sum_input.s1.r19$x.us.us", %dilation_x
  %reass.add806.us.us = add i32 %1148, %375
  %reass.mul807.us.us = shl i32 %reass.add806.us.us, 2
  %376 = add i32 %t880.us.us, %reass.mul807.us.us
  %377 = getelementptr inbounds i8, i8* %13, i32 %376
  %378 = bitcast i8* %377 to <24 x i8>*
  %379 = load <24 x i8>, <24 x i8>* %378, align 4, !tbaa !110
  %t1220.us.us = zext <24 x i8> %379 to <24 x i16>
  %380 = shufflevector <24 x i16> %t1220.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %381 = bitcast <64 x i16> %380 to <32 x i32>
  %382 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %381)
  %383 = bitcast <32 x i32> %382 to <64 x i16>
  %384 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %381)
  %385 = bitcast <32 x i32> %384 to <64 x i16>
  %386 = add <64 x i16> %385, %383
  %387 = shufflevector <64 x i16> %386, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us = zext <12 x i16> %387 to <12 x i32>
  %388 = shufflevector <12 x i32> %t1219.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %389 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %388, i32 -4)
  %390 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %389)
  %391 = shufflevector <32 x i32> %390, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %392 = add nsw <6 x i32> %391, %sum_input314.sroa.0.6.us.us
  %393 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %389)
  %394 = shufflevector <32 x i32> %393, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %395 = add nsw <6 x i32> %392, %394
  %396 = or i32 %"sum_input.s1.r19$x.us.us", 1
  %397 = mul nsw i32 %396, %dilation_x
  %reass.add806.us.us.1 = add i32 %1148, %397
  %reass.mul807.us.us.1 = shl i32 %reass.add806.us.us.1, 2
  %398 = add i32 %t880.us.us, %reass.mul807.us.us.1
  %399 = getelementptr inbounds i8, i8* %13, i32 %398
  %400 = bitcast i8* %399 to <24 x i8>*
  %401 = load <24 x i8>, <24 x i8>* %400, align 4, !tbaa !110
  %t1220.us.us.1 = zext <24 x i8> %401 to <24 x i16>
  %402 = shufflevector <24 x i16> %t1220.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %403 = bitcast <64 x i16> %402 to <32 x i32>
  %404 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %403)
  %405 = bitcast <32 x i32> %404 to <64 x i16>
  %406 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %403)
  %407 = bitcast <32 x i32> %406 to <64 x i16>
  %408 = add <64 x i16> %407, %405
  %409 = shufflevector <64 x i16> %408, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.1 = zext <12 x i16> %409 to <12 x i32>
  %410 = shufflevector <12 x i32> %t1219.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %411 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %410, i32 -4)
  %412 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %411)
  %413 = shufflevector <32 x i32> %412, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %414 = add nsw <6 x i32> %413, %395
  %415 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %411)
  %416 = shufflevector <32 x i32> %415, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %417 = add nsw <6 x i32> %414, %416
  %418 = or i32 %"sum_input.s1.r19$x.us.us", 2
  %419 = mul nsw i32 %418, %dilation_x
  %reass.add806.us.us.2 = add i32 %1148, %419
  %reass.mul807.us.us.2 = shl i32 %reass.add806.us.us.2, 2
  %420 = add i32 %t880.us.us, %reass.mul807.us.us.2
  %421 = getelementptr inbounds i8, i8* %13, i32 %420
  %422 = bitcast i8* %421 to <24 x i8>*
  %423 = load <24 x i8>, <24 x i8>* %422, align 4, !tbaa !110
  %t1220.us.us.2 = zext <24 x i8> %423 to <24 x i16>
  %424 = shufflevector <24 x i16> %t1220.us.us.2, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %425 = bitcast <64 x i16> %424 to <32 x i32>
  %426 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %425)
  %427 = bitcast <32 x i32> %426 to <64 x i16>
  %428 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %425)
  %429 = bitcast <32 x i32> %428 to <64 x i16>
  %430 = add <64 x i16> %429, %427
  %431 = shufflevector <64 x i16> %430, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.2 = zext <12 x i16> %431 to <12 x i32>
  %432 = shufflevector <12 x i32> %t1219.us.us.2, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %433 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %432, i32 -4)
  %434 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %433)
  %435 = shufflevector <32 x i32> %434, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %436 = add nsw <6 x i32> %435, %417
  %437 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %433)
  %438 = shufflevector <32 x i32> %437, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %439 = add nsw <6 x i32> %436, %438
  %440 = or i32 %"sum_input.s1.r19$x.us.us", 3
  %441 = mul nsw i32 %440, %dilation_x
  %reass.add806.us.us.3 = add i32 %1148, %441
  %reass.mul807.us.us.3 = shl i32 %reass.add806.us.us.3, 2
  %442 = add i32 %t880.us.us, %reass.mul807.us.us.3
  %443 = getelementptr inbounds i8, i8* %13, i32 %442
  %444 = bitcast i8* %443 to <24 x i8>*
  %445 = load <24 x i8>, <24 x i8>* %444, align 4, !tbaa !110
  %t1220.us.us.3 = zext <24 x i8> %445 to <24 x i16>
  %446 = shufflevector <24 x i16> %t1220.us.us.3, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %447 = bitcast <64 x i16> %446 to <32 x i32>
  %448 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %447)
  %449 = bitcast <32 x i32> %448 to <64 x i16>
  %450 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %447)
  %451 = bitcast <32 x i32> %450 to <64 x i16>
  %452 = add <64 x i16> %451, %449
  %453 = shufflevector <64 x i16> %452, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.3 = zext <12 x i16> %453 to <12 x i32>
  %454 = shufflevector <12 x i32> %t1219.us.us.3, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %455 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %454, i32 -4)
  %456 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %455)
  %457 = shufflevector <32 x i32> %456, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %458 = add nsw <6 x i32> %457, %439
  %459 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %455)
  %460 = shufflevector <32 x i32> %459, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %461 = add nsw <6 x i32> %458, %460
  %462 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us", 4
  %niter1556.nsub.3 = add i32 %niter1556, -4
  %niter1556.ncmp.3 = icmp eq i32 %niter1556.nsub.3, 0
  br i1 %niter1556.ncmp.3, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x.us.us", %"for sum_input.s1.r19$x.preheader.us.us"
  %.lcssa1396.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %461, %"for sum_input.s1.r19$x.us.us" ]
  %sum_input314.sroa.0.6.us.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %461, %"for sum_input.s1.r19$x.us.us" ]
  %"sum_input.s1.r19$x.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %462, %"for sum_input.s1.r19$x.us.us" ]
  br i1 %lcmp.mod1553.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil"

"for sum_input.s1.r19$x.us.us.epil":              ; preds = %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x.us.us.epil"
  %sum_input314.sroa.0.6.us.us.epil = phi <6 x i32> [ %483, %"for sum_input.s1.r19$x.us.us.epil" ], [ %sum_input314.sroa.0.6.us.us.unr, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x.us.us.epil" = phi i32 [ %484, %"for sum_input.s1.r19$x.us.us.epil" ], [ %"sum_input.s1.r19$x.us.us.unr", %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %epil.iter1552 = phi i32 [ %epil.iter1552.sub, %"for sum_input.s1.r19$x.us.us.epil" ], [ %xtraiter1551, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %463 = mul nsw i32 %"sum_input.s1.r19$x.us.us.epil", %dilation_x
  %reass.add806.us.us.epil = add i32 %1148, %463
  %reass.mul807.us.us.epil = shl i32 %reass.add806.us.us.epil, 2
  %464 = add i32 %t880.us.us, %reass.mul807.us.us.epil
  %465 = getelementptr inbounds i8, i8* %13, i32 %464
  %466 = bitcast i8* %465 to <24 x i8>*
  %467 = load <24 x i8>, <24 x i8>* %466, align 4, !tbaa !110
  %t1220.us.us.epil = zext <24 x i8> %467 to <24 x i16>
  %468 = shufflevector <24 x i16> %t1220.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %469 = bitcast <64 x i16> %468 to <32 x i32>
  %470 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %469)
  %471 = bitcast <32 x i32> %470 to <64 x i16>
  %472 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %469)
  %473 = bitcast <32 x i32> %472 to <64 x i16>
  %474 = add <64 x i16> %473, %471
  %475 = shufflevector <64 x i16> %474, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.epil = zext <12 x i16> %475 to <12 x i32>
  %476 = shufflevector <12 x i32> %t1219.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %477 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %476, i32 -4)
  %478 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %477)
  %479 = shufflevector <32 x i32> %478, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %480 = add nsw <6 x i32> %479, %sum_input314.sroa.0.6.us.us.epil
  %481 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %477)
  %482 = shufflevector <32 x i32> %481, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %483 = add nsw <6 x i32> %480, %482
  %484 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us.epil", 1
  %epil.iter1552.sub = add i32 %epil.iter1552, -1
  %epil.iter1552.cmp.not = icmp eq i32 %epil.iter1552.sub, 0
  br i1 %epil.iter1552.cmp.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil", !llvm.loop !112

"end for sum_input.s1.r19$x.us.us":               ; preds = %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x.us.us.epil", %"for sum_input.s1.r19$y.us.us"
  %sum_input314.sroa.0.7.us.us = phi <6 x i32> [ %sum_input314.sroa.0.5.us.us, %"for sum_input.s1.r19$y.us.us" ], [ %.lcssa1396.ph, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ], [ %483, %"for sum_input.s1.r19$x.us.us.epil" ]
  %485 = add nuw nsw i32 %"sum_input.s1.r19$y.us.us", 1
  %.not380.us.us = icmp eq i32 %485, %11
  br i1 %.not380.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y.us.us"

"consume sum_input.us.us":                        ; preds = %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x.us.us", %"for sum_input.s1.r19$y12.preheader.us.us", %then_bb10.us.us, %next_bb11.us.us, %"for output.s0.x.xo.us.us"
  %sum_input314.sroa.0.13.us.us = phi <6 x i32> [ %sum_input314.sroa.0.3.us.us, %"for output.s0.x.xo.us.us" ], [ zeroinitializer, %then_bb10.us.us ], [ zeroinitializer, %next_bb11.us.us ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ], [ %sum_input314.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ]
  br i1 %342, label %"for output.s0.c.co.preheader.us.us", label %"end for output.s0.c.co.us.us", !prof !96

"for output.s0.c.co.us.us":                       ; preds = %"for output.s0.c.co.preheader.us.us", %"consume convolved.us.us"
  %output.s0.c.co.us.us = phi i32 [ %1099, %"consume convolved.us.us" ], [ 0, %"for output.s0.c.co.preheader.us.us" ]
  %486 = shl nsw i32 %output.s0.c.co.us.us, 7
  %487 = getelementptr inbounds i32, i32* %offset_c, i32 %486
  %488 = bitcast i32* %487 to <32 x i32>*
  %489 = load <32 x i32>, <32 x i32>* %488, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb19.us.us, label %next_bb20.us.us

next_bb20.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %490 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1121) #11
  %491 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %489, <32 x i32> %490) #11
  %492 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1122) #11
  %493 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %489, <32 x i32> %492) #11
  %494 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1123) #11
  %495 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %489, <32 x i32> %494) #11
  %496 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1124) #11
  %497 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %489, <32 x i32> %496) #11
  %498 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1125) #11
  %499 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %489, <32 x i32> %498) #11
  %500 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1126) #11
  %501 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %489, <32 x i32> %500) #11
  %502 = getelementptr inbounds i32, i32* %487, i32 32
  %503 = bitcast i32* %502 to <32 x i32>*
  %504 = load <32 x i32>, <32 x i32>* %503, align 128, !tbaa !104
  %505 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %504, <32 x i32> %490) #11
  %506 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %504, <32 x i32> %492) #11
  %507 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %504, <32 x i32> %494) #11
  %508 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %504, <32 x i32> %496) #11
  %509 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %504, <32 x i32> %498) #11
  %510 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %504, <32 x i32> %500) #11
  %511 = getelementptr inbounds i32, i32* %487, i32 64
  %512 = bitcast i32* %511 to <32 x i32>*
  %513 = load <32 x i32>, <32 x i32>* %512, align 128, !tbaa !104
  %514 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %513, <32 x i32> %490) #11
  %515 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %513, <32 x i32> %492) #11
  %516 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %513, <32 x i32> %494) #11
  %517 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %513, <32 x i32> %496) #11
  %518 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %513, <32 x i32> %498) #11
  %519 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %513, <32 x i32> %500) #11
  %520 = getelementptr inbounds i32, i32* %487, i32 96
  %521 = bitcast i32* %520 to <32 x i32>*
  %522 = load <32 x i32>, <32 x i32>* %521, align 128, !tbaa !104
  %523 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %522, <32 x i32> %490) #11
  %524 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %522, <32 x i32> %492) #11
  %525 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %522, <32 x i32> %494) #11
  %526 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %522, <32 x i32> %496) #11
  %527 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %522, <32 x i32> %498) #11
  %528 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %522, <32 x i32> %500) #11
  br label %after_bb18.us.us

then_bb19.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %529 = getelementptr inbounds i32, i32* %487, i32 32
  %530 = bitcast i32* %529 to <32 x i32>*
  %531 = load <32 x i32>, <32 x i32>* %530, align 128, !tbaa !104
  %532 = getelementptr inbounds i32, i32* %487, i32 64
  %533 = bitcast i32* %532 to <32 x i32>*
  %534 = load <32 x i32>, <32 x i32>* %533, align 128, !tbaa !104
  %535 = getelementptr inbounds i32, i32* %487, i32 96
  %536 = bitcast i32* %535 to <32 x i32>*
  %537 = load <32 x i32>, <32 x i32>* %536, align 128, !tbaa !104
  br label %after_bb18.us.us

after_bb18.us.us:                                 ; preds = %then_bb19.us.us, %next_bb20.us.us
  %convolved313.sroa.207.0.us.us = phi <32 x i32> [ %537, %then_bb19.us.us ], [ %528, %next_bb20.us.us ]
  %convolved313.sroa.202.0.us.us = phi <32 x i32> [ %534, %then_bb19.us.us ], [ %519, %next_bb20.us.us ]
  %convolved313.sroa.197.0.us.us = phi <32 x i32> [ %531, %then_bb19.us.us ], [ %510, %next_bb20.us.us ]
  %convolved313.sroa.192.0.us.us = phi <32 x i32> [ %489, %then_bb19.us.us ], [ %501, %next_bb20.us.us ]
  %convolved313.sroa.187.0.us.us = phi <32 x i32> [ %537, %then_bb19.us.us ], [ %527, %next_bb20.us.us ]
  %convolved313.sroa.182.0.us.us = phi <32 x i32> [ %534, %then_bb19.us.us ], [ %518, %next_bb20.us.us ]
  %convolved313.sroa.177.0.us.us = phi <32 x i32> [ %531, %then_bb19.us.us ], [ %509, %next_bb20.us.us ]
  %convolved313.sroa.172.0.us.us = phi <32 x i32> [ %489, %then_bb19.us.us ], [ %499, %next_bb20.us.us ]
  %convolved313.sroa.167.0.us.us = phi <32 x i32> [ %537, %then_bb19.us.us ], [ %526, %next_bb20.us.us ]
  %convolved313.sroa.162.0.us.us = phi <32 x i32> [ %534, %then_bb19.us.us ], [ %517, %next_bb20.us.us ]
  %convolved313.sroa.157.0.us.us = phi <32 x i32> [ %531, %then_bb19.us.us ], [ %508, %next_bb20.us.us ]
  %convolved313.sroa.152.0.us.us = phi <32 x i32> [ %489, %then_bb19.us.us ], [ %497, %next_bb20.us.us ]
  %convolved313.sroa.147.0.us.us = phi <32 x i32> [ %537, %then_bb19.us.us ], [ %525, %next_bb20.us.us ]
  %convolved313.sroa.142.0.us.us = phi <32 x i32> [ %534, %then_bb19.us.us ], [ %516, %next_bb20.us.us ]
  %convolved313.sroa.137.0.us.us = phi <32 x i32> [ %531, %then_bb19.us.us ], [ %507, %next_bb20.us.us ]
  %convolved313.sroa.132.0.us.us = phi <32 x i32> [ %489, %then_bb19.us.us ], [ %495, %next_bb20.us.us ]
  %convolved313.sroa.122.0.us.us = phi <32 x i32> [ %537, %then_bb19.us.us ], [ %524, %next_bb20.us.us ]
  %convolved313.sroa.112.0.us.us = phi <32 x i32> [ %534, %then_bb19.us.us ], [ %515, %next_bb20.us.us ]
  %convolved313.sroa.102.0.us.us = phi <32 x i32> [ %531, %then_bb19.us.us ], [ %506, %next_bb20.us.us ]
  %convolved313.sroa.92.0.us.us = phi <32 x i32> [ %489, %then_bb19.us.us ], [ %493, %next_bb20.us.us ]
  %convolved313.sroa.77.0.us.us = phi <32 x i32> [ %537, %then_bb19.us.us ], [ %523, %next_bb20.us.us ]
  %convolved313.sroa.62.0.us.us = phi <32 x i32> [ %534, %then_bb19.us.us ], [ %514, %next_bb20.us.us ]
  %convolved313.sroa.47.0.us.us = phi <32 x i32> [ %531, %then_bb19.us.us ], [ %505, %next_bb20.us.us ]
  %convolved313.sroa.0.0.us.us = phi <32 x i32> [ %489, %then_bb19.us.us ], [ %491, %next_bb20.us.us ]
  br i1 %338, label %"for convolved.s1.r19$y.preheader.us.us", label %"consume convolved.us.us", !prof !96

"for convolved.s1.r19$y.us.us":                   ; preds = %"for convolved.s1.r19$y.preheader.us.us", %"end for convolved.s1.r19$x.us.us"
  %convolved313.sroa.207.1.us.us = phi <32 x i32> [ %convolved313.sroa.207.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.207.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.202.1.us.us = phi <32 x i32> [ %convolved313.sroa.202.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.202.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.197.1.us.us = phi <32 x i32> [ %convolved313.sroa.197.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.197.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.192.1.us.us = phi <32 x i32> [ %convolved313.sroa.192.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.192.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.187.1.us.us = phi <32 x i32> [ %convolved313.sroa.187.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.187.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.182.1.us.us = phi <32 x i32> [ %convolved313.sroa.182.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.182.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.177.1.us.us = phi <32 x i32> [ %convolved313.sroa.177.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.177.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.172.1.us.us = phi <32 x i32> [ %convolved313.sroa.172.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.172.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.167.1.us.us = phi <32 x i32> [ %convolved313.sroa.167.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.167.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.162.1.us.us = phi <32 x i32> [ %convolved313.sroa.162.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.162.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.157.1.us.us = phi <32 x i32> [ %convolved313.sroa.157.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.157.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.152.1.us.us = phi <32 x i32> [ %convolved313.sroa.152.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.152.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.147.1.us.us = phi <32 x i32> [ %convolved313.sroa.147.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.147.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.142.1.us.us = phi <32 x i32> [ %convolved313.sroa.142.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.142.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.137.1.us.us = phi <32 x i32> [ %convolved313.sroa.137.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.137.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.132.1.us.us = phi <32 x i32> [ %convolved313.sroa.132.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.132.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.122.1.us.us = phi <32 x i32> [ %convolved313.sroa.122.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.122.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.112.1.us.us = phi <32 x i32> [ %convolved313.sroa.112.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.112.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.102.1.us.us = phi <32 x i32> [ %convolved313.sroa.102.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.102.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.92.1.us.us = phi <32 x i32> [ %convolved313.sroa.92.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.92.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.77.1.us.us = phi <32 x i32> [ %convolved313.sroa.77.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.77.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.62.1.us.us = phi <32 x i32> [ %convolved313.sroa.62.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.62.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.47.1.us.us = phi <32 x i32> [ %convolved313.sroa.47.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.47.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.0.1.us.us = phi <32 x i32> [ %convolved313.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.0.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %"convolved.s1.r19$y.us.us" = phi i32 [ %622, %"end for convolved.s1.r19$x.us.us" ], [ 0, %"for convolved.s1.r19$y.preheader.us.us" ]
  %538 = mul nsw i32 %"convolved.s1.r19$y.us.us", %dilation_y
  %539 = add nsw i32 %538, %373
  %540 = mul nsw i32 %539, %19
  %t913.us.us = add nsw i32 %540, %369
  %541 = mul nsw i32 %"convolved.s1.r19$y.us.us", %12
  br i1 %339, label %"for convolved.s1.r19$x.us.us", label %"end for convolved.s1.r19$x.us.us", !prof !96

"for convolved.s1.r19$x.us.us":                   ; preds = %"for convolved.s1.r19$y.us.us", %"end for convolved.s1.r19$z.r124.us.us"
  %convolved313.sroa.207.2.us.us = phi <32 x i32> [ %convolved313.sroa.207.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.207.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.202.2.us.us = phi <32 x i32> [ %convolved313.sroa.202.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.202.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.197.2.us.us = phi <32 x i32> [ %convolved313.sroa.197.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.197.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.192.2.us.us = phi <32 x i32> [ %convolved313.sroa.192.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.192.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.187.2.us.us = phi <32 x i32> [ %convolved313.sroa.187.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.187.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.182.2.us.us = phi <32 x i32> [ %convolved313.sroa.182.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.182.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.177.2.us.us = phi <32 x i32> [ %convolved313.sroa.177.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.177.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.172.2.us.us = phi <32 x i32> [ %convolved313.sroa.172.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.172.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.167.2.us.us = phi <32 x i32> [ %convolved313.sroa.167.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.167.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.162.2.us.us = phi <32 x i32> [ %convolved313.sroa.162.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.162.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.157.2.us.us = phi <32 x i32> [ %convolved313.sroa.157.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.157.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.152.2.us.us = phi <32 x i32> [ %convolved313.sroa.152.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.152.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.147.2.us.us = phi <32 x i32> [ %convolved313.sroa.147.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.147.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.142.2.us.us = phi <32 x i32> [ %convolved313.sroa.142.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.142.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.137.2.us.us = phi <32 x i32> [ %convolved313.sroa.137.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.137.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.132.2.us.us = phi <32 x i32> [ %convolved313.sroa.132.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.132.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.122.2.us.us = phi <32 x i32> [ %convolved313.sroa.122.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.122.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.112.2.us.us = phi <32 x i32> [ %convolved313.sroa.112.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.112.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.102.2.us.us = phi <32 x i32> [ %convolved313.sroa.102.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.102.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.92.2.us.us = phi <32 x i32> [ %convolved313.sroa.92.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.92.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.77.2.us.us = phi <32 x i32> [ %convolved313.sroa.77.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.77.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.62.2.us.us = phi <32 x i32> [ %convolved313.sroa.62.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.62.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.47.2.us.us = phi <32 x i32> [ %convolved313.sroa.47.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.47.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.0.2.us.us = phi <32 x i32> [ %convolved313.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %"convolved.s1.r19$x.us.us" = phi i32 [ %621, %"end for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$y.us.us" ]
  %542 = mul nsw i32 %"convolved.s1.r19$x.us.us", %dilation_x
  %543 = mul nsw i32 %"convolved.s1.r19$x.us.us", %10
  %t920.us.us = add i32 %543, %541
  br i1 %340, label %"for convolved.s1.r19$z.r124.preheader.us.us", label %"end for convolved.s1.r19$z.r124.us.us", !prof !96

"for convolved.s1.r19$z.r124.us.us":              ; preds = %"for convolved.s1.r19$z.r124.preheader.us.us", %"for convolved.s1.r19$z.r124.us.us"
  %convolved313.sroa.207.4.us.us = phi <32 x i32> [ %619, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.207.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.202.4.us.us = phi <32 x i32> [ %618, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.202.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.197.4.us.us = phi <32 x i32> [ %617, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.197.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.192.4.us.us = phi <32 x i32> [ %616, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.192.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.187.4.us.us = phi <32 x i32> [ %610, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.187.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.182.4.us.us = phi <32 x i32> [ %609, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.182.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.177.4.us.us = phi <32 x i32> [ %608, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.177.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.172.4.us.us = phi <32 x i32> [ %607, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.172.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.167.4.us.us = phi <32 x i32> [ %601, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.167.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.162.4.us.us = phi <32 x i32> [ %600, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.162.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.157.4.us.us = phi <32 x i32> [ %599, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.157.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.152.4.us.us = phi <32 x i32> [ %598, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.152.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.147.4.us.us = phi <32 x i32> [ %592, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.147.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.142.4.us.us = phi <32 x i32> [ %591, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.142.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.137.4.us.us = phi <32 x i32> [ %590, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.137.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.132.4.us.us = phi <32 x i32> [ %589, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.132.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.122.4.us.us = phi <32 x i32> [ %583, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.122.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.112.4.us.us = phi <32 x i32> [ %582, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.112.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.102.4.us.us = phi <32 x i32> [ %581, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.102.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.92.4.us.us = phi <32 x i32> [ %580, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.92.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.77.4.us.us = phi <32 x i32> [ %574, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.77.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.62.4.us.us = phi <32 x i32> [ %569, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.62.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.47.4.us.us = phi <32 x i32> [ %564, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.47.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.0.4.us.us = phi <32 x i32> [ %558, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.0.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %"convolved.s1.r19$z.r124.us.us" = phi i32 [ %620, %"for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %544 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 2
  %545 = add i32 %544, %t913.us.us
  %546 = add i32 %545, %1101
  %547 = getelementptr inbounds i8, i8* %13, i32 %546
  %548 = bitcast i8* %547 to i32*
  %549 = load i32, i32* %548, align 4, !tbaa !110
  %550 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 5
  %551 = add nsw i32 %550, %1117
  %552 = shl nsw i32 %551, 2
  %553 = add nsw i32 %t920.us.us, %552
  %554 = getelementptr inbounds i8, i8* %5, i32 %553
  %555 = bitcast i8* %554 to <32 x i32>*
  %556 = load <32 x i32>, <32 x i32>* %555, align 128, !tbaa !106
  %557 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %549) #11
  %558 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.4.us.us, <32 x i32> %556, <32 x i32> %557) #11
  %559 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 7
  %560 = add i32 %1102, %559
  %561 = getelementptr inbounds i8, i8* %5, i32 %560
  %562 = bitcast i8* %561 to <32 x i32>*
  %563 = load <32 x i32>, <32 x i32>* %562, align 128, !tbaa !106
  %564 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.47.4.us.us, <32 x i32> %563, <32 x i32> %557) #11
  %565 = add i32 %1103, %559
  %566 = getelementptr inbounds i8, i8* %5, i32 %565
  %567 = bitcast i8* %566 to <32 x i32>*
  %568 = load <32 x i32>, <32 x i32>* %567, align 128, !tbaa !106
  %569 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.62.4.us.us, <32 x i32> %568, <32 x i32> %557) #11
  %570 = add i32 %1104, %559
  %571 = getelementptr inbounds i8, i8* %5, i32 %570
  %572 = bitcast i8* %571 to <32 x i32>*
  %573 = load <32 x i32>, <32 x i32>* %572, align 128, !tbaa !106
  %574 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.77.4.us.us, <32 x i32> %573, <32 x i32> %557) #11
  %575 = add i32 %545, %1105
  %576 = getelementptr inbounds i8, i8* %13, i32 %575
  %577 = bitcast i8* %576 to i32*
  %578 = load i32, i32* %577, align 4, !tbaa !110
  %579 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %578) #11
  %580 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.92.4.us.us, <32 x i32> %556, <32 x i32> %579) #11
  %581 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.102.4.us.us, <32 x i32> %563, <32 x i32> %579) #11
  %582 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.112.4.us.us, <32 x i32> %568, <32 x i32> %579) #11
  %583 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.122.4.us.us, <32 x i32> %573, <32 x i32> %579) #11
  %584 = add i32 %545, %1106
  %585 = getelementptr inbounds i8, i8* %13, i32 %584
  %586 = bitcast i8* %585 to i32*
  %587 = load i32, i32* %586, align 4, !tbaa !110
  %588 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %587) #11
  %589 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.132.4.us.us, <32 x i32> %556, <32 x i32> %588) #11
  %590 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.137.4.us.us, <32 x i32> %563, <32 x i32> %588) #11
  %591 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.142.4.us.us, <32 x i32> %568, <32 x i32> %588) #11
  %592 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.147.4.us.us, <32 x i32> %573, <32 x i32> %588) #11
  %593 = add i32 %545, %1107
  %594 = getelementptr inbounds i8, i8* %13, i32 %593
  %595 = bitcast i8* %594 to i32*
  %596 = load i32, i32* %595, align 4, !tbaa !110
  %597 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %596) #11
  %598 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.152.4.us.us, <32 x i32> %556, <32 x i32> %597) #11
  %599 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.157.4.us.us, <32 x i32> %563, <32 x i32> %597) #11
  %600 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.162.4.us.us, <32 x i32> %568, <32 x i32> %597) #11
  %601 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.167.4.us.us, <32 x i32> %573, <32 x i32> %597) #11
  %602 = add i32 %545, %1108
  %603 = getelementptr inbounds i8, i8* %13, i32 %602
  %604 = bitcast i8* %603 to i32*
  %605 = load i32, i32* %604, align 4, !tbaa !110
  %606 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %605) #11
  %607 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.172.4.us.us, <32 x i32> %556, <32 x i32> %606) #11
  %608 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.177.4.us.us, <32 x i32> %563, <32 x i32> %606) #11
  %609 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.182.4.us.us, <32 x i32> %568, <32 x i32> %606) #11
  %610 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.187.4.us.us, <32 x i32> %573, <32 x i32> %606) #11
  %611 = add i32 %545, %1109
  %612 = getelementptr inbounds i8, i8* %13, i32 %611
  %613 = bitcast i8* %612 to i32*
  %614 = load i32, i32* %613, align 4, !tbaa !110
  %615 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %614) #11
  %616 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.192.4.us.us, <32 x i32> %556, <32 x i32> %615) #11
  %617 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.197.4.us.us, <32 x i32> %563, <32 x i32> %615) #11
  %618 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.202.4.us.us, <32 x i32> %568, <32 x i32> %615) #11
  %619 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.207.4.us.us, <32 x i32> %573, <32 x i32> %615) #11
  %620 = add nuw nsw i32 %"convolved.s1.r19$z.r124.us.us", 1
  %.not376.us.us = icmp eq i32 %620, %7
  br i1 %.not376.us.us, label %"end for convolved.s1.r19$z.r124.us.us", label %"for convolved.s1.r19$z.r124.us.us"

"end for convolved.s1.r19$z.r124.us.us":          ; preds = %"for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$x.us.us"
  %convolved313.sroa.207.5.us.us = phi <32 x i32> [ %convolved313.sroa.207.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %619, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.202.5.us.us = phi <32 x i32> [ %convolved313.sroa.202.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %618, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.197.5.us.us = phi <32 x i32> [ %convolved313.sroa.197.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %617, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.192.5.us.us = phi <32 x i32> [ %convolved313.sroa.192.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %616, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.187.5.us.us = phi <32 x i32> [ %convolved313.sroa.187.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %610, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.182.5.us.us = phi <32 x i32> [ %convolved313.sroa.182.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %609, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.177.5.us.us = phi <32 x i32> [ %convolved313.sroa.177.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %608, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.172.5.us.us = phi <32 x i32> [ %convolved313.sroa.172.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %607, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.167.5.us.us = phi <32 x i32> [ %convolved313.sroa.167.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %601, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.162.5.us.us = phi <32 x i32> [ %convolved313.sroa.162.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %600, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.157.5.us.us = phi <32 x i32> [ %convolved313.sroa.157.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %599, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.152.5.us.us = phi <32 x i32> [ %convolved313.sroa.152.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %598, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.147.5.us.us = phi <32 x i32> [ %convolved313.sroa.147.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %592, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.142.5.us.us = phi <32 x i32> [ %convolved313.sroa.142.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %591, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.137.5.us.us = phi <32 x i32> [ %convolved313.sroa.137.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %590, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.132.5.us.us = phi <32 x i32> [ %convolved313.sroa.132.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %589, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.122.5.us.us = phi <32 x i32> [ %convolved313.sroa.122.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %583, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.112.5.us.us = phi <32 x i32> [ %convolved313.sroa.112.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %582, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.102.5.us.us = phi <32 x i32> [ %convolved313.sroa.102.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %581, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.92.5.us.us = phi <32 x i32> [ %convolved313.sroa.92.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %580, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.77.5.us.us = phi <32 x i32> [ %convolved313.sroa.77.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %574, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.62.5.us.us = phi <32 x i32> [ %convolved313.sroa.62.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %569, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.47.5.us.us = phi <32 x i32> [ %convolved313.sroa.47.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %564, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.0.5.us.us = phi <32 x i32> [ %convolved313.sroa.0.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %558, %"for convolved.s1.r19$z.r124.us.us" ]
  %621 = add nuw nsw i32 %"convolved.s1.r19$x.us.us", 1
  %.not375.us.us = icmp eq i32 %621, %9
  br i1 %.not375.us.us, label %"end for convolved.s1.r19$x.us.us", label %"for convolved.s1.r19$x.us.us"

"end for convolved.s1.r19$x.us.us":               ; preds = %"end for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$y.us.us"
  %convolved313.sroa.207.3.us.us = phi <32 x i32> [ %convolved313.sroa.207.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.207.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.202.3.us.us = phi <32 x i32> [ %convolved313.sroa.202.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.202.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.197.3.us.us = phi <32 x i32> [ %convolved313.sroa.197.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.197.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.192.3.us.us = phi <32 x i32> [ %convolved313.sroa.192.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.192.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.187.3.us.us = phi <32 x i32> [ %convolved313.sroa.187.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.187.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.182.3.us.us = phi <32 x i32> [ %convolved313.sroa.182.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.182.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.177.3.us.us = phi <32 x i32> [ %convolved313.sroa.177.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.177.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.172.3.us.us = phi <32 x i32> [ %convolved313.sroa.172.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.172.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.167.3.us.us = phi <32 x i32> [ %convolved313.sroa.167.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.167.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.162.3.us.us = phi <32 x i32> [ %convolved313.sroa.162.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.162.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.157.3.us.us = phi <32 x i32> [ %convolved313.sroa.157.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.157.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.152.3.us.us = phi <32 x i32> [ %convolved313.sroa.152.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.152.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.147.3.us.us = phi <32 x i32> [ %convolved313.sroa.147.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.147.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.142.3.us.us = phi <32 x i32> [ %convolved313.sroa.142.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.142.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.137.3.us.us = phi <32 x i32> [ %convolved313.sroa.137.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.137.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.132.3.us.us = phi <32 x i32> [ %convolved313.sroa.132.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.132.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.122.3.us.us = phi <32 x i32> [ %convolved313.sroa.122.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.122.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.112.3.us.us = phi <32 x i32> [ %convolved313.sroa.112.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.112.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.102.3.us.us = phi <32 x i32> [ %convolved313.sroa.102.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.102.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.92.3.us.us = phi <32 x i32> [ %convolved313.sroa.92.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.92.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.77.3.us.us = phi <32 x i32> [ %convolved313.sroa.77.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.77.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.62.3.us.us = phi <32 x i32> [ %convolved313.sroa.62.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.62.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.47.3.us.us = phi <32 x i32> [ %convolved313.sroa.47.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.47.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.0.3.us.us = phi <32 x i32> [ %convolved313.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %622 = add nuw nsw i32 %"convolved.s1.r19$y.us.us", 1
  %.not374.us.us = icmp eq i32 %622, %11
  br i1 %.not374.us.us, label %"consume convolved.us.us", label %"for convolved.s1.r19$y.us.us"

"consume convolved.us.us":                        ; preds = %"end for convolved.s1.r19$x.us.us", %after_bb18.us.us
  %convolved313.sroa.207.6.us.us = phi <32 x i32> [ %convolved313.sroa.207.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.207.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.202.6.us.us = phi <32 x i32> [ %convolved313.sroa.202.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.202.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.197.6.us.us = phi <32 x i32> [ %convolved313.sroa.197.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.197.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.192.6.us.us = phi <32 x i32> [ %convolved313.sroa.192.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.192.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.187.6.us.us = phi <32 x i32> [ %convolved313.sroa.187.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.187.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.182.6.us.us = phi <32 x i32> [ %convolved313.sroa.182.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.182.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.177.6.us.us = phi <32 x i32> [ %convolved313.sroa.177.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.177.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.172.6.us.us = phi <32 x i32> [ %convolved313.sroa.172.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.172.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.167.6.us.us = phi <32 x i32> [ %convolved313.sroa.167.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.167.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.162.6.us.us = phi <32 x i32> [ %convolved313.sroa.162.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.162.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.157.6.us.us = phi <32 x i32> [ %convolved313.sroa.157.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.157.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.152.6.us.us = phi <32 x i32> [ %convolved313.sroa.152.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.152.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.147.6.us.us = phi <32 x i32> [ %convolved313.sroa.147.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.147.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.142.6.us.us = phi <32 x i32> [ %convolved313.sroa.142.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.142.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.137.6.us.us = phi <32 x i32> [ %convolved313.sroa.137.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.137.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.132.6.us.us = phi <32 x i32> [ %convolved313.sroa.132.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.132.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.122.6.us.us = phi <32 x i32> [ %convolved313.sroa.122.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.122.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.112.6.us.us = phi <32 x i32> [ %convolved313.sroa.112.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.112.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.102.6.us.us = phi <32 x i32> [ %convolved313.sroa.102.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.102.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.92.6.us.us = phi <32 x i32> [ %convolved313.sroa.92.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.92.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.77.6.us.us = phi <32 x i32> [ %convolved313.sroa.77.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.77.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.62.6.us.us = phi <32 x i32> [ %convolved313.sroa.62.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.62.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.47.6.us.us = phi <32 x i32> [ %convolved313.sroa.47.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.47.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.0.6.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %623 = sext <32 x i32> %convolved313.sroa.0.6.us.us to <32 x i64>
  %a15.us.us = mul nsw <32 x i64> %623, %345
  %624 = icmp slt <32 x i64> %a15.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %625 = select <32 x i1> %624, <32 x i64> %a15.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %626 = add nsw <32 x i64> %625, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a14.us.us = ashr <32 x i64> %626, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %627 = icmp slt <32 x i64> %a14.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a13.us.us = select <32 x i1> %627, <32 x i64> %a14.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %628 = icmp sgt <32 x i64> %a13.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %629 = select <32 x i1> %628, <32 x i64> %a13.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %630 = trunc <32 x i64> %629 to <32 x i32>
  %631 = sext <32 x i32> %convolved313.sroa.47.6.us.us to <32 x i64>
  %a19.us.us = mul nsw <32 x i64> %631, %345
  %632 = icmp slt <32 x i64> %a19.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %633 = select <32 x i1> %632, <32 x i64> %a19.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %634 = add nsw <32 x i64> %633, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a18.us.us = ashr <32 x i64> %634, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %635 = icmp slt <32 x i64> %a18.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a17.us.us = select <32 x i1> %635, <32 x i64> %a18.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %636 = icmp sgt <32 x i64> %a17.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %637 = select <32 x i1> %636, <32 x i64> %a17.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %638 = trunc <32 x i64> %637 to <32 x i32>
  %639 = sext <32 x i32> %convolved313.sroa.62.6.us.us to <32 x i64>
  %a23.us.us = mul nsw <32 x i64> %639, %345
  %640 = icmp slt <32 x i64> %a23.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %641 = select <32 x i1> %640, <32 x i64> %a23.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %642 = add nsw <32 x i64> %641, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a22.us.us = ashr <32 x i64> %642, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %643 = icmp slt <32 x i64> %a22.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a21.us.us = select <32 x i1> %643, <32 x i64> %a22.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %644 = icmp sgt <32 x i64> %a21.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %645 = select <32 x i1> %644, <32 x i64> %a21.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %646 = trunc <32 x i64> %645 to <32 x i32>
  %647 = sext <32 x i32> %convolved313.sroa.77.6.us.us to <32 x i64>
  %a27.us.us = mul nsw <32 x i64> %647, %345
  %648 = icmp slt <32 x i64> %a27.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %649 = select <32 x i1> %648, <32 x i64> %a27.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %650 = add nsw <32 x i64> %649, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a26.us.us = ashr <32 x i64> %650, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %651 = icmp slt <32 x i64> %a26.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a25.us.us = select <32 x i1> %651, <32 x i64> %a26.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %652 = icmp sgt <32 x i64> %a25.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %653 = select <32 x i1> %652, <32 x i64> %a25.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %654 = trunc <32 x i64> %653 to <32 x i32>
  %655 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %630, <32 x i32> %1140) #11
  %656 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %655, <32 x i32> %1139) #11
  %657 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %656, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %658 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %638, <32 x i32> %1140) #11
  %659 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %658, <32 x i32> %1139) #11
  %660 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %659, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %661 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %657, <32 x i32> %660) #11
  %662 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %661) #11
  %663 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %662, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %664 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %661) #11
  %665 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %664) #11
  %666 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %663, <32 x i32> %665) #11
  %667 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %666) #11
  %668 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %666) #11
  %669 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %667, <32 x i32> %668) #11
  %670 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %646, <32 x i32> %1140) #11
  %671 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %670, <32 x i32> %1139) #11
  %672 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %671, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %673 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %654, <32 x i32> %1140) #11
  %674 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %673, <32 x i32> %1139) #11
  %675 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %674, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %676 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %672, <32 x i32> %675) #11
  %677 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %676) #11
  %678 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %677, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %679 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %676) #11
  %680 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %679) #11
  %681 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %678, <32 x i32> %680) #11
  %682 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %681) #11
  %683 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %681) #11
  %684 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %682, <32 x i32> %683) #11
  %685 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %669, <32 x i32> %684) #11
  %686 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %685, <64 x i32> %357) #11
  %687 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %686) #11
  %688 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %687) #11
  %689 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %688) #11
  %690 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %686) #11
  %691 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %690) #11
  %692 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %691) #11
  %693 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %689, <32 x i32> %692) #11
  %694 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %693) #11
  %695 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %693) #11
  %696 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %694, <32 x i32> %695) #11
  %697 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %358, <32 x i32> %696) #11
  %698 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %697, <32 x i32> %359) #11
  %699 = shl nsw i32 %output.s0.c.co.us.us, 7
  %700 = add i32 %699, %t877.us.us
  %701 = add i32 %700, %1141
  %702 = getelementptr inbounds i8, i8* %23, i32 %701
  %703 = bitcast i8* %702 to <32 x i32>*
  store <32 x i32> %698, <32 x i32>* %703, align 1, !tbaa !113
  %704 = sext <32 x i32> %convolved313.sroa.92.6.us.us to <32 x i64>
  %a31.us.us = mul nsw <32 x i64> %704, %345
  %705 = icmp slt <32 x i64> %a31.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %706 = select <32 x i1> %705, <32 x i64> %a31.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %707 = add nsw <32 x i64> %706, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a30.us.us = ashr <32 x i64> %707, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %708 = icmp slt <32 x i64> %a30.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a29.us.us = select <32 x i1> %708, <32 x i64> %a30.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %709 = icmp sgt <32 x i64> %a29.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %710 = select <32 x i1> %709, <32 x i64> %a29.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %711 = trunc <32 x i64> %710 to <32 x i32>
  %712 = sext <32 x i32> %convolved313.sroa.102.6.us.us to <32 x i64>
  %a35.us.us = mul nsw <32 x i64> %712, %345
  %713 = icmp slt <32 x i64> %a35.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %714 = select <32 x i1> %713, <32 x i64> %a35.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %715 = add nsw <32 x i64> %714, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a34.us.us = ashr <32 x i64> %715, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %716 = icmp slt <32 x i64> %a34.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a33.us.us = select <32 x i1> %716, <32 x i64> %a34.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %717 = icmp sgt <32 x i64> %a33.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %718 = select <32 x i1> %717, <32 x i64> %a33.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %719 = trunc <32 x i64> %718 to <32 x i32>
  %720 = sext <32 x i32> %convolved313.sroa.112.6.us.us to <32 x i64>
  %a39.us.us = mul nsw <32 x i64> %720, %345
  %721 = icmp slt <32 x i64> %a39.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %722 = select <32 x i1> %721, <32 x i64> %a39.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %723 = add nsw <32 x i64> %722, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a38.us.us = ashr <32 x i64> %723, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %724 = icmp slt <32 x i64> %a38.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a37.us.us = select <32 x i1> %724, <32 x i64> %a38.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %725 = icmp sgt <32 x i64> %a37.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %726 = select <32 x i1> %725, <32 x i64> %a37.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %727 = trunc <32 x i64> %726 to <32 x i32>
  %728 = sext <32 x i32> %convolved313.sroa.122.6.us.us to <32 x i64>
  %a43.us.us = mul nsw <32 x i64> %728, %345
  %729 = icmp slt <32 x i64> %a43.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %730 = select <32 x i1> %729, <32 x i64> %a43.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %731 = add nsw <32 x i64> %730, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a42.us.us = ashr <32 x i64> %731, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %732 = icmp slt <32 x i64> %a42.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a41.us.us = select <32 x i1> %732, <32 x i64> %a42.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %733 = icmp sgt <32 x i64> %a41.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %734 = select <32 x i1> %733, <32 x i64> %a41.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %735 = trunc <32 x i64> %734 to <32 x i32>
  %736 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %711, <32 x i32> %1140) #11
  %737 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %736, <32 x i32> %1139) #11
  %738 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %737, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %739 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %719, <32 x i32> %1140) #11
  %740 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %739, <32 x i32> %1139) #11
  %741 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %740, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %742 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %738, <32 x i32> %741) #11
  %743 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %742) #11
  %744 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %743, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %745 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %742) #11
  %746 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %745) #11
  %747 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %744, <32 x i32> %746) #11
  %748 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %747) #11
  %749 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %747) #11
  %750 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %748, <32 x i32> %749) #11
  %751 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %727, <32 x i32> %1140) #11
  %752 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %751, <32 x i32> %1139) #11
  %753 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %752, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %754 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %735, <32 x i32> %1140) #11
  %755 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %754, <32 x i32> %1139) #11
  %756 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %755, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %757 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %753, <32 x i32> %756) #11
  %758 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %757) #11
  %759 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %758, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %760 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %757) #11
  %761 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %760) #11
  %762 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %759, <32 x i32> %761) #11
  %763 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %762) #11
  %764 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %762) #11
  %765 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %763, <32 x i32> %764) #11
  %766 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %750, <32 x i32> %765) #11
  %767 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %766, <64 x i32> %357) #11
  %768 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %767) #11
  %769 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %768) #11
  %770 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %769) #11
  %771 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %767) #11
  %772 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %771) #11
  %773 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %772) #11
  %774 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %770, <32 x i32> %773) #11
  %775 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %774) #11
  %776 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %774) #11
  %777 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %775, <32 x i32> %776) #11
  %778 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %358, <32 x i32> %777) #11
  %779 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %778, <32 x i32> %359) #11
  %780 = add i32 %700, %1142
  %781 = getelementptr inbounds i8, i8* %23, i32 %780
  %782 = bitcast i8* %781 to <32 x i32>*
  store <32 x i32> %779, <32 x i32>* %782, align 1, !tbaa !113
  %783 = sext <32 x i32> %convolved313.sroa.132.6.us.us to <32 x i64>
  %a47.us.us = mul nsw <32 x i64> %783, %345
  %784 = icmp slt <32 x i64> %a47.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %785 = select <32 x i1> %784, <32 x i64> %a47.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %786 = add nsw <32 x i64> %785, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a46.us.us = ashr <32 x i64> %786, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %787 = icmp slt <32 x i64> %a46.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a45.us.us = select <32 x i1> %787, <32 x i64> %a46.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %788 = icmp sgt <32 x i64> %a45.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %789 = select <32 x i1> %788, <32 x i64> %a45.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %790 = trunc <32 x i64> %789 to <32 x i32>
  %791 = sext <32 x i32> %convolved313.sroa.137.6.us.us to <32 x i64>
  %a51.us.us = mul nsw <32 x i64> %791, %345
  %792 = icmp slt <32 x i64> %a51.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %793 = select <32 x i1> %792, <32 x i64> %a51.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %794 = add nsw <32 x i64> %793, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a50.us.us = ashr <32 x i64> %794, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %795 = icmp slt <32 x i64> %a50.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a49.us.us = select <32 x i1> %795, <32 x i64> %a50.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %796 = icmp sgt <32 x i64> %a49.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %797 = select <32 x i1> %796, <32 x i64> %a49.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %798 = trunc <32 x i64> %797 to <32 x i32>
  %799 = sext <32 x i32> %convolved313.sroa.142.6.us.us to <32 x i64>
  %a55.us.us = mul nsw <32 x i64> %799, %345
  %800 = icmp slt <32 x i64> %a55.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %801 = select <32 x i1> %800, <32 x i64> %a55.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %802 = add nsw <32 x i64> %801, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a54.us.us = ashr <32 x i64> %802, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %803 = icmp slt <32 x i64> %a54.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a53.us.us = select <32 x i1> %803, <32 x i64> %a54.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %804 = icmp sgt <32 x i64> %a53.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %805 = select <32 x i1> %804, <32 x i64> %a53.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %806 = trunc <32 x i64> %805 to <32 x i32>
  %807 = sext <32 x i32> %convolved313.sroa.147.6.us.us to <32 x i64>
  %a59.us.us = mul nsw <32 x i64> %807, %345
  %808 = icmp slt <32 x i64> %a59.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %809 = select <32 x i1> %808, <32 x i64> %a59.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %810 = add nsw <32 x i64> %809, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a58.us.us = ashr <32 x i64> %810, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %811 = icmp slt <32 x i64> %a58.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a57.us.us = select <32 x i1> %811, <32 x i64> %a58.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %812 = icmp sgt <32 x i64> %a57.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %813 = select <32 x i1> %812, <32 x i64> %a57.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %814 = trunc <32 x i64> %813 to <32 x i32>
  %815 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %790, <32 x i32> %1140) #11
  %816 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %815, <32 x i32> %1139) #11
  %817 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %816, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %818 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %798, <32 x i32> %1140) #11
  %819 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %818, <32 x i32> %1139) #11
  %820 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %819, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %821 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %817, <32 x i32> %820) #11
  %822 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %821) #11
  %823 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %822, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %824 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %821) #11
  %825 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %824) #11
  %826 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %823, <32 x i32> %825) #11
  %827 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %826) #11
  %828 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %826) #11
  %829 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %827, <32 x i32> %828) #11
  %830 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %806, <32 x i32> %1140) #11
  %831 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %830, <32 x i32> %1139) #11
  %832 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %831, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %833 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %814, <32 x i32> %1140) #11
  %834 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %833, <32 x i32> %1139) #11
  %835 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %834, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %836 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %832, <32 x i32> %835) #11
  %837 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %836) #11
  %838 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %837, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %839 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %836) #11
  %840 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %839) #11
  %841 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %838, <32 x i32> %840) #11
  %842 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %841) #11
  %843 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %841) #11
  %844 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %842, <32 x i32> %843) #11
  %845 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %829, <32 x i32> %844) #11
  %846 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %845, <64 x i32> %357) #11
  %847 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %846) #11
  %848 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %847) #11
  %849 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %848) #11
  %850 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %846) #11
  %851 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %850) #11
  %852 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %851) #11
  %853 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %849, <32 x i32> %852) #11
  %854 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %853) #11
  %855 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %853) #11
  %856 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %854, <32 x i32> %855) #11
  %857 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %358, <32 x i32> %856) #11
  %858 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %857, <32 x i32> %359) #11
  %859 = add i32 %700, %1143
  %860 = getelementptr inbounds i8, i8* %23, i32 %859
  %861 = bitcast i8* %860 to <32 x i32>*
  store <32 x i32> %858, <32 x i32>* %861, align 1, !tbaa !113
  %862 = sext <32 x i32> %convolved313.sroa.152.6.us.us to <32 x i64>
  %a63.us.us = mul nsw <32 x i64> %862, %345
  %863 = icmp slt <32 x i64> %a63.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %864 = select <32 x i1> %863, <32 x i64> %a63.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %865 = add nsw <32 x i64> %864, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a62.us.us = ashr <32 x i64> %865, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %866 = icmp slt <32 x i64> %a62.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a61.us.us = select <32 x i1> %866, <32 x i64> %a62.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %867 = icmp sgt <32 x i64> %a61.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %868 = select <32 x i1> %867, <32 x i64> %a61.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %869 = trunc <32 x i64> %868 to <32 x i32>
  %870 = sext <32 x i32> %convolved313.sroa.157.6.us.us to <32 x i64>
  %a67.us.us = mul nsw <32 x i64> %870, %345
  %871 = icmp slt <32 x i64> %a67.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %872 = select <32 x i1> %871, <32 x i64> %a67.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %873 = add nsw <32 x i64> %872, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a66.us.us = ashr <32 x i64> %873, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %874 = icmp slt <32 x i64> %a66.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a65.us.us = select <32 x i1> %874, <32 x i64> %a66.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %875 = icmp sgt <32 x i64> %a65.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %876 = select <32 x i1> %875, <32 x i64> %a65.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %877 = trunc <32 x i64> %876 to <32 x i32>
  %878 = sext <32 x i32> %convolved313.sroa.162.6.us.us to <32 x i64>
  %a71.us.us = mul nsw <32 x i64> %878, %345
  %879 = icmp slt <32 x i64> %a71.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %880 = select <32 x i1> %879, <32 x i64> %a71.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %881 = add nsw <32 x i64> %880, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a70.us.us = ashr <32 x i64> %881, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %882 = icmp slt <32 x i64> %a70.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a69.us.us = select <32 x i1> %882, <32 x i64> %a70.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %883 = icmp sgt <32 x i64> %a69.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %884 = select <32 x i1> %883, <32 x i64> %a69.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %885 = trunc <32 x i64> %884 to <32 x i32>
  %886 = sext <32 x i32> %convolved313.sroa.167.6.us.us to <32 x i64>
  %a75.us.us = mul nsw <32 x i64> %886, %345
  %887 = icmp slt <32 x i64> %a75.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %888 = select <32 x i1> %887, <32 x i64> %a75.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %889 = add nsw <32 x i64> %888, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a74.us.us = ashr <32 x i64> %889, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %890 = icmp slt <32 x i64> %a74.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a73.us.us = select <32 x i1> %890, <32 x i64> %a74.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %891 = icmp sgt <32 x i64> %a73.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %892 = select <32 x i1> %891, <32 x i64> %a73.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %893 = trunc <32 x i64> %892 to <32 x i32>
  %894 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %869, <32 x i32> %1140) #11
  %895 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %894, <32 x i32> %1139) #11
  %896 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %895, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %897 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %877, <32 x i32> %1140) #11
  %898 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %897, <32 x i32> %1139) #11
  %899 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %898, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %900 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %896, <32 x i32> %899) #11
  %901 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %900) #11
  %902 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %901, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %903 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %900) #11
  %904 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %903) #11
  %905 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %902, <32 x i32> %904) #11
  %906 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %905) #11
  %907 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %905) #11
  %908 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %906, <32 x i32> %907) #11
  %909 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %885, <32 x i32> %1140) #11
  %910 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %909, <32 x i32> %1139) #11
  %911 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %910, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %912 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %893, <32 x i32> %1140) #11
  %913 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %912, <32 x i32> %1139) #11
  %914 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %913, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %915 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %911, <32 x i32> %914) #11
  %916 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %915) #11
  %917 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %916, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %918 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %915) #11
  %919 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %918) #11
  %920 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %917, <32 x i32> %919) #11
  %921 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %920) #11
  %922 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %920) #11
  %923 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %921, <32 x i32> %922) #11
  %924 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %908, <32 x i32> %923) #11
  %925 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %924, <64 x i32> %357) #11
  %926 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %925) #11
  %927 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %926) #11
  %928 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %927) #11
  %929 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %925) #11
  %930 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %929) #11
  %931 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %930) #11
  %932 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %928, <32 x i32> %931) #11
  %933 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %932) #11
  %934 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %932) #11
  %935 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %933, <32 x i32> %934) #11
  %936 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %358, <32 x i32> %935) #11
  %937 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %936, <32 x i32> %359) #11
  %938 = add i32 %700, %1144
  %939 = getelementptr inbounds i8, i8* %23, i32 %938
  %940 = bitcast i8* %939 to <32 x i32>*
  store <32 x i32> %937, <32 x i32>* %940, align 1, !tbaa !113
  %941 = sext <32 x i32> %convolved313.sroa.172.6.us.us to <32 x i64>
  %a79.us.us = mul nsw <32 x i64> %941, %345
  %942 = icmp slt <32 x i64> %a79.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %943 = select <32 x i1> %942, <32 x i64> %a79.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %944 = add nsw <32 x i64> %943, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a78.us.us = ashr <32 x i64> %944, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %945 = icmp slt <32 x i64> %a78.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a77.us.us = select <32 x i1> %945, <32 x i64> %a78.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %946 = icmp sgt <32 x i64> %a77.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %947 = select <32 x i1> %946, <32 x i64> %a77.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %948 = trunc <32 x i64> %947 to <32 x i32>
  %949 = sext <32 x i32> %convolved313.sroa.177.6.us.us to <32 x i64>
  %a83.us.us = mul nsw <32 x i64> %949, %345
  %950 = icmp slt <32 x i64> %a83.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %951 = select <32 x i1> %950, <32 x i64> %a83.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %952 = add nsw <32 x i64> %951, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a82.us.us = ashr <32 x i64> %952, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %953 = icmp slt <32 x i64> %a82.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a81.us.us = select <32 x i1> %953, <32 x i64> %a82.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %954 = icmp sgt <32 x i64> %a81.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %955 = select <32 x i1> %954, <32 x i64> %a81.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %956 = trunc <32 x i64> %955 to <32 x i32>
  %957 = sext <32 x i32> %convolved313.sroa.182.6.us.us to <32 x i64>
  %a87.us.us = mul nsw <32 x i64> %957, %345
  %958 = icmp slt <32 x i64> %a87.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %959 = select <32 x i1> %958, <32 x i64> %a87.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %960 = add nsw <32 x i64> %959, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a86.us.us = ashr <32 x i64> %960, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %961 = icmp slt <32 x i64> %a86.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a85.us.us = select <32 x i1> %961, <32 x i64> %a86.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %962 = icmp sgt <32 x i64> %a85.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %963 = select <32 x i1> %962, <32 x i64> %a85.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %964 = trunc <32 x i64> %963 to <32 x i32>
  %965 = sext <32 x i32> %convolved313.sroa.187.6.us.us to <32 x i64>
  %a91.us.us = mul nsw <32 x i64> %965, %345
  %966 = icmp slt <32 x i64> %a91.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %967 = select <32 x i1> %966, <32 x i64> %a91.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %968 = add nsw <32 x i64> %967, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a90.us.us = ashr <32 x i64> %968, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %969 = icmp slt <32 x i64> %a90.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a89.us.us = select <32 x i1> %969, <32 x i64> %a90.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %970 = icmp sgt <32 x i64> %a89.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %971 = select <32 x i1> %970, <32 x i64> %a89.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %972 = trunc <32 x i64> %971 to <32 x i32>
  %973 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %948, <32 x i32> %1140) #11
  %974 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %973, <32 x i32> %1139) #11
  %975 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %974, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %976 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %956, <32 x i32> %1140) #11
  %977 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %976, <32 x i32> %1139) #11
  %978 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %977, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %979 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %975, <32 x i32> %978) #11
  %980 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %979) #11
  %981 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %980, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %982 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %979) #11
  %983 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %982) #11
  %984 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %981, <32 x i32> %983) #11
  %985 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %984) #11
  %986 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %984) #11
  %987 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %985, <32 x i32> %986) #11
  %988 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %964, <32 x i32> %1140) #11
  %989 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %988, <32 x i32> %1139) #11
  %990 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %989, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %991 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %972, <32 x i32> %1140) #11
  %992 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %991, <32 x i32> %1139) #11
  %993 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %992, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %994 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %990, <32 x i32> %993) #11
  %995 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %994) #11
  %996 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %995, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %997 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %994) #11
  %998 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %997) #11
  %999 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %996, <32 x i32> %998) #11
  %1000 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %999) #11
  %1001 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %999) #11
  %1002 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1000, <32 x i32> %1001) #11
  %1003 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %987, <32 x i32> %1002) #11
  %1004 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1003, <64 x i32> %357) #11
  %1005 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1004) #11
  %1006 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1005) #11
  %1007 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %1006) #11
  %1008 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1004) #11
  %1009 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1008) #11
  %1010 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %1009) #11
  %1011 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1007, <32 x i32> %1010) #11
  %1012 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1011) #11
  %1013 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1011) #11
  %1014 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %1012, <32 x i32> %1013) #11
  %1015 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %358, <32 x i32> %1014) #11
  %1016 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1015, <32 x i32> %359) #11
  %1017 = add i32 %700, %1145
  %1018 = getelementptr inbounds i8, i8* %23, i32 %1017
  %1019 = bitcast i8* %1018 to <32 x i32>*
  store <32 x i32> %1016, <32 x i32>* %1019, align 1, !tbaa !113
  %1020 = sext <32 x i32> %convolved313.sroa.192.6.us.us to <32 x i64>
  %a95.us.us = mul nsw <32 x i64> %1020, %345
  %1021 = icmp slt <32 x i64> %a95.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1022 = select <32 x i1> %1021, <32 x i64> %a95.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1023 = add nsw <32 x i64> %1022, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a94.us.us = ashr <32 x i64> %1023, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1024 = icmp slt <32 x i64> %a94.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a93.us.us = select <32 x i1> %1024, <32 x i64> %a94.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1025 = icmp sgt <32 x i64> %a93.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1026 = select <32 x i1> %1025, <32 x i64> %a93.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1027 = trunc <32 x i64> %1026 to <32 x i32>
  %1028 = sext <32 x i32> %convolved313.sroa.197.6.us.us to <32 x i64>
  %a99.us.us = mul nsw <32 x i64> %1028, %345
  %1029 = icmp slt <32 x i64> %a99.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1030 = select <32 x i1> %1029, <32 x i64> %a99.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1031 = add nsw <32 x i64> %1030, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a98.us.us = ashr <32 x i64> %1031, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1032 = icmp slt <32 x i64> %a98.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a97.us.us = select <32 x i1> %1032, <32 x i64> %a98.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1033 = icmp sgt <32 x i64> %a97.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1034 = select <32 x i1> %1033, <32 x i64> %a97.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1035 = trunc <32 x i64> %1034 to <32 x i32>
  %1036 = sext <32 x i32> %convolved313.sroa.202.6.us.us to <32 x i64>
  %a103.us.us = mul nsw <32 x i64> %1036, %345
  %1037 = icmp slt <32 x i64> %a103.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1038 = select <32 x i1> %1037, <32 x i64> %a103.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1039 = add nsw <32 x i64> %1038, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a102.us.us = ashr <32 x i64> %1039, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1040 = icmp slt <32 x i64> %a102.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a101.us.us = select <32 x i1> %1040, <32 x i64> %a102.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1041 = icmp sgt <32 x i64> %a101.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1042 = select <32 x i1> %1041, <32 x i64> %a101.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1043 = trunc <32 x i64> %1042 to <32 x i32>
  %1044 = sext <32 x i32> %convolved313.sroa.207.6.us.us to <32 x i64>
  %a107.us.us = mul nsw <32 x i64> %1044, %345
  %1045 = icmp slt <32 x i64> %a107.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1046 = select <32 x i1> %1045, <32 x i64> %a107.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1047 = add nsw <32 x i64> %1046, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a106.us.us = ashr <32 x i64> %1047, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1048 = icmp slt <32 x i64> %a106.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a105.us.us = select <32 x i1> %1048, <32 x i64> %a106.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1049 = icmp sgt <32 x i64> %a105.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1050 = select <32 x i1> %1049, <32 x i64> %a105.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1051 = trunc <32 x i64> %1050 to <32 x i32>
  %1052 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1027, <32 x i32> %1140) #11
  %1053 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1052, <32 x i32> %1139) #11
  %1054 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1053, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1055 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1035, <32 x i32> %1140) #11
  %1056 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1055, <32 x i32> %1139) #11
  %1057 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1056, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1058 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1054, <32 x i32> %1057) #11
  %1059 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1058) #11
  %1060 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1059, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1061 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1058) #11
  %1062 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1061) #11
  %1063 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1060, <32 x i32> %1062) #11
  %1064 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1063) #11
  %1065 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1063) #11
  %1066 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1064, <32 x i32> %1065) #11
  %1067 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1043, <32 x i32> %1140) #11
  %1068 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1067, <32 x i32> %1139) #11
  %1069 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1068, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1070 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1051, <32 x i32> %1140) #11
  %1071 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1070, <32 x i32> %1139) #11
  %1072 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1071, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1073 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1069, <32 x i32> %1072) #11
  %1074 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1073) #11
  %1075 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1074, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1076 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1073) #11
  %1077 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1076) #11
  %1078 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1075, <32 x i32> %1077) #11
  %1079 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1078) #11
  %1080 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1078) #11
  %1081 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1079, <32 x i32> %1080) #11
  %1082 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1066, <32 x i32> %1081) #11
  %1083 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1082, <64 x i32> %357) #11
  %1084 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1083) #11
  %1085 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1084) #11
  %1086 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %1085) #11
  %1087 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1083) #11
  %1088 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1087) #11
  %1089 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %1088) #11
  %1090 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1086, <32 x i32> %1089) #11
  %1091 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1090) #11
  %1092 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1090) #11
  %1093 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %1091, <32 x i32> %1092) #11
  %1094 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %358, <32 x i32> %1093) #11
  %1095 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1094, <32 x i32> %359) #11
  %1096 = add i32 %700, %1146
  %1097 = getelementptr inbounds i8, i8* %23, i32 %1096
  %1098 = bitcast i8* %1097 to <32 x i32>*
  store <32 x i32> %1095, <32 x i32>* %1098, align 1, !tbaa !113
  %1099 = add nuw nsw i32 %output.s0.c.co.us.us, 1
  %.not373.us.us = icmp eq i32 %1099, %341
  br i1 %.not373.us.us, label %"end for output.s0.c.co.us.us", label %"for output.s0.c.co.us.us"

"end for output.s0.c.co.us.us":                   ; preds = %"consume convolved.us.us", %"consume sum_input.us.us"
  %1100 = add nuw nsw i32 %output.s0.x.xo.us.us, 1
  %.not372.us.us = icmp eq i32 %1100, %336
  br i1 %.not372.us.us, label %"end for output.s0.x.xo.loopexit.us.us", label %"for output.s0.x.xo.us.us"

"for convolved.s1.r19$z.r124.preheader.us.us":    ; preds = %"for convolved.s1.r19$x.us.us"
  %t919.s.us.us = add nsw i32 %542, %1138
  %t924.s.us.us = add nsw i32 %542, %1137
  %t925.s.us.us = add nsw i32 %542, %1135
  %t926.s.us.us = add nsw i32 %542, %1133
  %t927.s.us.us = add nsw i32 %542, %1131
  %t928.s.us.us = add nsw i32 %542, %1129
  %1101 = mul nsw i32 %t919.s.us.us, %17
  %1102 = add i32 %t920.us.us, %1116
  %1103 = add i32 %t920.us.us, %1114
  %1104 = add i32 %t920.us.us, %1112
  %1105 = mul nsw i32 %t924.s.us.us, %17
  %1106 = mul nsw i32 %t925.s.us.us, %17
  %1107 = mul nsw i32 %t926.s.us.us, %17
  %1108 = mul nsw i32 %t927.s.us.us, %17
  %1109 = mul nsw i32 %t928.s.us.us, %17
  br label %"for convolved.s1.r19$z.r124.us.us"

"for convolved.s1.r19$y.preheader.us.us":         ; preds = %after_bb18.us.us
  %1110 = shl nsw i32 %output.s0.c.co.us.us, 2
  %1111 = or i32 %1110, 3
  %1112 = mul nsw i32 %1111, %8
  %1113 = or i32 %1110, 2
  %1114 = mul nsw i32 %1113, %8
  %1115 = or i32 %1110, 1
  %1116 = mul nsw i32 %1115, %8
  %1117 = mul nsw i32 %output.s0.c.co.us.us, %8
  br label %"for convolved.s1.r19$y.us.us"

"for sum_input.s1.r19$x.preheader.us.us":         ; preds = %"for sum_input.s1.r19$y.us.us"
  %1118 = mul nsw i32 %"sum_input.s1.r19$y.us.us", %dilation_y
  %1119 = add nsw i32 %1118, %373
  %1120 = mul nsw i32 %1119, %19
  %t880.us.us = add i32 %368, %1120
  br i1 %363, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"for output.s0.c.co.preheader.us.us":             ; preds = %"consume sum_input.us.us"
  %sum_input314.sroa.0.0.vec.extract518.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 0
  %1121 = mul nsw i32 %sum_input314.sroa.0.0.vec.extract518.us.us, %309
  %sum_input314.sroa.0.4.vec.extract524.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 1
  %1122 = mul nsw i32 %sum_input314.sroa.0.4.vec.extract524.us.us, %309
  %sum_input314.sroa.0.8.vec.extract530.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 2
  %1123 = mul nsw i32 %sum_input314.sroa.0.8.vec.extract530.us.us, %309
  %sum_input314.sroa.0.12.vec.extract536.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 3
  %1124 = mul nsw i32 %sum_input314.sroa.0.12.vec.extract536.us.us, %309
  %sum_input314.sroa.0.16.vec.extract542.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 4
  %1125 = mul nsw i32 %sum_input314.sroa.0.16.vec.extract542.us.us, %309
  %sum_input314.sroa.0.20.vec.extract548.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 5
  %1126 = mul nsw i32 %sum_input314.sroa.0.20.vec.extract548.us.us, %309
  %1127 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %1128 = add nsw i32 %1127, 5
  %1129 = mul nsw i32 %1128, %stride_x
  %1130 = add nsw i32 %1127, 4
  %1131 = mul nsw i32 %1130, %stride_x
  %1132 = add nsw i32 %1127, 3
  %1133 = mul nsw i32 %1132, %stride_x
  %1134 = add nsw i32 %1127, 2
  %1135 = mul nsw i32 %1134, %stride_x
  %1136 = add nsw i32 %1127, 1
  %1137 = mul nsw i32 %1136, %stride_x
  %1138 = mul nsw i32 %1127, %stride_x
  %1139 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %a497) #11
  %1140 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %349) #11
  %1141 = mul nsw i32 %1127, %27
  %1142 = mul nsw i32 %1136, %27
  %1143 = mul nsw i32 %1134, %27
  %1144 = mul nsw i32 %1132, %27
  %1145 = mul nsw i32 %1130, %27
  %1146 = mul nsw i32 %1128, %27
  br label %"for output.s0.c.co.us.us"

"for sum_input.s1.r19$y.preheader.us.us":         ; preds = %then_bb10.us.us
  %1147 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %1148 = sub i32 %1147, %16
  br label %"for sum_input.s1.r19$y.us.us"

"for sum_input.s1.r19$y12.preheader.us.us":       ; preds = %next_bb11.us.us
  %1149 = add nsw i32 %output.s0.x.x.base.s.us.us, %25
  %1150 = mul nsw i32 %1149, %stride_x
  br i1 %brmerge1306.demorgan, label %"for sum_input.s1.r19$y12.us.us.us.us", label %"consume sum_input.us.us", !prof !103

"end for output.s0.x.xo.loopexit.us.us":          ; preds = %"end for output.s0.c.co.us.us"
  %1151 = add nuw nsw i32 %output.s0.y.rebased.us.us, 1
  %.not371.us.us = icmp eq i32 %1151, %29
  br i1 %.not371.us.us, label %"end for output.s0.y.rebased.loopexit.us", label %"for output.s0.y.rebased.us.us"

"for sum_input.s1.r19$y12.us.us.us.us":           ; preds = %"for sum_input.s1.r19$y12.preheader.us.us", %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us"
  %sum_input314.sroa.0.8.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %"sum_input.s1.r19$y14.us.us.us.us" = phi i32 [ %1312, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %1152 = mul nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", %dilation_y
  %t882.s.us.us.us.us = add nsw i32 %1152, %373
  %1153 = mul nsw i32 %t882.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"for sum_input.s1.r19$x15.us.us.us.us.us":        ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y12.us.us.us.us"
  %sum_input314.sroa.0.9.us.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ %sum_input314.sroa.0.8.us.us.us.us, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %"sum_input.s1.r19$x17.us.us.us.us.us" = phi i32 [ %1311, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %1154 = mul nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", %dilation_x
  %t883.s.us.us.us.us.us = add nsw i32 %1154, %1150
  %t1221.us.us.us.us.us = mul nsw i32 %t883.s.us.us.us.us.us, %17
  %1155 = add i32 %t1221.us.us.us.us.us, %1153
  %t884.us.us.us.us.us = sub i32 %1155, %t852
  %1156 = add i32 %t884.us.us.us.us.us, %367
  %t860.us.us.us.us.us = add i32 %1155, %327
  %1157 = sub i32 %t860.us.us.us.us.us, %316
  %t885.us.us.us.us.us = sub i32 %1157, %317
  %1158 = add i32 %t885.us.us.us.us.us, %367
  %1159 = add i32 %1155, %325
  %1160 = sub i32 %1159, %360
  %t886.us.us.us.us.us = sub i32 %1160, %317
  %1161 = add i32 %t886.us.us.us.us.us, %367
  %1162 = add i32 %1155, %324
  %1163 = sub i32 %1162, %360
  %t887.us.us.us.us.us = sub i32 %1163, %317
  %1164 = add i32 %t887.us.us.us.us.us, %367
  %1165 = add i32 %1155, %323
  %1166 = sub i32 %1165, %360
  %t888.us.us.us.us.us = sub i32 %1166, %317
  %1167 = add i32 %t888.us.us.us.us.us, %367
  %1168 = add i32 %1155, %322
  %1169 = sub i32 %1168, %360
  %t889.us.us.us.us.us = sub i32 %1169, %317
  %1170 = add i32 %t889.us.us.us.us.us, %367
  br i1 %362, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"for sum_input.s1.r19$z.r124.us.us.us.us.us":     ; preds = %"for sum_input.s1.r19$x15.us.us.us.us.us", %"for sum_input.s1.r19$z.r124.us.us.us.us.us"
  %sum_input314.sroa.0.11.us.us.us.us.us = phi <6 x i32> [ %1263, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %sum_input314.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us" = phi i32 [ %1264, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %niter1550 = phi i32 [ %niter1550.nsub.1, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %unroll_iter1549, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %1171 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %1172 = add i32 %1156, %1171
  %1173 = getelementptr inbounds i8, i8* %13, i32 %1172
  %1174 = bitcast i8* %1173 to <4 x i8>*
  %1175 = load <4 x i8>, <4 x i8>* %1174, align 4, !tbaa !110
  %1176 = add i32 %1158, %1171
  %1177 = getelementptr inbounds i8, i8* %13, i32 %1176
  %1178 = bitcast i8* %1177 to <4 x i8>*
  %1179 = load <4 x i8>, <4 x i8>* %1178, align 4, !tbaa !110
  %1180 = add i32 %1161, %1171
  %1181 = getelementptr inbounds i8, i8* %13, i32 %1180
  %1182 = bitcast i8* %1181 to <4 x i8>*
  %1183 = load <4 x i8>, <4 x i8>* %1182, align 4, !tbaa !110
  %1184 = add i32 %1164, %1171
  %1185 = getelementptr inbounds i8, i8* %13, i32 %1184
  %1186 = bitcast i8* %1185 to <4 x i8>*
  %1187 = load <4 x i8>, <4 x i8>* %1186, align 4, !tbaa !110
  %1188 = add i32 %1167, %1171
  %1189 = getelementptr inbounds i8, i8* %13, i32 %1188
  %1190 = bitcast i8* %1189 to <4 x i8>*
  %1191 = load <4 x i8>, <4 x i8>* %1190, align 4, !tbaa !110
  %1192 = add i32 %1170, %1171
  %1193 = getelementptr inbounds i8, i8* %13, i32 %1192
  %1194 = bitcast i8* %1193 to <4 x i8>*
  %1195 = load <4 x i8>, <4 x i8>* %1194, align 4, !tbaa !110
  %1196 = shufflevector <4 x i8> %1175, <4 x i8> %1179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1197 = shufflevector <4 x i8> %1183, <4 x i8> %1187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1198 = shufflevector <8 x i8> %1196, <8 x i8> %1197, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1199 = shufflevector <4 x i8> %1191, <4 x i8> %1195, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1200 = shufflevector <16 x i8> %1198, <16 x i8> %1199, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us = zext <24 x i8> %1200 to <24 x i16>
  %1201 = shufflevector <24 x i16> %t1223.us.us.us.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1202 = bitcast <64 x i16> %1201 to <32 x i32>
  %1203 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1202)
  %1204 = bitcast <32 x i32> %1203 to <64 x i16>
  %1205 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1202)
  %1206 = bitcast <32 x i32> %1205 to <64 x i16>
  %1207 = add <64 x i16> %1206, %1204
  %1208 = shufflevector <64 x i16> %1207, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us = zext <12 x i16> %1208 to <12 x i32>
  %1209 = shufflevector <12 x i32> %t1222.us.us.us.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1210 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1209, i32 -4)
  %1211 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1210)
  %1212 = shufflevector <32 x i32> %1211, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1213 = add nsw <6 x i32> %1212, %sum_input314.sroa.0.11.us.us.us.us.us
  %1214 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1210)
  %1215 = shufflevector <32 x i32> %1214, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1216 = add nsw <6 x i32> %1213, %1215
  %1217 = shl i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %1218 = or i32 %1217, 4
  %1219 = add i32 %1156, %1218
  %1220 = getelementptr inbounds i8, i8* %13, i32 %1219
  %1221 = bitcast i8* %1220 to <4 x i8>*
  %1222 = load <4 x i8>, <4 x i8>* %1221, align 4, !tbaa !110
  %1223 = add i32 %1158, %1218
  %1224 = getelementptr inbounds i8, i8* %13, i32 %1223
  %1225 = bitcast i8* %1224 to <4 x i8>*
  %1226 = load <4 x i8>, <4 x i8>* %1225, align 4, !tbaa !110
  %1227 = add i32 %1161, %1218
  %1228 = getelementptr inbounds i8, i8* %13, i32 %1227
  %1229 = bitcast i8* %1228 to <4 x i8>*
  %1230 = load <4 x i8>, <4 x i8>* %1229, align 4, !tbaa !110
  %1231 = add i32 %1164, %1218
  %1232 = getelementptr inbounds i8, i8* %13, i32 %1231
  %1233 = bitcast i8* %1232 to <4 x i8>*
  %1234 = load <4 x i8>, <4 x i8>* %1233, align 4, !tbaa !110
  %1235 = add i32 %1167, %1218
  %1236 = getelementptr inbounds i8, i8* %13, i32 %1235
  %1237 = bitcast i8* %1236 to <4 x i8>*
  %1238 = load <4 x i8>, <4 x i8>* %1237, align 4, !tbaa !110
  %1239 = add i32 %1170, %1218
  %1240 = getelementptr inbounds i8, i8* %13, i32 %1239
  %1241 = bitcast i8* %1240 to <4 x i8>*
  %1242 = load <4 x i8>, <4 x i8>* %1241, align 4, !tbaa !110
  %1243 = shufflevector <4 x i8> %1222, <4 x i8> %1226, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1244 = shufflevector <4 x i8> %1230, <4 x i8> %1234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1245 = shufflevector <8 x i8> %1243, <8 x i8> %1244, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1246 = shufflevector <4 x i8> %1238, <4 x i8> %1242, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1247 = shufflevector <16 x i8> %1245, <16 x i8> %1246, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us.1 = zext <24 x i8> %1247 to <24 x i16>
  %1248 = shufflevector <24 x i16> %t1223.us.us.us.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1249 = bitcast <64 x i16> %1248 to <32 x i32>
  %1250 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1249)
  %1251 = bitcast <32 x i32> %1250 to <64 x i16>
  %1252 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1249)
  %1253 = bitcast <32 x i32> %1252 to <64 x i16>
  %1254 = add <64 x i16> %1253, %1251
  %1255 = shufflevector <64 x i16> %1254, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us.1 = zext <12 x i16> %1255 to <12 x i32>
  %1256 = shufflevector <12 x i32> %t1222.us.us.us.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1257 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1256, i32 -4)
  %1258 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1257)
  %1259 = shufflevector <32 x i32> %1258, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1260 = add nsw <6 x i32> %1259, %1216
  %1261 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1257)
  %1262 = shufflevector <32 x i32> %1261, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1263 = add nsw <6 x i32> %1260, %1262
  %1264 = add nuw nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %niter1550.nsub.1 = add i32 %niter1550, -2
  %niter1550.ncmp.1 = icmp eq i32 %niter1550.nsub.1, 0
  br i1 %niter1550.ncmp.1, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124.us.us.us.us.us", %"for sum_input.s1.r19$x15.us.us.us.us.us"
  %.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %1263, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %sum_input314.sroa.0.11.us.us.us.us.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %1263, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %1264, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  br i1 %lcmp.mod1548.not, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa"
  %1265 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr", 2
  %1266 = add i32 %1156, %1265
  %1267 = getelementptr inbounds i8, i8* %13, i32 %1266
  %1268 = bitcast i8* %1267 to <4 x i8>*
  %1269 = load <4 x i8>, <4 x i8>* %1268, align 4, !tbaa !110
  %1270 = add i32 %1158, %1265
  %1271 = getelementptr inbounds i8, i8* %13, i32 %1270
  %1272 = bitcast i8* %1271 to <4 x i8>*
  %1273 = load <4 x i8>, <4 x i8>* %1272, align 4, !tbaa !110
  %1274 = add i32 %1161, %1265
  %1275 = getelementptr inbounds i8, i8* %13, i32 %1274
  %1276 = bitcast i8* %1275 to <4 x i8>*
  %1277 = load <4 x i8>, <4 x i8>* %1276, align 4, !tbaa !110
  %1278 = add i32 %1164, %1265
  %1279 = getelementptr inbounds i8, i8* %13, i32 %1278
  %1280 = bitcast i8* %1279 to <4 x i8>*
  %1281 = load <4 x i8>, <4 x i8>* %1280, align 4, !tbaa !110
  %1282 = add i32 %1167, %1265
  %1283 = getelementptr inbounds i8, i8* %13, i32 %1282
  %1284 = bitcast i8* %1283 to <4 x i8>*
  %1285 = load <4 x i8>, <4 x i8>* %1284, align 4, !tbaa !110
  %1286 = add i32 %1170, %1265
  %1287 = getelementptr inbounds i8, i8* %13, i32 %1286
  %1288 = bitcast i8* %1287 to <4 x i8>*
  %1289 = load <4 x i8>, <4 x i8>* %1288, align 4, !tbaa !110
  %1290 = shufflevector <4 x i8> %1269, <4 x i8> %1273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1291 = shufflevector <4 x i8> %1277, <4 x i8> %1281, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1292 = shufflevector <8 x i8> %1290, <8 x i8> %1291, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1293 = shufflevector <4 x i8> %1285, <4 x i8> %1289, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1294 = shufflevector <16 x i8> %1292, <16 x i8> %1293, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us.epil = zext <24 x i8> %1294 to <24 x i16>
  %1295 = shufflevector <24 x i16> %t1223.us.us.us.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1296 = bitcast <64 x i16> %1295 to <32 x i32>
  %1297 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1296)
  %1298 = bitcast <32 x i32> %1297 to <64 x i16>
  %1299 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1296)
  %1300 = bitcast <32 x i32> %1299 to <64 x i16>
  %1301 = add <64 x i16> %1300, %1298
  %1302 = shufflevector <64 x i16> %1301, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us.epil = zext <12 x i16> %1302 to <12 x i32>
  %1303 = shufflevector <12 x i32> %t1222.us.us.us.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1304 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1303, i32 -4)
  %1305 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1304)
  %1306 = shufflevector <32 x i32> %1305, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1307 = add nsw <6 x i32> %1306, %sum_input314.sroa.0.11.us.us.us.us.us.unr
  %1308 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1304)
  %1309 = shufflevector <32 x i32> %1308, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %1310 = add nsw <6 x i32> %1307, %1309
  br label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil"
  %.lcssa = phi <6 x i32> [ %.lcssa.ph, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa" ], [ %1310, %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil" ]
  %1311 = add nuw nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", 1
  %.not378.us.us.us.us.us = icmp eq i32 %1311, %9
  br i1 %.not378.us.us.us.us.us, label %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"
  %1312 = add nuw nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", 1
  %.not377.us.us.us.us = icmp eq i32 %1312, %11
  br i1 %.not377.us.us.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y12.us.us.us.us"

next_bb5:                                         ; preds = %"consume offset_c"
  br i1 %94, label %then_bb21, label %next_bb22

then_bb21:                                        ; preds = %next_bb5
  %1313 = mul nsw i32 %19, %18
  %1314 = mul nsw i32 %22, %20
  %1315 = mul nsw i32 %17, %16
  %1316 = add i32 %1314, %1313
  %t941 = add i32 %1316, %1315
  %1317 = icmp sgt i32 %21, 0
  br i1 %1317, label %"for output.s0.b.rebased23.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased23.preheader":            ; preds = %then_bb21
  %1318 = mul nsw i32 %17, %stride_x
  %1319 = mul nsw i32 %1318, 7
  %1320 = mul nsw i32 %1318, 6
  %1321 = mul nsw i32 %1318, 5
  %1322 = shl nsw i32 %1318, 2
  %1323 = mul nsw i32 %1318, 3
  %1324 = shl nsw i32 %1318, 1
  %1325 = sub nsw i32 %stride_x, %16
  %1326 = mul nsw i32 %1325, %17
  %1327 = icmp sgt i32 %29, 0
  %.neg781 = mul i32 %30, %28
  %.neg782 = mul i32 %27, %25
  %.neg783 = mul i32 %31, %20
  %reass.add785 = add i32 %.neg781, %.neg782
  %reass.add786 = add i32 %reass.add785, %.neg783
  %1328 = add nuw nsw i32 %26, 7
  %1329 = ashr i32 %1328, 3
  %b111 = add nsw i32 %26, -8
  %1330 = icmp sgt i32 %11, 0
  %1331 = icmp sgt i32 %9, 0
  %1332 = icmp sgt i32 %7, 0
  %1333 = ashr i32 %4, 6
  %1334 = icmp sgt i32 %4, 63
  %1335 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %1336 = shufflevector <32 x i32> %1335, <32 x i32> undef, <32 x i32> zeroinitializer
  %1337 = sext <32 x i32> %1336 to <32 x i64>
  %1338 = icmp sgt i32 %a497, 0
  %1339 = select i1 %1338, i32 %a497, i32 0
  %1340 = shl nuw i32 1, %1339
  %1341 = ashr i32 %1340, 1
  %1342 = zext i8 %output_zero to i16
  %1343 = insertelement <64 x i16> undef, i16 %1342, i32 0
  %1344 = shufflevector <64 x i16> %1343, <64 x i16> undef, <64 x i32> zeroinitializer
  %1345 = bitcast <64 x i16> %1344 to <32 x i32>
  %1346 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %1347 = shufflevector <32 x i8> %1346, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1348 = bitcast <128 x i8> %1347 to <32 x i32>
  %1349 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %1350 = shufflevector <32 x i8> %1349, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1351 = bitcast <128 x i8> %1350 to <32 x i32>
  br i1 %1327, label %"for output.s0.b.rebased23.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased23.us.preheader":         ; preds = %"for output.s0.b.rebased23.preheader"
  %1352 = add i32 %1315, %1313
  %1353 = add i32 %9, -1
  %brmerge1309.demorgan = and i1 %1331, %1332
  %xtraiter1537 = and i32 %7, 1
  %1354 = icmp eq i32 %7, 1
  %unroll_iter1539 = and i32 %7, -2
  %lcmp.mod1538.not = icmp eq i32 %xtraiter1537, 0
  %xtraiter1541 = and i32 %9, 3
  %1355 = icmp ult i32 %1353, 3
  %unroll_iter1545 = and i32 %9, -4
  %lcmp.mod1543.not = icmp eq i32 %xtraiter1541, 0
  br label %"for output.s0.b.rebased23.us"

"for output.s0.b.rebased23.us":                   ; preds = %"for output.s0.b.rebased23.us.preheader", %"end for output.s0.y.rebased27.loopexit.us"
  %convolved313.sroa.0.7.us = phi <32 x i32> [ %.us-phi1097.us, %"end for output.s0.y.rebased27.loopexit.us" ], [ undef, %"for output.s0.b.rebased23.us.preheader" ]
  %output.s0.b.rebased25.us = phi i32 [ %1362, %"end for output.s0.y.rebased27.loopexit.us" ], [ 0, %"for output.s0.b.rebased23.us.preheader" ]
  %1356 = add nsw i32 %output.s0.b.rebased25.us, %20
  %1357 = mul nsw i32 %1356, %31
  %1358 = sub i32 %1357, %reass.add786
  %1359 = mul nsw i32 %1356, %22
  %1360 = sub i32 %1359, %1316
  %1361 = sub nsw i32 %1359, %t941
  br i1 %100, label %"for output.s0.y.rebased26.us.us", label %"end for output.s0.y.rebased27.loopexit.us", !prof !96

"end for output.s0.y.rebased27.loopexit.us":      ; preds = %"end for output.s0.x.xo30.loopexit.us.us", %"for output.s0.b.rebased23.us"
  %.us-phi1097.us = phi <32 x i32> [ %convolved313.sroa.0.7.us, %"for output.s0.b.rebased23.us" ], [ %convolved313.sroa.0.20.us.us, %"end for output.s0.x.xo30.loopexit.us.us" ]
  %1362 = add nuw nsw i32 %output.s0.b.rebased25.us, 1
  %.not358.us = icmp eq i32 %1362, %21
  br i1 %.not358.us, label %after_bb3, label %"for output.s0.b.rebased23.us"

"for output.s0.y.rebased26.us.us":                ; preds = %"for output.s0.b.rebased23.us", %"end for output.s0.x.xo30.loopexit.us.us"
  %convolved313.sroa.0.8.us.us = phi <32 x i32> [ %convolved313.sroa.0.20.us.us, %"end for output.s0.x.xo30.loopexit.us.us" ], [ %convolved313.sroa.0.7.us, %"for output.s0.b.rebased23.us" ]
  %output.s0.y.rebased28.us.us = phi i32 [ %1991, %"end for output.s0.x.xo30.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased23.us" ]
  %1363 = add nsw i32 %output.s0.y.rebased28.us.us, %28
  %1364 = mul nsw i32 %1363, %30
  %t970.us.us = add i32 %1358, %1364
  %1365 = mul nsw i32 %1363, %stride_y
  br label %"for output.s0.x.xo29.us.us"

"for output.s0.x.xo29.us.us":                     ; preds = %"end for output.s0.c.co58.us.us", %"for output.s0.y.rebased26.us.us"
  %convolved313.sroa.0.10.us.us = phi <32 x i32> [ %convolved313.sroa.0.20.us.us, %"end for output.s0.c.co58.us.us" ], [ %convolved313.sroa.0.8.us.us, %"for output.s0.y.rebased26.us.us" ]
  %output.s0.x.xo31.us.us = phi i32 [ %1945, %"end for output.s0.c.co58.us.us" ], [ 0, %"for output.s0.y.rebased26.us.us" ]
  %a109.us.us = shl nsw i32 %output.s0.x.xo31.us.us, 3
  %1366 = icmp slt i32 %a109.us.us, %b111
  %output.s0.x.x.base.s32.us.us = select i1 %1366, i32 %a109.us.us, i32 %b111
  br i1 %t843.not, label %"consume sum_input56.us.us", label %then_bb36.us.us

then_bb36.us.us:                                  ; preds = %"for output.s0.x.xo29.us.us"
  %convolved313.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %convolved313.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb39.us.us, label %next_bb40.us.us

next_bb40.us.us:                                  ; preds = %then_bb36.us.us
  br i1 %1330, label %"for sum_input.s1.r19$y47.preheader.us.us", label %"consume sum_input56.us.us", !prof !96

then_bb39.us.us:                                  ; preds = %then_bb36.us.us
  br i1 %1330, label %"for sum_input.s1.r19$y41.preheader.us.us", label %"consume sum_input56.us.us", !prof !96

"for sum_input.s1.r19$y41.us.us":                 ; preds = %"for sum_input.s1.r19$y41.preheader.us.us", %"end for sum_input.s1.r19$x45.us.us"
  %convolved313.sroa.0.12.us.us = phi <32 x i32> [ %convolved313.sroa.0.14.us.us, %"end for sum_input.s1.r19$x45.us.us" ], [ %convolved313.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y41.preheader.us.us" ]
  %"sum_input.s1.r19$y43.us.us" = phi i32 [ %1467, %"end for sum_input.s1.r19$x45.us.us" ], [ 0, %"for sum_input.s1.r19$y41.preheader.us.us" ]
  br i1 %1331, label %"for sum_input.s1.r19$x44.preheader.us.us", label %"end for sum_input.s1.r19$x45.us.us", !prof !96

"for sum_input.s1.r19$x44.us.us":                 ; preds = %"for sum_input.s1.r19$x44.preheader.us.us", %"for sum_input.s1.r19$x44.us.us"
  %convolved313.sroa.0.13.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend562.us.us.3, %"for sum_input.s1.r19$x44.us.us" ], [ %convolved313.sroa.0.12.us.us, %"for sum_input.s1.r19$x44.preheader.us.us" ]
  %"sum_input.s1.r19$x46.us.us" = phi i32 [ %1446, %"for sum_input.s1.r19$x44.us.us" ], [ 0, %"for sum_input.s1.r19$x44.preheader.us.us" ]
  %niter1546 = phi i32 [ %niter1546.nsub.3, %"for sum_input.s1.r19$x44.us.us" ], [ %unroll_iter1545, %"for sum_input.s1.r19$x44.preheader.us.us" ]
  %1367 = mul nsw i32 %"sum_input.s1.r19$x46.us.us", %dilation_x
  %reass.add791.us.us = add i32 %1988, %1367
  %reass.mul792.us.us = shl i32 %reass.add791.us.us, 2
  %1368 = add i32 %t973.us.us, %reass.mul792.us.us
  %1369 = getelementptr inbounds i8, i8* %13, i32 %1368
  %1370 = bitcast i8* %1369 to <32 x i8>*
  %1371 = load <32 x i8>, <32 x i8>* %1370, align 4, !tbaa !110
  %t1225.us.us = zext <32 x i8> %1371 to <32 x i16>
  %1372 = shufflevector <32 x i16> %t1225.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1373 = bitcast <64 x i16> %1372 to <32 x i32>
  %1374 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1373)
  %1375 = bitcast <32 x i32> %1374 to <64 x i16>
  %1376 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1373)
  %1377 = bitcast <32 x i32> %1376 to <64 x i16>
  %1378 = add <64 x i16> %1377, %1375
  %1379 = shufflevector <64 x i16> %1378, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us = zext <16 x i16> %1379 to <16 x i32>
  %1380 = shufflevector <16 x i32> %t1224.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1381 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1380, i32 -4)
  %1382 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1381)
  %1383 = add nsw <32 x i32> %1382, %convolved313.sroa.0.13.us.us
  %1384 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1381)
  %1385 = add nsw <32 x i32> %1383, %1384
  %convolved313.sroa.0.0.vecblend562.us.us = shufflevector <32 x i32> %1385, <32 x i32> %convolved313.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1386 = or i32 %"sum_input.s1.r19$x46.us.us", 1
  %1387 = mul nsw i32 %1386, %dilation_x
  %reass.add791.us.us.1 = add i32 %1988, %1387
  %reass.mul792.us.us.1 = shl i32 %reass.add791.us.us.1, 2
  %1388 = add i32 %t973.us.us, %reass.mul792.us.us.1
  %1389 = getelementptr inbounds i8, i8* %13, i32 %1388
  %1390 = bitcast i8* %1389 to <32 x i8>*
  %1391 = load <32 x i8>, <32 x i8>* %1390, align 4, !tbaa !110
  %t1225.us.us.1 = zext <32 x i8> %1391 to <32 x i16>
  %1392 = shufflevector <32 x i16> %t1225.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1393 = bitcast <64 x i16> %1392 to <32 x i32>
  %1394 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1393)
  %1395 = bitcast <32 x i32> %1394 to <64 x i16>
  %1396 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1393)
  %1397 = bitcast <32 x i32> %1396 to <64 x i16>
  %1398 = add <64 x i16> %1397, %1395
  %1399 = shufflevector <64 x i16> %1398, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.1 = zext <16 x i16> %1399 to <16 x i32>
  %1400 = shufflevector <16 x i32> %t1224.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1401 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1400, i32 -4)
  %1402 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1401)
  %1403 = add nsw <32 x i32> %1402, %convolved313.sroa.0.0.vecblend562.us.us
  %1404 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1401)
  %1405 = add nsw <32 x i32> %1403, %1404
  %convolved313.sroa.0.0.vecblend562.us.us.1 = shufflevector <32 x i32> %1405, <32 x i32> %convolved313.sroa.0.0.vecblend562.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1406 = or i32 %"sum_input.s1.r19$x46.us.us", 2
  %1407 = mul nsw i32 %1406, %dilation_x
  %reass.add791.us.us.2 = add i32 %1988, %1407
  %reass.mul792.us.us.2 = shl i32 %reass.add791.us.us.2, 2
  %1408 = add i32 %t973.us.us, %reass.mul792.us.us.2
  %1409 = getelementptr inbounds i8, i8* %13, i32 %1408
  %1410 = bitcast i8* %1409 to <32 x i8>*
  %1411 = load <32 x i8>, <32 x i8>* %1410, align 4, !tbaa !110
  %t1225.us.us.2 = zext <32 x i8> %1411 to <32 x i16>
  %1412 = shufflevector <32 x i16> %t1225.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1413 = bitcast <64 x i16> %1412 to <32 x i32>
  %1414 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1413)
  %1415 = bitcast <32 x i32> %1414 to <64 x i16>
  %1416 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1413)
  %1417 = bitcast <32 x i32> %1416 to <64 x i16>
  %1418 = add <64 x i16> %1417, %1415
  %1419 = shufflevector <64 x i16> %1418, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.2 = zext <16 x i16> %1419 to <16 x i32>
  %1420 = shufflevector <16 x i32> %t1224.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1421 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1420, i32 -4)
  %1422 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1421)
  %1423 = add nsw <32 x i32> %1422, %convolved313.sroa.0.0.vecblend562.us.us.1
  %1424 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1421)
  %1425 = add nsw <32 x i32> %1423, %1424
  %convolved313.sroa.0.0.vecblend562.us.us.2 = shufflevector <32 x i32> %1425, <32 x i32> %convolved313.sroa.0.0.vecblend562.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1426 = or i32 %"sum_input.s1.r19$x46.us.us", 3
  %1427 = mul nsw i32 %1426, %dilation_x
  %reass.add791.us.us.3 = add i32 %1988, %1427
  %reass.mul792.us.us.3 = shl i32 %reass.add791.us.us.3, 2
  %1428 = add i32 %t973.us.us, %reass.mul792.us.us.3
  %1429 = getelementptr inbounds i8, i8* %13, i32 %1428
  %1430 = bitcast i8* %1429 to <32 x i8>*
  %1431 = load <32 x i8>, <32 x i8>* %1430, align 4, !tbaa !110
  %t1225.us.us.3 = zext <32 x i8> %1431 to <32 x i16>
  %1432 = shufflevector <32 x i16> %t1225.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1433 = bitcast <64 x i16> %1432 to <32 x i32>
  %1434 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1433)
  %1435 = bitcast <32 x i32> %1434 to <64 x i16>
  %1436 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1433)
  %1437 = bitcast <32 x i32> %1436 to <64 x i16>
  %1438 = add <64 x i16> %1437, %1435
  %1439 = shufflevector <64 x i16> %1438, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.3 = zext <16 x i16> %1439 to <16 x i32>
  %1440 = shufflevector <16 x i32> %t1224.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1441 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1440, i32 -4)
  %1442 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1441)
  %1443 = add nsw <32 x i32> %1442, %convolved313.sroa.0.0.vecblend562.us.us.2
  %1444 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1441)
  %1445 = add nsw <32 x i32> %1443, %1444
  %convolved313.sroa.0.0.vecblend562.us.us.3 = shufflevector <32 x i32> %1445, <32 x i32> %convolved313.sroa.0.0.vecblend562.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1446 = add nuw nsw i32 %"sum_input.s1.r19$x46.us.us", 4
  %niter1546.nsub.3 = add i32 %niter1546, -4
  %niter1546.ncmp.3 = icmp eq i32 %niter1546.nsub.3, 0
  br i1 %niter1546.ncmp.3, label %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x44.us.us"

"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x44.us.us", %"for sum_input.s1.r19$x44.preheader.us.us"
  %convolved313.sroa.0.0.vecblend562.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x44.preheader.us.us" ], [ %convolved313.sroa.0.0.vecblend562.us.us.3, %"for sum_input.s1.r19$x44.us.us" ]
  %convolved313.sroa.0.13.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.12.us.us, %"for sum_input.s1.r19$x44.preheader.us.us" ], [ %convolved313.sroa.0.0.vecblend562.us.us.3, %"for sum_input.s1.r19$x44.us.us" ]
  %"sum_input.s1.r19$x46.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x44.preheader.us.us" ], [ %1446, %"for sum_input.s1.r19$x44.us.us" ]
  br i1 %lcmp.mod1543.not, label %"end for sum_input.s1.r19$x45.us.us", label %"for sum_input.s1.r19$x44.us.us.epil"

"for sum_input.s1.r19$x44.us.us.epil":            ; preds = %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x44.us.us.epil"
  %convolved313.sroa.0.13.us.us.epil = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend562.us.us.epil, %"for sum_input.s1.r19$x44.us.us.epil" ], [ %convolved313.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x46.us.us.epil" = phi i32 [ %1466, %"for sum_input.s1.r19$x44.us.us.epil" ], [ %"sum_input.s1.r19$x46.us.us.unr", %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ]
  %epil.iter1542 = phi i32 [ %epil.iter1542.sub, %"for sum_input.s1.r19$x44.us.us.epil" ], [ %xtraiter1541, %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ]
  %1447 = mul nsw i32 %"sum_input.s1.r19$x46.us.us.epil", %dilation_x
  %reass.add791.us.us.epil = add i32 %1988, %1447
  %reass.mul792.us.us.epil = shl i32 %reass.add791.us.us.epil, 2
  %1448 = add i32 %t973.us.us, %reass.mul792.us.us.epil
  %1449 = getelementptr inbounds i8, i8* %13, i32 %1448
  %1450 = bitcast i8* %1449 to <32 x i8>*
  %1451 = load <32 x i8>, <32 x i8>* %1450, align 4, !tbaa !110
  %t1225.us.us.epil = zext <32 x i8> %1451 to <32 x i16>
  %1452 = shufflevector <32 x i16> %t1225.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1453 = bitcast <64 x i16> %1452 to <32 x i32>
  %1454 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1453)
  %1455 = bitcast <32 x i32> %1454 to <64 x i16>
  %1456 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1453)
  %1457 = bitcast <32 x i32> %1456 to <64 x i16>
  %1458 = add <64 x i16> %1457, %1455
  %1459 = shufflevector <64 x i16> %1458, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.epil = zext <16 x i16> %1459 to <16 x i32>
  %1460 = shufflevector <16 x i32> %t1224.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1461 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1460, i32 -4)
  %1462 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1461)
  %1463 = add nsw <32 x i32> %1462, %convolved313.sroa.0.13.us.us.epil
  %1464 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1461)
  %1465 = add nsw <32 x i32> %1463, %1464
  %convolved313.sroa.0.0.vecblend562.us.us.epil = shufflevector <32 x i32> %1465, <32 x i32> %convolved313.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1466 = add nuw nsw i32 %"sum_input.s1.r19$x46.us.us.epil", 1
  %epil.iter1542.sub = add i32 %epil.iter1542, -1
  %epil.iter1542.cmp.not = icmp eq i32 %epil.iter1542.sub, 0
  br i1 %epil.iter1542.cmp.not, label %"end for sum_input.s1.r19$x45.us.us", label %"for sum_input.s1.r19$x44.us.us.epil", !llvm.loop !115

"end for sum_input.s1.r19$x45.us.us":             ; preds = %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x44.us.us.epil", %"for sum_input.s1.r19$y41.us.us"
  %convolved313.sroa.0.14.us.us = phi <32 x i32> [ %convolved313.sroa.0.12.us.us, %"for sum_input.s1.r19$y41.us.us" ], [ %convolved313.sroa.0.0.vecblend562.us.us.lcssa.ph, %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ], [ %convolved313.sroa.0.0.vecblend562.us.us.epil, %"for sum_input.s1.r19$x44.us.us.epil" ]
  %1467 = add nuw nsw i32 %"sum_input.s1.r19$y43.us.us", 1
  %.not368.us.us = icmp eq i32 %1467, %11
  br i1 %.not368.us.us, label %"consume sum_input56.us.us", label %"for sum_input.s1.r19$y41.us.us"

"consume sum_input56.us.us":                      ; preds = %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x45.us.us", %"for sum_input.s1.r19$y47.preheader.us.us", %then_bb39.us.us, %next_bb40.us.us, %"for output.s0.x.xo29.us.us"
  %convolved313.sroa.0.20.us.us = phi <32 x i32> [ %convolved313.sroa.0.10.us.us, %"for output.s0.x.xo29.us.us" ], [ %convolved313.sroa.0.0.vecblend.us.us, %then_bb39.us.us ], [ %convolved313.sroa.0.0.vecblend.us.us, %next_bb40.us.us ], [ %convolved313.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y47.preheader.us.us" ], [ %convolved313.sroa.0.14.us.us, %"end for sum_input.s1.r19$x45.us.us" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us" ]
  br i1 %1334, label %"for output.s0.c.co57.preheader.us.us", label %"end for output.s0.c.co58.us.us", !prof !96

"for output.s0.c.co57.us.us":                     ; preds = %"for output.s0.c.co57.preheader.us.us", %"consume convolved73.us.us"
  %output.s0.c.co59.us.us = phi i32 [ %1944, %"consume convolved73.us.us" ], [ 0, %"for output.s0.c.co57.preheader.us.us" ]
  %1468 = shl nsw i32 %output.s0.c.co59.us.us, 6
  %1469 = getelementptr inbounds i32, i32* %offset_c, i32 %1468
  %1470 = bitcast i32* %1469 to <32 x i32>*
  %1471 = load <32 x i32>, <32 x i32>* %1470, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb62.us.us, label %next_bb63.us.us

next_bb63.us.us:                                  ; preds = %"for output.s0.c.co57.us.us"
  %1472 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1953) #11
  %1473 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1472) #11
  %1474 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1954) #11
  %1475 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1474) #11
  %1476 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1955) #11
  %1477 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1476) #11
  %1478 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1956) #11
  %1479 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1478) #11
  %1480 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1957) #11
  %1481 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1480) #11
  %1482 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1958) #11
  %1483 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1482) #11
  %1484 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1959) #11
  %1485 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1484) #11
  %1486 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1960) #11
  %1487 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1471, <32 x i32> %1486) #11
  %1488 = getelementptr inbounds i32, i32* %1469, i32 32
  %1489 = bitcast i32* %1488 to <32 x i32>*
  %1490 = load <32 x i32>, <32 x i32>* %1489, align 128, !tbaa !104
  %1491 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1472) #11
  %1492 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1474) #11
  %1493 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1476) #11
  %1494 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1478) #11
  %1495 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1480) #11
  %1496 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1482) #11
  %1497 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1484) #11
  %1498 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %1490, <32 x i32> %1486) #11
  br label %after_bb61.us.us

then_bb62.us.us:                                  ; preds = %"for output.s0.c.co57.us.us"
  %1499 = getelementptr inbounds i32, i32* %1469, i32 32
  %1500 = bitcast i32* %1499 to <32 x i32>*
  %1501 = load <32 x i32>, <32 x i32>* %1500, align 128, !tbaa !104
  br label %after_bb61.us.us

after_bb61.us.us:                                 ; preds = %then_bb62.us.us, %next_bb63.us.us
  %sum_input187312.sroa.155.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1498, %next_bb63.us.us ]
  %sum_input187312.sroa.146.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1487, %next_bb63.us.us ]
  %sum_input187312.sroa.137.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1497, %next_bb63.us.us ]
  %sum_input187312.sroa.128.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1485, %next_bb63.us.us ]
  %sum_input187312.sroa.119.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1496, %next_bb63.us.us ]
  %sum_input187312.sroa.110.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1483, %next_bb63.us.us ]
  %sum_input187312.sroa.101.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1495, %next_bb63.us.us ]
  %sum_input187312.sroa.92.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1481, %next_bb63.us.us ]
  %sum_input187312.sroa.83.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1494, %next_bb63.us.us ]
  %sum_input187312.sroa.74.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1479, %next_bb63.us.us ]
  %sum_input187312.sroa.65.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1493, %next_bb63.us.us ]
  %sum_input187312.sroa.56.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1477, %next_bb63.us.us ]
  %sum_input187312.sroa.47.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1492, %next_bb63.us.us ]
  %sum_input187312.sroa.38.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1475, %next_bb63.us.us ]
  %sum_input187312.sroa.29.0.us.us = phi <32 x i32> [ %1501, %then_bb62.us.us ], [ %1491, %next_bb63.us.us ]
  %sum_input187312.sroa.0.0.us.us = phi <32 x i32> [ %1471, %then_bb62.us.us ], [ %1473, %next_bb63.us.us ]
  br i1 %1330, label %"for convolved.s1.r19$y64.preheader.us.us", label %"consume convolved73.us.us", !prof !96

"consume convolved73.us.us":                      ; preds = %"end for convolved.s1.r19$x68.loopexit.us.us.us", %"for convolved.s1.r19$y64.preheader.us.us", %after_bb61.us.us
  %sum_input187312.sroa.155.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.155.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.155.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1044.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.146.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.146.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.146.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1045.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.137.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.137.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.137.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1046.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.128.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.128.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.128.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1047.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.119.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.119.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.119.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1048.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.110.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.110.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.110.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1049.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.101.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.101.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.101.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1050.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.92.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.92.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.92.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1051.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.83.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.83.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.83.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1052.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.74.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.74.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.74.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1053.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.65.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.65.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.65.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1054.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.56.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.56.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.56.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1055.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.47.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.47.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.47.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1056.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.38.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.38.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.38.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1057.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.29.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.29.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.29.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1058.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.0.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.0.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1059.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %1502 = sext <32 x i32> %sum_input187312.sroa.0.6.us.us to <32 x i64>
  %a112.us.us = mul nsw <32 x i64> %1502, %1337
  %1503 = icmp slt <32 x i64> %a112.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1504 = select <32 x i1> %1503, <32 x i64> %a112.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1505 = add nsw <32 x i64> %1504, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a111.us.us = ashr <32 x i64> %1505, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1506 = icmp slt <32 x i64> %a111.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a110.us.us = select <32 x i1> %1506, <32 x i64> %a111.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1507 = icmp sgt <32 x i64> %a110.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1508 = select <32 x i1> %1507, <32 x i64> %a110.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1509 = trunc <32 x i64> %1508 to <32 x i32>
  %1510 = sext <32 x i32> %sum_input187312.sroa.29.6.us.us to <32 x i64>
  %a116.us.us = mul nsw <32 x i64> %1510, %1337
  %1511 = icmp slt <32 x i64> %a116.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1512 = select <32 x i1> %1511, <32 x i64> %a116.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1513 = add nsw <32 x i64> %1512, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a115.us.us = ashr <32 x i64> %1513, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1514 = icmp slt <32 x i64> %a115.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a114.us.us = select <32 x i1> %1514, <32 x i64> %a115.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1515 = icmp sgt <32 x i64> %a114.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1516 = select <32 x i1> %1515, <32 x i64> %a114.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1517 = trunc <32 x i64> %1516 to <32 x i32>
  %1518 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1509, <32 x i32> %1978) #11
  %1519 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1518, <32 x i32> %1977) #11
  %1520 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1517, <32 x i32> %1978) #11
  %1521 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1520, <32 x i32> %1977) #11
  %1522 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1519, <32 x i32> %1521) #11
  %1523 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1522) #11
  %1524 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1523) #11
  %1525 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1524, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1526 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1522) #11
  %1527 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1526, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1528 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1527, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1529 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1525, <32 x i32> %1528) #11
  %1530 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1529) #11
  %1531 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1530) #11
  %1532 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1531, <32 x i32> zeroinitializer) #11
  %1533 = bitcast <32 x i32> %1532 to <64 x i16>
  %1534 = trunc <64 x i16> %1533 to <64 x i8>
  %1535 = bitcast <64 x i8> %1534 to <8 x i64>
  %1536 = shufflevector <8 x i64> %1535, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1537 = bitcast <4 x i64> %1536 to <32 x i8>
  %1538 = shufflevector <32 x i8> %1537, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1539 = bitcast <128 x i8> %1538 to <32 x i32>
  %1540 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1539, <32 x i32> %1348) #11
  %1541 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1540, <32 x i32> %1351) #11
  %1542 = bitcast <32 x i32> %1541 to <128 x i8>
  %1543 = shufflevector <128 x i8> %1542, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1544 = shl nsw i32 %output.s0.c.co59.us.us, 6
  %1545 = add i32 %1544, %t970.us.us
  %1546 = add i32 %1545, %1979
  %1547 = getelementptr inbounds i8, i8* %23, i32 %1546
  %1548 = bitcast i8* %1547 to <32 x i8>*
  store <32 x i8> %1543, <32 x i8>* %1548, align 1, !tbaa !113
  %1549 = shufflevector <8 x i64> %1535, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1550 = bitcast <4 x i64> %1549 to <32 x i8>
  %1551 = shufflevector <32 x i8> %1550, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1552 = bitcast <128 x i8> %1551 to <32 x i32>
  %1553 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1552, <32 x i32> %1348) #11
  %1554 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1553, <32 x i32> %1351) #11
  %1555 = bitcast <32 x i32> %1554 to <128 x i8>
  %1556 = shufflevector <128 x i8> %1555, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1557 = getelementptr inbounds i8, i8* %1547, i32 32
  %1558 = bitcast i8* %1557 to <32 x i8>*
  store <32 x i8> %1556, <32 x i8>* %1558, align 1, !tbaa !113
  %1559 = sext <32 x i32> %sum_input187312.sroa.38.6.us.us to <32 x i64>
  %a152.us.us = mul nsw <32 x i64> %1559, %1337
  %1560 = icmp slt <32 x i64> %a152.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1561 = select <32 x i1> %1560, <32 x i64> %a152.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1562 = add nsw <32 x i64> %1561, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a151.us.us = ashr <32 x i64> %1562, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1563 = icmp slt <32 x i64> %a151.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a150.us.us = select <32 x i1> %1563, <32 x i64> %a151.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1564 = icmp sgt <32 x i64> %a150.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1565 = select <32 x i1> %1564, <32 x i64> %a150.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1566 = trunc <32 x i64> %1565 to <32 x i32>
  %1567 = sext <32 x i32> %sum_input187312.sroa.47.6.us.us to <32 x i64>
  %a156.us.us = mul nsw <32 x i64> %1567, %1337
  %1568 = icmp slt <32 x i64> %a156.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1569 = select <32 x i1> %1568, <32 x i64> %a156.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1570 = add nsw <32 x i64> %1569, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a155.us.us = ashr <32 x i64> %1570, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1571 = icmp slt <32 x i64> %a155.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a154.us.us = select <32 x i1> %1571, <32 x i64> %a155.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1572 = icmp sgt <32 x i64> %a154.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1573 = select <32 x i1> %1572, <32 x i64> %a154.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1574 = trunc <32 x i64> %1573 to <32 x i32>
  %1575 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1566, <32 x i32> %1978) #11
  %1576 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1575, <32 x i32> %1977) #11
  %1577 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1574, <32 x i32> %1978) #11
  %1578 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1577, <32 x i32> %1977) #11
  %1579 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1576, <32 x i32> %1578) #11
  %1580 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1579) #11
  %1581 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1580) #11
  %1582 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1581, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1583 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1579) #11
  %1584 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1583, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1585 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1584, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1586 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1582, <32 x i32> %1585) #11
  %1587 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1586) #11
  %1588 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1587) #11
  %1589 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1588, <32 x i32> zeroinitializer) #11
  %1590 = bitcast <32 x i32> %1589 to <64 x i16>
  %1591 = trunc <64 x i16> %1590 to <64 x i8>
  %1592 = bitcast <64 x i8> %1591 to <8 x i64>
  %1593 = shufflevector <8 x i64> %1592, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1594 = bitcast <4 x i64> %1593 to <32 x i8>
  %1595 = shufflevector <32 x i8> %1594, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1596 = bitcast <128 x i8> %1595 to <32 x i32>
  %1597 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1596, <32 x i32> %1348) #11
  %1598 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1597, <32 x i32> %1351) #11
  %1599 = bitcast <32 x i32> %1598 to <128 x i8>
  %1600 = shufflevector <128 x i8> %1599, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1601 = add i32 %1545, %1980
  %1602 = getelementptr inbounds i8, i8* %23, i32 %1601
  %1603 = bitcast i8* %1602 to <32 x i8>*
  store <32 x i8> %1600, <32 x i8>* %1603, align 1, !tbaa !113
  %1604 = shufflevector <8 x i64> %1592, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1605 = bitcast <4 x i64> %1604 to <32 x i8>
  %1606 = shufflevector <32 x i8> %1605, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1607 = bitcast <128 x i8> %1606 to <32 x i32>
  %1608 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1607, <32 x i32> %1348) #11
  %1609 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1608, <32 x i32> %1351) #11
  %1610 = bitcast <32 x i32> %1609 to <128 x i8>
  %1611 = shufflevector <128 x i8> %1610, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1612 = getelementptr inbounds i8, i8* %1602, i32 32
  %1613 = bitcast i8* %1612 to <32 x i8>*
  store <32 x i8> %1611, <32 x i8>* %1613, align 1, !tbaa !113
  %1614 = sext <32 x i32> %sum_input187312.sroa.56.6.us.us to <32 x i64>
  %a192.us.us = mul nsw <32 x i64> %1614, %1337
  %1615 = icmp slt <32 x i64> %a192.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1616 = select <32 x i1> %1615, <32 x i64> %a192.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1617 = add nsw <32 x i64> %1616, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a191.us.us = ashr <32 x i64> %1617, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1618 = icmp slt <32 x i64> %a191.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a190.us.us = select <32 x i1> %1618, <32 x i64> %a191.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1619 = icmp sgt <32 x i64> %a190.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1620 = select <32 x i1> %1619, <32 x i64> %a190.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1621 = trunc <32 x i64> %1620 to <32 x i32>
  %1622 = sext <32 x i32> %sum_input187312.sroa.65.6.us.us to <32 x i64>
  %a196.us.us = mul nsw <32 x i64> %1622, %1337
  %1623 = icmp slt <32 x i64> %a196.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1624 = select <32 x i1> %1623, <32 x i64> %a196.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1625 = add nsw <32 x i64> %1624, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a195.us.us = ashr <32 x i64> %1625, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1626 = icmp slt <32 x i64> %a195.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a194.us.us = select <32 x i1> %1626, <32 x i64> %a195.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1627 = icmp sgt <32 x i64> %a194.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1628 = select <32 x i1> %1627, <32 x i64> %a194.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1629 = trunc <32 x i64> %1628 to <32 x i32>
  %1630 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1621, <32 x i32> %1978) #11
  %1631 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1630, <32 x i32> %1977) #11
  %1632 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1629, <32 x i32> %1978) #11
  %1633 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1632, <32 x i32> %1977) #11
  %1634 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1631, <32 x i32> %1633) #11
  %1635 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1634) #11
  %1636 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1635) #11
  %1637 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1636, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1638 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1634) #11
  %1639 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1638, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1640 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1639, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1641 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1637, <32 x i32> %1640) #11
  %1642 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1641) #11
  %1643 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1642) #11
  %1644 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1643, <32 x i32> zeroinitializer) #11
  %1645 = bitcast <32 x i32> %1644 to <64 x i16>
  %1646 = trunc <64 x i16> %1645 to <64 x i8>
  %1647 = bitcast <64 x i8> %1646 to <8 x i64>
  %1648 = shufflevector <8 x i64> %1647, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1649 = bitcast <4 x i64> %1648 to <32 x i8>
  %1650 = shufflevector <32 x i8> %1649, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1651 = bitcast <128 x i8> %1650 to <32 x i32>
  %1652 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1651, <32 x i32> %1348) #11
  %1653 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1652, <32 x i32> %1351) #11
  %1654 = bitcast <32 x i32> %1653 to <128 x i8>
  %1655 = shufflevector <128 x i8> %1654, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1656 = add i32 %1545, %1981
  %1657 = getelementptr inbounds i8, i8* %23, i32 %1656
  %1658 = bitcast i8* %1657 to <32 x i8>*
  store <32 x i8> %1655, <32 x i8>* %1658, align 1, !tbaa !113
  %1659 = shufflevector <8 x i64> %1647, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1660 = bitcast <4 x i64> %1659 to <32 x i8>
  %1661 = shufflevector <32 x i8> %1660, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1662 = bitcast <128 x i8> %1661 to <32 x i32>
  %1663 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1662, <32 x i32> %1348) #11
  %1664 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1663, <32 x i32> %1351) #11
  %1665 = bitcast <32 x i32> %1664 to <128 x i8>
  %1666 = shufflevector <128 x i8> %1665, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1667 = getelementptr inbounds i8, i8* %1657, i32 32
  %1668 = bitcast i8* %1667 to <32 x i8>*
  store <32 x i8> %1666, <32 x i8>* %1668, align 1, !tbaa !113
  %1669 = sext <32 x i32> %sum_input187312.sroa.74.6.us.us to <32 x i64>
  %a232.us.us = mul nsw <32 x i64> %1669, %1337
  %1670 = icmp slt <32 x i64> %a232.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1671 = select <32 x i1> %1670, <32 x i64> %a232.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1672 = add nsw <32 x i64> %1671, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a231.us.us = ashr <32 x i64> %1672, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1673 = icmp slt <32 x i64> %a231.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a230.us.us = select <32 x i1> %1673, <32 x i64> %a231.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1674 = icmp sgt <32 x i64> %a230.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1675 = select <32 x i1> %1674, <32 x i64> %a230.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1676 = trunc <32 x i64> %1675 to <32 x i32>
  %1677 = sext <32 x i32> %sum_input187312.sroa.83.6.us.us to <32 x i64>
  %a236.us.us = mul nsw <32 x i64> %1677, %1337
  %1678 = icmp slt <32 x i64> %a236.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1679 = select <32 x i1> %1678, <32 x i64> %a236.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1680 = add nsw <32 x i64> %1679, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a235.us.us = ashr <32 x i64> %1680, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1681 = icmp slt <32 x i64> %a235.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a234.us.us = select <32 x i1> %1681, <32 x i64> %a235.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1682 = icmp sgt <32 x i64> %a234.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1683 = select <32 x i1> %1682, <32 x i64> %a234.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1684 = trunc <32 x i64> %1683 to <32 x i32>
  %1685 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1676, <32 x i32> %1978) #11
  %1686 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1685, <32 x i32> %1977) #11
  %1687 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1684, <32 x i32> %1978) #11
  %1688 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1687, <32 x i32> %1977) #11
  %1689 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1686, <32 x i32> %1688) #11
  %1690 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1689) #11
  %1691 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1690) #11
  %1692 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1691, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1693 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1689) #11
  %1694 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1693, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1695 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1694, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1696 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1692, <32 x i32> %1695) #11
  %1697 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1696) #11
  %1698 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1697) #11
  %1699 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1698, <32 x i32> zeroinitializer) #11
  %1700 = bitcast <32 x i32> %1699 to <64 x i16>
  %1701 = trunc <64 x i16> %1700 to <64 x i8>
  %1702 = bitcast <64 x i8> %1701 to <8 x i64>
  %1703 = shufflevector <8 x i64> %1702, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1704 = bitcast <4 x i64> %1703 to <32 x i8>
  %1705 = shufflevector <32 x i8> %1704, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1706 = bitcast <128 x i8> %1705 to <32 x i32>
  %1707 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1706, <32 x i32> %1348) #11
  %1708 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1707, <32 x i32> %1351) #11
  %1709 = bitcast <32 x i32> %1708 to <128 x i8>
  %1710 = shufflevector <128 x i8> %1709, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1711 = add i32 %1545, %1982
  %1712 = getelementptr inbounds i8, i8* %23, i32 %1711
  %1713 = bitcast i8* %1712 to <32 x i8>*
  store <32 x i8> %1710, <32 x i8>* %1713, align 1, !tbaa !113
  %1714 = shufflevector <8 x i64> %1702, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1715 = bitcast <4 x i64> %1714 to <32 x i8>
  %1716 = shufflevector <32 x i8> %1715, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1717 = bitcast <128 x i8> %1716 to <32 x i32>
  %1718 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1717, <32 x i32> %1348) #11
  %1719 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1718, <32 x i32> %1351) #11
  %1720 = bitcast <32 x i32> %1719 to <128 x i8>
  %1721 = shufflevector <128 x i8> %1720, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1722 = getelementptr inbounds i8, i8* %1712, i32 32
  %1723 = bitcast i8* %1722 to <32 x i8>*
  store <32 x i8> %1721, <32 x i8>* %1723, align 1, !tbaa !113
  %1724 = sext <32 x i32> %sum_input187312.sroa.92.6.us.us to <32 x i64>
  %a272.us.us = mul nsw <32 x i64> %1724, %1337
  %1725 = icmp slt <32 x i64> %a272.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1726 = select <32 x i1> %1725, <32 x i64> %a272.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1727 = add nsw <32 x i64> %1726, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a271.us.us = ashr <32 x i64> %1727, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1728 = icmp slt <32 x i64> %a271.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a270.us.us = select <32 x i1> %1728, <32 x i64> %a271.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1729 = icmp sgt <32 x i64> %a270.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1730 = select <32 x i1> %1729, <32 x i64> %a270.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1731 = trunc <32 x i64> %1730 to <32 x i32>
  %1732 = sext <32 x i32> %sum_input187312.sroa.101.6.us.us to <32 x i64>
  %a276.us.us = mul nsw <32 x i64> %1732, %1337
  %1733 = icmp slt <32 x i64> %a276.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1734 = select <32 x i1> %1733, <32 x i64> %a276.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1735 = add nsw <32 x i64> %1734, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a275.us.us = ashr <32 x i64> %1735, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1736 = icmp slt <32 x i64> %a275.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a274.us.us = select <32 x i1> %1736, <32 x i64> %a275.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1737 = icmp sgt <32 x i64> %a274.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1738 = select <32 x i1> %1737, <32 x i64> %a274.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1739 = trunc <32 x i64> %1738 to <32 x i32>
  %1740 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1731, <32 x i32> %1978) #11
  %1741 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1740, <32 x i32> %1977) #11
  %1742 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1739, <32 x i32> %1978) #11
  %1743 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1742, <32 x i32> %1977) #11
  %1744 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1741, <32 x i32> %1743) #11
  %1745 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1744) #11
  %1746 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1745) #11
  %1747 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1746, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1748 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1744) #11
  %1749 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1748, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1750 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1749, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1751 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1747, <32 x i32> %1750) #11
  %1752 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1751) #11
  %1753 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1752) #11
  %1754 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1753, <32 x i32> zeroinitializer) #11
  %1755 = bitcast <32 x i32> %1754 to <64 x i16>
  %1756 = trunc <64 x i16> %1755 to <64 x i8>
  %1757 = bitcast <64 x i8> %1756 to <8 x i64>
  %1758 = shufflevector <8 x i64> %1757, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1759 = bitcast <4 x i64> %1758 to <32 x i8>
  %1760 = shufflevector <32 x i8> %1759, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1761 = bitcast <128 x i8> %1760 to <32 x i32>
  %1762 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1761, <32 x i32> %1348) #11
  %1763 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1762, <32 x i32> %1351) #11
  %1764 = bitcast <32 x i32> %1763 to <128 x i8>
  %1765 = shufflevector <128 x i8> %1764, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1766 = add i32 %1545, %1983
  %1767 = getelementptr inbounds i8, i8* %23, i32 %1766
  %1768 = bitcast i8* %1767 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1768, align 1, !tbaa !113
  %1769 = shufflevector <8 x i64> %1757, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1770 = bitcast <4 x i64> %1769 to <32 x i8>
  %1771 = shufflevector <32 x i8> %1770, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1772 = bitcast <128 x i8> %1771 to <32 x i32>
  %1773 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1772, <32 x i32> %1348) #11
  %1774 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1773, <32 x i32> %1351) #11
  %1775 = bitcast <32 x i32> %1774 to <128 x i8>
  %1776 = shufflevector <128 x i8> %1775, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1777 = getelementptr inbounds i8, i8* %1767, i32 32
  %1778 = bitcast i8* %1777 to <32 x i8>*
  store <32 x i8> %1776, <32 x i8>* %1778, align 1, !tbaa !113
  %1779 = sext <32 x i32> %sum_input187312.sroa.110.6.us.us to <32 x i64>
  %a312.us.us = mul nsw <32 x i64> %1779, %1337
  %1780 = icmp slt <32 x i64> %a312.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1781 = select <32 x i1> %1780, <32 x i64> %a312.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1782 = add nsw <32 x i64> %1781, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a311.us.us = ashr <32 x i64> %1782, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1783 = icmp slt <32 x i64> %a311.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a310.us.us = select <32 x i1> %1783, <32 x i64> %a311.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1784 = icmp sgt <32 x i64> %a310.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1785 = select <32 x i1> %1784, <32 x i64> %a310.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1786 = trunc <32 x i64> %1785 to <32 x i32>
  %1787 = sext <32 x i32> %sum_input187312.sroa.119.6.us.us to <32 x i64>
  %a316.us.us = mul nsw <32 x i64> %1787, %1337
  %1788 = icmp slt <32 x i64> %a316.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1789 = select <32 x i1> %1788, <32 x i64> %a316.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1790 = add nsw <32 x i64> %1789, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a315.us.us = ashr <32 x i64> %1790, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1791 = icmp slt <32 x i64> %a315.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a314.us.us = select <32 x i1> %1791, <32 x i64> %a315.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1792 = icmp sgt <32 x i64> %a314.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1793 = select <32 x i1> %1792, <32 x i64> %a314.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1794 = trunc <32 x i64> %1793 to <32 x i32>
  %1795 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1786, <32 x i32> %1978) #11
  %1796 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1795, <32 x i32> %1977) #11
  %1797 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1794, <32 x i32> %1978) #11
  %1798 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1797, <32 x i32> %1977) #11
  %1799 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1796, <32 x i32> %1798) #11
  %1800 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1799) #11
  %1801 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1800) #11
  %1802 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1801, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1803 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1799) #11
  %1804 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1803, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1805 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1804, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1806 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1802, <32 x i32> %1805) #11
  %1807 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1806) #11
  %1808 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1807) #11
  %1809 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1808, <32 x i32> zeroinitializer) #11
  %1810 = bitcast <32 x i32> %1809 to <64 x i16>
  %1811 = trunc <64 x i16> %1810 to <64 x i8>
  %1812 = bitcast <64 x i8> %1811 to <8 x i64>
  %1813 = shufflevector <8 x i64> %1812, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1814 = bitcast <4 x i64> %1813 to <32 x i8>
  %1815 = shufflevector <32 x i8> %1814, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1816 = bitcast <128 x i8> %1815 to <32 x i32>
  %1817 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1816, <32 x i32> %1348) #11
  %1818 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1817, <32 x i32> %1351) #11
  %1819 = bitcast <32 x i32> %1818 to <128 x i8>
  %1820 = shufflevector <128 x i8> %1819, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1821 = add i32 %1545, %1984
  %1822 = getelementptr inbounds i8, i8* %23, i32 %1821
  %1823 = bitcast i8* %1822 to <32 x i8>*
  store <32 x i8> %1820, <32 x i8>* %1823, align 1, !tbaa !113
  %1824 = shufflevector <8 x i64> %1812, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1825 = bitcast <4 x i64> %1824 to <32 x i8>
  %1826 = shufflevector <32 x i8> %1825, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1827 = bitcast <128 x i8> %1826 to <32 x i32>
  %1828 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1827, <32 x i32> %1348) #11
  %1829 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1828, <32 x i32> %1351) #11
  %1830 = bitcast <32 x i32> %1829 to <128 x i8>
  %1831 = shufflevector <128 x i8> %1830, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1832 = getelementptr inbounds i8, i8* %1822, i32 32
  %1833 = bitcast i8* %1832 to <32 x i8>*
  store <32 x i8> %1831, <32 x i8>* %1833, align 1, !tbaa !113
  %1834 = sext <32 x i32> %sum_input187312.sroa.128.6.us.us to <32 x i64>
  %a352.us.us = mul nsw <32 x i64> %1834, %1337
  %1835 = icmp slt <32 x i64> %a352.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1836 = select <32 x i1> %1835, <32 x i64> %a352.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1837 = add nsw <32 x i64> %1836, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a351.us.us = ashr <32 x i64> %1837, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1838 = icmp slt <32 x i64> %a351.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a350.us.us = select <32 x i1> %1838, <32 x i64> %a351.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1839 = icmp sgt <32 x i64> %a350.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1840 = select <32 x i1> %1839, <32 x i64> %a350.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1841 = trunc <32 x i64> %1840 to <32 x i32>
  %1842 = sext <32 x i32> %sum_input187312.sroa.137.6.us.us to <32 x i64>
  %a356.us.us = mul nsw <32 x i64> %1842, %1337
  %1843 = icmp slt <32 x i64> %a356.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1844 = select <32 x i1> %1843, <32 x i64> %a356.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1845 = add nsw <32 x i64> %1844, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a355.us.us = ashr <32 x i64> %1845, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1846 = icmp slt <32 x i64> %a355.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a354.us.us = select <32 x i1> %1846, <32 x i64> %a355.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1847 = icmp sgt <32 x i64> %a354.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1848 = select <32 x i1> %1847, <32 x i64> %a354.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1849 = trunc <32 x i64> %1848 to <32 x i32>
  %1850 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1841, <32 x i32> %1978) #11
  %1851 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1850, <32 x i32> %1977) #11
  %1852 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1849, <32 x i32> %1978) #11
  %1853 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1852, <32 x i32> %1977) #11
  %1854 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1851, <32 x i32> %1853) #11
  %1855 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1854) #11
  %1856 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1855) #11
  %1857 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1856, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1858 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1854) #11
  %1859 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1858, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1860 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1859, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1861 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1857, <32 x i32> %1860) #11
  %1862 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1861) #11
  %1863 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1862) #11
  %1864 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1863, <32 x i32> zeroinitializer) #11
  %1865 = bitcast <32 x i32> %1864 to <64 x i16>
  %1866 = trunc <64 x i16> %1865 to <64 x i8>
  %1867 = bitcast <64 x i8> %1866 to <8 x i64>
  %1868 = shufflevector <8 x i64> %1867, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1869 = bitcast <4 x i64> %1868 to <32 x i8>
  %1870 = shufflevector <32 x i8> %1869, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1871 = bitcast <128 x i8> %1870 to <32 x i32>
  %1872 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1871, <32 x i32> %1348) #11
  %1873 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1872, <32 x i32> %1351) #11
  %1874 = bitcast <32 x i32> %1873 to <128 x i8>
  %1875 = shufflevector <128 x i8> %1874, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1876 = add i32 %1545, %1985
  %1877 = getelementptr inbounds i8, i8* %23, i32 %1876
  %1878 = bitcast i8* %1877 to <32 x i8>*
  store <32 x i8> %1875, <32 x i8>* %1878, align 1, !tbaa !113
  %1879 = shufflevector <8 x i64> %1867, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1880 = bitcast <4 x i64> %1879 to <32 x i8>
  %1881 = shufflevector <32 x i8> %1880, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1882 = bitcast <128 x i8> %1881 to <32 x i32>
  %1883 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1882, <32 x i32> %1348) #11
  %1884 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1883, <32 x i32> %1351) #11
  %1885 = bitcast <32 x i32> %1884 to <128 x i8>
  %1886 = shufflevector <128 x i8> %1885, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1887 = getelementptr inbounds i8, i8* %1877, i32 32
  %1888 = bitcast i8* %1887 to <32 x i8>*
  store <32 x i8> %1886, <32 x i8>* %1888, align 1, !tbaa !113
  %1889 = sext <32 x i32> %sum_input187312.sroa.146.6.us.us to <32 x i64>
  %a392.us.us = mul nsw <32 x i64> %1889, %1337
  %1890 = icmp slt <32 x i64> %a392.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1891 = select <32 x i1> %1890, <32 x i64> %a392.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1892 = add nsw <32 x i64> %1891, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a391.us.us = ashr <32 x i64> %1892, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1893 = icmp slt <32 x i64> %a391.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a390.us.us = select <32 x i1> %1893, <32 x i64> %a391.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1894 = icmp sgt <32 x i64> %a390.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1895 = select <32 x i1> %1894, <32 x i64> %a390.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1896 = trunc <32 x i64> %1895 to <32 x i32>
  %1897 = sext <32 x i32> %sum_input187312.sroa.155.6.us.us to <32 x i64>
  %a396.us.us = mul nsw <32 x i64> %1897, %1337
  %1898 = icmp slt <32 x i64> %a396.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1899 = select <32 x i1> %1898, <32 x i64> %a396.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1900 = add nsw <32 x i64> %1899, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a395.us.us = ashr <32 x i64> %1900, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1901 = icmp slt <32 x i64> %a395.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a394.us.us = select <32 x i1> %1901, <32 x i64> %a395.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1902 = icmp sgt <32 x i64> %a394.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1903 = select <32 x i1> %1902, <32 x i64> %a394.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1904 = trunc <32 x i64> %1903 to <32 x i32>
  %1905 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1896, <32 x i32> %1978) #11
  %1906 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1905, <32 x i32> %1977) #11
  %1907 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %1904, <32 x i32> %1978) #11
  %1908 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1907, <32 x i32> %1977) #11
  %1909 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1906, <32 x i32> %1908) #11
  %1910 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1909) #11
  %1911 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %1910) #11
  %1912 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1911, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1913 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1909) #11
  %1914 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %1913, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %1915 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %1914, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %1916 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %1912, <32 x i32> %1915) #11
  %1917 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %1345, <32 x i32> %1916) #11
  %1918 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %1917) #11
  %1919 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %1918, <32 x i32> zeroinitializer) #11
  %1920 = bitcast <32 x i32> %1919 to <64 x i16>
  %1921 = trunc <64 x i16> %1920 to <64 x i8>
  %1922 = bitcast <64 x i8> %1921 to <8 x i64>
  %1923 = shufflevector <8 x i64> %1922, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1924 = bitcast <4 x i64> %1923 to <32 x i8>
  %1925 = shufflevector <32 x i8> %1924, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1926 = bitcast <128 x i8> %1925 to <32 x i32>
  %1927 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1926, <32 x i32> %1348) #11
  %1928 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1927, <32 x i32> %1351) #11
  %1929 = bitcast <32 x i32> %1928 to <128 x i8>
  %1930 = shufflevector <128 x i8> %1929, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1931 = add i32 %1545, %1986
  %1932 = getelementptr inbounds i8, i8* %23, i32 %1931
  %1933 = bitcast i8* %1932 to <32 x i8>*
  store <32 x i8> %1930, <32 x i8>* %1933, align 1, !tbaa !113
  %1934 = shufflevector <8 x i64> %1922, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1935 = bitcast <4 x i64> %1934 to <32 x i8>
  %1936 = shufflevector <32 x i8> %1935, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1937 = bitcast <128 x i8> %1936 to <32 x i32>
  %1938 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1937, <32 x i32> %1348) #11
  %1939 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1938, <32 x i32> %1351) #11
  %1940 = bitcast <32 x i32> %1939 to <128 x i8>
  %1941 = shufflevector <128 x i8> %1940, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1942 = getelementptr inbounds i8, i8* %1932, i32 32
  %1943 = bitcast i8* %1942 to <32 x i8>*
  store <32 x i8> %1941, <32 x i8>* %1943, align 1, !tbaa !113
  %1944 = add nuw nsw i32 %output.s0.c.co59.us.us, 1
  %.not361.us.us = icmp eq i32 %1944, %1333
  br i1 %.not361.us.us, label %"end for output.s0.c.co58.us.us", label %"for output.s0.c.co57.us.us"

"end for output.s0.c.co58.us.us":                 ; preds = %"consume convolved73.us.us", %"consume sum_input56.us.us"
  %1945 = add nuw nsw i32 %output.s0.x.xo31.us.us, 1
  %.not360.us.us = icmp eq i32 %1945, %1329
  br i1 %.not360.us.us, label %"end for output.s0.x.xo30.loopexit.us.us", label %"for output.s0.x.xo29.us.us"

"for convolved.s1.r19$y64.preheader.us.us":       ; preds = %after_bb61.us.us
  %1946 = shl nuw nsw i32 %output.s0.c.co59.us.us, 1
  %1947 = or i32 %1946, 1
  %1948 = mul nsw i32 %1947, %8
  %1949 = mul nsw i32 %output.s0.c.co59.us.us, %8
  br i1 %1331, label %"for convolved.s1.r19$y64.us.us.us", label %"consume convolved73.us.us", !prof !96

"for sum_input.s1.r19$x44.preheader.us.us":       ; preds = %"for sum_input.s1.r19$y41.us.us"
  %1950 = mul nsw i32 %"sum_input.s1.r19$y43.us.us", %dilation_y
  %1951 = add nsw i32 %1950, %1365
  %1952 = mul nsw i32 %1951, %19
  %t973.us.us = add i32 %1360, %1952
  br i1 %1355, label %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x44.us.us"

"for output.s0.c.co57.preheader.us.us":           ; preds = %"consume sum_input56.us.us"
  %convolved313.sroa.0.0.vec.extract571.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 0
  %1953 = mul nsw i32 %convolved313.sroa.0.0.vec.extract571.us.us, %309
  %convolved313.sroa.0.4.vec.extract573.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 1
  %1954 = mul nsw i32 %convolved313.sroa.0.4.vec.extract573.us.us, %309
  %convolved313.sroa.0.8.vec.extract575.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 2
  %1955 = mul nsw i32 %convolved313.sroa.0.8.vec.extract575.us.us, %309
  %convolved313.sroa.0.12.vec.extract577.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 3
  %1956 = mul nsw i32 %convolved313.sroa.0.12.vec.extract577.us.us, %309
  %convolved313.sroa.0.16.vec.extract579.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 4
  %1957 = mul nsw i32 %convolved313.sroa.0.16.vec.extract579.us.us, %309
  %convolved313.sroa.0.20.vec.extract581.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 5
  %1958 = mul nsw i32 %convolved313.sroa.0.20.vec.extract581.us.us, %309
  %convolved313.sroa.0.24.vec.extract583.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 6
  %1959 = mul nsw i32 %convolved313.sroa.0.24.vec.extract583.us.us, %309
  %convolved313.sroa.0.28.vec.extract585.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 7
  %1960 = mul nsw i32 %convolved313.sroa.0.28.vec.extract585.us.us, %309
  %1961 = add nsw i32 %output.s0.x.x.base.s32.us.us, %25
  %1962 = add nsw i32 %1961, 7
  %1963 = mul nsw i32 %1962, %stride_x
  %1964 = add nsw i32 %1961, 6
  %1965 = mul nsw i32 %1964, %stride_x
  %1966 = add nsw i32 %1961, 5
  %1967 = mul nsw i32 %1966, %stride_x
  %1968 = add nsw i32 %1961, 4
  %1969 = mul nsw i32 %1968, %stride_x
  %1970 = add nsw i32 %1961, 3
  %1971 = mul nsw i32 %1970, %stride_x
  %1972 = add nsw i32 %1961, 2
  %1973 = mul nsw i32 %1972, %stride_x
  %1974 = add nsw i32 %1961, 1
  %1975 = mul nsw i32 %1974, %stride_x
  %1976 = mul nsw i32 %1961, %stride_x
  %1977 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %a497) #11
  %1978 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1341) #11
  %1979 = mul nsw i32 %1961, %27
  %1980 = mul nsw i32 %1974, %27
  %1981 = mul nsw i32 %1972, %27
  %1982 = mul nsw i32 %1970, %27
  %1983 = mul nsw i32 %1968, %27
  %1984 = mul nsw i32 %1966, %27
  %1985 = mul nsw i32 %1964, %27
  %1986 = mul nsw i32 %1962, %27
  br label %"for output.s0.c.co57.us.us"

"for sum_input.s1.r19$y41.preheader.us.us":       ; preds = %then_bb39.us.us
  %1987 = add nsw i32 %output.s0.x.x.base.s32.us.us, %25
  %1988 = sub i32 %1987, %16
  br label %"for sum_input.s1.r19$y41.us.us"

"for sum_input.s1.r19$y47.preheader.us.us":       ; preds = %next_bb40.us.us
  %1989 = add nsw i32 %output.s0.x.x.base.s32.us.us, %25
  %1990 = mul nsw i32 %1989, %stride_x
  br i1 %brmerge1309.demorgan, label %"for sum_input.s1.r19$y47.us.us.us.us", label %"consume sum_input56.us.us", !prof !103

"end for output.s0.x.xo30.loopexit.us.us":        ; preds = %"end for output.s0.c.co58.us.us"
  %1991 = add nuw nsw i32 %output.s0.y.rebased28.us.us, 1
  %.not359.us.us = icmp eq i32 %1991, %29
  br i1 %.not359.us.us, label %"end for output.s0.y.rebased27.loopexit.us", label %"for output.s0.y.rebased26.us.us"

"for sum_input.s1.r19$y47.us.us.us.us":           ; preds = %"for sum_input.s1.r19$y47.preheader.us.us", %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us"
  %convolved313.sroa.0.15.us.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us" ], [ %convolved313.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y47.preheader.us.us" ]
  %"sum_input.s1.r19$y49.us.us.us.us" = phi i32 [ %2182, %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y47.preheader.us.us" ]
  %1992 = mul nsw i32 %"sum_input.s1.r19$y49.us.us.us.us", %dilation_y
  %t975.s.us.us.us.us = add nsw i32 %1992, %1365
  %1993 = mul nsw i32 %t975.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x50.us.us.us.us.us"

"for sum_input.s1.r19$x50.us.us.us.us.us":        ; preds = %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y47.us.us.us.us"
  %convolved313.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us" ], [ %convolved313.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y47.us.us.us.us" ]
  %"sum_input.s1.r19$x52.us.us.us.us.us" = phi i32 [ %2181, %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y47.us.us.us.us" ]
  %1994 = mul nsw i32 %"sum_input.s1.r19$x52.us.us.us.us.us", %dilation_x
  %t976.s.us.us.us.us.us = add nsw i32 %1994, %1990
  %t1226.us.us.us.us.us = mul nsw i32 %t976.s.us.us.us.us.us, %17
  %1995 = add i32 %t1226.us.us.us.us.us, %1993
  %t977.us.us.us.us.us = sub i32 %1995, %t941
  %1996 = add i32 %t977.us.us.us.us.us, %1359
  %t949.us.us.us.us.us = add i32 %1995, %1326
  %1997 = sub i32 %t949.us.us.us.us.us, %1313
  %t978.us.us.us.us.us = sub i32 %1997, %1314
  %1998 = add i32 %t978.us.us.us.us.us, %1359
  %1999 = add i32 %1995, %1324
  %2000 = sub i32 %1999, %1352
  %t979.us.us.us.us.us = sub i32 %2000, %1314
  %2001 = add i32 %t979.us.us.us.us.us, %1359
  %2002 = add i32 %1995, %1323
  %2003 = sub i32 %2002, %1352
  %t980.us.us.us.us.us = sub i32 %2003, %1314
  %2004 = add i32 %t980.us.us.us.us.us, %1359
  %2005 = add i32 %1995, %1322
  %2006 = sub i32 %2005, %1352
  %t981.us.us.us.us.us = sub i32 %2006, %1314
  %2007 = add i32 %t981.us.us.us.us.us, %1359
  %2008 = add i32 %1995, %1321
  %2009 = sub i32 %2008, %1352
  %t982.us.us.us.us.us = sub i32 %2009, %1314
  %2010 = add i32 %t982.us.us.us.us.us, %1359
  %2011 = add i32 %1995, %1320
  %2012 = sub i32 %2011, %1352
  %t983.us.us.us.us.us = sub i32 %2012, %1314
  %2013 = add i32 %t983.us.us.us.us.us, %1359
  %2014 = add i32 %1995, %1319
  %2015 = sub i32 %2014, %1352
  %t984.us.us.us.us.us = sub i32 %2015, %1314
  %2016 = add i32 %t984.us.us.us.us.us, %1359
  br i1 %1354, label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r12453.us.us.us.us.us"

"for sum_input.s1.r19$z.r12453.us.us.us.us.us":   ; preds = %"for sum_input.s1.r19$x50.us.us.us.us.us", %"for sum_input.s1.r19$z.r12453.us.us.us.us.us"
  %convolved313.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ], [ %convolved313.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x50.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r12455.us.us.us.us.us" = phi i32 [ %2126, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x50.us.us.us.us.us" ]
  %niter1540 = phi i32 [ %niter1540.nsub.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ], [ %unroll_iter1539, %"for sum_input.s1.r19$x50.us.us.us.us.us" ]
  %2017 = shl nsw i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us", 2
  %2018 = add i32 %1996, %2017
  %2019 = getelementptr inbounds i8, i8* %13, i32 %2018
  %2020 = bitcast i8* %2019 to <4 x i8>*
  %2021 = load <4 x i8>, <4 x i8>* %2020, align 4, !tbaa !110
  %2022 = add i32 %1998, %2017
  %2023 = getelementptr inbounds i8, i8* %13, i32 %2022
  %2024 = bitcast i8* %2023 to <4 x i8>*
  %2025 = load <4 x i8>, <4 x i8>* %2024, align 4, !tbaa !110
  %2026 = add i32 %2001, %2017
  %2027 = getelementptr inbounds i8, i8* %13, i32 %2026
  %2028 = bitcast i8* %2027 to <4 x i8>*
  %2029 = load <4 x i8>, <4 x i8>* %2028, align 4, !tbaa !110
  %2030 = add i32 %2004, %2017
  %2031 = getelementptr inbounds i8, i8* %13, i32 %2030
  %2032 = bitcast i8* %2031 to <4 x i8>*
  %2033 = load <4 x i8>, <4 x i8>* %2032, align 4, !tbaa !110
  %2034 = add i32 %2007, %2017
  %2035 = getelementptr inbounds i8, i8* %13, i32 %2034
  %2036 = bitcast i8* %2035 to <4 x i8>*
  %2037 = load <4 x i8>, <4 x i8>* %2036, align 4, !tbaa !110
  %2038 = add i32 %2010, %2017
  %2039 = getelementptr inbounds i8, i8* %13, i32 %2038
  %2040 = bitcast i8* %2039 to <4 x i8>*
  %2041 = load <4 x i8>, <4 x i8>* %2040, align 4, !tbaa !110
  %2042 = add i32 %2013, %2017
  %2043 = getelementptr inbounds i8, i8* %13, i32 %2042
  %2044 = bitcast i8* %2043 to <4 x i8>*
  %2045 = load <4 x i8>, <4 x i8>* %2044, align 4, !tbaa !110
  %2046 = add i32 %2016, %2017
  %2047 = getelementptr inbounds i8, i8* %13, i32 %2046
  %2048 = bitcast i8* %2047 to <4 x i8>*
  %2049 = load <4 x i8>, <4 x i8>* %2048, align 4, !tbaa !110
  %2050 = shufflevector <4 x i8> %2021, <4 x i8> %2025, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2051 = shufflevector <4 x i8> %2029, <4 x i8> %2033, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2052 = shufflevector <4 x i8> %2037, <4 x i8> %2041, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2053 = shufflevector <4 x i8> %2045, <4 x i8> %2049, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2054 = shufflevector <8 x i8> %2050, <8 x i8> %2051, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2055 = shufflevector <8 x i8> %2052, <8 x i8> %2053, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2056 = shufflevector <16 x i8> %2054, <16 x i8> %2055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us = zext <32 x i8> %2056 to <32 x i16>
  %2057 = shufflevector <32 x i16> %t1228.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2058 = bitcast <64 x i16> %2057 to <32 x i32>
  %2059 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2058)
  %2060 = bitcast <32 x i32> %2059 to <64 x i16>
  %2061 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2058)
  %2062 = bitcast <32 x i32> %2061 to <64 x i16>
  %2063 = add <64 x i16> %2062, %2060
  %2064 = shufflevector <64 x i16> %2063, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us = zext <16 x i16> %2064 to <16 x i32>
  %2065 = shufflevector <16 x i32> %t1227.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2066 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2065, i32 -4)
  %2067 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2066)
  %2068 = add nsw <32 x i32> %2067, %convolved313.sroa.0.18.us.us.us.us.us
  %2069 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2066)
  %2070 = add nsw <32 x i32> %2068, %2069
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us = shufflevector <32 x i32> %2070, <32 x i32> %convolved313.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2071 = shl i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us", 2
  %2072 = or i32 %2071, 4
  %2073 = add i32 %1996, %2072
  %2074 = getelementptr inbounds i8, i8* %13, i32 %2073
  %2075 = bitcast i8* %2074 to <4 x i8>*
  %2076 = load <4 x i8>, <4 x i8>* %2075, align 4, !tbaa !110
  %2077 = add i32 %1998, %2072
  %2078 = getelementptr inbounds i8, i8* %13, i32 %2077
  %2079 = bitcast i8* %2078 to <4 x i8>*
  %2080 = load <4 x i8>, <4 x i8>* %2079, align 4, !tbaa !110
  %2081 = add i32 %2001, %2072
  %2082 = getelementptr inbounds i8, i8* %13, i32 %2081
  %2083 = bitcast i8* %2082 to <4 x i8>*
  %2084 = load <4 x i8>, <4 x i8>* %2083, align 4, !tbaa !110
  %2085 = add i32 %2004, %2072
  %2086 = getelementptr inbounds i8, i8* %13, i32 %2085
  %2087 = bitcast i8* %2086 to <4 x i8>*
  %2088 = load <4 x i8>, <4 x i8>* %2087, align 4, !tbaa !110
  %2089 = add i32 %2007, %2072
  %2090 = getelementptr inbounds i8, i8* %13, i32 %2089
  %2091 = bitcast i8* %2090 to <4 x i8>*
  %2092 = load <4 x i8>, <4 x i8>* %2091, align 4, !tbaa !110
  %2093 = add i32 %2010, %2072
  %2094 = getelementptr inbounds i8, i8* %13, i32 %2093
  %2095 = bitcast i8* %2094 to <4 x i8>*
  %2096 = load <4 x i8>, <4 x i8>* %2095, align 4, !tbaa !110
  %2097 = add i32 %2013, %2072
  %2098 = getelementptr inbounds i8, i8* %13, i32 %2097
  %2099 = bitcast i8* %2098 to <4 x i8>*
  %2100 = load <4 x i8>, <4 x i8>* %2099, align 4, !tbaa !110
  %2101 = add i32 %2016, %2072
  %2102 = getelementptr inbounds i8, i8* %13, i32 %2101
  %2103 = bitcast i8* %2102 to <4 x i8>*
  %2104 = load <4 x i8>, <4 x i8>* %2103, align 4, !tbaa !110
  %2105 = shufflevector <4 x i8> %2076, <4 x i8> %2080, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2106 = shufflevector <4 x i8> %2084, <4 x i8> %2088, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2107 = shufflevector <4 x i8> %2092, <4 x i8> %2096, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2108 = shufflevector <4 x i8> %2100, <4 x i8> %2104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2109 = shufflevector <8 x i8> %2105, <8 x i8> %2106, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2110 = shufflevector <8 x i8> %2107, <8 x i8> %2108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2111 = shufflevector <16 x i8> %2109, <16 x i8> %2110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us.1 = zext <32 x i8> %2111 to <32 x i16>
  %2112 = shufflevector <32 x i16> %t1228.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2113 = bitcast <64 x i16> %2112 to <32 x i32>
  %2114 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2113)
  %2115 = bitcast <32 x i32> %2114 to <64 x i16>
  %2116 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2113)
  %2117 = bitcast <32 x i32> %2116 to <64 x i16>
  %2118 = add <64 x i16> %2117, %2115
  %2119 = shufflevector <64 x i16> %2118, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us.1 = zext <16 x i16> %2119 to <16 x i32>
  %2120 = shufflevector <16 x i32> %t1227.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2121 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2120, i32 -4)
  %2122 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2121)
  %2123 = add nsw <32 x i32> %2122, %convolved313.sroa.0.0.vecblend567.us.us.us.us.us
  %2124 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2121)
  %2125 = add nsw <32 x i32> %2123, %2124
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1 = shufflevector <32 x i32> %2125, <32 x i32> %convolved313.sroa.0.0.vecblend567.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2126 = add nuw nsw i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us", 2
  %niter1540.nsub.1 = add i32 %niter1540, -2
  %niter1540.ncmp.1 = icmp eq i32 %niter1540.nsub.1, 0
  br i1 %niter1540.ncmp.1, label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r12453.us.us.us.us.us"

"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r12453.us.us.us.us.us", %"for sum_input.s1.r19$x50.us.us.us.us.us"
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x50.us.us.us.us.us" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ]
  %convolved313.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x50.us.us.us.us.us" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r12455.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x50.us.us.us.us.us" ], [ %2126, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ]
  br i1 %lcmp.mod1538.not, label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa"
  %2127 = shl nsw i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us.unr", 2
  %2128 = add i32 %1996, %2127
  %2129 = getelementptr inbounds i8, i8* %13, i32 %2128
  %2130 = bitcast i8* %2129 to <4 x i8>*
  %2131 = load <4 x i8>, <4 x i8>* %2130, align 4, !tbaa !110
  %2132 = add i32 %1998, %2127
  %2133 = getelementptr inbounds i8, i8* %13, i32 %2132
  %2134 = bitcast i8* %2133 to <4 x i8>*
  %2135 = load <4 x i8>, <4 x i8>* %2134, align 4, !tbaa !110
  %2136 = add i32 %2001, %2127
  %2137 = getelementptr inbounds i8, i8* %13, i32 %2136
  %2138 = bitcast i8* %2137 to <4 x i8>*
  %2139 = load <4 x i8>, <4 x i8>* %2138, align 4, !tbaa !110
  %2140 = add i32 %2004, %2127
  %2141 = getelementptr inbounds i8, i8* %13, i32 %2140
  %2142 = bitcast i8* %2141 to <4 x i8>*
  %2143 = load <4 x i8>, <4 x i8>* %2142, align 4, !tbaa !110
  %2144 = add i32 %2007, %2127
  %2145 = getelementptr inbounds i8, i8* %13, i32 %2144
  %2146 = bitcast i8* %2145 to <4 x i8>*
  %2147 = load <4 x i8>, <4 x i8>* %2146, align 4, !tbaa !110
  %2148 = add i32 %2010, %2127
  %2149 = getelementptr inbounds i8, i8* %13, i32 %2148
  %2150 = bitcast i8* %2149 to <4 x i8>*
  %2151 = load <4 x i8>, <4 x i8>* %2150, align 4, !tbaa !110
  %2152 = add i32 %2013, %2127
  %2153 = getelementptr inbounds i8, i8* %13, i32 %2152
  %2154 = bitcast i8* %2153 to <4 x i8>*
  %2155 = load <4 x i8>, <4 x i8>* %2154, align 4, !tbaa !110
  %2156 = add i32 %2016, %2127
  %2157 = getelementptr inbounds i8, i8* %13, i32 %2156
  %2158 = bitcast i8* %2157 to <4 x i8>*
  %2159 = load <4 x i8>, <4 x i8>* %2158, align 4, !tbaa !110
  %2160 = shufflevector <4 x i8> %2131, <4 x i8> %2135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2161 = shufflevector <4 x i8> %2139, <4 x i8> %2143, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2162 = shufflevector <4 x i8> %2147, <4 x i8> %2151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2163 = shufflevector <4 x i8> %2155, <4 x i8> %2159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2164 = shufflevector <8 x i8> %2160, <8 x i8> %2161, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2165 = shufflevector <8 x i8> %2162, <8 x i8> %2163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2166 = shufflevector <16 x i8> %2164, <16 x i8> %2165, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us.epil = zext <32 x i8> %2166 to <32 x i16>
  %2167 = shufflevector <32 x i16> %t1228.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2168 = bitcast <64 x i16> %2167 to <32 x i32>
  %2169 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2168)
  %2170 = bitcast <32 x i32> %2169 to <64 x i16>
  %2171 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2168)
  %2172 = bitcast <32 x i32> %2171 to <64 x i16>
  %2173 = add <64 x i16> %2172, %2170
  %2174 = shufflevector <64 x i16> %2173, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us.epil = zext <16 x i16> %2174 to <16 x i32>
  %2175 = shufflevector <16 x i32> %t1227.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2176 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2175, i32 -4)
  %2177 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2176)
  %2178 = add nsw <32 x i32> %2177, %convolved313.sroa.0.18.us.us.us.us.us.unr
  %2179 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2176)
  %2180 = add nsw <32 x i32> %2178, %2179
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.epil = shufflevector <32 x i32> %2180, <32 x i32> %convolved313.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil"
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil" ]
  %2181 = add nuw nsw i32 %"sum_input.s1.r19$x52.us.us.us.us.us", 1
  %.not366.us.us.us.us.us = icmp eq i32 %2181, %9
  br i1 %.not366.us.us.us.us.us, label %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x50.us.us.us.us.us"

"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us"
  %2182 = add nuw nsw i32 %"sum_input.s1.r19$y49.us.us.us.us", 1
  %.not365.us.us.us.us = icmp eq i32 %2182, %11
  br i1 %.not365.us.us.us.us, label %"consume sum_input56.us.us", label %"for sum_input.s1.r19$y47.us.us.us.us"

"for convolved.s1.r19$y64.us.us.us":              ; preds = %"for convolved.s1.r19$y64.preheader.us.us", %"end for convolved.s1.r19$x68.loopexit.us.us.us"
  %sum_input187312.sroa.155.1.us.us.us = phi <32 x i32> [ %.us-phi1044.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.155.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.146.1.us.us.us = phi <32 x i32> [ %.us-phi1045.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.146.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.137.1.us.us.us = phi <32 x i32> [ %.us-phi1046.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.137.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.128.1.us.us.us = phi <32 x i32> [ %.us-phi1047.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.128.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.119.1.us.us.us = phi <32 x i32> [ %.us-phi1048.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.119.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.110.1.us.us.us = phi <32 x i32> [ %.us-phi1049.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.110.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.101.1.us.us.us = phi <32 x i32> [ %.us-phi1050.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.101.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.92.1.us.us.us = phi <32 x i32> [ %.us-phi1051.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.92.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.83.1.us.us.us = phi <32 x i32> [ %.us-phi1052.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.83.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.74.1.us.us.us = phi <32 x i32> [ %.us-phi1053.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.74.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.65.1.us.us.us = phi <32 x i32> [ %.us-phi1054.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.65.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.56.1.us.us.us = phi <32 x i32> [ %.us-phi1055.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.56.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.47.1.us.us.us = phi <32 x i32> [ %.us-phi1056.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.47.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.38.1.us.us.us = phi <32 x i32> [ %.us-phi1057.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.38.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.29.1.us.us.us = phi <32 x i32> [ %.us-phi1058.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.29.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.0.1.us.us.us = phi <32 x i32> [ %.us-phi1059.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.0.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %"convolved.s1.r19$y66.us.us.us" = phi i32 [ %2187, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %2183 = mul nsw i32 %"convolved.s1.r19$y66.us.us.us", %dilation_y
  %2184 = add nsw i32 %2183, %1365
  %2185 = mul nsw i32 %2184, %19
  %t1011.us.us.us = add nsw i32 %2185, %1361
  %2186 = mul nsw i32 %"convolved.s1.r19$y66.us.us.us", %12
  br i1 %1332, label %"for convolved.s1.r19$x67.us.us.us.us", label %"end for convolved.s1.r19$x68.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x68.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us", %"for convolved.s1.r19$y64.us.us.us"
  %.us-phi1044.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.155.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2268, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1045.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.146.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2267, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1046.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.137.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2261, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1047.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.128.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2260, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1048.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.119.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2254, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1049.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.110.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2253, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1050.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.101.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2247, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1051.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.92.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2246, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1052.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.83.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2240, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1053.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.74.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2239, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1054.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.65.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2233, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1055.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.56.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2232, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1056.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.47.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2226, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1057.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.38.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2225, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1058.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.29.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2219, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1059.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2213, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %2187 = add nuw nsw i32 %"convolved.s1.r19$y66.us.us.us", 1
  %.not362.us.us.us = icmp eq i32 %2187, %11
  br i1 %.not362.us.us.us, label %"consume convolved73.us.us", label %"for convolved.s1.r19$y64.us.us.us"

"for convolved.s1.r19$x67.us.us.us.us":           ; preds = %"for convolved.s1.r19$y64.us.us.us", %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us"
  %sum_input187312.sroa.155.2.us.us.us.us = phi <32 x i32> [ %2268, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.155.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.146.2.us.us.us.us = phi <32 x i32> [ %2267, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.146.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.137.2.us.us.us.us = phi <32 x i32> [ %2261, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.137.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.128.2.us.us.us.us = phi <32 x i32> [ %2260, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.128.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.119.2.us.us.us.us = phi <32 x i32> [ %2254, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.119.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.110.2.us.us.us.us = phi <32 x i32> [ %2253, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.110.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.101.2.us.us.us.us = phi <32 x i32> [ %2247, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.101.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.92.2.us.us.us.us = phi <32 x i32> [ %2246, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.92.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.83.2.us.us.us.us = phi <32 x i32> [ %2240, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.83.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.74.2.us.us.us.us = phi <32 x i32> [ %2239, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.74.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.65.2.us.us.us.us = phi <32 x i32> [ %2233, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.65.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.56.2.us.us.us.us = phi <32 x i32> [ %2232, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.56.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.47.2.us.us.us.us = phi <32 x i32> [ %2226, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.47.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.38.2.us.us.us.us = phi <32 x i32> [ %2225, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.38.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.29.2.us.us.us.us = phi <32 x i32> [ %2219, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.29.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.0.2.us.us.us.us = phi <32 x i32> [ %2213, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.0.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %"convolved.s1.r19$x69.us.us.us.us" = phi i32 [ %2270, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y64.us.us.us" ]
  %2188 = mul nsw i32 %"convolved.s1.r19$x69.us.us.us.us", %dilation_x
  %t1024.s.us.us.us.us = add nsw i32 %2188, %1963
  %t1023.s.us.us.us.us = add nsw i32 %2188, %1965
  %t1022.s.us.us.us.us = add nsw i32 %2188, %1967
  %t1021.s.us.us.us.us = add nsw i32 %2188, %1969
  %t1020.s.us.us.us.us = add nsw i32 %2188, %1971
  %t1019.s.us.us.us.us = add nsw i32 %2188, %1973
  %t1018.s.us.us.us.us = add nsw i32 %2188, %1975
  %t1015.s.us.us.us.us = add nsw i32 %2188, %1976
  %2189 = mul nsw i32 %"convolved.s1.r19$x69.us.us.us.us", %10
  %t1016.us.us.us.us = add nsw i32 %2189, %2186
  %2190 = mul nsw i32 %t1015.s.us.us.us.us, %17
  %2191 = add i32 %t1016.us.us.us.us, %1948
  %2192 = mul nsw i32 %t1018.s.us.us.us.us, %17
  %2193 = mul nsw i32 %t1019.s.us.us.us.us, %17
  %2194 = mul nsw i32 %t1020.s.us.us.us.us, %17
  %2195 = mul nsw i32 %t1021.s.us.us.us.us, %17
  %2196 = mul nsw i32 %t1022.s.us.us.us.us, %17
  %2197 = mul nsw i32 %t1023.s.us.us.us.us, %17
  %2198 = mul nsw i32 %t1024.s.us.us.us.us, %17
  br label %"for convolved.s1.r19$z.r12470.us.us.us.us"

"for convolved.s1.r19$z.r12470.us.us.us.us":      ; preds = %"for convolved.s1.r19$z.r12470.us.us.us.us", %"for convolved.s1.r19$x67.us.us.us.us"
  %sum_input187312.sroa.155.4.us.us.us.us = phi <32 x i32> [ %2268, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.155.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.146.4.us.us.us.us = phi <32 x i32> [ %2267, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.146.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.137.4.us.us.us.us = phi <32 x i32> [ %2261, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.137.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.128.4.us.us.us.us = phi <32 x i32> [ %2260, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.128.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.119.4.us.us.us.us = phi <32 x i32> [ %2254, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.119.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.110.4.us.us.us.us = phi <32 x i32> [ %2253, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.110.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.101.4.us.us.us.us = phi <32 x i32> [ %2247, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.101.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.92.4.us.us.us.us = phi <32 x i32> [ %2246, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.92.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.83.4.us.us.us.us = phi <32 x i32> [ %2240, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.83.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.74.4.us.us.us.us = phi <32 x i32> [ %2239, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.74.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.65.4.us.us.us.us = phi <32 x i32> [ %2233, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.65.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.56.4.us.us.us.us = phi <32 x i32> [ %2232, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.56.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.47.4.us.us.us.us = phi <32 x i32> [ %2226, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.47.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.38.4.us.us.us.us = phi <32 x i32> [ %2225, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.38.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.29.4.us.us.us.us = phi <32 x i32> [ %2219, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.29.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.0.4.us.us.us.us = phi <32 x i32> [ %2213, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.0.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %"convolved.s1.r19$z.r12472.us.us.us.us" = phi i32 [ %2269, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %2199 = shl nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 2
  %2200 = add i32 %2199, %t1011.us.us.us
  %2201 = add i32 %2200, %2190
  %2202 = getelementptr inbounds i8, i8* %13, i32 %2201
  %2203 = bitcast i8* %2202 to i32*
  %2204 = load i32, i32* %2203, align 4, !tbaa !110
  %2205 = shl nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 6
  %2206 = add nsw i32 %2205, %1949
  %2207 = shl nsw i32 %2206, 1
  %2208 = add nsw i32 %t1016.us.us.us.us, %2207
  %2209 = getelementptr inbounds i8, i8* %5, i32 %2208
  %2210 = bitcast i8* %2209 to <32 x i32>*
  %2211 = load <32 x i32>, <32 x i32>* %2210, align 128, !tbaa !106
  %2212 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2204) #11
  %2213 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.0.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2212) #11
  %2214 = shl nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 7
  %2215 = add i32 %2191, %2214
  %2216 = getelementptr inbounds i8, i8* %5, i32 %2215
  %2217 = bitcast i8* %2216 to <32 x i32>*
  %2218 = load <32 x i32>, <32 x i32>* %2217, align 128, !tbaa !106
  %2219 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.29.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2212) #11
  %2220 = add i32 %2200, %2192
  %2221 = getelementptr inbounds i8, i8* %13, i32 %2220
  %2222 = bitcast i8* %2221 to i32*
  %2223 = load i32, i32* %2222, align 4, !tbaa !110
  %2224 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2223) #11
  %2225 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.38.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2224) #11
  %2226 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.47.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2224) #11
  %2227 = add i32 %2200, %2193
  %2228 = getelementptr inbounds i8, i8* %13, i32 %2227
  %2229 = bitcast i8* %2228 to i32*
  %2230 = load i32, i32* %2229, align 4, !tbaa !110
  %2231 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2230) #11
  %2232 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.56.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2231) #11
  %2233 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.65.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2231) #11
  %2234 = add i32 %2200, %2194
  %2235 = getelementptr inbounds i8, i8* %13, i32 %2234
  %2236 = bitcast i8* %2235 to i32*
  %2237 = load i32, i32* %2236, align 4, !tbaa !110
  %2238 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2237) #11
  %2239 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.74.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2238) #11
  %2240 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.83.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2238) #11
  %2241 = add i32 %2200, %2195
  %2242 = getelementptr inbounds i8, i8* %13, i32 %2241
  %2243 = bitcast i8* %2242 to i32*
  %2244 = load i32, i32* %2243, align 4, !tbaa !110
  %2245 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2244) #11
  %2246 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.92.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2245) #11
  %2247 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.101.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2245) #11
  %2248 = add i32 %2200, %2196
  %2249 = getelementptr inbounds i8, i8* %13, i32 %2248
  %2250 = bitcast i8* %2249 to i32*
  %2251 = load i32, i32* %2250, align 4, !tbaa !110
  %2252 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2251) #11
  %2253 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.110.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2252) #11
  %2254 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.119.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2252) #11
  %2255 = add i32 %2200, %2197
  %2256 = getelementptr inbounds i8, i8* %13, i32 %2255
  %2257 = bitcast i8* %2256 to i32*
  %2258 = load i32, i32* %2257, align 4, !tbaa !110
  %2259 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2258) #11
  %2260 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.128.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2259) #11
  %2261 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.137.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2259) #11
  %2262 = add i32 %2200, %2198
  %2263 = getelementptr inbounds i8, i8* %13, i32 %2262
  %2264 = bitcast i8* %2263 to i32*
  %2265 = load i32, i32* %2264, align 4, !tbaa !110
  %2266 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2265) #11
  %2267 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.146.4.us.us.us.us, <32 x i32> %2211, <32 x i32> %2266) #11
  %2268 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %sum_input187312.sroa.155.4.us.us.us.us, <32 x i32> %2218, <32 x i32> %2266) #11
  %2269 = add nuw nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 1
  %.not364.us.us.us.us = icmp eq i32 %2269, %7
  br i1 %.not364.us.us.us.us, label %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r12470.us.us.us.us"

"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r12470.us.us.us.us"
  %2270 = add nuw nsw i32 %"convolved.s1.r19$x69.us.us.us.us", 1
  %.not363.us.us.us.us = icmp eq i32 %2270, %9
  br i1 %.not363.us.us.us.us, label %"end for convolved.s1.r19$x68.loopexit.us.us.us", label %"for convolved.s1.r19$x67.us.us.us.us"

next_bb22:                                        ; preds = %next_bb5
  br i1 %98, label %then_bb74, label %next_bb75

then_bb74:                                        ; preds = %next_bb22
  %2271 = mul nsw i32 %19, %18
  %2272 = mul nsw i32 %22, %20
  %2273 = mul nsw i32 %17, %16
  %2274 = add i32 %2272, %2271
  %t1037 = add i32 %2274, %2273
  %2275 = icmp sgt i32 %21, 0
  br i1 %2275, label %"for output.s0.b.rebased76.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased76.preheader":            ; preds = %then_bb74
  %2276 = mul nsw i32 %17, %stride_x
  %2277 = mul nsw i32 %2276, 7
  %2278 = mul nsw i32 %2276, 6
  %2279 = mul nsw i32 %2276, 5
  %2280 = shl nsw i32 %2276, 2
  %2281 = mul nsw i32 %2276, 3
  %2282 = shl nsw i32 %2276, 1
  %2283 = sub nsw i32 %stride_x, %16
  %2284 = mul nsw i32 %2283, %17
  %2285 = icmp sgt i32 %29, 0
  %.neg766 = mul i32 %30, %28
  %.neg767 = mul i32 %27, %25
  %.neg768 = mul i32 %31, %20
  %reass.add770 = add i32 %.neg766, %.neg767
  %reass.add771 = add i32 %reass.add770, %.neg768
  %2286 = add nuw nsw i32 %26, 7
  %2287 = ashr i32 %2286, 3
  %b432 = add nsw i32 %26, -8
  %2288 = icmp sgt i32 %11, 0
  %2289 = icmp sgt i32 %9, 0
  %2290 = icmp sgt i32 %7, 0
  %2291 = ashr i32 %4, 5
  %2292 = icmp sgt i32 %4, 31
  %2293 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %2294 = shufflevector <32 x i32> %2293, <32 x i32> undef, <32 x i32> zeroinitializer
  %2295 = sext <32 x i32> %2294 to <32 x i64>
  %2296 = icmp sgt i32 %a497, 0
  %2297 = select i1 %2296, i32 %a497, i32 0
  %2298 = shl nuw i32 1, %2297
  %2299 = ashr i32 %2298, 1
  %2300 = zext i8 %output_zero to i16
  %2301 = insertelement <32 x i16> undef, i16 %2300, i32 0
  %2302 = shufflevector <32 x i16> %2301, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2303 = bitcast <64 x i16> %2302 to <32 x i32>
  %2304 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %2305 = shufflevector <32 x i8> %2304, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2306 = bitcast <128 x i8> %2305 to <32 x i32>
  %2307 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %2308 = shufflevector <32 x i8> %2307, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2309 = bitcast <128 x i8> %2308 to <32 x i32>
  br i1 %2285, label %"for output.s0.b.rebased76.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased76.us.preheader":         ; preds = %"for output.s0.b.rebased76.preheader"
  %2310 = add i32 %2273, %2271
  %2311 = add i32 %7, -1
  %2312 = add i32 %9, -1
  %brmerge1312.demorgan = and i1 %2289, %2290
  %xtraiter1523 = and i32 %7, 1
  %2313 = icmp eq i32 %2311, 0
  %unroll_iter1525 = and i32 %7, -2
  %lcmp.mod1524.not = icmp eq i32 %xtraiter1523, 0
  %xtraiter1527 = and i32 %9, 3
  %2314 = icmp ult i32 %2312, 3
  %unroll_iter1531 = and i32 %9, -4
  %lcmp.mod1529.not = icmp eq i32 %xtraiter1527, 0
  %xtraiter1533 = and i32 %7, 1
  %2315 = icmp eq i32 %2311, 0
  %unroll_iter1535 = and i32 %7, -2
  %lcmp.mod1534.not = icmp eq i32 %xtraiter1533, 0
  br label %"for output.s0.b.rebased76.us"

"for output.s0.b.rebased76.us":                   ; preds = %"for output.s0.b.rebased76.us.preheader", %"end for output.s0.y.rebased80.loopexit.us"
  %sum_input187312.sroa.0.7.us = phi <32 x i32> [ %.us-phi1031.us, %"end for output.s0.y.rebased80.loopexit.us" ], [ undef, %"for output.s0.b.rebased76.us.preheader" ]
  %output.s0.b.rebased78.us = phi i32 [ %2322, %"end for output.s0.y.rebased80.loopexit.us" ], [ 0, %"for output.s0.b.rebased76.us.preheader" ]
  %2316 = add nsw i32 %output.s0.b.rebased78.us, %20
  %2317 = mul nsw i32 %2316, %31
  %2318 = sub i32 %2317, %reass.add771
  %2319 = mul nsw i32 %2316, %22
  %2320 = sub i32 %2319, %2274
  %2321 = sub nsw i32 %2319, %t1037
  br i1 %100, label %"for output.s0.y.rebased79.us.us", label %"end for output.s0.y.rebased80.loopexit.us", !prof !96

"end for output.s0.y.rebased80.loopexit.us":      ; preds = %"end for output.s0.x.xo83.loopexit.us.us", %"for output.s0.b.rebased76.us"
  %.us-phi1031.us = phi <32 x i32> [ %sum_input187312.sroa.0.7.us, %"for output.s0.b.rebased76.us" ], [ %sum_input187312.sroa.0.20.us.us, %"end for output.s0.x.xo83.loopexit.us.us" ]
  %2322 = add nuw nsw i32 %output.s0.b.rebased78.us, 1
  %.not346.us = icmp eq i32 %2322, %21
  br i1 %.not346.us, label %after_bb3, label %"for output.s0.b.rebased76.us"

"for output.s0.y.rebased79.us.us":                ; preds = %"for output.s0.b.rebased76.us", %"end for output.s0.x.xo83.loopexit.us.us"
  %sum_input187312.sroa.0.8.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.20.us.us, %"end for output.s0.x.xo83.loopexit.us.us" ], [ %sum_input187312.sroa.0.7.us, %"for output.s0.b.rebased76.us" ]
  %output.s0.y.rebased81.us.us = phi i32 [ %2734, %"end for output.s0.x.xo83.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased76.us" ]
  %2323 = add nsw i32 %output.s0.y.rebased81.us.us, %28
  %2324 = mul nsw i32 %2323, %30
  %t1066.us.us = add i32 %2318, %2324
  %2325 = mul nsw i32 %2323, %stride_y
  br label %"for output.s0.x.xo82.us.us"

"for output.s0.x.xo82.us.us":                     ; preds = %"end for output.s0.c.co111.us.us", %"for output.s0.y.rebased79.us.us"
  %sum_input187312.sroa.0.10.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.20.us.us, %"end for output.s0.c.co111.us.us" ], [ %sum_input187312.sroa.0.8.us.us, %"for output.s0.y.rebased79.us.us" ]
  %output.s0.x.xo84.us.us = phi i32 [ %2691, %"end for output.s0.c.co111.us.us" ], [ 0, %"for output.s0.y.rebased79.us.us" ]
  %a430.us.us = shl nsw i32 %output.s0.x.xo84.us.us, 3
  %2326 = icmp slt i32 %a430.us.us, %b432
  %output.s0.x.x.base.s85.us.us = select i1 %2326, i32 %a430.us.us, i32 %b432
  br i1 %t843.not, label %"consume sum_input109.us.us", label %then_bb89.us.us

then_bb89.us.us:                                  ; preds = %"for output.s0.x.xo82.us.us"
  %sum_input187312.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %sum_input187312.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb92.us.us, label %next_bb93.us.us

next_bb93.us.us:                                  ; preds = %then_bb89.us.us
  br i1 %2288, label %"for sum_input.s1.r19$y100.preheader.us.us", label %"consume sum_input109.us.us", !prof !96

then_bb92.us.us:                                  ; preds = %then_bb89.us.us
  br i1 %2288, label %"for sum_input.s1.r19$y94.preheader.us.us", label %"consume sum_input109.us.us", !prof !96

"for sum_input.s1.r19$y94.us.us":                 ; preds = %"for sum_input.s1.r19$y94.preheader.us.us", %"end for sum_input.s1.r19$x98.us.us"
  %sum_input187312.sroa.0.12.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.14.us.us, %"end for sum_input.s1.r19$x98.us.us" ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y94.preheader.us.us" ]
  %"sum_input.s1.r19$y96.us.us" = phi i32 [ %2427, %"end for sum_input.s1.r19$x98.us.us" ], [ 0, %"for sum_input.s1.r19$y94.preheader.us.us" ]
  br i1 %2289, label %"for sum_input.s1.r19$x97.preheader.us.us", label %"end for sum_input.s1.r19$x98.us.us", !prof !96

"for sum_input.s1.r19$x97.us.us":                 ; preds = %"for sum_input.s1.r19$x97.preheader.us.us", %"for sum_input.s1.r19$x97.us.us"
  %sum_input187312.sroa.0.13.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend637.us.us.3, %"for sum_input.s1.r19$x97.us.us" ], [ %sum_input187312.sroa.0.12.us.us, %"for sum_input.s1.r19$x97.preheader.us.us" ]
  %"sum_input.s1.r19$x99.us.us" = phi i32 [ %2406, %"for sum_input.s1.r19$x97.us.us" ], [ 0, %"for sum_input.s1.r19$x97.preheader.us.us" ]
  %niter1532 = phi i32 [ %niter1532.nsub.3, %"for sum_input.s1.r19$x97.us.us" ], [ %unroll_iter1531, %"for sum_input.s1.r19$x97.preheader.us.us" ]
  %2327 = mul nsw i32 %"sum_input.s1.r19$x99.us.us", %dilation_x
  %reass.add776.us.us = add i32 %2731, %2327
  %reass.mul777.us.us = shl i32 %reass.add776.us.us, 2
  %2328 = add i32 %t1069.us.us, %reass.mul777.us.us
  %2329 = getelementptr inbounds i8, i8* %13, i32 %2328
  %2330 = bitcast i8* %2329 to <32 x i8>*
  %2331 = load <32 x i8>, <32 x i8>* %2330, align 4, !tbaa !110
  %t1230.us.us = zext <32 x i8> %2331 to <32 x i16>
  %2332 = shufflevector <32 x i16> %t1230.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2333 = bitcast <64 x i16> %2332 to <32 x i32>
  %2334 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2333)
  %2335 = bitcast <32 x i32> %2334 to <64 x i16>
  %2336 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2333)
  %2337 = bitcast <32 x i32> %2336 to <64 x i16>
  %2338 = add <64 x i16> %2337, %2335
  %2339 = shufflevector <64 x i16> %2338, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us = zext <16 x i16> %2339 to <16 x i32>
  %2340 = shufflevector <16 x i32> %t1229.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2341 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2340, i32 -4)
  %2342 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2341)
  %2343 = add nsw <32 x i32> %2342, %sum_input187312.sroa.0.13.us.us
  %2344 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2341)
  %2345 = add nsw <32 x i32> %2343, %2344
  %sum_input187312.sroa.0.0.vecblend637.us.us = shufflevector <32 x i32> %2345, <32 x i32> %sum_input187312.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2346 = or i32 %"sum_input.s1.r19$x99.us.us", 1
  %2347 = mul nsw i32 %2346, %dilation_x
  %reass.add776.us.us.1 = add i32 %2731, %2347
  %reass.mul777.us.us.1 = shl i32 %reass.add776.us.us.1, 2
  %2348 = add i32 %t1069.us.us, %reass.mul777.us.us.1
  %2349 = getelementptr inbounds i8, i8* %13, i32 %2348
  %2350 = bitcast i8* %2349 to <32 x i8>*
  %2351 = load <32 x i8>, <32 x i8>* %2350, align 4, !tbaa !110
  %t1230.us.us.1 = zext <32 x i8> %2351 to <32 x i16>
  %2352 = shufflevector <32 x i16> %t1230.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2353 = bitcast <64 x i16> %2352 to <32 x i32>
  %2354 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2353)
  %2355 = bitcast <32 x i32> %2354 to <64 x i16>
  %2356 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2353)
  %2357 = bitcast <32 x i32> %2356 to <64 x i16>
  %2358 = add <64 x i16> %2357, %2355
  %2359 = shufflevector <64 x i16> %2358, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.1 = zext <16 x i16> %2359 to <16 x i32>
  %2360 = shufflevector <16 x i32> %t1229.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2361 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2360, i32 -4)
  %2362 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2361)
  %2363 = add nsw <32 x i32> %2362, %sum_input187312.sroa.0.0.vecblend637.us.us
  %2364 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2361)
  %2365 = add nsw <32 x i32> %2363, %2364
  %sum_input187312.sroa.0.0.vecblend637.us.us.1 = shufflevector <32 x i32> %2365, <32 x i32> %sum_input187312.sroa.0.0.vecblend637.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2366 = or i32 %"sum_input.s1.r19$x99.us.us", 2
  %2367 = mul nsw i32 %2366, %dilation_x
  %reass.add776.us.us.2 = add i32 %2731, %2367
  %reass.mul777.us.us.2 = shl i32 %reass.add776.us.us.2, 2
  %2368 = add i32 %t1069.us.us, %reass.mul777.us.us.2
  %2369 = getelementptr inbounds i8, i8* %13, i32 %2368
  %2370 = bitcast i8* %2369 to <32 x i8>*
  %2371 = load <32 x i8>, <32 x i8>* %2370, align 4, !tbaa !110
  %t1230.us.us.2 = zext <32 x i8> %2371 to <32 x i16>
  %2372 = shufflevector <32 x i16> %t1230.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2373 = bitcast <64 x i16> %2372 to <32 x i32>
  %2374 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2373)
  %2375 = bitcast <32 x i32> %2374 to <64 x i16>
  %2376 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2373)
  %2377 = bitcast <32 x i32> %2376 to <64 x i16>
  %2378 = add <64 x i16> %2377, %2375
  %2379 = shufflevector <64 x i16> %2378, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.2 = zext <16 x i16> %2379 to <16 x i32>
  %2380 = shufflevector <16 x i32> %t1229.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2381 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2380, i32 -4)
  %2382 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2381)
  %2383 = add nsw <32 x i32> %2382, %sum_input187312.sroa.0.0.vecblend637.us.us.1
  %2384 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2381)
  %2385 = add nsw <32 x i32> %2383, %2384
  %sum_input187312.sroa.0.0.vecblend637.us.us.2 = shufflevector <32 x i32> %2385, <32 x i32> %sum_input187312.sroa.0.0.vecblend637.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2386 = or i32 %"sum_input.s1.r19$x99.us.us", 3
  %2387 = mul nsw i32 %2386, %dilation_x
  %reass.add776.us.us.3 = add i32 %2731, %2387
  %reass.mul777.us.us.3 = shl i32 %reass.add776.us.us.3, 2
  %2388 = add i32 %t1069.us.us, %reass.mul777.us.us.3
  %2389 = getelementptr inbounds i8, i8* %13, i32 %2388
  %2390 = bitcast i8* %2389 to <32 x i8>*
  %2391 = load <32 x i8>, <32 x i8>* %2390, align 4, !tbaa !110
  %t1230.us.us.3 = zext <32 x i8> %2391 to <32 x i16>
  %2392 = shufflevector <32 x i16> %t1230.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2393 = bitcast <64 x i16> %2392 to <32 x i32>
  %2394 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2393)
  %2395 = bitcast <32 x i32> %2394 to <64 x i16>
  %2396 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2393)
  %2397 = bitcast <32 x i32> %2396 to <64 x i16>
  %2398 = add <64 x i16> %2397, %2395
  %2399 = shufflevector <64 x i16> %2398, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.3 = zext <16 x i16> %2399 to <16 x i32>
  %2400 = shufflevector <16 x i32> %t1229.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2401 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2400, i32 -4)
  %2402 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2401)
  %2403 = add nsw <32 x i32> %2402, %sum_input187312.sroa.0.0.vecblend637.us.us.2
  %2404 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2401)
  %2405 = add nsw <32 x i32> %2403, %2404
  %sum_input187312.sroa.0.0.vecblend637.us.us.3 = shufflevector <32 x i32> %2405, <32 x i32> %sum_input187312.sroa.0.0.vecblend637.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2406 = add nuw nsw i32 %"sum_input.s1.r19$x99.us.us", 4
  %niter1532.nsub.3 = add i32 %niter1532, -4
  %niter1532.ncmp.3 = icmp eq i32 %niter1532.nsub.3, 0
  br i1 %niter1532.ncmp.3, label %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x97.us.us"

"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x97.us.us", %"for sum_input.s1.r19$x97.preheader.us.us"
  %sum_input187312.sroa.0.0.vecblend637.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x97.preheader.us.us" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.3, %"for sum_input.s1.r19$x97.us.us" ]
  %sum_input187312.sroa.0.13.us.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.12.us.us, %"for sum_input.s1.r19$x97.preheader.us.us" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.3, %"for sum_input.s1.r19$x97.us.us" ]
  %"sum_input.s1.r19$x99.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x97.preheader.us.us" ], [ %2406, %"for sum_input.s1.r19$x97.us.us" ]
  br i1 %lcmp.mod1529.not, label %"end for sum_input.s1.r19$x98.us.us", label %"for sum_input.s1.r19$x97.us.us.epil"

"for sum_input.s1.r19$x97.us.us.epil":            ; preds = %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x97.us.us.epil"
  %sum_input187312.sroa.0.13.us.us.epil = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend637.us.us.epil, %"for sum_input.s1.r19$x97.us.us.epil" ], [ %sum_input187312.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x99.us.us.epil" = phi i32 [ %2426, %"for sum_input.s1.r19$x97.us.us.epil" ], [ %"sum_input.s1.r19$x99.us.us.unr", %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ]
  %epil.iter1528 = phi i32 [ %epil.iter1528.sub, %"for sum_input.s1.r19$x97.us.us.epil" ], [ %xtraiter1527, %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ]
  %2407 = mul nsw i32 %"sum_input.s1.r19$x99.us.us.epil", %dilation_x
  %reass.add776.us.us.epil = add i32 %2731, %2407
  %reass.mul777.us.us.epil = shl i32 %reass.add776.us.us.epil, 2
  %2408 = add i32 %t1069.us.us, %reass.mul777.us.us.epil
  %2409 = getelementptr inbounds i8, i8* %13, i32 %2408
  %2410 = bitcast i8* %2409 to <32 x i8>*
  %2411 = load <32 x i8>, <32 x i8>* %2410, align 4, !tbaa !110
  %t1230.us.us.epil = zext <32 x i8> %2411 to <32 x i16>
  %2412 = shufflevector <32 x i16> %t1230.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2413 = bitcast <64 x i16> %2412 to <32 x i32>
  %2414 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2413)
  %2415 = bitcast <32 x i32> %2414 to <64 x i16>
  %2416 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2413)
  %2417 = bitcast <32 x i32> %2416 to <64 x i16>
  %2418 = add <64 x i16> %2417, %2415
  %2419 = shufflevector <64 x i16> %2418, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.epil = zext <16 x i16> %2419 to <16 x i32>
  %2420 = shufflevector <16 x i32> %t1229.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2421 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2420, i32 -4)
  %2422 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2421)
  %2423 = add nsw <32 x i32> %2422, %sum_input187312.sroa.0.13.us.us.epil
  %2424 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2421)
  %2425 = add nsw <32 x i32> %2423, %2424
  %sum_input187312.sroa.0.0.vecblend637.us.us.epil = shufflevector <32 x i32> %2425, <32 x i32> %sum_input187312.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2426 = add nuw nsw i32 %"sum_input.s1.r19$x99.us.us.epil", 1
  %epil.iter1528.sub = add i32 %epil.iter1528, -1
  %epil.iter1528.cmp.not = icmp eq i32 %epil.iter1528.sub, 0
  br i1 %epil.iter1528.cmp.not, label %"end for sum_input.s1.r19$x98.us.us", label %"for sum_input.s1.r19$x97.us.us.epil", !llvm.loop !116

"end for sum_input.s1.r19$x98.us.us":             ; preds = %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x97.us.us.epil", %"for sum_input.s1.r19$y94.us.us"
  %sum_input187312.sroa.0.14.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.12.us.us, %"for sum_input.s1.r19$y94.us.us" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.lcssa.ph, %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.epil, %"for sum_input.s1.r19$x97.us.us.epil" ]
  %2427 = add nuw nsw i32 %"sum_input.s1.r19$y96.us.us", 1
  %.not356.us.us = icmp eq i32 %2427, %11
  br i1 %.not356.us.us, label %"consume sum_input109.us.us", label %"for sum_input.s1.r19$y94.us.us"

"consume sum_input109.us.us":                     ; preds = %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us", %"end for sum_input.s1.r19$x98.us.us", %"for sum_input.s1.r19$y100.preheader.us.us", %then_bb92.us.us, %next_bb93.us.us, %"for output.s0.x.xo82.us.us"
  %sum_input187312.sroa.0.20.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.10.us.us, %"for output.s0.x.xo82.us.us" ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %then_bb92.us.us ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %next_bb93.us.us ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y100.preheader.us.us" ], [ %sum_input187312.sroa.0.14.us.us, %"end for sum_input.s1.r19$x98.us.us" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us" ]
  br i1 %2292, label %"for output.s0.c.co110.preheader.us.us", label %"end for output.s0.c.co111.us.us", !prof !96

"for output.s0.c.co110.us.us":                    ; preds = %"for output.s0.c.co110.preheader.us.us", %"consume convolved126.us.us"
  %output.s0.c.co112.us.us = phi i32 [ %2690, %"consume convolved126.us.us" ], [ 0, %"for output.s0.c.co110.preheader.us.us" ]
  %2428 = shl nsw i32 %output.s0.c.co112.us.us, 5
  %2429 = getelementptr inbounds i32, i32* %offset_c, i32 %2428
  %2430 = bitcast i32* %2429 to <32 x i32>*
  %2431 = load <32 x i32>, <32 x i32>* %2430, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb114.us.us, label %next_bb116.us.us

next_bb116.us.us:                                 ; preds = %"for output.s0.c.co110.us.us"
  %2432 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2696) #11
  %2433 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2432) #11
  %2434 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2697) #11
  %2435 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2434) #11
  %2436 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2698) #11
  %2437 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2436) #11
  %2438 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2699) #11
  %2439 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2438) #11
  %2440 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2700) #11
  %2441 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2440) #11
  %2442 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2701) #11
  %2443 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2442) #11
  %2444 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2702) #11
  %2445 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2444) #11
  %2446 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2703) #11
  %2447 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %2431, <32 x i32> %2446) #11
  br label %after_bb114.us.us

after_bb114.us.us:                                ; preds = %"for output.s0.c.co110.us.us", %next_bb116.us.us
  %convolved313.sroa.122.7.us.us = phi <32 x i32> [ %2447, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.112.7.us.us = phi <32 x i32> [ %2445, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.102.7.us.us = phi <32 x i32> [ %2443, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.92.7.us.us = phi <32 x i32> [ %2441, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.77.7.us.us = phi <32 x i32> [ %2439, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.62.7.us.us = phi <32 x i32> [ %2437, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.47.7.us.us = phi <32 x i32> [ %2435, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.0.21.us.us = phi <32 x i32> [ %2433, %next_bb116.us.us ], [ %2431, %"for output.s0.c.co110.us.us" ]
  br i1 %2288, label %"for convolved.s1.r19$y117.preheader.us.us", label %"consume convolved126.us.us", !prof !96

"consume convolved126.us.us":                     ; preds = %"end for convolved.s1.r19$x121.loopexit.us.us.us", %"for convolved.s1.r19$y117.preheader.us.us", %after_bb114.us.us
  %convolved313.sroa.122.13.us.us = phi <32 x i32> [ %convolved313.sroa.122.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.122.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi994.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.112.13.us.us = phi <32 x i32> [ %convolved313.sroa.112.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.112.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi995.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.102.13.us.us = phi <32 x i32> [ %convolved313.sroa.102.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.102.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi996.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.92.13.us.us = phi <32 x i32> [ %convolved313.sroa.92.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.92.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi997.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.77.13.us.us = phi <32 x i32> [ %convolved313.sroa.77.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.77.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi998.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.62.13.us.us = phi <32 x i32> [ %convolved313.sroa.62.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.62.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi999.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.47.13.us.us = phi <32 x i32> [ %convolved313.sroa.47.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.47.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi1000.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.0.27.us.us = phi <32 x i32> [ %convolved313.sroa.0.21.us.us, %after_bb114.us.us ], [ %convolved313.sroa.0.21.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi1001.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %2448 = sext <32 x i32> %convolved313.sroa.0.27.us.us to <32 x i64>
  %a433.us.us = mul nsw <32 x i64> %2448, %2295
  %2449 = icmp slt <32 x i64> %a433.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2450 = select <32 x i1> %2449, <32 x i64> %a433.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2451 = add nsw <32 x i64> %2450, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a432.us.us = ashr <32 x i64> %2451, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2452 = icmp slt <32 x i64> %a432.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a431.us.us = select <32 x i1> %2452, <32 x i64> %a432.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2453 = icmp sgt <32 x i64> %a431.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2454 = select <32 x i1> %2453, <32 x i64> %a431.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2455 = trunc <32 x i64> %2454 to <32 x i32>
  %2456 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2455, <32 x i32> %2721) #11
  %2457 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2456, <32 x i32> %2720) #11
  %2458 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2457, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2459 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2458) #11
  %2460 = trunc <32 x i32> %2459 to <32 x i16>
  %2461 = shufflevector <32 x i16> %2460, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2462 = bitcast <64 x i16> %2461 to <32 x i32>
  %2463 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2462, <32 x i32> %2303) #11
  %2464 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2463, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2465 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2464, <32 x i32> zeroinitializer) #11
  %2466 = bitcast <32 x i32> %2465 to <64 x i16>
  %2467 = shufflevector <64 x i16> %2466, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2468 = trunc <32 x i16> %2467 to <32 x i8>
  %2469 = shufflevector <32 x i8> %2468, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2470 = bitcast <128 x i8> %2469 to <32 x i32>
  %2471 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2470, <32 x i32> %2306) #11
  %2472 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2471, <32 x i32> %2309) #11
  %2473 = bitcast <32 x i32> %2472 to <128 x i8>
  %2474 = shufflevector <128 x i8> %2473, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2475 = shl nsw i32 %output.s0.c.co112.us.us, 5
  %2476 = add i32 %2475, %t1066.us.us
  %2477 = add i32 %2476, %2722
  %2478 = getelementptr inbounds i8, i8* %23, i32 %2477
  %2479 = bitcast i8* %2478 to <32 x i8>*
  store <32 x i8> %2474, <32 x i8>* %2479, align 1, !tbaa !113
  %2480 = sext <32 x i32> %convolved313.sroa.47.13.us.us to <32 x i64>
  %a437.us.us = mul nsw <32 x i64> %2480, %2295
  %2481 = icmp slt <32 x i64> %a437.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2482 = select <32 x i1> %2481, <32 x i64> %a437.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2483 = add nsw <32 x i64> %2482, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a436.us.us = ashr <32 x i64> %2483, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2484 = icmp slt <32 x i64> %a436.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a435.us.us = select <32 x i1> %2484, <32 x i64> %a436.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2485 = icmp sgt <32 x i64> %a435.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2486 = select <32 x i1> %2485, <32 x i64> %a435.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2487 = trunc <32 x i64> %2486 to <32 x i32>
  %2488 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2487, <32 x i32> %2721) #11
  %2489 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2488, <32 x i32> %2720) #11
  %2490 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2489, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2491 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2490) #11
  %2492 = trunc <32 x i32> %2491 to <32 x i16>
  %2493 = shufflevector <32 x i16> %2492, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2494 = bitcast <64 x i16> %2493 to <32 x i32>
  %2495 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2494, <32 x i32> %2303) #11
  %2496 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2495, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2497 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2496, <32 x i32> zeroinitializer) #11
  %2498 = bitcast <32 x i32> %2497 to <64 x i16>
  %2499 = shufflevector <64 x i16> %2498, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2500 = trunc <32 x i16> %2499 to <32 x i8>
  %2501 = shufflevector <32 x i8> %2500, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2502 = bitcast <128 x i8> %2501 to <32 x i32>
  %2503 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2502, <32 x i32> %2306) #11
  %2504 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2503, <32 x i32> %2309) #11
  %2505 = bitcast <32 x i32> %2504 to <128 x i8>
  %2506 = shufflevector <128 x i8> %2505, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2507 = add i32 %2476, %2723
  %2508 = getelementptr inbounds i8, i8* %23, i32 %2507
  %2509 = bitcast i8* %2508 to <32 x i8>*
  store <32 x i8> %2506, <32 x i8>* %2509, align 1, !tbaa !113
  %2510 = sext <32 x i32> %convolved313.sroa.62.13.us.us to <32 x i64>
  %a441.us.us = mul nsw <32 x i64> %2510, %2295
  %2511 = icmp slt <32 x i64> %a441.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2512 = select <32 x i1> %2511, <32 x i64> %a441.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2513 = add nsw <32 x i64> %2512, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a440.us.us = ashr <32 x i64> %2513, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2514 = icmp slt <32 x i64> %a440.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a439.us.us = select <32 x i1> %2514, <32 x i64> %a440.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2515 = icmp sgt <32 x i64> %a439.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2516 = select <32 x i1> %2515, <32 x i64> %a439.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2517 = trunc <32 x i64> %2516 to <32 x i32>
  %2518 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2517, <32 x i32> %2721) #11
  %2519 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2518, <32 x i32> %2720) #11
  %2520 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2519, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2521 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2520) #11
  %2522 = trunc <32 x i32> %2521 to <32 x i16>
  %2523 = shufflevector <32 x i16> %2522, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2524 = bitcast <64 x i16> %2523 to <32 x i32>
  %2525 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2524, <32 x i32> %2303) #11
  %2526 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2525, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2527 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2526, <32 x i32> zeroinitializer) #11
  %2528 = bitcast <32 x i32> %2527 to <64 x i16>
  %2529 = shufflevector <64 x i16> %2528, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2530 = trunc <32 x i16> %2529 to <32 x i8>
  %2531 = shufflevector <32 x i8> %2530, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2532 = bitcast <128 x i8> %2531 to <32 x i32>
  %2533 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2532, <32 x i32> %2306) #11
  %2534 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2533, <32 x i32> %2309) #11
  %2535 = bitcast <32 x i32> %2534 to <128 x i8>
  %2536 = shufflevector <128 x i8> %2535, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2537 = add i32 %2476, %2724
  %2538 = getelementptr inbounds i8, i8* %23, i32 %2537
  %2539 = bitcast i8* %2538 to <32 x i8>*
  store <32 x i8> %2536, <32 x i8>* %2539, align 1, !tbaa !113
  %2540 = sext <32 x i32> %convolved313.sroa.77.13.us.us to <32 x i64>
  %a445.us.us = mul nsw <32 x i64> %2540, %2295
  %2541 = icmp slt <32 x i64> %a445.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2542 = select <32 x i1> %2541, <32 x i64> %a445.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2543 = add nsw <32 x i64> %2542, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a444.us.us = ashr <32 x i64> %2543, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2544 = icmp slt <32 x i64> %a444.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a443.us.us = select <32 x i1> %2544, <32 x i64> %a444.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2545 = icmp sgt <32 x i64> %a443.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2546 = select <32 x i1> %2545, <32 x i64> %a443.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2547 = trunc <32 x i64> %2546 to <32 x i32>
  %2548 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2547, <32 x i32> %2721) #11
  %2549 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2548, <32 x i32> %2720) #11
  %2550 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2549, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2551 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2550) #11
  %2552 = trunc <32 x i32> %2551 to <32 x i16>
  %2553 = shufflevector <32 x i16> %2552, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2554 = bitcast <64 x i16> %2553 to <32 x i32>
  %2555 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2554, <32 x i32> %2303) #11
  %2556 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2555, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2557 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2556, <32 x i32> zeroinitializer) #11
  %2558 = bitcast <32 x i32> %2557 to <64 x i16>
  %2559 = shufflevector <64 x i16> %2558, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2560 = trunc <32 x i16> %2559 to <32 x i8>
  %2561 = shufflevector <32 x i8> %2560, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2562 = bitcast <128 x i8> %2561 to <32 x i32>
  %2563 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2562, <32 x i32> %2306) #11
  %2564 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2563, <32 x i32> %2309) #11
  %2565 = bitcast <32 x i32> %2564 to <128 x i8>
  %2566 = shufflevector <128 x i8> %2565, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2567 = add i32 %2476, %2725
  %2568 = getelementptr inbounds i8, i8* %23, i32 %2567
  %2569 = bitcast i8* %2568 to <32 x i8>*
  store <32 x i8> %2566, <32 x i8>* %2569, align 1, !tbaa !113
  %2570 = sext <32 x i32> %convolved313.sroa.92.13.us.us to <32 x i64>
  %a449.us.us = mul nsw <32 x i64> %2570, %2295
  %2571 = icmp slt <32 x i64> %a449.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2572 = select <32 x i1> %2571, <32 x i64> %a449.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2573 = add nsw <32 x i64> %2572, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a448.us.us = ashr <32 x i64> %2573, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2574 = icmp slt <32 x i64> %a448.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a447.us.us = select <32 x i1> %2574, <32 x i64> %a448.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2575 = icmp sgt <32 x i64> %a447.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2576 = select <32 x i1> %2575, <32 x i64> %a447.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2577 = trunc <32 x i64> %2576 to <32 x i32>
  %2578 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2577, <32 x i32> %2721) #11
  %2579 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2578, <32 x i32> %2720) #11
  %2580 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2579, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2581 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2580) #11
  %2582 = trunc <32 x i32> %2581 to <32 x i16>
  %2583 = shufflevector <32 x i16> %2582, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2584 = bitcast <64 x i16> %2583 to <32 x i32>
  %2585 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2584, <32 x i32> %2303) #11
  %2586 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2585, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2587 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2586, <32 x i32> zeroinitializer) #11
  %2588 = bitcast <32 x i32> %2587 to <64 x i16>
  %2589 = shufflevector <64 x i16> %2588, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2590 = trunc <32 x i16> %2589 to <32 x i8>
  %2591 = shufflevector <32 x i8> %2590, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2592 = bitcast <128 x i8> %2591 to <32 x i32>
  %2593 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2592, <32 x i32> %2306) #11
  %2594 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2593, <32 x i32> %2309) #11
  %2595 = bitcast <32 x i32> %2594 to <128 x i8>
  %2596 = shufflevector <128 x i8> %2595, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2597 = add i32 %2476, %2726
  %2598 = getelementptr inbounds i8, i8* %23, i32 %2597
  %2599 = bitcast i8* %2598 to <32 x i8>*
  store <32 x i8> %2596, <32 x i8>* %2599, align 1, !tbaa !113
  %2600 = sext <32 x i32> %convolved313.sroa.102.13.us.us to <32 x i64>
  %a453.us.us = mul nsw <32 x i64> %2600, %2295
  %2601 = icmp slt <32 x i64> %a453.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2602 = select <32 x i1> %2601, <32 x i64> %a453.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2603 = add nsw <32 x i64> %2602, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a452.us.us = ashr <32 x i64> %2603, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2604 = icmp slt <32 x i64> %a452.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a451.us.us = select <32 x i1> %2604, <32 x i64> %a452.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2605 = icmp sgt <32 x i64> %a451.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2606 = select <32 x i1> %2605, <32 x i64> %a451.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2607 = trunc <32 x i64> %2606 to <32 x i32>
  %2608 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2607, <32 x i32> %2721) #11
  %2609 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2608, <32 x i32> %2720) #11
  %2610 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2609, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2611 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2610) #11
  %2612 = trunc <32 x i32> %2611 to <32 x i16>
  %2613 = shufflevector <32 x i16> %2612, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2614 = bitcast <64 x i16> %2613 to <32 x i32>
  %2615 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2614, <32 x i32> %2303) #11
  %2616 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2615, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2617 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2616, <32 x i32> zeroinitializer) #11
  %2618 = bitcast <32 x i32> %2617 to <64 x i16>
  %2619 = shufflevector <64 x i16> %2618, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2620 = trunc <32 x i16> %2619 to <32 x i8>
  %2621 = shufflevector <32 x i8> %2620, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2622 = bitcast <128 x i8> %2621 to <32 x i32>
  %2623 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2622, <32 x i32> %2306) #11
  %2624 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2623, <32 x i32> %2309) #11
  %2625 = bitcast <32 x i32> %2624 to <128 x i8>
  %2626 = shufflevector <128 x i8> %2625, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2627 = add i32 %2476, %2727
  %2628 = getelementptr inbounds i8, i8* %23, i32 %2627
  %2629 = bitcast i8* %2628 to <32 x i8>*
  store <32 x i8> %2626, <32 x i8>* %2629, align 1, !tbaa !113
  %2630 = sext <32 x i32> %convolved313.sroa.112.13.us.us to <32 x i64>
  %a457.us.us = mul nsw <32 x i64> %2630, %2295
  %2631 = icmp slt <32 x i64> %a457.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2632 = select <32 x i1> %2631, <32 x i64> %a457.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2633 = add nsw <32 x i64> %2632, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a456.us.us = ashr <32 x i64> %2633, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2634 = icmp slt <32 x i64> %a456.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a455.us.us = select <32 x i1> %2634, <32 x i64> %a456.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2635 = icmp sgt <32 x i64> %a455.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2636 = select <32 x i1> %2635, <32 x i64> %a455.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2637 = trunc <32 x i64> %2636 to <32 x i32>
  %2638 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2637, <32 x i32> %2721) #11
  %2639 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2638, <32 x i32> %2720) #11
  %2640 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2639, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2641 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2640) #11
  %2642 = trunc <32 x i32> %2641 to <32 x i16>
  %2643 = shufflevector <32 x i16> %2642, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2644 = bitcast <64 x i16> %2643 to <32 x i32>
  %2645 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2644, <32 x i32> %2303) #11
  %2646 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2645, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2647 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2646, <32 x i32> zeroinitializer) #11
  %2648 = bitcast <32 x i32> %2647 to <64 x i16>
  %2649 = shufflevector <64 x i16> %2648, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2650 = trunc <32 x i16> %2649 to <32 x i8>
  %2651 = shufflevector <32 x i8> %2650, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2652 = bitcast <128 x i8> %2651 to <32 x i32>
  %2653 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2652, <32 x i32> %2306) #11
  %2654 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2653, <32 x i32> %2309) #11
  %2655 = bitcast <32 x i32> %2654 to <128 x i8>
  %2656 = shufflevector <128 x i8> %2655, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2657 = add i32 %2476, %2728
  %2658 = getelementptr inbounds i8, i8* %23, i32 %2657
  %2659 = bitcast i8* %2658 to <32 x i8>*
  store <32 x i8> %2656, <32 x i8>* %2659, align 1, !tbaa !113
  %2660 = sext <32 x i32> %convolved313.sroa.122.13.us.us to <32 x i64>
  %a461.us.us = mul nsw <32 x i64> %2660, %2295
  %2661 = icmp slt <32 x i64> %a461.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2662 = select <32 x i1> %2661, <32 x i64> %a461.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2663 = add nsw <32 x i64> %2662, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a460.us.us = ashr <32 x i64> %2663, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2664 = icmp slt <32 x i64> %a460.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a459.us.us = select <32 x i1> %2664, <32 x i64> %a460.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2665 = icmp sgt <32 x i64> %a459.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2666 = select <32 x i1> %2665, <32 x i64> %a459.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2667 = trunc <32 x i64> %2666 to <32 x i32>
  %2668 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %2667, <32 x i32> %2721) #11
  %2669 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2668, <32 x i32> %2720) #11
  %2670 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2669, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2671 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %2670) #11
  %2672 = trunc <32 x i32> %2671 to <32 x i16>
  %2673 = shufflevector <32 x i16> %2672, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2674 = bitcast <64 x i16> %2673 to <32 x i32>
  %2675 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2674, <32 x i32> %2303) #11
  %2676 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2675, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %2677 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2676, <32 x i32> zeroinitializer) #11
  %2678 = bitcast <32 x i32> %2677 to <64 x i16>
  %2679 = shufflevector <64 x i16> %2678, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2680 = trunc <32 x i16> %2679 to <32 x i8>
  %2681 = shufflevector <32 x i8> %2680, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2682 = bitcast <128 x i8> %2681 to <32 x i32>
  %2683 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2682, <32 x i32> %2306) #11
  %2684 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2683, <32 x i32> %2309) #11
  %2685 = bitcast <32 x i32> %2684 to <128 x i8>
  %2686 = shufflevector <128 x i8> %2685, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2687 = add i32 %2476, %2729
  %2688 = getelementptr inbounds i8, i8* %23, i32 %2687
  %2689 = bitcast i8* %2688 to <32 x i8>*
  store <32 x i8> %2686, <32 x i8>* %2689, align 1, !tbaa !113
  %2690 = add nuw nsw i32 %output.s0.c.co112.us.us, 1
  %.not349.us.us = icmp eq i32 %2690, %2291
  br i1 %.not349.us.us, label %"end for output.s0.c.co111.us.us", label %"for output.s0.c.co110.us.us"

"end for output.s0.c.co111.us.us":                ; preds = %"consume convolved126.us.us", %"consume sum_input109.us.us"
  %2691 = add nuw nsw i32 %output.s0.x.xo84.us.us, 1
  %.not348.us.us = icmp eq i32 %2691, %2287
  br i1 %.not348.us.us, label %"end for output.s0.x.xo83.loopexit.us.us", label %"for output.s0.x.xo82.us.us"

"for convolved.s1.r19$y117.preheader.us.us":      ; preds = %after_bb114.us.us
  %2692 = mul nsw i32 %output.s0.c.co112.us.us, %8
  br i1 %2289, label %"for convolved.s1.r19$y117.us.us.us", label %"consume convolved126.us.us", !prof !96

"for sum_input.s1.r19$x97.preheader.us.us":       ; preds = %"for sum_input.s1.r19$y94.us.us"
  %2693 = mul nsw i32 %"sum_input.s1.r19$y96.us.us", %dilation_y
  %2694 = add nsw i32 %2693, %2325
  %2695 = mul nsw i32 %2694, %19
  %t1069.us.us = add i32 %2320, %2695
  br i1 %2314, label %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x97.us.us"

"for output.s0.c.co110.preheader.us.us":          ; preds = %"consume sum_input109.us.us"
  %sum_input187312.sroa.0.0.vec.extract657.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 0
  %2696 = mul nsw i32 %sum_input187312.sroa.0.0.vec.extract657.us.us, %309
  %sum_input187312.sroa.0.4.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 1
  %2697 = mul nsw i32 %sum_input187312.sroa.0.4.vec.extract.us.us, %309
  %sum_input187312.sroa.0.8.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 2
  %2698 = mul nsw i32 %sum_input187312.sroa.0.8.vec.extract.us.us, %309
  %sum_input187312.sroa.0.12.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 3
  %2699 = mul nsw i32 %sum_input187312.sroa.0.12.vec.extract.us.us, %309
  %sum_input187312.sroa.0.16.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 4
  %2700 = mul nsw i32 %sum_input187312.sroa.0.16.vec.extract.us.us, %309
  %sum_input187312.sroa.0.20.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 5
  %2701 = mul nsw i32 %sum_input187312.sroa.0.20.vec.extract.us.us, %309
  %sum_input187312.sroa.0.24.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 6
  %2702 = mul nsw i32 %sum_input187312.sroa.0.24.vec.extract.us.us, %309
  %sum_input187312.sroa.0.28.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 7
  %2703 = mul nsw i32 %sum_input187312.sroa.0.28.vec.extract.us.us, %309
  %2704 = add nsw i32 %output.s0.x.x.base.s85.us.us, %25
  %2705 = add nsw i32 %2704, 7
  %2706 = mul nsw i32 %2705, %stride_x
  %2707 = add nsw i32 %2704, 6
  %2708 = mul nsw i32 %2707, %stride_x
  %2709 = add nsw i32 %2704, 5
  %2710 = mul nsw i32 %2709, %stride_x
  %2711 = add nsw i32 %2704, 4
  %2712 = mul nsw i32 %2711, %stride_x
  %2713 = add nsw i32 %2704, 3
  %2714 = mul nsw i32 %2713, %stride_x
  %2715 = add nsw i32 %2704, 2
  %2716 = mul nsw i32 %2715, %stride_x
  %2717 = add nsw i32 %2704, 1
  %2718 = mul nsw i32 %2717, %stride_x
  %2719 = mul nsw i32 %2704, %stride_x
  %2720 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %a497) #11
  %2721 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2299) #11
  %2722 = mul nsw i32 %2704, %27
  %2723 = mul nsw i32 %2717, %27
  %2724 = mul nsw i32 %2715, %27
  %2725 = mul nsw i32 %2713, %27
  %2726 = mul nsw i32 %2711, %27
  %2727 = mul nsw i32 %2709, %27
  %2728 = mul nsw i32 %2707, %27
  %2729 = mul nsw i32 %2705, %27
  br label %"for output.s0.c.co110.us.us"

"for sum_input.s1.r19$y94.preheader.us.us":       ; preds = %then_bb92.us.us
  %2730 = add nsw i32 %output.s0.x.x.base.s85.us.us, %25
  %2731 = sub i32 %2730, %16
  br label %"for sum_input.s1.r19$y94.us.us"

"for sum_input.s1.r19$y100.preheader.us.us":      ; preds = %next_bb93.us.us
  %2732 = add nsw i32 %output.s0.x.x.base.s85.us.us, %25
  %2733 = mul nsw i32 %2732, %stride_x
  br i1 %brmerge1312.demorgan, label %"for sum_input.s1.r19$y100.us.us.us.us", label %"consume sum_input109.us.us", !prof !103

"end for output.s0.x.xo83.loopexit.us.us":        ; preds = %"end for output.s0.c.co111.us.us"
  %2734 = add nuw nsw i32 %output.s0.y.rebased81.us.us, 1
  %.not347.us.us = icmp eq i32 %2734, %29
  br i1 %.not347.us.us, label %"end for output.s0.y.rebased80.loopexit.us", label %"for output.s0.y.rebased79.us.us"

"for sum_input.s1.r19$y100.us.us.us.us":          ; preds = %"for sum_input.s1.r19$y100.preheader.us.us", %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us"
  %sum_input187312.sroa.0.15.us.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us" ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y100.preheader.us.us" ]
  %"sum_input.s1.r19$y102.us.us.us.us" = phi i32 [ %2925, %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y100.preheader.us.us" ]
  %2735 = mul nsw i32 %"sum_input.s1.r19$y102.us.us.us.us", %dilation_y
  %t1071.s.us.us.us.us = add nsw i32 %2735, %2325
  %2736 = mul nsw i32 %t1071.s.us.us.us.us, %19
  br label %"for sum_input.s1.r19$x103.us.us.us.us.us"

"for sum_input.s1.r19$x103.us.us.us.us.us":       ; preds = %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y100.us.us.us.us"
  %sum_input187312.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us" ], [ %sum_input187312.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y100.us.us.us.us" ]
  %"sum_input.s1.r19$x105.us.us.us.us.us" = phi i32 [ %2924, %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y100.us.us.us.us" ]
  %2737 = mul nsw i32 %"sum_input.s1.r19$x105.us.us.us.us.us", %dilation_x
  %t1072.s.us.us.us.us.us = add nsw i32 %2737, %2733
  %t1231.us.us.us.us.us = mul nsw i32 %t1072.s.us.us.us.us.us, %17
  %2738 = add i32 %t1231.us.us.us.us.us, %2736
  %t1073.us.us.us.us.us = sub i32 %2738, %t1037
  %2739 = add i32 %t1073.us.us.us.us.us, %2319
  %t1045.us.us.us.us.us = add i32 %2738, %2284
  %2740 = sub i32 %t1045.us.us.us.us.us, %2271
  %t1074.us.us.us.us.us = sub i32 %2740, %2272
  %2741 = add i32 %t1074.us.us.us.us.us, %2319
  %2742 = add i32 %2738, %2282
  %2743 = sub i32 %2742, %2310
  %t1075.us.us.us.us.us = sub i32 %2743, %2272
  %2744 = add i32 %t1075.us.us.us.us.us, %2319
  %2745 = add i32 %2738, %2281
  %2746 = sub i32 %2745, %2310
  %t1076.us.us.us.us.us = sub i32 %2746, %2272
  %2747 = add i32 %t1076.us.us.us.us.us, %2319
  %2748 = add i32 %2738, %2280
  %2749 = sub i32 %2748, %2310
  %t1077.us.us.us.us.us = sub i32 %2749, %2272
  %2750 = add i32 %t1077.us.us.us.us.us, %2319
  %2751 = add i32 %2738, %2279
  %2752 = sub i32 %2751, %2310
  %t1078.us.us.us.us.us = sub i32 %2752, %2272
  %2753 = add i32 %t1078.us.us.us.us.us, %2319
  %2754 = add i32 %2738, %2278
  %2755 = sub i32 %2754, %2310
  %t1079.us.us.us.us.us = sub i32 %2755, %2272
  %2756 = add i32 %t1079.us.us.us.us.us, %2319
  %2757 = add i32 %2738, %2277
  %2758 = sub i32 %2757, %2310
  %t1080.us.us.us.us.us = sub i32 %2758, %2272
  %2759 = add i32 %t1080.us.us.us.us.us, %2319
  br i1 %2313, label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124106.us.us.us.us.us"

"for sum_input.s1.r19$z.r124106.us.us.us.us.us":  ; preds = %"for sum_input.s1.r19$x103.us.us.us.us.us", %"for sum_input.s1.r19$z.r124106.us.us.us.us.us"
  %sum_input187312.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ], [ %sum_input187312.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x103.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124108.us.us.us.us.us" = phi i32 [ %2869, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x103.us.us.us.us.us" ]
  %niter1526 = phi i32 [ %niter1526.nsub.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ], [ %unroll_iter1525, %"for sum_input.s1.r19$x103.us.us.us.us.us" ]
  %2760 = shl nsw i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us", 2
  %2761 = add i32 %2739, %2760
  %2762 = getelementptr inbounds i8, i8* %13, i32 %2761
  %2763 = bitcast i8* %2762 to <4 x i8>*
  %2764 = load <4 x i8>, <4 x i8>* %2763, align 4, !tbaa !110
  %2765 = add i32 %2741, %2760
  %2766 = getelementptr inbounds i8, i8* %13, i32 %2765
  %2767 = bitcast i8* %2766 to <4 x i8>*
  %2768 = load <4 x i8>, <4 x i8>* %2767, align 4, !tbaa !110
  %2769 = add i32 %2744, %2760
  %2770 = getelementptr inbounds i8, i8* %13, i32 %2769
  %2771 = bitcast i8* %2770 to <4 x i8>*
  %2772 = load <4 x i8>, <4 x i8>* %2771, align 4, !tbaa !110
  %2773 = add i32 %2747, %2760
  %2774 = getelementptr inbounds i8, i8* %13, i32 %2773
  %2775 = bitcast i8* %2774 to <4 x i8>*
  %2776 = load <4 x i8>, <4 x i8>* %2775, align 4, !tbaa !110
  %2777 = add i32 %2750, %2760
  %2778 = getelementptr inbounds i8, i8* %13, i32 %2777
  %2779 = bitcast i8* %2778 to <4 x i8>*
  %2780 = load <4 x i8>, <4 x i8>* %2779, align 4, !tbaa !110
  %2781 = add i32 %2753, %2760
  %2782 = getelementptr inbounds i8, i8* %13, i32 %2781
  %2783 = bitcast i8* %2782 to <4 x i8>*
  %2784 = load <4 x i8>, <4 x i8>* %2783, align 4, !tbaa !110
  %2785 = add i32 %2756, %2760
  %2786 = getelementptr inbounds i8, i8* %13, i32 %2785
  %2787 = bitcast i8* %2786 to <4 x i8>*
  %2788 = load <4 x i8>, <4 x i8>* %2787, align 4, !tbaa !110
  %2789 = add i32 %2759, %2760
  %2790 = getelementptr inbounds i8, i8* %13, i32 %2789
  %2791 = bitcast i8* %2790 to <4 x i8>*
  %2792 = load <4 x i8>, <4 x i8>* %2791, align 4, !tbaa !110
  %2793 = shufflevector <4 x i8> %2764, <4 x i8> %2768, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2794 = shufflevector <4 x i8> %2772, <4 x i8> %2776, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2795 = shufflevector <4 x i8> %2780, <4 x i8> %2784, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2796 = shufflevector <4 x i8> %2788, <4 x i8> %2792, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2797 = shufflevector <8 x i8> %2793, <8 x i8> %2794, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2798 = shufflevector <8 x i8> %2795, <8 x i8> %2796, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2799 = shufflevector <16 x i8> %2797, <16 x i8> %2798, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us = zext <32 x i8> %2799 to <32 x i16>
  %2800 = shufflevector <32 x i16> %t1233.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2801 = bitcast <64 x i16> %2800 to <32 x i32>
  %2802 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2801)
  %2803 = bitcast <32 x i32> %2802 to <64 x i16>
  %2804 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2801)
  %2805 = bitcast <32 x i32> %2804 to <64 x i16>
  %2806 = add <64 x i16> %2805, %2803
  %2807 = shufflevector <64 x i16> %2806, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us = zext <16 x i16> %2807 to <16 x i32>
  %2808 = shufflevector <16 x i32> %t1232.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2809 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2808, i32 -4)
  %2810 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2809)
  %2811 = add nsw <32 x i32> %2810, %sum_input187312.sroa.0.18.us.us.us.us.us
  %2812 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2809)
  %2813 = add nsw <32 x i32> %2811, %2812
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us = shufflevector <32 x i32> %2813, <32 x i32> %sum_input187312.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2814 = shl i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us", 2
  %2815 = or i32 %2814, 4
  %2816 = add i32 %2739, %2815
  %2817 = getelementptr inbounds i8, i8* %13, i32 %2816
  %2818 = bitcast i8* %2817 to <4 x i8>*
  %2819 = load <4 x i8>, <4 x i8>* %2818, align 4, !tbaa !110
  %2820 = add i32 %2741, %2815
  %2821 = getelementptr inbounds i8, i8* %13, i32 %2820
  %2822 = bitcast i8* %2821 to <4 x i8>*
  %2823 = load <4 x i8>, <4 x i8>* %2822, align 4, !tbaa !110
  %2824 = add i32 %2744, %2815
  %2825 = getelementptr inbounds i8, i8* %13, i32 %2824
  %2826 = bitcast i8* %2825 to <4 x i8>*
  %2827 = load <4 x i8>, <4 x i8>* %2826, align 4, !tbaa !110
  %2828 = add i32 %2747, %2815
  %2829 = getelementptr inbounds i8, i8* %13, i32 %2828
  %2830 = bitcast i8* %2829 to <4 x i8>*
  %2831 = load <4 x i8>, <4 x i8>* %2830, align 4, !tbaa !110
  %2832 = add i32 %2750, %2815
  %2833 = getelementptr inbounds i8, i8* %13, i32 %2832
  %2834 = bitcast i8* %2833 to <4 x i8>*
  %2835 = load <4 x i8>, <4 x i8>* %2834, align 4, !tbaa !110
  %2836 = add i32 %2753, %2815
  %2837 = getelementptr inbounds i8, i8* %13, i32 %2836
  %2838 = bitcast i8* %2837 to <4 x i8>*
  %2839 = load <4 x i8>, <4 x i8>* %2838, align 4, !tbaa !110
  %2840 = add i32 %2756, %2815
  %2841 = getelementptr inbounds i8, i8* %13, i32 %2840
  %2842 = bitcast i8* %2841 to <4 x i8>*
  %2843 = load <4 x i8>, <4 x i8>* %2842, align 4, !tbaa !110
  %2844 = add i32 %2759, %2815
  %2845 = getelementptr inbounds i8, i8* %13, i32 %2844
  %2846 = bitcast i8* %2845 to <4 x i8>*
  %2847 = load <4 x i8>, <4 x i8>* %2846, align 4, !tbaa !110
  %2848 = shufflevector <4 x i8> %2819, <4 x i8> %2823, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2849 = shufflevector <4 x i8> %2827, <4 x i8> %2831, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2850 = shufflevector <4 x i8> %2835, <4 x i8> %2839, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2851 = shufflevector <4 x i8> %2843, <4 x i8> %2847, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2852 = shufflevector <8 x i8> %2848, <8 x i8> %2849, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2853 = shufflevector <8 x i8> %2850, <8 x i8> %2851, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2854 = shufflevector <16 x i8> %2852, <16 x i8> %2853, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us.1 = zext <32 x i8> %2854 to <32 x i16>
  %2855 = shufflevector <32 x i16> %t1233.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2856 = bitcast <64 x i16> %2855 to <32 x i32>
  %2857 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2856)
  %2858 = bitcast <32 x i32> %2857 to <64 x i16>
  %2859 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2856)
  %2860 = bitcast <32 x i32> %2859 to <64 x i16>
  %2861 = add <64 x i16> %2860, %2858
  %2862 = shufflevector <64 x i16> %2861, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us.1 = zext <16 x i16> %2862 to <16 x i32>
  %2863 = shufflevector <16 x i32> %t1232.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2864 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2863, i32 -4)
  %2865 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2864)
  %2866 = add nsw <32 x i32> %2865, %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us
  %2867 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2864)
  %2868 = add nsw <32 x i32> %2866, %2867
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1 = shufflevector <32 x i32> %2868, <32 x i32> %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2869 = add nuw nsw i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us", 2
  %niter1526.nsub.1 = add i32 %niter1526, -2
  %niter1526.ncmp.1 = icmp eq i32 %niter1526.nsub.1, 0
  br i1 %niter1526.ncmp.1, label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124106.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124106.us.us.us.us.us", %"for sum_input.s1.r19$x103.us.us.us.us.us"
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x103.us.us.us.us.us" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ]
  %sum_input187312.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x103.us.us.us.us.us" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124108.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x103.us.us.us.us.us" ], [ %2869, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ]
  br i1 %lcmp.mod1524.not, label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa"
  %2870 = shl nsw i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us.unr", 2
  %2871 = add i32 %2739, %2870
  %2872 = getelementptr inbounds i8, i8* %13, i32 %2871
  %2873 = bitcast i8* %2872 to <4 x i8>*
  %2874 = load <4 x i8>, <4 x i8>* %2873, align 4, !tbaa !110
  %2875 = add i32 %2741, %2870
  %2876 = getelementptr inbounds i8, i8* %13, i32 %2875
  %2877 = bitcast i8* %2876 to <4 x i8>*
  %2878 = load <4 x i8>, <4 x i8>* %2877, align 4, !tbaa !110
  %2879 = add i32 %2744, %2870
  %2880 = getelementptr inbounds i8, i8* %13, i32 %2879
  %2881 = bitcast i8* %2880 to <4 x i8>*
  %2882 = load <4 x i8>, <4 x i8>* %2881, align 4, !tbaa !110
  %2883 = add i32 %2747, %2870
  %2884 = getelementptr inbounds i8, i8* %13, i32 %2883
  %2885 = bitcast i8* %2884 to <4 x i8>*
  %2886 = load <4 x i8>, <4 x i8>* %2885, align 4, !tbaa !110
  %2887 = add i32 %2750, %2870
  %2888 = getelementptr inbounds i8, i8* %13, i32 %2887
  %2889 = bitcast i8* %2888 to <4 x i8>*
  %2890 = load <4 x i8>, <4 x i8>* %2889, align 4, !tbaa !110
  %2891 = add i32 %2753, %2870
  %2892 = getelementptr inbounds i8, i8* %13, i32 %2891
  %2893 = bitcast i8* %2892 to <4 x i8>*
  %2894 = load <4 x i8>, <4 x i8>* %2893, align 4, !tbaa !110
  %2895 = add i32 %2756, %2870
  %2896 = getelementptr inbounds i8, i8* %13, i32 %2895
  %2897 = bitcast i8* %2896 to <4 x i8>*
  %2898 = load <4 x i8>, <4 x i8>* %2897, align 4, !tbaa !110
  %2899 = add i32 %2759, %2870
  %2900 = getelementptr inbounds i8, i8* %13, i32 %2899
  %2901 = bitcast i8* %2900 to <4 x i8>*
  %2902 = load <4 x i8>, <4 x i8>* %2901, align 4, !tbaa !110
  %2903 = shufflevector <4 x i8> %2874, <4 x i8> %2878, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2904 = shufflevector <4 x i8> %2882, <4 x i8> %2886, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2905 = shufflevector <4 x i8> %2890, <4 x i8> %2894, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2906 = shufflevector <4 x i8> %2898, <4 x i8> %2902, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2907 = shufflevector <8 x i8> %2903, <8 x i8> %2904, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2908 = shufflevector <8 x i8> %2905, <8 x i8> %2906, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2909 = shufflevector <16 x i8> %2907, <16 x i8> %2908, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us.epil = zext <32 x i8> %2909 to <32 x i16>
  %2910 = shufflevector <32 x i16> %t1233.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2911 = bitcast <64 x i16> %2910 to <32 x i32>
  %2912 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2911)
  %2913 = bitcast <32 x i32> %2912 to <64 x i16>
  %2914 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2911)
  %2915 = bitcast <32 x i32> %2914 to <64 x i16>
  %2916 = add <64 x i16> %2915, %2913
  %2917 = shufflevector <64 x i16> %2916, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us.epil = zext <16 x i16> %2917 to <16 x i32>
  %2918 = shufflevector <16 x i32> %t1232.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2919 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2918, i32 -4)
  %2920 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2919)
  %2921 = add nsw <32 x i32> %2920, %sum_input187312.sroa.0.18.us.us.us.us.us.unr
  %2922 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2919)
  %2923 = add nsw <32 x i32> %2921, %2922
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.epil = shufflevector <32 x i32> %2923, <32 x i32> %sum_input187312.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil"
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil" ]
  %2924 = add nuw nsw i32 %"sum_input.s1.r19$x105.us.us.us.us.us", 1
  %.not354.us.us.us.us.us = icmp eq i32 %2924, %9
  br i1 %.not354.us.us.us.us.us, label %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x103.us.us.us.us.us"

"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us"
  %2925 = add nuw nsw i32 %"sum_input.s1.r19$y102.us.us.us.us", 1
  %.not353.us.us.us.us = icmp eq i32 %2925, %11
  br i1 %.not353.us.us.us.us, label %"consume sum_input109.us.us", label %"for sum_input.s1.r19$y100.us.us.us.us"

"for convolved.s1.r19$y117.us.us.us":             ; preds = %"for convolved.s1.r19$y117.preheader.us.us", %"end for convolved.s1.r19$x121.loopexit.us.us.us"
  %convolved313.sroa.122.8.us.us.us = phi <32 x i32> [ %.us-phi994.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.122.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.112.8.us.us.us = phi <32 x i32> [ %.us-phi995.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.112.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.102.8.us.us.us = phi <32 x i32> [ %.us-phi996.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.102.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.92.8.us.us.us = phi <32 x i32> [ %.us-phi997.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.92.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.77.8.us.us.us = phi <32 x i32> [ %.us-phi998.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.77.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.62.8.us.us.us = phi <32 x i32> [ %.us-phi999.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.62.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.47.8.us.us.us = phi <32 x i32> [ %.us-phi1000.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.47.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.0.22.us.us.us = phi <32 x i32> [ %.us-phi1001.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.0.21.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %"convolved.s1.r19$y119.us.us.us" = phi i32 [ %2930, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %2926 = mul nsw i32 %"convolved.s1.r19$y119.us.us.us", %dilation_y
  %2927 = add nsw i32 %2926, %2325
  %2928 = mul nsw i32 %2927, %19
  %t1106.us.us.us = add nsw i32 %2928, %2321
  %2929 = mul nsw i32 %"convolved.s1.r19$y119.us.us.us", %12
  %t1107.us.us.us = add nsw i32 %2929, %2692
  br i1 %2290, label %"for convolved.s1.r19$x120.us.us.us.us", label %"end for convolved.s1.r19$x121.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x121.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us", %"for convolved.s1.r19$y117.us.us.us"
  %.us-phi994.us.us.us = phi <32 x i32> [ %convolved313.sroa.122.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1441, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi995.us.us.us = phi <32 x i32> [ %convolved313.sroa.112.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1442, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi996.us.us.us = phi <32 x i32> [ %convolved313.sroa.102.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1443, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi997.us.us.us = phi <32 x i32> [ %convolved313.sroa.92.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1444, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi998.us.us.us = phi <32 x i32> [ %convolved313.sroa.77.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1445, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi999.us.us.us = phi <32 x i32> [ %convolved313.sroa.62.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1446, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi1000.us.us.us = phi <32 x i32> [ %convolved313.sroa.47.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1447, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi1001.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.22.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %.lcssa1448, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %2930 = add nuw nsw i32 %"convolved.s1.r19$y119.us.us.us", 1
  %.not350.us.us.us = icmp eq i32 %2930, %11
  br i1 %.not350.us.us.us, label %"consume convolved126.us.us", label %"for convolved.s1.r19$y117.us.us.us"

"for convolved.s1.r19$x120.us.us.us.us":          ; preds = %"for convolved.s1.r19$y117.us.us.us", %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us"
  %convolved313.sroa.122.9.us.us.us.us = phi <32 x i32> [ %.lcssa1441, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.122.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.112.9.us.us.us.us = phi <32 x i32> [ %.lcssa1442, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.112.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.102.9.us.us.us.us = phi <32 x i32> [ %.lcssa1443, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.102.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.92.9.us.us.us.us = phi <32 x i32> [ %.lcssa1444, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.92.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.77.9.us.us.us.us = phi <32 x i32> [ %.lcssa1445, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.77.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.62.9.us.us.us.us = phi <32 x i32> [ %.lcssa1446, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.62.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.47.9.us.us.us.us = phi <32 x i32> [ %.lcssa1447, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.47.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.0.23.us.us.us.us = phi <32 x i32> [ %.lcssa1448, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.22.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %"convolved.s1.r19$x122.us.us.us.us" = phi i32 [ %3109, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y117.us.us.us" ]
  %2931 = mul nsw i32 %"convolved.s1.r19$x122.us.us.us.us", %dilation_x
  %t1116.s.us.us.us.us = add nsw i32 %2931, %2706
  %t1115.s.us.us.us.us = add nsw i32 %2931, %2708
  %t1114.s.us.us.us.us = add nsw i32 %2931, %2710
  %t1113.s.us.us.us.us = add nsw i32 %2931, %2712
  %t1112.s.us.us.us.us = add nsw i32 %2931, %2714
  %t1111.s.us.us.us.us = add nsw i32 %2931, %2716
  %t1110.s.us.us.us.us = add nsw i32 %2931, %2718
  %t1108.s.us.us.us.us = add nsw i32 %2931, %2719
  %2932 = mul nsw i32 %t1108.s.us.us.us.us, %17
  %2933 = mul nsw i32 %"convolved.s1.r19$x122.us.us.us.us", %10
  %2934 = add nsw i32 %t1107.us.us.us, %2933
  %2935 = mul nsw i32 %t1110.s.us.us.us.us, %17
  %2936 = mul nsw i32 %t1111.s.us.us.us.us, %17
  %2937 = mul nsw i32 %t1112.s.us.us.us.us, %17
  %2938 = mul nsw i32 %t1113.s.us.us.us.us, %17
  %2939 = mul nsw i32 %t1114.s.us.us.us.us, %17
  %2940 = mul nsw i32 %t1115.s.us.us.us.us, %17
  %2941 = mul nsw i32 %t1116.s.us.us.us.us, %17
  br i1 %2315, label %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124123.us.us.us.us"

"for convolved.s1.r19$z.r124123.us.us.us.us":     ; preds = %"for convolved.s1.r19$x120.us.us.us.us", %"for convolved.s1.r19$z.r124123.us.us.us.us"
  %convolved313.sroa.122.11.us.us.us.us = phi <32 x i32> [ %3052, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.122.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.112.11.us.us.us.us = phi <32 x i32> [ %3046, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.112.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.102.11.us.us.us.us = phi <32 x i32> [ %3040, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.102.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.92.11.us.us.us.us = phi <32 x i32> [ %3034, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.92.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.77.11.us.us.us.us = phi <32 x i32> [ %3028, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.77.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.62.11.us.us.us.us = phi <32 x i32> [ %3022, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.62.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.47.11.us.us.us.us = phi <32 x i32> [ %3016, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.47.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.0.25.us.us.us.us = phi <32 x i32> [ %3010, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.0.23.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %"convolved.s1.r19$z.r124125.us.us.us.us" = phi i32 [ %3053, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %niter1536 = phi i32 [ %niter1536.nsub.1, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %unroll_iter1535, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %2942 = shl nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us", 2
  %2943 = add i32 %2942, %t1106.us.us.us
  %2944 = add i32 %2943, %2932
  %2945 = getelementptr inbounds i8, i8* %13, i32 %2944
  %2946 = bitcast i8* %2945 to i32*
  %2947 = load i32, i32* %2946, align 4, !tbaa !110
  %2948 = shl nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us", 7
  %2949 = add nsw i32 %2934, %2948
  %2950 = getelementptr inbounds i8, i8* %5, i32 %2949
  %2951 = bitcast i8* %2950 to <32 x i32>*
  %2952 = load <32 x i32>, <32 x i32>* %2951, align 128, !tbaa !106
  %2953 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2947) #11
  %2954 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.25.us.us.us.us, <32 x i32> %2952, <32 x i32> %2953) #11
  %2955 = add i32 %2943, %2935
  %2956 = getelementptr inbounds i8, i8* %13, i32 %2955
  %2957 = bitcast i8* %2956 to i32*
  %2958 = load i32, i32* %2957, align 4, !tbaa !110
  %2959 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2958) #11
  %2960 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.47.11.us.us.us.us, <32 x i32> %2952, <32 x i32> %2959) #11
  %2961 = add i32 %2943, %2936
  %2962 = getelementptr inbounds i8, i8* %13, i32 %2961
  %2963 = bitcast i8* %2962 to i32*
  %2964 = load i32, i32* %2963, align 4, !tbaa !110
  %2965 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2964) #11
  %2966 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.62.11.us.us.us.us, <32 x i32> %2952, <32 x i32> %2965) #11
  %2967 = add i32 %2943, %2937
  %2968 = getelementptr inbounds i8, i8* %13, i32 %2967
  %2969 = bitcast i8* %2968 to i32*
  %2970 = load i32, i32* %2969, align 4, !tbaa !110
  %2971 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2970) #11
  %2972 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.77.11.us.us.us.us, <32 x i32> %2952, <32 x i32> %2971) #11
  %2973 = add i32 %2943, %2938
  %2974 = getelementptr inbounds i8, i8* %13, i32 %2973
  %2975 = bitcast i8* %2974 to i32*
  %2976 = load i32, i32* %2975, align 4, !tbaa !110
  %2977 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2976) #11
  %2978 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.92.11.us.us.us.us, <32 x i32> %2952, <32 x i32> %2977) #11
  %2979 = add i32 %2943, %2939
  %2980 = getelementptr inbounds i8, i8* %13, i32 %2979
  %2981 = bitcast i8* %2980 to i32*
  %2982 = load i32, i32* %2981, align 4, !tbaa !110
  %2983 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2982) #11
  %2984 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.102.11.us.us.us.us, <32 x i32> %2952, <32 x i32> %2983) #11
  %2985 = add i32 %2943, %2940
  %2986 = getelementptr inbounds i8, i8* %13, i32 %2985
  %2987 = bitcast i8* %2986 to i32*
  %2988 = load i32, i32* %2987, align 4, !tbaa !110
  %2989 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2988) #11
  %2990 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.112.11.us.us.us.us, <32 x i32> %2952, <32 x i32> %2989) #11
  %2991 = add i32 %2943, %2941
  %2992 = getelementptr inbounds i8, i8* %13, i32 %2991
  %2993 = bitcast i8* %2992 to i32*
  %2994 = load i32, i32* %2993, align 4, !tbaa !110
  %2995 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2994) #11
  %2996 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.122.11.us.us.us.us, <32 x i32> %2952, <32 x i32> %2995) #11
  %2997 = or i32 %"convolved.s1.r19$z.r124125.us.us.us.us", 1
  %2998 = shl nsw i32 %2997, 2
  %2999 = add i32 %2998, %t1106.us.us.us
  %3000 = add i32 %2999, %2932
  %3001 = getelementptr inbounds i8, i8* %13, i32 %3000
  %3002 = bitcast i8* %3001 to i32*
  %3003 = load i32, i32* %3002, align 4, !tbaa !110
  %3004 = shl nsw i32 %2997, 7
  %3005 = add nsw i32 %2934, %3004
  %3006 = getelementptr inbounds i8, i8* %5, i32 %3005
  %3007 = bitcast i8* %3006 to <32 x i32>*
  %3008 = load <32 x i32>, <32 x i32>* %3007, align 128, !tbaa !106
  %3009 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3003) #11
  %3010 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2954, <32 x i32> %3008, <32 x i32> %3009) #11
  %3011 = add i32 %2999, %2935
  %3012 = getelementptr inbounds i8, i8* %13, i32 %3011
  %3013 = bitcast i8* %3012 to i32*
  %3014 = load i32, i32* %3013, align 4, !tbaa !110
  %3015 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3014) #11
  %3016 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2960, <32 x i32> %3008, <32 x i32> %3015) #11
  %3017 = add i32 %2999, %2936
  %3018 = getelementptr inbounds i8, i8* %13, i32 %3017
  %3019 = bitcast i8* %3018 to i32*
  %3020 = load i32, i32* %3019, align 4, !tbaa !110
  %3021 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3020) #11
  %3022 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2966, <32 x i32> %3008, <32 x i32> %3021) #11
  %3023 = add i32 %2999, %2937
  %3024 = getelementptr inbounds i8, i8* %13, i32 %3023
  %3025 = bitcast i8* %3024 to i32*
  %3026 = load i32, i32* %3025, align 4, !tbaa !110
  %3027 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3026) #11
  %3028 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2972, <32 x i32> %3008, <32 x i32> %3027) #11
  %3029 = add i32 %2999, %2938
  %3030 = getelementptr inbounds i8, i8* %13, i32 %3029
  %3031 = bitcast i8* %3030 to i32*
  %3032 = load i32, i32* %3031, align 4, !tbaa !110
  %3033 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3032) #11
  %3034 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2978, <32 x i32> %3008, <32 x i32> %3033) #11
  %3035 = add i32 %2999, %2939
  %3036 = getelementptr inbounds i8, i8* %13, i32 %3035
  %3037 = bitcast i8* %3036 to i32*
  %3038 = load i32, i32* %3037, align 4, !tbaa !110
  %3039 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3038) #11
  %3040 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2984, <32 x i32> %3008, <32 x i32> %3039) #11
  %3041 = add i32 %2999, %2940
  %3042 = getelementptr inbounds i8, i8* %13, i32 %3041
  %3043 = bitcast i8* %3042 to i32*
  %3044 = load i32, i32* %3043, align 4, !tbaa !110
  %3045 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3044) #11
  %3046 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2990, <32 x i32> %3008, <32 x i32> %3045) #11
  %3047 = add i32 %2999, %2941
  %3048 = getelementptr inbounds i8, i8* %13, i32 %3047
  %3049 = bitcast i8* %3048 to i32*
  %3050 = load i32, i32* %3049, align 4, !tbaa !110
  %3051 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3050) #11
  %3052 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %2996, <32 x i32> %3008, <32 x i32> %3051) #11
  %3053 = add nuw nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us", 2
  %niter1536.nsub.1 = add i32 %niter1536, -2
  %niter1536.ncmp.1 = icmp eq i32 %niter1536.nsub.1, 0
  br i1 %niter1536.ncmp.1, label %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124123.us.us.us.us"

"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124123.us.us.us.us", %"for convolved.s1.r19$x120.us.us.us.us"
  %.lcssa1448.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3010, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %.lcssa1447.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3016, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %.lcssa1446.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3022, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %.lcssa1445.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3028, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %.lcssa1444.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3034, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %.lcssa1443.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3040, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %.lcssa1442.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3046, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %.lcssa1441.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3052, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.122.11.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.122.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3052, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.112.11.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.112.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3046, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.102.11.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.102.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3040, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.92.11.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.92.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3034, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.77.11.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.77.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3028, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.62.11.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.62.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3022, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.47.11.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.47.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3016, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %convolved313.sroa.0.25.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.23.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3010, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  %"convolved.s1.r19$z.r124125.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x120.us.us.us.us" ], [ %3053, %"for convolved.s1.r19$z.r124123.us.us.us.us" ]
  br i1 %lcmp.mod1534.not, label %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124123.us.us.us.us.epil"

"for convolved.s1.r19$z.r124123.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa"
  %3054 = shl nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us.unr", 2
  %3055 = add i32 %3054, %t1106.us.us.us
  %3056 = shl nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us.unr", 7
  %3057 = add nsw i32 %2934, %3056
  %3058 = getelementptr inbounds i8, i8* %5, i32 %3057
  %3059 = bitcast i8* %3058 to <32 x i32>*
  %3060 = load <32 x i32>, <32 x i32>* %3059, align 128, !tbaa !106
  %3061 = add i32 %3055, %2941
  %3062 = getelementptr inbounds i8, i8* %13, i32 %3061
  %3063 = bitcast i8* %3062 to i32*
  %3064 = load i32, i32* %3063, align 4, !tbaa !110
  %3065 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3064) #11
  %3066 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.122.11.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3065) #11
  %3067 = add i32 %3055, %2940
  %3068 = getelementptr inbounds i8, i8* %13, i32 %3067
  %3069 = bitcast i8* %3068 to i32*
  %3070 = load i32, i32* %3069, align 4, !tbaa !110
  %3071 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3070) #11
  %3072 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.112.11.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3071) #11
  %3073 = add i32 %3055, %2939
  %3074 = getelementptr inbounds i8, i8* %13, i32 %3073
  %3075 = bitcast i8* %3074 to i32*
  %3076 = load i32, i32* %3075, align 4, !tbaa !110
  %3077 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3076) #11
  %3078 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.102.11.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3077) #11
  %3079 = add i32 %3055, %2938
  %3080 = getelementptr inbounds i8, i8* %13, i32 %3079
  %3081 = bitcast i8* %3080 to i32*
  %3082 = load i32, i32* %3081, align 4, !tbaa !110
  %3083 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3082) #11
  %3084 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.92.11.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3083) #11
  %3085 = add i32 %3055, %2937
  %3086 = getelementptr inbounds i8, i8* %13, i32 %3085
  %3087 = bitcast i8* %3086 to i32*
  %3088 = load i32, i32* %3087, align 4, !tbaa !110
  %3089 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3088) #11
  %3090 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.77.11.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3089) #11
  %3091 = add i32 %3055, %2936
  %3092 = getelementptr inbounds i8, i8* %13, i32 %3091
  %3093 = bitcast i8* %3092 to i32*
  %3094 = load i32, i32* %3093, align 4, !tbaa !110
  %3095 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3094) #11
  %3096 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.62.11.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3095) #11
  %3097 = add i32 %3055, %2935
  %3098 = getelementptr inbounds i8, i8* %13, i32 %3097
  %3099 = bitcast i8* %3098 to i32*
  %3100 = load i32, i32* %3099, align 4, !tbaa !110
  %3101 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3100) #11
  %3102 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.47.11.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3101) #11
  %3103 = add i32 %3055, %2932
  %3104 = getelementptr inbounds i8, i8* %13, i32 %3103
  %3105 = bitcast i8* %3104 to i32*
  %3106 = load i32, i32* %3105, align 4, !tbaa !110
  %3107 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3106) #11
  %3108 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.25.us.us.us.us.unr, <32 x i32> %3060, <32 x i32> %3107) #11
  br label %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us"

"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124123.us.us.us.us.epil"
  %.lcssa1448 = phi <32 x i32> [ %.lcssa1448.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3108, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %.lcssa1447 = phi <32 x i32> [ %.lcssa1447.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3102, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %.lcssa1446 = phi <32 x i32> [ %.lcssa1446.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3096, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %.lcssa1445 = phi <32 x i32> [ %.lcssa1445.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3090, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %.lcssa1444 = phi <32 x i32> [ %.lcssa1444.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3084, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %.lcssa1443 = phi <32 x i32> [ %.lcssa1443.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3078, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %.lcssa1442 = phi <32 x i32> [ %.lcssa1442.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3072, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %.lcssa1441 = phi <32 x i32> [ %.lcssa1441.ph, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us.unr-lcssa" ], [ %3066, %"for convolved.s1.r19$z.r124123.us.us.us.us.epil" ]
  %3109 = add nuw nsw i32 %"convolved.s1.r19$x122.us.us.us.us", 1
  %.not351.us.us.us.us = icmp eq i32 %3109, %9
  br i1 %.not351.us.us.us.us, label %"end for convolved.s1.r19$x121.loopexit.us.us.us", label %"for convolved.s1.r19$x120.us.us.us.us"

next_bb75:                                        ; preds = %next_bb22
  br i1 %101, label %then_bb127, label %next_bb128

then_bb127:                                       ; preds = %next_bb75
  %3110 = mul nsw i32 %19, %18
  %3111 = mul nsw i32 %17, %16
  %3112 = mul nsw i32 %22, %20
  %3113 = add i32 %3112, %3110
  %t1121 = add i32 %3113, %3111
  %3114 = icmp sgt i32 %21, 0
  br i1 %3114, label %"for output.s0.b.rebased129.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased129.preheader":           ; preds = %then_bb127
  %3115 = icmp sgt i32 %29, 0
  %.neg749 = mul i32 %30, %28
  %.neg750 = mul i32 %27, %25
  %.neg751 = mul i32 %31, %20
  %3116 = icmp sgt i32 %11, 0
  %3117 = icmp sgt i32 %9, 0
  %3118 = icmp sgt i32 %7, 0
  %3119 = ashr i32 %4, 7
  %3120 = icmp sgt i32 %4, 127
  %3121 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %3122 = shufflevector <32 x i32> %3121, <32 x i32> undef, <32 x i32> zeroinitializer
  %3123 = sext <32 x i32> %3122 to <32 x i64>
  %3124 = icmp sgt i32 %a497, 0
  %3125 = select i1 %3124, i32 %a497, i32 0
  %3126 = shl nuw i32 1, %3125
  %3127 = ashr i32 %3126, 1
  %3128 = zext i8 %output_zero to i16
  %3129 = insertelement <128 x i16> undef, i16 %3128, i32 0
  %3130 = shufflevector <128 x i16> %3129, <128 x i16> undef, <128 x i32> zeroinitializer
  %3131 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %3132 = shufflevector <128 x i8> %3131, <128 x i8> undef, <128 x i32> zeroinitializer
  %3133 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %3134 = shufflevector <128 x i8> %3133, <128 x i8> undef, <128 x i32> zeroinitializer
  %3135 = bitcast <128 x i16> %3130 to <64 x i32>
  %3136 = bitcast <128 x i8> %3132 to <32 x i32>
  %3137 = bitcast <128 x i8> %3134 to <32 x i32>
  %reass.add760 = add i32 %.neg749, %.neg750
  %reass.add761 = add i32 %reass.add760, %.neg751
  br i1 %3115, label %"for output.s0.b.rebased129.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased129.us.preheader":        ; preds = %"for output.s0.b.rebased129.preheader"
  %3138 = add i32 %7, -1
  %3139 = add i32 %9, -1
  %brmerge1315.demorgan = and i1 %3117, %3118
  %xtraiter1500 = and i32 %7, 7
  %3140 = icmp ult i32 %3138, 7
  %unroll_iter1505 = and i32 %7, -8
  %lcmp.mod1502.not = icmp eq i32 %xtraiter1500, 0
  %xtraiter1507 = and i32 %9, 3
  %3141 = icmp ult i32 %3139, 3
  %unroll_iter1512 = and i32 %9, -4
  %lcmp.mod1509.not = icmp eq i32 %xtraiter1507, 0
  %xtraiter1514 = and i32 %7, 3
  %3142 = icmp ult i32 %3138, 3
  %unroll_iter1521 = and i32 %7, -4
  %lcmp.mod1516.not = icmp eq i32 %xtraiter1514, 0
  br label %"for output.s0.b.rebased129.us"

"for output.s0.b.rebased129.us":                  ; preds = %"for output.s0.b.rebased129.us.preheader", %"end for output.s0.y.rebased133.loopexit.us"
  %sum_input314.sroa.0.14.us = phi <6 x i32> [ %sum_input314.sroa.0.26.us, %"end for output.s0.y.rebased133.loopexit.us" ], [ undef, %"for output.s0.b.rebased129.us.preheader" ]
  %output.s0.b.rebased131.us = phi i32 [ %3330, %"end for output.s0.y.rebased133.loopexit.us" ], [ 0, %"for output.s0.b.rebased129.us.preheader" ]
  %3143 = add nsw i32 %output.s0.b.rebased131.us, %20
  %3144 = mul nsw i32 %3143, %31
  %3145 = mul nsw i32 %3143, %22
  %3146 = sub i32 %3145, %t1121
  %3147 = sub i32 %3145, %3113
  %3148 = sub i32 %3144, %reass.add761
  br label %"for output.s0.y.rebased132.us"

"for output.s0.y.rebased132.us":                  ; preds = %"for output.s0.b.rebased129.us", %"end for output.s0.x.xo136.us"
  %sum_input314.sroa.0.15.us = phi <6 x i32> [ %sum_input314.sroa.0.26.us, %"end for output.s0.x.xo136.us" ], [ %sum_input314.sroa.0.14.us, %"for output.s0.b.rebased129.us" ]
  %output.s0.y.rebased134.us = phi i32 [ %3307, %"end for output.s0.x.xo136.us" ], [ 0, %"for output.s0.b.rebased129.us" ]
  %3149 = add nsw i32 %output.s0.y.rebased134.us, %28
  %3150 = mul nsw i32 %3149, %30
  %3151 = mul nsw i32 %3149, %stride_y
  %t1133.us = add i32 %3148, %3150
  br label %"for output.s0.x.xo135.us"

"for output.s0.x.xo135.us":                       ; preds = %"end for output.s0.c.co162.us", %"for output.s0.y.rebased132.us"
  %sum_input314.sroa.0.17.us = phi <6 x i32> [ %sum_input314.sroa.0.15.us, %"for output.s0.y.rebased132.us" ], [ %sum_input314.sroa.0.26.us, %"end for output.s0.c.co162.us" ]
  %output.s0.x.xo137.us = phi i32 [ 0, %"for output.s0.y.rebased132.us" ], [ %3306, %"end for output.s0.c.co162.us" ]
  br i1 %t843.not, label %"consume sum_input160.us", label %then_bb140.us

then_bb140.us:                                    ; preds = %"for output.s0.x.xo135.us"
  %sum_input314.sroa.0.0.vec.insert510.us = insertelement <6 x i32> %sum_input314.sroa.0.17.us, i32 0, i32 0
  br i1 %t844, label %then_bb143.us, label %next_bb144.us

next_bb144.us:                                    ; preds = %then_bb140.us
  br i1 %3116, label %"for sum_input.s1.r19$y151.preheader.us", label %"consume sum_input160.us", !prof !96

then_bb143.us:                                    ; preds = %then_bb140.us
  br i1 %3116, label %"for sum_input.s1.r19$y145.preheader.us", label %"consume sum_input160.us", !prof !96

"for sum_input.s1.r19$y145.us":                   ; preds = %"for sum_input.s1.r19$y145.preheader.us", %"end for sum_input.s1.r19$x149.us"
  %sum_input314.sroa.0.18.us = phi <6 x i32> [ %sum_input314.sroa.0.20.us, %"end for sum_input.s1.r19$x149.us" ], [ %sum_input314.sroa.0.0.vec.insert510.us, %"for sum_input.s1.r19$y145.preheader.us" ]
  %"sum_input.s1.r19$y147.us" = phi i32 [ %3197, %"end for sum_input.s1.r19$x149.us" ], [ 0, %"for sum_input.s1.r19$y145.preheader.us" ]
  br i1 %3117, label %"for sum_input.s1.r19$x148.preheader.us", label %"end for sum_input.s1.r19$x149.us", !prof !96

"for sum_input.s1.r19$x148.us":                   ; preds = %"for sum_input.s1.r19$x148.preheader.us", %"for sum_input.s1.r19$x148.us"
  %sum_input314.sroa.0.19.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert506.us.3, %"for sum_input.s1.r19$x148.us" ], [ %sum_input314.sroa.0.18.us, %"for sum_input.s1.r19$x148.preheader.us" ]
  %"sum_input.s1.r19$x150.us" = phi i32 [ %3187, %"for sum_input.s1.r19$x148.us" ], [ 0, %"for sum_input.s1.r19$x148.preheader.us" ]
  %niter1513 = phi i32 [ %niter1513.nsub.3, %"for sum_input.s1.r19$x148.us" ], [ %unroll_iter1512, %"for sum_input.s1.r19$x148.preheader.us" ]
  %sum_input314.sroa.0.0.vec.extract508.us = extractelement <6 x i32> %sum_input314.sroa.0.19.us, i32 0
  %3152 = mul nsw i32 %"sum_input.s1.r19$x150.us", %dilation_x
  %reass.add758.us = add i32 %3327, %3152
  %reass.mul759.us = shl i32 %reass.add758.us, 2
  %3153 = add i32 %t1136.us, %reass.mul759.us
  %3154 = getelementptr inbounds i8, i8* %13, i32 %3153
  %3155 = bitcast i8* %3154 to <4 x i8>*
  %3156 = load <4 x i8>, <4 x i8>* %3155, align 4, !tbaa !110
  %3157 = zext <4 x i8> %3156 to <4 x i32>
  %3158 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3157) #9
  %3159 = add nsw i32 %3158, %sum_input314.sroa.0.0.vec.extract508.us
  %3160 = or i32 %"sum_input.s1.r19$x150.us", 1
  %3161 = mul nsw i32 %3160, %dilation_x
  %reass.add758.us.1 = add i32 %3327, %3161
  %reass.mul759.us.1 = shl i32 %reass.add758.us.1, 2
  %3162 = add i32 %t1136.us, %reass.mul759.us.1
  %3163 = getelementptr inbounds i8, i8* %13, i32 %3162
  %3164 = bitcast i8* %3163 to <4 x i8>*
  %3165 = load <4 x i8>, <4 x i8>* %3164, align 4, !tbaa !110
  %3166 = zext <4 x i8> %3165 to <4 x i32>
  %3167 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3166) #9
  %3168 = add nsw i32 %3167, %3159
  %3169 = or i32 %"sum_input.s1.r19$x150.us", 2
  %3170 = mul nsw i32 %3169, %dilation_x
  %reass.add758.us.2 = add i32 %3327, %3170
  %reass.mul759.us.2 = shl i32 %reass.add758.us.2, 2
  %3171 = add i32 %t1136.us, %reass.mul759.us.2
  %3172 = getelementptr inbounds i8, i8* %13, i32 %3171
  %3173 = bitcast i8* %3172 to <4 x i8>*
  %3174 = load <4 x i8>, <4 x i8>* %3173, align 4, !tbaa !110
  %3175 = zext <4 x i8> %3174 to <4 x i32>
  %3176 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3175) #9
  %3177 = add nsw i32 %3176, %3168
  %sum_input314.sroa.0.0.vec.insert506.us.2 = insertelement <6 x i32> %sum_input314.sroa.0.19.us, i32 %3177, i32 0
  %3178 = or i32 %"sum_input.s1.r19$x150.us", 3
  %3179 = mul nsw i32 %3178, %dilation_x
  %reass.add758.us.3 = add i32 %3327, %3179
  %reass.mul759.us.3 = shl i32 %reass.add758.us.3, 2
  %3180 = add i32 %t1136.us, %reass.mul759.us.3
  %3181 = getelementptr inbounds i8, i8* %13, i32 %3180
  %3182 = bitcast i8* %3181 to <4 x i8>*
  %3183 = load <4 x i8>, <4 x i8>* %3182, align 4, !tbaa !110
  %3184 = zext <4 x i8> %3183 to <4 x i32>
  %3185 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3184) #9
  %3186 = add nsw i32 %3185, %3177
  %sum_input314.sroa.0.0.vec.insert506.us.3 = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert506.us.2, i32 %3186, i32 0
  %3187 = add nuw nsw i32 %"sum_input.s1.r19$x150.us", 4
  %niter1513.nsub.3 = add i32 %niter1513, -4
  %niter1513.ncmp.3 = icmp eq i32 %niter1513.nsub.3, 0
  br i1 %niter1513.ncmp.3, label %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x148.us"

"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x148.us"
  %sum_input314.sroa.0.0.vec.insert506.us.2.le = insertelement <6 x i32> %sum_input314.sroa.0.19.us, i32 %3177, i32 0
  %sum_input314.sroa.0.0.vec.insert506.us.3.le = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert506.us.2.le, i32 %3186, i32 0
  br label %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa": ; preds = %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit", %"for sum_input.s1.r19$x148.preheader.us"
  %sum_input314.sroa.0.19.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x148.preheader.us" ], [ %sum_input314.sroa.0.0.vec.insert506.us.2.le, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1451.ph = phi i32 [ undef, %"for sum_input.s1.r19$x148.preheader.us" ], [ %3186, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input314.sroa.0.19.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.18.us, %"for sum_input.s1.r19$x148.preheader.us" ], [ %sum_input314.sroa.0.0.vec.insert506.us.3.le, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x150.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x148.preheader.us" ], [ %3187, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1509.not, label %"end for sum_input.s1.r19$x149.us.loopexit", label %"for sum_input.s1.r19$x148.us.epil"

"for sum_input.s1.r19$x148.us.epil":              ; preds = %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x148.us.epil"
  %sum_input314.sroa.0.19.us.epil = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert506.us.epil, %"for sum_input.s1.r19$x148.us.epil" ], [ %sum_input314.sroa.0.19.us.unr, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x150.us.epil" = phi i32 [ %3196, %"for sum_input.s1.r19$x148.us.epil" ], [ %"sum_input.s1.r19$x150.us.unr", %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ]
  %epil.iter1508 = phi i32 [ %epil.iter1508.sub, %"for sum_input.s1.r19$x148.us.epil" ], [ %xtraiter1507, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ]
  %sum_input314.sroa.0.0.vec.extract508.us.epil = extractelement <6 x i32> %sum_input314.sroa.0.19.us.epil, i32 0
  %3188 = mul nsw i32 %"sum_input.s1.r19$x150.us.epil", %dilation_x
  %reass.add758.us.epil = add i32 %3327, %3188
  %reass.mul759.us.epil = shl i32 %reass.add758.us.epil, 2
  %3189 = add i32 %t1136.us, %reass.mul759.us.epil
  %3190 = getelementptr inbounds i8, i8* %13, i32 %3189
  %3191 = bitcast i8* %3190 to <4 x i8>*
  %3192 = load <4 x i8>, <4 x i8>* %3191, align 4, !tbaa !110
  %3193 = zext <4 x i8> %3192 to <4 x i32>
  %3194 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3193) #9
  %3195 = add nsw i32 %3194, %sum_input314.sroa.0.0.vec.extract508.us.epil
  %sum_input314.sroa.0.0.vec.insert506.us.epil = insertelement <6 x i32> %sum_input314.sroa.0.19.us.epil, i32 %3195, i32 0
  %3196 = add nuw nsw i32 %"sum_input.s1.r19$x150.us.epil", 1
  %epil.iter1508.sub = add i32 %epil.iter1508, -1
  %epil.iter1508.cmp.not = icmp eq i32 %epil.iter1508.sub, 0
  br i1 %epil.iter1508.cmp.not, label %"end for sum_input.s1.r19$x149.us.loopexit", label %"for sum_input.s1.r19$x148.us.epil", !llvm.loop !117

"end for sum_input.s1.r19$x149.us.loopexit":      ; preds = %"for sum_input.s1.r19$x148.us.epil", %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa"
  %sum_input314.sroa.0.19.us.lcssa = phi <6 x i32> [ %sum_input314.sroa.0.19.us.lcssa.ph, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ], [ %sum_input314.sroa.0.19.us.epil, %"for sum_input.s1.r19$x148.us.epil" ]
  %.lcssa1451 = phi i32 [ %.lcssa1451.ph, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ], [ %3195, %"for sum_input.s1.r19$x148.us.epil" ]
  %sum_input314.sroa.0.0.vec.insert506.us.le = insertelement <6 x i32> %sum_input314.sroa.0.19.us.lcssa, i32 %.lcssa1451, i32 0
  br label %"end for sum_input.s1.r19$x149.us"

"end for sum_input.s1.r19$x149.us":               ; preds = %"end for sum_input.s1.r19$x149.us.loopexit", %"for sum_input.s1.r19$y145.us"
  %sum_input314.sroa.0.20.us = phi <6 x i32> [ %sum_input314.sroa.0.18.us, %"for sum_input.s1.r19$y145.us" ], [ %sum_input314.sroa.0.0.vec.insert506.us.le, %"end for sum_input.s1.r19$x149.us.loopexit" ]
  %3197 = add nuw nsw i32 %"sum_input.s1.r19$y147.us", 1
  %.not344.us = icmp eq i32 %3197, %11
  br i1 %.not344.us, label %"consume sum_input160.us", label %"for sum_input.s1.r19$y145.us"

"consume sum_input160.us.loopexit1239":           ; preds = %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us"
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1450, i32 0
  br label %"consume sum_input160.us"

"consume sum_input160.us":                        ; preds = %"end for sum_input.s1.r19$x149.us", %"for sum_input.s1.r19$y151.preheader.us", %"consume sum_input160.us.loopexit1239", %then_bb143.us, %next_bb144.us, %"for output.s0.x.xo135.us"
  %sum_input314.sroa.0.26.us = phi <6 x i32> [ %sum_input314.sroa.0.17.us, %"for output.s0.x.xo135.us" ], [ %sum_input314.sroa.0.0.vec.insert510.us, %then_bb143.us ], [ %sum_input314.sroa.0.0.vec.insert510.us, %next_bb144.us ], [ %sum_input314.sroa.0.0.vec.insert510.us, %"for sum_input.s1.r19$y151.preheader.us" ], [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le.le, %"consume sum_input160.us.loopexit1239" ], [ %sum_input314.sroa.0.20.us, %"end for sum_input.s1.r19$x149.us" ]
  br i1 %3120, label %"for output.s0.c.co161.preheader.us", label %"end for output.s0.c.co162.us", !prof !96

"for output.s0.c.co161.us":                       ; preds = %"for output.s0.c.co161.preheader.us", %"consume convolved177.us"
  %output.s0.c.co163.us = phi i32 [ %3305, %"consume convolved177.us" ], [ 0, %"for output.s0.c.co161.preheader.us" ]
  %3198 = shl nsw i32 %output.s0.c.co163.us, 7
  %3199 = getelementptr inbounds i32, i32* %offset_c, i32 %3198
  %3200 = bitcast i32* %3199 to <32 x i32>*
  %3201 = load <32 x i32>, <32 x i32>* %3200, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb166.us, label %next_bb167.us

next_bb167.us:                                    ; preds = %"for output.s0.c.co161.us"
  %3202 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3319) #11
  %3203 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3201, <32 x i32> %3202) #11
  %3204 = getelementptr inbounds i32, i32* %3199, i32 32
  %3205 = bitcast i32* %3204 to <32 x i32>*
  %3206 = load <32 x i32>, <32 x i32>* %3205, align 128, !tbaa !104
  %3207 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3206, <32 x i32> %3202) #11
  %3208 = getelementptr inbounds i32, i32* %3199, i32 64
  %3209 = bitcast i32* %3208 to <32 x i32>*
  %3210 = load <32 x i32>, <32 x i32>* %3209, align 128, !tbaa !104
  %3211 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3210, <32 x i32> %3202) #11
  %3212 = getelementptr inbounds i32, i32* %3199, i32 96
  %3213 = bitcast i32* %3212 to <32 x i32>*
  %3214 = load <32 x i32>, <32 x i32>* %3213, align 128, !tbaa !104
  %3215 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3214, <32 x i32> %3202) #11
  br label %after_bb165.us

then_bb166.us:                                    ; preds = %"for output.s0.c.co161.us"
  %3216 = getelementptr inbounds i32, i32* %3199, i32 32
  %3217 = bitcast i32* %3216 to <32 x i32>*
  %3218 = load <32 x i32>, <32 x i32>* %3217, align 128, !tbaa !104
  %3219 = getelementptr inbounds i32, i32* %3199, i32 64
  %3220 = bitcast i32* %3219 to <32 x i32>*
  %3221 = load <32 x i32>, <32 x i32>* %3220, align 128, !tbaa !104
  %3222 = getelementptr inbounds i32, i32* %3199, i32 96
  %3223 = bitcast i32* %3222 to <32 x i32>*
  %3224 = load <32 x i32>, <32 x i32>* %3223, align 128, !tbaa !104
  br label %after_bb165.us

after_bb165.us:                                   ; preds = %then_bb166.us, %next_bb167.us
  %convolved313.sroa.77.14.us = phi <32 x i32> [ %3224, %then_bb166.us ], [ %3215, %next_bb167.us ]
  %convolved313.sroa.62.14.us = phi <32 x i32> [ %3221, %then_bb166.us ], [ %3211, %next_bb167.us ]
  %convolved313.sroa.47.14.us = phi <32 x i32> [ %3218, %then_bb166.us ], [ %3207, %next_bb167.us ]
  %convolved313.sroa.0.28.us = phi <32 x i32> [ %3201, %then_bb166.us ], [ %3203, %next_bb167.us ]
  br i1 %3116, label %"for convolved.s1.r19$y168.preheader.us", label %"consume convolved177.us", !prof !96

"consume convolved177.us":                        ; preds = %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us", %"for convolved.s1.r19$y168.preheader.split.us.us", %"for convolved.s1.r19$y168.preheader.us", %after_bb165.us
  %convolved313.sroa.77.20.us = phi <32 x i32> [ %convolved313.sroa.77.14.us, %after_bb165.us ], [ %convolved313.sroa.77.14.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.77.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %.lcssa1452, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %convolved313.sroa.62.20.us = phi <32 x i32> [ %convolved313.sroa.62.14.us, %after_bb165.us ], [ %convolved313.sroa.62.14.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.62.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %.lcssa1453, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %convolved313.sroa.47.20.us = phi <32 x i32> [ %convolved313.sroa.47.14.us, %after_bb165.us ], [ %convolved313.sroa.47.14.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.47.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %.lcssa1454, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %convolved313.sroa.0.34.us = phi <32 x i32> [ %convolved313.sroa.0.28.us, %after_bb165.us ], [ %convolved313.sroa.0.28.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.0.28.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %.lcssa1455, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %3225 = sext <32 x i32> %convolved313.sroa.0.34.us to <32 x i64>
  %a465.us = mul nsw <32 x i64> %3225, %3123
  %3226 = icmp slt <32 x i64> %a465.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3227 = select <32 x i1> %3226, <32 x i64> %a465.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3228 = add nsw <32 x i64> %3227, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a464.us = ashr <32 x i64> %3228, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3229 = icmp slt <32 x i64> %a464.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a463.us = select <32 x i1> %3229, <32 x i64> %a464.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3230 = icmp sgt <32 x i64> %a463.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3231 = select <32 x i1> %3230, <32 x i64> %a463.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3232 = trunc <32 x i64> %3231 to <32 x i32>
  %3233 = sext <32 x i32> %convolved313.sroa.47.20.us to <32 x i64>
  %a469.us = mul nsw <32 x i64> %3233, %3123
  %3234 = icmp slt <32 x i64> %a469.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3235 = select <32 x i1> %3234, <32 x i64> %a469.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3236 = add nsw <32 x i64> %3235, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a468.us = ashr <32 x i64> %3236, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3237 = icmp slt <32 x i64> %a468.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a467.us = select <32 x i1> %3237, <32 x i64> %a468.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3238 = icmp sgt <32 x i64> %a467.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3239 = select <32 x i1> %3238, <32 x i64> %a467.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3240 = trunc <32 x i64> %3239 to <32 x i32>
  %3241 = sext <32 x i32> %convolved313.sroa.62.20.us to <32 x i64>
  %a473.us = mul nsw <32 x i64> %3241, %3123
  %3242 = icmp slt <32 x i64> %a473.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3243 = select <32 x i1> %3242, <32 x i64> %a473.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3244 = add nsw <32 x i64> %3243, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a472.us = ashr <32 x i64> %3244, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3245 = icmp slt <32 x i64> %a472.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a471.us = select <32 x i1> %3245, <32 x i64> %a472.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3246 = icmp sgt <32 x i64> %a471.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3247 = select <32 x i1> %3246, <32 x i64> %a471.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3248 = trunc <32 x i64> %3247 to <32 x i32>
  %3249 = sext <32 x i32> %convolved313.sroa.77.20.us to <32 x i64>
  %a477.us = mul nsw <32 x i64> %3249, %3123
  %3250 = icmp slt <32 x i64> %a477.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3251 = select <32 x i1> %3250, <32 x i64> %a477.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3252 = add nsw <32 x i64> %3251, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a476.us = ashr <32 x i64> %3252, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3253 = icmp slt <32 x i64> %a476.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a475.us = select <32 x i1> %3253, <32 x i64> %a476.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3254 = icmp sgt <32 x i64> %a475.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3255 = select <32 x i1> %3254, <32 x i64> %a475.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3256 = trunc <32 x i64> %3255 to <32 x i32>
  %3257 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3232, <32 x i32> %3323) #11
  %3258 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3257, <32 x i32> %3322) #11
  %3259 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3258, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3260 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3240, <32 x i32> %3323) #11
  %3261 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3260, <32 x i32> %3322) #11
  %3262 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3261, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3263 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3259, <32 x i32> %3262) #11
  %3264 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3263) #11
  %3265 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3264, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3266 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3263) #11
  %3267 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3266) #11
  %3268 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3265, <32 x i32> %3267) #11
  %3269 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3268) #11
  %3270 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3268) #11
  %3271 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %3269, <32 x i32> %3270) #11
  %3272 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3248, <32 x i32> %3323) #11
  %3273 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3272, <32 x i32> %3322) #11
  %3274 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3273, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3275 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3256, <32 x i32> %3323) #11
  %3276 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3275, <32 x i32> %3322) #11
  %3277 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3276, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3278 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3274, <32 x i32> %3277) #11
  %3279 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3278) #11
  %3280 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3279, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3281 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3278) #11
  %3282 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3281) #11
  %3283 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3280, <32 x i32> %3282) #11
  %3284 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3283) #11
  %3285 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3283) #11
  %3286 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %3284, <32 x i32> %3285) #11
  %3287 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3271, <32 x i32> %3286) #11
  %3288 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %3287, <64 x i32> %3135) #11
  %3289 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3288) #11
  %3290 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %3289) #11
  %3291 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %3290) #11
  %3292 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3288) #11
  %3293 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %3292) #11
  %3294 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %3293) #11
  %3295 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3291, <32 x i32> %3294) #11
  %3296 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3295) #11
  %3297 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3295) #11
  %3298 = call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %3296, <32 x i32> %3297) #11
  %3299 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3136, <32 x i32> %3298) #11
  %3300 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3299, <32 x i32> %3137) #11
  %3301 = shl nsw i32 %output.s0.c.co163.us, 7
  %3302 = add i32 %3325, %3301
  %3303 = getelementptr inbounds i8, i8* %23, i32 %3302
  %3304 = bitcast i8* %3303 to <32 x i32>*
  store <32 x i32> %3300, <32 x i32>* %3304, align 1, !tbaa !113
  %3305 = add nuw nsw i32 %output.s0.c.co163.us, 1
  %.not337.us = icmp eq i32 %3305, %3119
  br i1 %.not337.us, label %"end for output.s0.c.co162.us", label %"for output.s0.c.co161.us"

"end for output.s0.c.co162.us":                   ; preds = %"consume convolved177.us", %"consume sum_input160.us"
  %3306 = add nuw nsw i32 %output.s0.x.xo137.us, 1
  %.not335.us = icmp eq i32 %3306, %26
  br i1 %.not335.us, label %"end for output.s0.x.xo136.us", label %"for output.s0.x.xo135.us"

"end for output.s0.x.xo136.us":                   ; preds = %"end for output.s0.c.co162.us"
  %3307 = add nuw nsw i32 %output.s0.y.rebased134.us, 1
  %.not336.us = icmp eq i32 %3307, %29
  br i1 %.not336.us, label %"end for output.s0.y.rebased133.loopexit.us", label %"for output.s0.y.rebased132.us"

"for convolved.s1.r19$y168.preheader.us":         ; preds = %after_bb165.us
  %3308 = shl nsw i32 %output.s0.c.co163.us, 2
  %3309 = or i32 %3308, 3
  %3310 = mul nsw i32 %3309, %8
  %3311 = or i32 %3308, 2
  %3312 = mul nsw i32 %3311, %8
  %3313 = or i32 %3308, 1
  %3314 = mul nsw i32 %3313, %8
  %3315 = mul nsw i32 %output.s0.c.co163.us, %8
  br i1 %3117, label %"for convolved.s1.r19$y168.preheader.split.us.us", label %"consume convolved177.us", !prof !96

"for sum_input.s1.r19$x148.preheader.us":         ; preds = %"for sum_input.s1.r19$y145.us"
  %3316 = mul nsw i32 %"sum_input.s1.r19$y147.us", %dilation_y
  %3317 = add nsw i32 %3316, %3151
  %3318 = mul nsw i32 %3317, %19
  %t1136.us = add i32 %3147, %3318
  br i1 %3141, label %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x148.us"

"for output.s0.c.co161.preheader.us":             ; preds = %"consume sum_input160.us"
  %sum_input314.sroa.0.0.vec.extract501.us = extractelement <6 x i32> %sum_input314.sroa.0.26.us, i32 0
  %3319 = mul nsw i32 %sum_input314.sroa.0.0.vec.extract501.us, %309
  %3320 = add nsw i32 %output.s0.x.xo137.us, %25
  %3321 = mul nsw i32 %3320, %stride_x
  %3322 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %a497) #11
  %3323 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3127) #11
  %3324 = mul nsw i32 %3320, %27
  %3325 = add i32 %t1133.us, %3324
  br label %"for output.s0.c.co161.us"

"for sum_input.s1.r19$y145.preheader.us":         ; preds = %then_bb143.us
  %3326 = add nsw i32 %output.s0.x.xo137.us, %25
  %3327 = sub i32 %3326, %16
  br label %"for sum_input.s1.r19$y145.us"

"for sum_input.s1.r19$y151.preheader.us":         ; preds = %next_bb144.us
  %3328 = add nsw i32 %output.s0.x.xo137.us, %25
  %3329 = mul nsw i32 %3328, %stride_x
  br i1 %brmerge1315.demorgan, label %"for sum_input.s1.r19$y151.us.us.us", label %"consume sum_input160.us", !prof !103

"end for output.s0.y.rebased133.loopexit.us":     ; preds = %"end for output.s0.x.xo136.us"
  %3330 = add nuw nsw i32 %output.s0.b.rebased131.us, 1
  %.not334.us = icmp eq i32 %3330, %21
  br i1 %.not334.us, label %after_bb3, label %"for output.s0.b.rebased129.us"

"for sum_input.s1.r19$y151.us.us.us":             ; preds = %"for sum_input.s1.r19$y151.preheader.us", %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us"
  %sum_input314.sroa.0.21.us.us.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le, %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us" ], [ %sum_input314.sroa.0.0.vec.insert510.us, %"for sum_input.s1.r19$y151.preheader.us" ]
  %"sum_input.s1.r19$y153.us.us.us" = phi i32 [ %3419, %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y151.preheader.us" ]
  %3331 = mul nsw i32 %"sum_input.s1.r19$y153.us.us.us", %dilation_y
  %3332 = add nsw i32 %3331, %3151
  %3333 = mul nsw i32 %3332, %19
  %t1138.us.us.us = add nsw i32 %3146, %3333
  br label %"for sum_input.s1.r19$x154.us.us.us.us"

"for sum_input.s1.r19$x154.us.us.us.us":          ; preds = %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us", %"for sum_input.s1.r19$y151.us.us.us"
  %sum_input314.sroa.0.22.us.us.us.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us" ], [ %sum_input314.sroa.0.21.us.us.us, %"for sum_input.s1.r19$y151.us.us.us" ]
  %"sum_input.s1.r19$x156.us.us.us.us" = phi i32 [ %3418, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y151.us.us.us" ]
  %3334 = mul nsw i32 %"sum_input.s1.r19$x156.us.us.us.us", %dilation_x
  %t1139.s.us.us.us.us = add nsw i32 %3334, %3329
  %3335 = mul nsw i32 %t1139.s.us.us.us.us, %17
  %3336 = add nsw i32 %t1138.us.us.us, %3335
  br i1 %3140, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124157.us.us.us.us"

"for sum_input.s1.r19$z.r124157.us.us.us.us":     ; preds = %"for sum_input.s1.r19$x154.us.us.us.us", %"for sum_input.s1.r19$z.r124157.us.us.us.us"
  %sum_input314.sroa.0.24.us.us.us.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7, %"for sum_input.s1.r19$z.r124157.us.us.us.us" ], [ %sum_input314.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x154.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124159.us.us.us.us" = phi i32 [ %3408, %"for sum_input.s1.r19$z.r124157.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x154.us.us.us.us" ]
  %niter1506 = phi i32 [ %niter1506.nsub.7, %"for sum_input.s1.r19$z.r124157.us.us.us.us" ], [ %unroll_iter1505, %"for sum_input.s1.r19$x154.us.us.us.us" ]
  %sum_input314.sroa.0.0.vec.extract504.us.us.us.us = extractelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us, i32 0
  %3337 = shl nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3338 = add nsw i32 %3336, %3337
  %3339 = getelementptr inbounds i8, i8* %13, i32 %3338
  %3340 = bitcast i8* %3339 to <4 x i8>*
  %3341 = load <4 x i8>, <4 x i8>* %3340, align 4, !tbaa !110
  %3342 = zext <4 x i8> %3341 to <4 x i32>
  %3343 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3342) #9
  %3344 = add nsw i32 %3343, %sum_input314.sroa.0.0.vec.extract504.us.us.us.us
  %3345 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3346 = or i32 %3345, 4
  %3347 = add nsw i32 %3336, %3346
  %3348 = getelementptr inbounds i8, i8* %13, i32 %3347
  %3349 = bitcast i8* %3348 to <4 x i8>*
  %3350 = load <4 x i8>, <4 x i8>* %3349, align 4, !tbaa !110
  %3351 = zext <4 x i8> %3350 to <4 x i32>
  %3352 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3351) #9
  %3353 = add nsw i32 %3352, %3344
  %3354 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3355 = or i32 %3354, 8
  %3356 = add nsw i32 %3336, %3355
  %3357 = getelementptr inbounds i8, i8* %13, i32 %3356
  %3358 = bitcast i8* %3357 to <4 x i8>*
  %3359 = load <4 x i8>, <4 x i8>* %3358, align 4, !tbaa !110
  %3360 = zext <4 x i8> %3359 to <4 x i32>
  %3361 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3360) #9
  %3362 = add nsw i32 %3361, %3353
  %3363 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3364 = or i32 %3363, 12
  %3365 = add nsw i32 %3336, %3364
  %3366 = getelementptr inbounds i8, i8* %13, i32 %3365
  %3367 = bitcast i8* %3366 to <4 x i8>*
  %3368 = load <4 x i8>, <4 x i8>* %3367, align 4, !tbaa !110
  %3369 = zext <4 x i8> %3368 to <4 x i32>
  %3370 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3369) #9
  %3371 = add nsw i32 %3370, %3362
  %3372 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3373 = or i32 %3372, 16
  %3374 = add nsw i32 %3336, %3373
  %3375 = getelementptr inbounds i8, i8* %13, i32 %3374
  %3376 = bitcast i8* %3375 to <4 x i8>*
  %3377 = load <4 x i8>, <4 x i8>* %3376, align 4, !tbaa !110
  %3378 = zext <4 x i8> %3377 to <4 x i32>
  %3379 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3378) #9
  %3380 = add nsw i32 %3379, %3371
  %3381 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3382 = or i32 %3381, 20
  %3383 = add nsw i32 %3336, %3382
  %3384 = getelementptr inbounds i8, i8* %13, i32 %3383
  %3385 = bitcast i8* %3384 to <4 x i8>*
  %3386 = load <4 x i8>, <4 x i8>* %3385, align 4, !tbaa !110
  %3387 = zext <4 x i8> %3386 to <4 x i32>
  %3388 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3387) #9
  %3389 = add nsw i32 %3388, %3380
  %3390 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3391 = or i32 %3390, 24
  %3392 = add nsw i32 %3336, %3391
  %3393 = getelementptr inbounds i8, i8* %13, i32 %3392
  %3394 = bitcast i8* %3393 to <4 x i8>*
  %3395 = load <4 x i8>, <4 x i8>* %3394, align 4, !tbaa !110
  %3396 = zext <4 x i8> %3395 to <4 x i32>
  %3397 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3396) #9
  %3398 = add nsw i32 %3397, %3389
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6 = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us, i32 %3398, i32 0
  %3399 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3400 = or i32 %3399, 28
  %3401 = add nsw i32 %3336, %3400
  %3402 = getelementptr inbounds i8, i8* %13, i32 %3401
  %3403 = bitcast i8* %3402 to <4 x i8>*
  %3404 = load <4 x i8>, <4 x i8>* %3403, align 4, !tbaa !110
  %3405 = zext <4 x i8> %3404 to <4 x i32>
  %3406 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3405) #9
  %3407 = add nsw i32 %3406, %3398
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7 = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6, i32 %3407, i32 0
  %3408 = add nuw nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 8
  %niter1506.nsub.7 = add i32 %niter1506, -8
  %niter1506.ncmp.7 = icmp eq i32 %niter1506.nsub.7, 0
  br i1 %niter1506.ncmp.7, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124157.us.us.us.us"

"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124157.us.us.us.us"
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us, i32 %3398, i32 0
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7.le = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6.le, i32 %3407, i32 0
  br label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x154.us.us.us.us"
  %sum_input314.sroa.0.24.us.us.us.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1450.ph = phi i32 [ undef, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %3407, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %sum_input314.sroa.0.24.us.us.us.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124159.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %3408, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1502.not, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124157.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil"
  %sum_input314.sroa.0.24.us.us.us.us.epil = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ], [ %sum_input314.sroa.0.24.us.us.us.us.unr, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124159.us.us.us.us.epil" = phi i32 [ %3417, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124159.us.us.us.us.unr", %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1501 = phi i32 [ %epil.iter1501.sub, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ], [ %xtraiter1500, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ]
  %sum_input314.sroa.0.0.vec.extract504.us.us.us.us.epil = extractelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.epil, i32 0
  %3409 = shl nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us.epil", 2
  %3410 = add nsw i32 %3336, %3409
  %3411 = getelementptr inbounds i8, i8* %13, i32 %3410
  %3412 = bitcast i8* %3411 to <4 x i8>*
  %3413 = load <4 x i8>, <4 x i8>* %3412, align 4, !tbaa !110
  %3414 = zext <4 x i8> %3413 to <4 x i32>
  %3415 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3414) #9
  %3416 = add nsw i32 %3415, %sum_input314.sroa.0.0.vec.extract504.us.us.us.us.epil
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.epil = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.epil, i32 %3416, i32 0
  %3417 = add nuw nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us.epil", 1
  %epil.iter1501.sub = add i32 %epil.iter1501, -1
  %epil.iter1501.cmp.not = icmp eq i32 %epil.iter1501.sub, 0
  br i1 %epil.iter1501.cmp.not, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil", !llvm.loop !118

"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa"
  %sum_input314.sroa.0.24.us.us.us.us.lcssa = phi <6 x i32> [ %sum_input314.sroa.0.24.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ], [ %sum_input314.sroa.0.24.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ]
  %.lcssa1450 = phi i32 [ %.lcssa1450.ph, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ], [ %3416, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ]
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1450, i32 0
  %3418 = add nuw nsw i32 %"sum_input.s1.r19$x156.us.us.us.us", 1
  %.not342.us.us.us.us = icmp eq i32 %3418, %9
  br i1 %.not342.us.us.us.us, label %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us", label %"for sum_input.s1.r19$x154.us.us.us.us"

"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us"
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1450, i32 0
  %3419 = add nuw nsw i32 %"sum_input.s1.r19$y153.us.us.us", 1
  %.not341.us.us.us = icmp eq i32 %3419, %11
  br i1 %.not341.us.us.us, label %"consume sum_input160.us.loopexit1239", label %"for sum_input.s1.r19$y151.us.us.us"

"for convolved.s1.r19$y168.preheader.split.us.us": ; preds = %"for convolved.s1.r19$y168.preheader.us"
  br i1 %3118, label %"for convolved.s1.r19$y168.us.us.us", label %"consume convolved177.us", !prof !96

"for convolved.s1.r19$y168.us.us.us":             ; preds = %"for convolved.s1.r19$y168.preheader.split.us.us", %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us"
  %convolved313.sroa.77.15.us.us.us = phi <32 x i32> [ %.lcssa1452, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.77.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %convolved313.sroa.62.15.us.us.us = phi <32 x i32> [ %.lcssa1453, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.62.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %convolved313.sroa.47.15.us.us.us = phi <32 x i32> [ %.lcssa1454, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.47.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %convolved313.sroa.0.29.us.us.us = phi <32 x i32> [ %.lcssa1455, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.0.28.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %"convolved.s1.r19$y170.us.us.us" = phi i32 [ %3587, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %3420 = mul nsw i32 %"convolved.s1.r19$y170.us.us.us", %dilation_y
  %3421 = add nsw i32 %3420, %3151
  %3422 = mul nsw i32 %3421, %19
  %t1148.us.us.us = add nsw i32 %3146, %3422
  %3423 = mul nsw i32 %"convolved.s1.r19$y170.us.us.us", %12
  br label %"for convolved.s1.r19$x171.us.us.us.us"

"for convolved.s1.r19$x171.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us", %"for convolved.s1.r19$y168.us.us.us"
  %convolved313.sroa.77.16.us.us.us.us = phi <32 x i32> [ %.lcssa1452, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.77.15.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %convolved313.sroa.62.16.us.us.us.us = phi <32 x i32> [ %.lcssa1453, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.62.15.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %convolved313.sroa.47.16.us.us.us.us = phi <32 x i32> [ %.lcssa1454, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.47.15.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %convolved313.sroa.0.30.us.us.us.us = phi <32 x i32> [ %.lcssa1455, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.29.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %"convolved.s1.r19$x173.us.us.us.us" = phi i32 [ %3586, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y168.us.us.us" ]
  %3424 = mul nsw i32 %"convolved.s1.r19$x173.us.us.us.us", %dilation_x
  %t1154.s.us.us.us.us = add nsw i32 %3424, %3321
  %3425 = mul nsw i32 %"convolved.s1.r19$x173.us.us.us.us", %10
  %t1155.us.us.us.us = add nsw i32 %3425, %3423
  %3426 = mul nsw i32 %t1154.s.us.us.us.us, %17
  %3427 = add nsw i32 %t1148.us.us.us, %3426
  %3428 = add i32 %t1155.us.us.us.us, %3314
  %3429 = add i32 %t1155.us.us.us.us, %3312
  %3430 = add i32 %t1155.us.us.us.us, %3310
  br i1 %3142, label %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124174.us.us.us.us"

"for convolved.s1.r19$z.r124174.us.us.us.us":     ; preds = %"for convolved.s1.r19$x171.us.us.us.us", %"for convolved.s1.r19$z.r124174.us.us.us.us"
  %convolved313.sroa.77.18.us.us.us.us = phi <32 x i32> [ %3553, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.77.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %convolved313.sroa.62.18.us.us.us.us = phi <32 x i32> [ %3548, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.62.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %convolved313.sroa.47.18.us.us.us.us = phi <32 x i32> [ %3543, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.47.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %convolved313.sroa.0.32.us.us.us.us = phi <32 x i32> [ %3537, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.0.30.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %"convolved.s1.r19$z.r124176.us.us.us.us" = phi i32 [ %3554, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %niter1522 = phi i32 [ %niter1522.nsub.3, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %unroll_iter1521, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %3431 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 2
  %3432 = add nsw i32 %3427, %3431
  %3433 = getelementptr inbounds i8, i8* %13, i32 %3432
  %3434 = bitcast i8* %3433 to i32*
  %3435 = load i32, i32* %3434, align 4, !tbaa !110
  %3436 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 5
  %3437 = add nsw i32 %3436, %3315
  %3438 = shl nsw i32 %3437, 2
  %3439 = add nsw i32 %t1155.us.us.us.us, %3438
  %3440 = getelementptr inbounds i8, i8* %5, i32 %3439
  %3441 = bitcast i8* %3440 to <32 x i32>*
  %3442 = load <32 x i32>, <32 x i32>* %3441, align 128, !tbaa !106
  %3443 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3435) #11
  %3444 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.32.us.us.us.us, <32 x i32> %3442, <32 x i32> %3443) #11
  %3445 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 7
  %3446 = add i32 %3428, %3445
  %3447 = getelementptr inbounds i8, i8* %5, i32 %3446
  %3448 = bitcast i8* %3447 to <32 x i32>*
  %3449 = load <32 x i32>, <32 x i32>* %3448, align 128, !tbaa !106
  %3450 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.47.18.us.us.us.us, <32 x i32> %3449, <32 x i32> %3443) #11
  %3451 = add i32 %3429, %3445
  %3452 = getelementptr inbounds i8, i8* %5, i32 %3451
  %3453 = bitcast i8* %3452 to <32 x i32>*
  %3454 = load <32 x i32>, <32 x i32>* %3453, align 128, !tbaa !106
  %3455 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.62.18.us.us.us.us, <32 x i32> %3454, <32 x i32> %3443) #11
  %3456 = add i32 %3430, %3445
  %3457 = getelementptr inbounds i8, i8* %5, i32 %3456
  %3458 = bitcast i8* %3457 to <32 x i32>*
  %3459 = load <32 x i32>, <32 x i32>* %3458, align 128, !tbaa !106
  %3460 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.77.18.us.us.us.us, <32 x i32> %3459, <32 x i32> %3443) #11
  %3461 = or i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 1
  %3462 = shl nsw i32 %3461, 2
  %3463 = add nsw i32 %3427, %3462
  %3464 = getelementptr inbounds i8, i8* %13, i32 %3463
  %3465 = bitcast i8* %3464 to i32*
  %3466 = load i32, i32* %3465, align 4, !tbaa !110
  %3467 = shl nsw i32 %3461, 5
  %3468 = add nsw i32 %3467, %3315
  %3469 = shl nsw i32 %3468, 2
  %3470 = add nsw i32 %t1155.us.us.us.us, %3469
  %3471 = getelementptr inbounds i8, i8* %5, i32 %3470
  %3472 = bitcast i8* %3471 to <32 x i32>*
  %3473 = load <32 x i32>, <32 x i32>* %3472, align 128, !tbaa !106
  %3474 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3466) #11
  %3475 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3444, <32 x i32> %3473, <32 x i32> %3474) #11
  %3476 = shl nsw i32 %3461, 7
  %3477 = add i32 %3428, %3476
  %3478 = getelementptr inbounds i8, i8* %5, i32 %3477
  %3479 = bitcast i8* %3478 to <32 x i32>*
  %3480 = load <32 x i32>, <32 x i32>* %3479, align 128, !tbaa !106
  %3481 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3450, <32 x i32> %3480, <32 x i32> %3474) #11
  %3482 = add i32 %3429, %3476
  %3483 = getelementptr inbounds i8, i8* %5, i32 %3482
  %3484 = bitcast i8* %3483 to <32 x i32>*
  %3485 = load <32 x i32>, <32 x i32>* %3484, align 128, !tbaa !106
  %3486 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3455, <32 x i32> %3485, <32 x i32> %3474) #11
  %3487 = add i32 %3430, %3476
  %3488 = getelementptr inbounds i8, i8* %5, i32 %3487
  %3489 = bitcast i8* %3488 to <32 x i32>*
  %3490 = load <32 x i32>, <32 x i32>* %3489, align 128, !tbaa !106
  %3491 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3460, <32 x i32> %3490, <32 x i32> %3474) #11
  %3492 = or i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 2
  %3493 = shl nsw i32 %3492, 2
  %3494 = add nsw i32 %3427, %3493
  %3495 = getelementptr inbounds i8, i8* %13, i32 %3494
  %3496 = bitcast i8* %3495 to i32*
  %3497 = load i32, i32* %3496, align 4, !tbaa !110
  %3498 = shl nsw i32 %3492, 5
  %3499 = add nsw i32 %3498, %3315
  %3500 = shl nsw i32 %3499, 2
  %3501 = add nsw i32 %t1155.us.us.us.us, %3500
  %3502 = getelementptr inbounds i8, i8* %5, i32 %3501
  %3503 = bitcast i8* %3502 to <32 x i32>*
  %3504 = load <32 x i32>, <32 x i32>* %3503, align 128, !tbaa !106
  %3505 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3497) #11
  %3506 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3475, <32 x i32> %3504, <32 x i32> %3505) #11
  %3507 = shl nsw i32 %3492, 7
  %3508 = add i32 %3428, %3507
  %3509 = getelementptr inbounds i8, i8* %5, i32 %3508
  %3510 = bitcast i8* %3509 to <32 x i32>*
  %3511 = load <32 x i32>, <32 x i32>* %3510, align 128, !tbaa !106
  %3512 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3481, <32 x i32> %3511, <32 x i32> %3505) #11
  %3513 = add i32 %3429, %3507
  %3514 = getelementptr inbounds i8, i8* %5, i32 %3513
  %3515 = bitcast i8* %3514 to <32 x i32>*
  %3516 = load <32 x i32>, <32 x i32>* %3515, align 128, !tbaa !106
  %3517 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3486, <32 x i32> %3516, <32 x i32> %3505) #11
  %3518 = add i32 %3430, %3507
  %3519 = getelementptr inbounds i8, i8* %5, i32 %3518
  %3520 = bitcast i8* %3519 to <32 x i32>*
  %3521 = load <32 x i32>, <32 x i32>* %3520, align 128, !tbaa !106
  %3522 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3491, <32 x i32> %3521, <32 x i32> %3505) #11
  %3523 = or i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 3
  %3524 = shl nsw i32 %3523, 2
  %3525 = add nsw i32 %3427, %3524
  %3526 = getelementptr inbounds i8, i8* %13, i32 %3525
  %3527 = bitcast i8* %3526 to i32*
  %3528 = load i32, i32* %3527, align 4, !tbaa !110
  %3529 = shl nsw i32 %3523, 5
  %3530 = add nsw i32 %3529, %3315
  %3531 = shl nsw i32 %3530, 2
  %3532 = add nsw i32 %t1155.us.us.us.us, %3531
  %3533 = getelementptr inbounds i8, i8* %5, i32 %3532
  %3534 = bitcast i8* %3533 to <32 x i32>*
  %3535 = load <32 x i32>, <32 x i32>* %3534, align 128, !tbaa !106
  %3536 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3528) #11
  %3537 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3506, <32 x i32> %3535, <32 x i32> %3536) #11
  %3538 = shl nsw i32 %3523, 7
  %3539 = add i32 %3428, %3538
  %3540 = getelementptr inbounds i8, i8* %5, i32 %3539
  %3541 = bitcast i8* %3540 to <32 x i32>*
  %3542 = load <32 x i32>, <32 x i32>* %3541, align 128, !tbaa !106
  %3543 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3512, <32 x i32> %3542, <32 x i32> %3536) #11
  %3544 = add i32 %3429, %3538
  %3545 = getelementptr inbounds i8, i8* %5, i32 %3544
  %3546 = bitcast i8* %3545 to <32 x i32>*
  %3547 = load <32 x i32>, <32 x i32>* %3546, align 128, !tbaa !106
  %3548 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3517, <32 x i32> %3547, <32 x i32> %3536) #11
  %3549 = add i32 %3430, %3538
  %3550 = getelementptr inbounds i8, i8* %5, i32 %3549
  %3551 = bitcast i8* %3550 to <32 x i32>*
  %3552 = load <32 x i32>, <32 x i32>* %3551, align 128, !tbaa !106
  %3553 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3522, <32 x i32> %3552, <32 x i32> %3536) #11
  %3554 = add nuw nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 4
  %niter1522.nsub.3 = add i32 %niter1522, -4
  %niter1522.ncmp.3 = icmp eq i32 %niter1522.nsub.3, 0
  br i1 %niter1522.ncmp.3, label %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124174.us.us.us.us"

"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124174.us.us.us.us", %"for convolved.s1.r19$x171.us.us.us.us"
  %.lcssa1455.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3537, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %.lcssa1454.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3543, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %.lcssa1453.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3548, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %.lcssa1452.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3553, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %convolved313.sroa.77.18.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.77.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3553, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %convolved313.sroa.62.18.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.62.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3548, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %convolved313.sroa.47.18.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.47.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3543, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %convolved313.sroa.0.32.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.30.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3537, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  %"convolved.s1.r19$z.r124176.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x171.us.us.us.us" ], [ %3554, %"for convolved.s1.r19$z.r124174.us.us.us.us" ]
  br i1 %lcmp.mod1516.not, label %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124174.us.us.us.us.epil"

"for convolved.s1.r19$z.r124174.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124174.us.us.us.us.epil"
  %convolved313.sroa.77.18.us.us.us.us.epil = phi <32 x i32> [ %3584, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ], [ %convolved313.sroa.77.18.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ]
  %convolved313.sroa.62.18.us.us.us.us.epil = phi <32 x i32> [ %3579, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ], [ %convolved313.sroa.62.18.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ]
  %convolved313.sroa.47.18.us.us.us.us.epil = phi <32 x i32> [ %3574, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ], [ %convolved313.sroa.47.18.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ]
  %convolved313.sroa.0.32.us.us.us.us.epil = phi <32 x i32> [ %3568, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ], [ %convolved313.sroa.0.32.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ]
  %"convolved.s1.r19$z.r124176.us.us.us.us.epil" = phi i32 [ %3585, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ], [ %"convolved.s1.r19$z.r124176.us.us.us.us.unr", %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1515 = phi i32 [ %epil.iter1515.sub, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ], [ %xtraiter1514, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ]
  %3555 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us.epil", 2
  %3556 = add nsw i32 %3427, %3555
  %3557 = getelementptr inbounds i8, i8* %13, i32 %3556
  %3558 = bitcast i8* %3557 to i32*
  %3559 = load i32, i32* %3558, align 4, !tbaa !110
  %3560 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us.epil", 5
  %3561 = add nsw i32 %3560, %3315
  %3562 = shl nsw i32 %3561, 2
  %3563 = add nsw i32 %t1155.us.us.us.us, %3562
  %3564 = getelementptr inbounds i8, i8* %5, i32 %3563
  %3565 = bitcast i8* %3564 to <32 x i32>*
  %3566 = load <32 x i32>, <32 x i32>* %3565, align 128, !tbaa !106
  %3567 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3559) #11
  %3568 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.32.us.us.us.us.epil, <32 x i32> %3566, <32 x i32> %3567) #11
  %3569 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us.epil", 7
  %3570 = add i32 %3428, %3569
  %3571 = getelementptr inbounds i8, i8* %5, i32 %3570
  %3572 = bitcast i8* %3571 to <32 x i32>*
  %3573 = load <32 x i32>, <32 x i32>* %3572, align 128, !tbaa !106
  %3574 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.47.18.us.us.us.us.epil, <32 x i32> %3573, <32 x i32> %3567) #11
  %3575 = add i32 %3429, %3569
  %3576 = getelementptr inbounds i8, i8* %5, i32 %3575
  %3577 = bitcast i8* %3576 to <32 x i32>*
  %3578 = load <32 x i32>, <32 x i32>* %3577, align 128, !tbaa !106
  %3579 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.62.18.us.us.us.us.epil, <32 x i32> %3578, <32 x i32> %3567) #11
  %3580 = add i32 %3430, %3569
  %3581 = getelementptr inbounds i8, i8* %5, i32 %3580
  %3582 = bitcast i8* %3581 to <32 x i32>*
  %3583 = load <32 x i32>, <32 x i32>* %3582, align 128, !tbaa !106
  %3584 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.77.18.us.us.us.us.epil, <32 x i32> %3583, <32 x i32> %3567) #11
  %3585 = add nuw nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us.epil", 1
  %epil.iter1515.sub = add i32 %epil.iter1515, -1
  %epil.iter1515.cmp.not = icmp eq i32 %epil.iter1515.sub, 0
  br i1 %epil.iter1515.cmp.not, label %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124174.us.us.us.us.epil", !llvm.loop !119

"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124174.us.us.us.us.epil", %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa"
  %.lcssa1455 = phi <32 x i32> [ %.lcssa1455.ph, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ], [ %3568, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ]
  %.lcssa1454 = phi <32 x i32> [ %.lcssa1454.ph, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ], [ %3574, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ]
  %.lcssa1453 = phi <32 x i32> [ %.lcssa1453.ph, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ], [ %3579, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ]
  %.lcssa1452 = phi <32 x i32> [ %.lcssa1452.ph, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us.unr-lcssa" ], [ %3584, %"for convolved.s1.r19$z.r124174.us.us.us.us.epil" ]
  %3586 = add nuw nsw i32 %"convolved.s1.r19$x173.us.us.us.us", 1
  %.not339.us.us.us.us = icmp eq i32 %3586, %9
  br i1 %.not339.us.us.us.us, label %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x171.us.us.us.us"

"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us"
  %3587 = add nuw nsw i32 %"convolved.s1.r19$y170.us.us.us", 1
  %.not338.us.us.us = icmp eq i32 %3587, %11
  br i1 %.not338.us.us.us, label %"consume convolved177.us", label %"for convolved.s1.r19$y168.us.us.us"

next_bb128:                                       ; preds = %next_bb75
  %a479 = ashr i32 %4, 5
  %3588 = icmp sgt i32 %4, 31
  %3589 = select i1 %3588, i32 %a479, i32 0
  %t1167 = sub nsw i32 %122, %3589
  %3590 = mul nsw i32 %19, %18
  %3591 = mul nsw i32 %17, %16
  %3592 = mul nsw i32 %22, %20
  %3593 = add i32 %3592, %3590
  %t1163 = add i32 %3593, %3591
  %3594 = icmp sgt i32 %21, 0
  br i1 %3594, label %"for output.s0.b.rebased178.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased178.preheader":           ; preds = %next_bb128
  %3595 = icmp sgt i32 %29, 0
  %.neg = mul i32 %30, %28
  %.neg739 = mul i32 %27, %25
  %.neg740 = mul i32 %31, %20
  %reass.add = add i32 %.neg, %.neg739
  %reass.add742 = add i32 %reass.add, %.neg740
  %3596 = icmp sgt i32 %11, 0
  %3597 = icmp sgt i32 %9, 0
  %3598 = icmp sgt i32 %7, 0
  %3599 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %3600 = shufflevector <32 x i32> %3599, <32 x i32> undef, <32 x i32> zeroinitializer
  %3601 = sext <32 x i32> %3600 to <32 x i64>
  %3602 = icmp sgt i32 %a497, 0
  %3603 = select i1 %3602, i32 %a497, i32 0
  %3604 = shl nuw i32 1, %3603
  %3605 = ashr i32 %3604, 1
  %3606 = zext i8 %output_zero to i16
  %3607 = insertelement <32 x i16> undef, i16 %3606, i32 0
  %3608 = shufflevector <32 x i16> %3607, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3609 = bitcast <64 x i16> %3608 to <32 x i32>
  %3610 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %3611 = shufflevector <32 x i8> %3610, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3612 = bitcast <128 x i8> %3611 to <32 x i32>
  %3613 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %3614 = shufflevector <32 x i8> %3613, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3615 = bitcast <128 x i8> %3614 to <32 x i32>
  %3616 = icmp sgt i32 %t1167, 0
  %3617 = insertelement <32 x i32> undef, i32 %4, i32 0
  %3618 = shufflevector <32 x i32> %3617, <32 x i32> undef, <32 x i32> zeroinitializer
  %3619 = add i32 %7, -1
  %3620 = add i32 %9, -1
  %xtraiter1474 = and i32 %7, 7
  %3621 = icmp ult i32 %3619, 7
  %unroll_iter1479 = and i32 %7, -8
  %lcmp.mod1476.not = icmp eq i32 %xtraiter1474, 0
  %xtraiter1481 = and i32 %9, 3
  %3622 = icmp ult i32 %3620, 3
  %unroll_iter1486 = and i32 %9, -4
  %lcmp.mod1483.not = icmp eq i32 %xtraiter1481, 0
  %brmerge1320.demorgan = and i1 %3597, %3598
  %or.cond1394 = and i1 %3596, %brmerge1320.demorgan
  %xtraiter1488 = and i32 %7, 7
  %3623 = icmp ult i32 %3619, 7
  %unroll_iter1492 = and i32 %7, -8
  %lcmp.mod1490.not = icmp eq i32 %xtraiter1488, 0
  %brmerge1323.demorgan = and i1 %3597, %3598
  %or.cond1393 = and i1 %3596, %brmerge1323.demorgan
  %xtraiter1494 = and i32 %7, 7
  %3624 = icmp ult i32 %3619, 7
  %unroll_iter1498 = and i32 %7, -8
  %lcmp.mod1496.not = icmp eq i32 %xtraiter1494, 0
  br label %"for output.s0.b.rebased178"

"for output.s0.b.rebased178":                     ; preds = %"for output.s0.b.rebased178.preheader", %"end for output.s0.y.rebased182"
  %sum_input187312.sroa.0.21 = phi <32 x i32> [ %sum_input187312.sroa.0.23, %"end for output.s0.y.rebased182" ], [ undef, %"for output.s0.b.rebased178.preheader" ]
  %convolved313.sroa.0.35 = phi <32 x i32> [ %convolved313.sroa.0.37, %"end for output.s0.y.rebased182" ], [ undef, %"for output.s0.b.rebased178.preheader" ]
  %output.s0.b.rebased180 = phi i32 [ %4171, %"end for output.s0.y.rebased182" ], [ 0, %"for output.s0.b.rebased178.preheader" ]
  br i1 %3595, label %"for output.s0.y.rebased181.preheader", label %"end for output.s0.y.rebased182", !prof !96

"for output.s0.y.rebased181.preheader":           ; preds = %"for output.s0.b.rebased178"
  %3625 = add nsw i32 %output.s0.b.rebased180, %20
  %3626 = mul nsw i32 %3625, %31
  %3627 = sub i32 %3626, %reass.add742
  %3628 = mul nsw i32 %3625, %22
  %3629 = sub i32 %3628, %t1163
  %3630 = sub i32 %3628, %3593
  br i1 %100, label %"for output.s0.y.rebased181.us", label %"end for output.s0.y.rebased182", !prof !96

"for output.s0.y.rebased181.us":                  ; preds = %"for output.s0.y.rebased181.preheader", %"end for output.s0.x.xo185.loopexit.us"
  %sum_input187312.sroa.0.22.us = phi <32 x i32> [ %sum_input187312.sroa.0.34.us, %"end for output.s0.x.xo185.loopexit.us" ], [ %sum_input187312.sroa.0.21, %"for output.s0.y.rebased181.preheader" ]
  %convolved313.sroa.0.36.us = phi <32 x i32> [ %convolved313.sroa.0.50.us, %"end for output.s0.x.xo185.loopexit.us" ], [ %convolved313.sroa.0.35, %"for output.s0.y.rebased181.preheader" ]
  %output.s0.y.rebased183.us = phi i32 [ %3825, %"end for output.s0.x.xo185.loopexit.us" ], [ 0, %"for output.s0.y.rebased181.preheader" ]
  %3631 = add nsw i32 %output.s0.y.rebased183.us, %28
  %3632 = mul nsw i32 %3631, %30
  %t1180.us = add i32 %3627, %3632
  %3633 = mul nsw i32 %3631, %stride_y
  br label %"for output.s0.x.xo184.us"

"for output.s0.x.xo184.us":                       ; preds = %"for output.s0.y.rebased181.us", %"end for output.s0.c.co.rebased.us"
  %sum_input187312.sroa.0.24.us = phi <32 x i32> [ %sum_input187312.sroa.0.34.us, %"end for output.s0.c.co.rebased.us" ], [ %sum_input187312.sroa.0.22.us, %"for output.s0.y.rebased181.us" ]
  %convolved313.sroa.0.38.us = phi <32 x i32> [ %convolved313.sroa.0.50.us, %"end for output.s0.c.co.rebased.us" ], [ %convolved313.sroa.0.36.us, %"for output.s0.y.rebased181.us" ]
  %output.s0.x.xo186.us = phi i32 [ %3805, %"end for output.s0.c.co.rebased.us" ], [ 0, %"for output.s0.y.rebased181.us" ]
  br i1 %t843.not, label %"consume sum_input210.us", label %then_bb190.us

then_bb190.us:                                    ; preds = %"for output.s0.x.xo184.us"
  %sum_input187312.sroa.0.0.vec.insert655.us = insertelement <32 x i32> %sum_input187312.sroa.0.24.us, i32 0, i32 0
  br i1 %t844, label %then_bb193.us, label %next_bb194.us

next_bb194.us:                                    ; preds = %then_bb190.us
  br i1 %3596, label %"for sum_input.s1.r19$y201.preheader.us", label %"consume sum_input210.us", !prof !96

then_bb193.us:                                    ; preds = %then_bb190.us
  br i1 %3596, label %"for sum_input.s1.r19$y195.preheader.us", label %"consume sum_input210.us", !prof !96

"for sum_input.s1.r19$y195.us":                   ; preds = %"for sum_input.s1.r19$y195.preheader.us", %"end for sum_input.s1.r19$x199.us"
  %sum_input187312.sroa.0.26.us = phi <32 x i32> [ %sum_input187312.sroa.0.28.us, %"end for sum_input.s1.r19$x199.us" ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %"for sum_input.s1.r19$y195.preheader.us" ]
  %"sum_input.s1.r19$y197.us" = phi i32 [ %3679, %"end for sum_input.s1.r19$x199.us" ], [ 0, %"for sum_input.s1.r19$y195.preheader.us" ]
  br i1 %3597, label %"for sum_input.s1.r19$x198.preheader.us", label %"end for sum_input.s1.r19$x199.us", !prof !96

"for sum_input.s1.r19$x198.us":                   ; preds = %"for sum_input.s1.r19$x198.preheader.us", %"for sum_input.s1.r19$x198.us"
  %sum_input187312.sroa.0.27.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert651.us.3, %"for sum_input.s1.r19$x198.us" ], [ %sum_input187312.sroa.0.26.us, %"for sum_input.s1.r19$x198.preheader.us" ]
  %"sum_input.s1.r19$x200.us" = phi i32 [ %3669, %"for sum_input.s1.r19$x198.us" ], [ 0, %"for sum_input.s1.r19$x198.preheader.us" ]
  %niter1487 = phi i32 [ %niter1487.nsub.3, %"for sum_input.s1.r19$x198.us" ], [ %unroll_iter1486, %"for sum_input.s1.r19$x198.preheader.us" ]
  %sum_input187312.sroa.0.0.vec.extract653.us = extractelement <32 x i32> %sum_input187312.sroa.0.27.us, i32 0
  %3634 = mul nsw i32 %"sum_input.s1.r19$x200.us", %dilation_x
  %reass.add747.us = add i32 %3822, %3634
  %reass.mul748.us = shl i32 %reass.add747.us, 2
  %3635 = add i32 %t1183.us, %reass.mul748.us
  %3636 = getelementptr inbounds i8, i8* %13, i32 %3635
  %3637 = bitcast i8* %3636 to <4 x i8>*
  %3638 = load <4 x i8>, <4 x i8>* %3637, align 4, !tbaa !110
  %3639 = zext <4 x i8> %3638 to <4 x i32>
  %3640 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3639) #9
  %3641 = add nsw i32 %3640, %sum_input187312.sroa.0.0.vec.extract653.us
  %3642 = or i32 %"sum_input.s1.r19$x200.us", 1
  %3643 = mul nsw i32 %3642, %dilation_x
  %reass.add747.us.1 = add i32 %3822, %3643
  %reass.mul748.us.1 = shl i32 %reass.add747.us.1, 2
  %3644 = add i32 %t1183.us, %reass.mul748.us.1
  %3645 = getelementptr inbounds i8, i8* %13, i32 %3644
  %3646 = bitcast i8* %3645 to <4 x i8>*
  %3647 = load <4 x i8>, <4 x i8>* %3646, align 4, !tbaa !110
  %3648 = zext <4 x i8> %3647 to <4 x i32>
  %3649 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3648) #9
  %3650 = add nsw i32 %3649, %3641
  %3651 = or i32 %"sum_input.s1.r19$x200.us", 2
  %3652 = mul nsw i32 %3651, %dilation_x
  %reass.add747.us.2 = add i32 %3822, %3652
  %reass.mul748.us.2 = shl i32 %reass.add747.us.2, 2
  %3653 = add i32 %t1183.us, %reass.mul748.us.2
  %3654 = getelementptr inbounds i8, i8* %13, i32 %3653
  %3655 = bitcast i8* %3654 to <4 x i8>*
  %3656 = load <4 x i8>, <4 x i8>* %3655, align 4, !tbaa !110
  %3657 = zext <4 x i8> %3656 to <4 x i32>
  %3658 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3657) #9
  %3659 = add nsw i32 %3658, %3650
  %sum_input187312.sroa.0.0.vec.insert651.us.2 = insertelement <32 x i32> %sum_input187312.sroa.0.27.us, i32 %3659, i32 0
  %3660 = or i32 %"sum_input.s1.r19$x200.us", 3
  %3661 = mul nsw i32 %3660, %dilation_x
  %reass.add747.us.3 = add i32 %3822, %3661
  %reass.mul748.us.3 = shl i32 %reass.add747.us.3, 2
  %3662 = add i32 %t1183.us, %reass.mul748.us.3
  %3663 = getelementptr inbounds i8, i8* %13, i32 %3662
  %3664 = bitcast i8* %3663 to <4 x i8>*
  %3665 = load <4 x i8>, <4 x i8>* %3664, align 4, !tbaa !110
  %3666 = zext <4 x i8> %3665 to <4 x i32>
  %3667 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3666) #9
  %3668 = add nsw i32 %3667, %3659
  %sum_input187312.sroa.0.0.vec.insert651.us.3 = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert651.us.2, i32 %3668, i32 0
  %3669 = add nuw nsw i32 %"sum_input.s1.r19$x200.us", 4
  %niter1487.nsub.3 = add i32 %niter1487, -4
  %niter1487.ncmp.3 = icmp eq i32 %niter1487.nsub.3, 0
  br i1 %niter1487.ncmp.3, label %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x198.us"

"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x198.us"
  %sum_input187312.sroa.0.0.vec.insert651.us.2.le = insertelement <32 x i32> %sum_input187312.sroa.0.27.us, i32 %3659, i32 0
  %sum_input187312.sroa.0.0.vec.insert651.us.3.le = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert651.us.2.le, i32 %3668, i32 0
  br label %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa": ; preds = %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit", %"for sum_input.s1.r19$x198.preheader.us"
  %sum_input187312.sroa.0.27.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x198.preheader.us" ], [ %sum_input187312.sroa.0.0.vec.insert651.us.2.le, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1459.ph = phi i32 [ undef, %"for sum_input.s1.r19$x198.preheader.us" ], [ %3668, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input187312.sroa.0.27.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.26.us, %"for sum_input.s1.r19$x198.preheader.us" ], [ %sum_input187312.sroa.0.0.vec.insert651.us.3.le, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x200.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x198.preheader.us" ], [ %3669, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1483.not, label %"end for sum_input.s1.r19$x199.us.loopexit", label %"for sum_input.s1.r19$x198.us.epil"

"for sum_input.s1.r19$x198.us.epil":              ; preds = %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$x198.us.epil"
  %sum_input187312.sroa.0.27.us.epil = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert651.us.epil, %"for sum_input.s1.r19$x198.us.epil" ], [ %sum_input187312.sroa.0.27.us.unr, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x200.us.epil" = phi i32 [ %3678, %"for sum_input.s1.r19$x198.us.epil" ], [ %"sum_input.s1.r19$x200.us.unr", %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ]
  %epil.iter1482 = phi i32 [ %epil.iter1482.sub, %"for sum_input.s1.r19$x198.us.epil" ], [ %xtraiter1481, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ]
  %sum_input187312.sroa.0.0.vec.extract653.us.epil = extractelement <32 x i32> %sum_input187312.sroa.0.27.us.epil, i32 0
  %3670 = mul nsw i32 %"sum_input.s1.r19$x200.us.epil", %dilation_x
  %reass.add747.us.epil = add i32 %3822, %3670
  %reass.mul748.us.epil = shl i32 %reass.add747.us.epil, 2
  %3671 = add i32 %t1183.us, %reass.mul748.us.epil
  %3672 = getelementptr inbounds i8, i8* %13, i32 %3671
  %3673 = bitcast i8* %3672 to <4 x i8>*
  %3674 = load <4 x i8>, <4 x i8>* %3673, align 4, !tbaa !110
  %3675 = zext <4 x i8> %3674 to <4 x i32>
  %3676 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3675) #9
  %3677 = add nsw i32 %3676, %sum_input187312.sroa.0.0.vec.extract653.us.epil
  %sum_input187312.sroa.0.0.vec.insert651.us.epil = insertelement <32 x i32> %sum_input187312.sroa.0.27.us.epil, i32 %3677, i32 0
  %3678 = add nuw nsw i32 %"sum_input.s1.r19$x200.us.epil", 1
  %epil.iter1482.sub = add i32 %epil.iter1482, -1
  %epil.iter1482.cmp.not = icmp eq i32 %epil.iter1482.sub, 0
  br i1 %epil.iter1482.cmp.not, label %"end for sum_input.s1.r19$x199.us.loopexit", label %"for sum_input.s1.r19$x198.us.epil", !llvm.loop !120

"end for sum_input.s1.r19$x199.us.loopexit":      ; preds = %"for sum_input.s1.r19$x198.us.epil", %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa"
  %sum_input187312.sroa.0.27.us.lcssa = phi <32 x i32> [ %sum_input187312.sroa.0.27.us.lcssa.ph, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ], [ %sum_input187312.sroa.0.27.us.epil, %"for sum_input.s1.r19$x198.us.epil" ]
  %.lcssa1459 = phi i32 [ %.lcssa1459.ph, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ], [ %3677, %"for sum_input.s1.r19$x198.us.epil" ]
  %sum_input187312.sroa.0.0.vec.insert651.us.le = insertelement <32 x i32> %sum_input187312.sroa.0.27.us.lcssa, i32 %.lcssa1459, i32 0
  br label %"end for sum_input.s1.r19$x199.us"

"end for sum_input.s1.r19$x199.us":               ; preds = %"end for sum_input.s1.r19$x199.us.loopexit", %"for sum_input.s1.r19$y195.us"
  %sum_input187312.sroa.0.28.us = phi <32 x i32> [ %sum_input187312.sroa.0.26.us, %"for sum_input.s1.r19$y195.us" ], [ %sum_input187312.sroa.0.0.vec.insert651.us.le, %"end for sum_input.s1.r19$x199.us.loopexit" ]
  %3679 = add nuw nsw i32 %"sum_input.s1.r19$y197.us", 1
  %.not332.us = icmp eq i32 %3679, %11
  br i1 %.not332.us, label %"consume sum_input210.us", label %"for sum_input.s1.r19$y195.us"

"consume sum_input210.us":                        ; preds = %"end for sum_input.s1.r19$x205.loopexit.us.us", %"end for sum_input.s1.r19$x199.us", %"for sum_input.s1.r19$y201.preheader.us", %then_bb193.us, %next_bb194.us, %"for output.s0.x.xo184.us"
  %sum_input187312.sroa.0.34.us = phi <32 x i32> [ %sum_input187312.sroa.0.24.us, %"for output.s0.x.xo184.us" ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %then_bb193.us ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %next_bb194.us ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %"for sum_input.s1.r19$y201.preheader.us" ], [ %sum_input187312.sroa.0.28.us, %"end for sum_input.s1.r19$x199.us" ], [ %.us-phi.us.us, %"end for sum_input.s1.r19$x205.loopexit.us.us" ]
  br i1 %3588, label %"for output.s0.c.co211.preheader.us", label %"end for output.s0.c.co212.us", !prof !96

"for output.s0.c.co211.us":                       ; preds = %"for output.s0.c.co211.preheader.us", %"consume convolved230.us"
  %convolved313.sroa.0.40.us = phi <32 x i32> [ %convolved313.sroa.0.48.us, %"consume convolved230.us" ], [ %convolved313.sroa.0.38.us, %"for output.s0.c.co211.preheader.us" ]
  %output.s0.c.co213.us = phi i32 [ %3718, %"consume convolved230.us" ], [ 0, %"for output.s0.c.co211.preheader.us" ]
  %3680 = shl nsw i32 %output.s0.c.co213.us, 5
  %3681 = icmp slt i32 %3680, %4
  br i1 %3681, label %then_bb216.us, label %"consume convolved230.us"

then_bb216.us:                                    ; preds = %"for output.s0.c.co211.us"
  %3682 = getelementptr inbounds i32, i32* %offset_c, i32 %3680
  %3683 = bitcast i32* %3682 to <32 x i32>*
  %3684 = load <32 x i32>, <32 x i32>* %3683, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb218.us, label %next_bb220.us

next_bb220.us:                                    ; preds = %then_bb216.us
  %3685 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3814) #11
  %3686 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3684, <32 x i32> %3685) #11
  br label %after_bb218.us

after_bb218.us:                                   ; preds = %then_bb216.us, %next_bb220.us
  %convolved313.sroa.0.42.us = phi <32 x i32> [ %3686, %next_bb220.us ], [ %3684, %then_bb216.us ]
  %3687 = mul nsw i32 %output.s0.c.co213.us, %8
  br i1 %or.cond1394, label %"for convolved.s1.r19$y221.us.us.us", label %"consume convolved230.us", !prof !103

"consume convolved230.us":                        ; preds = %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us", %after_bb218.us, %"for output.s0.c.co211.us"
  %convolved313.sroa.0.48.us = phi <32 x i32> [ %convolved313.sroa.0.42.us, %after_bb218.us ], [ %convolved313.sroa.0.40.us, %"for output.s0.c.co211.us" ], [ %.lcssa1460, %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us" ]
  %3688 = sext <32 x i32> %convolved313.sroa.0.48.us to <32 x i64>
  %a483.us = mul nsw <32 x i64> %3688, %3601
  %3689 = icmp slt <32 x i64> %a483.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3690 = select <32 x i1> %3689, <32 x i64> %a483.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3691 = add nsw <32 x i64> %3690, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a482.us = ashr <32 x i64> %3691, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3692 = icmp slt <32 x i64> %a482.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a481.us = select <32 x i1> %3692, <32 x i64> %a482.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3693 = icmp sgt <32 x i64> %a481.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3694 = select <32 x i1> %3693, <32 x i64> %a481.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3695 = trunc <32 x i64> %3694 to <32 x i32>
  %3696 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3695, <32 x i32> %3818) #11
  %3697 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3696, <32 x i32> %3817) #11
  %3698 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3697, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3699 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3698) #11
  %3700 = trunc <32 x i32> %3699 to <32 x i16>
  %3701 = shufflevector <32 x i16> %3700, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3702 = bitcast <64 x i16> %3701 to <32 x i32>
  %3703 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3702, <32 x i32> %3609) #11
  %3704 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3703, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3705 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3704, <32 x i32> zeroinitializer) #11
  %3706 = bitcast <32 x i32> %3705 to <64 x i16>
  %3707 = shufflevector <64 x i16> %3706, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3708 = trunc <32 x i16> %3707 to <32 x i8>
  %3709 = shufflevector <32 x i8> %3708, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3710 = bitcast <128 x i8> %3709 to <32 x i32>
  %3711 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3710, <32 x i32> %3612) #11
  %3712 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3711, <32 x i32> %3615) #11
  %3713 = bitcast <32 x i32> %3712 to <128 x i8>
  %3714 = shufflevector <128 x i8> %3713, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3715 = add nsw i32 %3820, %3680
  %3716 = getelementptr inbounds i8, i8* %23, i32 %3715
  %3717 = bitcast i8* %3716 to <32 x i8>*
  store <32 x i8> %3714, <32 x i8>* %3717, align 1, !tbaa !113
  %3718 = add nuw nsw i32 %output.s0.c.co213.us, 1
  %.not325.us = icmp eq i32 %3718, %3589
  br i1 %.not325.us, label %"end for output.s0.c.co212.us", label %"for output.s0.c.co211.us"

"end for output.s0.c.co212.us":                   ; preds = %"consume convolved230.us", %"consume sum_input210.us"
  %convolved313.sroa.0.41.us = phi <32 x i32> [ %convolved313.sroa.0.38.us, %"consume sum_input210.us" ], [ %convolved313.sroa.0.48.us, %"consume convolved230.us" ]
  br i1 %3616, label %"for output.s0.c.co.rebased.preheader.us", label %"end for output.s0.c.co.rebased.us", !prof !96

"for output.s0.c.co.rebased.us":                  ; preds = %"for output.s0.c.co.rebased.preheader.us", %after_bb254.us
  %convolved313.sroa.0.49.us = phi <32 x i32> [ %convolved313.sroa.0.57.us, %after_bb254.us ], [ %convolved313.sroa.0.41.us, %"for output.s0.c.co.rebased.preheader.us" ]
  %output.s0.c.co.rebased.us = phi i32 [ %3804, %after_bb254.us ], [ 0, %"for output.s0.c.co.rebased.preheader.us" ]
  %3719 = add nsw i32 %output.s0.c.co.rebased.us, %3589
  %3720 = icmp sgt i32 %3719, %a0
  %3721 = shl nsw i32 %3719, 5
  %3722 = icmp sge i32 %3721, %4
  %.not1316 = or i1 %3720, %3722
  %3723 = add nsw i32 %output.s0.c.co.rebased.us, %a479
  %.not1233 = icmp sgt i32 %3723, %a0
  %or.cond1317 = or i1 %.not1316, %.not1233
  br i1 %or.cond1317, label %"consume convolved253.us", label %then_bb236.us

then_bb236.us:                                    ; preds = %"for output.s0.c.co.rebased.us"
  %3724 = shl nsw i32 %3723, 5
  %3725 = getelementptr inbounds i32, i32* %offset_c, i32 %3724
  %3726 = bitcast i32* %3725 to <32 x i32>*
  %3727 = load <32 x i32>, <32 x i32>* %3726, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb235.us, label %next_bb240.us

next_bb240.us:                                    ; preds = %then_bb236.us
  %3728 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3809) #11
  %3729 = call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %3727, <32 x i32> %3728) #11
  br label %after_bb235.us

after_bb235.us:                                   ; preds = %then_bb236.us, %next_bb240.us
  %convolved313.sroa.0.51.us = phi <32 x i32> [ %3729, %next_bb240.us ], [ %3727, %then_bb236.us ]
  %3730 = mul nsw i32 %3723, %8
  br i1 %or.cond1393, label %"for convolved.s1.r19$y244.us.us.us", label %"consume convolved253.us", !prof !121

"consume convolved253.us":                        ; preds = %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us", %after_bb235.us, %"for output.s0.c.co.rebased.us"
  %convolved313.sroa.0.57.us = phi <32 x i32> [ %convolved313.sroa.0.51.us, %after_bb235.us ], [ %convolved313.sroa.0.49.us, %"for output.s0.c.co.rebased.us" ], [ %.lcssa1461, %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us" ]
  %3731 = add nsw i32 %3721, 32
  %.not319.us = icmp sgt i32 %3731, %4
  br i1 %.not319.us, label %next_bb256.us, label %then_bb255.us

then_bb255.us:                                    ; preds = %"consume convolved253.us"
  %3732 = sext <32 x i32> %convolved313.sroa.0.57.us to <32 x i64>
  %a490.us = mul nsw <32 x i64> %3732, %3601
  %3733 = icmp slt <32 x i64> %a490.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3734 = select <32 x i1> %3733, <32 x i64> %a490.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3735 = add nsw <32 x i64> %3734, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a489.us = ashr <32 x i64> %3735, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3736 = icmp slt <32 x i64> %a489.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a488.us = select <32 x i1> %3736, <32 x i64> %a489.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3737 = icmp sgt <32 x i64> %a488.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3738 = select <32 x i1> %3737, <32 x i64> %a488.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3739 = trunc <32 x i64> %3738 to <32 x i32>
  %3740 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %a497) #11
  %3741 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3605) #11
  %3742 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3739, <32 x i32> %3741) #11
  %3743 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3742, <32 x i32> %3740) #11
  %3744 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3743, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3745 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3744) #11
  %3746 = trunc <32 x i32> %3745 to <32 x i16>
  %3747 = shufflevector <32 x i16> %3746, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3748 = bitcast <64 x i16> %3747 to <32 x i32>
  %3749 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3748, <32 x i32> %3609) #11
  %3750 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3749, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3751 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3750, <32 x i32> zeroinitializer) #11
  %3752 = bitcast <32 x i32> %3751 to <64 x i16>
  %3753 = shufflevector <64 x i16> %3752, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3754 = trunc <32 x i16> %3753 to <32 x i8>
  %3755 = shufflevector <32 x i8> %3754, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3756 = bitcast <128 x i8> %3755 to <32 x i32>
  %3757 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3756, <32 x i32> %3612) #11
  %3758 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3757, <32 x i32> %3615) #11
  %3759 = bitcast <32 x i32> %3758 to <128 x i8>
  %3760 = shufflevector <128 x i8> %3759, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3761 = add nsw i32 %output.s0.c.co.rebased.us, %a479
  %3762 = shl nsw i32 %3761, 5
  %3763 = add nsw i32 %3813, %3762
  %3764 = getelementptr inbounds i8, i8* %23, i32 %3763
  %3765 = bitcast i8* %3764 to <32 x i8>*
  store <32 x i8> %3760, <32 x i8>* %3765, align 1, !tbaa !113
  br label %after_bb254.us

next_bb256.us:                                    ; preds = %"consume convolved253.us"
  %3766 = or i32 %3721, 1
  %3767 = insertelement <32 x i32> undef, i32 %3766, i32 0
  %3768 = shufflevector <32 x i32> %3767, <32 x i32> undef, <32 x i32> zeroinitializer
  %3769 = add nsw <32 x i32> %3768, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3770 = icmp sle <32 x i32> %3769, %3618
  %.not320.us = icmp sgt i32 %3766, %4
  %3771 = sext <32 x i32> %convolved313.sroa.0.57.us to <32 x i64>
  %3772 = select i1 %.not320.us, <32 x i64> zeroinitializer, <32 x i64> %3771
  %a495.us = mul nsw <32 x i64> %3772, %3601
  %3773 = icmp slt <32 x i64> %a495.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3774 = select <32 x i1> %3773, <32 x i64> %a495.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3775 = add nsw <32 x i64> %3774, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a494.us = ashr <32 x i64> %3775, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3776 = icmp slt <32 x i64> %a494.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a493.us = select <32 x i1> %3776, <32 x i64> %a494.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3777 = icmp sgt <32 x i64> %a493.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3778 = select <32 x i1> %3777, <32 x i64> %a493.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3779 = trunc <32 x i64> %3778 to <32 x i32>
  %3780 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %a497) #11
  %3781 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3605) #11
  %3782 = call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %3779, <32 x i32> %3781) #11
  %3783 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3782, <32 x i32> %3780) #11
  %3784 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3783, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3785 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %3784) #11
  %3786 = trunc <32 x i32> %3785 to <32 x i16>
  %3787 = shufflevector <32 x i16> %3786, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3788 = bitcast <64 x i16> %3787 to <32 x i32>
  %3789 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3788, <32 x i32> %3609) #11
  %3790 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3789, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #11
  %3791 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3790, <32 x i32> zeroinitializer) #11
  %3792 = bitcast <32 x i32> %3791 to <64 x i16>
  %3793 = shufflevector <64 x i16> %3792, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3794 = trunc <32 x i16> %3793 to <32 x i8>
  %3795 = shufflevector <32 x i8> %3794, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3796 = bitcast <128 x i8> %3795 to <32 x i32>
  %3797 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3796, <32 x i32> %3612) #11
  %3798 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3797, <32 x i32> %3615) #11
  %3799 = bitcast <32 x i32> %3798 to <128 x i8>
  %3800 = shufflevector <128 x i8> %3799, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3801 = add nsw i32 %3813, %3721
  %3802 = getelementptr inbounds i8, i8* %23, i32 %3801
  %3803 = bitcast i8* %3802 to <32 x i8>*
  call void @llvm.masked.store.v32i8.p0v32i8(<32 x i8> %3800, <32 x i8>* %3803, i32 1, <32 x i1> %3770), !tbaa !113
  br label %after_bb254.us

after_bb254.us:                                   ; preds = %next_bb256.us, %then_bb255.us
  %3804 = add nuw nsw i32 %output.s0.c.co.rebased.us, 1
  %.not321.us = icmp eq i32 %3804, %t1167
  br i1 %.not321.us, label %"end for output.s0.c.co.rebased.us", label %"for output.s0.c.co.rebased.us"

"end for output.s0.c.co.rebased.us":              ; preds = %after_bb254.us, %"end for output.s0.c.co212.us"
  %convolved313.sroa.0.50.us = phi <32 x i32> [ %convolved313.sroa.0.41.us, %"end for output.s0.c.co212.us" ], [ %convolved313.sroa.0.57.us, %after_bb254.us ]
  %3805 = add nuw nsw i32 %output.s0.x.xo186.us, 1
  %.not318.us = icmp eq i32 %3805, %26
  br i1 %.not318.us, label %"end for output.s0.x.xo185.loopexit.us", label %"for output.s0.x.xo184.us"

"for sum_input.s1.r19$x198.preheader.us":         ; preds = %"for sum_input.s1.r19$y195.us"
  %3806 = mul nsw i32 %"sum_input.s1.r19$y197.us", %dilation_y
  %3807 = add nsw i32 %3806, %3633
  %3808 = mul nsw i32 %3807, %19
  %t1183.us = add i32 %3630, %3808
  br i1 %3622, label %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x198.us"

"for output.s0.c.co.rebased.preheader.us":        ; preds = %"end for output.s0.c.co212.us"
  %sum_input187312.sroa.0.0.vec.extract644.us = extractelement <32 x i32> %sum_input187312.sroa.0.34.us, i32 0
  %3809 = mul nsw i32 %sum_input187312.sroa.0.0.vec.extract644.us, %309
  %3810 = add nsw i32 %output.s0.x.xo186.us, %25
  %3811 = mul nsw i32 %3810, %stride_x
  %3812 = mul nsw i32 %3810, %27
  %3813 = add nsw i32 %3812, %t1180.us
  br label %"for output.s0.c.co.rebased.us"

"for output.s0.c.co211.preheader.us":             ; preds = %"consume sum_input210.us"
  %sum_input187312.sroa.0.0.vec.extract646.us = extractelement <32 x i32> %sum_input187312.sroa.0.34.us, i32 0
  %3814 = mul nsw i32 %sum_input187312.sroa.0.0.vec.extract646.us, %309
  %3815 = add nsw i32 %output.s0.x.xo186.us, %25
  %3816 = mul nsw i32 %3815, %stride_x
  %3817 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %a497) #11
  %3818 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3605) #11
  %3819 = mul nsw i32 %3815, %27
  %3820 = add nsw i32 %3819, %t1180.us
  br label %"for output.s0.c.co211.us"

"for sum_input.s1.r19$y195.preheader.us":         ; preds = %then_bb193.us
  %3821 = add nsw i32 %output.s0.x.xo186.us, %25
  %3822 = sub i32 %3821, %16
  br label %"for sum_input.s1.r19$y195.us"

"for sum_input.s1.r19$y201.preheader.us":         ; preds = %next_bb194.us
  %3823 = add nsw i32 %output.s0.x.xo186.us, %25
  %3824 = mul nsw i32 %3823, %stride_x
  br i1 %3597, label %"for sum_input.s1.r19$y201.us.us", label %"consume sum_input210.us", !prof !96

"end for output.s0.x.xo185.loopexit.us":          ; preds = %"end for output.s0.c.co.rebased.us"
  %3825 = add nuw nsw i32 %output.s0.y.rebased183.us, 1
  %.not317.us = icmp eq i32 %3825, %29
  br i1 %.not317.us, label %"end for output.s0.y.rebased182", label %"for output.s0.y.rebased181.us"

"for sum_input.s1.r19$y201.us.us":                ; preds = %"for sum_input.s1.r19$y201.preheader.us", %"end for sum_input.s1.r19$x205.loopexit.us.us"
  %sum_input187312.sroa.0.29.us.us = phi <32 x i32> [ %.us-phi.us.us, %"end for sum_input.s1.r19$x205.loopexit.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %"for sum_input.s1.r19$y201.preheader.us" ]
  %"sum_input.s1.r19$y203.us.us" = phi i32 [ %3829, %"end for sum_input.s1.r19$x205.loopexit.us.us" ], [ 0, %"for sum_input.s1.r19$y201.preheader.us" ]
  %3826 = mul nsw i32 %"sum_input.s1.r19$y203.us.us", %dilation_y
  %3827 = add nsw i32 %3826, %3633
  %3828 = mul nsw i32 %3827, %19
  %t1185.us.us = add nsw i32 %3629, %3828
  br i1 %3598, label %"for sum_input.s1.r19$x204.us.us.us", label %"end for sum_input.s1.r19$x205.loopexit.us.us", !prof !96

"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit": ; preds = %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us"
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.le.le = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1458, i32 0
  br label %"end for sum_input.s1.r19$x205.loopexit.us.us"

"end for sum_input.s1.r19$x205.loopexit.us.us":   ; preds = %"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit", %"for sum_input.s1.r19$y201.us.us"
  %.us-phi.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.29.us.us, %"for sum_input.s1.r19$y201.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.le.le, %"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit" ]
  %3829 = add nuw nsw i32 %"sum_input.s1.r19$y203.us.us", 1
  %.not329.us.us = icmp eq i32 %3829, %11
  br i1 %.not329.us.us, label %"consume sum_input210.us", label %"for sum_input.s1.r19$y201.us.us"

"for sum_input.s1.r19$x204.us.us.us":             ; preds = %"for sum_input.s1.r19$y201.us.us", %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us"
  %sum_input187312.sroa.0.30.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.le, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us" ], [ %sum_input187312.sroa.0.29.us.us, %"for sum_input.s1.r19$y201.us.us" ]
  %"sum_input.s1.r19$x206.us.us.us" = phi i32 [ %3914, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us" ], [ 0, %"for sum_input.s1.r19$y201.us.us" ]
  %3830 = mul nsw i32 %"sum_input.s1.r19$x206.us.us.us", %dilation_x
  %t1186.s.us.us.us = add nsw i32 %3830, %3824
  %3831 = mul nsw i32 %t1186.s.us.us.us, %17
  %3832 = add nsw i32 %t1185.us.us, %3831
  br i1 %3621, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124207.us.us.us"

"for sum_input.s1.r19$z.r124207.us.us.us":        ; preds = %"for sum_input.s1.r19$x204.us.us.us", %"for sum_input.s1.r19$z.r124207.us.us.us"
  %sum_input187312.sroa.0.32.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.7, %"for sum_input.s1.r19$z.r124207.us.us.us" ], [ %sum_input187312.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x204.us.us.us" ]
  %"sum_input.s1.r19$z.r124209.us.us.us" = phi i32 [ %3904, %"for sum_input.s1.r19$z.r124207.us.us.us" ], [ 0, %"for sum_input.s1.r19$x204.us.us.us" ]
  %niter1480 = phi i32 [ %niter1480.nsub.7, %"for sum_input.s1.r19$z.r124207.us.us.us" ], [ %unroll_iter1479, %"for sum_input.s1.r19$x204.us.us.us" ]
  %sum_input187312.sroa.0.0.vec.extract649.us.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us, i32 0
  %3833 = shl nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3834 = add nsw i32 %3832, %3833
  %3835 = getelementptr inbounds i8, i8* %13, i32 %3834
  %3836 = bitcast i8* %3835 to <4 x i8>*
  %3837 = load <4 x i8>, <4 x i8>* %3836, align 4, !tbaa !110
  %3838 = zext <4 x i8> %3837 to <4 x i32>
  %3839 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3838) #9
  %3840 = add nsw i32 %3839, %sum_input187312.sroa.0.0.vec.extract649.us.us.us
  %3841 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3842 = or i32 %3841, 4
  %3843 = add nsw i32 %3832, %3842
  %3844 = getelementptr inbounds i8, i8* %13, i32 %3843
  %3845 = bitcast i8* %3844 to <4 x i8>*
  %3846 = load <4 x i8>, <4 x i8>* %3845, align 4, !tbaa !110
  %3847 = zext <4 x i8> %3846 to <4 x i32>
  %3848 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3847) #9
  %3849 = add nsw i32 %3848, %3840
  %3850 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3851 = or i32 %3850, 8
  %3852 = add nsw i32 %3832, %3851
  %3853 = getelementptr inbounds i8, i8* %13, i32 %3852
  %3854 = bitcast i8* %3853 to <4 x i8>*
  %3855 = load <4 x i8>, <4 x i8>* %3854, align 4, !tbaa !110
  %3856 = zext <4 x i8> %3855 to <4 x i32>
  %3857 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3856) #9
  %3858 = add nsw i32 %3857, %3849
  %3859 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3860 = or i32 %3859, 12
  %3861 = add nsw i32 %3832, %3860
  %3862 = getelementptr inbounds i8, i8* %13, i32 %3861
  %3863 = bitcast i8* %3862 to <4 x i8>*
  %3864 = load <4 x i8>, <4 x i8>* %3863, align 4, !tbaa !110
  %3865 = zext <4 x i8> %3864 to <4 x i32>
  %3866 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3865) #9
  %3867 = add nsw i32 %3866, %3858
  %3868 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3869 = or i32 %3868, 16
  %3870 = add nsw i32 %3832, %3869
  %3871 = getelementptr inbounds i8, i8* %13, i32 %3870
  %3872 = bitcast i8* %3871 to <4 x i8>*
  %3873 = load <4 x i8>, <4 x i8>* %3872, align 4, !tbaa !110
  %3874 = zext <4 x i8> %3873 to <4 x i32>
  %3875 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3874) #9
  %3876 = add nsw i32 %3875, %3867
  %3877 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3878 = or i32 %3877, 20
  %3879 = add nsw i32 %3832, %3878
  %3880 = getelementptr inbounds i8, i8* %13, i32 %3879
  %3881 = bitcast i8* %3880 to <4 x i8>*
  %3882 = load <4 x i8>, <4 x i8>* %3881, align 4, !tbaa !110
  %3883 = zext <4 x i8> %3882 to <4 x i32>
  %3884 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3883) #9
  %3885 = add nsw i32 %3884, %3876
  %3886 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3887 = or i32 %3886, 24
  %3888 = add nsw i32 %3832, %3887
  %3889 = getelementptr inbounds i8, i8* %13, i32 %3888
  %3890 = bitcast i8* %3889 to <4 x i8>*
  %3891 = load <4 x i8>, <4 x i8>* %3890, align 4, !tbaa !110
  %3892 = zext <4 x i8> %3891 to <4 x i32>
  %3893 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3892) #9
  %3894 = add nsw i32 %3893, %3885
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.6 = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us, i32 %3894, i32 0
  %3895 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3896 = or i32 %3895, 28
  %3897 = add nsw i32 %3832, %3896
  %3898 = getelementptr inbounds i8, i8* %13, i32 %3897
  %3899 = bitcast i8* %3898 to <4 x i8>*
  %3900 = load <4 x i8>, <4 x i8>* %3899, align 4, !tbaa !110
  %3901 = zext <4 x i8> %3900 to <4 x i32>
  %3902 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3901) #9
  %3903 = add nsw i32 %3902, %3894
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.7 = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert.us.us.us.6, i32 %3903, i32 0
  %3904 = add nuw nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us", 8
  %niter1480.nsub.7 = add i32 %niter1480, -8
  %niter1480.ncmp.7 = icmp eq i32 %niter1480.nsub.7, 0
  br i1 %niter1480.ncmp.7, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124207.us.us.us"

"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124207.us.us.us"
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.6.le = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us, i32 %3894, i32 0
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.7.le = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert.us.us.us.6.le, i32 %3903, i32 0
  br label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x204.us.us.us"
  %sum_input187312.sroa.0.32.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x204.us.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1458.ph = phi i32 [ undef, %"for sum_input.s1.r19$x204.us.us.us" ], [ %3903, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %sum_input187312.sroa.0.32.us.us.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x204.us.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124209.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x204.us.us.us" ], [ %3904, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1476.not, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124207.us.us.us.epil"

"for sum_input.s1.r19$z.r124207.us.us.us.epil":   ; preds = %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa", %"for sum_input.s1.r19$z.r124207.us.us.us.epil"
  %sum_input187312.sroa.0.32.us.us.us.epil = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.epil, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ], [ %sum_input187312.sroa.0.32.us.us.us.unr, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124209.us.us.us.epil" = phi i32 [ %3913, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124209.us.us.us.unr", %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ]
  %epil.iter1475 = phi i32 [ %epil.iter1475.sub, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ], [ %xtraiter1474, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ]
  %sum_input187312.sroa.0.0.vec.extract649.us.us.us.epil = extractelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.epil, i32 0
  %3905 = shl nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us.epil", 2
  %3906 = add nsw i32 %3832, %3905
  %3907 = getelementptr inbounds i8, i8* %13, i32 %3906
  %3908 = bitcast i8* %3907 to <4 x i8>*
  %3909 = load <4 x i8>, <4 x i8>* %3908, align 4, !tbaa !110
  %3910 = zext <4 x i8> %3909 to <4 x i32>
  %3911 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3910) #9
  %3912 = add nsw i32 %3911, %sum_input187312.sroa.0.0.vec.extract649.us.us.us.epil
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.epil = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.epil, i32 %3912, i32 0
  %3913 = add nuw nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us.epil", 1
  %epil.iter1475.sub = add i32 %epil.iter1475, -1
  %epil.iter1475.cmp.not = icmp eq i32 %epil.iter1475.sub, 0
  br i1 %epil.iter1475.cmp.not, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124207.us.us.us.epil", !llvm.loop !122

"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124207.us.us.us.epil", %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa"
  %sum_input187312.sroa.0.32.us.us.us.lcssa = phi <32 x i32> [ %sum_input187312.sroa.0.32.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ], [ %sum_input187312.sroa.0.32.us.us.us.epil, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ]
  %.lcssa1458 = phi i32 [ %.lcssa1458.ph, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ], [ %3912, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ]
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.le = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1458, i32 0
  %3914 = add nuw nsw i32 %"sum_input.s1.r19$x206.us.us.us", 1
  %.not330.us.us.us = icmp eq i32 %3914, %9
  br i1 %.not330.us.us.us, label %"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit", label %"for sum_input.s1.r19$x204.us.us.us"

"for convolved.s1.r19$y221.us.us.us":             ; preds = %after_bb218.us, %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us"
  %convolved313.sroa.0.43.us.us.us = phi <32 x i32> [ %.lcssa1460, %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.0.42.us, %after_bb218.us ]
  %"convolved.s1.r19$y223.us.us.us" = phi i32 [ %4042, %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us" ], [ 0, %after_bb218.us ]
  %3915 = mul nsw i32 %"convolved.s1.r19$y223.us.us.us", %dilation_y
  %3916 = add nsw i32 %3915, %3633
  %3917 = mul nsw i32 %3916, %19
  %t1191.us.us.us = add nsw i32 %3629, %3917
  %3918 = mul nsw i32 %"convolved.s1.r19$y223.us.us.us", %12
  %t1192.us.us.us = add nsw i32 %3918, %3687
  br label %"for convolved.s1.r19$x224.us.us.us.us"

"for convolved.s1.r19$x224.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us", %"for convolved.s1.r19$y221.us.us.us"
  %convolved313.sroa.0.44.us.us.us.us = phi <32 x i32> [ %.lcssa1460, %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.43.us.us.us, %"for convolved.s1.r19$y221.us.us.us" ]
  %"convolved.s1.r19$x226.us.us.us.us" = phi i32 [ %4041, %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y221.us.us.us" ]
  %3919 = mul nsw i32 %"convolved.s1.r19$x226.us.us.us.us", %dilation_x
  %t1193.s.us.us.us.us = add nsw i32 %3919, %3816
  %3920 = mul nsw i32 %t1193.s.us.us.us.us, %17
  %3921 = add nsw i32 %t1191.us.us.us, %3920
  %3922 = mul nsw i32 %"convolved.s1.r19$x226.us.us.us.us", %10
  %3923 = add nsw i32 %t1192.us.us.us, %3922
  br i1 %3623, label %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124227.us.us.us.us"

"for convolved.s1.r19$z.r124227.us.us.us.us":     ; preds = %"for convolved.s1.r19$x224.us.us.us.us", %"for convolved.s1.r19$z.r124227.us.us.us.us"
  %convolved313.sroa.0.46.us.us.us.us = phi <32 x i32> [ %4026, %"for convolved.s1.r19$z.r124227.us.us.us.us" ], [ %convolved313.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x224.us.us.us.us" ]
  %"convolved.s1.r19$z.r124229.us.us.us.us" = phi i32 [ %4027, %"for convolved.s1.r19$z.r124227.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x224.us.us.us.us" ]
  %niter1493 = phi i32 [ %niter1493.nsub.7, %"for convolved.s1.r19$z.r124227.us.us.us.us" ], [ %unroll_iter1492, %"for convolved.s1.r19$x224.us.us.us.us" ]
  %3924 = shl nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 2
  %3925 = add nsw i32 %3921, %3924
  %3926 = getelementptr inbounds i8, i8* %13, i32 %3925
  %3927 = bitcast i8* %3926 to i32*
  %3928 = load i32, i32* %3927, align 4, !tbaa !110
  %3929 = shl nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 7
  %3930 = add nsw i32 %3923, %3929
  %3931 = getelementptr inbounds i8, i8* %5, i32 %3930
  %3932 = bitcast i8* %3931 to <32 x i32>*
  %3933 = load <32 x i32>, <32 x i32>* %3932, align 128, !tbaa !106
  %3934 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3928) #11
  %3935 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.46.us.us.us.us, <32 x i32> %3933, <32 x i32> %3934) #11
  %3936 = or i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 1
  %3937 = shl nsw i32 %3936, 2
  %3938 = add nsw i32 %3921, %3937
  %3939 = getelementptr inbounds i8, i8* %13, i32 %3938
  %3940 = bitcast i8* %3939 to i32*
  %3941 = load i32, i32* %3940, align 4, !tbaa !110
  %3942 = shl nsw i32 %3936, 7
  %3943 = add nsw i32 %3923, %3942
  %3944 = getelementptr inbounds i8, i8* %5, i32 %3943
  %3945 = bitcast i8* %3944 to <32 x i32>*
  %3946 = load <32 x i32>, <32 x i32>* %3945, align 128, !tbaa !106
  %3947 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3941) #11
  %3948 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3935, <32 x i32> %3946, <32 x i32> %3947) #11
  %3949 = or i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 2
  %3950 = shl nsw i32 %3949, 2
  %3951 = add nsw i32 %3921, %3950
  %3952 = getelementptr inbounds i8, i8* %13, i32 %3951
  %3953 = bitcast i8* %3952 to i32*
  %3954 = load i32, i32* %3953, align 4, !tbaa !110
  %3955 = shl nsw i32 %3949, 7
  %3956 = add nsw i32 %3923, %3955
  %3957 = getelementptr inbounds i8, i8* %5, i32 %3956
  %3958 = bitcast i8* %3957 to <32 x i32>*
  %3959 = load <32 x i32>, <32 x i32>* %3958, align 128, !tbaa !106
  %3960 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3954) #11
  %3961 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3948, <32 x i32> %3959, <32 x i32> %3960) #11
  %3962 = or i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 3
  %3963 = shl nsw i32 %3962, 2
  %3964 = add nsw i32 %3921, %3963
  %3965 = getelementptr inbounds i8, i8* %13, i32 %3964
  %3966 = bitcast i8* %3965 to i32*
  %3967 = load i32, i32* %3966, align 4, !tbaa !110
  %3968 = shl nsw i32 %3962, 7
  %3969 = add nsw i32 %3923, %3968
  %3970 = getelementptr inbounds i8, i8* %5, i32 %3969
  %3971 = bitcast i8* %3970 to <32 x i32>*
  %3972 = load <32 x i32>, <32 x i32>* %3971, align 128, !tbaa !106
  %3973 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3967) #11
  %3974 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3961, <32 x i32> %3972, <32 x i32> %3973) #11
  %3975 = or i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 4
  %3976 = shl nsw i32 %3975, 2
  %3977 = add nsw i32 %3921, %3976
  %3978 = getelementptr inbounds i8, i8* %13, i32 %3977
  %3979 = bitcast i8* %3978 to i32*
  %3980 = load i32, i32* %3979, align 4, !tbaa !110
  %3981 = shl nsw i32 %3975, 7
  %3982 = add nsw i32 %3923, %3981
  %3983 = getelementptr inbounds i8, i8* %5, i32 %3982
  %3984 = bitcast i8* %3983 to <32 x i32>*
  %3985 = load <32 x i32>, <32 x i32>* %3984, align 128, !tbaa !106
  %3986 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3980) #11
  %3987 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3974, <32 x i32> %3985, <32 x i32> %3986) #11
  %3988 = or i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 5
  %3989 = shl nsw i32 %3988, 2
  %3990 = add nsw i32 %3921, %3989
  %3991 = getelementptr inbounds i8, i8* %13, i32 %3990
  %3992 = bitcast i8* %3991 to i32*
  %3993 = load i32, i32* %3992, align 4, !tbaa !110
  %3994 = shl nsw i32 %3988, 7
  %3995 = add nsw i32 %3923, %3994
  %3996 = getelementptr inbounds i8, i8* %5, i32 %3995
  %3997 = bitcast i8* %3996 to <32 x i32>*
  %3998 = load <32 x i32>, <32 x i32>* %3997, align 128, !tbaa !106
  %3999 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %3993) #11
  %4000 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %3987, <32 x i32> %3998, <32 x i32> %3999) #11
  %4001 = or i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 6
  %4002 = shl nsw i32 %4001, 2
  %4003 = add nsw i32 %3921, %4002
  %4004 = getelementptr inbounds i8, i8* %13, i32 %4003
  %4005 = bitcast i8* %4004 to i32*
  %4006 = load i32, i32* %4005, align 4, !tbaa !110
  %4007 = shl nsw i32 %4001, 7
  %4008 = add nsw i32 %3923, %4007
  %4009 = getelementptr inbounds i8, i8* %5, i32 %4008
  %4010 = bitcast i8* %4009 to <32 x i32>*
  %4011 = load <32 x i32>, <32 x i32>* %4010, align 128, !tbaa !106
  %4012 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4006) #11
  %4013 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4000, <32 x i32> %4011, <32 x i32> %4012) #11
  %4014 = or i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 7
  %4015 = shl nsw i32 %4014, 2
  %4016 = add nsw i32 %3921, %4015
  %4017 = getelementptr inbounds i8, i8* %13, i32 %4016
  %4018 = bitcast i8* %4017 to i32*
  %4019 = load i32, i32* %4018, align 4, !tbaa !110
  %4020 = shl nsw i32 %4014, 7
  %4021 = add nsw i32 %3923, %4020
  %4022 = getelementptr inbounds i8, i8* %5, i32 %4021
  %4023 = bitcast i8* %4022 to <32 x i32>*
  %4024 = load <32 x i32>, <32 x i32>* %4023, align 128, !tbaa !106
  %4025 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4019) #11
  %4026 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4013, <32 x i32> %4024, <32 x i32> %4025) #11
  %4027 = add nuw nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 8
  %niter1493.nsub.7 = add i32 %niter1493, -8
  %niter1493.ncmp.7 = icmp eq i32 %niter1493.nsub.7, 0
  br i1 %niter1493.ncmp.7, label %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124227.us.us.us.us"

"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124227.us.us.us.us", %"for convolved.s1.r19$x224.us.us.us.us"
  %.lcssa1460.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x224.us.us.us.us" ], [ %4026, %"for convolved.s1.r19$z.r124227.us.us.us.us" ]
  %convolved313.sroa.0.46.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x224.us.us.us.us" ], [ %4026, %"for convolved.s1.r19$z.r124227.us.us.us.us" ]
  %"convolved.s1.r19$z.r124229.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x224.us.us.us.us" ], [ %4027, %"for convolved.s1.r19$z.r124227.us.us.us.us" ]
  br i1 %lcmp.mod1490.not, label %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124227.us.us.us.us.epil"

"for convolved.s1.r19$z.r124227.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124227.us.us.us.us.epil"
  %convolved313.sroa.0.46.us.us.us.us.epil = phi <32 x i32> [ %4039, %"for convolved.s1.r19$z.r124227.us.us.us.us.epil" ], [ %convolved313.sroa.0.46.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa" ]
  %"convolved.s1.r19$z.r124229.us.us.us.us.epil" = phi i32 [ %4040, %"for convolved.s1.r19$z.r124227.us.us.us.us.epil" ], [ %"convolved.s1.r19$z.r124229.us.us.us.us.unr", %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1489 = phi i32 [ %epil.iter1489.sub, %"for convolved.s1.r19$z.r124227.us.us.us.us.epil" ], [ %xtraiter1488, %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa" ]
  %4028 = shl nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us.epil", 2
  %4029 = add nsw i32 %3921, %4028
  %4030 = getelementptr inbounds i8, i8* %13, i32 %4029
  %4031 = bitcast i8* %4030 to i32*
  %4032 = load i32, i32* %4031, align 4, !tbaa !110
  %4033 = shl nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us.epil", 7
  %4034 = add nsw i32 %3923, %4033
  %4035 = getelementptr inbounds i8, i8* %5, i32 %4034
  %4036 = bitcast i8* %4035 to <32 x i32>*
  %4037 = load <32 x i32>, <32 x i32>* %4036, align 128, !tbaa !106
  %4038 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4032) #11
  %4039 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.46.us.us.us.us.epil, <32 x i32> %4037, <32 x i32> %4038) #11
  %4040 = add nuw nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us.epil", 1
  %epil.iter1489.sub = add i32 %epil.iter1489, -1
  %epil.iter1489.cmp.not = icmp eq i32 %epil.iter1489.sub, 0
  br i1 %epil.iter1489.cmp.not, label %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124227.us.us.us.us.epil", !llvm.loop !123

"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124227.us.us.us.us.epil", %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa"
  %.lcssa1460 = phi <32 x i32> [ %.lcssa1460.ph, %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us.unr-lcssa" ], [ %4039, %"for convolved.s1.r19$z.r124227.us.us.us.us.epil" ]
  %4041 = add nuw nsw i32 %"convolved.s1.r19$x226.us.us.us.us", 1
  %.not327.us.us.us.us = icmp eq i32 %4041, %9
  br i1 %.not327.us.us.us.us, label %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x224.us.us.us.us"

"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us"
  %4042 = add nuw nsw i32 %"convolved.s1.r19$y223.us.us.us", 1
  %.not326.us.us.us = icmp eq i32 %4042, %11
  br i1 %.not326.us.us.us, label %"consume convolved230.us", label %"for convolved.s1.r19$y221.us.us.us"

"for convolved.s1.r19$y244.us.us.us":             ; preds = %after_bb235.us, %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us"
  %convolved313.sroa.0.52.us.us.us = phi <32 x i32> [ %.lcssa1461, %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.0.51.us, %after_bb235.us ]
  %"convolved.s1.r19$y246.us.us.us" = phi i32 [ %4170, %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us" ], [ 0, %after_bb235.us ]
  %4043 = mul nsw i32 %"convolved.s1.r19$y246.us.us.us", %dilation_y
  %4044 = add nsw i32 %4043, %3633
  %4045 = mul nsw i32 %4044, %19
  %t1201.us.us.us = add nsw i32 %3629, %4045
  %4046 = mul nsw i32 %"convolved.s1.r19$y246.us.us.us", %12
  %t1202.us.us.us = add nsw i32 %4046, %3730
  br label %"for convolved.s1.r19$x247.us.us.us.us"

"for convolved.s1.r19$x247.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us", %"for convolved.s1.r19$y244.us.us.us"
  %convolved313.sroa.0.53.us.us.us.us = phi <32 x i32> [ %.lcssa1461, %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.52.us.us.us, %"for convolved.s1.r19$y244.us.us.us" ]
  %"convolved.s1.r19$x249.us.us.us.us" = phi i32 [ %4169, %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y244.us.us.us" ]
  %4047 = mul nsw i32 %"convolved.s1.r19$x249.us.us.us.us", %dilation_x
  %t1203.s.us.us.us.us = add nsw i32 %4047, %3811
  %4048 = mul nsw i32 %t1203.s.us.us.us.us, %17
  %4049 = add nsw i32 %t1201.us.us.us, %4048
  %4050 = mul nsw i32 %"convolved.s1.r19$x249.us.us.us.us", %10
  %4051 = add nsw i32 %t1202.us.us.us, %4050
  br i1 %3624, label %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124250.us.us.us.us"

"for convolved.s1.r19$z.r124250.us.us.us.us":     ; preds = %"for convolved.s1.r19$x247.us.us.us.us", %"for convolved.s1.r19$z.r124250.us.us.us.us"
  %convolved313.sroa.0.55.us.us.us.us = phi <32 x i32> [ %4154, %"for convolved.s1.r19$z.r124250.us.us.us.us" ], [ %convolved313.sroa.0.53.us.us.us.us, %"for convolved.s1.r19$x247.us.us.us.us" ]
  %"convolved.s1.r19$z.r124252.us.us.us.us" = phi i32 [ %4155, %"for convolved.s1.r19$z.r124250.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x247.us.us.us.us" ]
  %niter1499 = phi i32 [ %niter1499.nsub.7, %"for convolved.s1.r19$z.r124250.us.us.us.us" ], [ %unroll_iter1498, %"for convolved.s1.r19$x247.us.us.us.us" ]
  %4052 = shl nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 2
  %4053 = add nsw i32 %4049, %4052
  %4054 = getelementptr inbounds i8, i8* %13, i32 %4053
  %4055 = bitcast i8* %4054 to i32*
  %4056 = load i32, i32* %4055, align 4, !tbaa !110
  %4057 = shl nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 7
  %4058 = add nsw i32 %4051, %4057
  %4059 = getelementptr inbounds i8, i8* %5, i32 %4058
  %4060 = bitcast i8* %4059 to <32 x i32>*
  %4061 = load <32 x i32>, <32 x i32>* %4060, align 128, !tbaa !106
  %4062 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4056) #11
  %4063 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.55.us.us.us.us, <32 x i32> %4061, <32 x i32> %4062) #11
  %4064 = or i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 1
  %4065 = shl nsw i32 %4064, 2
  %4066 = add nsw i32 %4049, %4065
  %4067 = getelementptr inbounds i8, i8* %13, i32 %4066
  %4068 = bitcast i8* %4067 to i32*
  %4069 = load i32, i32* %4068, align 4, !tbaa !110
  %4070 = shl nsw i32 %4064, 7
  %4071 = add nsw i32 %4051, %4070
  %4072 = getelementptr inbounds i8, i8* %5, i32 %4071
  %4073 = bitcast i8* %4072 to <32 x i32>*
  %4074 = load <32 x i32>, <32 x i32>* %4073, align 128, !tbaa !106
  %4075 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4069) #11
  %4076 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4063, <32 x i32> %4074, <32 x i32> %4075) #11
  %4077 = or i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 2
  %4078 = shl nsw i32 %4077, 2
  %4079 = add nsw i32 %4049, %4078
  %4080 = getelementptr inbounds i8, i8* %13, i32 %4079
  %4081 = bitcast i8* %4080 to i32*
  %4082 = load i32, i32* %4081, align 4, !tbaa !110
  %4083 = shl nsw i32 %4077, 7
  %4084 = add nsw i32 %4051, %4083
  %4085 = getelementptr inbounds i8, i8* %5, i32 %4084
  %4086 = bitcast i8* %4085 to <32 x i32>*
  %4087 = load <32 x i32>, <32 x i32>* %4086, align 128, !tbaa !106
  %4088 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4082) #11
  %4089 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4076, <32 x i32> %4087, <32 x i32> %4088) #11
  %4090 = or i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 3
  %4091 = shl nsw i32 %4090, 2
  %4092 = add nsw i32 %4049, %4091
  %4093 = getelementptr inbounds i8, i8* %13, i32 %4092
  %4094 = bitcast i8* %4093 to i32*
  %4095 = load i32, i32* %4094, align 4, !tbaa !110
  %4096 = shl nsw i32 %4090, 7
  %4097 = add nsw i32 %4051, %4096
  %4098 = getelementptr inbounds i8, i8* %5, i32 %4097
  %4099 = bitcast i8* %4098 to <32 x i32>*
  %4100 = load <32 x i32>, <32 x i32>* %4099, align 128, !tbaa !106
  %4101 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4095) #11
  %4102 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4089, <32 x i32> %4100, <32 x i32> %4101) #11
  %4103 = or i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 4
  %4104 = shl nsw i32 %4103, 2
  %4105 = add nsw i32 %4049, %4104
  %4106 = getelementptr inbounds i8, i8* %13, i32 %4105
  %4107 = bitcast i8* %4106 to i32*
  %4108 = load i32, i32* %4107, align 4, !tbaa !110
  %4109 = shl nsw i32 %4103, 7
  %4110 = add nsw i32 %4051, %4109
  %4111 = getelementptr inbounds i8, i8* %5, i32 %4110
  %4112 = bitcast i8* %4111 to <32 x i32>*
  %4113 = load <32 x i32>, <32 x i32>* %4112, align 128, !tbaa !106
  %4114 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4108) #11
  %4115 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4102, <32 x i32> %4113, <32 x i32> %4114) #11
  %4116 = or i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 5
  %4117 = shl nsw i32 %4116, 2
  %4118 = add nsw i32 %4049, %4117
  %4119 = getelementptr inbounds i8, i8* %13, i32 %4118
  %4120 = bitcast i8* %4119 to i32*
  %4121 = load i32, i32* %4120, align 4, !tbaa !110
  %4122 = shl nsw i32 %4116, 7
  %4123 = add nsw i32 %4051, %4122
  %4124 = getelementptr inbounds i8, i8* %5, i32 %4123
  %4125 = bitcast i8* %4124 to <32 x i32>*
  %4126 = load <32 x i32>, <32 x i32>* %4125, align 128, !tbaa !106
  %4127 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4121) #11
  %4128 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4115, <32 x i32> %4126, <32 x i32> %4127) #11
  %4129 = or i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 6
  %4130 = shl nsw i32 %4129, 2
  %4131 = add nsw i32 %4049, %4130
  %4132 = getelementptr inbounds i8, i8* %13, i32 %4131
  %4133 = bitcast i8* %4132 to i32*
  %4134 = load i32, i32* %4133, align 4, !tbaa !110
  %4135 = shl nsw i32 %4129, 7
  %4136 = add nsw i32 %4051, %4135
  %4137 = getelementptr inbounds i8, i8* %5, i32 %4136
  %4138 = bitcast i8* %4137 to <32 x i32>*
  %4139 = load <32 x i32>, <32 x i32>* %4138, align 128, !tbaa !106
  %4140 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4134) #11
  %4141 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4128, <32 x i32> %4139, <32 x i32> %4140) #11
  %4142 = or i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 7
  %4143 = shl nsw i32 %4142, 2
  %4144 = add nsw i32 %4049, %4143
  %4145 = getelementptr inbounds i8, i8* %13, i32 %4144
  %4146 = bitcast i8* %4145 to i32*
  %4147 = load i32, i32* %4146, align 4, !tbaa !110
  %4148 = shl nsw i32 %4142, 7
  %4149 = add nsw i32 %4051, %4148
  %4150 = getelementptr inbounds i8, i8* %5, i32 %4149
  %4151 = bitcast i8* %4150 to <32 x i32>*
  %4152 = load <32 x i32>, <32 x i32>* %4151, align 128, !tbaa !106
  %4153 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4147) #11
  %4154 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %4141, <32 x i32> %4152, <32 x i32> %4153) #11
  %4155 = add nuw nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 8
  %niter1499.nsub.7 = add i32 %niter1499, -8
  %niter1499.ncmp.7 = icmp eq i32 %niter1499.nsub.7, 0
  br i1 %niter1499.ncmp.7, label %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r124250.us.us.us.us"

"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r124250.us.us.us.us", %"for convolved.s1.r19$x247.us.us.us.us"
  %.lcssa1461.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$x247.us.us.us.us" ], [ %4154, %"for convolved.s1.r19$z.r124250.us.us.us.us" ]
  %convolved313.sroa.0.55.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.53.us.us.us.us, %"for convolved.s1.r19$x247.us.us.us.us" ], [ %4154, %"for convolved.s1.r19$z.r124250.us.us.us.us" ]
  %"convolved.s1.r19$z.r124252.us.us.us.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$x247.us.us.us.us" ], [ %4155, %"for convolved.s1.r19$z.r124250.us.us.us.us" ]
  br i1 %lcmp.mod1496.not, label %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124250.us.us.us.us.epil"

"for convolved.s1.r19$z.r124250.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r124250.us.us.us.us.epil"
  %convolved313.sroa.0.55.us.us.us.us.epil = phi <32 x i32> [ %4167, %"for convolved.s1.r19$z.r124250.us.us.us.us.epil" ], [ %convolved313.sroa.0.55.us.us.us.us.unr, %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa" ]
  %"convolved.s1.r19$z.r124252.us.us.us.us.epil" = phi i32 [ %4168, %"for convolved.s1.r19$z.r124250.us.us.us.us.epil" ], [ %"convolved.s1.r19$z.r124252.us.us.us.us.unr", %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1495 = phi i32 [ %epil.iter1495.sub, %"for convolved.s1.r19$z.r124250.us.us.us.us.epil" ], [ %xtraiter1494, %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa" ]
  %4156 = shl nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us.epil", 2
  %4157 = add nsw i32 %4049, %4156
  %4158 = getelementptr inbounds i8, i8* %13, i32 %4157
  %4159 = bitcast i8* %4158 to i32*
  %4160 = load i32, i32* %4159, align 4, !tbaa !110
  %4161 = shl nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us.epil", 7
  %4162 = add nsw i32 %4051, %4161
  %4163 = getelementptr inbounds i8, i8* %5, i32 %4162
  %4164 = bitcast i8* %4163 to <32 x i32>*
  %4165 = load <32 x i32>, <32 x i32>* %4164, align 128, !tbaa !106
  %4166 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4160) #11
  %4167 = call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %convolved313.sroa.0.55.us.us.us.us.epil, <32 x i32> %4165, <32 x i32> %4166) #11
  %4168 = add nuw nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us.epil", 1
  %epil.iter1495.sub = add i32 %epil.iter1495, -1
  %epil.iter1495.cmp.not = icmp eq i32 %epil.iter1495.sub, 0
  br i1 %epil.iter1495.cmp.not, label %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124250.us.us.us.us.epil", !llvm.loop !124

"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124250.us.us.us.us.epil", %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa"
  %.lcssa1461 = phi <32 x i32> [ %.lcssa1461.ph, %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us.unr-lcssa" ], [ %4167, %"for convolved.s1.r19$z.r124250.us.us.us.us.epil" ]
  %4169 = add nuw nsw i32 %"convolved.s1.r19$x249.us.us.us.us", 1
  %.not323.us.us.us.us = icmp eq i32 %4169, %9
  br i1 %.not323.us.us.us.us, label %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x247.us.us.us.us"

"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us"
  %4170 = add nuw nsw i32 %"convolved.s1.r19$y246.us.us.us", 1
  %.not322.us.us.us = icmp eq i32 %4170, %11
  br i1 %.not322.us.us.us, label %"consume convolved253.us", label %"for convolved.s1.r19$y244.us.us.us"

"end for output.s0.y.rebased182":                 ; preds = %"end for output.s0.x.xo185.loopexit.us", %"for output.s0.y.rebased181.preheader", %"for output.s0.b.rebased178"
  %sum_input187312.sroa.0.23 = phi <32 x i32> [ %sum_input187312.sroa.0.21, %"for output.s0.b.rebased178" ], [ %sum_input187312.sroa.0.21, %"for output.s0.y.rebased181.preheader" ], [ %sum_input187312.sroa.0.34.us, %"end for output.s0.x.xo185.loopexit.us" ]
  %convolved313.sroa.0.37 = phi <32 x i32> [ %convolved313.sroa.0.35, %"for output.s0.b.rebased178" ], [ %convolved313.sroa.0.35, %"for output.s0.y.rebased181.preheader" ], [ %convolved313.sroa.0.50.us, %"end for output.s0.x.xo185.loopexit.us" ]
  %4171 = add nuw nsw i32 %output.s0.b.rebased180, 1
  %.not316 = icmp eq i32 %4171, %21
  br i1 %.not316, label %after_bb3, label %"for output.s0.b.rebased178"
}

; Function Attrs: nounwind
define i32 @conv_nn_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = load i8*, i8** %39, align 4
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr i8*, i8** %0, i32 12
  %43 = load i8*, i8** %42, align 4
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr i8*, i8** %0, i32 13
  %46 = load i8*, i8** %45, align 4
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr i8*, i8** %0, i32 14
  %49 = bitcast i8** %48 to %struct.halide_buffer_t**
  %50 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %49, align 4
  %51 = tail call i32 @conv_nn_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i8 %41, i8 %44, i8 %47, %struct.halide_buffer_t* %50) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata_storage
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i8.p0v32i8(<32 x i8>, <32 x i8>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.0(<128 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %1 = bitcast <128 x i8> %arg to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %0, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.1(<32 x i32> %arg, <1 x i32> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %arg.2)
  %1 = extractelement <1 x i32> %arg.1, i32 0
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %0, <32 x i32> %2)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.2(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.3(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.4(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.5(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.6(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.7(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.8(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.9(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.10(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.11(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.12(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.13(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.14(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.15(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.16(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.17(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.18(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.19(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.20(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.21(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.22(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.23(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.24(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.25(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.26(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.27(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.28(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.29(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.30(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.31(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.32(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.33(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.34(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.35(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.36(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.37(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.38(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.39(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.40(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.41(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.42(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.43(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.44(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.45(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.46(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.47(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.48(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.49(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth5.50(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %24, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %40, <64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %44)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %53, <32 x i32> %52)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %54, <32 x i32> %55)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth5.51(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %24, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %40, <64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %44)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %53, <32 x i32> %52)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %54, <32 x i32> %55)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth5.52(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %24, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %40, <64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %44)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %53, <32 x i32> %52)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %54, <32 x i32> %55)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth5.53(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %24, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %40, <64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %44)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %53, <32 x i32> %52)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %54, <32 x i32> %55)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth5.54(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %24, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %40, <64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %44)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %53, <32 x i32> %52)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %54, <32 x i32> %55)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth5.55(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %24, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %40, <64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %44)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %53, <32 x i32> %52)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %54, <32 x i32> %55)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.56(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.57(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.58(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.59(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.60(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.61(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.62(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.63(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.64(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.65(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.66(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.67(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.68(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.69(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.70(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.71(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.72(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.73(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.74(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.75(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.76(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.77(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.78(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.79(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.80(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.81(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.82(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.83(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.84(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.85(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.86(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.87(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.88(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.89(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.90(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.91(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.92(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.93(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.94(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.95(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.96(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.97(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.98(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.99(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.100(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.101(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.102(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.conv_nn_hvx_depth5.103(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = extractelement <1 x i32> %arg.4, i32 0
  %7 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %6)
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %8, <32 x i32> %1)
  %10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5, <32 x i32> %9)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %12, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %10)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %14, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %15, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %18, <32 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %20, <32 x i32> zeroinitializer)
  %22 = bitcast <32 x i32> %21 to <64 x i16>
  ret <64 x i16> %22
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.104(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.105(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.106(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.107(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.108(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.109(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.110(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.111(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.112(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.113(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.114(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.115(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.116(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.117(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.118(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.119(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.120(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.121(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.122(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.123(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.124(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.125(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.126(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.127(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.128(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.129(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.130(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.131(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.132(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.133(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.134(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.135(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.conv_nn_hvx_depth5.136(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = extractelement <1 x i32> %arg.4, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.3, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %9, <32 x i32> %1)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %10, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %12 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %6, <32 x i32> %11)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %12)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %13, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %15 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %12)
  %16 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %15)
  %17 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %14, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %17)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %17)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %18, <32 x i32> %19)
  %21 = extractelement <1 x i32> %arg.6, i32 0
  %22 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %21)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.5, <32 x i32> %22)
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %23, <32 x i32> %1)
  %25 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %24, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %26 = extractelement <1 x i32> %arg.8, i32 0
  %27 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %26)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg.7, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %28, <32 x i32> %1)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %29, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %31 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %25, <32 x i32> %30)
  %32 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %31)
  %33 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %32, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %31)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %34)
  %36 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %36)
  %38 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %36)
  %39 = tail call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> %37, <32 x i32> %38)
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %39)
  %41 = bitcast <128 x i16> %arg.9 to <64 x i32>
  %42 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %40, <64 x i32> %41)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %42)
  %44 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %43)
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %44)
  %46 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %42)
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>, <32 x i32> %46)
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> zeroinitializer, <32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %45, <32 x i32> %48)
  %50 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %49)
  %51 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %49)
  %52 = tail call <32 x i32> @llvm.hexagon.V6.vpackeb.128B(<32 x i32> %50, <32 x i32> %51)
  %53 = bitcast <128 x i8> %arg.10 to <32 x i32>
  %54 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %53, <32 x i32> %52)
  %55 = bitcast <128 x i8> %arg.11 to <32 x i32>
  %56 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %54, <32 x i32> %55)
  %57 = bitcast <32 x i32> %56 to <128 x i8>
  ret <128 x i8> %57
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.137(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.138(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.139(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.140(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.1, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubw.128B(<32 x i32> %arg, <32 x i32> %1)
  ret <32 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.141(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <4 x i8> %arg to i32
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = bitcast <128 x i8> %arg.1 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vrmpyubv.acc.128B(<32 x i32> %arg.2, <32 x i32> %2, <32 x i32> %1)
  ret <32 x i32> %3
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.142(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: nounwind readnone willreturn
define <32 x i32> @hydride.node.conv_nn_hvx_depth5.143(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vaddwsat.128B(<32 x i32> %arg, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %4, <32 x i32> %1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %6)
  ret <32 x i32> %7
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1 immarg) #3

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!"branch_weights", i32 0, i32 1073741824}
!96 = !{!"branch_weights", i32 1073741824, i32 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"bias", !99, i64 0}
!99 = !{!"Halide buffer"}
!100 = !{!101, !101, i64 0}
!101 = !{!"bias_im_global_wrapper$0", !99, i64 0}
!102 = distinct !{!102, !32}
!103 = !{!"branch_weights", i32 -2147483648, i32 0}
!104 = !{!105, !105, i64 0}
!105 = !{!"offset_c", !99, i64 0}
!106 = !{!107, !107, i64 0}
!107 = !{!"filter", !99, i64 0}
!108 = distinct !{!108, !32}
!109 = distinct !{!109, !32}
!110 = !{!111, !111, i64 0}
!111 = !{!"input", !99, i64 0}
!112 = distinct !{!112, !32}
!113 = !{!114, !114, i64 0}
!114 = !{!"output", !99, i64 0}
!115 = distinct !{!115, !32}
!116 = distinct !{!116, !32}
!117 = distinct !{!117, !32}
!118 = distinct !{!118, !32}
!119 = distinct !{!119, !32}
!120 = distinct !{!120, !32}
!121 = !{!"branch_weights", i32 -2147483648, i32 -2147483648}
!122 = distinct !{!122, !32}
!123 = distinct !{!123, !32}
!124 = distinct !{!124, !32}
