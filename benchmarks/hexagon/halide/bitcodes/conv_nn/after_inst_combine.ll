; ModuleID = 'conv_prelegalize.ll'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 4
@4 = private constant i64 0
@5 = private constant i64 32
@6 = private constant i64 0
@7 = private constant i64 0
@8 = private constant i64 0
@9 = private constant i64 0
@10 = private constant [12 x i64*] [i64* @2, i64* @3, i64* @4, i64* @5, i64* @6, i64* null, i64* @7, i64* null, i64* @8, i64* null, i64* @9, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@11 = private constant i64 0
@12 = private constant [2 x i64*] [i64* @11, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [9 x i8] c"stride_x\00", align 32
@str.107 = private constant [9 x i8] c"stride_y\00", align 32
@str.108 = private constant [11 x i8] c"dilation_x\00", align 32
@str.109 = private constant [11 x i8] c"dilation_y\00", align 32
@str.110 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.111 = private constant [13 x i8] c"output_shift\00", align 32
@str.112 = private constant [12 x i8] c"output_zero\00", align 32
@str.113 = private constant [11 x i8] c"output_min\00", align 32
@str.114 = private constant [11 x i8] c"output_max\00", align 32
@13 = private constant i64 0
@14 = private constant [8 x i64*] [i64* @13, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.115 = private constant [7 x i8] c"output\00", align 32
@15 = private constant [15 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 6, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([12 x i64*], [12 x i64*]* @10, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @12, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.115, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @14, i32 0, i32 0) }]
@str.116 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.117 = private constant [15 x i8] c"conv_nn_hvx128\00", align 32
@conv_nn_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 15, %struct.halide_filter_argument_t* getelementptr inbounds ([15 x %struct.halide_filter_argument_t], [15 x %struct.halide_filter_argument_t]* @15, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.116, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.117, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: mustprogress nounwind
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #15
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #16
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #16
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #16
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #16
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #16
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #16
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #16
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #16
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #16
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #16
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #16
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #16
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst, align 4
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: mustprogress nounwind
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #16
  br label %return
}

; Function Attrs: mustprogress nounwind
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak noalias i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #16
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %for.cond, %entry
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #16
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #15
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #15
  ret i1 false
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #15
  ret %struct.halide_thread* null
}

; Function Attrs: mustprogress nounwind
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #15
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire, align 1
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #12
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #12
  ret i8* %call

for.body:                                         ; preds = %for.body.for.body_crit_edge, %entry.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: mustprogress nounwind
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #12
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.body.while.body_crit_edge, %while.condthread-pre-split.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.body42, %while.cond40thread-pre-split
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #12
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %if.end137.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.body115.epil, %for.cond111.preheader.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %if.end137.epil, %for.cond.cleanup.loopexit.unr-lcssa, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #12
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.body115, %for.cond111.preheader
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #12
  ret i8* %retval.1

for.body115.1:                                    ; preds = %for.body115.1, %if.end137
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %for.body115.2, %if.end137.1
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %for.body115.3, %if.end137.2
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #12
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #12
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #6

; Function Attrs: mustprogress nounwind
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %switch.lookup, %entry
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #16
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #16
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #16
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline mustprogress nounwind willreturn
define weak i32 @halide_malloc_alignment() local_unnamed_addr #7 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %for.body, %if.then
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: mustprogress nounwind willreturn
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #8 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %while.body, %entry
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.end, %while.body
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #12
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.body17.epil, %for.cond.cleanup16.loopexit.unr-lcssa
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.body17.epil, %for.cond.cleanup16.loopexit.unr-lcssa, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.inc81.us, %for.body74.lr.ph
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87, %for.body87.prol.loopexit, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87, %for.body87.prol.loopexit
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #12
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: mustprogress nounwind
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i.split
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #12
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #12
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind willreturn
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #9

; Function Attrs: mustprogress nounwind willreturn
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #12
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #12
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #15
  %call.i = call i8* @malloc(i32 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #12
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %if.then.split
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then6.i59, %if.then8.split
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %if.then.split
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.then6.i107, %if.else.split
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry.split
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #10

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #10

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32>, <32 x i32>, i32) #10

; Function Attrs: mustprogress nounwind
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #15
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #15
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #12
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: mustprogress nounwind willreturn
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32>, <32 x i32>) #10

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32>, <32 x i32>) #10

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32>, <32 x i32>) #10

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #10

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #10

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #10

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #10

; Function Attrs: nounwind
define i32 @conv_nn_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %stride_x, i32 %stride_y, i32 %dilation_x, i32 %dilation_y, i32 %output_multiplier, i32 %a497, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #11 {
if.end.i:
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = bitcast i8** %host.i to i32**
  %1 = load i32*, i32** %0, align 4, !tbaa !43
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !49
  %host.i391 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %4 = load i8*, i8** %host.i391, align 4, !tbaa !43
  %dim.i392 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i392, align 8, !tbaa !46
  %extent.i407 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 2, i32 1
  %6 = load i32, i32* %extent.i407, align 4, !tbaa !49
  %stride.i413 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 3, i32 2
  %7 = load i32, i32* %stride.i413, align 4, !tbaa !50
  %extent.i417 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 4, i32 1
  %8 = load i32, i32* %extent.i417, align 4, !tbaa !49
  %stride.i419 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 4, i32 2
  %9 = load i32, i32* %stride.i419, align 4, !tbaa !50
  %extent.i423 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 5, i32 1
  %10 = load i32, i32* %extent.i423, align 4, !tbaa !49
  %stride.i425 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 5, i32 2
  %11 = load i32, i32* %stride.i425, align 4, !tbaa !50
  %host.i426 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %12 = load i8*, i8** %host.i426, align 4, !tbaa !43
  %dim.i427 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i427, align 8, !tbaa !46
  %extent.i430 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 0, i32 1
  %14 = load i32, i32* %extent.i430, align 4, !tbaa !49
  %min.i434 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 1, i32 0
  %15 = load i32, i32* %min.i434, align 4, !tbaa !47
  %stride.i436 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 1, i32 2
  %16 = load i32, i32* %stride.i436, align 4, !tbaa !50
  %min.i438 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 2, i32 0
  %17 = load i32, i32* %min.i438, align 4, !tbaa !47
  %stride.i440 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 2, i32 2
  %18 = load i32, i32* %stride.i440, align 4, !tbaa !50
  %min.i442 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 3, i32 0
  %19 = load i32, i32* %min.i442, align 4, !tbaa !47
  %extent.i444 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 3, i32 1
  %20 = load i32, i32* %extent.i444, align 4, !tbaa !49
  %stride.i446 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 3, i32 2
  %21 = load i32, i32* %stride.i446, align 4, !tbaa !50
  %host.i447 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %22 = load i8*, i8** %host.i447, align 4, !tbaa !43
  %dim.i448 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i448, align 8, !tbaa !46
  %min.i455 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 1, i32 0
  %24 = load i32, i32* %min.i455, align 4, !tbaa !47
  %extent.i457 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 1, i32 1
  %25 = load i32, i32* %extent.i457, align 4, !tbaa !49
  %stride.i459 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 1, i32 2
  %26 = load i32, i32* %stride.i459, align 4, !tbaa !50
  %min.i461 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 2, i32 0
  %27 = load i32, i32* %min.i461, align 4, !tbaa !47
  %extent.i463 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 2, i32 1
  %28 = load i32, i32* %extent.i463, align 4, !tbaa !49
  %stride.i465 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 2, i32 2
  %29 = load i32, i32* %stride.i465, align 4, !tbaa !50
  %stride.i471 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 3, i32 2
  %30 = load i32, i32* %stride.i471, align 4, !tbaa !50
  %31 = add nsw i32 %3, -1
  %a0 = ashr i32 %31, 5
  %32 = icmp sgt i32 %a0, -1
  %t1217 = select i1 %32, i32 %a0, i32 -1
  %33 = shl i32 %t1217, 7
  %34 = add i32 %33, 268
  %cmp7.i = icmp ugt i32 %34, 16384
  br i1 %cmp7.i, label %pseudostack_alloc.exit, label %then_bb

pseudostack_alloc.exit:                           ; preds = %if.end.i
  %call.i = tail call i8* @halide_malloc(i8* null, i32 %34) #15
  %.not = icmp eq i8* %call.i, null
  br i1 %.not, label %then_bb, label %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge", !prof !95

"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge": ; preds = %pseudostack_alloc.exit
  %35 = bitcast i8* %call.i to i32*
  br label %"produce bias_im_global_wrapper$0"

then_bb:                                          ; preds = %pseudostack_alloc.exit, %if.end.i
  %36 = alloca i32, i32 %34, align 128
  %37 = bitcast i32* %36 to i8*
  br label %"produce bias_im_global_wrapper$0"

"produce bias_im_global_wrapper$0":               ; preds = %then_bb, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge"
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" = phi i8* [ %call.i, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %37, %then_bb ]
  %"bias_im_global_wrapper$0" = phi i32* [ %35, %"pseudostack_alloc.exit.produce bias_im_global_wrapper$0_crit_edge" ], [ %36, %then_bb ]
  %38 = icmp sgt i32 %3, 0
  br i1 %38, label %"for bias_im_global_wrapper$0.s0._0.preheader.old", label %"end for bias_im_global_wrapper$0.s0._0", !prof !96

"for bias_im_global_wrapper$0.s0._0.preheader.old": ; preds = %"produce bias_im_global_wrapper$0"
  %39 = shl nuw i32 %3, 2
  %40 = ptrtoint i32* %1 to i32
  %41 = ptrtoint i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" to i32
  %42 = bitcast i32* %1 to i8*
  %43 = icmp ult i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", %42
  %44 = sub i32 %41, %40
  %45 = icmp sle i32 %39, %44
  %46 = or i1 %43, %45
  br i1 %46, label %"for bias_im_global_wrapper$0.s0._0.rtli", label %"for bias_im_global_wrapper$0.s0._0.preheader"

"for bias_im_global_wrapper$0.s0._0.preheader":   ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  %47 = add i32 %3, -1
  %xtraiter = and i32 %3, 7
  %48 = icmp ult i32 %47, 7
  br i1 %48, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0.preheader.new"

"for bias_im_global_wrapper$0.s0._0.preheader.new": ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader"
  %unroll_iter = and i32 %3, -8
  br label %"for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0.rtli":        ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader.old"
  br label %"end for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0":             ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader.new"
  %"bias_im_global_wrapper$0.s0._0" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %80, %"for bias_im_global_wrapper$0.s0._0" ]
  %niter = phi i32 [ %unroll_iter, %"for bias_im_global_wrapper$0.s0._0.preheader.new" ], [ %niter.nsub.7, %"for bias_im_global_wrapper$0.s0._0" ]
  %49 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0"
  %50 = load i32, i32* %49, align 4, !tbaa !97
  %51 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0"
  store i32 %50, i32* %51, align 4, !tbaa !100
  %52 = or i32 %"bias_im_global_wrapper$0.s0._0", 1
  %53 = getelementptr inbounds i32, i32* %1, i32 %52
  %54 = load i32, i32* %53, align 4, !tbaa !97
  %55 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %52
  store i32 %54, i32* %55, align 4, !tbaa !100
  %56 = or i32 %"bias_im_global_wrapper$0.s0._0", 2
  %57 = getelementptr inbounds i32, i32* %1, i32 %56
  %58 = load i32, i32* %57, align 4, !tbaa !97
  %59 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %56
  store i32 %58, i32* %59, align 4, !tbaa !100
  %60 = or i32 %"bias_im_global_wrapper$0.s0._0", 3
  %61 = getelementptr inbounds i32, i32* %1, i32 %60
  %62 = load i32, i32* %61, align 4, !tbaa !97
  %63 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %60
  store i32 %62, i32* %63, align 4, !tbaa !100
  %64 = or i32 %"bias_im_global_wrapper$0.s0._0", 4
  %65 = getelementptr inbounds i32, i32* %1, i32 %64
  %66 = load i32, i32* %65, align 4, !tbaa !97
  %67 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %64
  store i32 %66, i32* %67, align 4, !tbaa !100
  %68 = or i32 %"bias_im_global_wrapper$0.s0._0", 5
  %69 = getelementptr inbounds i32, i32* %1, i32 %68
  %70 = load i32, i32* %69, align 4, !tbaa !97
  %71 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %68
  store i32 %70, i32* %71, align 4, !tbaa !100
  %72 = or i32 %"bias_im_global_wrapper$0.s0._0", 6
  %73 = getelementptr inbounds i32, i32* %1, i32 %72
  %74 = load i32, i32* %73, align 4, !tbaa !97
  %75 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %72
  store i32 %74, i32* %75, align 4, !tbaa !100
  %76 = or i32 %"bias_im_global_wrapper$0.s0._0", 7
  %77 = getelementptr inbounds i32, i32* %1, i32 %76
  %78 = load i32, i32* %77, align 4, !tbaa !97
  %79 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %76
  store i32 %78, i32* %79, align 4, !tbaa !100
  %80 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0", 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", label %"for bias_im_global_wrapper$0.s0._0"

"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa": ; preds = %"for bias_im_global_wrapper$0.s0._0", %"for bias_im_global_wrapper$0.s0._0.preheader"
  %"bias_im_global_wrapper$0.s0._0.unr" = phi i32 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader" ], [ %80, %"for bias_im_global_wrapper$0.s0._0" ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil"

"for bias_im_global_wrapper$0.s0._0.epil":        ; preds = %"for bias_im_global_wrapper$0.s0._0.epil", %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa"
  %"bias_im_global_wrapper$0.s0._0.epil" = phi i32 [ %84, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %"bias_im_global_wrapper$0.s0._0.unr", %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for bias_im_global_wrapper$0.s0._0.epil" ], [ %xtraiter, %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa" ]
  %81 = getelementptr inbounds i32, i32* %1, i32 %"bias_im_global_wrapper$0.s0._0.epil"
  %82 = load i32, i32* %81, align 4, !tbaa !97
  %83 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %"bias_im_global_wrapper$0.s0._0.epil"
  store i32 %82, i32* %83, align 4, !tbaa !100
  %84 = add nuw nsw i32 %"bias_im_global_wrapper$0.s0._0.epil", 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for bias_im_global_wrapper$0.s0._0", label %"for bias_im_global_wrapper$0.s0._0.epil", !llvm.loop !102

"end for bias_im_global_wrapper$0.s0._0":         ; preds = %"for bias_im_global_wrapper$0.s0._0.epil", %"end for bias_im_global_wrapper$0.s0._0.loopexit.unr-lcssa", %"for bias_im_global_wrapper$0.s0._0.rtli", %"produce bias_im_global_wrapper$0"
  %85 = icmp sgt i32 %25, 5
  %86 = and i32 %3, 127
  %87 = icmp eq i32 %86, 0
  %88 = and i1 %87, %85
  %89 = or i32 %31, 127
  %90 = icmp sgt i32 %25, 7
  %91 = and i32 %3, 63
  %92 = icmp eq i32 %91, 0
  %93 = and i1 %92, %90
  %94 = or i32 %31, 63
  %95 = and i32 %3, 31
  %96 = icmp eq i32 %95, 0
  %97 = and i1 %96, %90
  %98 = or i32 %31, 31
  %99 = icmp sgt i32 %25, 0
  %100 = and i1 %87, %99
  %101 = icmp slt i32 %3, 32
  %102 = select i1 %101, i32 %3, i32 32
  %103 = add nsw i32 %102, -1
  %a3 = ashr i32 %103, 5
  %104 = icmp slt i32 %a0, 3
  %105 = select i1 %104, i32 %a0, i32 3
  %106 = and i32 %a3, -4
  %b5 = add nsw i32 %106, %105
  %107 = icmp slt i32 %a3, %b5
  %108 = select i1 %107, i32 %a3, i32 %b5
  %109 = add nsw i32 %108, %a0
  %110 = shl nsw i32 %109, 5
  %111 = or i32 %110, 31
  %112 = select i1 %100, i32 %89, i32 %111
  %113 = select i1 %97, i32 %98, i32 %112
  %114 = select i1 %93, i32 %94, i32 %113
  %a2 = select i1 %88, i32 %89, i32 %114
  %115 = icmp sgt i32 %a2, %98
  %a9 = select i1 %115, i32 %a2, i32 %98
  %116 = icmp sgt i32 %a9, -1
  %t1218 = select i1 %116, i32 %a9, i32 -1
  %117 = shl i32 %t1218, 2
  %118 = add i32 %117, 144
  %119 = call i8* @halide_malloc(i8* null, i32 %118)
  %offset_c = bitcast i8* %119 to i32*
  %120 = add nsw i32 %3, 31
  %121 = ashr i32 %120, 5
  br i1 %38, label %"for offset_c.s0.c.c.preheader", label %"consume bias_im_global_wrapper$0.thread", !prof !96

"for offset_c.s0.c.c.preheader":                  ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %.not315 = icmp eq i8 %input_zero, 0
  br i1 %.not315, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.preheader"

"for offset_c.s1.c.co.preheader":                 ; preds = %"for offset_c.s0.c.c.preheader"
  %122 = icmp sgt i32 %10, 0
  %123 = select i1 %122, i32 %10, i32 0
  %124 = icmp sgt i32 %6, 0
  %125 = insertelement <128 x i8> undef, i8 %input_zero, i32 0
  %126 = shufflevector <128 x i8> %125, <128 x i8> undef, <128 x i32> zeroinitializer
  %127 = icmp sgt i32 %8, 0
  %or.cond = and i1 %122, %127
  %128 = and i1 %or.cond, %124
  br i1 %128, label %"for offset_c.s1.c.co.us.us.us", label %"for offset_c.s2.c.c.preheader", !prof !103

"for offset_c.s1.c.co.us.us.us":                  ; preds = %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", %"for offset_c.s1.c.co.preheader"
  %offset_c.s1.c.co.us.us.us = phi i32 [ %146, %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.preheader" ]
  %129 = mul nsw i32 %offset_c.s1.c.co.us.us.us, %7
  %130 = shl nsw i32 %offset_c.s1.c.co.us.us.us, 5
  %131 = getelementptr inbounds i32, i32* %offset_c, i32 %130
  %132 = bitcast i32* %131 to <32 x i32>*
  %.pre.pre.pre = load <32 x i32>, <32 x i32>* %132, align 128, !tbaa !104
  br label %"for offset_c.s1.r19$y.us.us.us.us.us"

"for offset_c.s1.r19$y.us.us.us.us.us":           ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", %"for offset_c.s1.c.co.us.us.us"
  %.pre.pre = phi <32 x i32> [ %142, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ %.pre.pre.pre, %"for offset_c.s1.c.co.us.us.us" ]
  %"offset_c.s1.r19$y.us.us.us.us.us" = phi i32 [ %145, %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.c.co.us.us.us" ]
  %133 = mul nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", %11
  %t838.us.us.us.us.us = add nsw i32 %133, %129
  br label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"for offset_c.s1.r19$x.us.us.us.us.us.us":        ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", %"for offset_c.s1.r19$y.us.us.us.us.us"
  %.pre = phi <32 x i32> [ %142, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ %.pre.pre, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %"offset_c.s1.r19$x.us.us.us.us.us.us" = phi i32 [ %144, %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$y.us.us.us.us.us" ]
  %134 = mul nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", %9
  %135 = add nsw i32 %t838.us.us.us.us.us, %134
  br label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"for offset_c.s1.r19$z.r124.us.us.us.us.us.us":   ; preds = %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us", %"for offset_c.s1.r19$x.us.us.us.us.us.us"
  %136 = phi <32 x i32> [ %142, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ %.pre, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %"offset_c.s1.r19$z.r124.us.us.us.us.us.us" = phi i32 [ %143, %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us" ], [ 0, %"for offset_c.s1.r19$x.us.us.us.us.us.us" ]
  %137 = shl nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 7
  %138 = add nsw i32 %135, %137
  %139 = getelementptr inbounds i8, i8* %4, i32 %138
  %140 = bitcast i8* %139 to <128 x i8>*
  %141 = load <128 x i8>, <128 x i8>* %140, align 128, !tbaa !106
  %142 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybv_128B_dsl(<32 x i32> %136, <128 x i8> %126, <128 x i8> %141, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0) #12
  store <32 x i32> %142, <32 x i32>* %132, align 128, !tbaa !104
  %143 = add nuw nsw i32 %"offset_c.s1.r19$z.r124.us.us.us.us.us.us", 1
  %.not386.us.us.us.us.us.us = icmp eq i32 %143, %6
  br i1 %.not386.us.us.us.us.us.us, label %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us", label %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"

"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us": ; preds = %"for offset_c.s1.r19$z.r124.us.us.us.us.us.us"
  %144 = add nuw nsw i32 %"offset_c.s1.r19$x.us.us.us.us.us.us", 1
  %.not385.us.us.us.us.us.us = icmp eq i32 %144, %8
  br i1 %.not385.us.us.us.us.us.us, label %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us", label %"for offset_c.s1.r19$x.us.us.us.us.us.us"

"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us": ; preds = %"end for offset_c.s1.r19$z.r124.loopexit.us.us.us.us.us.us"
  %145 = add nuw nsw i32 %"offset_c.s1.r19$y.us.us.us.us.us", 1
  %.not384.us.us.us.us.us = icmp eq i32 %145, %123
  br i1 %.not384.us.us.us.us.us, label %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", label %"for offset_c.s1.r19$y.us.us.us.us.us"

"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us": ; preds = %"end for offset_c.s1.r19$x.loopexit.split.us.us.us.us.us.us"
  %146 = add nuw nsw i32 %offset_c.s1.c.co.us.us.us, 1
  %.not383.us.us.us = icmp eq i32 %146, %121
  br i1 %.not383.us.us.us, label %"for offset_c.s2.c.c.preheader", label %"for offset_c.s1.c.co.us.us.us"

"consume bias_im_global_wrapper$0.thread":        ; preds = %"end for bias_im_global_wrapper$0.s0._0"
  %147 = zext i8 %filter_zero to i32
  br label %"consume offset_c"

"for offset_c.s2.c.c.preheader":                  ; preds = %"end for offset_c.s1.r19$y.loopexit.split.us.split.us.us.us.us", %"for offset_c.s1.c.co.preheader", %"for offset_c.s0.c.c.preheader"
  %148 = zext i8 %filter_zero to i32
  %149 = zext i8 %input_zero to i32
  %150 = shl nuw nsw i32 %149, 2
  %151 = mul nuw nsw i32 %150, %148
  %152 = mul i32 %151, %6
  %t841.s = mul i32 %152, %8
  %153 = mul i32 %t841.s, %10
  %154 = insertelement <1 x i32> poison, i32 %153, i32 0
  br label %"for offset_c.s2.c.c"

"for offset_c.s2.c.c":                            ; preds = %"for offset_c.s2.c.c", %"for offset_c.s2.c.c.preheader"
  %offset_c.s2.c.c = phi i32 [ %165, %"for offset_c.s2.c.c" ], [ 0, %"for offset_c.s2.c.c.preheader" ]
  %155 = shl nsw i32 %offset_c.s2.c.c, 5
  %156 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i32 %155
  %157 = bitcast i32* %156 to <32 x i32>*
  %158 = load <32 x i32>, <32 x i32>* %157, align 128, !tbaa !100
  %159 = getelementptr inbounds i32, i32* %offset_c, i32 %155
  %160 = bitcast i32* %159 to <32 x i32>*
  %161 = load <32 x i32>, <32 x i32>* %160, align 128, !tbaa !104
  %162 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %154, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %163 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %158, <32 x i32> %161, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %164 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %162, <32 x i32> %163, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  store <32 x i32> %164, <32 x i32>* %160, align 128, !tbaa !104
  %165 = add nuw nsw i32 %offset_c.s2.c.c, 1
  %.not382 = icmp eq i32 %165, %121
  br i1 %.not382, label %"consume offset_c", label %"for offset_c.s2.c.c"

"consume offset_c":                               ; preds = %"for offset_c.s2.c.c", %"consume bias_im_global_wrapper$0.thread"
  %166 = phi i32 [ %147, %"consume bias_im_global_wrapper$0.thread" ], [ %148, %"for offset_c.s2.c.c" ]
  %167 = icmp eq i32 %stride_x, 1
  %168 = icmp eq i32 %6, 1
  %169 = and i1 %167, %168
  %170 = icmp eq i32 %14, 4
  %171 = icmp eq i32 %16, 4
  %172 = and i1 %170, %171
  %t844 = and i1 %169, %172
  %t843.not = icmp eq i8 %filter_zero, 0
  br i1 %88, label %then_bb4, label %next_bb5

after_bb3:                                        ; preds = %"end for output.s0.y.rebased182", %next_bb128, %"end for output.s0.y.rebased133.loopexit.us", %"for output.s0.b.rebased129.preheader", %then_bb127, %"end for output.s0.y.rebased80.loopexit.us", %"for output.s0.b.rebased76.preheader", %then_bb74, %"end for output.s0.y.rebased27.loopexit.us", %"for output.s0.b.rebased23.preheader", %then_bb21, %"end for output.s0.y.rebased.loopexit.us", %"for output.s0.b.rebased.preheader", %then_bb4
  br label %land.lhs.true.i487

if.then.i472:                                     ; No predecessors!
  br label %land.lhs.true.i487

land.lhs.true.i487:                               ; preds = %after_bb3, %if.then.i472
  br label %call_destructor.exit483

if.then.i488:                                     ; No predecessors!
  br label %call_destructor.exit483

call_destructor.exit483:                          ; preds = %land.lhs.true.i487, %if.then.i488
  ret i32 0

then_bb4:                                         ; preds = %"consume offset_c"
  %173 = mul nsw i32 %18, %17
  %174 = mul nsw i32 %21, %19
  %175 = mul nsw i32 %16, %15
  %176 = add i32 %174, %173
  %t852 = add i32 %176, %175
  %177 = icmp sgt i32 %20, 0
  br i1 %177, label %"for output.s0.b.rebased.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.preheader":              ; preds = %then_bb4
  %178 = mul nsw i32 %16, %stride_x
  %179 = mul nsw i32 %178, 5
  %180 = shl nsw i32 %178, 2
  %181 = mul nsw i32 %178, 3
  %182 = shl nsw i32 %178, 1
  %183 = sub nsw i32 %stride_x, %15
  %184 = mul nsw i32 %183, %16
  %185 = icmp sgt i32 %28, 0
  %.neg796 = mul i32 %29, %27
  %.neg797 = mul i32 %26, %24
  %.neg798 = mul i32 %30, %19
  %reass.add800 = add i32 %.neg796, %.neg797
  %reass.add801 = add i32 %reass.add800, %.neg798
  %186 = add nuw nsw i32 %25, 5
  %187 = ashr i32 %186, 31
  %188 = xor i32 %187, %186
  %189 = zext i32 %188 to i64
  %190 = mul nuw i64 %189, 2863311531
  %191 = lshr i64 %190, 34
  %192 = trunc i64 %191 to i32
  %193 = xor i32 %187, %192
  %194 = icmp sgt i32 %193, 0
  %b14 = add nsw i32 %25, -6
  %195 = icmp sgt i32 %10, 0
  %196 = icmp sgt i32 %8, 0
  %197 = icmp sgt i32 %6, 0
  %198 = ashr i32 %3, 7
  %199 = icmp sgt i32 %3, 127
  %200 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %201 = shufflevector <32 x i32> %200, <32 x i32> undef, <32 x i32> zeroinitializer
  %202 = sext <32 x i32> %201 to <32 x i64>
  %203 = icmp sgt i32 %a497, 0
  %204 = select i1 %203, i32 %a497, i32 0
  %205 = shl nuw i32 1, %204
  %206 = ashr i32 %205, 1
  %207 = zext i8 %output_zero to i16
  %208 = insertelement <128 x i16> undef, i16 %207, i32 0
  %209 = shufflevector <128 x i16> %208, <128 x i16> undef, <128 x i32> zeroinitializer
  %210 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %211 = shufflevector <128 x i8> %210, <128 x i8> undef, <128 x i32> zeroinitializer
  %212 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %213 = shufflevector <128 x i8> %212, <128 x i8> undef, <128 x i32> zeroinitializer
  %214 = insertelement <1 x i32> poison, i32 %206, i32 0
  %215 = insertelement <1 x i32> poison, i32 %a497, i32 0
  br i1 %185, label %"for output.s0.b.rebased.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased.us.preheader":           ; preds = %"for output.s0.b.rebased.preheader"
  %216 = add i32 %175, %173
  %217 = add i32 %8, -1
  %brmerge1305.demorgan = and i1 %196, %197
  %xtraiter1510 = and i32 %6, 1
  %218 = icmp eq i32 %6, 1
  %unroll_iter1512 = and i32 %6, -2
  %lcmp.mod1511.not = icmp eq i32 %xtraiter1510, 0
  %xtraiter1514 = and i32 %8, 3
  %219 = icmp ult i32 %217, 3
  %unroll_iter1518 = and i32 %8, -4
  %lcmp.mod1516.not = icmp eq i32 %xtraiter1514, 0
  br label %"for output.s0.b.rebased.us"

"for output.s0.b.rebased.us":                     ; preds = %"end for output.s0.y.rebased.loopexit.us", %"for output.s0.b.rebased.us.preheader"
  %sum_input314.sroa.0.0.us = phi <6 x i32> [ %.us-phi1118.us, %"end for output.s0.y.rebased.loopexit.us" ], [ undef, %"for output.s0.b.rebased.us.preheader" ]
  %output.s0.b.rebased.us = phi i32 [ %226, %"end for output.s0.y.rebased.loopexit.us" ], [ 0, %"for output.s0.b.rebased.us.preheader" ]
  %220 = add nsw i32 %output.s0.b.rebased.us, %19
  %221 = mul nsw i32 %220, %30
  %222 = sub i32 %221, %reass.add801
  %223 = mul nsw i32 %220, %21
  %224 = sub i32 %223, %176
  %225 = sub nsw i32 %223, %t852
  br i1 %194, label %"for output.s0.y.rebased.us.us", label %"end for output.s0.y.rebased.loopexit.us", !prof !96

"end for output.s0.y.rebased.loopexit.us":        ; preds = %"end for output.s0.x.xo.loopexit.us.us", %"for output.s0.b.rebased.us"
  %.us-phi1118.us = phi <6 x i32> [ %sum_input314.sroa.0.0.us, %"for output.s0.b.rebased.us" ], [ %sum_input314.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ]
  %226 = add nuw nsw i32 %output.s0.b.rebased.us, 1
  %.not370.us = icmp eq i32 %226, %20
  br i1 %.not370.us, label %after_bb3, label %"for output.s0.b.rebased.us"

"for output.s0.y.rebased.us.us":                  ; preds = %"end for output.s0.x.xo.loopexit.us.us", %"for output.s0.b.rebased.us"
  %sum_input314.sroa.0.1.us.us = phi <6 x i32> [ %sum_input314.sroa.0.13.us.us, %"end for output.s0.x.xo.loopexit.us.us" ], [ %sum_input314.sroa.0.0.us, %"for output.s0.b.rebased.us" ]
  %output.s0.y.rebased.us.us = phi i32 [ %823, %"end for output.s0.x.xo.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased.us" ]
  %227 = add nsw i32 %output.s0.y.rebased.us.us, %27
  %228 = mul nsw i32 %227, %29
  %t877.us.us = add i32 %222, %228
  %229 = mul nsw i32 %227, %stride_y
  br label %"for output.s0.x.xo.us.us"

"for output.s0.x.xo.us.us":                       ; preds = %"end for output.s0.c.co.us.us", %"for output.s0.y.rebased.us.us"
  %sum_input314.sroa.0.3.us.us = phi <6 x i32> [ %sum_input314.sroa.0.13.us.us, %"end for output.s0.c.co.us.us" ], [ %sum_input314.sroa.0.1.us.us, %"for output.s0.y.rebased.us.us" ]
  %output.s0.x.xo.us.us = phi i32 [ %768, %"end for output.s0.c.co.us.us" ], [ 0, %"for output.s0.y.rebased.us.us" ]
  %a12.us.us = mul nsw i32 %output.s0.x.xo.us.us, 6
  %230 = icmp slt i32 %a12.us.us, %b14
  %output.s0.x.x.base.s.us.us = select i1 %230, i32 %a12.us.us, i32 %b14
  br i1 %t843.not, label %"consume sum_input.us.us", label %then_bb7.us.us

then_bb7.us.us:                                   ; preds = %"for output.s0.x.xo.us.us"
  br i1 %t844, label %then_bb10.us.us, label %next_bb11.us.us

next_bb11.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %195, label %"for sum_input.s1.r19$y12.preheader.us.us", label %"consume sum_input.us.us", !prof !96

then_bb10.us.us:                                  ; preds = %then_bb7.us.us
  br i1 %195, label %"for sum_input.s1.r19$y.preheader.us.us", label %"consume sum_input.us.us", !prof !96

"for sum_input.s1.r19$y.us.us":                   ; preds = %"for sum_input.s1.r19$y.preheader.us.us", %"end for sum_input.s1.r19$x.us.us"
  %sum_input314.sroa.0.5.us.us = phi <6 x i32> [ %sum_input314.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y.preheader.us.us" ]
  %"sum_input.s1.r19$y.us.us" = phi i32 [ %341, %"end for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$y.preheader.us.us" ]
  br i1 %196, label %"for sum_input.s1.r19$x.preheader.us.us", label %"end for sum_input.s1.r19$x.us.us", !prof !96

"for sum_input.s1.r19$x.us.us":                   ; preds = %"for sum_input.s1.r19$x.preheader.us.us", %"for sum_input.s1.r19$x.us.us"
  %sum_input314.sroa.0.6.us.us = phi <6 x i32> [ %317, %"for sum_input.s1.r19$x.us.us" ], [ %sum_input314.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %"sum_input.s1.r19$x.us.us" = phi i32 [ %318, %"for sum_input.s1.r19$x.us.us" ], [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %niter1519 = phi i32 [ %niter1519.nsub.3, %"for sum_input.s1.r19$x.us.us" ], [ %unroll_iter1518, %"for sum_input.s1.r19$x.preheader.us.us" ]
  %231 = mul nsw i32 %"sum_input.s1.r19$x.us.us", %dilation_x
  %reass.add806.us.us = add i32 %820, %231
  %reass.mul807.us.us = shl i32 %reass.add806.us.us, 2
  %232 = add i32 %t880.us.us, %reass.mul807.us.us
  %233 = getelementptr inbounds i8, i8* %12, i32 %232
  %234 = bitcast i8* %233 to <24 x i8>*
  %235 = load <24 x i8>, <24 x i8>* %234, align 4, !tbaa !108
  %t1220.us.us = zext <24 x i8> %235 to <24 x i16>
  %236 = shufflevector <24 x i16> %t1220.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %237 = bitcast <64 x i16> %236 to <32 x i32>
  %238 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %237)
  %239 = bitcast <32 x i32> %238 to <64 x i16>
  %240 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %237)
  %241 = bitcast <32 x i32> %240 to <64 x i16>
  %242 = add <64 x i16> %241, %239
  %243 = shufflevector <64 x i16> %242, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us = zext <12 x i16> %243 to <12 x i32>
  %244 = shufflevector <12 x i32> %t1219.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %245 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %244, i32 -4)
  %246 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %245)
  %247 = shufflevector <32 x i32> %246, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %248 = add nsw <6 x i32> %247, %sum_input314.sroa.0.6.us.us
  %249 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %245)
  %250 = shufflevector <32 x i32> %249, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %251 = add nsw <6 x i32> %248, %250
  %252 = or i32 %"sum_input.s1.r19$x.us.us", 1
  %253 = mul nsw i32 %252, %dilation_x
  %reass.add806.us.us.1 = add i32 %820, %253
  %reass.mul807.us.us.1 = shl i32 %reass.add806.us.us.1, 2
  %254 = add i32 %t880.us.us, %reass.mul807.us.us.1
  %255 = getelementptr inbounds i8, i8* %12, i32 %254
  %256 = bitcast i8* %255 to <24 x i8>*
  %257 = load <24 x i8>, <24 x i8>* %256, align 4, !tbaa !108
  %t1220.us.us.1 = zext <24 x i8> %257 to <24 x i16>
  %258 = shufflevector <24 x i16> %t1220.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %259 = bitcast <64 x i16> %258 to <32 x i32>
  %260 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %259)
  %261 = bitcast <32 x i32> %260 to <64 x i16>
  %262 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %259)
  %263 = bitcast <32 x i32> %262 to <64 x i16>
  %264 = add <64 x i16> %263, %261
  %265 = shufflevector <64 x i16> %264, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.1 = zext <12 x i16> %265 to <12 x i32>
  %266 = shufflevector <12 x i32> %t1219.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %267 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %266, i32 -4)
  %268 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %267)
  %269 = shufflevector <32 x i32> %268, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %270 = add nsw <6 x i32> %269, %251
  %271 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %267)
  %272 = shufflevector <32 x i32> %271, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %273 = add nsw <6 x i32> %270, %272
  %274 = or i32 %"sum_input.s1.r19$x.us.us", 2
  %275 = mul nsw i32 %274, %dilation_x
  %reass.add806.us.us.2 = add i32 %820, %275
  %reass.mul807.us.us.2 = shl i32 %reass.add806.us.us.2, 2
  %276 = add i32 %t880.us.us, %reass.mul807.us.us.2
  %277 = getelementptr inbounds i8, i8* %12, i32 %276
  %278 = bitcast i8* %277 to <24 x i8>*
  %279 = load <24 x i8>, <24 x i8>* %278, align 4, !tbaa !108
  %t1220.us.us.2 = zext <24 x i8> %279 to <24 x i16>
  %280 = shufflevector <24 x i16> %t1220.us.us.2, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = bitcast <64 x i16> %280 to <32 x i32>
  %282 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %281)
  %283 = bitcast <32 x i32> %282 to <64 x i16>
  %284 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %281)
  %285 = bitcast <32 x i32> %284 to <64 x i16>
  %286 = add <64 x i16> %285, %283
  %287 = shufflevector <64 x i16> %286, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.2 = zext <12 x i16> %287 to <12 x i32>
  %288 = shufflevector <12 x i32> %t1219.us.us.2, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %289 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %288, i32 -4)
  %290 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %289)
  %291 = shufflevector <32 x i32> %290, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %292 = add nsw <6 x i32> %291, %273
  %293 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %289)
  %294 = shufflevector <32 x i32> %293, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %295 = add nsw <6 x i32> %292, %294
  %296 = or i32 %"sum_input.s1.r19$x.us.us", 3
  %297 = mul nsw i32 %296, %dilation_x
  %reass.add806.us.us.3 = add i32 %820, %297
  %reass.mul807.us.us.3 = shl i32 %reass.add806.us.us.3, 2
  %298 = add i32 %t880.us.us, %reass.mul807.us.us.3
  %299 = getelementptr inbounds i8, i8* %12, i32 %298
  %300 = bitcast i8* %299 to <24 x i8>*
  %301 = load <24 x i8>, <24 x i8>* %300, align 4, !tbaa !108
  %t1220.us.us.3 = zext <24 x i8> %301 to <24 x i16>
  %302 = shufflevector <24 x i16> %t1220.us.us.3, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %303 = bitcast <64 x i16> %302 to <32 x i32>
  %304 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %303)
  %305 = bitcast <32 x i32> %304 to <64 x i16>
  %306 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %303)
  %307 = bitcast <32 x i32> %306 to <64 x i16>
  %308 = add <64 x i16> %307, %305
  %309 = shufflevector <64 x i16> %308, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.3 = zext <12 x i16> %309 to <12 x i32>
  %310 = shufflevector <12 x i32> %t1219.us.us.3, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %311 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %310, i32 -4)
  %312 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %311)
  %313 = shufflevector <32 x i32> %312, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %314 = add nsw <6 x i32> %313, %295
  %315 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %311)
  %316 = shufflevector <32 x i32> %315, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %317 = add nsw <6 x i32> %314, %316
  %318 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us", 4
  %niter1519.nsub.3 = add i32 %niter1519, -4
  %niter1519.ncmp.3 = icmp eq i32 %niter1519.nsub.3, 0
  br i1 %niter1519.ncmp.3, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x.preheader.us.us", %"for sum_input.s1.r19$x.us.us"
  %.lcssa1395.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %317, %"for sum_input.s1.r19$x.us.us" ]
  %sum_input314.sroa.0.6.us.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.5.us.us, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %317, %"for sum_input.s1.r19$x.us.us" ]
  %"sum_input.s1.r19$x.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x.preheader.us.us" ], [ %318, %"for sum_input.s1.r19$x.us.us" ]
  br i1 %lcmp.mod1516.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil"

"for sum_input.s1.r19$x.us.us.epil":              ; preds = %"for sum_input.s1.r19$x.us.us.epil", %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa"
  %sum_input314.sroa.0.6.us.us.epil = phi <6 x i32> [ %339, %"for sum_input.s1.r19$x.us.us.epil" ], [ %sum_input314.sroa.0.6.us.us.unr, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x.us.us.epil" = phi i32 [ %340, %"for sum_input.s1.r19$x.us.us.epil" ], [ %"sum_input.s1.r19$x.us.us.unr", %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %epil.iter1515 = phi i32 [ %epil.iter1515.sub, %"for sum_input.s1.r19$x.us.us.epil" ], [ %xtraiter1514, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ]
  %319 = mul nsw i32 %"sum_input.s1.r19$x.us.us.epil", %dilation_x
  %reass.add806.us.us.epil = add i32 %820, %319
  %reass.mul807.us.us.epil = shl i32 %reass.add806.us.us.epil, 2
  %320 = add i32 %t880.us.us, %reass.mul807.us.us.epil
  %321 = getelementptr inbounds i8, i8* %12, i32 %320
  %322 = bitcast i8* %321 to <24 x i8>*
  %323 = load <24 x i8>, <24 x i8>* %322, align 4, !tbaa !108
  %t1220.us.us.epil = zext <24 x i8> %323 to <24 x i16>
  %324 = shufflevector <24 x i16> %t1220.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %325 = bitcast <64 x i16> %324 to <32 x i32>
  %326 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %325)
  %327 = bitcast <32 x i32> %326 to <64 x i16>
  %328 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %325)
  %329 = bitcast <32 x i32> %328 to <64 x i16>
  %330 = add <64 x i16> %329, %327
  %331 = shufflevector <64 x i16> %330, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1219.us.us.epil = zext <12 x i16> %331 to <12 x i32>
  %332 = shufflevector <12 x i32> %t1219.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %333 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %332, i32 -4)
  %334 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %333)
  %335 = shufflevector <32 x i32> %334, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %336 = add nsw <6 x i32> %335, %sum_input314.sroa.0.6.us.us.epil
  %337 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %333)
  %338 = shufflevector <32 x i32> %337, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %339 = add nsw <6 x i32> %336, %338
  %340 = add nuw nsw i32 %"sum_input.s1.r19$x.us.us.epil", 1
  %epil.iter1515.sub = add i32 %epil.iter1515, -1
  %epil.iter1515.cmp.not = icmp eq i32 %epil.iter1515.sub, 0
  br i1 %epil.iter1515.cmp.not, label %"end for sum_input.s1.r19$x.us.us", label %"for sum_input.s1.r19$x.us.us.epil", !llvm.loop !110

"end for sum_input.s1.r19$x.us.us":               ; preds = %"for sum_input.s1.r19$x.us.us.epil", %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$y.us.us"
  %sum_input314.sroa.0.7.us.us = phi <6 x i32> [ %sum_input314.sroa.0.5.us.us, %"for sum_input.s1.r19$y.us.us" ], [ %.lcssa1395.ph, %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa" ], [ %339, %"for sum_input.s1.r19$x.us.us.epil" ]
  %341 = add nuw nsw i32 %"sum_input.s1.r19$y.us.us", 1
  %.not380.us.us = icmp eq i32 %341, %10
  br i1 %.not380.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y.us.us"

"consume sum_input.us.us":                        ; preds = %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", %"for sum_input.s1.r19$y12.preheader.us.us", %"end for sum_input.s1.r19$x.us.us", %then_bb10.us.us, %next_bb11.us.us, %"for output.s0.x.xo.us.us"
  %sum_input314.sroa.0.13.us.us = phi <6 x i32> [ %sum_input314.sroa.0.3.us.us, %"for output.s0.x.xo.us.us" ], [ zeroinitializer, %then_bb10.us.us ], [ zeroinitializer, %next_bb11.us.us ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ], [ %sum_input314.sroa.0.7.us.us, %"end for sum_input.s1.r19$x.us.us" ], [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ]
  br i1 %199, label %"for output.s0.c.co.preheader.us.us", label %"end for output.s0.c.co.us.us", !prof !96

"for output.s0.c.co.us.us":                       ; preds = %"for output.s0.c.co.preheader.us.us", %"consume convolved.us.us"
  %output.s0.c.co.us.us = phi i32 [ %767, %"consume convolved.us.us" ], [ 0, %"for output.s0.c.co.preheader.us.us" ]
  %342 = shl nsw i32 %output.s0.c.co.us.us, 7
  %343 = getelementptr inbounds i32, i32* %offset_c, i32 %342
  %344 = bitcast i32* %343 to <32 x i32>*
  %345 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb19.us.us, label %next_bb20.us.us

next_bb20.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %346 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %790, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %347 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %345, <32 x i32> %346, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %348 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !104
  %349 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %792, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %350 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %348, <32 x i32> %349, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %351 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !104
  %352 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %794, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %353 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %351, <32 x i32> %352, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %354 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !104
  %355 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %796, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %356 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %354, <32 x i32> %355, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %357 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !104
  %358 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %798, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %359 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %357, <32 x i32> %358, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %360 = load <32 x i32>, <32 x i32>* %344, align 128, !tbaa !104
  %361 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %800, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %362 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %360, <32 x i32> %361, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %363 = getelementptr inbounds i32, i32* %343, i32 32
  %364 = bitcast i32* %363 to <32 x i32>*
  %365 = load <32 x i32>, <32 x i32>* %364, align 128, !tbaa !104
  %366 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %790, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %367 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %365, <32 x i32> %366, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %368 = load <32 x i32>, <32 x i32>* %364, align 128, !tbaa !104
  %369 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %792, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %370 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %368, <32 x i32> %369, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %371 = load <32 x i32>, <32 x i32>* %364, align 128, !tbaa !104
  %372 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %794, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %373 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %371, <32 x i32> %372, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %374 = load <32 x i32>, <32 x i32>* %364, align 128, !tbaa !104
  %375 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %796, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %376 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %374, <32 x i32> %375, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %377 = load <32 x i32>, <32 x i32>* %364, align 128, !tbaa !104
  %378 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %798, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %379 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %377, <32 x i32> %378, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %380 = load <32 x i32>, <32 x i32>* %364, align 128, !tbaa !104
  %381 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %800, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %382 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %380, <32 x i32> %381, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %383 = getelementptr inbounds i32, i32* %343, i32 64
  %384 = bitcast i32* %383 to <32 x i32>*
  %385 = load <32 x i32>, <32 x i32>* %384, align 128, !tbaa !104
  %386 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %790, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %387 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %385, <32 x i32> %386, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %388 = load <32 x i32>, <32 x i32>* %384, align 128, !tbaa !104
  %389 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %792, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %390 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %388, <32 x i32> %389, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %391 = load <32 x i32>, <32 x i32>* %384, align 128, !tbaa !104
  %392 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %794, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %393 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %391, <32 x i32> %392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %394 = load <32 x i32>, <32 x i32>* %384, align 128, !tbaa !104
  %395 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %796, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %396 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %394, <32 x i32> %395, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %397 = load <32 x i32>, <32 x i32>* %384, align 128, !tbaa !104
  %398 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %798, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %399 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %397, <32 x i32> %398, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %400 = load <32 x i32>, <32 x i32>* %384, align 128, !tbaa !104
  %401 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %800, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %402 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %400, <32 x i32> %401, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %403 = getelementptr inbounds i32, i32* %343, i32 96
  %404 = bitcast i32* %403 to <32 x i32>*
  %405 = load <32 x i32>, <32 x i32>* %404, align 128, !tbaa !104
  %406 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %790, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %407 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %405, <32 x i32> %406, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %408 = load <32 x i32>, <32 x i32>* %404, align 128, !tbaa !104
  %409 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %792, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %410 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %408, <32 x i32> %409, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %411 = load <32 x i32>, <32 x i32>* %404, align 128, !tbaa !104
  %412 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %794, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %413 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %411, <32 x i32> %412, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %414 = load <32 x i32>, <32 x i32>* %404, align 128, !tbaa !104
  %415 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %796, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %416 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %414, <32 x i32> %415, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %417 = load <32 x i32>, <32 x i32>* %404, align 128, !tbaa !104
  %418 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %798, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %419 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %417, <32 x i32> %418, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %420 = load <32 x i32>, <32 x i32>* %404, align 128, !tbaa !104
  %421 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %800, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %422 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %420, <32 x i32> %421, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  br label %after_bb18.us.us

then_bb19.us.us:                                  ; preds = %"for output.s0.c.co.us.us"
  %423 = getelementptr inbounds i32, i32* %343, i32 32
  %424 = bitcast i32* %423 to <32 x i32>*
  %425 = load <32 x i32>, <32 x i32>* %424, align 128, !tbaa !104
  %426 = getelementptr inbounds i32, i32* %343, i32 64
  %427 = bitcast i32* %426 to <32 x i32>*
  %428 = load <32 x i32>, <32 x i32>* %427, align 128, !tbaa !104
  %429 = getelementptr inbounds i32, i32* %343, i32 96
  %430 = bitcast i32* %429 to <32 x i32>*
  %431 = load <32 x i32>, <32 x i32>* %430, align 128, !tbaa !104
  br label %after_bb18.us.us

after_bb18.us.us:                                 ; preds = %then_bb19.us.us, %next_bb20.us.us
  %convolved313.sroa.207.0.us.us = phi <32 x i32> [ %431, %then_bb19.us.us ], [ %422, %next_bb20.us.us ]
  %convolved313.sroa.202.0.us.us = phi <32 x i32> [ %428, %then_bb19.us.us ], [ %402, %next_bb20.us.us ]
  %convolved313.sroa.197.0.us.us = phi <32 x i32> [ %425, %then_bb19.us.us ], [ %382, %next_bb20.us.us ]
  %convolved313.sroa.192.0.us.us = phi <32 x i32> [ %345, %then_bb19.us.us ], [ %362, %next_bb20.us.us ]
  %convolved313.sroa.187.0.us.us = phi <32 x i32> [ %431, %then_bb19.us.us ], [ %419, %next_bb20.us.us ]
  %convolved313.sroa.182.0.us.us = phi <32 x i32> [ %428, %then_bb19.us.us ], [ %399, %next_bb20.us.us ]
  %convolved313.sroa.177.0.us.us = phi <32 x i32> [ %425, %then_bb19.us.us ], [ %379, %next_bb20.us.us ]
  %convolved313.sroa.172.0.us.us = phi <32 x i32> [ %345, %then_bb19.us.us ], [ %359, %next_bb20.us.us ]
  %convolved313.sroa.167.0.us.us = phi <32 x i32> [ %431, %then_bb19.us.us ], [ %416, %next_bb20.us.us ]
  %convolved313.sroa.162.0.us.us = phi <32 x i32> [ %428, %then_bb19.us.us ], [ %396, %next_bb20.us.us ]
  %convolved313.sroa.157.0.us.us = phi <32 x i32> [ %425, %then_bb19.us.us ], [ %376, %next_bb20.us.us ]
  %convolved313.sroa.152.0.us.us = phi <32 x i32> [ %345, %then_bb19.us.us ], [ %356, %next_bb20.us.us ]
  %convolved313.sroa.147.0.us.us = phi <32 x i32> [ %431, %then_bb19.us.us ], [ %413, %next_bb20.us.us ]
  %convolved313.sroa.142.0.us.us = phi <32 x i32> [ %428, %then_bb19.us.us ], [ %393, %next_bb20.us.us ]
  %convolved313.sroa.137.0.us.us = phi <32 x i32> [ %425, %then_bb19.us.us ], [ %373, %next_bb20.us.us ]
  %convolved313.sroa.132.0.us.us = phi <32 x i32> [ %345, %then_bb19.us.us ], [ %353, %next_bb20.us.us ]
  %convolved313.sroa.122.0.us.us = phi <32 x i32> [ %431, %then_bb19.us.us ], [ %410, %next_bb20.us.us ]
  %convolved313.sroa.112.0.us.us = phi <32 x i32> [ %428, %then_bb19.us.us ], [ %390, %next_bb20.us.us ]
  %convolved313.sroa.102.0.us.us = phi <32 x i32> [ %425, %then_bb19.us.us ], [ %370, %next_bb20.us.us ]
  %convolved313.sroa.92.0.us.us = phi <32 x i32> [ %345, %then_bb19.us.us ], [ %350, %next_bb20.us.us ]
  %convolved313.sroa.77.0.us.us = phi <32 x i32> [ %431, %then_bb19.us.us ], [ %407, %next_bb20.us.us ]
  %convolved313.sroa.62.0.us.us = phi <32 x i32> [ %428, %then_bb19.us.us ], [ %387, %next_bb20.us.us ]
  %convolved313.sroa.47.0.us.us = phi <32 x i32> [ %425, %then_bb19.us.us ], [ %367, %next_bb20.us.us ]
  %convolved313.sroa.0.0.us.us = phi <32 x i32> [ %345, %then_bb19.us.us ], [ %347, %next_bb20.us.us ]
  br i1 %195, label %"for convolved.s1.r19$y.preheader.us.us", label %"consume convolved.us.us", !prof !96

"for convolved.s1.r19$y.us.us":                   ; preds = %"for convolved.s1.r19$y.preheader.us.us", %"end for convolved.s1.r19$x.us.us"
  %convolved313.sroa.207.1.us.us = phi <32 x i32> [ %convolved313.sroa.207.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.207.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.202.1.us.us = phi <32 x i32> [ %convolved313.sroa.202.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.202.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.197.1.us.us = phi <32 x i32> [ %convolved313.sroa.197.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.197.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.192.1.us.us = phi <32 x i32> [ %convolved313.sroa.192.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.192.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.187.1.us.us = phi <32 x i32> [ %convolved313.sroa.187.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.187.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.182.1.us.us = phi <32 x i32> [ %convolved313.sroa.182.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.182.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.177.1.us.us = phi <32 x i32> [ %convolved313.sroa.177.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.177.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.172.1.us.us = phi <32 x i32> [ %convolved313.sroa.172.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.172.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.167.1.us.us = phi <32 x i32> [ %convolved313.sroa.167.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.167.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.162.1.us.us = phi <32 x i32> [ %convolved313.sroa.162.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.162.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.157.1.us.us = phi <32 x i32> [ %convolved313.sroa.157.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.157.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.152.1.us.us = phi <32 x i32> [ %convolved313.sroa.152.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.152.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.147.1.us.us = phi <32 x i32> [ %convolved313.sroa.147.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.147.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.142.1.us.us = phi <32 x i32> [ %convolved313.sroa.142.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.142.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.137.1.us.us = phi <32 x i32> [ %convolved313.sroa.137.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.137.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.132.1.us.us = phi <32 x i32> [ %convolved313.sroa.132.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.132.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.122.1.us.us = phi <32 x i32> [ %convolved313.sroa.122.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.122.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.112.1.us.us = phi <32 x i32> [ %convolved313.sroa.112.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.112.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.102.1.us.us = phi <32 x i32> [ %convolved313.sroa.102.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.102.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.92.1.us.us = phi <32 x i32> [ %convolved313.sroa.92.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.92.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.77.1.us.us = phi <32 x i32> [ %convolved313.sroa.77.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.77.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.62.1.us.us = phi <32 x i32> [ %convolved313.sroa.62.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.62.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.47.1.us.us = phi <32 x i32> [ %convolved313.sroa.47.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.47.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %convolved313.sroa.0.1.us.us = phi <32 x i32> [ %convolved313.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ], [ %convolved313.sroa.0.0.us.us, %"for convolved.s1.r19$y.preheader.us.us" ]
  %"convolved.s1.r19$y.us.us" = phi i32 [ %548, %"end for convolved.s1.r19$x.us.us" ], [ 0, %"for convolved.s1.r19$y.preheader.us.us" ]
  %432 = mul nsw i32 %"convolved.s1.r19$y.us.us", %dilation_y
  %433 = add nsw i32 %432, %229
  %434 = mul nsw i32 %433, %18
  %t913.us.us = add nsw i32 %434, %225
  %435 = mul nsw i32 %"convolved.s1.r19$y.us.us", %11
  br i1 %196, label %"for convolved.s1.r19$x.us.us", label %"end for convolved.s1.r19$x.us.us", !prof !96

"for convolved.s1.r19$x.us.us":                   ; preds = %"end for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$y.us.us"
  %convolved313.sroa.207.2.us.us = phi <32 x i32> [ %convolved313.sroa.207.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.207.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.202.2.us.us = phi <32 x i32> [ %convolved313.sroa.202.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.202.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.197.2.us.us = phi <32 x i32> [ %convolved313.sroa.197.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.197.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.192.2.us.us = phi <32 x i32> [ %convolved313.sroa.192.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.192.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.187.2.us.us = phi <32 x i32> [ %convolved313.sroa.187.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.187.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.182.2.us.us = phi <32 x i32> [ %convolved313.sroa.182.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.182.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.177.2.us.us = phi <32 x i32> [ %convolved313.sroa.177.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.177.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.172.2.us.us = phi <32 x i32> [ %convolved313.sroa.172.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.172.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.167.2.us.us = phi <32 x i32> [ %convolved313.sroa.167.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.167.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.162.2.us.us = phi <32 x i32> [ %convolved313.sroa.162.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.162.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.157.2.us.us = phi <32 x i32> [ %convolved313.sroa.157.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.157.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.152.2.us.us = phi <32 x i32> [ %convolved313.sroa.152.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.152.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.147.2.us.us = phi <32 x i32> [ %convolved313.sroa.147.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.147.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.142.2.us.us = phi <32 x i32> [ %convolved313.sroa.142.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.142.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.137.2.us.us = phi <32 x i32> [ %convolved313.sroa.137.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.137.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.132.2.us.us = phi <32 x i32> [ %convolved313.sroa.132.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.132.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.122.2.us.us = phi <32 x i32> [ %convolved313.sroa.122.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.122.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.112.2.us.us = phi <32 x i32> [ %convolved313.sroa.112.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.112.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.102.2.us.us = phi <32 x i32> [ %convolved313.sroa.102.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.102.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.92.2.us.us = phi <32 x i32> [ %convolved313.sroa.92.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.92.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.77.2.us.us = phi <32 x i32> [ %convolved313.sroa.77.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.77.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.62.2.us.us = phi <32 x i32> [ %convolved313.sroa.62.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.62.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.47.2.us.us = phi <32 x i32> [ %convolved313.sroa.47.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.47.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved313.sroa.0.2.us.us = phi <32 x i32> [ %convolved313.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ]
  %"convolved.s1.r19$x.us.us" = phi i32 [ %547, %"end for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$y.us.us" ]
  %436 = mul nsw i32 %"convolved.s1.r19$x.us.us", %dilation_x
  %437 = mul nsw i32 %"convolved.s1.r19$x.us.us", %9
  %t920.us.us = add i32 %437, %435
  br i1 %197, label %"for convolved.s1.r19$z.r124.preheader.us.us", label %"end for convolved.s1.r19$z.r124.us.us", !prof !96

"for convolved.s1.r19$z.r124.us.us":              ; preds = %"for convolved.s1.r19$z.r124.preheader.us.us", %"for convolved.s1.r19$z.r124.us.us"
  %convolved313.sroa.207.4.us.us = phi <32 x i32> [ %545, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.207.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.202.4.us.us = phi <32 x i32> [ %542, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.202.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.197.4.us.us = phi <32 x i32> [ %539, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.197.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.192.4.us.us = phi <32 x i32> [ %536, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.192.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.187.4.us.us = phi <32 x i32> [ %530, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.187.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.182.4.us.us = phi <32 x i32> [ %527, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.182.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.177.4.us.us = phi <32 x i32> [ %524, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.177.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.172.4.us.us = phi <32 x i32> [ %521, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.172.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.167.4.us.us = phi <32 x i32> [ %515, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.167.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.162.4.us.us = phi <32 x i32> [ %512, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.162.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.157.4.us.us = phi <32 x i32> [ %509, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.157.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.152.4.us.us = phi <32 x i32> [ %506, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.152.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.147.4.us.us = phi <32 x i32> [ %500, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.147.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.142.4.us.us = phi <32 x i32> [ %497, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.142.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.137.4.us.us = phi <32 x i32> [ %494, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.137.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.132.4.us.us = phi <32 x i32> [ %491, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.132.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.122.4.us.us = phi <32 x i32> [ %485, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.122.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.112.4.us.us = phi <32 x i32> [ %482, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.112.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.102.4.us.us = phi <32 x i32> [ %479, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.102.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.92.4.us.us = phi <32 x i32> [ %476, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.92.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.77.4.us.us = phi <32 x i32> [ %470, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.77.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.62.4.us.us = phi <32 x i32> [ %464, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.62.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.47.4.us.us = phi <32 x i32> [ %458, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.47.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %convolved313.sroa.0.4.us.us = phi <32 x i32> [ %451, %"for convolved.s1.r19$z.r124.us.us" ], [ %convolved313.sroa.0.2.us.us, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %"convolved.s1.r19$z.r124.us.us" = phi i32 [ %546, %"for convolved.s1.r19$z.r124.us.us" ], [ 0, %"for convolved.s1.r19$z.r124.preheader.us.us" ]
  %438 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 2
  %439 = add i32 %438, %t913.us.us
  %440 = add i32 %439, %769
  %441 = getelementptr inbounds i8, i8* %12, i32 %440
  %442 = bitcast i8* %441 to <4 x i8>*
  %443 = load <4 x i8>, <4 x i8>* %442, align 4, !tbaa !108
  %444 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 5
  %445 = add nsw i32 %444, %785
  %446 = shl nsw i32 %445, 2
  %447 = add nsw i32 %t920.us.us, %446
  %448 = getelementptr inbounds i8, i8* %4, i32 %447
  %449 = bitcast i8* %448 to <128 x i8>*
  %450 = load <128 x i8>, <128 x i8>* %449, align 128, !tbaa !106
  %451 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.0.4.us.us, <128 x i8> %450, <4 x i8> %443, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %452 = load <4 x i8>, <4 x i8>* %442, align 4, !tbaa !108
  %453 = shl nsw i32 %"convolved.s1.r19$z.r124.us.us", 7
  %454 = add i32 %770, %453
  %455 = getelementptr inbounds i8, i8* %4, i32 %454
  %456 = bitcast i8* %455 to <128 x i8>*
  %457 = load <128 x i8>, <128 x i8>* %456, align 128, !tbaa !106
  %458 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.47.4.us.us, <128 x i8> %457, <4 x i8> %452, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %459 = load <4 x i8>, <4 x i8>* %442, align 4, !tbaa !108
  %460 = add i32 %771, %453
  %461 = getelementptr inbounds i8, i8* %4, i32 %460
  %462 = bitcast i8* %461 to <128 x i8>*
  %463 = load <128 x i8>, <128 x i8>* %462, align 128, !tbaa !106
  %464 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.62.4.us.us, <128 x i8> %463, <4 x i8> %459, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %465 = load <4 x i8>, <4 x i8>* %442, align 4, !tbaa !108
  %466 = add i32 %772, %453
  %467 = getelementptr inbounds i8, i8* %4, i32 %466
  %468 = bitcast i8* %467 to <128 x i8>*
  %469 = load <128 x i8>, <128 x i8>* %468, align 128, !tbaa !106
  %470 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.77.4.us.us, <128 x i8> %469, <4 x i8> %465, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %471 = add i32 %439, %773
  %472 = getelementptr inbounds i8, i8* %12, i32 %471
  %473 = bitcast i8* %472 to <4 x i8>*
  %474 = load <4 x i8>, <4 x i8>* %473, align 4, !tbaa !108
  %475 = load <128 x i8>, <128 x i8>* %449, align 128, !tbaa !106
  %476 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.92.4.us.us, <128 x i8> %475, <4 x i8> %474, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %477 = load <4 x i8>, <4 x i8>* %473, align 4, !tbaa !108
  %478 = load <128 x i8>, <128 x i8>* %456, align 128, !tbaa !106
  %479 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.102.4.us.us, <128 x i8> %478, <4 x i8> %477, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %480 = load <4 x i8>, <4 x i8>* %473, align 4, !tbaa !108
  %481 = load <128 x i8>, <128 x i8>* %462, align 128, !tbaa !106
  %482 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.112.4.us.us, <128 x i8> %481, <4 x i8> %480, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %483 = load <4 x i8>, <4 x i8>* %473, align 4, !tbaa !108
  %484 = load <128 x i8>, <128 x i8>* %468, align 128, !tbaa !106
  %485 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.122.4.us.us, <128 x i8> %484, <4 x i8> %483, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %486 = add i32 %439, %774
  %487 = getelementptr inbounds i8, i8* %12, i32 %486
  %488 = bitcast i8* %487 to <4 x i8>*
  %489 = load <4 x i8>, <4 x i8>* %488, align 4, !tbaa !108
  %490 = load <128 x i8>, <128 x i8>* %449, align 128, !tbaa !106
  %491 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.132.4.us.us, <128 x i8> %490, <4 x i8> %489, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %492 = load <4 x i8>, <4 x i8>* %488, align 4, !tbaa !108
  %493 = load <128 x i8>, <128 x i8>* %456, align 128, !tbaa !106
  %494 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.137.4.us.us, <128 x i8> %493, <4 x i8> %492, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %495 = load <4 x i8>, <4 x i8>* %488, align 4, !tbaa !108
  %496 = load <128 x i8>, <128 x i8>* %462, align 128, !tbaa !106
  %497 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.142.4.us.us, <128 x i8> %496, <4 x i8> %495, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %498 = load <4 x i8>, <4 x i8>* %488, align 4, !tbaa !108
  %499 = load <128 x i8>, <128 x i8>* %468, align 128, !tbaa !106
  %500 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.147.4.us.us, <128 x i8> %499, <4 x i8> %498, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %501 = add i32 %439, %775
  %502 = getelementptr inbounds i8, i8* %12, i32 %501
  %503 = bitcast i8* %502 to <4 x i8>*
  %504 = load <4 x i8>, <4 x i8>* %503, align 4, !tbaa !108
  %505 = load <128 x i8>, <128 x i8>* %449, align 128, !tbaa !106
  %506 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.152.4.us.us, <128 x i8> %505, <4 x i8> %504, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %507 = load <4 x i8>, <4 x i8>* %503, align 4, !tbaa !108
  %508 = load <128 x i8>, <128 x i8>* %456, align 128, !tbaa !106
  %509 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.157.4.us.us, <128 x i8> %508, <4 x i8> %507, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %510 = load <4 x i8>, <4 x i8>* %503, align 4, !tbaa !108
  %511 = load <128 x i8>, <128 x i8>* %462, align 128, !tbaa !106
  %512 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.162.4.us.us, <128 x i8> %511, <4 x i8> %510, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %513 = load <4 x i8>, <4 x i8>* %503, align 4, !tbaa !108
  %514 = load <128 x i8>, <128 x i8>* %468, align 128, !tbaa !106
  %515 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.167.4.us.us, <128 x i8> %514, <4 x i8> %513, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %516 = add i32 %439, %776
  %517 = getelementptr inbounds i8, i8* %12, i32 %516
  %518 = bitcast i8* %517 to <4 x i8>*
  %519 = load <4 x i8>, <4 x i8>* %518, align 4, !tbaa !108
  %520 = load <128 x i8>, <128 x i8>* %449, align 128, !tbaa !106
  %521 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.172.4.us.us, <128 x i8> %520, <4 x i8> %519, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %522 = load <4 x i8>, <4 x i8>* %518, align 4, !tbaa !108
  %523 = load <128 x i8>, <128 x i8>* %456, align 128, !tbaa !106
  %524 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.177.4.us.us, <128 x i8> %523, <4 x i8> %522, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %525 = load <4 x i8>, <4 x i8>* %518, align 4, !tbaa !108
  %526 = load <128 x i8>, <128 x i8>* %462, align 128, !tbaa !106
  %527 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.182.4.us.us, <128 x i8> %526, <4 x i8> %525, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %528 = load <4 x i8>, <4 x i8>* %518, align 4, !tbaa !108
  %529 = load <128 x i8>, <128 x i8>* %468, align 128, !tbaa !106
  %530 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.187.4.us.us, <128 x i8> %529, <4 x i8> %528, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %531 = add i32 %439, %777
  %532 = getelementptr inbounds i8, i8* %12, i32 %531
  %533 = bitcast i8* %532 to <4 x i8>*
  %534 = load <4 x i8>, <4 x i8>* %533, align 4, !tbaa !108
  %535 = load <128 x i8>, <128 x i8>* %449, align 128, !tbaa !106
  %536 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.192.4.us.us, <128 x i8> %535, <4 x i8> %534, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %537 = load <4 x i8>, <4 x i8>* %533, align 4, !tbaa !108
  %538 = load <128 x i8>, <128 x i8>* %456, align 128, !tbaa !106
  %539 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.197.4.us.us, <128 x i8> %538, <4 x i8> %537, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %540 = load <4 x i8>, <4 x i8>* %533, align 4, !tbaa !108
  %541 = load <128 x i8>, <128 x i8>* %462, align 128, !tbaa !106
  %542 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.202.4.us.us, <128 x i8> %541, <4 x i8> %540, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %543 = load <4 x i8>, <4 x i8>* %533, align 4, !tbaa !108
  %544 = load <128 x i8>, <128 x i8>* %468, align 128, !tbaa !106
  %545 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.207.4.us.us, <128 x i8> %544, <4 x i8> %543, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %546 = add nuw nsw i32 %"convolved.s1.r19$z.r124.us.us", 1
  %.not376.us.us = icmp eq i32 %546, %6
  br i1 %.not376.us.us, label %"end for convolved.s1.r19$z.r124.us.us", label %"for convolved.s1.r19$z.r124.us.us"

"end for convolved.s1.r19$z.r124.us.us":          ; preds = %"for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$x.us.us"
  %convolved313.sroa.207.5.us.us = phi <32 x i32> [ %convolved313.sroa.207.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %545, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.202.5.us.us = phi <32 x i32> [ %convolved313.sroa.202.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %542, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.197.5.us.us = phi <32 x i32> [ %convolved313.sroa.197.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %539, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.192.5.us.us = phi <32 x i32> [ %convolved313.sroa.192.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %536, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.187.5.us.us = phi <32 x i32> [ %convolved313.sroa.187.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %530, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.182.5.us.us = phi <32 x i32> [ %convolved313.sroa.182.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %527, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.177.5.us.us = phi <32 x i32> [ %convolved313.sroa.177.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %524, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.172.5.us.us = phi <32 x i32> [ %convolved313.sroa.172.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %521, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.167.5.us.us = phi <32 x i32> [ %convolved313.sroa.167.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %515, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.162.5.us.us = phi <32 x i32> [ %convolved313.sroa.162.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %512, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.157.5.us.us = phi <32 x i32> [ %convolved313.sroa.157.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %509, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.152.5.us.us = phi <32 x i32> [ %convolved313.sroa.152.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %506, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.147.5.us.us = phi <32 x i32> [ %convolved313.sroa.147.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %500, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.142.5.us.us = phi <32 x i32> [ %convolved313.sroa.142.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %497, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.137.5.us.us = phi <32 x i32> [ %convolved313.sroa.137.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %494, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.132.5.us.us = phi <32 x i32> [ %convolved313.sroa.132.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %491, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.122.5.us.us = phi <32 x i32> [ %convolved313.sroa.122.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %485, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.112.5.us.us = phi <32 x i32> [ %convolved313.sroa.112.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %482, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.102.5.us.us = phi <32 x i32> [ %convolved313.sroa.102.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %479, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.92.5.us.us = phi <32 x i32> [ %convolved313.sroa.92.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %476, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.77.5.us.us = phi <32 x i32> [ %convolved313.sroa.77.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %470, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.62.5.us.us = phi <32 x i32> [ %convolved313.sroa.62.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %464, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.47.5.us.us = phi <32 x i32> [ %convolved313.sroa.47.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %458, %"for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.0.5.us.us = phi <32 x i32> [ %convolved313.sroa.0.2.us.us, %"for convolved.s1.r19$x.us.us" ], [ %451, %"for convolved.s1.r19$z.r124.us.us" ]
  %547 = add nuw nsw i32 %"convolved.s1.r19$x.us.us", 1
  %.not375.us.us = icmp eq i32 %547, %8
  br i1 %.not375.us.us, label %"end for convolved.s1.r19$x.us.us", label %"for convolved.s1.r19$x.us.us"

"end for convolved.s1.r19$x.us.us":               ; preds = %"end for convolved.s1.r19$z.r124.us.us", %"for convolved.s1.r19$y.us.us"
  %convolved313.sroa.207.3.us.us = phi <32 x i32> [ %convolved313.sroa.207.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.207.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.202.3.us.us = phi <32 x i32> [ %convolved313.sroa.202.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.202.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.197.3.us.us = phi <32 x i32> [ %convolved313.sroa.197.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.197.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.192.3.us.us = phi <32 x i32> [ %convolved313.sroa.192.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.192.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.187.3.us.us = phi <32 x i32> [ %convolved313.sroa.187.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.187.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.182.3.us.us = phi <32 x i32> [ %convolved313.sroa.182.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.182.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.177.3.us.us = phi <32 x i32> [ %convolved313.sroa.177.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.177.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.172.3.us.us = phi <32 x i32> [ %convolved313.sroa.172.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.172.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.167.3.us.us = phi <32 x i32> [ %convolved313.sroa.167.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.167.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.162.3.us.us = phi <32 x i32> [ %convolved313.sroa.162.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.162.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.157.3.us.us = phi <32 x i32> [ %convolved313.sroa.157.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.157.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.152.3.us.us = phi <32 x i32> [ %convolved313.sroa.152.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.152.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.147.3.us.us = phi <32 x i32> [ %convolved313.sroa.147.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.147.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.142.3.us.us = phi <32 x i32> [ %convolved313.sroa.142.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.142.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.137.3.us.us = phi <32 x i32> [ %convolved313.sroa.137.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.137.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.132.3.us.us = phi <32 x i32> [ %convolved313.sroa.132.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.132.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.122.3.us.us = phi <32 x i32> [ %convolved313.sroa.122.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.122.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.112.3.us.us = phi <32 x i32> [ %convolved313.sroa.112.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.112.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.102.3.us.us = phi <32 x i32> [ %convolved313.sroa.102.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.102.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.92.3.us.us = phi <32 x i32> [ %convolved313.sroa.92.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.92.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.77.3.us.us = phi <32 x i32> [ %convolved313.sroa.77.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.77.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.62.3.us.us = phi <32 x i32> [ %convolved313.sroa.62.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.62.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.47.3.us.us = phi <32 x i32> [ %convolved313.sroa.47.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.47.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %convolved313.sroa.0.3.us.us = phi <32 x i32> [ %convolved313.sroa.0.1.us.us, %"for convolved.s1.r19$y.us.us" ], [ %convolved313.sroa.0.5.us.us, %"end for convolved.s1.r19$z.r124.us.us" ]
  %548 = add nuw nsw i32 %"convolved.s1.r19$y.us.us", 1
  %.not374.us.us = icmp eq i32 %548, %10
  br i1 %.not374.us.us, label %"consume convolved.us.us", label %"for convolved.s1.r19$y.us.us"

"consume convolved.us.us":                        ; preds = %"end for convolved.s1.r19$x.us.us", %after_bb18.us.us
  %convolved313.sroa.207.6.us.us = phi <32 x i32> [ %convolved313.sroa.207.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.207.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.202.6.us.us = phi <32 x i32> [ %convolved313.sroa.202.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.202.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.197.6.us.us = phi <32 x i32> [ %convolved313.sroa.197.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.197.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.192.6.us.us = phi <32 x i32> [ %convolved313.sroa.192.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.192.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.187.6.us.us = phi <32 x i32> [ %convolved313.sroa.187.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.187.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.182.6.us.us = phi <32 x i32> [ %convolved313.sroa.182.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.182.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.177.6.us.us = phi <32 x i32> [ %convolved313.sroa.177.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.177.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.172.6.us.us = phi <32 x i32> [ %convolved313.sroa.172.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.172.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.167.6.us.us = phi <32 x i32> [ %convolved313.sroa.167.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.167.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.162.6.us.us = phi <32 x i32> [ %convolved313.sroa.162.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.162.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.157.6.us.us = phi <32 x i32> [ %convolved313.sroa.157.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.157.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.152.6.us.us = phi <32 x i32> [ %convolved313.sroa.152.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.152.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.147.6.us.us = phi <32 x i32> [ %convolved313.sroa.147.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.147.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.142.6.us.us = phi <32 x i32> [ %convolved313.sroa.142.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.142.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.137.6.us.us = phi <32 x i32> [ %convolved313.sroa.137.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.137.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.132.6.us.us = phi <32 x i32> [ %convolved313.sroa.132.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.132.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.122.6.us.us = phi <32 x i32> [ %convolved313.sroa.122.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.122.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.112.6.us.us = phi <32 x i32> [ %convolved313.sroa.112.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.112.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.102.6.us.us = phi <32 x i32> [ %convolved313.sroa.102.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.102.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.92.6.us.us = phi <32 x i32> [ %convolved313.sroa.92.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.92.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.77.6.us.us = phi <32 x i32> [ %convolved313.sroa.77.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.77.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.62.6.us.us = phi <32 x i32> [ %convolved313.sroa.62.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.62.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.47.6.us.us = phi <32 x i32> [ %convolved313.sroa.47.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.47.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %convolved313.sroa.0.6.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.us.us, %after_bb18.us.us ], [ %convolved313.sroa.0.3.us.us, %"end for convolved.s1.r19$x.us.us" ]
  %549 = sext <32 x i32> %convolved313.sroa.0.6.us.us to <32 x i64>
  %a15.us.us = mul nsw <32 x i64> %549, %202
  %550 = icmp slt <32 x i64> %a15.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %551 = select <32 x i1> %550, <32 x i64> %a15.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %552 = add nsw <32 x i64> %551, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a14.us.us = ashr <32 x i64> %552, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %553 = icmp slt <32 x i64> %a14.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a13.us.us = select <32 x i1> %553, <32 x i64> %a14.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %554 = icmp sgt <32 x i64> %a13.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %555 = select <32 x i1> %554, <32 x i64> %a13.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %556 = trunc <32 x i64> %555 to <32 x i32>
  %557 = sext <32 x i32> %convolved313.sroa.47.6.us.us to <32 x i64>
  %a19.us.us = mul nsw <32 x i64> %557, %202
  %558 = icmp slt <32 x i64> %a19.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %559 = select <32 x i1> %558, <32 x i64> %a19.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %560 = add nsw <32 x i64> %559, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a18.us.us = ashr <32 x i64> %560, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %561 = icmp slt <32 x i64> %a18.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a17.us.us = select <32 x i1> %561, <32 x i64> %a18.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %562 = icmp sgt <32 x i64> %a17.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %563 = select <32 x i1> %562, <32 x i64> %a17.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %564 = trunc <32 x i64> %563 to <32 x i32>
  %565 = sext <32 x i32> %convolved313.sroa.62.6.us.us to <32 x i64>
  %a23.us.us = mul nsw <32 x i64> %565, %202
  %566 = icmp slt <32 x i64> %a23.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %567 = select <32 x i1> %566, <32 x i64> %a23.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %568 = add nsw <32 x i64> %567, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a22.us.us = ashr <32 x i64> %568, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %569 = icmp slt <32 x i64> %a22.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a21.us.us = select <32 x i1> %569, <32 x i64> %a22.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %570 = icmp sgt <32 x i64> %a21.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %571 = select <32 x i1> %570, <32 x i64> %a21.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %572 = trunc <32 x i64> %571 to <32 x i32>
  %573 = sext <32 x i32> %convolved313.sroa.77.6.us.us to <32 x i64>
  %a27.us.us = mul nsw <32 x i64> %573, %202
  %574 = icmp slt <32 x i64> %a27.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %575 = select <32 x i1> %574, <32 x i64> %a27.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %576 = add nsw <32 x i64> %575, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a26.us.us = ashr <32 x i64> %576, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %577 = icmp slt <32 x i64> %a26.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a25.us.us = select <32 x i1> %577, <32 x i64> %a26.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %578 = icmp sgt <32 x i64> %a25.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %579 = select <32 x i1> %578, <32 x i64> %a25.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %580 = trunc <32 x i64> %579 to <32 x i32>
  %581 = call <128 x i8> @hydride.node.conv_nn_hvx_depth5.50(<32 x i32> %556, <1 x i32> %214, <1 x i32> %215, <32 x i32> %564, <1 x i32> %214, <32 x i32> %572, <1 x i32> %214, <32 x i32> %580, <1 x i32> %214, <128 x i16> %209, <128 x i8> %211, <128 x i8> %213) #12
  %582 = shl nsw i32 %output.s0.c.co.us.us, 7
  %583 = add i32 %582, %t877.us.us
  %584 = add i32 %583, %813
  %585 = getelementptr inbounds i8, i8* %22, i32 %584
  %586 = bitcast i8* %585 to <128 x i8>*
  store <128 x i8> %581, <128 x i8>* %586, align 1, !tbaa !111
  %587 = sext <32 x i32> %convolved313.sroa.92.6.us.us to <32 x i64>
  %a31.us.us = mul nsw <32 x i64> %587, %202
  %588 = icmp slt <32 x i64> %a31.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %589 = select <32 x i1> %588, <32 x i64> %a31.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %590 = add nsw <32 x i64> %589, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a30.us.us = ashr <32 x i64> %590, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %591 = icmp slt <32 x i64> %a30.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a29.us.us = select <32 x i1> %591, <32 x i64> %a30.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %592 = icmp sgt <32 x i64> %a29.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %593 = select <32 x i1> %592, <32 x i64> %a29.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %594 = trunc <32 x i64> %593 to <32 x i32>
  %595 = sext <32 x i32> %convolved313.sroa.102.6.us.us to <32 x i64>
  %a35.us.us = mul nsw <32 x i64> %595, %202
  %596 = icmp slt <32 x i64> %a35.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %597 = select <32 x i1> %596, <32 x i64> %a35.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %598 = add nsw <32 x i64> %597, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a34.us.us = ashr <32 x i64> %598, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %599 = icmp slt <32 x i64> %a34.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a33.us.us = select <32 x i1> %599, <32 x i64> %a34.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %600 = icmp sgt <32 x i64> %a33.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %601 = select <32 x i1> %600, <32 x i64> %a33.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %602 = trunc <32 x i64> %601 to <32 x i32>
  %603 = sext <32 x i32> %convolved313.sroa.112.6.us.us to <32 x i64>
  %a39.us.us = mul nsw <32 x i64> %603, %202
  %604 = icmp slt <32 x i64> %a39.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %605 = select <32 x i1> %604, <32 x i64> %a39.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %606 = add nsw <32 x i64> %605, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a38.us.us = ashr <32 x i64> %606, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %607 = icmp slt <32 x i64> %a38.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a37.us.us = select <32 x i1> %607, <32 x i64> %a38.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %608 = icmp sgt <32 x i64> %a37.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %609 = select <32 x i1> %608, <32 x i64> %a37.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %610 = trunc <32 x i64> %609 to <32 x i32>
  %611 = sext <32 x i32> %convolved313.sroa.122.6.us.us to <32 x i64>
  %a43.us.us = mul nsw <32 x i64> %611, %202
  %612 = icmp slt <32 x i64> %a43.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %613 = select <32 x i1> %612, <32 x i64> %a43.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %614 = add nsw <32 x i64> %613, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a42.us.us = ashr <32 x i64> %614, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %615 = icmp slt <32 x i64> %a42.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a41.us.us = select <32 x i1> %615, <32 x i64> %a42.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %616 = icmp sgt <32 x i64> %a41.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %617 = select <32 x i1> %616, <32 x i64> %a41.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %618 = trunc <32 x i64> %617 to <32 x i32>
  %619 = call <128 x i8> @hydride.node.conv_nn_hvx_depth5.51(<32 x i32> %594, <1 x i32> %214, <1 x i32> %215, <32 x i32> %602, <1 x i32> %214, <32 x i32> %610, <1 x i32> %214, <32 x i32> %618, <1 x i32> %214, <128 x i16> %209, <128 x i8> %211, <128 x i8> %213) #12
  %620 = add i32 %583, %814
  %621 = getelementptr inbounds i8, i8* %22, i32 %620
  %622 = bitcast i8* %621 to <128 x i8>*
  store <128 x i8> %619, <128 x i8>* %622, align 1, !tbaa !111
  %623 = sext <32 x i32> %convolved313.sroa.132.6.us.us to <32 x i64>
  %a47.us.us = mul nsw <32 x i64> %623, %202
  %624 = icmp slt <32 x i64> %a47.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %625 = select <32 x i1> %624, <32 x i64> %a47.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %626 = add nsw <32 x i64> %625, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a46.us.us = ashr <32 x i64> %626, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %627 = icmp slt <32 x i64> %a46.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a45.us.us = select <32 x i1> %627, <32 x i64> %a46.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %628 = icmp sgt <32 x i64> %a45.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %629 = select <32 x i1> %628, <32 x i64> %a45.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %630 = trunc <32 x i64> %629 to <32 x i32>
  %631 = sext <32 x i32> %convolved313.sroa.137.6.us.us to <32 x i64>
  %a51.us.us = mul nsw <32 x i64> %631, %202
  %632 = icmp slt <32 x i64> %a51.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %633 = select <32 x i1> %632, <32 x i64> %a51.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %634 = add nsw <32 x i64> %633, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a50.us.us = ashr <32 x i64> %634, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %635 = icmp slt <32 x i64> %a50.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a49.us.us = select <32 x i1> %635, <32 x i64> %a50.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %636 = icmp sgt <32 x i64> %a49.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %637 = select <32 x i1> %636, <32 x i64> %a49.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %638 = trunc <32 x i64> %637 to <32 x i32>
  %639 = sext <32 x i32> %convolved313.sroa.142.6.us.us to <32 x i64>
  %a55.us.us = mul nsw <32 x i64> %639, %202
  %640 = icmp slt <32 x i64> %a55.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %641 = select <32 x i1> %640, <32 x i64> %a55.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %642 = add nsw <32 x i64> %641, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a54.us.us = ashr <32 x i64> %642, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %643 = icmp slt <32 x i64> %a54.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a53.us.us = select <32 x i1> %643, <32 x i64> %a54.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %644 = icmp sgt <32 x i64> %a53.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %645 = select <32 x i1> %644, <32 x i64> %a53.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %646 = trunc <32 x i64> %645 to <32 x i32>
  %647 = sext <32 x i32> %convolved313.sroa.147.6.us.us to <32 x i64>
  %a59.us.us = mul nsw <32 x i64> %647, %202
  %648 = icmp slt <32 x i64> %a59.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %649 = select <32 x i1> %648, <32 x i64> %a59.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %650 = add nsw <32 x i64> %649, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a58.us.us = ashr <32 x i64> %650, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %651 = icmp slt <32 x i64> %a58.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a57.us.us = select <32 x i1> %651, <32 x i64> %a58.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %652 = icmp sgt <32 x i64> %a57.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %653 = select <32 x i1> %652, <32 x i64> %a57.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %654 = trunc <32 x i64> %653 to <32 x i32>
  %655 = call <128 x i8> @hydride.node.conv_nn_hvx_depth5.52(<32 x i32> %630, <1 x i32> %214, <1 x i32> %215, <32 x i32> %638, <1 x i32> %214, <32 x i32> %646, <1 x i32> %214, <32 x i32> %654, <1 x i32> %214, <128 x i16> %209, <128 x i8> %211, <128 x i8> %213) #12
  %656 = add i32 %583, %815
  %657 = getelementptr inbounds i8, i8* %22, i32 %656
  %658 = bitcast i8* %657 to <128 x i8>*
  store <128 x i8> %655, <128 x i8>* %658, align 1, !tbaa !111
  %659 = sext <32 x i32> %convolved313.sroa.152.6.us.us to <32 x i64>
  %a63.us.us = mul nsw <32 x i64> %659, %202
  %660 = icmp slt <32 x i64> %a63.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %661 = select <32 x i1> %660, <32 x i64> %a63.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %662 = add nsw <32 x i64> %661, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a62.us.us = ashr <32 x i64> %662, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %663 = icmp slt <32 x i64> %a62.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a61.us.us = select <32 x i1> %663, <32 x i64> %a62.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %664 = icmp sgt <32 x i64> %a61.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %665 = select <32 x i1> %664, <32 x i64> %a61.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %666 = trunc <32 x i64> %665 to <32 x i32>
  %667 = sext <32 x i32> %convolved313.sroa.157.6.us.us to <32 x i64>
  %a67.us.us = mul nsw <32 x i64> %667, %202
  %668 = icmp slt <32 x i64> %a67.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %669 = select <32 x i1> %668, <32 x i64> %a67.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %670 = add nsw <32 x i64> %669, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a66.us.us = ashr <32 x i64> %670, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %671 = icmp slt <32 x i64> %a66.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a65.us.us = select <32 x i1> %671, <32 x i64> %a66.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %672 = icmp sgt <32 x i64> %a65.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %673 = select <32 x i1> %672, <32 x i64> %a65.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %674 = trunc <32 x i64> %673 to <32 x i32>
  %675 = sext <32 x i32> %convolved313.sroa.162.6.us.us to <32 x i64>
  %a71.us.us = mul nsw <32 x i64> %675, %202
  %676 = icmp slt <32 x i64> %a71.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %677 = select <32 x i1> %676, <32 x i64> %a71.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %678 = add nsw <32 x i64> %677, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a70.us.us = ashr <32 x i64> %678, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %679 = icmp slt <32 x i64> %a70.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a69.us.us = select <32 x i1> %679, <32 x i64> %a70.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %680 = icmp sgt <32 x i64> %a69.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %681 = select <32 x i1> %680, <32 x i64> %a69.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %682 = trunc <32 x i64> %681 to <32 x i32>
  %683 = sext <32 x i32> %convolved313.sroa.167.6.us.us to <32 x i64>
  %a75.us.us = mul nsw <32 x i64> %683, %202
  %684 = icmp slt <32 x i64> %a75.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %685 = select <32 x i1> %684, <32 x i64> %a75.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %686 = add nsw <32 x i64> %685, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a74.us.us = ashr <32 x i64> %686, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %687 = icmp slt <32 x i64> %a74.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a73.us.us = select <32 x i1> %687, <32 x i64> %a74.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %688 = icmp sgt <32 x i64> %a73.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %689 = select <32 x i1> %688, <32 x i64> %a73.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %690 = trunc <32 x i64> %689 to <32 x i32>
  %691 = call <128 x i8> @hydride.node.conv_nn_hvx_depth5.53(<32 x i32> %666, <1 x i32> %214, <1 x i32> %215, <32 x i32> %674, <1 x i32> %214, <32 x i32> %682, <1 x i32> %214, <32 x i32> %690, <1 x i32> %214, <128 x i16> %209, <128 x i8> %211, <128 x i8> %213) #12
  %692 = add i32 %583, %816
  %693 = getelementptr inbounds i8, i8* %22, i32 %692
  %694 = bitcast i8* %693 to <128 x i8>*
  store <128 x i8> %691, <128 x i8>* %694, align 1, !tbaa !111
  %695 = sext <32 x i32> %convolved313.sroa.172.6.us.us to <32 x i64>
  %a79.us.us = mul nsw <32 x i64> %695, %202
  %696 = icmp slt <32 x i64> %a79.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %697 = select <32 x i1> %696, <32 x i64> %a79.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %698 = add nsw <32 x i64> %697, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a78.us.us = ashr <32 x i64> %698, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %699 = icmp slt <32 x i64> %a78.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a77.us.us = select <32 x i1> %699, <32 x i64> %a78.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %700 = icmp sgt <32 x i64> %a77.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %701 = select <32 x i1> %700, <32 x i64> %a77.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %702 = trunc <32 x i64> %701 to <32 x i32>
  %703 = sext <32 x i32> %convolved313.sroa.177.6.us.us to <32 x i64>
  %a83.us.us = mul nsw <32 x i64> %703, %202
  %704 = icmp slt <32 x i64> %a83.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %705 = select <32 x i1> %704, <32 x i64> %a83.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %706 = add nsw <32 x i64> %705, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a82.us.us = ashr <32 x i64> %706, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %707 = icmp slt <32 x i64> %a82.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a81.us.us = select <32 x i1> %707, <32 x i64> %a82.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %708 = icmp sgt <32 x i64> %a81.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %709 = select <32 x i1> %708, <32 x i64> %a81.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %710 = trunc <32 x i64> %709 to <32 x i32>
  %711 = sext <32 x i32> %convolved313.sroa.182.6.us.us to <32 x i64>
  %a87.us.us = mul nsw <32 x i64> %711, %202
  %712 = icmp slt <32 x i64> %a87.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %713 = select <32 x i1> %712, <32 x i64> %a87.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %714 = add nsw <32 x i64> %713, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a86.us.us = ashr <32 x i64> %714, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %715 = icmp slt <32 x i64> %a86.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a85.us.us = select <32 x i1> %715, <32 x i64> %a86.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %716 = icmp sgt <32 x i64> %a85.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %717 = select <32 x i1> %716, <32 x i64> %a85.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %718 = trunc <32 x i64> %717 to <32 x i32>
  %719 = sext <32 x i32> %convolved313.sroa.187.6.us.us to <32 x i64>
  %a91.us.us = mul nsw <32 x i64> %719, %202
  %720 = icmp slt <32 x i64> %a91.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %721 = select <32 x i1> %720, <32 x i64> %a91.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %722 = add nsw <32 x i64> %721, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a90.us.us = ashr <32 x i64> %722, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %723 = icmp slt <32 x i64> %a90.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a89.us.us = select <32 x i1> %723, <32 x i64> %a90.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %724 = icmp sgt <32 x i64> %a89.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %725 = select <32 x i1> %724, <32 x i64> %a89.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %726 = trunc <32 x i64> %725 to <32 x i32>
  %727 = call <128 x i8> @hydride.node.conv_nn_hvx_depth5.54(<32 x i32> %702, <1 x i32> %214, <1 x i32> %215, <32 x i32> %710, <1 x i32> %214, <32 x i32> %718, <1 x i32> %214, <32 x i32> %726, <1 x i32> %214, <128 x i16> %209, <128 x i8> %211, <128 x i8> %213) #12
  %728 = add i32 %583, %817
  %729 = getelementptr inbounds i8, i8* %22, i32 %728
  %730 = bitcast i8* %729 to <128 x i8>*
  store <128 x i8> %727, <128 x i8>* %730, align 1, !tbaa !111
  %731 = sext <32 x i32> %convolved313.sroa.192.6.us.us to <32 x i64>
  %a95.us.us = mul nsw <32 x i64> %731, %202
  %732 = icmp slt <32 x i64> %a95.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %733 = select <32 x i1> %732, <32 x i64> %a95.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %734 = add nsw <32 x i64> %733, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a94.us.us = ashr <32 x i64> %734, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %735 = icmp slt <32 x i64> %a94.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a93.us.us = select <32 x i1> %735, <32 x i64> %a94.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %736 = icmp sgt <32 x i64> %a93.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %737 = select <32 x i1> %736, <32 x i64> %a93.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %738 = trunc <32 x i64> %737 to <32 x i32>
  %739 = sext <32 x i32> %convolved313.sroa.197.6.us.us to <32 x i64>
  %a99.us.us = mul nsw <32 x i64> %739, %202
  %740 = icmp slt <32 x i64> %a99.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %741 = select <32 x i1> %740, <32 x i64> %a99.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %742 = add nsw <32 x i64> %741, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a98.us.us = ashr <32 x i64> %742, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %743 = icmp slt <32 x i64> %a98.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a97.us.us = select <32 x i1> %743, <32 x i64> %a98.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %744 = icmp sgt <32 x i64> %a97.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %745 = select <32 x i1> %744, <32 x i64> %a97.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %746 = trunc <32 x i64> %745 to <32 x i32>
  %747 = sext <32 x i32> %convolved313.sroa.202.6.us.us to <32 x i64>
  %a103.us.us = mul nsw <32 x i64> %747, %202
  %748 = icmp slt <32 x i64> %a103.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %749 = select <32 x i1> %748, <32 x i64> %a103.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %750 = add nsw <32 x i64> %749, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a102.us.us = ashr <32 x i64> %750, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %751 = icmp slt <32 x i64> %a102.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a101.us.us = select <32 x i1> %751, <32 x i64> %a102.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %752 = icmp sgt <32 x i64> %a101.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %753 = select <32 x i1> %752, <32 x i64> %a101.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %754 = trunc <32 x i64> %753 to <32 x i32>
  %755 = sext <32 x i32> %convolved313.sroa.207.6.us.us to <32 x i64>
  %a107.us.us = mul nsw <32 x i64> %755, %202
  %756 = icmp slt <32 x i64> %a107.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %757 = select <32 x i1> %756, <32 x i64> %a107.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %758 = add nsw <32 x i64> %757, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a106.us.us = ashr <32 x i64> %758, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %759 = icmp slt <32 x i64> %a106.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a105.us.us = select <32 x i1> %759, <32 x i64> %a106.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %760 = icmp sgt <32 x i64> %a105.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %761 = select <32 x i1> %760, <32 x i64> %a105.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %762 = trunc <32 x i64> %761 to <32 x i32>
  %763 = call <128 x i8> @hydride.node.conv_nn_hvx_depth5.55(<32 x i32> %738, <1 x i32> %214, <1 x i32> %215, <32 x i32> %746, <1 x i32> %214, <32 x i32> %754, <1 x i32> %214, <32 x i32> %762, <1 x i32> %214, <128 x i16> %209, <128 x i8> %211, <128 x i8> %213) #12
  %764 = add i32 %583, %818
  %765 = getelementptr inbounds i8, i8* %22, i32 %764
  %766 = bitcast i8* %765 to <128 x i8>*
  store <128 x i8> %763, <128 x i8>* %766, align 1, !tbaa !111
  %767 = add nuw nsw i32 %output.s0.c.co.us.us, 1
  %.not373.us.us = icmp eq i32 %767, %198
  br i1 %.not373.us.us, label %"end for output.s0.c.co.us.us", label %"for output.s0.c.co.us.us"

"end for output.s0.c.co.us.us":                   ; preds = %"consume convolved.us.us", %"consume sum_input.us.us"
  %768 = add nuw nsw i32 %output.s0.x.xo.us.us, 1
  %.not372.us.us = icmp eq i32 %768, %193
  br i1 %.not372.us.us, label %"end for output.s0.x.xo.loopexit.us.us", label %"for output.s0.x.xo.us.us"

"for convolved.s1.r19$z.r124.preheader.us.us":    ; preds = %"for convolved.s1.r19$x.us.us"
  %t919.s.us.us = add nsw i32 %436, %812
  %t924.s.us.us = add nsw i32 %436, %811
  %t925.s.us.us = add nsw i32 %436, %809
  %t926.s.us.us = add nsw i32 %436, %807
  %t927.s.us.us = add nsw i32 %436, %805
  %t928.s.us.us = add nsw i32 %436, %803
  %769 = mul nsw i32 %t919.s.us.us, %16
  %770 = add i32 %t920.us.us, %784
  %771 = add i32 %t920.us.us, %782
  %772 = add i32 %t920.us.us, %780
  %773 = mul nsw i32 %t924.s.us.us, %16
  %774 = mul nsw i32 %t925.s.us.us, %16
  %775 = mul nsw i32 %t926.s.us.us, %16
  %776 = mul nsw i32 %t927.s.us.us, %16
  %777 = mul nsw i32 %t928.s.us.us, %16
  br label %"for convolved.s1.r19$z.r124.us.us"

"for convolved.s1.r19$y.preheader.us.us":         ; preds = %after_bb18.us.us
  %778 = shl nsw i32 %output.s0.c.co.us.us, 2
  %779 = or i32 %778, 3
  %780 = mul nsw i32 %779, %7
  %781 = or i32 %778, 2
  %782 = mul nsw i32 %781, %7
  %783 = or i32 %778, 1
  %784 = mul nsw i32 %783, %7
  %785 = mul nsw i32 %output.s0.c.co.us.us, %7
  br label %"for convolved.s1.r19$y.us.us"

"for sum_input.s1.r19$x.preheader.us.us":         ; preds = %"for sum_input.s1.r19$y.us.us"
  %786 = mul nsw i32 %"sum_input.s1.r19$y.us.us", %dilation_y
  %787 = add nsw i32 %786, %229
  %788 = mul nsw i32 %787, %18
  %t880.us.us = add i32 %224, %788
  br i1 %219, label %"end for sum_input.s1.r19$x.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x.us.us"

"for output.s0.c.co.preheader.us.us":             ; preds = %"consume sum_input.us.us"
  %sum_input314.sroa.0.0.vec.extract518.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 0
  %789 = mul nsw i32 %sum_input314.sroa.0.0.vec.extract518.us.us, %166
  %790 = insertelement <1 x i32> poison, i32 %789, i32 0
  %sum_input314.sroa.0.4.vec.extract524.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 1
  %791 = mul nsw i32 %sum_input314.sroa.0.4.vec.extract524.us.us, %166
  %792 = insertelement <1 x i32> poison, i32 %791, i32 0
  %sum_input314.sroa.0.8.vec.extract530.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 2
  %793 = mul nsw i32 %sum_input314.sroa.0.8.vec.extract530.us.us, %166
  %794 = insertelement <1 x i32> poison, i32 %793, i32 0
  %sum_input314.sroa.0.12.vec.extract536.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 3
  %795 = mul nsw i32 %sum_input314.sroa.0.12.vec.extract536.us.us, %166
  %796 = insertelement <1 x i32> poison, i32 %795, i32 0
  %sum_input314.sroa.0.16.vec.extract542.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 4
  %797 = mul nsw i32 %sum_input314.sroa.0.16.vec.extract542.us.us, %166
  %798 = insertelement <1 x i32> poison, i32 %797, i32 0
  %sum_input314.sroa.0.20.vec.extract548.us.us = extractelement <6 x i32> %sum_input314.sroa.0.13.us.us, i32 5
  %799 = mul nsw i32 %sum_input314.sroa.0.20.vec.extract548.us.us, %166
  %800 = insertelement <1 x i32> poison, i32 %799, i32 0
  %801 = add nsw i32 %output.s0.x.x.base.s.us.us, %24
  %802 = add nsw i32 %801, 5
  %803 = mul nsw i32 %802, %stride_x
  %804 = add nsw i32 %801, 4
  %805 = mul nsw i32 %804, %stride_x
  %806 = add nsw i32 %801, 3
  %807 = mul nsw i32 %806, %stride_x
  %808 = add nsw i32 %801, 2
  %809 = mul nsw i32 %808, %stride_x
  %810 = add nsw i32 %801, 1
  %811 = mul nsw i32 %810, %stride_x
  %812 = mul nsw i32 %801, %stride_x
  %813 = mul nsw i32 %801, %26
  %814 = mul nsw i32 %810, %26
  %815 = mul nsw i32 %808, %26
  %816 = mul nsw i32 %806, %26
  %817 = mul nsw i32 %804, %26
  %818 = mul nsw i32 %802, %26
  br label %"for output.s0.c.co.us.us"

"for sum_input.s1.r19$y.preheader.us.us":         ; preds = %then_bb10.us.us
  %819 = add nsw i32 %output.s0.x.x.base.s.us.us, %24
  %820 = sub i32 %819, %15
  br label %"for sum_input.s1.r19$y.us.us"

"for sum_input.s1.r19$y12.preheader.us.us":       ; preds = %next_bb11.us.us
  %821 = add nsw i32 %output.s0.x.x.base.s.us.us, %24
  %822 = mul nsw i32 %821, %stride_x
  br i1 %brmerge1305.demorgan, label %"for sum_input.s1.r19$y12.us.us.us.us", label %"consume sum_input.us.us", !prof !103

"end for output.s0.x.xo.loopexit.us.us":          ; preds = %"end for output.s0.c.co.us.us"
  %823 = add nuw nsw i32 %output.s0.y.rebased.us.us, 1
  %.not371.us.us = icmp eq i32 %823, %28
  br i1 %.not371.us.us, label %"end for output.s0.y.rebased.loopexit.us", label %"for output.s0.y.rebased.us.us"

"for sum_input.s1.r19$y12.us.us.us.us":           ; preds = %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", %"for sum_input.s1.r19$y12.preheader.us.us"
  %sum_input314.sroa.0.8.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ zeroinitializer, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %"sum_input.s1.r19$y14.us.us.us.us" = phi i32 [ %984, %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.preheader.us.us" ]
  %824 = mul nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", %dilation_y
  %t882.s.us.us.us.us = add nsw i32 %824, %229
  %825 = mul nsw i32 %t882.s.us.us.us.us, %18
  br label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"for sum_input.s1.r19$x15.us.us.us.us.us":        ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y12.us.us.us.us"
  %sum_input314.sroa.0.9.us.us.us.us.us = phi <6 x i32> [ %.lcssa, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ %sum_input314.sroa.0.8.us.us.us.us, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %"sum_input.s1.r19$x17.us.us.us.us.us" = phi i32 [ %983, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y12.us.us.us.us" ]
  %826 = mul nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", %dilation_x
  %t883.s.us.us.us.us.us = add nsw i32 %826, %822
  %t1221.us.us.us.us.us = mul nsw i32 %t883.s.us.us.us.us.us, %16
  %827 = add i32 %t1221.us.us.us.us.us, %825
  %t884.us.us.us.us.us = sub i32 %827, %t852
  %828 = add i32 %t884.us.us.us.us.us, %223
  %t860.us.us.us.us.us = add i32 %827, %184
  %829 = sub i32 %t860.us.us.us.us.us, %173
  %t885.us.us.us.us.us = sub i32 %829, %174
  %830 = add i32 %t885.us.us.us.us.us, %223
  %831 = add i32 %827, %182
  %832 = sub i32 %831, %216
  %t886.us.us.us.us.us = sub i32 %832, %174
  %833 = add i32 %t886.us.us.us.us.us, %223
  %834 = add i32 %827, %181
  %835 = sub i32 %834, %216
  %t887.us.us.us.us.us = sub i32 %835, %174
  %836 = add i32 %t887.us.us.us.us.us, %223
  %837 = add i32 %827, %180
  %838 = sub i32 %837, %216
  %t888.us.us.us.us.us = sub i32 %838, %174
  %839 = add i32 %t888.us.us.us.us.us, %223
  %840 = add i32 %827, %179
  %841 = sub i32 %840, %216
  %t889.us.us.us.us.us = sub i32 %841, %174
  %842 = add i32 %t889.us.us.us.us.us, %223
  br i1 %218, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"for sum_input.s1.r19$z.r124.us.us.us.us.us":     ; preds = %"for sum_input.s1.r19$z.r124.us.us.us.us.us", %"for sum_input.s1.r19$x15.us.us.us.us.us"
  %sum_input314.sroa.0.11.us.us.us.us.us = phi <6 x i32> [ %935, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %sum_input314.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us" = phi i32 [ %936, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %niter1513 = phi i32 [ %niter1513.nsub.1, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ], [ %unroll_iter1512, %"for sum_input.s1.r19$x15.us.us.us.us.us" ]
  %843 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %844 = add i32 %828, %843
  %845 = getelementptr inbounds i8, i8* %12, i32 %844
  %846 = bitcast i8* %845 to <4 x i8>*
  %847 = load <4 x i8>, <4 x i8>* %846, align 4, !tbaa !108
  %848 = add i32 %830, %843
  %849 = getelementptr inbounds i8, i8* %12, i32 %848
  %850 = bitcast i8* %849 to <4 x i8>*
  %851 = load <4 x i8>, <4 x i8>* %850, align 4, !tbaa !108
  %852 = add i32 %833, %843
  %853 = getelementptr inbounds i8, i8* %12, i32 %852
  %854 = bitcast i8* %853 to <4 x i8>*
  %855 = load <4 x i8>, <4 x i8>* %854, align 4, !tbaa !108
  %856 = add i32 %836, %843
  %857 = getelementptr inbounds i8, i8* %12, i32 %856
  %858 = bitcast i8* %857 to <4 x i8>*
  %859 = load <4 x i8>, <4 x i8>* %858, align 4, !tbaa !108
  %860 = add i32 %839, %843
  %861 = getelementptr inbounds i8, i8* %12, i32 %860
  %862 = bitcast i8* %861 to <4 x i8>*
  %863 = load <4 x i8>, <4 x i8>* %862, align 4, !tbaa !108
  %864 = add i32 %842, %843
  %865 = getelementptr inbounds i8, i8* %12, i32 %864
  %866 = bitcast i8* %865 to <4 x i8>*
  %867 = load <4 x i8>, <4 x i8>* %866, align 4, !tbaa !108
  %868 = shufflevector <4 x i8> %847, <4 x i8> %851, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %869 = shufflevector <4 x i8> %855, <4 x i8> %859, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %870 = shufflevector <8 x i8> %868, <8 x i8> %869, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %871 = shufflevector <4 x i8> %863, <4 x i8> %867, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %872 = shufflevector <16 x i8> %870, <16 x i8> %871, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us = zext <24 x i8> %872 to <24 x i16>
  %873 = shufflevector <24 x i16> %t1223.us.us.us.us.us, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %874 = bitcast <64 x i16> %873 to <32 x i32>
  %875 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %874)
  %876 = bitcast <32 x i32> %875 to <64 x i16>
  %877 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %874)
  %878 = bitcast <32 x i32> %877 to <64 x i16>
  %879 = add <64 x i16> %878, %876
  %880 = shufflevector <64 x i16> %879, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us = zext <12 x i16> %880 to <12 x i32>
  %881 = shufflevector <12 x i32> %t1222.us.us.us.us.us, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %882 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %881, i32 -4)
  %883 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %882)
  %884 = shufflevector <32 x i32> %883, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %885 = add nsw <6 x i32> %884, %sum_input314.sroa.0.11.us.us.us.us.us
  %886 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %882)
  %887 = shufflevector <32 x i32> %886, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %888 = add nsw <6 x i32> %885, %887
  %889 = shl i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %890 = or i32 %889, 4
  %891 = add i32 %828, %890
  %892 = getelementptr inbounds i8, i8* %12, i32 %891
  %893 = bitcast i8* %892 to <4 x i8>*
  %894 = load <4 x i8>, <4 x i8>* %893, align 4, !tbaa !108
  %895 = add i32 %830, %890
  %896 = getelementptr inbounds i8, i8* %12, i32 %895
  %897 = bitcast i8* %896 to <4 x i8>*
  %898 = load <4 x i8>, <4 x i8>* %897, align 4, !tbaa !108
  %899 = add i32 %833, %890
  %900 = getelementptr inbounds i8, i8* %12, i32 %899
  %901 = bitcast i8* %900 to <4 x i8>*
  %902 = load <4 x i8>, <4 x i8>* %901, align 4, !tbaa !108
  %903 = add i32 %836, %890
  %904 = getelementptr inbounds i8, i8* %12, i32 %903
  %905 = bitcast i8* %904 to <4 x i8>*
  %906 = load <4 x i8>, <4 x i8>* %905, align 4, !tbaa !108
  %907 = add i32 %839, %890
  %908 = getelementptr inbounds i8, i8* %12, i32 %907
  %909 = bitcast i8* %908 to <4 x i8>*
  %910 = load <4 x i8>, <4 x i8>* %909, align 4, !tbaa !108
  %911 = add i32 %842, %890
  %912 = getelementptr inbounds i8, i8* %12, i32 %911
  %913 = bitcast i8* %912 to <4 x i8>*
  %914 = load <4 x i8>, <4 x i8>* %913, align 4, !tbaa !108
  %915 = shufflevector <4 x i8> %894, <4 x i8> %898, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %916 = shufflevector <4 x i8> %902, <4 x i8> %906, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %917 = shufflevector <8 x i8> %915, <8 x i8> %916, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %918 = shufflevector <4 x i8> %910, <4 x i8> %914, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %919 = shufflevector <16 x i8> %917, <16 x i8> %918, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us.1 = zext <24 x i8> %919 to <24 x i16>
  %920 = shufflevector <24 x i16> %t1223.us.us.us.us.us.1, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %921 = bitcast <64 x i16> %920 to <32 x i32>
  %922 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %921)
  %923 = bitcast <32 x i32> %922 to <64 x i16>
  %924 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %921)
  %925 = bitcast <32 x i32> %924 to <64 x i16>
  %926 = add <64 x i16> %925, %923
  %927 = shufflevector <64 x i16> %926, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us.1 = zext <12 x i16> %927 to <12 x i32>
  %928 = shufflevector <12 x i32> %t1222.us.us.us.us.us.1, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %929 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %928, i32 -4)
  %930 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %929)
  %931 = shufflevector <32 x i32> %930, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %932 = add nsw <6 x i32> %931, %888
  %933 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %929)
  %934 = shufflevector <32 x i32> %933, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %935 = add nsw <6 x i32> %932, %934
  %936 = add nuw nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us", 2
  %niter1513.nsub.1 = add i32 %niter1513, -2
  %niter1513.ncmp.1 = icmp eq i32 %niter1513.nsub.1, 0
  br i1 %niter1513.ncmp.1, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124.us.us.us.us.us", %"for sum_input.s1.r19$x15.us.us.us.us.us"
  %.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %935, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %sum_input314.sroa.0.11.us.us.us.us.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.9.us.us.us.us.us, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %935, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x15.us.us.us.us.us" ], [ %936, %"for sum_input.s1.r19$z.r124.us.us.us.us.us" ]
  br i1 %lcmp.mod1511.not, label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa"
  %937 = shl nsw i32 %"sum_input.s1.r19$z.r124.us.us.us.us.us.unr", 2
  %938 = add i32 %828, %937
  %939 = getelementptr inbounds i8, i8* %12, i32 %938
  %940 = bitcast i8* %939 to <4 x i8>*
  %941 = load <4 x i8>, <4 x i8>* %940, align 4, !tbaa !108
  %942 = add i32 %830, %937
  %943 = getelementptr inbounds i8, i8* %12, i32 %942
  %944 = bitcast i8* %943 to <4 x i8>*
  %945 = load <4 x i8>, <4 x i8>* %944, align 4, !tbaa !108
  %946 = add i32 %833, %937
  %947 = getelementptr inbounds i8, i8* %12, i32 %946
  %948 = bitcast i8* %947 to <4 x i8>*
  %949 = load <4 x i8>, <4 x i8>* %948, align 4, !tbaa !108
  %950 = add i32 %836, %937
  %951 = getelementptr inbounds i8, i8* %12, i32 %950
  %952 = bitcast i8* %951 to <4 x i8>*
  %953 = load <4 x i8>, <4 x i8>* %952, align 4, !tbaa !108
  %954 = add i32 %839, %937
  %955 = getelementptr inbounds i8, i8* %12, i32 %954
  %956 = bitcast i8* %955 to <4 x i8>*
  %957 = load <4 x i8>, <4 x i8>* %956, align 4, !tbaa !108
  %958 = add i32 %842, %937
  %959 = getelementptr inbounds i8, i8* %12, i32 %958
  %960 = bitcast i8* %959 to <4 x i8>*
  %961 = load <4 x i8>, <4 x i8>* %960, align 4, !tbaa !108
  %962 = shufflevector <4 x i8> %941, <4 x i8> %945, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %963 = shufflevector <4 x i8> %949, <4 x i8> %953, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %964 = shufflevector <8 x i8> %962, <8 x i8> %963, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %965 = shufflevector <4 x i8> %957, <4 x i8> %961, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %966 = shufflevector <16 x i8> %964, <16 x i8> %965, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %t1223.us.us.us.us.us.epil = zext <24 x i8> %966 to <24 x i16>
  %967 = shufflevector <24 x i16> %t1223.us.us.us.us.us.epil, <24 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %968 = bitcast <64 x i16> %967 to <32 x i32>
  %969 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %968)
  %970 = bitcast <32 x i32> %969 to <64 x i16>
  %971 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %968)
  %972 = bitcast <32 x i32> %971 to <64 x i16>
  %973 = add <64 x i16> %972, %970
  %974 = shufflevector <64 x i16> %973, <64 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %t1222.us.us.us.us.us.epil = zext <12 x i16> %974 to <12 x i32>
  %975 = shufflevector <12 x i32> %t1222.us.us.us.us.us.epil, <12 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %976 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %975, i32 -4)
  %977 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %976)
  %978 = shufflevector <32 x i32> %977, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %979 = add nsw <6 x i32> %978, %sum_input314.sroa.0.11.us.us.us.us.us.unr
  %980 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %976)
  %981 = shufflevector <32 x i32> %980, <32 x i32> undef, <6 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %982 = add nsw <6 x i32> %979, %981
  br label %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa"
  %.lcssa = phi <6 x i32> [ %.lcssa.ph, %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us.unr-lcssa" ], [ %982, %"for sum_input.s1.r19$z.r124.us.us.us.us.us.epil" ]
  %983 = add nuw nsw i32 %"sum_input.s1.r19$x17.us.us.us.us.us", 1
  %.not378.us.us.us.us.us = icmp eq i32 %983, %8
  br i1 %.not378.us.us.us.us.us, label %"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x15.us.us.us.us.us"

"end for sum_input.s1.r19$x16.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124.loopexit.us.us.us.us.us"
  %984 = add nuw nsw i32 %"sum_input.s1.r19$y14.us.us.us.us", 1
  %.not377.us.us.us.us = icmp eq i32 %984, %10
  br i1 %.not377.us.us.us.us, label %"consume sum_input.us.us", label %"for sum_input.s1.r19$y12.us.us.us.us"

next_bb5:                                         ; preds = %"consume offset_c"
  br i1 %93, label %then_bb21, label %next_bb22

then_bb21:                                        ; preds = %next_bb5
  %985 = mul nsw i32 %18, %17
  %986 = mul nsw i32 %21, %19
  %987 = mul nsw i32 %16, %15
  %988 = add i32 %986, %985
  %t941 = add i32 %988, %987
  %989 = icmp sgt i32 %20, 0
  br i1 %989, label %"for output.s0.b.rebased23.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased23.preheader":            ; preds = %then_bb21
  %990 = mul nsw i32 %16, %stride_x
  %991 = mul nsw i32 %990, 7
  %992 = mul nsw i32 %990, 6
  %993 = mul nsw i32 %990, 5
  %994 = shl nsw i32 %990, 2
  %995 = mul nsw i32 %990, 3
  %996 = shl nsw i32 %990, 1
  %997 = sub nsw i32 %stride_x, %15
  %998 = mul nsw i32 %997, %16
  %999 = icmp sgt i32 %28, 0
  %.neg781 = mul i32 %29, %27
  %.neg782 = mul i32 %26, %24
  %.neg783 = mul i32 %30, %19
  %reass.add785 = add i32 %.neg781, %.neg782
  %reass.add786 = add i32 %reass.add785, %.neg783
  %1000 = add nuw nsw i32 %25, 7
  %1001 = ashr i32 %1000, 3
  %b111 = add nsw i32 %25, -8
  %1002 = icmp sgt i32 %10, 0
  %1003 = icmp sgt i32 %8, 0
  %1004 = icmp sgt i32 %6, 0
  %1005 = ashr i32 %3, 6
  %1006 = icmp sgt i32 %3, 63
  %1007 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %1008 = shufflevector <32 x i32> %1007, <32 x i32> undef, <32 x i32> zeroinitializer
  %1009 = sext <32 x i32> %1008 to <32 x i64>
  %1010 = icmp sgt i32 %a497, 0
  %1011 = select i1 %1010, i32 %a497, i32 0
  %1012 = shl nuw i32 1, %1011
  %1013 = ashr i32 %1012, 1
  %1014 = zext i8 %output_zero to i16
  %1015 = insertelement <64 x i16> undef, i16 %1014, i32 0
  %1016 = shufflevector <64 x i16> %1015, <64 x i16> undef, <64 x i32> zeroinitializer
  %1017 = insertelement <1 x i32> poison, i32 %1013, i32 0
  %1018 = insertelement <1 x i32> poison, i32 %a497, i32 0
  %1019 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %1020 = shufflevector <32 x i8> %1019, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1021 = bitcast <128 x i8> %1020 to <32 x i32>
  %1022 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %1023 = shufflevector <32 x i8> %1022, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1024 = bitcast <128 x i8> %1023 to <32 x i32>
  br i1 %999, label %"for output.s0.b.rebased23.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased23.us.preheader":         ; preds = %"for output.s0.b.rebased23.preheader"
  %1025 = add i32 %987, %985
  %1026 = add i32 %8, -1
  %brmerge1308.demorgan = and i1 %1003, %1004
  %xtraiter1500 = and i32 %6, 1
  %1027 = icmp eq i32 %6, 1
  %unroll_iter1502 = and i32 %6, -2
  %lcmp.mod1501.not = icmp eq i32 %xtraiter1500, 0
  %xtraiter1504 = and i32 %8, 3
  %1028 = icmp ult i32 %1026, 3
  %unroll_iter1508 = and i32 %8, -4
  %lcmp.mod1506.not = icmp eq i32 %xtraiter1504, 0
  br label %"for output.s0.b.rebased23.us"

"for output.s0.b.rebased23.us":                   ; preds = %"end for output.s0.y.rebased27.loopexit.us", %"for output.s0.b.rebased23.us.preheader"
  %convolved313.sroa.0.7.us = phi <32 x i32> [ %.us-phi1094.us, %"end for output.s0.y.rebased27.loopexit.us" ], [ undef, %"for output.s0.b.rebased23.us.preheader" ]
  %output.s0.b.rebased25.us = phi i32 [ %1035, %"end for output.s0.y.rebased27.loopexit.us" ], [ 0, %"for output.s0.b.rebased23.us.preheader" ]
  %1029 = add nsw i32 %output.s0.b.rebased25.us, %19
  %1030 = mul nsw i32 %1029, %30
  %1031 = sub i32 %1030, %reass.add786
  %1032 = mul nsw i32 %1029, %21
  %1033 = sub i32 %1032, %988
  %1034 = sub nsw i32 %1032, %t941
  br i1 %99, label %"for output.s0.y.rebased26.us.us", label %"end for output.s0.y.rebased27.loopexit.us", !prof !96

"end for output.s0.y.rebased27.loopexit.us":      ; preds = %"end for output.s0.x.xo30.loopexit.us.us", %"for output.s0.b.rebased23.us"
  %.us-phi1094.us = phi <32 x i32> [ %convolved313.sroa.0.7.us, %"for output.s0.b.rebased23.us" ], [ %convolved313.sroa.0.20.us.us, %"end for output.s0.x.xo30.loopexit.us.us" ]
  %1035 = add nuw nsw i32 %output.s0.b.rebased25.us, 1
  %.not358.us = icmp eq i32 %1035, %20
  br i1 %.not358.us, label %after_bb3, label %"for output.s0.b.rebased23.us"

"for output.s0.y.rebased26.us.us":                ; preds = %"end for output.s0.x.xo30.loopexit.us.us", %"for output.s0.b.rebased23.us"
  %convolved313.sroa.0.8.us.us = phi <32 x i32> [ %convolved313.sroa.0.20.us.us, %"end for output.s0.x.xo30.loopexit.us.us" ], [ %convolved313.sroa.0.7.us, %"for output.s0.b.rebased23.us" ]
  %output.s0.y.rebased28.us.us = phi i32 [ %1836, %"end for output.s0.x.xo30.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased23.us" ]
  %1036 = add nsw i32 %output.s0.y.rebased28.us.us, %27
  %1037 = mul nsw i32 %1036, %29
  %t970.us.us = add i32 %1031, %1037
  %1038 = mul nsw i32 %1036, %stride_y
  br label %"for output.s0.x.xo29.us.us"

"for output.s0.x.xo29.us.us":                     ; preds = %"end for output.s0.c.co58.us.us", %"for output.s0.y.rebased26.us.us"
  %convolved313.sroa.0.10.us.us = phi <32 x i32> [ %convolved313.sroa.0.20.us.us, %"end for output.s0.c.co58.us.us" ], [ %convolved313.sroa.0.8.us.us, %"for output.s0.y.rebased26.us.us" ]
  %output.s0.x.xo31.us.us = phi i32 [ %1784, %"end for output.s0.c.co58.us.us" ], [ 0, %"for output.s0.y.rebased26.us.us" ]
  %a109.us.us = shl nsw i32 %output.s0.x.xo31.us.us, 3
  %1039 = icmp slt i32 %a109.us.us, %b111
  %output.s0.x.x.base.s32.us.us = select i1 %1039, i32 %a109.us.us, i32 %b111
  br i1 %t843.not, label %"consume sum_input56.us.us", label %then_bb36.us.us

then_bb36.us.us:                                  ; preds = %"for output.s0.x.xo29.us.us"
  %convolved313.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %convolved313.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb39.us.us, label %next_bb40.us.us

next_bb40.us.us:                                  ; preds = %then_bb36.us.us
  br i1 %1002, label %"for sum_input.s1.r19$y47.preheader.us.us", label %"consume sum_input56.us.us", !prof !96

then_bb39.us.us:                                  ; preds = %then_bb36.us.us
  br i1 %1002, label %"for sum_input.s1.r19$y41.preheader.us.us", label %"consume sum_input56.us.us", !prof !96

"for sum_input.s1.r19$y41.us.us":                 ; preds = %"for sum_input.s1.r19$y41.preheader.us.us", %"end for sum_input.s1.r19$x45.us.us"
  %convolved313.sroa.0.12.us.us = phi <32 x i32> [ %convolved313.sroa.0.14.us.us, %"end for sum_input.s1.r19$x45.us.us" ], [ %convolved313.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y41.preheader.us.us" ]
  %"sum_input.s1.r19$y43.us.us" = phi i32 [ %1140, %"end for sum_input.s1.r19$x45.us.us" ], [ 0, %"for sum_input.s1.r19$y41.preheader.us.us" ]
  br i1 %1003, label %"for sum_input.s1.r19$x44.preheader.us.us", label %"end for sum_input.s1.r19$x45.us.us", !prof !96

"for sum_input.s1.r19$x44.us.us":                 ; preds = %"for sum_input.s1.r19$x44.preheader.us.us", %"for sum_input.s1.r19$x44.us.us"
  %convolved313.sroa.0.13.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend562.us.us.3, %"for sum_input.s1.r19$x44.us.us" ], [ %convolved313.sroa.0.12.us.us, %"for sum_input.s1.r19$x44.preheader.us.us" ]
  %"sum_input.s1.r19$x46.us.us" = phi i32 [ %1119, %"for sum_input.s1.r19$x44.us.us" ], [ 0, %"for sum_input.s1.r19$x44.preheader.us.us" ]
  %niter1509 = phi i32 [ %niter1509.nsub.3, %"for sum_input.s1.r19$x44.us.us" ], [ %unroll_iter1508, %"for sum_input.s1.r19$x44.preheader.us.us" ]
  %1040 = mul nsw i32 %"sum_input.s1.r19$x46.us.us", %dilation_x
  %reass.add791.us.us = add i32 %1833, %1040
  %reass.mul792.us.us = shl i32 %reass.add791.us.us, 2
  %1041 = add i32 %t973.us.us, %reass.mul792.us.us
  %1042 = getelementptr inbounds i8, i8* %12, i32 %1041
  %1043 = bitcast i8* %1042 to <32 x i8>*
  %1044 = load <32 x i8>, <32 x i8>* %1043, align 4, !tbaa !108
  %t1225.us.us = zext <32 x i8> %1044 to <32 x i16>
  %1045 = shufflevector <32 x i16> %t1225.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1046 = bitcast <64 x i16> %1045 to <32 x i32>
  %1047 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1046)
  %1048 = bitcast <32 x i32> %1047 to <64 x i16>
  %1049 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1046)
  %1050 = bitcast <32 x i32> %1049 to <64 x i16>
  %1051 = add <64 x i16> %1050, %1048
  %1052 = shufflevector <64 x i16> %1051, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us = zext <16 x i16> %1052 to <16 x i32>
  %1053 = shufflevector <16 x i32> %t1224.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1054 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1053, i32 -4)
  %1055 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1054)
  %1056 = add nsw <32 x i32> %1055, %convolved313.sroa.0.13.us.us
  %1057 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1054)
  %1058 = add nsw <32 x i32> %1056, %1057
  %convolved313.sroa.0.0.vecblend562.us.us = shufflevector <32 x i32> %1058, <32 x i32> %convolved313.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1059 = or i32 %"sum_input.s1.r19$x46.us.us", 1
  %1060 = mul nsw i32 %1059, %dilation_x
  %reass.add791.us.us.1 = add i32 %1833, %1060
  %reass.mul792.us.us.1 = shl i32 %reass.add791.us.us.1, 2
  %1061 = add i32 %t973.us.us, %reass.mul792.us.us.1
  %1062 = getelementptr inbounds i8, i8* %12, i32 %1061
  %1063 = bitcast i8* %1062 to <32 x i8>*
  %1064 = load <32 x i8>, <32 x i8>* %1063, align 4, !tbaa !108
  %t1225.us.us.1 = zext <32 x i8> %1064 to <32 x i16>
  %1065 = shufflevector <32 x i16> %t1225.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1066 = bitcast <64 x i16> %1065 to <32 x i32>
  %1067 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1066)
  %1068 = bitcast <32 x i32> %1067 to <64 x i16>
  %1069 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1066)
  %1070 = bitcast <32 x i32> %1069 to <64 x i16>
  %1071 = add <64 x i16> %1070, %1068
  %1072 = shufflevector <64 x i16> %1071, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.1 = zext <16 x i16> %1072 to <16 x i32>
  %1073 = shufflevector <16 x i32> %t1224.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1074 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1073, i32 -4)
  %1075 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1074)
  %1076 = add nsw <32 x i32> %1075, %convolved313.sroa.0.0.vecblend562.us.us
  %1077 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1074)
  %1078 = add nsw <32 x i32> %1076, %1077
  %convolved313.sroa.0.0.vecblend562.us.us.1 = shufflevector <32 x i32> %1078, <32 x i32> %convolved313.sroa.0.0.vecblend562.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1079 = or i32 %"sum_input.s1.r19$x46.us.us", 2
  %1080 = mul nsw i32 %1079, %dilation_x
  %reass.add791.us.us.2 = add i32 %1833, %1080
  %reass.mul792.us.us.2 = shl i32 %reass.add791.us.us.2, 2
  %1081 = add i32 %t973.us.us, %reass.mul792.us.us.2
  %1082 = getelementptr inbounds i8, i8* %12, i32 %1081
  %1083 = bitcast i8* %1082 to <32 x i8>*
  %1084 = load <32 x i8>, <32 x i8>* %1083, align 4, !tbaa !108
  %t1225.us.us.2 = zext <32 x i8> %1084 to <32 x i16>
  %1085 = shufflevector <32 x i16> %t1225.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1086 = bitcast <64 x i16> %1085 to <32 x i32>
  %1087 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1086)
  %1088 = bitcast <32 x i32> %1087 to <64 x i16>
  %1089 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1086)
  %1090 = bitcast <32 x i32> %1089 to <64 x i16>
  %1091 = add <64 x i16> %1090, %1088
  %1092 = shufflevector <64 x i16> %1091, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.2 = zext <16 x i16> %1092 to <16 x i32>
  %1093 = shufflevector <16 x i32> %t1224.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1094 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1093, i32 -4)
  %1095 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1094)
  %1096 = add nsw <32 x i32> %1095, %convolved313.sroa.0.0.vecblend562.us.us.1
  %1097 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1094)
  %1098 = add nsw <32 x i32> %1096, %1097
  %convolved313.sroa.0.0.vecblend562.us.us.2 = shufflevector <32 x i32> %1098, <32 x i32> %convolved313.sroa.0.0.vecblend562.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1099 = or i32 %"sum_input.s1.r19$x46.us.us", 3
  %1100 = mul nsw i32 %1099, %dilation_x
  %reass.add791.us.us.3 = add i32 %1833, %1100
  %reass.mul792.us.us.3 = shl i32 %reass.add791.us.us.3, 2
  %1101 = add i32 %t973.us.us, %reass.mul792.us.us.3
  %1102 = getelementptr inbounds i8, i8* %12, i32 %1101
  %1103 = bitcast i8* %1102 to <32 x i8>*
  %1104 = load <32 x i8>, <32 x i8>* %1103, align 4, !tbaa !108
  %t1225.us.us.3 = zext <32 x i8> %1104 to <32 x i16>
  %1105 = shufflevector <32 x i16> %t1225.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1106 = bitcast <64 x i16> %1105 to <32 x i32>
  %1107 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1106)
  %1108 = bitcast <32 x i32> %1107 to <64 x i16>
  %1109 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1106)
  %1110 = bitcast <32 x i32> %1109 to <64 x i16>
  %1111 = add <64 x i16> %1110, %1108
  %1112 = shufflevector <64 x i16> %1111, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.3 = zext <16 x i16> %1112 to <16 x i32>
  %1113 = shufflevector <16 x i32> %t1224.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1114 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1113, i32 -4)
  %1115 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1114)
  %1116 = add nsw <32 x i32> %1115, %convolved313.sroa.0.0.vecblend562.us.us.2
  %1117 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1114)
  %1118 = add nsw <32 x i32> %1116, %1117
  %convolved313.sroa.0.0.vecblend562.us.us.3 = shufflevector <32 x i32> %1118, <32 x i32> %convolved313.sroa.0.0.vecblend562.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1119 = add nuw nsw i32 %"sum_input.s1.r19$x46.us.us", 4
  %niter1509.nsub.3 = add i32 %niter1509, -4
  %niter1509.ncmp.3 = icmp eq i32 %niter1509.nsub.3, 0
  br i1 %niter1509.ncmp.3, label %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x44.us.us"

"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x44.preheader.us.us", %"for sum_input.s1.r19$x44.us.us"
  %convolved313.sroa.0.0.vecblend562.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x44.preheader.us.us" ], [ %convolved313.sroa.0.0.vecblend562.us.us.3, %"for sum_input.s1.r19$x44.us.us" ]
  %convolved313.sroa.0.13.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.12.us.us, %"for sum_input.s1.r19$x44.preheader.us.us" ], [ %convolved313.sroa.0.0.vecblend562.us.us.3, %"for sum_input.s1.r19$x44.us.us" ]
  %"sum_input.s1.r19$x46.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x44.preheader.us.us" ], [ %1119, %"for sum_input.s1.r19$x44.us.us" ]
  br i1 %lcmp.mod1506.not, label %"end for sum_input.s1.r19$x45.us.us", label %"for sum_input.s1.r19$x44.us.us.epil"

"for sum_input.s1.r19$x44.us.us.epil":            ; preds = %"for sum_input.s1.r19$x44.us.us.epil", %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa"
  %convolved313.sroa.0.13.us.us.epil = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend562.us.us.epil, %"for sum_input.s1.r19$x44.us.us.epil" ], [ %convolved313.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x46.us.us.epil" = phi i32 [ %1139, %"for sum_input.s1.r19$x44.us.us.epil" ], [ %"sum_input.s1.r19$x46.us.us.unr", %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ]
  %epil.iter1505 = phi i32 [ %epil.iter1505.sub, %"for sum_input.s1.r19$x44.us.us.epil" ], [ %xtraiter1504, %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ]
  %1120 = mul nsw i32 %"sum_input.s1.r19$x46.us.us.epil", %dilation_x
  %reass.add791.us.us.epil = add i32 %1833, %1120
  %reass.mul792.us.us.epil = shl i32 %reass.add791.us.us.epil, 2
  %1121 = add i32 %t973.us.us, %reass.mul792.us.us.epil
  %1122 = getelementptr inbounds i8, i8* %12, i32 %1121
  %1123 = bitcast i8* %1122 to <32 x i8>*
  %1124 = load <32 x i8>, <32 x i8>* %1123, align 4, !tbaa !108
  %t1225.us.us.epil = zext <32 x i8> %1124 to <32 x i16>
  %1125 = shufflevector <32 x i16> %t1225.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1126 = bitcast <64 x i16> %1125 to <32 x i32>
  %1127 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1126)
  %1128 = bitcast <32 x i32> %1127 to <64 x i16>
  %1129 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1126)
  %1130 = bitcast <32 x i32> %1129 to <64 x i16>
  %1131 = add <64 x i16> %1130, %1128
  %1132 = shufflevector <64 x i16> %1131, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1224.us.us.epil = zext <16 x i16> %1132 to <16 x i32>
  %1133 = shufflevector <16 x i32> %t1224.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1134 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1133, i32 -4)
  %1135 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1134)
  %1136 = add nsw <32 x i32> %1135, %convolved313.sroa.0.13.us.us.epil
  %1137 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1134)
  %1138 = add nsw <32 x i32> %1136, %1137
  %convolved313.sroa.0.0.vecblend562.us.us.epil = shufflevector <32 x i32> %1138, <32 x i32> %convolved313.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1139 = add nuw nsw i32 %"sum_input.s1.r19$x46.us.us.epil", 1
  %epil.iter1505.sub = add i32 %epil.iter1505, -1
  %epil.iter1505.cmp.not = icmp eq i32 %epil.iter1505.sub, 0
  br i1 %epil.iter1505.cmp.not, label %"end for sum_input.s1.r19$x45.us.us", label %"for sum_input.s1.r19$x44.us.us.epil", !llvm.loop !113

"end for sum_input.s1.r19$x45.us.us":             ; preds = %"for sum_input.s1.r19$x44.us.us.epil", %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$y41.us.us"
  %convolved313.sroa.0.14.us.us = phi <32 x i32> [ %convolved313.sroa.0.12.us.us, %"for sum_input.s1.r19$y41.us.us" ], [ %convolved313.sroa.0.0.vecblend562.us.us.lcssa.ph, %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa" ], [ %convolved313.sroa.0.0.vecblend562.us.us.epil, %"for sum_input.s1.r19$x44.us.us.epil" ]
  %1140 = add nuw nsw i32 %"sum_input.s1.r19$y43.us.us", 1
  %.not368.us.us = icmp eq i32 %1140, %10
  br i1 %.not368.us.us, label %"consume sum_input56.us.us", label %"for sum_input.s1.r19$y41.us.us"

"consume sum_input56.us.us":                      ; preds = %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us", %"for sum_input.s1.r19$y47.preheader.us.us", %"end for sum_input.s1.r19$x45.us.us", %then_bb39.us.us, %next_bb40.us.us, %"for output.s0.x.xo29.us.us"
  %convolved313.sroa.0.20.us.us = phi <32 x i32> [ %convolved313.sroa.0.10.us.us, %"for output.s0.x.xo29.us.us" ], [ %convolved313.sroa.0.0.vecblend.us.us, %then_bb39.us.us ], [ %convolved313.sroa.0.0.vecblend.us.us, %next_bb40.us.us ], [ %convolved313.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y47.preheader.us.us" ], [ %convolved313.sroa.0.14.us.us, %"end for sum_input.s1.r19$x45.us.us" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us" ]
  br i1 %1006, label %"for output.s0.c.co57.preheader.us.us", label %"end for output.s0.c.co58.us.us", !prof !96

"for output.s0.c.co57.us.us":                     ; preds = %"for output.s0.c.co57.preheader.us.us", %"consume convolved73.us.us"
  %output.s0.c.co59.us.us = phi i32 [ %1783, %"consume convolved73.us.us" ], [ 0, %"for output.s0.c.co57.preheader.us.us" ]
  %1141 = shl nsw i32 %output.s0.c.co59.us.us, 6
  %1142 = getelementptr inbounds i32, i32* %offset_c, i32 %1141
  %1143 = bitcast i32* %1142 to <32 x i32>*
  %1144 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb62.us.us, label %next_bb63.us.us

next_bb63.us.us:                                  ; preds = %"for output.s0.c.co57.us.us"
  %1145 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1793, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1146 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1144, <32 x i32> %1145, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1147 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  %1148 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1795, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1149 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1147, <32 x i32> %1148, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1150 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  %1151 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1797, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1152 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1150, <32 x i32> %1151, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1153 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  %1154 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1799, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1155 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1153, <32 x i32> %1154, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1156 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  %1157 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1801, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1158 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1156, <32 x i32> %1157, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1159 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  %1160 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1803, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1161 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1159, <32 x i32> %1160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1162 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  %1163 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1805, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1164 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1162, <32 x i32> %1163, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1165 = load <32 x i32>, <32 x i32>* %1143, align 128, !tbaa !104
  %1166 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1807, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1167 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1165, <32 x i32> %1166, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1168 = getelementptr inbounds i32, i32* %1142, i32 32
  %1169 = bitcast i32* %1168 to <32 x i32>*
  %1170 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1171 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1793, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1172 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1170, <32 x i32> %1171, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1173 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1174 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1795, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1175 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1173, <32 x i32> %1174, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1176 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1177 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1797, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1178 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1176, <32 x i32> %1177, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1179 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1180 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1799, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1181 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1179, <32 x i32> %1180, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1182 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1183 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1801, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1184 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1182, <32 x i32> %1183, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1185 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1186 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1803, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1187 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1185, <32 x i32> %1186, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1188 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1189 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1805, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1190 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1188, <32 x i32> %1189, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %1191 = load <32 x i32>, <32 x i32>* %1169, align 128, !tbaa !104
  %1192 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1807, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1193 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %1191, <32 x i32> %1192, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  br label %after_bb61.us.us

then_bb62.us.us:                                  ; preds = %"for output.s0.c.co57.us.us"
  %1194 = getelementptr inbounds i32, i32* %1142, i32 32
  %1195 = bitcast i32* %1194 to <32 x i32>*
  %1196 = load <32 x i32>, <32 x i32>* %1195, align 128, !tbaa !104
  br label %after_bb61.us.us

after_bb61.us.us:                                 ; preds = %then_bb62.us.us, %next_bb63.us.us
  %sum_input187312.sroa.155.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1193, %next_bb63.us.us ]
  %sum_input187312.sroa.146.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1167, %next_bb63.us.us ]
  %sum_input187312.sroa.137.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1190, %next_bb63.us.us ]
  %sum_input187312.sroa.128.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1164, %next_bb63.us.us ]
  %sum_input187312.sroa.119.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1187, %next_bb63.us.us ]
  %sum_input187312.sroa.110.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1161, %next_bb63.us.us ]
  %sum_input187312.sroa.101.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1184, %next_bb63.us.us ]
  %sum_input187312.sroa.92.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1158, %next_bb63.us.us ]
  %sum_input187312.sroa.83.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1181, %next_bb63.us.us ]
  %sum_input187312.sroa.74.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1155, %next_bb63.us.us ]
  %sum_input187312.sroa.65.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1178, %next_bb63.us.us ]
  %sum_input187312.sroa.56.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1152, %next_bb63.us.us ]
  %sum_input187312.sroa.47.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1175, %next_bb63.us.us ]
  %sum_input187312.sroa.38.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1149, %next_bb63.us.us ]
  %sum_input187312.sroa.29.0.us.us = phi <32 x i32> [ %1196, %then_bb62.us.us ], [ %1172, %next_bb63.us.us ]
  %sum_input187312.sroa.0.0.us.us = phi <32 x i32> [ %1144, %then_bb62.us.us ], [ %1146, %next_bb63.us.us ]
  br i1 %1002, label %"for convolved.s1.r19$y64.preheader.us.us", label %"consume convolved73.us.us", !prof !96

"consume convolved73.us.us":                      ; preds = %"end for convolved.s1.r19$x68.loopexit.us.us.us", %"for convolved.s1.r19$y64.preheader.us.us", %after_bb61.us.us
  %sum_input187312.sroa.155.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.155.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.155.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1041.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.146.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.146.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.146.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1042.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.137.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.137.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.137.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1043.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.128.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.128.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.128.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1044.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.119.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.119.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.119.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1045.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.110.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.110.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.110.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1046.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.101.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.101.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.101.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1047.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.92.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.92.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.92.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1048.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.83.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.83.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.83.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1049.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.74.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.74.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.74.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1050.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.65.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.65.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.65.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1051.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.56.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.56.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.56.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1052.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.47.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.47.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.47.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1053.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.38.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.38.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.38.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1054.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.29.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.29.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.29.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1055.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %sum_input187312.sroa.0.6.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.us.us, %after_bb61.us.us ], [ %sum_input187312.sroa.0.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ], [ %.us-phi1056.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ]
  %1197 = sext <32 x i32> %sum_input187312.sroa.0.6.us.us to <32 x i64>
  %a112.us.us = mul nsw <32 x i64> %1197, %1009
  %1198 = icmp slt <32 x i64> %a112.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1199 = select <32 x i1> %1198, <32 x i64> %a112.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1200 = add nsw <32 x i64> %1199, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a111.us.us = ashr <32 x i64> %1200, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1201 = icmp slt <32 x i64> %a111.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a110.us.us = select <32 x i1> %1201, <32 x i64> %a111.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1202 = icmp sgt <32 x i64> %a110.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1203 = select <32 x i1> %1202, <32 x i64> %a110.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1204 = trunc <32 x i64> %1203 to <32 x i32>
  %1205 = sext <32 x i32> %sum_input187312.sroa.29.6.us.us to <32 x i64>
  %a116.us.us = mul nsw <32 x i64> %1205, %1009
  %1206 = icmp slt <32 x i64> %a116.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1207 = select <32 x i1> %1206, <32 x i64> %a116.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1208 = add nsw <32 x i64> %1207, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a115.us.us = ashr <32 x i64> %1208, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1209 = icmp slt <32 x i64> %a115.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a114.us.us = select <32 x i1> %1209, <32 x i64> %a115.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1210 = icmp sgt <32 x i64> %a114.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1211 = select <32 x i1> %1210, <32 x i64> %a114.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1212 = trunc <32 x i64> %1211 to <32 x i32>
  %1213 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1214 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1215 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1204, <32 x i32> %1214, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1216 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1213, <1 x i32> zeroinitializer, <32 x i32> %1215, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1217 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1216, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1218 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1217, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1219 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1220 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1221 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1212, <32 x i32> %1220, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1222 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1219, <1 x i32> zeroinitializer, <32 x i32> %1221, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1223 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1222, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1224 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1223, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1225 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1218, <32 x i32> %1224, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1226 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1225, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1227 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1226, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1228 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1227, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1229 = trunc <64 x i16> %1228 to <64 x i8>
  %1230 = bitcast <64 x i8> %1229 to <8 x i64>
  %1231 = shufflevector <8 x i64> %1230, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1232 = bitcast <4 x i64> %1231 to <32 x i8>
  %1233 = shufflevector <32 x i8> %1232, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1234 = bitcast <128 x i8> %1233 to <32 x i32>
  %1235 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1234, <32 x i32> %1021) #12
  %1236 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1235, <32 x i32> %1024) #12
  %1237 = bitcast <32 x i32> %1236 to <128 x i8>
  %1238 = shufflevector <128 x i8> %1237, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1239 = shl nsw i32 %output.s0.c.co59.us.us, 6
  %1240 = add i32 %1239, %t970.us.us
  %1241 = add i32 %1240, %1824
  %1242 = getelementptr inbounds i8, i8* %22, i32 %1241
  %1243 = bitcast i8* %1242 to <32 x i8>*
  store <32 x i8> %1238, <32 x i8>* %1243, align 1, !tbaa !111
  %1244 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1245 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1246 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1204, <32 x i32> %1245, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1247 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1244, <1 x i32> zeroinitializer, <32 x i32> %1246, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1248 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1247, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1249 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1248, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1250 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1251 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1252 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1212, <32 x i32> %1251, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1253 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1250, <1 x i32> zeroinitializer, <32 x i32> %1252, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1254 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1253, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1255 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1254, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1256 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1249, <32 x i32> %1255, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1257 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1256, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1258 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1257, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1259 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1258, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1260 = trunc <64 x i16> %1259 to <64 x i8>
  %1261 = bitcast <64 x i8> %1260 to <8 x i64>
  %1262 = shufflevector <8 x i64> %1261, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1263 = bitcast <4 x i64> %1262 to <32 x i8>
  %1264 = shufflevector <32 x i8> %1263, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1265 = bitcast <128 x i8> %1264 to <32 x i32>
  %1266 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1265, <32 x i32> %1021) #12
  %1267 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1266, <32 x i32> %1024) #12
  %1268 = bitcast <32 x i32> %1267 to <128 x i8>
  %1269 = shufflevector <128 x i8> %1268, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1270 = getelementptr inbounds i8, i8* %1242, i32 32
  %1271 = bitcast i8* %1270 to <32 x i8>*
  store <32 x i8> %1269, <32 x i8>* %1271, align 1, !tbaa !111
  %1272 = sext <32 x i32> %sum_input187312.sroa.38.6.us.us to <32 x i64>
  %a152.us.us = mul nsw <32 x i64> %1272, %1009
  %1273 = icmp slt <32 x i64> %a152.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1274 = select <32 x i1> %1273, <32 x i64> %a152.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1275 = add nsw <32 x i64> %1274, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a151.us.us = ashr <32 x i64> %1275, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1276 = icmp slt <32 x i64> %a151.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a150.us.us = select <32 x i1> %1276, <32 x i64> %a151.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1277 = icmp sgt <32 x i64> %a150.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1278 = select <32 x i1> %1277, <32 x i64> %a150.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1279 = trunc <32 x i64> %1278 to <32 x i32>
  %1280 = sext <32 x i32> %sum_input187312.sroa.47.6.us.us to <32 x i64>
  %a156.us.us = mul nsw <32 x i64> %1280, %1009
  %1281 = icmp slt <32 x i64> %a156.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1282 = select <32 x i1> %1281, <32 x i64> %a156.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1283 = add nsw <32 x i64> %1282, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a155.us.us = ashr <32 x i64> %1283, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1284 = icmp slt <32 x i64> %a155.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a154.us.us = select <32 x i1> %1284, <32 x i64> %a155.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1285 = icmp sgt <32 x i64> %a154.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1286 = select <32 x i1> %1285, <32 x i64> %a154.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1287 = trunc <32 x i64> %1286 to <32 x i32>
  %1288 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1289 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1290 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1279, <32 x i32> %1289, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1291 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1288, <1 x i32> zeroinitializer, <32 x i32> %1290, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1292 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1291, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1293 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1292, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1294 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1295 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1296 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1287, <32 x i32> %1295, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1297 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1294, <1 x i32> zeroinitializer, <32 x i32> %1296, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1298 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1297, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1299 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1298, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1300 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1293, <32 x i32> %1299, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1301 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1300, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1302 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1301, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1303 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1302, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1304 = trunc <64 x i16> %1303 to <64 x i8>
  %1305 = bitcast <64 x i8> %1304 to <8 x i64>
  %1306 = shufflevector <8 x i64> %1305, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1307 = bitcast <4 x i64> %1306 to <32 x i8>
  %1308 = shufflevector <32 x i8> %1307, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1309 = bitcast <128 x i8> %1308 to <32 x i32>
  %1310 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1309, <32 x i32> %1021) #12
  %1311 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1310, <32 x i32> %1024) #12
  %1312 = bitcast <32 x i32> %1311 to <128 x i8>
  %1313 = shufflevector <128 x i8> %1312, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1314 = add i32 %1240, %1825
  %1315 = getelementptr inbounds i8, i8* %22, i32 %1314
  %1316 = bitcast i8* %1315 to <32 x i8>*
  store <32 x i8> %1313, <32 x i8>* %1316, align 1, !tbaa !111
  %1317 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1318 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1319 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1279, <32 x i32> %1318, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1320 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1317, <1 x i32> zeroinitializer, <32 x i32> %1319, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1321 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1320, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1322 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1321, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1323 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1324 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1325 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1287, <32 x i32> %1324, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1326 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1323, <1 x i32> zeroinitializer, <32 x i32> %1325, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1327 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1326, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1328 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1327, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1329 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1322, <32 x i32> %1328, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1330 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1329, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1331 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1330, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1332 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1331, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1333 = trunc <64 x i16> %1332 to <64 x i8>
  %1334 = bitcast <64 x i8> %1333 to <8 x i64>
  %1335 = shufflevector <8 x i64> %1334, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1336 = bitcast <4 x i64> %1335 to <32 x i8>
  %1337 = shufflevector <32 x i8> %1336, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1338 = bitcast <128 x i8> %1337 to <32 x i32>
  %1339 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1338, <32 x i32> %1021) #12
  %1340 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1339, <32 x i32> %1024) #12
  %1341 = bitcast <32 x i32> %1340 to <128 x i8>
  %1342 = shufflevector <128 x i8> %1341, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1343 = getelementptr inbounds i8, i8* %1315, i32 32
  %1344 = bitcast i8* %1343 to <32 x i8>*
  store <32 x i8> %1342, <32 x i8>* %1344, align 1, !tbaa !111
  %1345 = sext <32 x i32> %sum_input187312.sroa.56.6.us.us to <32 x i64>
  %a192.us.us = mul nsw <32 x i64> %1345, %1009
  %1346 = icmp slt <32 x i64> %a192.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1347 = select <32 x i1> %1346, <32 x i64> %a192.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1348 = add nsw <32 x i64> %1347, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a191.us.us = ashr <32 x i64> %1348, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1349 = icmp slt <32 x i64> %a191.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a190.us.us = select <32 x i1> %1349, <32 x i64> %a191.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1350 = icmp sgt <32 x i64> %a190.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1351 = select <32 x i1> %1350, <32 x i64> %a190.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1352 = trunc <32 x i64> %1351 to <32 x i32>
  %1353 = sext <32 x i32> %sum_input187312.sroa.65.6.us.us to <32 x i64>
  %a196.us.us = mul nsw <32 x i64> %1353, %1009
  %1354 = icmp slt <32 x i64> %a196.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1355 = select <32 x i1> %1354, <32 x i64> %a196.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1356 = add nsw <32 x i64> %1355, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a195.us.us = ashr <32 x i64> %1356, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1357 = icmp slt <32 x i64> %a195.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a194.us.us = select <32 x i1> %1357, <32 x i64> %a195.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1358 = icmp sgt <32 x i64> %a194.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1359 = select <32 x i1> %1358, <32 x i64> %a194.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1360 = trunc <32 x i64> %1359 to <32 x i32>
  %1361 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1362 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1363 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1352, <32 x i32> %1362, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1364 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1361, <1 x i32> zeroinitializer, <32 x i32> %1363, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1365 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1364, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1366 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1365, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1367 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1368 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1369 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1360, <32 x i32> %1368, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1370 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1367, <1 x i32> zeroinitializer, <32 x i32> %1369, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1371 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1370, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1372 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1371, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1373 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1366, <32 x i32> %1372, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1374 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1373, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1375 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1374, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1376 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1375, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1377 = trunc <64 x i16> %1376 to <64 x i8>
  %1378 = bitcast <64 x i8> %1377 to <8 x i64>
  %1379 = shufflevector <8 x i64> %1378, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1380 = bitcast <4 x i64> %1379 to <32 x i8>
  %1381 = shufflevector <32 x i8> %1380, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1382 = bitcast <128 x i8> %1381 to <32 x i32>
  %1383 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1382, <32 x i32> %1021) #12
  %1384 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1383, <32 x i32> %1024) #12
  %1385 = bitcast <32 x i32> %1384 to <128 x i8>
  %1386 = shufflevector <128 x i8> %1385, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1387 = add i32 %1240, %1826
  %1388 = getelementptr inbounds i8, i8* %22, i32 %1387
  %1389 = bitcast i8* %1388 to <32 x i8>*
  store <32 x i8> %1386, <32 x i8>* %1389, align 1, !tbaa !111
  %1390 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1391 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1392 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1352, <32 x i32> %1391, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1393 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1390, <1 x i32> zeroinitializer, <32 x i32> %1392, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1394 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1393, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1395 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1394, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1396 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1397 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1398 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1360, <32 x i32> %1397, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1399 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1396, <1 x i32> zeroinitializer, <32 x i32> %1398, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1400 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1399, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1401 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1400, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1402 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1395, <32 x i32> %1401, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1403 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1402, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1404 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1403, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1405 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1404, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1406 = trunc <64 x i16> %1405 to <64 x i8>
  %1407 = bitcast <64 x i8> %1406 to <8 x i64>
  %1408 = shufflevector <8 x i64> %1407, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1409 = bitcast <4 x i64> %1408 to <32 x i8>
  %1410 = shufflevector <32 x i8> %1409, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1411 = bitcast <128 x i8> %1410 to <32 x i32>
  %1412 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1411, <32 x i32> %1021) #12
  %1413 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1412, <32 x i32> %1024) #12
  %1414 = bitcast <32 x i32> %1413 to <128 x i8>
  %1415 = shufflevector <128 x i8> %1414, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1416 = getelementptr inbounds i8, i8* %1388, i32 32
  %1417 = bitcast i8* %1416 to <32 x i8>*
  store <32 x i8> %1415, <32 x i8>* %1417, align 1, !tbaa !111
  %1418 = sext <32 x i32> %sum_input187312.sroa.74.6.us.us to <32 x i64>
  %a232.us.us = mul nsw <32 x i64> %1418, %1009
  %1419 = icmp slt <32 x i64> %a232.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1420 = select <32 x i1> %1419, <32 x i64> %a232.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1421 = add nsw <32 x i64> %1420, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a231.us.us = ashr <32 x i64> %1421, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1422 = icmp slt <32 x i64> %a231.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a230.us.us = select <32 x i1> %1422, <32 x i64> %a231.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1423 = icmp sgt <32 x i64> %a230.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1424 = select <32 x i1> %1423, <32 x i64> %a230.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1425 = trunc <32 x i64> %1424 to <32 x i32>
  %1426 = sext <32 x i32> %sum_input187312.sroa.83.6.us.us to <32 x i64>
  %a236.us.us = mul nsw <32 x i64> %1426, %1009
  %1427 = icmp slt <32 x i64> %a236.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1428 = select <32 x i1> %1427, <32 x i64> %a236.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1429 = add nsw <32 x i64> %1428, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a235.us.us = ashr <32 x i64> %1429, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1430 = icmp slt <32 x i64> %a235.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a234.us.us = select <32 x i1> %1430, <32 x i64> %a235.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1431 = icmp sgt <32 x i64> %a234.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1432 = select <32 x i1> %1431, <32 x i64> %a234.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1433 = trunc <32 x i64> %1432 to <32 x i32>
  %1434 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1435 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1436 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1425, <32 x i32> %1435, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1437 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1434, <1 x i32> zeroinitializer, <32 x i32> %1436, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1438 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1437, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1439 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1438, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1440 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1441 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1442 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1433, <32 x i32> %1441, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1443 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1440, <1 x i32> zeroinitializer, <32 x i32> %1442, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1444 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1443, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1445 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1444, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1446 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1439, <32 x i32> %1445, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1447 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1446, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1448 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1447, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1449 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1448, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1450 = trunc <64 x i16> %1449 to <64 x i8>
  %1451 = bitcast <64 x i8> %1450 to <8 x i64>
  %1452 = shufflevector <8 x i64> %1451, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1453 = bitcast <4 x i64> %1452 to <32 x i8>
  %1454 = shufflevector <32 x i8> %1453, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1455 = bitcast <128 x i8> %1454 to <32 x i32>
  %1456 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1455, <32 x i32> %1021) #12
  %1457 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1456, <32 x i32> %1024) #12
  %1458 = bitcast <32 x i32> %1457 to <128 x i8>
  %1459 = shufflevector <128 x i8> %1458, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1460 = add i32 %1240, %1827
  %1461 = getelementptr inbounds i8, i8* %22, i32 %1460
  %1462 = bitcast i8* %1461 to <32 x i8>*
  store <32 x i8> %1459, <32 x i8>* %1462, align 1, !tbaa !111
  %1463 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1464 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1465 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1425, <32 x i32> %1464, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1466 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1463, <1 x i32> zeroinitializer, <32 x i32> %1465, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1467 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1466, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1468 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1467, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1469 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1470 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1471 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1433, <32 x i32> %1470, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1472 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1469, <1 x i32> zeroinitializer, <32 x i32> %1471, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1473 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1472, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1474 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1473, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1475 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1468, <32 x i32> %1474, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1476 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1475, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1477 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1476, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1478 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1477, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1479 = trunc <64 x i16> %1478 to <64 x i8>
  %1480 = bitcast <64 x i8> %1479 to <8 x i64>
  %1481 = shufflevector <8 x i64> %1480, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1482 = bitcast <4 x i64> %1481 to <32 x i8>
  %1483 = shufflevector <32 x i8> %1482, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1484 = bitcast <128 x i8> %1483 to <32 x i32>
  %1485 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1484, <32 x i32> %1021) #12
  %1486 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1485, <32 x i32> %1024) #12
  %1487 = bitcast <32 x i32> %1486 to <128 x i8>
  %1488 = shufflevector <128 x i8> %1487, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1489 = getelementptr inbounds i8, i8* %1461, i32 32
  %1490 = bitcast i8* %1489 to <32 x i8>*
  store <32 x i8> %1488, <32 x i8>* %1490, align 1, !tbaa !111
  %1491 = sext <32 x i32> %sum_input187312.sroa.92.6.us.us to <32 x i64>
  %a272.us.us = mul nsw <32 x i64> %1491, %1009
  %1492 = icmp slt <32 x i64> %a272.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1493 = select <32 x i1> %1492, <32 x i64> %a272.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1494 = add nsw <32 x i64> %1493, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a271.us.us = ashr <32 x i64> %1494, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1495 = icmp slt <32 x i64> %a271.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a270.us.us = select <32 x i1> %1495, <32 x i64> %a271.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1496 = icmp sgt <32 x i64> %a270.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1497 = select <32 x i1> %1496, <32 x i64> %a270.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1498 = trunc <32 x i64> %1497 to <32 x i32>
  %1499 = sext <32 x i32> %sum_input187312.sroa.101.6.us.us to <32 x i64>
  %a276.us.us = mul nsw <32 x i64> %1499, %1009
  %1500 = icmp slt <32 x i64> %a276.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1501 = select <32 x i1> %1500, <32 x i64> %a276.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1502 = add nsw <32 x i64> %1501, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a275.us.us = ashr <32 x i64> %1502, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1503 = icmp slt <32 x i64> %a275.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a274.us.us = select <32 x i1> %1503, <32 x i64> %a275.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1504 = icmp sgt <32 x i64> %a274.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1505 = select <32 x i1> %1504, <32 x i64> %a274.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1506 = trunc <32 x i64> %1505 to <32 x i32>
  %1507 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1508 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1509 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1498, <32 x i32> %1508, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1510 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1507, <1 x i32> zeroinitializer, <32 x i32> %1509, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1511 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1510, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1512 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1511, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1513 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1514 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1515 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1506, <32 x i32> %1514, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1516 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1513, <1 x i32> zeroinitializer, <32 x i32> %1515, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1517 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1516, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1518 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1517, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1519 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1512, <32 x i32> %1518, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1520 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1519, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1521 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1520, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1522 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1521, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1523 = trunc <64 x i16> %1522 to <64 x i8>
  %1524 = bitcast <64 x i8> %1523 to <8 x i64>
  %1525 = shufflevector <8 x i64> %1524, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1526 = bitcast <4 x i64> %1525 to <32 x i8>
  %1527 = shufflevector <32 x i8> %1526, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1528 = bitcast <128 x i8> %1527 to <32 x i32>
  %1529 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1528, <32 x i32> %1021) #12
  %1530 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1529, <32 x i32> %1024) #12
  %1531 = bitcast <32 x i32> %1530 to <128 x i8>
  %1532 = shufflevector <128 x i8> %1531, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1533 = add i32 %1240, %1828
  %1534 = getelementptr inbounds i8, i8* %22, i32 %1533
  %1535 = bitcast i8* %1534 to <32 x i8>*
  store <32 x i8> %1532, <32 x i8>* %1535, align 1, !tbaa !111
  %1536 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1537 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1538 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1498, <32 x i32> %1537, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1539 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1536, <1 x i32> zeroinitializer, <32 x i32> %1538, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1540 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1539, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1541 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1540, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1542 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1543 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1544 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1506, <32 x i32> %1543, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1545 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1542, <1 x i32> zeroinitializer, <32 x i32> %1544, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1546 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1545, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1547 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1546, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1548 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1541, <32 x i32> %1547, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1549 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1548, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1550 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1549, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1551 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1550, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1552 = trunc <64 x i16> %1551 to <64 x i8>
  %1553 = bitcast <64 x i8> %1552 to <8 x i64>
  %1554 = shufflevector <8 x i64> %1553, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1555 = bitcast <4 x i64> %1554 to <32 x i8>
  %1556 = shufflevector <32 x i8> %1555, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1557 = bitcast <128 x i8> %1556 to <32 x i32>
  %1558 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1557, <32 x i32> %1021) #12
  %1559 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1558, <32 x i32> %1024) #12
  %1560 = bitcast <32 x i32> %1559 to <128 x i8>
  %1561 = shufflevector <128 x i8> %1560, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1562 = getelementptr inbounds i8, i8* %1534, i32 32
  %1563 = bitcast i8* %1562 to <32 x i8>*
  store <32 x i8> %1561, <32 x i8>* %1563, align 1, !tbaa !111
  %1564 = sext <32 x i32> %sum_input187312.sroa.110.6.us.us to <32 x i64>
  %a312.us.us = mul nsw <32 x i64> %1564, %1009
  %1565 = icmp slt <32 x i64> %a312.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1566 = select <32 x i1> %1565, <32 x i64> %a312.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1567 = add nsw <32 x i64> %1566, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a311.us.us = ashr <32 x i64> %1567, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1568 = icmp slt <32 x i64> %a311.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a310.us.us = select <32 x i1> %1568, <32 x i64> %a311.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1569 = icmp sgt <32 x i64> %a310.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1570 = select <32 x i1> %1569, <32 x i64> %a310.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1571 = trunc <32 x i64> %1570 to <32 x i32>
  %1572 = sext <32 x i32> %sum_input187312.sroa.119.6.us.us to <32 x i64>
  %a316.us.us = mul nsw <32 x i64> %1572, %1009
  %1573 = icmp slt <32 x i64> %a316.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1574 = select <32 x i1> %1573, <32 x i64> %a316.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1575 = add nsw <32 x i64> %1574, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a315.us.us = ashr <32 x i64> %1575, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1576 = icmp slt <32 x i64> %a315.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a314.us.us = select <32 x i1> %1576, <32 x i64> %a315.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1577 = icmp sgt <32 x i64> %a314.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1578 = select <32 x i1> %1577, <32 x i64> %a314.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1579 = trunc <32 x i64> %1578 to <32 x i32>
  %1580 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1581 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1582 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1571, <32 x i32> %1581, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1583 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1580, <1 x i32> zeroinitializer, <32 x i32> %1582, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1584 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1583, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1585 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1584, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1586 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1587 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1588 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1579, <32 x i32> %1587, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1589 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1586, <1 x i32> zeroinitializer, <32 x i32> %1588, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1590 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1589, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1591 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1590, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1592 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1585, <32 x i32> %1591, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1593 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1592, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1594 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1593, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1595 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1594, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1596 = trunc <64 x i16> %1595 to <64 x i8>
  %1597 = bitcast <64 x i8> %1596 to <8 x i64>
  %1598 = shufflevector <8 x i64> %1597, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1599 = bitcast <4 x i64> %1598 to <32 x i8>
  %1600 = shufflevector <32 x i8> %1599, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1601 = bitcast <128 x i8> %1600 to <32 x i32>
  %1602 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1601, <32 x i32> %1021) #12
  %1603 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1602, <32 x i32> %1024) #12
  %1604 = bitcast <32 x i32> %1603 to <128 x i8>
  %1605 = shufflevector <128 x i8> %1604, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1606 = add i32 %1240, %1829
  %1607 = getelementptr inbounds i8, i8* %22, i32 %1606
  %1608 = bitcast i8* %1607 to <32 x i8>*
  store <32 x i8> %1605, <32 x i8>* %1608, align 1, !tbaa !111
  %1609 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1610 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1611 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1571, <32 x i32> %1610, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1612 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1609, <1 x i32> zeroinitializer, <32 x i32> %1611, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1613 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1612, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1614 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1613, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1615 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1616 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1617 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1579, <32 x i32> %1616, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1618 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1615, <1 x i32> zeroinitializer, <32 x i32> %1617, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1619 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1618, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1620 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1619, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1621 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1614, <32 x i32> %1620, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1622 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1621, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1623 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1622, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1624 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1623, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1625 = trunc <64 x i16> %1624 to <64 x i8>
  %1626 = bitcast <64 x i8> %1625 to <8 x i64>
  %1627 = shufflevector <8 x i64> %1626, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1628 = bitcast <4 x i64> %1627 to <32 x i8>
  %1629 = shufflevector <32 x i8> %1628, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1630 = bitcast <128 x i8> %1629 to <32 x i32>
  %1631 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1630, <32 x i32> %1021) #12
  %1632 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1631, <32 x i32> %1024) #12
  %1633 = bitcast <32 x i32> %1632 to <128 x i8>
  %1634 = shufflevector <128 x i8> %1633, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1635 = getelementptr inbounds i8, i8* %1607, i32 32
  %1636 = bitcast i8* %1635 to <32 x i8>*
  store <32 x i8> %1634, <32 x i8>* %1636, align 1, !tbaa !111
  %1637 = sext <32 x i32> %sum_input187312.sroa.128.6.us.us to <32 x i64>
  %a352.us.us = mul nsw <32 x i64> %1637, %1009
  %1638 = icmp slt <32 x i64> %a352.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1639 = select <32 x i1> %1638, <32 x i64> %a352.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1640 = add nsw <32 x i64> %1639, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a351.us.us = ashr <32 x i64> %1640, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1641 = icmp slt <32 x i64> %a351.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a350.us.us = select <32 x i1> %1641, <32 x i64> %a351.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1642 = icmp sgt <32 x i64> %a350.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1643 = select <32 x i1> %1642, <32 x i64> %a350.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1644 = trunc <32 x i64> %1643 to <32 x i32>
  %1645 = sext <32 x i32> %sum_input187312.sroa.137.6.us.us to <32 x i64>
  %a356.us.us = mul nsw <32 x i64> %1645, %1009
  %1646 = icmp slt <32 x i64> %a356.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1647 = select <32 x i1> %1646, <32 x i64> %a356.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1648 = add nsw <32 x i64> %1647, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a355.us.us = ashr <32 x i64> %1648, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1649 = icmp slt <32 x i64> %a355.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a354.us.us = select <32 x i1> %1649, <32 x i64> %a355.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1650 = icmp sgt <32 x i64> %a354.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1651 = select <32 x i1> %1650, <32 x i64> %a354.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1652 = trunc <32 x i64> %1651 to <32 x i32>
  %1653 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1654 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1655 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1644, <32 x i32> %1654, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1656 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1653, <1 x i32> zeroinitializer, <32 x i32> %1655, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1657 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1656, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1658 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1657, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1659 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1660 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1661 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1652, <32 x i32> %1660, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1662 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1659, <1 x i32> zeroinitializer, <32 x i32> %1661, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1663 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1662, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1664 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1663, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1665 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1658, <32 x i32> %1664, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1666 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1665, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1667 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1666, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1668 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1667, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1669 = trunc <64 x i16> %1668 to <64 x i8>
  %1670 = bitcast <64 x i8> %1669 to <8 x i64>
  %1671 = shufflevector <8 x i64> %1670, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1672 = bitcast <4 x i64> %1671 to <32 x i8>
  %1673 = shufflevector <32 x i8> %1672, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1674 = bitcast <128 x i8> %1673 to <32 x i32>
  %1675 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1674, <32 x i32> %1021) #12
  %1676 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1675, <32 x i32> %1024) #12
  %1677 = bitcast <32 x i32> %1676 to <128 x i8>
  %1678 = shufflevector <128 x i8> %1677, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1679 = add i32 %1240, %1830
  %1680 = getelementptr inbounds i8, i8* %22, i32 %1679
  %1681 = bitcast i8* %1680 to <32 x i8>*
  store <32 x i8> %1678, <32 x i8>* %1681, align 1, !tbaa !111
  %1682 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1683 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1684 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1644, <32 x i32> %1683, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1685 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1682, <1 x i32> zeroinitializer, <32 x i32> %1684, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1686 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1685, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1687 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1686, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1688 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1689 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1690 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1652, <32 x i32> %1689, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1691 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1688, <1 x i32> zeroinitializer, <32 x i32> %1690, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1692 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1691, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1693 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1692, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1694 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1687, <32 x i32> %1693, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1695 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1694, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1696 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1695, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1697 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1696, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1698 = trunc <64 x i16> %1697 to <64 x i8>
  %1699 = bitcast <64 x i8> %1698 to <8 x i64>
  %1700 = shufflevector <8 x i64> %1699, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1701 = bitcast <4 x i64> %1700 to <32 x i8>
  %1702 = shufflevector <32 x i8> %1701, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1703 = bitcast <128 x i8> %1702 to <32 x i32>
  %1704 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1703, <32 x i32> %1021) #12
  %1705 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1704, <32 x i32> %1024) #12
  %1706 = bitcast <32 x i32> %1705 to <128 x i8>
  %1707 = shufflevector <128 x i8> %1706, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1708 = getelementptr inbounds i8, i8* %1680, i32 32
  %1709 = bitcast i8* %1708 to <32 x i8>*
  store <32 x i8> %1707, <32 x i8>* %1709, align 1, !tbaa !111
  %1710 = sext <32 x i32> %sum_input187312.sroa.146.6.us.us to <32 x i64>
  %a392.us.us = mul nsw <32 x i64> %1710, %1009
  %1711 = icmp slt <32 x i64> %a392.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1712 = select <32 x i1> %1711, <32 x i64> %a392.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1713 = add nsw <32 x i64> %1712, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a391.us.us = ashr <32 x i64> %1713, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1714 = icmp slt <32 x i64> %a391.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a390.us.us = select <32 x i1> %1714, <32 x i64> %a391.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1715 = icmp sgt <32 x i64> %a390.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1716 = select <32 x i1> %1715, <32 x i64> %a390.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1717 = trunc <32 x i64> %1716 to <32 x i32>
  %1718 = sext <32 x i32> %sum_input187312.sroa.155.6.us.us to <32 x i64>
  %a396.us.us = mul nsw <32 x i64> %1718, %1009
  %1719 = icmp slt <32 x i64> %a396.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1720 = select <32 x i1> %1719, <32 x i64> %a396.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %1721 = add nsw <32 x i64> %1720, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a395.us.us = ashr <32 x i64> %1721, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %1722 = icmp slt <32 x i64> %a395.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a394.us.us = select <32 x i1> %1722, <32 x i64> %a395.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1723 = icmp sgt <32 x i64> %a394.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1724 = select <32 x i1> %1723, <32 x i64> %a394.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1725 = trunc <32 x i64> %1724 to <32 x i32>
  %1726 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1727 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1728 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1717, <32 x i32> %1727, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1729 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1726, <1 x i32> zeroinitializer, <32 x i32> %1728, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1730 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1729, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1731 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1730, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1732 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1733 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1734 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1725, <32 x i32> %1733, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1735 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1732, <1 x i32> zeroinitializer, <32 x i32> %1734, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1736 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1735, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1737 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1736, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1738 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1731, <32 x i32> %1737, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1739 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1738, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1740 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1739, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1741 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1740, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1742 = trunc <64 x i16> %1741 to <64 x i8>
  %1743 = bitcast <64 x i8> %1742 to <8 x i64>
  %1744 = shufflevector <8 x i64> %1743, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1745 = bitcast <4 x i64> %1744 to <32 x i8>
  %1746 = shufflevector <32 x i8> %1745, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1747 = bitcast <128 x i8> %1746 to <32 x i32>
  %1748 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1747, <32 x i32> %1021) #12
  %1749 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1748, <32 x i32> %1024) #12
  %1750 = bitcast <32 x i32> %1749 to <128 x i8>
  %1751 = shufflevector <128 x i8> %1750, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1752 = add i32 %1240, %1831
  %1753 = getelementptr inbounds i8, i8* %22, i32 %1752
  %1754 = bitcast i8* %1753 to <32 x i8>*
  store <32 x i8> %1751, <32 x i8>* %1754, align 1, !tbaa !111
  %1755 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1756 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1757 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1717, <32 x i32> %1756, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1758 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1755, <1 x i32> zeroinitializer, <32 x i32> %1757, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1759 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %1758, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1760 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1759, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1761 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1018, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %1762 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %1017, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1763 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %1725, <32 x i32> %1762, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1764 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %1761, <1 x i32> zeroinitializer, <32 x i32> %1763, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1765 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %1764, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %1766 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %1765, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %1767 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %1760, <32 x i32> %1766, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0) #12
  %1768 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %1016, <64 x i16> %1767, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1769 = call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %1768, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1770 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %1769, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0) #12
  %1771 = trunc <64 x i16> %1770 to <64 x i8>
  %1772 = bitcast <64 x i8> %1771 to <8 x i64>
  %1773 = shufflevector <8 x i64> %1772, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1774 = bitcast <4 x i64> %1773 to <32 x i8>
  %1775 = shufflevector <32 x i8> %1774, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1776 = bitcast <128 x i8> %1775 to <32 x i32>
  %1777 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %1776, <32 x i32> %1021) #12
  %1778 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1777, <32 x i32> %1024) #12
  %1779 = bitcast <32 x i32> %1778 to <128 x i8>
  %1780 = shufflevector <128 x i8> %1779, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1781 = getelementptr inbounds i8, i8* %1753, i32 32
  %1782 = bitcast i8* %1781 to <32 x i8>*
  store <32 x i8> %1780, <32 x i8>* %1782, align 1, !tbaa !111
  %1783 = add nuw nsw i32 %output.s0.c.co59.us.us, 1
  %.not361.us.us = icmp eq i32 %1783, %1005
  br i1 %.not361.us.us, label %"end for output.s0.c.co58.us.us", label %"for output.s0.c.co57.us.us"

"end for output.s0.c.co58.us.us":                 ; preds = %"consume convolved73.us.us", %"consume sum_input56.us.us"
  %1784 = add nuw nsw i32 %output.s0.x.xo31.us.us, 1
  %.not360.us.us = icmp eq i32 %1784, %1001
  br i1 %.not360.us.us, label %"end for output.s0.x.xo30.loopexit.us.us", label %"for output.s0.x.xo29.us.us"

"for convolved.s1.r19$y64.preheader.us.us":       ; preds = %after_bb61.us.us
  %1785 = shl nuw nsw i32 %output.s0.c.co59.us.us, 1
  %1786 = or i32 %1785, 1
  %1787 = mul nsw i32 %1786, %7
  %1788 = mul nsw i32 %output.s0.c.co59.us.us, %7
  br i1 %1003, label %"for convolved.s1.r19$y64.us.us.us", label %"consume convolved73.us.us", !prof !96

"for sum_input.s1.r19$x44.preheader.us.us":       ; preds = %"for sum_input.s1.r19$y41.us.us"
  %1789 = mul nsw i32 %"sum_input.s1.r19$y43.us.us", %dilation_y
  %1790 = add nsw i32 %1789, %1038
  %1791 = mul nsw i32 %1790, %18
  %t973.us.us = add i32 %1033, %1791
  br i1 %1028, label %"end for sum_input.s1.r19$x45.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x44.us.us"

"for output.s0.c.co57.preheader.us.us":           ; preds = %"consume sum_input56.us.us"
  %convolved313.sroa.0.0.vec.extract571.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 0
  %1792 = mul nsw i32 %convolved313.sroa.0.0.vec.extract571.us.us, %166
  %1793 = insertelement <1 x i32> poison, i32 %1792, i32 0
  %convolved313.sroa.0.4.vec.extract573.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 1
  %1794 = mul nsw i32 %convolved313.sroa.0.4.vec.extract573.us.us, %166
  %1795 = insertelement <1 x i32> poison, i32 %1794, i32 0
  %convolved313.sroa.0.8.vec.extract575.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 2
  %1796 = mul nsw i32 %convolved313.sroa.0.8.vec.extract575.us.us, %166
  %1797 = insertelement <1 x i32> poison, i32 %1796, i32 0
  %convolved313.sroa.0.12.vec.extract577.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 3
  %1798 = mul nsw i32 %convolved313.sroa.0.12.vec.extract577.us.us, %166
  %1799 = insertelement <1 x i32> poison, i32 %1798, i32 0
  %convolved313.sroa.0.16.vec.extract579.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 4
  %1800 = mul nsw i32 %convolved313.sroa.0.16.vec.extract579.us.us, %166
  %1801 = insertelement <1 x i32> poison, i32 %1800, i32 0
  %convolved313.sroa.0.20.vec.extract581.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 5
  %1802 = mul nsw i32 %convolved313.sroa.0.20.vec.extract581.us.us, %166
  %1803 = insertelement <1 x i32> poison, i32 %1802, i32 0
  %convolved313.sroa.0.24.vec.extract583.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 6
  %1804 = mul nsw i32 %convolved313.sroa.0.24.vec.extract583.us.us, %166
  %1805 = insertelement <1 x i32> poison, i32 %1804, i32 0
  %convolved313.sroa.0.28.vec.extract585.us.us = extractelement <32 x i32> %convolved313.sroa.0.20.us.us, i32 7
  %1806 = mul nsw i32 %convolved313.sroa.0.28.vec.extract585.us.us, %166
  %1807 = insertelement <1 x i32> poison, i32 %1806, i32 0
  %1808 = add nsw i32 %output.s0.x.x.base.s32.us.us, %24
  %1809 = add nsw i32 %1808, 7
  %1810 = mul nsw i32 %1809, %stride_x
  %1811 = add nsw i32 %1808, 6
  %1812 = mul nsw i32 %1811, %stride_x
  %1813 = add nsw i32 %1808, 5
  %1814 = mul nsw i32 %1813, %stride_x
  %1815 = add nsw i32 %1808, 4
  %1816 = mul nsw i32 %1815, %stride_x
  %1817 = add nsw i32 %1808, 3
  %1818 = mul nsw i32 %1817, %stride_x
  %1819 = add nsw i32 %1808, 2
  %1820 = mul nsw i32 %1819, %stride_x
  %1821 = add nsw i32 %1808, 1
  %1822 = mul nsw i32 %1821, %stride_x
  %1823 = mul nsw i32 %1808, %stride_x
  %1824 = mul nsw i32 %1808, %26
  %1825 = mul nsw i32 %1821, %26
  %1826 = mul nsw i32 %1819, %26
  %1827 = mul nsw i32 %1817, %26
  %1828 = mul nsw i32 %1815, %26
  %1829 = mul nsw i32 %1813, %26
  %1830 = mul nsw i32 %1811, %26
  %1831 = mul nsw i32 %1809, %26
  br label %"for output.s0.c.co57.us.us"

"for sum_input.s1.r19$y41.preheader.us.us":       ; preds = %then_bb39.us.us
  %1832 = add nsw i32 %output.s0.x.x.base.s32.us.us, %24
  %1833 = sub i32 %1832, %15
  br label %"for sum_input.s1.r19$y41.us.us"

"for sum_input.s1.r19$y47.preheader.us.us":       ; preds = %next_bb40.us.us
  %1834 = add nsw i32 %output.s0.x.x.base.s32.us.us, %24
  %1835 = mul nsw i32 %1834, %stride_x
  br i1 %brmerge1308.demorgan, label %"for sum_input.s1.r19$y47.us.us.us.us", label %"consume sum_input56.us.us", !prof !103

"end for output.s0.x.xo30.loopexit.us.us":        ; preds = %"end for output.s0.c.co58.us.us"
  %1836 = add nuw nsw i32 %output.s0.y.rebased28.us.us, 1
  %.not359.us.us = icmp eq i32 %1836, %28
  br i1 %.not359.us.us, label %"end for output.s0.y.rebased27.loopexit.us", label %"for output.s0.y.rebased26.us.us"

"for sum_input.s1.r19$y47.us.us.us.us":           ; preds = %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us", %"for sum_input.s1.r19$y47.preheader.us.us"
  %convolved313.sroa.0.15.us.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us" ], [ %convolved313.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y47.preheader.us.us" ]
  %"sum_input.s1.r19$y49.us.us.us.us" = phi i32 [ %2027, %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y47.preheader.us.us" ]
  %1837 = mul nsw i32 %"sum_input.s1.r19$y49.us.us.us.us", %dilation_y
  %t975.s.us.us.us.us = add nsw i32 %1837, %1038
  %1838 = mul nsw i32 %t975.s.us.us.us.us, %18
  br label %"for sum_input.s1.r19$x50.us.us.us.us.us"

"for sum_input.s1.r19$x50.us.us.us.us.us":        ; preds = %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y47.us.us.us.us"
  %convolved313.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us" ], [ %convolved313.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y47.us.us.us.us" ]
  %"sum_input.s1.r19$x52.us.us.us.us.us" = phi i32 [ %2026, %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y47.us.us.us.us" ]
  %1839 = mul nsw i32 %"sum_input.s1.r19$x52.us.us.us.us.us", %dilation_x
  %t976.s.us.us.us.us.us = add nsw i32 %1839, %1835
  %t1226.us.us.us.us.us = mul nsw i32 %t976.s.us.us.us.us.us, %16
  %1840 = add i32 %t1226.us.us.us.us.us, %1838
  %t977.us.us.us.us.us = sub i32 %1840, %t941
  %1841 = add i32 %t977.us.us.us.us.us, %1032
  %t949.us.us.us.us.us = add i32 %1840, %998
  %1842 = sub i32 %t949.us.us.us.us.us, %985
  %t978.us.us.us.us.us = sub i32 %1842, %986
  %1843 = add i32 %t978.us.us.us.us.us, %1032
  %1844 = add i32 %1840, %996
  %1845 = sub i32 %1844, %1025
  %t979.us.us.us.us.us = sub i32 %1845, %986
  %1846 = add i32 %t979.us.us.us.us.us, %1032
  %1847 = add i32 %1840, %995
  %1848 = sub i32 %1847, %1025
  %t980.us.us.us.us.us = sub i32 %1848, %986
  %1849 = add i32 %t980.us.us.us.us.us, %1032
  %1850 = add i32 %1840, %994
  %1851 = sub i32 %1850, %1025
  %t981.us.us.us.us.us = sub i32 %1851, %986
  %1852 = add i32 %t981.us.us.us.us.us, %1032
  %1853 = add i32 %1840, %993
  %1854 = sub i32 %1853, %1025
  %t982.us.us.us.us.us = sub i32 %1854, %986
  %1855 = add i32 %t982.us.us.us.us.us, %1032
  %1856 = add i32 %1840, %992
  %1857 = sub i32 %1856, %1025
  %t983.us.us.us.us.us = sub i32 %1857, %986
  %1858 = add i32 %t983.us.us.us.us.us, %1032
  %1859 = add i32 %1840, %991
  %1860 = sub i32 %1859, %1025
  %t984.us.us.us.us.us = sub i32 %1860, %986
  %1861 = add i32 %t984.us.us.us.us.us, %1032
  br i1 %1027, label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r12453.us.us.us.us.us"

"for sum_input.s1.r19$z.r12453.us.us.us.us.us":   ; preds = %"for sum_input.s1.r19$z.r12453.us.us.us.us.us", %"for sum_input.s1.r19$x50.us.us.us.us.us"
  %convolved313.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ], [ %convolved313.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x50.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r12455.us.us.us.us.us" = phi i32 [ %1971, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x50.us.us.us.us.us" ]
  %niter1503 = phi i32 [ %niter1503.nsub.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ], [ %unroll_iter1502, %"for sum_input.s1.r19$x50.us.us.us.us.us" ]
  %1862 = shl nsw i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us", 2
  %1863 = add i32 %1841, %1862
  %1864 = getelementptr inbounds i8, i8* %12, i32 %1863
  %1865 = bitcast i8* %1864 to <4 x i8>*
  %1866 = load <4 x i8>, <4 x i8>* %1865, align 4, !tbaa !108
  %1867 = add i32 %1843, %1862
  %1868 = getelementptr inbounds i8, i8* %12, i32 %1867
  %1869 = bitcast i8* %1868 to <4 x i8>*
  %1870 = load <4 x i8>, <4 x i8>* %1869, align 4, !tbaa !108
  %1871 = add i32 %1846, %1862
  %1872 = getelementptr inbounds i8, i8* %12, i32 %1871
  %1873 = bitcast i8* %1872 to <4 x i8>*
  %1874 = load <4 x i8>, <4 x i8>* %1873, align 4, !tbaa !108
  %1875 = add i32 %1849, %1862
  %1876 = getelementptr inbounds i8, i8* %12, i32 %1875
  %1877 = bitcast i8* %1876 to <4 x i8>*
  %1878 = load <4 x i8>, <4 x i8>* %1877, align 4, !tbaa !108
  %1879 = add i32 %1852, %1862
  %1880 = getelementptr inbounds i8, i8* %12, i32 %1879
  %1881 = bitcast i8* %1880 to <4 x i8>*
  %1882 = load <4 x i8>, <4 x i8>* %1881, align 4, !tbaa !108
  %1883 = add i32 %1855, %1862
  %1884 = getelementptr inbounds i8, i8* %12, i32 %1883
  %1885 = bitcast i8* %1884 to <4 x i8>*
  %1886 = load <4 x i8>, <4 x i8>* %1885, align 4, !tbaa !108
  %1887 = add i32 %1858, %1862
  %1888 = getelementptr inbounds i8, i8* %12, i32 %1887
  %1889 = bitcast i8* %1888 to <4 x i8>*
  %1890 = load <4 x i8>, <4 x i8>* %1889, align 4, !tbaa !108
  %1891 = add i32 %1861, %1862
  %1892 = getelementptr inbounds i8, i8* %12, i32 %1891
  %1893 = bitcast i8* %1892 to <4 x i8>*
  %1894 = load <4 x i8>, <4 x i8>* %1893, align 4, !tbaa !108
  %1895 = shufflevector <4 x i8> %1866, <4 x i8> %1870, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1896 = shufflevector <4 x i8> %1874, <4 x i8> %1878, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1897 = shufflevector <4 x i8> %1882, <4 x i8> %1886, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1898 = shufflevector <4 x i8> %1890, <4 x i8> %1894, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1899 = shufflevector <8 x i8> %1895, <8 x i8> %1896, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1900 = shufflevector <8 x i8> %1897, <8 x i8> %1898, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1901 = shufflevector <16 x i8> %1899, <16 x i8> %1900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us = zext <32 x i8> %1901 to <32 x i16>
  %1902 = shufflevector <32 x i16> %t1228.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1903 = bitcast <64 x i16> %1902 to <32 x i32>
  %1904 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1903)
  %1905 = bitcast <32 x i32> %1904 to <64 x i16>
  %1906 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1903)
  %1907 = bitcast <32 x i32> %1906 to <64 x i16>
  %1908 = add <64 x i16> %1907, %1905
  %1909 = shufflevector <64 x i16> %1908, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us = zext <16 x i16> %1909 to <16 x i32>
  %1910 = shufflevector <16 x i32> %t1227.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1911 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1910, i32 -4)
  %1912 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1911)
  %1913 = add nsw <32 x i32> %1912, %convolved313.sroa.0.18.us.us.us.us.us
  %1914 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1911)
  %1915 = add nsw <32 x i32> %1913, %1914
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us = shufflevector <32 x i32> %1915, <32 x i32> %convolved313.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1916 = shl i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us", 2
  %1917 = or i32 %1916, 4
  %1918 = add i32 %1841, %1917
  %1919 = getelementptr inbounds i8, i8* %12, i32 %1918
  %1920 = bitcast i8* %1919 to <4 x i8>*
  %1921 = load <4 x i8>, <4 x i8>* %1920, align 4, !tbaa !108
  %1922 = add i32 %1843, %1917
  %1923 = getelementptr inbounds i8, i8* %12, i32 %1922
  %1924 = bitcast i8* %1923 to <4 x i8>*
  %1925 = load <4 x i8>, <4 x i8>* %1924, align 4, !tbaa !108
  %1926 = add i32 %1846, %1917
  %1927 = getelementptr inbounds i8, i8* %12, i32 %1926
  %1928 = bitcast i8* %1927 to <4 x i8>*
  %1929 = load <4 x i8>, <4 x i8>* %1928, align 4, !tbaa !108
  %1930 = add i32 %1849, %1917
  %1931 = getelementptr inbounds i8, i8* %12, i32 %1930
  %1932 = bitcast i8* %1931 to <4 x i8>*
  %1933 = load <4 x i8>, <4 x i8>* %1932, align 4, !tbaa !108
  %1934 = add i32 %1852, %1917
  %1935 = getelementptr inbounds i8, i8* %12, i32 %1934
  %1936 = bitcast i8* %1935 to <4 x i8>*
  %1937 = load <4 x i8>, <4 x i8>* %1936, align 4, !tbaa !108
  %1938 = add i32 %1855, %1917
  %1939 = getelementptr inbounds i8, i8* %12, i32 %1938
  %1940 = bitcast i8* %1939 to <4 x i8>*
  %1941 = load <4 x i8>, <4 x i8>* %1940, align 4, !tbaa !108
  %1942 = add i32 %1858, %1917
  %1943 = getelementptr inbounds i8, i8* %12, i32 %1942
  %1944 = bitcast i8* %1943 to <4 x i8>*
  %1945 = load <4 x i8>, <4 x i8>* %1944, align 4, !tbaa !108
  %1946 = add i32 %1861, %1917
  %1947 = getelementptr inbounds i8, i8* %12, i32 %1946
  %1948 = bitcast i8* %1947 to <4 x i8>*
  %1949 = load <4 x i8>, <4 x i8>* %1948, align 4, !tbaa !108
  %1950 = shufflevector <4 x i8> %1921, <4 x i8> %1925, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1951 = shufflevector <4 x i8> %1929, <4 x i8> %1933, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1952 = shufflevector <4 x i8> %1937, <4 x i8> %1941, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1953 = shufflevector <4 x i8> %1945, <4 x i8> %1949, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1954 = shufflevector <8 x i8> %1950, <8 x i8> %1951, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1955 = shufflevector <8 x i8> %1952, <8 x i8> %1953, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1956 = shufflevector <16 x i8> %1954, <16 x i8> %1955, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us.1 = zext <32 x i8> %1956 to <32 x i16>
  %1957 = shufflevector <32 x i16> %t1228.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1958 = bitcast <64 x i16> %1957 to <32 x i32>
  %1959 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %1958)
  %1960 = bitcast <32 x i32> %1959 to <64 x i16>
  %1961 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %1958)
  %1962 = bitcast <32 x i32> %1961 to <64 x i16>
  %1963 = add <64 x i16> %1962, %1960
  %1964 = shufflevector <64 x i16> %1963, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us.1 = zext <16 x i16> %1964 to <16 x i32>
  %1965 = shufflevector <16 x i32> %t1227.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1966 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %1965, i32 -4)
  %1967 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1966)
  %1968 = add nsw <32 x i32> %1967, %convolved313.sroa.0.0.vecblend567.us.us.us.us.us
  %1969 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1966)
  %1970 = add nsw <32 x i32> %1968, %1969
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1 = shufflevector <32 x i32> %1970, <32 x i32> %convolved313.sroa.0.0.vecblend567.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1971 = add nuw nsw i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us", 2
  %niter1503.nsub.1 = add i32 %niter1503, -2
  %niter1503.ncmp.1 = icmp eq i32 %niter1503.nsub.1, 0
  br i1 %niter1503.ncmp.1, label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r12453.us.us.us.us.us"

"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r12453.us.us.us.us.us", %"for sum_input.s1.r19$x50.us.us.us.us.us"
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x50.us.us.us.us.us" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ]
  %convolved313.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %convolved313.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x50.us.us.us.us.us" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r12455.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x50.us.us.us.us.us" ], [ %1971, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us" ]
  br i1 %lcmp.mod1501.not, label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa"
  %1972 = shl nsw i32 %"sum_input.s1.r19$z.r12455.us.us.us.us.us.unr", 2
  %1973 = add i32 %1841, %1972
  %1974 = getelementptr inbounds i8, i8* %12, i32 %1973
  %1975 = bitcast i8* %1974 to <4 x i8>*
  %1976 = load <4 x i8>, <4 x i8>* %1975, align 4, !tbaa !108
  %1977 = add i32 %1843, %1972
  %1978 = getelementptr inbounds i8, i8* %12, i32 %1977
  %1979 = bitcast i8* %1978 to <4 x i8>*
  %1980 = load <4 x i8>, <4 x i8>* %1979, align 4, !tbaa !108
  %1981 = add i32 %1846, %1972
  %1982 = getelementptr inbounds i8, i8* %12, i32 %1981
  %1983 = bitcast i8* %1982 to <4 x i8>*
  %1984 = load <4 x i8>, <4 x i8>* %1983, align 4, !tbaa !108
  %1985 = add i32 %1849, %1972
  %1986 = getelementptr inbounds i8, i8* %12, i32 %1985
  %1987 = bitcast i8* %1986 to <4 x i8>*
  %1988 = load <4 x i8>, <4 x i8>* %1987, align 4, !tbaa !108
  %1989 = add i32 %1852, %1972
  %1990 = getelementptr inbounds i8, i8* %12, i32 %1989
  %1991 = bitcast i8* %1990 to <4 x i8>*
  %1992 = load <4 x i8>, <4 x i8>* %1991, align 4, !tbaa !108
  %1993 = add i32 %1855, %1972
  %1994 = getelementptr inbounds i8, i8* %12, i32 %1993
  %1995 = bitcast i8* %1994 to <4 x i8>*
  %1996 = load <4 x i8>, <4 x i8>* %1995, align 4, !tbaa !108
  %1997 = add i32 %1858, %1972
  %1998 = getelementptr inbounds i8, i8* %12, i32 %1997
  %1999 = bitcast i8* %1998 to <4 x i8>*
  %2000 = load <4 x i8>, <4 x i8>* %1999, align 4, !tbaa !108
  %2001 = add i32 %1861, %1972
  %2002 = getelementptr inbounds i8, i8* %12, i32 %2001
  %2003 = bitcast i8* %2002 to <4 x i8>*
  %2004 = load <4 x i8>, <4 x i8>* %2003, align 4, !tbaa !108
  %2005 = shufflevector <4 x i8> %1976, <4 x i8> %1980, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2006 = shufflevector <4 x i8> %1984, <4 x i8> %1988, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2007 = shufflevector <4 x i8> %1992, <4 x i8> %1996, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2008 = shufflevector <4 x i8> %2000, <4 x i8> %2004, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2009 = shufflevector <8 x i8> %2005, <8 x i8> %2006, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2010 = shufflevector <8 x i8> %2007, <8 x i8> %2008, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2011 = shufflevector <16 x i8> %2009, <16 x i8> %2010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1228.us.us.us.us.us.epil = zext <32 x i8> %2011 to <32 x i16>
  %2012 = shufflevector <32 x i16> %t1228.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2013 = bitcast <64 x i16> %2012 to <32 x i32>
  %2014 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2013)
  %2015 = bitcast <32 x i32> %2014 to <64 x i16>
  %2016 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2013)
  %2017 = bitcast <32 x i32> %2016 to <64 x i16>
  %2018 = add <64 x i16> %2017, %2015
  %2019 = shufflevector <64 x i16> %2018, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1227.us.us.us.us.us.epil = zext <16 x i16> %2019 to <16 x i32>
  %2020 = shufflevector <16 x i32> %t1227.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2021 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2020, i32 -4)
  %2022 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2021)
  %2023 = add nsw <32 x i32> %2022, %convolved313.sroa.0.18.us.us.us.us.us.unr
  %2024 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2021)
  %2025 = add nsw <32 x i32> %2023, %2024
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.epil = shufflevector <32 x i32> %2025, <32 x i32> %convolved313.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us": ; preds = %"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa"
  %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa = phi <32 x i32> [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us.unr-lcssa" ], [ %convolved313.sroa.0.0.vecblend567.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r12453.us.us.us.us.us.epil" ]
  %2026 = add nuw nsw i32 %"sum_input.s1.r19$x52.us.us.us.us.us", 1
  %.not366.us.us.us.us.us = icmp eq i32 %2026, %8
  br i1 %.not366.us.us.us.us.us, label %"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x50.us.us.us.us.us"

"end for sum_input.s1.r19$x51.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r12454.loopexit.us.us.us.us.us"
  %2027 = add nuw nsw i32 %"sum_input.s1.r19$y49.us.us.us.us", 1
  %.not365.us.us.us.us = icmp eq i32 %2027, %10
  br i1 %.not365.us.us.us.us, label %"consume sum_input56.us.us", label %"for sum_input.s1.r19$y47.us.us.us.us"

"for convolved.s1.r19$y64.us.us.us":              ; preds = %"end for convolved.s1.r19$x68.loopexit.us.us.us", %"for convolved.s1.r19$y64.preheader.us.us"
  %sum_input187312.sroa.155.1.us.us.us = phi <32 x i32> [ %.us-phi1041.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.155.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.146.1.us.us.us = phi <32 x i32> [ %.us-phi1042.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.146.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.137.1.us.us.us = phi <32 x i32> [ %.us-phi1043.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.137.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.128.1.us.us.us = phi <32 x i32> [ %.us-phi1044.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.128.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.119.1.us.us.us = phi <32 x i32> [ %.us-phi1045.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.119.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.110.1.us.us.us = phi <32 x i32> [ %.us-phi1046.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.110.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.101.1.us.us.us = phi <32 x i32> [ %.us-phi1047.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.101.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.92.1.us.us.us = phi <32 x i32> [ %.us-phi1048.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.92.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.83.1.us.us.us = phi <32 x i32> [ %.us-phi1049.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.83.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.74.1.us.us.us = phi <32 x i32> [ %.us-phi1050.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.74.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.65.1.us.us.us = phi <32 x i32> [ %.us-phi1051.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.65.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.56.1.us.us.us = phi <32 x i32> [ %.us-phi1052.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.56.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.47.1.us.us.us = phi <32 x i32> [ %.us-phi1053.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.47.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.38.1.us.us.us = phi <32 x i32> [ %.us-phi1054.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.38.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.29.1.us.us.us = phi <32 x i32> [ %.us-phi1055.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.29.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %sum_input187312.sroa.0.1.us.us.us = phi <32 x i32> [ %.us-phi1056.us.us.us, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ %sum_input187312.sroa.0.0.us.us, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %"convolved.s1.r19$y66.us.us.us" = phi i32 [ %2032, %"end for convolved.s1.r19$x68.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y64.preheader.us.us" ]
  %2028 = mul nsw i32 %"convolved.s1.r19$y66.us.us.us", %dilation_y
  %2029 = add nsw i32 %2028, %1038
  %2030 = mul nsw i32 %2029, %18
  %t1011.us.us.us = add nsw i32 %2030, %1034
  %2031 = mul nsw i32 %"convolved.s1.r19$y66.us.us.us", %11
  br i1 %1004, label %"for convolved.s1.r19$x67.us.us.us.us", label %"end for convolved.s1.r19$x68.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x68.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us", %"for convolved.s1.r19$y64.us.us.us"
  %.us-phi1041.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.155.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2127, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1042.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.146.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2124, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1043.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.137.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2118, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1044.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.128.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2115, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1045.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.119.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2109, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1046.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.110.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2106, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1047.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.101.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2100, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1048.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.92.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2097, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1049.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.83.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2091, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1050.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.74.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2088, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1051.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.65.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2082, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1052.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.56.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2079, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1053.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.47.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2073, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1054.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.38.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2070, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1055.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.29.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2064, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %.us-phi1056.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ], [ %2057, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ]
  %2032 = add nuw nsw i32 %"convolved.s1.r19$y66.us.us.us", 1
  %.not362.us.us.us = icmp eq i32 %2032, %10
  br i1 %.not362.us.us.us, label %"consume convolved73.us.us", label %"for convolved.s1.r19$y64.us.us.us"

"for convolved.s1.r19$x67.us.us.us.us":           ; preds = %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us", %"for convolved.s1.r19$y64.us.us.us"
  %sum_input187312.sroa.155.2.us.us.us.us = phi <32 x i32> [ %2127, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.155.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.146.2.us.us.us.us = phi <32 x i32> [ %2124, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.146.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.137.2.us.us.us.us = phi <32 x i32> [ %2118, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.137.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.128.2.us.us.us.us = phi <32 x i32> [ %2115, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.128.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.119.2.us.us.us.us = phi <32 x i32> [ %2109, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.119.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.110.2.us.us.us.us = phi <32 x i32> [ %2106, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.110.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.101.2.us.us.us.us = phi <32 x i32> [ %2100, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.101.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.92.2.us.us.us.us = phi <32 x i32> [ %2097, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.92.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.83.2.us.us.us.us = phi <32 x i32> [ %2091, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.83.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.74.2.us.us.us.us = phi <32 x i32> [ %2088, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.74.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.65.2.us.us.us.us = phi <32 x i32> [ %2082, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.65.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.56.2.us.us.us.us = phi <32 x i32> [ %2079, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.56.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.47.2.us.us.us.us = phi <32 x i32> [ %2073, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.47.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.38.2.us.us.us.us = phi <32 x i32> [ %2070, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.38.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.29.2.us.us.us.us = phi <32 x i32> [ %2064, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.29.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %sum_input187312.sroa.0.2.us.us.us.us = phi <32 x i32> [ %2057, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ %sum_input187312.sroa.0.1.us.us.us, %"for convolved.s1.r19$y64.us.us.us" ]
  %"convolved.s1.r19$x69.us.us.us.us" = phi i32 [ %2129, %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y64.us.us.us" ]
  %2033 = mul nsw i32 %"convolved.s1.r19$x69.us.us.us.us", %dilation_x
  %t1024.s.us.us.us.us = add nsw i32 %2033, %1810
  %t1023.s.us.us.us.us = add nsw i32 %2033, %1812
  %t1022.s.us.us.us.us = add nsw i32 %2033, %1814
  %t1021.s.us.us.us.us = add nsw i32 %2033, %1816
  %t1020.s.us.us.us.us = add nsw i32 %2033, %1818
  %t1019.s.us.us.us.us = add nsw i32 %2033, %1820
  %t1018.s.us.us.us.us = add nsw i32 %2033, %1822
  %t1015.s.us.us.us.us = add nsw i32 %2033, %1823
  %2034 = mul nsw i32 %"convolved.s1.r19$x69.us.us.us.us", %9
  %t1016.us.us.us.us = add nsw i32 %2034, %2031
  %2035 = mul nsw i32 %t1015.s.us.us.us.us, %16
  %2036 = add i32 %t1016.us.us.us.us, %1787
  %2037 = mul nsw i32 %t1018.s.us.us.us.us, %16
  %2038 = mul nsw i32 %t1019.s.us.us.us.us, %16
  %2039 = mul nsw i32 %t1020.s.us.us.us.us, %16
  %2040 = mul nsw i32 %t1021.s.us.us.us.us, %16
  %2041 = mul nsw i32 %t1022.s.us.us.us.us, %16
  %2042 = mul nsw i32 %t1023.s.us.us.us.us, %16
  %2043 = mul nsw i32 %t1024.s.us.us.us.us, %16
  br label %"for convolved.s1.r19$z.r12470.us.us.us.us"

"for convolved.s1.r19$z.r12470.us.us.us.us":      ; preds = %"for convolved.s1.r19$z.r12470.us.us.us.us", %"for convolved.s1.r19$x67.us.us.us.us"
  %sum_input187312.sroa.155.4.us.us.us.us = phi <32 x i32> [ %2127, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.155.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.146.4.us.us.us.us = phi <32 x i32> [ %2124, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.146.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.137.4.us.us.us.us = phi <32 x i32> [ %2118, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.137.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.128.4.us.us.us.us = phi <32 x i32> [ %2115, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.128.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.119.4.us.us.us.us = phi <32 x i32> [ %2109, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.119.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.110.4.us.us.us.us = phi <32 x i32> [ %2106, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.110.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.101.4.us.us.us.us = phi <32 x i32> [ %2100, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.101.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.92.4.us.us.us.us = phi <32 x i32> [ %2097, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.92.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.83.4.us.us.us.us = phi <32 x i32> [ %2091, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.83.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.74.4.us.us.us.us = phi <32 x i32> [ %2088, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.74.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.65.4.us.us.us.us = phi <32 x i32> [ %2082, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.65.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.56.4.us.us.us.us = phi <32 x i32> [ %2079, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.56.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.47.4.us.us.us.us = phi <32 x i32> [ %2073, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.47.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.38.4.us.us.us.us = phi <32 x i32> [ %2070, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.38.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.29.4.us.us.us.us = phi <32 x i32> [ %2064, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.29.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %sum_input187312.sroa.0.4.us.us.us.us = phi <32 x i32> [ %2057, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ %sum_input187312.sroa.0.2.us.us.us.us, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %"convolved.s1.r19$z.r12472.us.us.us.us" = phi i32 [ %2128, %"for convolved.s1.r19$z.r12470.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x67.us.us.us.us" ]
  %2044 = shl nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 2
  %2045 = add i32 %2044, %t1011.us.us.us
  %2046 = add i32 %2045, %2035
  %2047 = getelementptr inbounds i8, i8* %12, i32 %2046
  %2048 = bitcast i8* %2047 to <4 x i8>*
  %2049 = load <4 x i8>, <4 x i8>* %2048, align 4, !tbaa !108
  %2050 = shl nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 6
  %2051 = add nsw i32 %2050, %1788
  %2052 = shl nsw i32 %2051, 1
  %2053 = add nsw i32 %t1016.us.us.us.us, %2052
  %2054 = getelementptr inbounds i8, i8* %4, i32 %2053
  %2055 = bitcast i8* %2054 to <128 x i8>*
  %2056 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2057 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.0.4.us.us.us.us, <128 x i8> %2056, <4 x i8> %2049, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2058 = load <4 x i8>, <4 x i8>* %2048, align 4, !tbaa !108
  %2059 = shl nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 7
  %2060 = add i32 %2036, %2059
  %2061 = getelementptr inbounds i8, i8* %4, i32 %2060
  %2062 = bitcast i8* %2061 to <128 x i8>*
  %2063 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2064 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.29.4.us.us.us.us, <128 x i8> %2063, <4 x i8> %2058, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2065 = add i32 %2045, %2037
  %2066 = getelementptr inbounds i8, i8* %12, i32 %2065
  %2067 = bitcast i8* %2066 to <4 x i8>*
  %2068 = load <4 x i8>, <4 x i8>* %2067, align 4, !tbaa !108
  %2069 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2070 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.38.4.us.us.us.us, <128 x i8> %2069, <4 x i8> %2068, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2071 = load <4 x i8>, <4 x i8>* %2067, align 4, !tbaa !108
  %2072 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2073 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.47.4.us.us.us.us, <128 x i8> %2072, <4 x i8> %2071, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2074 = add i32 %2045, %2038
  %2075 = getelementptr inbounds i8, i8* %12, i32 %2074
  %2076 = bitcast i8* %2075 to <4 x i8>*
  %2077 = load <4 x i8>, <4 x i8>* %2076, align 4, !tbaa !108
  %2078 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2079 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.56.4.us.us.us.us, <128 x i8> %2078, <4 x i8> %2077, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2080 = load <4 x i8>, <4 x i8>* %2076, align 4, !tbaa !108
  %2081 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2082 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.65.4.us.us.us.us, <128 x i8> %2081, <4 x i8> %2080, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2083 = add i32 %2045, %2039
  %2084 = getelementptr inbounds i8, i8* %12, i32 %2083
  %2085 = bitcast i8* %2084 to <4 x i8>*
  %2086 = load <4 x i8>, <4 x i8>* %2085, align 4, !tbaa !108
  %2087 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2088 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.74.4.us.us.us.us, <128 x i8> %2087, <4 x i8> %2086, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2089 = load <4 x i8>, <4 x i8>* %2085, align 4, !tbaa !108
  %2090 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2091 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.83.4.us.us.us.us, <128 x i8> %2090, <4 x i8> %2089, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2092 = add i32 %2045, %2040
  %2093 = getelementptr inbounds i8, i8* %12, i32 %2092
  %2094 = bitcast i8* %2093 to <4 x i8>*
  %2095 = load <4 x i8>, <4 x i8>* %2094, align 4, !tbaa !108
  %2096 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2097 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.92.4.us.us.us.us, <128 x i8> %2096, <4 x i8> %2095, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2098 = load <4 x i8>, <4 x i8>* %2094, align 4, !tbaa !108
  %2099 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2100 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.101.4.us.us.us.us, <128 x i8> %2099, <4 x i8> %2098, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2101 = add i32 %2045, %2041
  %2102 = getelementptr inbounds i8, i8* %12, i32 %2101
  %2103 = bitcast i8* %2102 to <4 x i8>*
  %2104 = load <4 x i8>, <4 x i8>* %2103, align 4, !tbaa !108
  %2105 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2106 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.110.4.us.us.us.us, <128 x i8> %2105, <4 x i8> %2104, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2107 = load <4 x i8>, <4 x i8>* %2103, align 4, !tbaa !108
  %2108 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2109 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.119.4.us.us.us.us, <128 x i8> %2108, <4 x i8> %2107, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2110 = add i32 %2045, %2042
  %2111 = getelementptr inbounds i8, i8* %12, i32 %2110
  %2112 = bitcast i8* %2111 to <4 x i8>*
  %2113 = load <4 x i8>, <4 x i8>* %2112, align 4, !tbaa !108
  %2114 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2115 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.128.4.us.us.us.us, <128 x i8> %2114, <4 x i8> %2113, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2116 = load <4 x i8>, <4 x i8>* %2112, align 4, !tbaa !108
  %2117 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2118 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.137.4.us.us.us.us, <128 x i8> %2117, <4 x i8> %2116, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2119 = add i32 %2045, %2043
  %2120 = getelementptr inbounds i8, i8* %12, i32 %2119
  %2121 = bitcast i8* %2120 to <4 x i8>*
  %2122 = load <4 x i8>, <4 x i8>* %2121, align 4, !tbaa !108
  %2123 = load <128 x i8>, <128 x i8>* %2055, align 128, !tbaa !106
  %2124 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.146.4.us.us.us.us, <128 x i8> %2123, <4 x i8> %2122, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2125 = load <4 x i8>, <4 x i8>* %2121, align 4, !tbaa !108
  %2126 = load <128 x i8>, <128 x i8>* %2062, align 128, !tbaa !106
  %2127 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %sum_input187312.sroa.155.4.us.us.us.us, <128 x i8> %2126, <4 x i8> %2125, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2128 = add nuw nsw i32 %"convolved.s1.r19$z.r12472.us.us.us.us", 1
  %.not364.us.us.us.us = icmp eq i32 %2128, %6
  br i1 %.not364.us.us.us.us, label %"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r12470.us.us.us.us"

"end for convolved.s1.r19$z.r12471.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r12470.us.us.us.us"
  %2129 = add nuw nsw i32 %"convolved.s1.r19$x69.us.us.us.us", 1
  %.not363.us.us.us.us = icmp eq i32 %2129, %8
  br i1 %.not363.us.us.us.us, label %"end for convolved.s1.r19$x68.loopexit.us.us.us", label %"for convolved.s1.r19$x67.us.us.us.us"

next_bb22:                                        ; preds = %next_bb5
  br i1 %97, label %then_bb74, label %next_bb75

then_bb74:                                        ; preds = %next_bb22
  %2130 = mul nsw i32 %18, %17
  %2131 = mul nsw i32 %21, %19
  %2132 = mul nsw i32 %16, %15
  %2133 = add i32 %2131, %2130
  %t1037 = add i32 %2133, %2132
  %2134 = icmp sgt i32 %20, 0
  br i1 %2134, label %"for output.s0.b.rebased76.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased76.preheader":            ; preds = %then_bb74
  %2135 = mul nsw i32 %16, %stride_x
  %2136 = mul nsw i32 %2135, 7
  %2137 = mul nsw i32 %2135, 6
  %2138 = mul nsw i32 %2135, 5
  %2139 = shl nsw i32 %2135, 2
  %2140 = mul nsw i32 %2135, 3
  %2141 = shl nsw i32 %2135, 1
  %2142 = sub nsw i32 %stride_x, %15
  %2143 = mul nsw i32 %2142, %16
  %2144 = icmp sgt i32 %28, 0
  %.neg766 = mul i32 %29, %27
  %.neg767 = mul i32 %26, %24
  %.neg768 = mul i32 %30, %19
  %reass.add770 = add i32 %.neg766, %.neg767
  %reass.add771 = add i32 %reass.add770, %.neg768
  %2145 = add nuw nsw i32 %25, 7
  %2146 = ashr i32 %2145, 3
  %b432 = add nsw i32 %25, -8
  %2147 = icmp sgt i32 %10, 0
  %2148 = icmp sgt i32 %8, 0
  %2149 = icmp sgt i32 %6, 0
  %2150 = ashr i32 %3, 5
  %2151 = icmp sgt i32 %3, 31
  %2152 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %2153 = shufflevector <32 x i32> %2152, <32 x i32> undef, <32 x i32> zeroinitializer
  %2154 = sext <32 x i32> %2153 to <32 x i64>
  %2155 = icmp sgt i32 %a497, 0
  %2156 = select i1 %2155, i32 %a497, i32 0
  %2157 = shl nuw i32 1, %2156
  %2158 = ashr i32 %2157, 1
  %2159 = insertelement <1 x i32> poison, i32 %2158, i32 0
  %2160 = insertelement <1 x i32> poison, i32 %a497, i32 0
  %2161 = zext i8 %output_zero to i16
  %2162 = insertelement <32 x i16> undef, i16 %2161, i32 0
  %2163 = shufflevector <32 x i16> %2162, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2164 = bitcast <64 x i16> %2163 to <32 x i32>
  %2165 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %2166 = shufflevector <32 x i8> %2165, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2167 = bitcast <128 x i8> %2166 to <32 x i32>
  %2168 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %2169 = shufflevector <32 x i8> %2168, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2170 = bitcast <128 x i8> %2169 to <32 x i32>
  br i1 %2144, label %"for output.s0.b.rebased76.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased76.us.preheader":         ; preds = %"for output.s0.b.rebased76.preheader"
  %2171 = add i32 %2132, %2130
  %2172 = add i32 %8, -1
  %brmerge1311.demorgan = and i1 %2148, %2149
  %xtraiter1490 = and i32 %6, 1
  %2173 = icmp eq i32 %6, 1
  %unroll_iter1492 = and i32 %6, -2
  %lcmp.mod1491.not = icmp eq i32 %xtraiter1490, 0
  %xtraiter1494 = and i32 %8, 3
  %2174 = icmp ult i32 %2172, 3
  %unroll_iter1498 = and i32 %8, -4
  %lcmp.mod1496.not = icmp eq i32 %xtraiter1494, 0
  br label %"for output.s0.b.rebased76.us"

"for output.s0.b.rebased76.us":                   ; preds = %"end for output.s0.y.rebased80.loopexit.us", %"for output.s0.b.rebased76.us.preheader"
  %sum_input187312.sroa.0.7.us = phi <32 x i32> [ %.us-phi1028.us, %"end for output.s0.y.rebased80.loopexit.us" ], [ undef, %"for output.s0.b.rebased76.us.preheader" ]
  %output.s0.b.rebased78.us = phi i32 [ %2181, %"end for output.s0.y.rebased80.loopexit.us" ], [ 0, %"for output.s0.b.rebased76.us.preheader" ]
  %2175 = add nsw i32 %output.s0.b.rebased78.us, %19
  %2176 = mul nsw i32 %2175, %30
  %2177 = sub i32 %2176, %reass.add771
  %2178 = mul nsw i32 %2175, %21
  %2179 = sub i32 %2178, %2133
  %2180 = sub nsw i32 %2178, %t1037
  br i1 %99, label %"for output.s0.y.rebased79.us.us", label %"end for output.s0.y.rebased80.loopexit.us", !prof !96

"end for output.s0.y.rebased80.loopexit.us":      ; preds = %"end for output.s0.x.xo83.loopexit.us.us", %"for output.s0.b.rebased76.us"
  %.us-phi1028.us = phi <32 x i32> [ %sum_input187312.sroa.0.7.us, %"for output.s0.b.rebased76.us" ], [ %sum_input187312.sroa.0.20.us.us, %"end for output.s0.x.xo83.loopexit.us.us" ]
  %2181 = add nuw nsw i32 %output.s0.b.rebased78.us, 1
  %.not346.us = icmp eq i32 %2181, %20
  br i1 %.not346.us, label %after_bb3, label %"for output.s0.b.rebased76.us"

"for output.s0.y.rebased79.us.us":                ; preds = %"end for output.s0.x.xo83.loopexit.us.us", %"for output.s0.b.rebased76.us"
  %sum_input187312.sroa.0.8.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.20.us.us, %"end for output.s0.x.xo83.loopexit.us.us" ], [ %sum_input187312.sroa.0.7.us, %"for output.s0.b.rebased76.us" ]
  %output.s0.y.rebased81.us.us = phi i32 [ %2622, %"end for output.s0.x.xo83.loopexit.us.us" ], [ 0, %"for output.s0.b.rebased76.us" ]
  %2182 = add nsw i32 %output.s0.y.rebased81.us.us, %27
  %2183 = mul nsw i32 %2182, %29
  %t1066.us.us = add i32 %2177, %2183
  %2184 = mul nsw i32 %2182, %stride_y
  br label %"for output.s0.x.xo82.us.us"

"for output.s0.x.xo82.us.us":                     ; preds = %"end for output.s0.c.co111.us.us", %"for output.s0.y.rebased79.us.us"
  %sum_input187312.sroa.0.10.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.20.us.us, %"end for output.s0.c.co111.us.us" ], [ %sum_input187312.sroa.0.8.us.us, %"for output.s0.y.rebased79.us.us" ]
  %output.s0.x.xo84.us.us = phi i32 [ %2573, %"end for output.s0.c.co111.us.us" ], [ 0, %"for output.s0.y.rebased79.us.us" ]
  %a430.us.us = shl nsw i32 %output.s0.x.xo84.us.us, 3
  %2185 = icmp slt i32 %a430.us.us, %b432
  %output.s0.x.x.base.s85.us.us = select i1 %2185, i32 %a430.us.us, i32 %b432
  br i1 %t843.not, label %"consume sum_input109.us.us", label %then_bb89.us.us

then_bb89.us.us:                                  ; preds = %"for output.s0.x.xo82.us.us"
  %sum_input187312.sroa.0.0.vecblend.us.us = shufflevector <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <32 x i32> %sum_input187312.sroa.0.10.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br i1 %t844, label %then_bb92.us.us, label %next_bb93.us.us

next_bb93.us.us:                                  ; preds = %then_bb89.us.us
  br i1 %2147, label %"for sum_input.s1.r19$y100.preheader.us.us", label %"consume sum_input109.us.us", !prof !96

then_bb92.us.us:                                  ; preds = %then_bb89.us.us
  br i1 %2147, label %"for sum_input.s1.r19$y94.preheader.us.us", label %"consume sum_input109.us.us", !prof !96

"for sum_input.s1.r19$y94.us.us":                 ; preds = %"for sum_input.s1.r19$y94.preheader.us.us", %"end for sum_input.s1.r19$x98.us.us"
  %sum_input187312.sroa.0.12.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.14.us.us, %"end for sum_input.s1.r19$x98.us.us" ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y94.preheader.us.us" ]
  %"sum_input.s1.r19$y96.us.us" = phi i32 [ %2286, %"end for sum_input.s1.r19$x98.us.us" ], [ 0, %"for sum_input.s1.r19$y94.preheader.us.us" ]
  br i1 %2148, label %"for sum_input.s1.r19$x97.preheader.us.us", label %"end for sum_input.s1.r19$x98.us.us", !prof !96

"for sum_input.s1.r19$x97.us.us":                 ; preds = %"for sum_input.s1.r19$x97.preheader.us.us", %"for sum_input.s1.r19$x97.us.us"
  %sum_input187312.sroa.0.13.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend637.us.us.3, %"for sum_input.s1.r19$x97.us.us" ], [ %sum_input187312.sroa.0.12.us.us, %"for sum_input.s1.r19$x97.preheader.us.us" ]
  %"sum_input.s1.r19$x99.us.us" = phi i32 [ %2265, %"for sum_input.s1.r19$x97.us.us" ], [ 0, %"for sum_input.s1.r19$x97.preheader.us.us" ]
  %niter1499 = phi i32 [ %niter1499.nsub.3, %"for sum_input.s1.r19$x97.us.us" ], [ %unroll_iter1498, %"for sum_input.s1.r19$x97.preheader.us.us" ]
  %2186 = mul nsw i32 %"sum_input.s1.r19$x99.us.us", %dilation_x
  %reass.add776.us.us = add i32 %2619, %2186
  %reass.mul777.us.us = shl i32 %reass.add776.us.us, 2
  %2187 = add i32 %t1069.us.us, %reass.mul777.us.us
  %2188 = getelementptr inbounds i8, i8* %12, i32 %2187
  %2189 = bitcast i8* %2188 to <32 x i8>*
  %2190 = load <32 x i8>, <32 x i8>* %2189, align 4, !tbaa !108
  %t1230.us.us = zext <32 x i8> %2190 to <32 x i16>
  %2191 = shufflevector <32 x i16> %t1230.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2192 = bitcast <64 x i16> %2191 to <32 x i32>
  %2193 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2192)
  %2194 = bitcast <32 x i32> %2193 to <64 x i16>
  %2195 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2192)
  %2196 = bitcast <32 x i32> %2195 to <64 x i16>
  %2197 = add <64 x i16> %2196, %2194
  %2198 = shufflevector <64 x i16> %2197, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us = zext <16 x i16> %2198 to <16 x i32>
  %2199 = shufflevector <16 x i32> %t1229.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2200 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2199, i32 -4)
  %2201 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2200)
  %2202 = add nsw <32 x i32> %2201, %sum_input187312.sroa.0.13.us.us
  %2203 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2200)
  %2204 = add nsw <32 x i32> %2202, %2203
  %sum_input187312.sroa.0.0.vecblend637.us.us = shufflevector <32 x i32> %2204, <32 x i32> %sum_input187312.sroa.0.13.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2205 = or i32 %"sum_input.s1.r19$x99.us.us", 1
  %2206 = mul nsw i32 %2205, %dilation_x
  %reass.add776.us.us.1 = add i32 %2619, %2206
  %reass.mul777.us.us.1 = shl i32 %reass.add776.us.us.1, 2
  %2207 = add i32 %t1069.us.us, %reass.mul777.us.us.1
  %2208 = getelementptr inbounds i8, i8* %12, i32 %2207
  %2209 = bitcast i8* %2208 to <32 x i8>*
  %2210 = load <32 x i8>, <32 x i8>* %2209, align 4, !tbaa !108
  %t1230.us.us.1 = zext <32 x i8> %2210 to <32 x i16>
  %2211 = shufflevector <32 x i16> %t1230.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2212 = bitcast <64 x i16> %2211 to <32 x i32>
  %2213 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2212)
  %2214 = bitcast <32 x i32> %2213 to <64 x i16>
  %2215 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2212)
  %2216 = bitcast <32 x i32> %2215 to <64 x i16>
  %2217 = add <64 x i16> %2216, %2214
  %2218 = shufflevector <64 x i16> %2217, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.1 = zext <16 x i16> %2218 to <16 x i32>
  %2219 = shufflevector <16 x i32> %t1229.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2220 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2219, i32 -4)
  %2221 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2220)
  %2222 = add nsw <32 x i32> %2221, %sum_input187312.sroa.0.0.vecblend637.us.us
  %2223 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2220)
  %2224 = add nsw <32 x i32> %2222, %2223
  %sum_input187312.sroa.0.0.vecblend637.us.us.1 = shufflevector <32 x i32> %2224, <32 x i32> %sum_input187312.sroa.0.0.vecblend637.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2225 = or i32 %"sum_input.s1.r19$x99.us.us", 2
  %2226 = mul nsw i32 %2225, %dilation_x
  %reass.add776.us.us.2 = add i32 %2619, %2226
  %reass.mul777.us.us.2 = shl i32 %reass.add776.us.us.2, 2
  %2227 = add i32 %t1069.us.us, %reass.mul777.us.us.2
  %2228 = getelementptr inbounds i8, i8* %12, i32 %2227
  %2229 = bitcast i8* %2228 to <32 x i8>*
  %2230 = load <32 x i8>, <32 x i8>* %2229, align 4, !tbaa !108
  %t1230.us.us.2 = zext <32 x i8> %2230 to <32 x i16>
  %2231 = shufflevector <32 x i16> %t1230.us.us.2, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2232 = bitcast <64 x i16> %2231 to <32 x i32>
  %2233 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2232)
  %2234 = bitcast <32 x i32> %2233 to <64 x i16>
  %2235 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2232)
  %2236 = bitcast <32 x i32> %2235 to <64 x i16>
  %2237 = add <64 x i16> %2236, %2234
  %2238 = shufflevector <64 x i16> %2237, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.2 = zext <16 x i16> %2238 to <16 x i32>
  %2239 = shufflevector <16 x i32> %t1229.us.us.2, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2240 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2239, i32 -4)
  %2241 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2240)
  %2242 = add nsw <32 x i32> %2241, %sum_input187312.sroa.0.0.vecblend637.us.us.1
  %2243 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2240)
  %2244 = add nsw <32 x i32> %2242, %2243
  %sum_input187312.sroa.0.0.vecblend637.us.us.2 = shufflevector <32 x i32> %2244, <32 x i32> %sum_input187312.sroa.0.0.vecblend637.us.us.1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2245 = or i32 %"sum_input.s1.r19$x99.us.us", 3
  %2246 = mul nsw i32 %2245, %dilation_x
  %reass.add776.us.us.3 = add i32 %2619, %2246
  %reass.mul777.us.us.3 = shl i32 %reass.add776.us.us.3, 2
  %2247 = add i32 %t1069.us.us, %reass.mul777.us.us.3
  %2248 = getelementptr inbounds i8, i8* %12, i32 %2247
  %2249 = bitcast i8* %2248 to <32 x i8>*
  %2250 = load <32 x i8>, <32 x i8>* %2249, align 4, !tbaa !108
  %t1230.us.us.3 = zext <32 x i8> %2250 to <32 x i16>
  %2251 = shufflevector <32 x i16> %t1230.us.us.3, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2252 = bitcast <64 x i16> %2251 to <32 x i32>
  %2253 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2252)
  %2254 = bitcast <32 x i32> %2253 to <64 x i16>
  %2255 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2252)
  %2256 = bitcast <32 x i32> %2255 to <64 x i16>
  %2257 = add <64 x i16> %2256, %2254
  %2258 = shufflevector <64 x i16> %2257, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.3 = zext <16 x i16> %2258 to <16 x i32>
  %2259 = shufflevector <16 x i32> %t1229.us.us.3, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2260 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2259, i32 -4)
  %2261 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2260)
  %2262 = add nsw <32 x i32> %2261, %sum_input187312.sroa.0.0.vecblend637.us.us.2
  %2263 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2260)
  %2264 = add nsw <32 x i32> %2262, %2263
  %sum_input187312.sroa.0.0.vecblend637.us.us.3 = shufflevector <32 x i32> %2264, <32 x i32> %sum_input187312.sroa.0.0.vecblend637.us.us.2, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2265 = add nuw nsw i32 %"sum_input.s1.r19$x99.us.us", 4
  %niter1499.nsub.3 = add i32 %niter1499, -4
  %niter1499.ncmp.3 = icmp eq i32 %niter1499.nsub.3, 0
  br i1 %niter1499.ncmp.3, label %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x97.us.us"

"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x97.preheader.us.us", %"for sum_input.s1.r19$x97.us.us"
  %sum_input187312.sroa.0.0.vecblend637.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x97.preheader.us.us" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.3, %"for sum_input.s1.r19$x97.us.us" ]
  %sum_input187312.sroa.0.13.us.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.12.us.us, %"for sum_input.s1.r19$x97.preheader.us.us" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.3, %"for sum_input.s1.r19$x97.us.us" ]
  %"sum_input.s1.r19$x99.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x97.preheader.us.us" ], [ %2265, %"for sum_input.s1.r19$x97.us.us" ]
  br i1 %lcmp.mod1496.not, label %"end for sum_input.s1.r19$x98.us.us", label %"for sum_input.s1.r19$x97.us.us.epil"

"for sum_input.s1.r19$x97.us.us.epil":            ; preds = %"for sum_input.s1.r19$x97.us.us.epil", %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa"
  %sum_input187312.sroa.0.13.us.us.epil = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend637.us.us.epil, %"for sum_input.s1.r19$x97.us.us.epil" ], [ %sum_input187312.sroa.0.13.us.us.unr, %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x99.us.us.epil" = phi i32 [ %2285, %"for sum_input.s1.r19$x97.us.us.epil" ], [ %"sum_input.s1.r19$x99.us.us.unr", %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ]
  %epil.iter1495 = phi i32 [ %epil.iter1495.sub, %"for sum_input.s1.r19$x97.us.us.epil" ], [ %xtraiter1494, %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ]
  %2266 = mul nsw i32 %"sum_input.s1.r19$x99.us.us.epil", %dilation_x
  %reass.add776.us.us.epil = add i32 %2619, %2266
  %reass.mul777.us.us.epil = shl i32 %reass.add776.us.us.epil, 2
  %2267 = add i32 %t1069.us.us, %reass.mul777.us.us.epil
  %2268 = getelementptr inbounds i8, i8* %12, i32 %2267
  %2269 = bitcast i8* %2268 to <32 x i8>*
  %2270 = load <32 x i8>, <32 x i8>* %2269, align 4, !tbaa !108
  %t1230.us.us.epil = zext <32 x i8> %2270 to <32 x i16>
  %2271 = shufflevector <32 x i16> %t1230.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2272 = bitcast <64 x i16> %2271 to <32 x i32>
  %2273 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2272)
  %2274 = bitcast <32 x i32> %2273 to <64 x i16>
  %2275 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2272)
  %2276 = bitcast <32 x i32> %2275 to <64 x i16>
  %2277 = add <64 x i16> %2276, %2274
  %2278 = shufflevector <64 x i16> %2277, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1229.us.us.epil = zext <16 x i16> %2278 to <16 x i32>
  %2279 = shufflevector <16 x i32> %t1229.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2280 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2279, i32 -4)
  %2281 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2280)
  %2282 = add nsw <32 x i32> %2281, %sum_input187312.sroa.0.13.us.us.epil
  %2283 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2280)
  %2284 = add nsw <32 x i32> %2282, %2283
  %sum_input187312.sroa.0.0.vecblend637.us.us.epil = shufflevector <32 x i32> %2284, <32 x i32> %sum_input187312.sroa.0.13.us.us.epil, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2285 = add nuw nsw i32 %"sum_input.s1.r19$x99.us.us.epil", 1
  %epil.iter1495.sub = add i32 %epil.iter1495, -1
  %epil.iter1495.cmp.not = icmp eq i32 %epil.iter1495.sub, 0
  br i1 %epil.iter1495.cmp.not, label %"end for sum_input.s1.r19$x98.us.us", label %"for sum_input.s1.r19$x97.us.us.epil", !llvm.loop !114

"end for sum_input.s1.r19$x98.us.us":             ; preds = %"for sum_input.s1.r19$x97.us.us.epil", %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa", %"for sum_input.s1.r19$y94.us.us"
  %sum_input187312.sroa.0.14.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.12.us.us, %"for sum_input.s1.r19$y94.us.us" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.lcssa.ph, %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa" ], [ %sum_input187312.sroa.0.0.vecblend637.us.us.epil, %"for sum_input.s1.r19$x97.us.us.epil" ]
  %2286 = add nuw nsw i32 %"sum_input.s1.r19$y96.us.us", 1
  %.not356.us.us = icmp eq i32 %2286, %10
  br i1 %.not356.us.us, label %"consume sum_input109.us.us", label %"for sum_input.s1.r19$y94.us.us"

"consume sum_input109.us.us":                     ; preds = %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us", %"for sum_input.s1.r19$y100.preheader.us.us", %"end for sum_input.s1.r19$x98.us.us", %then_bb92.us.us, %next_bb93.us.us, %"for output.s0.x.xo82.us.us"
  %sum_input187312.sroa.0.20.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.10.us.us, %"for output.s0.x.xo82.us.us" ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %then_bb92.us.us ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %next_bb93.us.us ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y100.preheader.us.us" ], [ %sum_input187312.sroa.0.14.us.us, %"end for sum_input.s1.r19$x98.us.us" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us" ]
  br i1 %2151, label %"for output.s0.c.co110.preheader.us.us", label %"end for output.s0.c.co111.us.us", !prof !96

"for output.s0.c.co110.us.us":                    ; preds = %"for output.s0.c.co110.preheader.us.us", %"consume convolved126.us.us"
  %output.s0.c.co112.us.us = phi i32 [ %2572, %"consume convolved126.us.us" ], [ 0, %"for output.s0.c.co110.preheader.us.us" ]
  %2287 = shl nsw i32 %output.s0.c.co112.us.us, 5
  %2288 = getelementptr inbounds i32, i32* %offset_c, i32 %2287
  %2289 = bitcast i32* %2288 to <32 x i32>*
  %2290 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb114.us.us, label %next_bb116.us.us

next_bb116.us.us:                                 ; preds = %"for output.s0.c.co110.us.us"
  %2291 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2579, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2292 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2290, <32 x i32> %2291, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2293 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  %2294 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2581, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2295 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2293, <32 x i32> %2294, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2296 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  %2297 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2583, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2298 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2296, <32 x i32> %2297, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2299 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  %2300 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2585, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2301 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2299, <32 x i32> %2300, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2302 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  %2303 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2587, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2304 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2302, <32 x i32> %2303, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2305 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  %2306 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2589, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2307 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2305, <32 x i32> %2306, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2308 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  %2309 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2591, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2310 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2308, <32 x i32> %2309, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2311 = load <32 x i32>, <32 x i32>* %2289, align 128, !tbaa !104
  %2312 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2593, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2313 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2311, <32 x i32> %2312, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  br label %after_bb114.us.us

after_bb114.us.us:                                ; preds = %next_bb116.us.us, %"for output.s0.c.co110.us.us"
  %convolved313.sroa.122.7.us.us = phi <32 x i32> [ %2313, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.112.7.us.us = phi <32 x i32> [ %2310, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.102.7.us.us = phi <32 x i32> [ %2307, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.92.7.us.us = phi <32 x i32> [ %2304, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.77.7.us.us = phi <32 x i32> [ %2301, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.62.7.us.us = phi <32 x i32> [ %2298, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.47.7.us.us = phi <32 x i32> [ %2295, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  %convolved313.sroa.0.21.us.us = phi <32 x i32> [ %2292, %next_bb116.us.us ], [ %2290, %"for output.s0.c.co110.us.us" ]
  br i1 %2147, label %"for convolved.s1.r19$y117.preheader.us.us", label %"consume convolved126.us.us", !prof !96

"consume convolved126.us.us":                     ; preds = %"end for convolved.s1.r19$x121.loopexit.us.us.us", %"for convolved.s1.r19$y117.preheader.us.us", %after_bb114.us.us
  %convolved313.sroa.122.13.us.us = phi <32 x i32> [ %convolved313.sroa.122.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.122.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi991.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.112.13.us.us = phi <32 x i32> [ %convolved313.sroa.112.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.112.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi992.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.102.13.us.us = phi <32 x i32> [ %convolved313.sroa.102.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.102.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi993.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.92.13.us.us = phi <32 x i32> [ %convolved313.sroa.92.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.92.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi994.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.77.13.us.us = phi <32 x i32> [ %convolved313.sroa.77.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.77.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi995.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.62.13.us.us = phi <32 x i32> [ %convolved313.sroa.62.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.62.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi996.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.47.13.us.us = phi <32 x i32> [ %convolved313.sroa.47.7.us.us, %after_bb114.us.us ], [ %convolved313.sroa.47.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi997.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %convolved313.sroa.0.27.us.us = phi <32 x i32> [ %convolved313.sroa.0.21.us.us, %after_bb114.us.us ], [ %convolved313.sroa.0.21.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ], [ %.us-phi998.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ]
  %2314 = sext <32 x i32> %convolved313.sroa.0.27.us.us to <32 x i64>
  %a433.us.us = mul nsw <32 x i64> %2314, %2154
  %2315 = icmp slt <32 x i64> %a433.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2316 = select <32 x i1> %2315, <32 x i64> %a433.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2317 = add nsw <32 x i64> %2316, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a432.us.us = ashr <32 x i64> %2317, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2318 = icmp slt <32 x i64> %a432.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a431.us.us = select <32 x i1> %2318, <32 x i64> %a432.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2319 = icmp sgt <32 x i64> %a431.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2320 = select <32 x i1> %2319, <32 x i64> %a431.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2321 = trunc <32 x i64> %2320 to <32 x i32>
  %2322 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2323 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2324 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2321, <32 x i32> %2323, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2325 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2322, <1 x i32> zeroinitializer, <32 x i32> %2324, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2326 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2325, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2327 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2326, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2328 = trunc <32 x i32> %2327 to <32 x i16>
  %2329 = shufflevector <32 x i16> %2328, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2330 = bitcast <64 x i16> %2329 to <32 x i32>
  %2331 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2330, <32 x i32> %2164) #12
  %2332 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2331, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2333 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2332, <32 x i32> zeroinitializer) #12
  %2334 = bitcast <32 x i32> %2333 to <64 x i16>
  %2335 = shufflevector <64 x i16> %2334, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2336 = trunc <32 x i16> %2335 to <32 x i8>
  %2337 = shufflevector <32 x i8> %2336, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2338 = bitcast <128 x i8> %2337 to <32 x i32>
  %2339 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2338, <32 x i32> %2167) #12
  %2340 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2339, <32 x i32> %2170) #12
  %2341 = bitcast <32 x i32> %2340 to <128 x i8>
  %2342 = shufflevector <128 x i8> %2341, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2343 = shl nsw i32 %output.s0.c.co112.us.us, 5
  %2344 = add i32 %2343, %t1066.us.us
  %2345 = add i32 %2344, %2610
  %2346 = getelementptr inbounds i8, i8* %22, i32 %2345
  %2347 = bitcast i8* %2346 to <32 x i8>*
  store <32 x i8> %2342, <32 x i8>* %2347, align 1, !tbaa !111
  %2348 = sext <32 x i32> %convolved313.sroa.47.13.us.us to <32 x i64>
  %a437.us.us = mul nsw <32 x i64> %2348, %2154
  %2349 = icmp slt <32 x i64> %a437.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2350 = select <32 x i1> %2349, <32 x i64> %a437.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2351 = add nsw <32 x i64> %2350, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a436.us.us = ashr <32 x i64> %2351, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2352 = icmp slt <32 x i64> %a436.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a435.us.us = select <32 x i1> %2352, <32 x i64> %a436.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2353 = icmp sgt <32 x i64> %a435.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2354 = select <32 x i1> %2353, <32 x i64> %a435.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2355 = trunc <32 x i64> %2354 to <32 x i32>
  %2356 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2357 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2358 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2355, <32 x i32> %2357, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2359 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2356, <1 x i32> zeroinitializer, <32 x i32> %2358, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2360 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2359, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2361 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2360, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2362 = trunc <32 x i32> %2361 to <32 x i16>
  %2363 = shufflevector <32 x i16> %2362, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2364 = bitcast <64 x i16> %2363 to <32 x i32>
  %2365 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2364, <32 x i32> %2164) #12
  %2366 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2365, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2367 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2366, <32 x i32> zeroinitializer) #12
  %2368 = bitcast <32 x i32> %2367 to <64 x i16>
  %2369 = shufflevector <64 x i16> %2368, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2370 = trunc <32 x i16> %2369 to <32 x i8>
  %2371 = shufflevector <32 x i8> %2370, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2372 = bitcast <128 x i8> %2371 to <32 x i32>
  %2373 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2372, <32 x i32> %2167) #12
  %2374 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2373, <32 x i32> %2170) #12
  %2375 = bitcast <32 x i32> %2374 to <128 x i8>
  %2376 = shufflevector <128 x i8> %2375, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2377 = add i32 %2344, %2611
  %2378 = getelementptr inbounds i8, i8* %22, i32 %2377
  %2379 = bitcast i8* %2378 to <32 x i8>*
  store <32 x i8> %2376, <32 x i8>* %2379, align 1, !tbaa !111
  %2380 = sext <32 x i32> %convolved313.sroa.62.13.us.us to <32 x i64>
  %a441.us.us = mul nsw <32 x i64> %2380, %2154
  %2381 = icmp slt <32 x i64> %a441.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2382 = select <32 x i1> %2381, <32 x i64> %a441.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2383 = add nsw <32 x i64> %2382, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a440.us.us = ashr <32 x i64> %2383, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2384 = icmp slt <32 x i64> %a440.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a439.us.us = select <32 x i1> %2384, <32 x i64> %a440.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2385 = icmp sgt <32 x i64> %a439.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2386 = select <32 x i1> %2385, <32 x i64> %a439.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2387 = trunc <32 x i64> %2386 to <32 x i32>
  %2388 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2389 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2390 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2387, <32 x i32> %2389, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2391 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2388, <1 x i32> zeroinitializer, <32 x i32> %2390, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2392 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2391, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2393 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2392, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2394 = trunc <32 x i32> %2393 to <32 x i16>
  %2395 = shufflevector <32 x i16> %2394, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2396 = bitcast <64 x i16> %2395 to <32 x i32>
  %2397 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2396, <32 x i32> %2164) #12
  %2398 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2397, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2399 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2398, <32 x i32> zeroinitializer) #12
  %2400 = bitcast <32 x i32> %2399 to <64 x i16>
  %2401 = shufflevector <64 x i16> %2400, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2402 = trunc <32 x i16> %2401 to <32 x i8>
  %2403 = shufflevector <32 x i8> %2402, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2404 = bitcast <128 x i8> %2403 to <32 x i32>
  %2405 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2404, <32 x i32> %2167) #12
  %2406 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2405, <32 x i32> %2170) #12
  %2407 = bitcast <32 x i32> %2406 to <128 x i8>
  %2408 = shufflevector <128 x i8> %2407, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2409 = add i32 %2344, %2612
  %2410 = getelementptr inbounds i8, i8* %22, i32 %2409
  %2411 = bitcast i8* %2410 to <32 x i8>*
  store <32 x i8> %2408, <32 x i8>* %2411, align 1, !tbaa !111
  %2412 = sext <32 x i32> %convolved313.sroa.77.13.us.us to <32 x i64>
  %a445.us.us = mul nsw <32 x i64> %2412, %2154
  %2413 = icmp slt <32 x i64> %a445.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2414 = select <32 x i1> %2413, <32 x i64> %a445.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2415 = add nsw <32 x i64> %2414, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a444.us.us = ashr <32 x i64> %2415, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2416 = icmp slt <32 x i64> %a444.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a443.us.us = select <32 x i1> %2416, <32 x i64> %a444.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2417 = icmp sgt <32 x i64> %a443.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2418 = select <32 x i1> %2417, <32 x i64> %a443.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2419 = trunc <32 x i64> %2418 to <32 x i32>
  %2420 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2421 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2422 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2419, <32 x i32> %2421, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2423 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2420, <1 x i32> zeroinitializer, <32 x i32> %2422, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2424 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2423, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2425 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2424, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2426 = trunc <32 x i32> %2425 to <32 x i16>
  %2427 = shufflevector <32 x i16> %2426, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2428 = bitcast <64 x i16> %2427 to <32 x i32>
  %2429 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2428, <32 x i32> %2164) #12
  %2430 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2429, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2431 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2430, <32 x i32> zeroinitializer) #12
  %2432 = bitcast <32 x i32> %2431 to <64 x i16>
  %2433 = shufflevector <64 x i16> %2432, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2434 = trunc <32 x i16> %2433 to <32 x i8>
  %2435 = shufflevector <32 x i8> %2434, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2436 = bitcast <128 x i8> %2435 to <32 x i32>
  %2437 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2436, <32 x i32> %2167) #12
  %2438 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2437, <32 x i32> %2170) #12
  %2439 = bitcast <32 x i32> %2438 to <128 x i8>
  %2440 = shufflevector <128 x i8> %2439, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2441 = add i32 %2344, %2613
  %2442 = getelementptr inbounds i8, i8* %22, i32 %2441
  %2443 = bitcast i8* %2442 to <32 x i8>*
  store <32 x i8> %2440, <32 x i8>* %2443, align 1, !tbaa !111
  %2444 = sext <32 x i32> %convolved313.sroa.92.13.us.us to <32 x i64>
  %a449.us.us = mul nsw <32 x i64> %2444, %2154
  %2445 = icmp slt <32 x i64> %a449.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2446 = select <32 x i1> %2445, <32 x i64> %a449.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2447 = add nsw <32 x i64> %2446, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a448.us.us = ashr <32 x i64> %2447, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2448 = icmp slt <32 x i64> %a448.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a447.us.us = select <32 x i1> %2448, <32 x i64> %a448.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2449 = icmp sgt <32 x i64> %a447.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2450 = select <32 x i1> %2449, <32 x i64> %a447.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2451 = trunc <32 x i64> %2450 to <32 x i32>
  %2452 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2453 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2454 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2451, <32 x i32> %2453, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2455 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2452, <1 x i32> zeroinitializer, <32 x i32> %2454, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2456 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2455, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2457 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2456, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2458 = trunc <32 x i32> %2457 to <32 x i16>
  %2459 = shufflevector <32 x i16> %2458, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2460 = bitcast <64 x i16> %2459 to <32 x i32>
  %2461 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2460, <32 x i32> %2164) #12
  %2462 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2461, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2463 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2462, <32 x i32> zeroinitializer) #12
  %2464 = bitcast <32 x i32> %2463 to <64 x i16>
  %2465 = shufflevector <64 x i16> %2464, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2466 = trunc <32 x i16> %2465 to <32 x i8>
  %2467 = shufflevector <32 x i8> %2466, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2468 = bitcast <128 x i8> %2467 to <32 x i32>
  %2469 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2468, <32 x i32> %2167) #12
  %2470 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2469, <32 x i32> %2170) #12
  %2471 = bitcast <32 x i32> %2470 to <128 x i8>
  %2472 = shufflevector <128 x i8> %2471, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2473 = add i32 %2344, %2614
  %2474 = getelementptr inbounds i8, i8* %22, i32 %2473
  %2475 = bitcast i8* %2474 to <32 x i8>*
  store <32 x i8> %2472, <32 x i8>* %2475, align 1, !tbaa !111
  %2476 = sext <32 x i32> %convolved313.sroa.102.13.us.us to <32 x i64>
  %a453.us.us = mul nsw <32 x i64> %2476, %2154
  %2477 = icmp slt <32 x i64> %a453.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2478 = select <32 x i1> %2477, <32 x i64> %a453.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2479 = add nsw <32 x i64> %2478, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a452.us.us = ashr <32 x i64> %2479, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2480 = icmp slt <32 x i64> %a452.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a451.us.us = select <32 x i1> %2480, <32 x i64> %a452.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2481 = icmp sgt <32 x i64> %a451.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2482 = select <32 x i1> %2481, <32 x i64> %a451.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2483 = trunc <32 x i64> %2482 to <32 x i32>
  %2484 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2485 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2486 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2483, <32 x i32> %2485, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2487 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2484, <1 x i32> zeroinitializer, <32 x i32> %2486, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2488 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2487, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2489 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2488, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2490 = trunc <32 x i32> %2489 to <32 x i16>
  %2491 = shufflevector <32 x i16> %2490, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2492 = bitcast <64 x i16> %2491 to <32 x i32>
  %2493 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2492, <32 x i32> %2164) #12
  %2494 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2493, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2495 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2494, <32 x i32> zeroinitializer) #12
  %2496 = bitcast <32 x i32> %2495 to <64 x i16>
  %2497 = shufflevector <64 x i16> %2496, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2498 = trunc <32 x i16> %2497 to <32 x i8>
  %2499 = shufflevector <32 x i8> %2498, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2500 = bitcast <128 x i8> %2499 to <32 x i32>
  %2501 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2500, <32 x i32> %2167) #12
  %2502 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2501, <32 x i32> %2170) #12
  %2503 = bitcast <32 x i32> %2502 to <128 x i8>
  %2504 = shufflevector <128 x i8> %2503, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2505 = add i32 %2344, %2615
  %2506 = getelementptr inbounds i8, i8* %22, i32 %2505
  %2507 = bitcast i8* %2506 to <32 x i8>*
  store <32 x i8> %2504, <32 x i8>* %2507, align 1, !tbaa !111
  %2508 = sext <32 x i32> %convolved313.sroa.112.13.us.us to <32 x i64>
  %a457.us.us = mul nsw <32 x i64> %2508, %2154
  %2509 = icmp slt <32 x i64> %a457.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2510 = select <32 x i1> %2509, <32 x i64> %a457.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2511 = add nsw <32 x i64> %2510, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a456.us.us = ashr <32 x i64> %2511, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2512 = icmp slt <32 x i64> %a456.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a455.us.us = select <32 x i1> %2512, <32 x i64> %a456.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2513 = icmp sgt <32 x i64> %a455.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2514 = select <32 x i1> %2513, <32 x i64> %a455.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2515 = trunc <32 x i64> %2514 to <32 x i32>
  %2516 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2517 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2518 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2515, <32 x i32> %2517, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2519 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2516, <1 x i32> zeroinitializer, <32 x i32> %2518, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2520 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2519, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2521 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2520, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2522 = trunc <32 x i32> %2521 to <32 x i16>
  %2523 = shufflevector <32 x i16> %2522, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2524 = bitcast <64 x i16> %2523 to <32 x i32>
  %2525 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2524, <32 x i32> %2164) #12
  %2526 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2525, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2527 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2526, <32 x i32> zeroinitializer) #12
  %2528 = bitcast <32 x i32> %2527 to <64 x i16>
  %2529 = shufflevector <64 x i16> %2528, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2530 = trunc <32 x i16> %2529 to <32 x i8>
  %2531 = shufflevector <32 x i8> %2530, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2532 = bitcast <128 x i8> %2531 to <32 x i32>
  %2533 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2532, <32 x i32> %2167) #12
  %2534 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2533, <32 x i32> %2170) #12
  %2535 = bitcast <32 x i32> %2534 to <128 x i8>
  %2536 = shufflevector <128 x i8> %2535, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2537 = add i32 %2344, %2616
  %2538 = getelementptr inbounds i8, i8* %22, i32 %2537
  %2539 = bitcast i8* %2538 to <32 x i8>*
  store <32 x i8> %2536, <32 x i8>* %2539, align 1, !tbaa !111
  %2540 = sext <32 x i32> %convolved313.sroa.122.13.us.us to <32 x i64>
  %a461.us.us = mul nsw <32 x i64> %2540, %2154
  %2541 = icmp slt <32 x i64> %a461.us.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2542 = select <32 x i1> %2541, <32 x i64> %a461.us.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %2543 = add nsw <32 x i64> %2542, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a460.us.us = ashr <32 x i64> %2543, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %2544 = icmp slt <32 x i64> %a460.us.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a459.us.us = select <32 x i1> %2544, <32 x i64> %a460.us.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2545 = icmp sgt <32 x i64> %a459.us.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2546 = select <32 x i1> %2545, <32 x i64> %a459.us.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2547 = trunc <32 x i64> %2546 to <32 x i32>
  %2548 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2160, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %2549 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %2159, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2550 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %2547, <32 x i32> %2549, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %2551 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %2548, <1 x i32> zeroinitializer, <32 x i32> %2550, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2552 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %2551, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2553 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %2552, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %2554 = trunc <32 x i32> %2553 to <32 x i16>
  %2555 = shufflevector <32 x i16> %2554, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2556 = bitcast <64 x i16> %2555 to <32 x i32>
  %2557 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %2556, <32 x i32> %2164) #12
  %2558 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2557, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %2559 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2558, <32 x i32> zeroinitializer) #12
  %2560 = bitcast <32 x i32> %2559 to <64 x i16>
  %2561 = shufflevector <64 x i16> %2560, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2562 = trunc <32 x i16> %2561 to <32 x i8>
  %2563 = shufflevector <32 x i8> %2562, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2564 = bitcast <128 x i8> %2563 to <32 x i32>
  %2565 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2564, <32 x i32> %2167) #12
  %2566 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2565, <32 x i32> %2170) #12
  %2567 = bitcast <32 x i32> %2566 to <128 x i8>
  %2568 = shufflevector <128 x i8> %2567, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2569 = add i32 %2344, %2617
  %2570 = getelementptr inbounds i8, i8* %22, i32 %2569
  %2571 = bitcast i8* %2570 to <32 x i8>*
  store <32 x i8> %2568, <32 x i8>* %2571, align 1, !tbaa !111
  %2572 = add nuw nsw i32 %output.s0.c.co112.us.us, 1
  %.not349.us.us = icmp eq i32 %2572, %2150
  br i1 %.not349.us.us, label %"end for output.s0.c.co111.us.us", label %"for output.s0.c.co110.us.us"

"end for output.s0.c.co111.us.us":                ; preds = %"consume convolved126.us.us", %"consume sum_input109.us.us"
  %2573 = add nuw nsw i32 %output.s0.x.xo84.us.us, 1
  %.not348.us.us = icmp eq i32 %2573, %2146
  br i1 %.not348.us.us, label %"end for output.s0.x.xo83.loopexit.us.us", label %"for output.s0.x.xo82.us.us"

"for convolved.s1.r19$y117.preheader.us.us":      ; preds = %after_bb114.us.us
  %2574 = mul nsw i32 %output.s0.c.co112.us.us, %7
  br i1 %2148, label %"for convolved.s1.r19$y117.us.us.us", label %"consume convolved126.us.us", !prof !96

"for sum_input.s1.r19$x97.preheader.us.us":       ; preds = %"for sum_input.s1.r19$y94.us.us"
  %2575 = mul nsw i32 %"sum_input.s1.r19$y96.us.us", %dilation_y
  %2576 = add nsw i32 %2575, %2184
  %2577 = mul nsw i32 %2576, %18
  %t1069.us.us = add i32 %2179, %2577
  br i1 %2174, label %"end for sum_input.s1.r19$x98.us.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x97.us.us"

"for output.s0.c.co110.preheader.us.us":          ; preds = %"consume sum_input109.us.us"
  %sum_input187312.sroa.0.0.vec.extract657.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 0
  %2578 = mul nsw i32 %sum_input187312.sroa.0.0.vec.extract657.us.us, %166
  %2579 = insertelement <1 x i32> poison, i32 %2578, i32 0
  %sum_input187312.sroa.0.4.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 1
  %2580 = mul nsw i32 %sum_input187312.sroa.0.4.vec.extract.us.us, %166
  %2581 = insertelement <1 x i32> poison, i32 %2580, i32 0
  %sum_input187312.sroa.0.8.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 2
  %2582 = mul nsw i32 %sum_input187312.sroa.0.8.vec.extract.us.us, %166
  %2583 = insertelement <1 x i32> poison, i32 %2582, i32 0
  %sum_input187312.sroa.0.12.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 3
  %2584 = mul nsw i32 %sum_input187312.sroa.0.12.vec.extract.us.us, %166
  %2585 = insertelement <1 x i32> poison, i32 %2584, i32 0
  %sum_input187312.sroa.0.16.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 4
  %2586 = mul nsw i32 %sum_input187312.sroa.0.16.vec.extract.us.us, %166
  %2587 = insertelement <1 x i32> poison, i32 %2586, i32 0
  %sum_input187312.sroa.0.20.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 5
  %2588 = mul nsw i32 %sum_input187312.sroa.0.20.vec.extract.us.us, %166
  %2589 = insertelement <1 x i32> poison, i32 %2588, i32 0
  %sum_input187312.sroa.0.24.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 6
  %2590 = mul nsw i32 %sum_input187312.sroa.0.24.vec.extract.us.us, %166
  %2591 = insertelement <1 x i32> poison, i32 %2590, i32 0
  %sum_input187312.sroa.0.28.vec.extract.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.20.us.us, i32 7
  %2592 = mul nsw i32 %sum_input187312.sroa.0.28.vec.extract.us.us, %166
  %2593 = insertelement <1 x i32> poison, i32 %2592, i32 0
  %2594 = add nsw i32 %output.s0.x.x.base.s85.us.us, %24
  %2595 = add nsw i32 %2594, 7
  %2596 = mul nsw i32 %2595, %stride_x
  %2597 = add nsw i32 %2594, 6
  %2598 = mul nsw i32 %2597, %stride_x
  %2599 = add nsw i32 %2594, 5
  %2600 = mul nsw i32 %2599, %stride_x
  %2601 = add nsw i32 %2594, 4
  %2602 = mul nsw i32 %2601, %stride_x
  %2603 = add nsw i32 %2594, 3
  %2604 = mul nsw i32 %2603, %stride_x
  %2605 = add nsw i32 %2594, 2
  %2606 = mul nsw i32 %2605, %stride_x
  %2607 = add nsw i32 %2594, 1
  %2608 = mul nsw i32 %2607, %stride_x
  %2609 = mul nsw i32 %2594, %stride_x
  %2610 = mul nsw i32 %2594, %26
  %2611 = mul nsw i32 %2607, %26
  %2612 = mul nsw i32 %2605, %26
  %2613 = mul nsw i32 %2603, %26
  %2614 = mul nsw i32 %2601, %26
  %2615 = mul nsw i32 %2599, %26
  %2616 = mul nsw i32 %2597, %26
  %2617 = mul nsw i32 %2595, %26
  br label %"for output.s0.c.co110.us.us"

"for sum_input.s1.r19$y94.preheader.us.us":       ; preds = %then_bb92.us.us
  %2618 = add nsw i32 %output.s0.x.x.base.s85.us.us, %24
  %2619 = sub i32 %2618, %15
  br label %"for sum_input.s1.r19$y94.us.us"

"for sum_input.s1.r19$y100.preheader.us.us":      ; preds = %next_bb93.us.us
  %2620 = add nsw i32 %output.s0.x.x.base.s85.us.us, %24
  %2621 = mul nsw i32 %2620, %stride_x
  br i1 %brmerge1311.demorgan, label %"for sum_input.s1.r19$y100.us.us.us.us", label %"consume sum_input109.us.us", !prof !103

"end for output.s0.x.xo83.loopexit.us.us":        ; preds = %"end for output.s0.c.co111.us.us"
  %2622 = add nuw nsw i32 %output.s0.y.rebased81.us.us, 1
  %.not347.us.us = icmp eq i32 %2622, %28
  br i1 %.not347.us.us, label %"end for output.s0.y.rebased80.loopexit.us", label %"for output.s0.y.rebased79.us.us"

"for sum_input.s1.r19$y100.us.us.us.us":          ; preds = %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us", %"for sum_input.s1.r19$y100.preheader.us.us"
  %sum_input187312.sroa.0.15.us.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us" ], [ %sum_input187312.sroa.0.0.vecblend.us.us, %"for sum_input.s1.r19$y100.preheader.us.us" ]
  %"sum_input.s1.r19$y102.us.us.us.us" = phi i32 [ %2813, %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y100.preheader.us.us" ]
  %2623 = mul nsw i32 %"sum_input.s1.r19$y102.us.us.us.us", %dilation_y
  %t1071.s.us.us.us.us = add nsw i32 %2623, %2184
  %2624 = mul nsw i32 %t1071.s.us.us.us.us, %18
  br label %"for sum_input.s1.r19$x103.us.us.us.us.us"

"for sum_input.s1.r19$x103.us.us.us.us.us":       ; preds = %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us", %"for sum_input.s1.r19$y100.us.us.us.us"
  %sum_input187312.sroa.0.16.us.us.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa, %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us" ], [ %sum_input187312.sroa.0.15.us.us.us.us, %"for sum_input.s1.r19$y100.us.us.us.us" ]
  %"sum_input.s1.r19$x105.us.us.us.us.us" = phi i32 [ %2812, %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y100.us.us.us.us" ]
  %2625 = mul nsw i32 %"sum_input.s1.r19$x105.us.us.us.us.us", %dilation_x
  %t1072.s.us.us.us.us.us = add nsw i32 %2625, %2621
  %t1231.us.us.us.us.us = mul nsw i32 %t1072.s.us.us.us.us.us, %16
  %2626 = add i32 %t1231.us.us.us.us.us, %2624
  %t1073.us.us.us.us.us = sub i32 %2626, %t1037
  %2627 = add i32 %t1073.us.us.us.us.us, %2178
  %t1045.us.us.us.us.us = add i32 %2626, %2143
  %2628 = sub i32 %t1045.us.us.us.us.us, %2130
  %t1074.us.us.us.us.us = sub i32 %2628, %2131
  %2629 = add i32 %t1074.us.us.us.us.us, %2178
  %2630 = add i32 %2626, %2141
  %2631 = sub i32 %2630, %2171
  %t1075.us.us.us.us.us = sub i32 %2631, %2131
  %2632 = add i32 %t1075.us.us.us.us.us, %2178
  %2633 = add i32 %2626, %2140
  %2634 = sub i32 %2633, %2171
  %t1076.us.us.us.us.us = sub i32 %2634, %2131
  %2635 = add i32 %t1076.us.us.us.us.us, %2178
  %2636 = add i32 %2626, %2139
  %2637 = sub i32 %2636, %2171
  %t1077.us.us.us.us.us = sub i32 %2637, %2131
  %2638 = add i32 %t1077.us.us.us.us.us, %2178
  %2639 = add i32 %2626, %2138
  %2640 = sub i32 %2639, %2171
  %t1078.us.us.us.us.us = sub i32 %2640, %2131
  %2641 = add i32 %t1078.us.us.us.us.us, %2178
  %2642 = add i32 %2626, %2137
  %2643 = sub i32 %2642, %2171
  %t1079.us.us.us.us.us = sub i32 %2643, %2131
  %2644 = add i32 %t1079.us.us.us.us.us, %2178
  %2645 = add i32 %2626, %2136
  %2646 = sub i32 %2645, %2171
  %t1080.us.us.us.us.us = sub i32 %2646, %2131
  %2647 = add i32 %t1080.us.us.us.us.us, %2178
  br i1 %2173, label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124106.us.us.us.us.us"

"for sum_input.s1.r19$z.r124106.us.us.us.us.us":  ; preds = %"for sum_input.s1.r19$z.r124106.us.us.us.us.us", %"for sum_input.s1.r19$x103.us.us.us.us.us"
  %sum_input187312.sroa.0.18.us.us.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ], [ %sum_input187312.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x103.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124108.us.us.us.us.us" = phi i32 [ %2757, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x103.us.us.us.us.us" ]
  %niter1493 = phi i32 [ %niter1493.nsub.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ], [ %unroll_iter1492, %"for sum_input.s1.r19$x103.us.us.us.us.us" ]
  %2648 = shl nsw i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us", 2
  %2649 = add i32 %2627, %2648
  %2650 = getelementptr inbounds i8, i8* %12, i32 %2649
  %2651 = bitcast i8* %2650 to <4 x i8>*
  %2652 = load <4 x i8>, <4 x i8>* %2651, align 4, !tbaa !108
  %2653 = add i32 %2629, %2648
  %2654 = getelementptr inbounds i8, i8* %12, i32 %2653
  %2655 = bitcast i8* %2654 to <4 x i8>*
  %2656 = load <4 x i8>, <4 x i8>* %2655, align 4, !tbaa !108
  %2657 = add i32 %2632, %2648
  %2658 = getelementptr inbounds i8, i8* %12, i32 %2657
  %2659 = bitcast i8* %2658 to <4 x i8>*
  %2660 = load <4 x i8>, <4 x i8>* %2659, align 4, !tbaa !108
  %2661 = add i32 %2635, %2648
  %2662 = getelementptr inbounds i8, i8* %12, i32 %2661
  %2663 = bitcast i8* %2662 to <4 x i8>*
  %2664 = load <4 x i8>, <4 x i8>* %2663, align 4, !tbaa !108
  %2665 = add i32 %2638, %2648
  %2666 = getelementptr inbounds i8, i8* %12, i32 %2665
  %2667 = bitcast i8* %2666 to <4 x i8>*
  %2668 = load <4 x i8>, <4 x i8>* %2667, align 4, !tbaa !108
  %2669 = add i32 %2641, %2648
  %2670 = getelementptr inbounds i8, i8* %12, i32 %2669
  %2671 = bitcast i8* %2670 to <4 x i8>*
  %2672 = load <4 x i8>, <4 x i8>* %2671, align 4, !tbaa !108
  %2673 = add i32 %2644, %2648
  %2674 = getelementptr inbounds i8, i8* %12, i32 %2673
  %2675 = bitcast i8* %2674 to <4 x i8>*
  %2676 = load <4 x i8>, <4 x i8>* %2675, align 4, !tbaa !108
  %2677 = add i32 %2647, %2648
  %2678 = getelementptr inbounds i8, i8* %12, i32 %2677
  %2679 = bitcast i8* %2678 to <4 x i8>*
  %2680 = load <4 x i8>, <4 x i8>* %2679, align 4, !tbaa !108
  %2681 = shufflevector <4 x i8> %2652, <4 x i8> %2656, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2682 = shufflevector <4 x i8> %2660, <4 x i8> %2664, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2683 = shufflevector <4 x i8> %2668, <4 x i8> %2672, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2684 = shufflevector <4 x i8> %2676, <4 x i8> %2680, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2685 = shufflevector <8 x i8> %2681, <8 x i8> %2682, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2686 = shufflevector <8 x i8> %2683, <8 x i8> %2684, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2687 = shufflevector <16 x i8> %2685, <16 x i8> %2686, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us = zext <32 x i8> %2687 to <32 x i16>
  %2688 = shufflevector <32 x i16> %t1233.us.us.us.us.us, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2689 = bitcast <64 x i16> %2688 to <32 x i32>
  %2690 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2689)
  %2691 = bitcast <32 x i32> %2690 to <64 x i16>
  %2692 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2689)
  %2693 = bitcast <32 x i32> %2692 to <64 x i16>
  %2694 = add <64 x i16> %2693, %2691
  %2695 = shufflevector <64 x i16> %2694, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us = zext <16 x i16> %2695 to <16 x i32>
  %2696 = shufflevector <16 x i32> %t1232.us.us.us.us.us, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2697 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2696, i32 -4)
  %2698 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2697)
  %2699 = add nsw <32 x i32> %2698, %sum_input187312.sroa.0.18.us.us.us.us.us
  %2700 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2697)
  %2701 = add nsw <32 x i32> %2699, %2700
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us = shufflevector <32 x i32> %2701, <32 x i32> %sum_input187312.sroa.0.18.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2702 = shl i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us", 2
  %2703 = or i32 %2702, 4
  %2704 = add i32 %2627, %2703
  %2705 = getelementptr inbounds i8, i8* %12, i32 %2704
  %2706 = bitcast i8* %2705 to <4 x i8>*
  %2707 = load <4 x i8>, <4 x i8>* %2706, align 4, !tbaa !108
  %2708 = add i32 %2629, %2703
  %2709 = getelementptr inbounds i8, i8* %12, i32 %2708
  %2710 = bitcast i8* %2709 to <4 x i8>*
  %2711 = load <4 x i8>, <4 x i8>* %2710, align 4, !tbaa !108
  %2712 = add i32 %2632, %2703
  %2713 = getelementptr inbounds i8, i8* %12, i32 %2712
  %2714 = bitcast i8* %2713 to <4 x i8>*
  %2715 = load <4 x i8>, <4 x i8>* %2714, align 4, !tbaa !108
  %2716 = add i32 %2635, %2703
  %2717 = getelementptr inbounds i8, i8* %12, i32 %2716
  %2718 = bitcast i8* %2717 to <4 x i8>*
  %2719 = load <4 x i8>, <4 x i8>* %2718, align 4, !tbaa !108
  %2720 = add i32 %2638, %2703
  %2721 = getelementptr inbounds i8, i8* %12, i32 %2720
  %2722 = bitcast i8* %2721 to <4 x i8>*
  %2723 = load <4 x i8>, <4 x i8>* %2722, align 4, !tbaa !108
  %2724 = add i32 %2641, %2703
  %2725 = getelementptr inbounds i8, i8* %12, i32 %2724
  %2726 = bitcast i8* %2725 to <4 x i8>*
  %2727 = load <4 x i8>, <4 x i8>* %2726, align 4, !tbaa !108
  %2728 = add i32 %2644, %2703
  %2729 = getelementptr inbounds i8, i8* %12, i32 %2728
  %2730 = bitcast i8* %2729 to <4 x i8>*
  %2731 = load <4 x i8>, <4 x i8>* %2730, align 4, !tbaa !108
  %2732 = add i32 %2647, %2703
  %2733 = getelementptr inbounds i8, i8* %12, i32 %2732
  %2734 = bitcast i8* %2733 to <4 x i8>*
  %2735 = load <4 x i8>, <4 x i8>* %2734, align 4, !tbaa !108
  %2736 = shufflevector <4 x i8> %2707, <4 x i8> %2711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2737 = shufflevector <4 x i8> %2715, <4 x i8> %2719, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2738 = shufflevector <4 x i8> %2723, <4 x i8> %2727, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2739 = shufflevector <4 x i8> %2731, <4 x i8> %2735, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2740 = shufflevector <8 x i8> %2736, <8 x i8> %2737, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2741 = shufflevector <8 x i8> %2738, <8 x i8> %2739, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2742 = shufflevector <16 x i8> %2740, <16 x i8> %2741, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us.1 = zext <32 x i8> %2742 to <32 x i16>
  %2743 = shufflevector <32 x i16> %t1233.us.us.us.us.us.1, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2744 = bitcast <64 x i16> %2743 to <32 x i32>
  %2745 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2744)
  %2746 = bitcast <32 x i32> %2745 to <64 x i16>
  %2747 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2744)
  %2748 = bitcast <32 x i32> %2747 to <64 x i16>
  %2749 = add <64 x i16> %2748, %2746
  %2750 = shufflevector <64 x i16> %2749, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us.1 = zext <16 x i16> %2750 to <16 x i32>
  %2751 = shufflevector <16 x i32> %t1232.us.us.us.us.us.1, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2752 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2751, i32 -4)
  %2753 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2752)
  %2754 = add nsw <32 x i32> %2753, %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us
  %2755 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2752)
  %2756 = add nsw <32 x i32> %2754, %2755
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1 = shufflevector <32 x i32> %2756, <32 x i32> %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2757 = add nuw nsw i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us", 2
  %niter1493.nsub.1 = add i32 %niter1493, -2
  %niter1493.ncmp.1 = icmp eq i32 %niter1493.nsub.1, 0
  br i1 %niter1493.ncmp.1, label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124106.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa": ; preds = %"for sum_input.s1.r19$z.r124106.us.us.us.us.us", %"for sum_input.s1.r19$x103.us.us.us.us.us"
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x103.us.us.us.us.us" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ]
  %sum_input187312.sroa.0.18.us.us.us.us.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.16.us.us.us.us.us, %"for sum_input.s1.r19$x103.us.us.us.us.us" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.1, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124108.us.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x103.us.us.us.us.us" ], [ %2757, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us" ]
  br i1 %lcmp.mod1491.not, label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us", label %"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil": ; preds = %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa"
  %2758 = shl nsw i32 %"sum_input.s1.r19$z.r124108.us.us.us.us.us.unr", 2
  %2759 = add i32 %2627, %2758
  %2760 = getelementptr inbounds i8, i8* %12, i32 %2759
  %2761 = bitcast i8* %2760 to <4 x i8>*
  %2762 = load <4 x i8>, <4 x i8>* %2761, align 4, !tbaa !108
  %2763 = add i32 %2629, %2758
  %2764 = getelementptr inbounds i8, i8* %12, i32 %2763
  %2765 = bitcast i8* %2764 to <4 x i8>*
  %2766 = load <4 x i8>, <4 x i8>* %2765, align 4, !tbaa !108
  %2767 = add i32 %2632, %2758
  %2768 = getelementptr inbounds i8, i8* %12, i32 %2767
  %2769 = bitcast i8* %2768 to <4 x i8>*
  %2770 = load <4 x i8>, <4 x i8>* %2769, align 4, !tbaa !108
  %2771 = add i32 %2635, %2758
  %2772 = getelementptr inbounds i8, i8* %12, i32 %2771
  %2773 = bitcast i8* %2772 to <4 x i8>*
  %2774 = load <4 x i8>, <4 x i8>* %2773, align 4, !tbaa !108
  %2775 = add i32 %2638, %2758
  %2776 = getelementptr inbounds i8, i8* %12, i32 %2775
  %2777 = bitcast i8* %2776 to <4 x i8>*
  %2778 = load <4 x i8>, <4 x i8>* %2777, align 4, !tbaa !108
  %2779 = add i32 %2641, %2758
  %2780 = getelementptr inbounds i8, i8* %12, i32 %2779
  %2781 = bitcast i8* %2780 to <4 x i8>*
  %2782 = load <4 x i8>, <4 x i8>* %2781, align 4, !tbaa !108
  %2783 = add i32 %2644, %2758
  %2784 = getelementptr inbounds i8, i8* %12, i32 %2783
  %2785 = bitcast i8* %2784 to <4 x i8>*
  %2786 = load <4 x i8>, <4 x i8>* %2785, align 4, !tbaa !108
  %2787 = add i32 %2647, %2758
  %2788 = getelementptr inbounds i8, i8* %12, i32 %2787
  %2789 = bitcast i8* %2788 to <4 x i8>*
  %2790 = load <4 x i8>, <4 x i8>* %2789, align 4, !tbaa !108
  %2791 = shufflevector <4 x i8> %2762, <4 x i8> %2766, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2792 = shufflevector <4 x i8> %2770, <4 x i8> %2774, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2793 = shufflevector <4 x i8> %2778, <4 x i8> %2782, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2794 = shufflevector <4 x i8> %2786, <4 x i8> %2790, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2795 = shufflevector <8 x i8> %2791, <8 x i8> %2792, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2796 = shufflevector <8 x i8> %2793, <8 x i8> %2794, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2797 = shufflevector <16 x i8> %2795, <16 x i8> %2796, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t1233.us.us.us.us.us.epil = zext <32 x i8> %2797 to <32 x i16>
  %2798 = shufflevector <32 x i16> %t1233.us.us.us.us.us.epil, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2799 = bitcast <64 x i16> %2798 to <32 x i32>
  %2800 = call <32 x i32> @llvm.hexagon.V6.vpackeh.128B(<32 x i32> undef, <32 x i32> %2799)
  %2801 = bitcast <32 x i32> %2800 to <64 x i16>
  %2802 = call <32 x i32> @llvm.hexagon.V6.vpackoh.128B(<32 x i32> undef, <32 x i32> %2799)
  %2803 = bitcast <32 x i32> %2802 to <64 x i16>
  %2804 = add <64 x i16> %2803, %2801
  %2805 = shufflevector <64 x i16> %2804, <64 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t1232.us.us.us.us.us.epil = zext <16 x i16> %2805 to <16 x i32>
  %2806 = shufflevector <16 x i32> %t1232.us.us.us.us.us.epil, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2807 = call <64 x i32> @llvm.hexagon.V6.vdealvdd.128B(<32 x i32> undef, <32 x i32> %2806, i32 -4)
  %2808 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2807)
  %2809 = add nsw <32 x i32> %2808, %sum_input187312.sroa.0.18.us.us.us.us.us.unr
  %2810 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2807)
  %2811 = add nsw <32 x i32> %2809, %2810
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.epil = shufflevector <32 x i32> %2811, <32 x i32> %sum_input187312.sroa.0.18.us.us.us.us.us.unr, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  br label %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us"

"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa"
  %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa = phi <32 x i32> [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us.unr-lcssa" ], [ %sum_input187312.sroa.0.0.vecblend642.us.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124106.us.us.us.us.us.epil" ]
  %2812 = add nuw nsw i32 %"sum_input.s1.r19$x105.us.us.us.us.us", 1
  %.not354.us.us.us.us.us = icmp eq i32 %2812, %8
  br i1 %.not354.us.us.us.us.us, label %"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us", label %"for sum_input.s1.r19$x103.us.us.us.us.us"

"end for sum_input.s1.r19$x104.loopexit.split.us.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124107.loopexit.us.us.us.us.us"
  %2813 = add nuw nsw i32 %"sum_input.s1.r19$y102.us.us.us.us", 1
  %.not353.us.us.us.us = icmp eq i32 %2813, %10
  br i1 %.not353.us.us.us.us, label %"consume sum_input109.us.us", label %"for sum_input.s1.r19$y100.us.us.us.us"

"for convolved.s1.r19$y117.us.us.us":             ; preds = %"end for convolved.s1.r19$x121.loopexit.us.us.us", %"for convolved.s1.r19$y117.preheader.us.us"
  %convolved313.sroa.122.8.us.us.us = phi <32 x i32> [ %.us-phi991.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.122.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.112.8.us.us.us = phi <32 x i32> [ %.us-phi992.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.112.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.102.8.us.us.us = phi <32 x i32> [ %.us-phi993.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.102.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.92.8.us.us.us = phi <32 x i32> [ %.us-phi994.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.92.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.77.8.us.us.us = phi <32 x i32> [ %.us-phi995.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.77.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.62.8.us.us.us = phi <32 x i32> [ %.us-phi996.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.62.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.47.8.us.us.us = phi <32 x i32> [ %.us-phi997.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.47.7.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %convolved313.sroa.0.22.us.us.us = phi <32 x i32> [ %.us-phi998.us.us.us, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ %convolved313.sroa.0.21.us.us, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %"convolved.s1.r19$y119.us.us.us" = phi i32 [ %2818, %"end for convolved.s1.r19$x121.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y117.preheader.us.us" ]
  %2814 = mul nsw i32 %"convolved.s1.r19$y119.us.us.us", %dilation_y
  %2815 = add nsw i32 %2814, %2184
  %2816 = mul nsw i32 %2815, %18
  %t1106.us.us.us = add nsw i32 %2816, %2180
  %2817 = mul nsw i32 %"convolved.s1.r19$y119.us.us.us", %11
  %t1107.us.us.us = add nsw i32 %2817, %2574
  br i1 %2149, label %"for convolved.s1.r19$x120.us.us.us.us", label %"end for convolved.s1.r19$x121.loopexit.us.us.us", !prof !96

"end for convolved.s1.r19$x121.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us", %"for convolved.s1.r19$y117.us.us.us"
  %.us-phi991.us.us.us = phi <32 x i32> [ %convolved313.sroa.122.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2883, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi992.us.us.us = phi <32 x i32> [ %convolved313.sroa.112.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2877, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi993.us.us.us = phi <32 x i32> [ %convolved313.sroa.102.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2871, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi994.us.us.us = phi <32 x i32> [ %convolved313.sroa.92.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2865, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi995.us.us.us = phi <32 x i32> [ %convolved313.sroa.77.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2859, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi996.us.us.us = phi <32 x i32> [ %convolved313.sroa.62.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2853, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi997.us.us.us = phi <32 x i32> [ %convolved313.sroa.47.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2847, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %.us-phi998.us.us.us = phi <32 x i32> [ %convolved313.sroa.0.22.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ], [ %2841, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ]
  %2818 = add nuw nsw i32 %"convolved.s1.r19$y119.us.us.us", 1
  %.not350.us.us.us = icmp eq i32 %2818, %10
  br i1 %.not350.us.us.us, label %"consume convolved126.us.us", label %"for convolved.s1.r19$y117.us.us.us"

"for convolved.s1.r19$x120.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us", %"for convolved.s1.r19$y117.us.us.us"
  %convolved313.sroa.122.9.us.us.us.us = phi <32 x i32> [ %2883, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.122.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.112.9.us.us.us.us = phi <32 x i32> [ %2877, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.112.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.102.9.us.us.us.us = phi <32 x i32> [ %2871, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.102.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.92.9.us.us.us.us = phi <32 x i32> [ %2865, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.92.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.77.9.us.us.us.us = phi <32 x i32> [ %2859, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.77.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.62.9.us.us.us.us = phi <32 x i32> [ %2853, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.62.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.47.9.us.us.us.us = phi <32 x i32> [ %2847, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.47.8.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %convolved313.sroa.0.23.us.us.us.us = phi <32 x i32> [ %2841, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.22.us.us.us, %"for convolved.s1.r19$y117.us.us.us" ]
  %"convolved.s1.r19$x122.us.us.us.us" = phi i32 [ %2885, %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y117.us.us.us" ]
  %2819 = mul nsw i32 %"convolved.s1.r19$x122.us.us.us.us", %dilation_x
  %t1116.s.us.us.us.us = add nsw i32 %2819, %2596
  %t1115.s.us.us.us.us = add nsw i32 %2819, %2598
  %t1114.s.us.us.us.us = add nsw i32 %2819, %2600
  %t1113.s.us.us.us.us = add nsw i32 %2819, %2602
  %t1112.s.us.us.us.us = add nsw i32 %2819, %2604
  %t1111.s.us.us.us.us = add nsw i32 %2819, %2606
  %t1110.s.us.us.us.us = add nsw i32 %2819, %2608
  %t1108.s.us.us.us.us = add nsw i32 %2819, %2609
  %2820 = mul nsw i32 %t1108.s.us.us.us.us, %16
  %2821 = mul nsw i32 %"convolved.s1.r19$x122.us.us.us.us", %9
  %2822 = add nsw i32 %t1107.us.us.us, %2821
  %2823 = mul nsw i32 %t1110.s.us.us.us.us, %16
  %2824 = mul nsw i32 %t1111.s.us.us.us.us, %16
  %2825 = mul nsw i32 %t1112.s.us.us.us.us, %16
  %2826 = mul nsw i32 %t1113.s.us.us.us.us, %16
  %2827 = mul nsw i32 %t1114.s.us.us.us.us, %16
  %2828 = mul nsw i32 %t1115.s.us.us.us.us, %16
  %2829 = mul nsw i32 %t1116.s.us.us.us.us, %16
  br label %"for convolved.s1.r19$z.r124123.us.us.us.us"

"for convolved.s1.r19$z.r124123.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r124123.us.us.us.us", %"for convolved.s1.r19$x120.us.us.us.us"
  %convolved313.sroa.122.11.us.us.us.us = phi <32 x i32> [ %2883, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.122.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.112.11.us.us.us.us = phi <32 x i32> [ %2877, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.112.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.102.11.us.us.us.us = phi <32 x i32> [ %2871, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.102.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.92.11.us.us.us.us = phi <32 x i32> [ %2865, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.92.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.77.11.us.us.us.us = phi <32 x i32> [ %2859, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.77.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.62.11.us.us.us.us = phi <32 x i32> [ %2853, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.62.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.47.11.us.us.us.us = phi <32 x i32> [ %2847, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.47.9.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %convolved313.sroa.0.25.us.us.us.us = phi <32 x i32> [ %2841, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ %convolved313.sroa.0.23.us.us.us.us, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %"convolved.s1.r19$z.r124125.us.us.us.us" = phi i32 [ %2884, %"for convolved.s1.r19$z.r124123.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x120.us.us.us.us" ]
  %2830 = shl nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us", 2
  %2831 = add i32 %2830, %t1106.us.us.us
  %2832 = add i32 %2831, %2820
  %2833 = getelementptr inbounds i8, i8* %12, i32 %2832
  %2834 = bitcast i8* %2833 to <4 x i8>*
  %2835 = load <4 x i8>, <4 x i8>* %2834, align 4, !tbaa !108
  %2836 = shl nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us", 7
  %2837 = add nsw i32 %2822, %2836
  %2838 = getelementptr inbounds i8, i8* %4, i32 %2837
  %2839 = bitcast i8* %2838 to <128 x i8>*
  %2840 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2841 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.0.25.us.us.us.us, <128 x i8> %2840, <4 x i8> %2835, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2842 = add i32 %2831, %2823
  %2843 = getelementptr inbounds i8, i8* %12, i32 %2842
  %2844 = bitcast i8* %2843 to <4 x i8>*
  %2845 = load <4 x i8>, <4 x i8>* %2844, align 4, !tbaa !108
  %2846 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2847 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.47.11.us.us.us.us, <128 x i8> %2846, <4 x i8> %2845, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2848 = add i32 %2831, %2824
  %2849 = getelementptr inbounds i8, i8* %12, i32 %2848
  %2850 = bitcast i8* %2849 to <4 x i8>*
  %2851 = load <4 x i8>, <4 x i8>* %2850, align 4, !tbaa !108
  %2852 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2853 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.62.11.us.us.us.us, <128 x i8> %2852, <4 x i8> %2851, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2854 = add i32 %2831, %2825
  %2855 = getelementptr inbounds i8, i8* %12, i32 %2854
  %2856 = bitcast i8* %2855 to <4 x i8>*
  %2857 = load <4 x i8>, <4 x i8>* %2856, align 4, !tbaa !108
  %2858 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2859 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.77.11.us.us.us.us, <128 x i8> %2858, <4 x i8> %2857, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2860 = add i32 %2831, %2826
  %2861 = getelementptr inbounds i8, i8* %12, i32 %2860
  %2862 = bitcast i8* %2861 to <4 x i8>*
  %2863 = load <4 x i8>, <4 x i8>* %2862, align 4, !tbaa !108
  %2864 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2865 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.92.11.us.us.us.us, <128 x i8> %2864, <4 x i8> %2863, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2866 = add i32 %2831, %2827
  %2867 = getelementptr inbounds i8, i8* %12, i32 %2866
  %2868 = bitcast i8* %2867 to <4 x i8>*
  %2869 = load <4 x i8>, <4 x i8>* %2868, align 4, !tbaa !108
  %2870 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2871 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.102.11.us.us.us.us, <128 x i8> %2870, <4 x i8> %2869, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2872 = add i32 %2831, %2828
  %2873 = getelementptr inbounds i8, i8* %12, i32 %2872
  %2874 = bitcast i8* %2873 to <4 x i8>*
  %2875 = load <4 x i8>, <4 x i8>* %2874, align 4, !tbaa !108
  %2876 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2877 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.112.11.us.us.us.us, <128 x i8> %2876, <4 x i8> %2875, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2878 = add i32 %2831, %2829
  %2879 = getelementptr inbounds i8, i8* %12, i32 %2878
  %2880 = bitcast i8* %2879 to <4 x i8>*
  %2881 = load <4 x i8>, <4 x i8>* %2880, align 4, !tbaa !108
  %2882 = load <128 x i8>, <128 x i8>* %2839, align 128, !tbaa !106
  %2883 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.122.11.us.us.us.us, <128 x i8> %2882, <4 x i8> %2881, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %2884 = add nuw nsw i32 %"convolved.s1.r19$z.r124125.us.us.us.us", 1
  %.not352.us.us.us.us = icmp eq i32 %2884, %6
  br i1 %.not352.us.us.us.us, label %"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124123.us.us.us.us"

"end for convolved.s1.r19$z.r124124.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124123.us.us.us.us"
  %2885 = add nuw nsw i32 %"convolved.s1.r19$x122.us.us.us.us", 1
  %.not351.us.us.us.us = icmp eq i32 %2885, %8
  br i1 %.not351.us.us.us.us, label %"end for convolved.s1.r19$x121.loopexit.us.us.us", label %"for convolved.s1.r19$x120.us.us.us.us"

next_bb75:                                        ; preds = %next_bb22
  br i1 %100, label %then_bb127, label %next_bb128

then_bb127:                                       ; preds = %next_bb75
  %2886 = mul nsw i32 %18, %17
  %2887 = mul nsw i32 %16, %15
  %2888 = mul nsw i32 %21, %19
  %2889 = add i32 %2888, %2886
  %t1121 = add i32 %2889, %2887
  %2890 = icmp sgt i32 %20, 0
  br i1 %2890, label %"for output.s0.b.rebased129.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased129.preheader":           ; preds = %then_bb127
  %2891 = icmp sgt i32 %28, 0
  %.neg749 = mul i32 %29, %27
  %.neg750 = mul i32 %26, %24
  %.neg751 = mul i32 %30, %19
  %2892 = icmp sgt i32 %10, 0
  %2893 = icmp sgt i32 %8, 0
  %2894 = icmp sgt i32 %6, 0
  %2895 = ashr i32 %3, 7
  %2896 = icmp sgt i32 %3, 127
  %2897 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %2898 = shufflevector <32 x i32> %2897, <32 x i32> undef, <32 x i32> zeroinitializer
  %2899 = sext <32 x i32> %2898 to <32 x i64>
  %2900 = icmp sgt i32 %a497, 0
  %2901 = select i1 %2900, i32 %a497, i32 0
  %2902 = shl nuw i32 1, %2901
  %2903 = ashr i32 %2902, 1
  %2904 = zext i8 %output_zero to i16
  %2905 = insertelement <128 x i16> undef, i16 %2904, i32 0
  %2906 = shufflevector <128 x i16> %2905, <128 x i16> undef, <128 x i32> zeroinitializer
  %2907 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %2908 = shufflevector <128 x i8> %2907, <128 x i8> undef, <128 x i32> zeroinitializer
  %2909 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %2910 = shufflevector <128 x i8> %2909, <128 x i8> undef, <128 x i32> zeroinitializer
  %2911 = insertelement <1 x i32> poison, i32 %2903, i32 0
  %2912 = insertelement <1 x i32> poison, i32 %a497, i32 0
  %reass.add760 = add i32 %.neg749, %.neg750
  %reass.add761 = add i32 %reass.add760, %.neg751
  br i1 %2891, label %"for output.s0.b.rebased129.us.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased129.us.preheader":        ; preds = %"for output.s0.b.rebased129.preheader"
  %2913 = add i32 %6, -1
  %2914 = add i32 %8, -1
  %brmerge1314.demorgan = and i1 %2893, %2894
  %xtraiter1476 = and i32 %6, 7
  %2915 = icmp ult i32 %2913, 7
  %unroll_iter1481 = and i32 %6, -8
  %lcmp.mod1478.not = icmp eq i32 %xtraiter1476, 0
  %xtraiter1483 = and i32 %8, 3
  %2916 = icmp ult i32 %2914, 3
  %unroll_iter1488 = and i32 %8, -4
  %lcmp.mod1485.not = icmp eq i32 %xtraiter1483, 0
  br label %"for output.s0.b.rebased129.us"

"for output.s0.b.rebased129.us":                  ; preds = %"end for output.s0.y.rebased133.loopexit.us", %"for output.s0.b.rebased129.us.preheader"
  %sum_input314.sroa.0.14.us = phi <6 x i32> [ %sum_input314.sroa.0.26.us, %"end for output.s0.y.rebased133.loopexit.us" ], [ undef, %"for output.s0.b.rebased129.us.preheader" ]
  %output.s0.b.rebased131.us = phi i32 [ %3063, %"end for output.s0.y.rebased133.loopexit.us" ], [ 0, %"for output.s0.b.rebased129.us.preheader" ]
  %2917 = add nsw i32 %output.s0.b.rebased131.us, %19
  %2918 = mul nsw i32 %2917, %30
  %2919 = mul nsw i32 %2917, %21
  %2920 = sub i32 %2919, %t1121
  %2921 = sub i32 %2919, %2889
  %2922 = sub i32 %2918, %reass.add761
  br label %"for output.s0.y.rebased132.us"

"for output.s0.y.rebased132.us":                  ; preds = %"end for output.s0.x.xo136.us", %"for output.s0.b.rebased129.us"
  %sum_input314.sroa.0.15.us = phi <6 x i32> [ %sum_input314.sroa.0.26.us, %"end for output.s0.x.xo136.us" ], [ %sum_input314.sroa.0.14.us, %"for output.s0.b.rebased129.us" ]
  %output.s0.y.rebased134.us = phi i32 [ %3041, %"end for output.s0.x.xo136.us" ], [ 0, %"for output.s0.b.rebased129.us" ]
  %2923 = add nsw i32 %output.s0.y.rebased134.us, %27
  %2924 = mul nsw i32 %2923, %29
  %2925 = mul nsw i32 %2923, %stride_y
  %t1133.us = add i32 %2922, %2924
  br label %"for output.s0.x.xo135.us"

"for output.s0.x.xo135.us":                       ; preds = %"end for output.s0.c.co162.us", %"for output.s0.y.rebased132.us"
  %sum_input314.sroa.0.17.us = phi <6 x i32> [ %sum_input314.sroa.0.15.us, %"for output.s0.y.rebased132.us" ], [ %sum_input314.sroa.0.26.us, %"end for output.s0.c.co162.us" ]
  %output.s0.x.xo137.us = phi i32 [ 0, %"for output.s0.y.rebased132.us" ], [ %3040, %"end for output.s0.c.co162.us" ]
  br i1 %t843.not, label %"consume sum_input160.us", label %then_bb140.us

then_bb140.us:                                    ; preds = %"for output.s0.x.xo135.us"
  %sum_input314.sroa.0.0.vec.insert510.us = insertelement <6 x i32> %sum_input314.sroa.0.17.us, i32 0, i32 0
  br i1 %t844, label %then_bb143.us, label %next_bb144.us

next_bb144.us:                                    ; preds = %then_bb140.us
  br i1 %2892, label %"for sum_input.s1.r19$y151.preheader.us", label %"consume sum_input160.us", !prof !96

then_bb143.us:                                    ; preds = %then_bb140.us
  br i1 %2892, label %"for sum_input.s1.r19$y145.preheader.us", label %"consume sum_input160.us", !prof !96

"for sum_input.s1.r19$y145.us":                   ; preds = %"for sum_input.s1.r19$y145.preheader.us", %"end for sum_input.s1.r19$x149.us"
  %sum_input314.sroa.0.18.us = phi <6 x i32> [ %sum_input314.sroa.0.20.us, %"end for sum_input.s1.r19$x149.us" ], [ %sum_input314.sroa.0.0.vec.insert510.us, %"for sum_input.s1.r19$y145.preheader.us" ]
  %"sum_input.s1.r19$y147.us" = phi i32 [ %2971, %"end for sum_input.s1.r19$x149.us" ], [ 0, %"for sum_input.s1.r19$y145.preheader.us" ]
  br i1 %2893, label %"for sum_input.s1.r19$x148.preheader.us", label %"end for sum_input.s1.r19$x149.us", !prof !96

"for sum_input.s1.r19$x148.us":                   ; preds = %"for sum_input.s1.r19$x148.preheader.us", %"for sum_input.s1.r19$x148.us"
  %sum_input314.sroa.0.19.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert506.us.3, %"for sum_input.s1.r19$x148.us" ], [ %sum_input314.sroa.0.18.us, %"for sum_input.s1.r19$x148.preheader.us" ]
  %"sum_input.s1.r19$x150.us" = phi i32 [ %2961, %"for sum_input.s1.r19$x148.us" ], [ 0, %"for sum_input.s1.r19$x148.preheader.us" ]
  %niter1489 = phi i32 [ %niter1489.nsub.3, %"for sum_input.s1.r19$x148.us" ], [ %unroll_iter1488, %"for sum_input.s1.r19$x148.preheader.us" ]
  %sum_input314.sroa.0.0.vec.extract508.us = extractelement <6 x i32> %sum_input314.sroa.0.19.us, i32 0
  %2926 = mul nsw i32 %"sum_input.s1.r19$x150.us", %dilation_x
  %reass.add758.us = add i32 %3060, %2926
  %reass.mul759.us = shl i32 %reass.add758.us, 2
  %2927 = add i32 %t1136.us, %reass.mul759.us
  %2928 = getelementptr inbounds i8, i8* %12, i32 %2927
  %2929 = bitcast i8* %2928 to <4 x i8>*
  %2930 = load <4 x i8>, <4 x i8>* %2929, align 4, !tbaa !108
  %2931 = zext <4 x i8> %2930 to <4 x i32>
  %2932 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2931) #10
  %2933 = add nsw i32 %2932, %sum_input314.sroa.0.0.vec.extract508.us
  %2934 = or i32 %"sum_input.s1.r19$x150.us", 1
  %2935 = mul nsw i32 %2934, %dilation_x
  %reass.add758.us.1 = add i32 %3060, %2935
  %reass.mul759.us.1 = shl i32 %reass.add758.us.1, 2
  %2936 = add i32 %t1136.us, %reass.mul759.us.1
  %2937 = getelementptr inbounds i8, i8* %12, i32 %2936
  %2938 = bitcast i8* %2937 to <4 x i8>*
  %2939 = load <4 x i8>, <4 x i8>* %2938, align 4, !tbaa !108
  %2940 = zext <4 x i8> %2939 to <4 x i32>
  %2941 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2940) #10
  %2942 = add nsw i32 %2941, %2933
  %2943 = or i32 %"sum_input.s1.r19$x150.us", 2
  %2944 = mul nsw i32 %2943, %dilation_x
  %reass.add758.us.2 = add i32 %3060, %2944
  %reass.mul759.us.2 = shl i32 %reass.add758.us.2, 2
  %2945 = add i32 %t1136.us, %reass.mul759.us.2
  %2946 = getelementptr inbounds i8, i8* %12, i32 %2945
  %2947 = bitcast i8* %2946 to <4 x i8>*
  %2948 = load <4 x i8>, <4 x i8>* %2947, align 4, !tbaa !108
  %2949 = zext <4 x i8> %2948 to <4 x i32>
  %2950 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2949) #10
  %2951 = add nsw i32 %2950, %2942
  %sum_input314.sroa.0.0.vec.insert506.us.2 = insertelement <6 x i32> %sum_input314.sroa.0.19.us, i32 %2951, i32 0
  %2952 = or i32 %"sum_input.s1.r19$x150.us", 3
  %2953 = mul nsw i32 %2952, %dilation_x
  %reass.add758.us.3 = add i32 %3060, %2953
  %reass.mul759.us.3 = shl i32 %reass.add758.us.3, 2
  %2954 = add i32 %t1136.us, %reass.mul759.us.3
  %2955 = getelementptr inbounds i8, i8* %12, i32 %2954
  %2956 = bitcast i8* %2955 to <4 x i8>*
  %2957 = load <4 x i8>, <4 x i8>* %2956, align 4, !tbaa !108
  %2958 = zext <4 x i8> %2957 to <4 x i32>
  %2959 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2958) #10
  %2960 = add nsw i32 %2959, %2951
  %sum_input314.sroa.0.0.vec.insert506.us.3 = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert506.us.2, i32 %2960, i32 0
  %2961 = add nuw nsw i32 %"sum_input.s1.r19$x150.us", 4
  %niter1489.nsub.3 = add i32 %niter1489, -4
  %niter1489.ncmp.3 = icmp eq i32 %niter1489.nsub.3, 0
  br i1 %niter1489.ncmp.3, label %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x148.us"

"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x148.us"
  %sum_input314.sroa.0.0.vec.insert506.us.2.le = insertelement <6 x i32> %sum_input314.sroa.0.19.us, i32 %2951, i32 0
  %sum_input314.sroa.0.0.vec.insert506.us.3.le = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert506.us.2.le, i32 %2960, i32 0
  br label %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x148.preheader.us", %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit"
  %sum_input314.sroa.0.19.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x148.preheader.us" ], [ %sum_input314.sroa.0.0.vec.insert506.us.2.le, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1450.ph = phi i32 [ undef, %"for sum_input.s1.r19$x148.preheader.us" ], [ %2960, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input314.sroa.0.19.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.18.us, %"for sum_input.s1.r19$x148.preheader.us" ], [ %sum_input314.sroa.0.0.vec.insert506.us.3.le, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x150.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x148.preheader.us" ], [ %2961, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1485.not, label %"end for sum_input.s1.r19$x149.us.loopexit", label %"for sum_input.s1.r19$x148.us.epil"

"for sum_input.s1.r19$x148.us.epil":              ; preds = %"for sum_input.s1.r19$x148.us.epil", %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa"
  %sum_input314.sroa.0.19.us.epil = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert506.us.epil, %"for sum_input.s1.r19$x148.us.epil" ], [ %sum_input314.sroa.0.19.us.unr, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x150.us.epil" = phi i32 [ %2970, %"for sum_input.s1.r19$x148.us.epil" ], [ %"sum_input.s1.r19$x150.us.unr", %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ]
  %epil.iter1484 = phi i32 [ %epil.iter1484.sub, %"for sum_input.s1.r19$x148.us.epil" ], [ %xtraiter1483, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ]
  %sum_input314.sroa.0.0.vec.extract508.us.epil = extractelement <6 x i32> %sum_input314.sroa.0.19.us.epil, i32 0
  %2962 = mul nsw i32 %"sum_input.s1.r19$x150.us.epil", %dilation_x
  %reass.add758.us.epil = add i32 %3060, %2962
  %reass.mul759.us.epil = shl i32 %reass.add758.us.epil, 2
  %2963 = add i32 %t1136.us, %reass.mul759.us.epil
  %2964 = getelementptr inbounds i8, i8* %12, i32 %2963
  %2965 = bitcast i8* %2964 to <4 x i8>*
  %2966 = load <4 x i8>, <4 x i8>* %2965, align 4, !tbaa !108
  %2967 = zext <4 x i8> %2966 to <4 x i32>
  %2968 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %2967) #10
  %2969 = add nsw i32 %2968, %sum_input314.sroa.0.0.vec.extract508.us.epil
  %sum_input314.sroa.0.0.vec.insert506.us.epil = insertelement <6 x i32> %sum_input314.sroa.0.19.us.epil, i32 %2969, i32 0
  %2970 = add nuw nsw i32 %"sum_input.s1.r19$x150.us.epil", 1
  %epil.iter1484.sub = add i32 %epil.iter1484, -1
  %epil.iter1484.cmp.not = icmp eq i32 %epil.iter1484.sub, 0
  br i1 %epil.iter1484.cmp.not, label %"end for sum_input.s1.r19$x149.us.loopexit", label %"for sum_input.s1.r19$x148.us.epil", !llvm.loop !115

"end for sum_input.s1.r19$x149.us.loopexit":      ; preds = %"for sum_input.s1.r19$x148.us.epil", %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa"
  %sum_input314.sroa.0.19.us.lcssa = phi <6 x i32> [ %sum_input314.sroa.0.19.us.lcssa.ph, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ], [ %sum_input314.sroa.0.19.us.epil, %"for sum_input.s1.r19$x148.us.epil" ]
  %.lcssa1450 = phi i32 [ %.lcssa1450.ph, %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa" ], [ %2969, %"for sum_input.s1.r19$x148.us.epil" ]
  %sum_input314.sroa.0.0.vec.insert506.us.le = insertelement <6 x i32> %sum_input314.sroa.0.19.us.lcssa, i32 %.lcssa1450, i32 0
  br label %"end for sum_input.s1.r19$x149.us"

"end for sum_input.s1.r19$x149.us":               ; preds = %"end for sum_input.s1.r19$x149.us.loopexit", %"for sum_input.s1.r19$y145.us"
  %sum_input314.sroa.0.20.us = phi <6 x i32> [ %sum_input314.sroa.0.18.us, %"for sum_input.s1.r19$y145.us" ], [ %sum_input314.sroa.0.0.vec.insert506.us.le, %"end for sum_input.s1.r19$x149.us.loopexit" ]
  %2971 = add nuw nsw i32 %"sum_input.s1.r19$y147.us", 1
  %.not344.us = icmp eq i32 %2971, %10
  br i1 %.not344.us, label %"consume sum_input160.us", label %"for sum_input.s1.r19$y145.us"

"consume sum_input160.us.loopexit1238":           ; preds = %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us"
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1449, i32 0
  br label %"consume sum_input160.us"

"consume sum_input160.us":                        ; preds = %"for sum_input.s1.r19$y151.preheader.us", %"consume sum_input160.us.loopexit1238", %"end for sum_input.s1.r19$x149.us", %then_bb143.us, %next_bb144.us, %"for output.s0.x.xo135.us"
  %sum_input314.sroa.0.26.us = phi <6 x i32> [ %sum_input314.sroa.0.17.us, %"for output.s0.x.xo135.us" ], [ %sum_input314.sroa.0.0.vec.insert510.us, %then_bb143.us ], [ %sum_input314.sroa.0.0.vec.insert510.us, %next_bb144.us ], [ %sum_input314.sroa.0.0.vec.insert510.us, %"for sum_input.s1.r19$y151.preheader.us" ], [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le.le, %"consume sum_input160.us.loopexit1238" ], [ %sum_input314.sroa.0.20.us, %"end for sum_input.s1.r19$x149.us" ]
  br i1 %2896, label %"for output.s0.c.co161.preheader.us", label %"end for output.s0.c.co162.us", !prof !96

"for output.s0.c.co161.us":                       ; preds = %"for output.s0.c.co161.preheader.us", %"consume convolved177.us"
  %output.s0.c.co163.us = phi i32 [ %3039, %"consume convolved177.us" ], [ 0, %"for output.s0.c.co161.preheader.us" ]
  %2972 = shl nsw i32 %output.s0.c.co163.us, 7
  %2973 = getelementptr inbounds i32, i32* %offset_c, i32 %2972
  %2974 = bitcast i32* %2973 to <32 x i32>*
  %2975 = load <32 x i32>, <32 x i32>* %2974, align 128, !tbaa !104
  br i1 %t843.not, label %then_bb166.us, label %next_bb167.us

next_bb167.us:                                    ; preds = %"for output.s0.c.co161.us"
  %2976 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3054, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2977 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2975, <32 x i32> %2976, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2978 = getelementptr inbounds i32, i32* %2973, i32 32
  %2979 = bitcast i32* %2978 to <32 x i32>*
  %2980 = load <32 x i32>, <32 x i32>* %2979, align 128, !tbaa !104
  %2981 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3054, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2982 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2980, <32 x i32> %2981, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2983 = getelementptr inbounds i32, i32* %2973, i32 64
  %2984 = bitcast i32* %2983 to <32 x i32>*
  %2985 = load <32 x i32>, <32 x i32>* %2984, align 128, !tbaa !104
  %2986 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3054, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2987 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2985, <32 x i32> %2986, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2988 = getelementptr inbounds i32, i32* %2973, i32 96
  %2989 = bitcast i32* %2988 to <32 x i32>*
  %2990 = load <32 x i32>, <32 x i32>* %2989, align 128, !tbaa !104
  %2991 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3054, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2992 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %2990, <32 x i32> %2991, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  br label %after_bb165.us

then_bb166.us:                                    ; preds = %"for output.s0.c.co161.us"
  %2993 = getelementptr inbounds i32, i32* %2973, i32 32
  %2994 = bitcast i32* %2993 to <32 x i32>*
  %2995 = load <32 x i32>, <32 x i32>* %2994, align 128, !tbaa !104
  %2996 = getelementptr inbounds i32, i32* %2973, i32 64
  %2997 = bitcast i32* %2996 to <32 x i32>*
  %2998 = load <32 x i32>, <32 x i32>* %2997, align 128, !tbaa !104
  %2999 = getelementptr inbounds i32, i32* %2973, i32 96
  %3000 = bitcast i32* %2999 to <32 x i32>*
  %3001 = load <32 x i32>, <32 x i32>* %3000, align 128, !tbaa !104
  br label %after_bb165.us

after_bb165.us:                                   ; preds = %then_bb166.us, %next_bb167.us
  %convolved313.sroa.77.14.us = phi <32 x i32> [ %3001, %then_bb166.us ], [ %2992, %next_bb167.us ]
  %convolved313.sroa.62.14.us = phi <32 x i32> [ %2998, %then_bb166.us ], [ %2987, %next_bb167.us ]
  %convolved313.sroa.47.14.us = phi <32 x i32> [ %2995, %then_bb166.us ], [ %2982, %next_bb167.us ]
  %convolved313.sroa.0.28.us = phi <32 x i32> [ %2975, %then_bb166.us ], [ %2977, %next_bb167.us ]
  br i1 %2892, label %"for convolved.s1.r19$y168.preheader.us", label %"consume convolved177.us", !prof !96

"consume convolved177.us":                        ; preds = %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us", %"for convolved.s1.r19$y168.preheader.split.us.us", %"for convolved.s1.r19$y168.preheader.us", %after_bb165.us
  %convolved313.sroa.77.20.us = phi <32 x i32> [ %convolved313.sroa.77.14.us, %after_bb165.us ], [ %convolved313.sroa.77.14.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.77.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %3195, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %convolved313.sroa.62.20.us = phi <32 x i32> [ %convolved313.sroa.62.14.us, %after_bb165.us ], [ %convolved313.sroa.62.14.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.62.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %3189, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %convolved313.sroa.47.20.us = phi <32 x i32> [ %convolved313.sroa.47.14.us, %after_bb165.us ], [ %convolved313.sroa.47.14.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.47.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %3183, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %convolved313.sroa.0.34.us = phi <32 x i32> [ %convolved313.sroa.0.28.us, %after_bb165.us ], [ %convolved313.sroa.0.28.us, %"for convolved.s1.r19$y168.preheader.us" ], [ %convolved313.sroa.0.28.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ], [ %3176, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ]
  %3002 = sext <32 x i32> %convolved313.sroa.0.34.us to <32 x i64>
  %a465.us = mul nsw <32 x i64> %3002, %2899
  %3003 = icmp slt <32 x i64> %a465.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3004 = select <32 x i1> %3003, <32 x i64> %a465.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3005 = add nsw <32 x i64> %3004, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a464.us = ashr <32 x i64> %3005, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3006 = icmp slt <32 x i64> %a464.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a463.us = select <32 x i1> %3006, <32 x i64> %a464.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3007 = icmp sgt <32 x i64> %a463.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3008 = select <32 x i1> %3007, <32 x i64> %a463.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3009 = trunc <32 x i64> %3008 to <32 x i32>
  %3010 = sext <32 x i32> %convolved313.sroa.47.20.us to <32 x i64>
  %a469.us = mul nsw <32 x i64> %3010, %2899
  %3011 = icmp slt <32 x i64> %a469.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3012 = select <32 x i1> %3011, <32 x i64> %a469.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3013 = add nsw <32 x i64> %3012, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a468.us = ashr <32 x i64> %3013, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3014 = icmp slt <32 x i64> %a468.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a467.us = select <32 x i1> %3014, <32 x i64> %a468.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3015 = icmp sgt <32 x i64> %a467.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3016 = select <32 x i1> %3015, <32 x i64> %a467.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3017 = trunc <32 x i64> %3016 to <32 x i32>
  %3018 = sext <32 x i32> %convolved313.sroa.62.20.us to <32 x i64>
  %a473.us = mul nsw <32 x i64> %3018, %2899
  %3019 = icmp slt <32 x i64> %a473.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3020 = select <32 x i1> %3019, <32 x i64> %a473.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3021 = add nsw <32 x i64> %3020, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a472.us = ashr <32 x i64> %3021, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3022 = icmp slt <32 x i64> %a472.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a471.us = select <32 x i1> %3022, <32 x i64> %a472.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3023 = icmp sgt <32 x i64> %a471.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3024 = select <32 x i1> %3023, <32 x i64> %a471.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3025 = trunc <32 x i64> %3024 to <32 x i32>
  %3026 = sext <32 x i32> %convolved313.sroa.77.20.us to <32 x i64>
  %a477.us = mul nsw <32 x i64> %3026, %2899
  %3027 = icmp slt <32 x i64> %a477.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3028 = select <32 x i1> %3027, <32 x i64> %a477.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3029 = add nsw <32 x i64> %3028, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a476.us = ashr <32 x i64> %3029, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3030 = icmp slt <32 x i64> %a476.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a475.us = select <32 x i1> %3030, <32 x i64> %a476.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3031 = icmp sgt <32 x i64> %a475.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3032 = select <32 x i1> %3031, <32 x i64> %a475.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3033 = trunc <32 x i64> %3032 to <32 x i32>
  %3034 = call <128 x i8> @hydride.node.conv_nn_hvx_depth5.136(<32 x i32> %3009, <1 x i32> %2911, <1 x i32> %2912, <32 x i32> %3017, <1 x i32> %2911, <32 x i32> %3025, <1 x i32> %2911, <32 x i32> %3033, <1 x i32> %2911, <128 x i16> %2906, <128 x i8> %2908, <128 x i8> %2910) #12
  %3035 = shl nsw i32 %output.s0.c.co163.us, 7
  %3036 = add i32 %3058, %3035
  %3037 = getelementptr inbounds i8, i8* %22, i32 %3036
  %3038 = bitcast i8* %3037 to <128 x i8>*
  store <128 x i8> %3034, <128 x i8>* %3038, align 1, !tbaa !111
  %3039 = add nuw nsw i32 %output.s0.c.co163.us, 1
  %.not337.us = icmp eq i32 %3039, %2895
  br i1 %.not337.us, label %"end for output.s0.c.co162.us", label %"for output.s0.c.co161.us"

"end for output.s0.c.co162.us":                   ; preds = %"consume convolved177.us", %"consume sum_input160.us"
  %3040 = add nuw nsw i32 %output.s0.x.xo137.us, 1
  %.not335.us = icmp eq i32 %3040, %25
  br i1 %.not335.us, label %"end for output.s0.x.xo136.us", label %"for output.s0.x.xo135.us"

"end for output.s0.x.xo136.us":                   ; preds = %"end for output.s0.c.co162.us"
  %3041 = add nuw nsw i32 %output.s0.y.rebased134.us, 1
  %.not336.us = icmp eq i32 %3041, %28
  br i1 %.not336.us, label %"end for output.s0.y.rebased133.loopexit.us", label %"for output.s0.y.rebased132.us"

"for convolved.s1.r19$y168.preheader.us":         ; preds = %after_bb165.us
  %3042 = shl nsw i32 %output.s0.c.co163.us, 2
  %3043 = or i32 %3042, 3
  %3044 = mul nsw i32 %3043, %7
  %3045 = or i32 %3042, 2
  %3046 = mul nsw i32 %3045, %7
  %3047 = or i32 %3042, 1
  %3048 = mul nsw i32 %3047, %7
  %3049 = mul nsw i32 %output.s0.c.co163.us, %7
  br i1 %2893, label %"for convolved.s1.r19$y168.preheader.split.us.us", label %"consume convolved177.us", !prof !96

"for sum_input.s1.r19$x148.preheader.us":         ; preds = %"for sum_input.s1.r19$y145.us"
  %3050 = mul nsw i32 %"sum_input.s1.r19$y147.us", %dilation_y
  %3051 = add nsw i32 %3050, %2925
  %3052 = mul nsw i32 %3051, %18
  %t1136.us = add i32 %2921, %3052
  br i1 %2916, label %"end for sum_input.s1.r19$x149.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x148.us"

"for output.s0.c.co161.preheader.us":             ; preds = %"consume sum_input160.us"
  %sum_input314.sroa.0.0.vec.extract501.us = extractelement <6 x i32> %sum_input314.sroa.0.26.us, i32 0
  %3053 = mul nsw i32 %sum_input314.sroa.0.0.vec.extract501.us, %166
  %3054 = insertelement <1 x i32> poison, i32 %3053, i32 0
  %3055 = add nsw i32 %output.s0.x.xo137.us, %24
  %3056 = mul nsw i32 %3055, %stride_x
  %3057 = mul nsw i32 %3055, %26
  %3058 = add i32 %t1133.us, %3057
  br label %"for output.s0.c.co161.us"

"for sum_input.s1.r19$y145.preheader.us":         ; preds = %then_bb143.us
  %3059 = add nsw i32 %output.s0.x.xo137.us, %24
  %3060 = sub i32 %3059, %15
  br label %"for sum_input.s1.r19$y145.us"

"for sum_input.s1.r19$y151.preheader.us":         ; preds = %next_bb144.us
  %3061 = add nsw i32 %output.s0.x.xo137.us, %24
  %3062 = mul nsw i32 %3061, %stride_x
  br i1 %brmerge1314.demorgan, label %"for sum_input.s1.r19$y151.us.us.us", label %"consume sum_input160.us", !prof !103

"end for output.s0.y.rebased133.loopexit.us":     ; preds = %"end for output.s0.x.xo136.us"
  %3063 = add nuw nsw i32 %output.s0.b.rebased131.us, 1
  %.not334.us = icmp eq i32 %3063, %20
  br i1 %.not334.us, label %after_bb3, label %"for output.s0.b.rebased129.us"

"for sum_input.s1.r19$y151.us.us.us":             ; preds = %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us", %"for sum_input.s1.r19$y151.preheader.us"
  %sum_input314.sroa.0.21.us.us.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le, %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us" ], [ %sum_input314.sroa.0.0.vec.insert510.us, %"for sum_input.s1.r19$y151.preheader.us" ]
  %"sum_input.s1.r19$y153.us.us.us" = phi i32 [ %3152, %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y151.preheader.us" ]
  %3064 = mul nsw i32 %"sum_input.s1.r19$y153.us.us.us", %dilation_y
  %3065 = add nsw i32 %3064, %2925
  %3066 = mul nsw i32 %3065, %18
  %t1138.us.us.us = add nsw i32 %2920, %3066
  br label %"for sum_input.s1.r19$x154.us.us.us.us"

"for sum_input.s1.r19$x154.us.us.us.us":          ; preds = %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us", %"for sum_input.s1.r19$y151.us.us.us"
  %sum_input314.sroa.0.22.us.us.us.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us" ], [ %sum_input314.sroa.0.21.us.us.us, %"for sum_input.s1.r19$y151.us.us.us" ]
  %"sum_input.s1.r19$x156.us.us.us.us" = phi i32 [ %3151, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$y151.us.us.us" ]
  %3067 = mul nsw i32 %"sum_input.s1.r19$x156.us.us.us.us", %dilation_x
  %t1139.s.us.us.us.us = add nsw i32 %3067, %3062
  %3068 = mul nsw i32 %t1139.s.us.us.us.us, %16
  %3069 = add nsw i32 %t1138.us.us.us, %3068
  br i1 %2915, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124157.us.us.us.us"

"for sum_input.s1.r19$z.r124157.us.us.us.us":     ; preds = %"for sum_input.s1.r19$z.r124157.us.us.us.us", %"for sum_input.s1.r19$x154.us.us.us.us"
  %sum_input314.sroa.0.24.us.us.us.us = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7, %"for sum_input.s1.r19$z.r124157.us.us.us.us" ], [ %sum_input314.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x154.us.us.us.us" ]
  %"sum_input.s1.r19$z.r124159.us.us.us.us" = phi i32 [ %3141, %"for sum_input.s1.r19$z.r124157.us.us.us.us" ], [ 0, %"for sum_input.s1.r19$x154.us.us.us.us" ]
  %niter1482 = phi i32 [ %niter1482.nsub.7, %"for sum_input.s1.r19$z.r124157.us.us.us.us" ], [ %unroll_iter1481, %"for sum_input.s1.r19$x154.us.us.us.us" ]
  %sum_input314.sroa.0.0.vec.extract504.us.us.us.us = extractelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us, i32 0
  %3070 = shl nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3071 = add nsw i32 %3069, %3070
  %3072 = getelementptr inbounds i8, i8* %12, i32 %3071
  %3073 = bitcast i8* %3072 to <4 x i8>*
  %3074 = load <4 x i8>, <4 x i8>* %3073, align 4, !tbaa !108
  %3075 = zext <4 x i8> %3074 to <4 x i32>
  %3076 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3075) #10
  %3077 = add nsw i32 %3076, %sum_input314.sroa.0.0.vec.extract504.us.us.us.us
  %3078 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3079 = or i32 %3078, 4
  %3080 = add nsw i32 %3069, %3079
  %3081 = getelementptr inbounds i8, i8* %12, i32 %3080
  %3082 = bitcast i8* %3081 to <4 x i8>*
  %3083 = load <4 x i8>, <4 x i8>* %3082, align 4, !tbaa !108
  %3084 = zext <4 x i8> %3083 to <4 x i32>
  %3085 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3084) #10
  %3086 = add nsw i32 %3085, %3077
  %3087 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3088 = or i32 %3087, 8
  %3089 = add nsw i32 %3069, %3088
  %3090 = getelementptr inbounds i8, i8* %12, i32 %3089
  %3091 = bitcast i8* %3090 to <4 x i8>*
  %3092 = load <4 x i8>, <4 x i8>* %3091, align 4, !tbaa !108
  %3093 = zext <4 x i8> %3092 to <4 x i32>
  %3094 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3093) #10
  %3095 = add nsw i32 %3094, %3086
  %3096 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3097 = or i32 %3096, 12
  %3098 = add nsw i32 %3069, %3097
  %3099 = getelementptr inbounds i8, i8* %12, i32 %3098
  %3100 = bitcast i8* %3099 to <4 x i8>*
  %3101 = load <4 x i8>, <4 x i8>* %3100, align 4, !tbaa !108
  %3102 = zext <4 x i8> %3101 to <4 x i32>
  %3103 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3102) #10
  %3104 = add nsw i32 %3103, %3095
  %3105 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3106 = or i32 %3105, 16
  %3107 = add nsw i32 %3069, %3106
  %3108 = getelementptr inbounds i8, i8* %12, i32 %3107
  %3109 = bitcast i8* %3108 to <4 x i8>*
  %3110 = load <4 x i8>, <4 x i8>* %3109, align 4, !tbaa !108
  %3111 = zext <4 x i8> %3110 to <4 x i32>
  %3112 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3111) #10
  %3113 = add nsw i32 %3112, %3104
  %3114 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3115 = or i32 %3114, 20
  %3116 = add nsw i32 %3069, %3115
  %3117 = getelementptr inbounds i8, i8* %12, i32 %3116
  %3118 = bitcast i8* %3117 to <4 x i8>*
  %3119 = load <4 x i8>, <4 x i8>* %3118, align 4, !tbaa !108
  %3120 = zext <4 x i8> %3119 to <4 x i32>
  %3121 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3120) #10
  %3122 = add nsw i32 %3121, %3113
  %3123 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3124 = or i32 %3123, 24
  %3125 = add nsw i32 %3069, %3124
  %3126 = getelementptr inbounds i8, i8* %12, i32 %3125
  %3127 = bitcast i8* %3126 to <4 x i8>*
  %3128 = load <4 x i8>, <4 x i8>* %3127, align 4, !tbaa !108
  %3129 = zext <4 x i8> %3128 to <4 x i32>
  %3130 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3129) #10
  %3131 = add nsw i32 %3130, %3122
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6 = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us, i32 %3131, i32 0
  %3132 = shl i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 2
  %3133 = or i32 %3132, 28
  %3134 = add nsw i32 %3069, %3133
  %3135 = getelementptr inbounds i8, i8* %12, i32 %3134
  %3136 = bitcast i8* %3135 to <4 x i8>*
  %3137 = load <4 x i8>, <4 x i8>* %3136, align 4, !tbaa !108
  %3138 = zext <4 x i8> %3137 to <4 x i32>
  %3139 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3138) #10
  %3140 = add nsw i32 %3139, %3131
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7 = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6, i32 %3140, i32 0
  %3141 = add nuw nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us", 8
  %niter1482.nsub.7 = add i32 %niter1482, -8
  %niter1482.ncmp.7 = icmp eq i32 %niter1482.nsub.7, 0
  br i1 %niter1482.ncmp.7, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124157.us.us.us.us"

"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124157.us.us.us.us"
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us, i32 %3131, i32 0
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7.le = insertelement <6 x i32> %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6.le, i32 %3140, i32 0
  br label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x154.us.us.us.us"
  %sum_input314.sroa.0.24.us.us.us.us.lcssa.ph = phi <6 x i32> [ undef, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1449.ph = phi i32 [ undef, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %3140, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %sum_input314.sroa.0.24.us.us.us.us.unr = phi <6 x i32> [ %sum_input314.sroa.0.22.us.us.us.us, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124159.us.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x154.us.us.us.us" ], [ %3141, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1478.not, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil"

"for sum_input.s1.r19$z.r124157.us.us.us.us.epil": ; preds = %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa"
  %sum_input314.sroa.0.24.us.us.us.us.epil = phi <6 x i32> [ %sum_input314.sroa.0.0.vec.insert.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ], [ %sum_input314.sroa.0.24.us.us.us.us.unr, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124159.us.us.us.us.epil" = phi i32 [ %3150, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124159.us.us.us.us.unr", %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ]
  %epil.iter1477 = phi i32 [ %epil.iter1477.sub, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ], [ %xtraiter1476, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ]
  %sum_input314.sroa.0.0.vec.extract504.us.us.us.us.epil = extractelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.epil, i32 0
  %3142 = shl nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us.epil", 2
  %3143 = add nsw i32 %3069, %3142
  %3144 = getelementptr inbounds i8, i8* %12, i32 %3143
  %3145 = bitcast i8* %3144 to <4 x i8>*
  %3146 = load <4 x i8>, <4 x i8>* %3145, align 4, !tbaa !108
  %3147 = zext <4 x i8> %3146 to <4 x i32>
  %3148 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3147) #10
  %3149 = add nsw i32 %3148, %sum_input314.sroa.0.0.vec.extract504.us.us.us.us.epil
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.epil = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.epil, i32 %3149, i32 0
  %3150 = add nuw nsw i32 %"sum_input.s1.r19$z.r124159.us.us.us.us.epil", 1
  %epil.iter1477.sub = add i32 %epil.iter1477, -1
  %epil.iter1477.cmp.not = icmp eq i32 %epil.iter1477.sub, 0
  br i1 %epil.iter1477.cmp.not, label %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us", label %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil", !llvm.loop !116

"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil", %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa"
  %sum_input314.sroa.0.24.us.us.us.us.lcssa = phi <6 x i32> [ %sum_input314.sroa.0.24.us.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ], [ %sum_input314.sroa.0.24.us.us.us.us.epil, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ]
  %.lcssa1449 = phi i32 [ %.lcssa1449.ph, %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us.unr-lcssa" ], [ %3149, %"for sum_input.s1.r19$z.r124157.us.us.us.us.epil" ]
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1449, i32 0
  %3151 = add nuw nsw i32 %"sum_input.s1.r19$x156.us.us.us.us", 1
  %.not342.us.us.us.us = icmp eq i32 %3151, %8
  br i1 %.not342.us.us.us.us, label %"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us", label %"for sum_input.s1.r19$x154.us.us.us.us"

"end for sum_input.s1.r19$x155.loopexit.split.us.us.us.us": ; preds = %"end for sum_input.s1.r19$z.r124158.loopexit.us.us.us.us"
  %sum_input314.sroa.0.0.vec.insert.us.us.us.us.le.le = insertelement <6 x i32> %sum_input314.sroa.0.24.us.us.us.us.lcssa, i32 %.lcssa1449, i32 0
  %3152 = add nuw nsw i32 %"sum_input.s1.r19$y153.us.us.us", 1
  %.not341.us.us.us = icmp eq i32 %3152, %10
  br i1 %.not341.us.us.us, label %"consume sum_input160.us.loopexit1238", label %"for sum_input.s1.r19$y151.us.us.us"

"for convolved.s1.r19$y168.preheader.split.us.us": ; preds = %"for convolved.s1.r19$y168.preheader.us"
  br i1 %2894, label %"for convolved.s1.r19$y168.us.us.us", label %"consume convolved177.us", !prof !96

"for convolved.s1.r19$y168.us.us.us":             ; preds = %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us", %"for convolved.s1.r19$y168.preheader.split.us.us"
  %convolved313.sroa.77.15.us.us.us = phi <32 x i32> [ %3195, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.77.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %convolved313.sroa.62.15.us.us.us = phi <32 x i32> [ %3189, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.62.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %convolved313.sroa.47.15.us.us.us = phi <32 x i32> [ %3183, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.47.14.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %convolved313.sroa.0.29.us.us.us = phi <32 x i32> [ %3176, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.0.28.us, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %"convolved.s1.r19$y170.us.us.us" = phi i32 [ %3198, %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y168.preheader.split.us.us" ]
  %3153 = mul nsw i32 %"convolved.s1.r19$y170.us.us.us", %dilation_y
  %3154 = add nsw i32 %3153, %2925
  %3155 = mul nsw i32 %3154, %18
  %t1148.us.us.us = add nsw i32 %2920, %3155
  %3156 = mul nsw i32 %"convolved.s1.r19$y170.us.us.us", %11
  br label %"for convolved.s1.r19$x171.us.us.us.us"

"for convolved.s1.r19$x171.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us", %"for convolved.s1.r19$y168.us.us.us"
  %convolved313.sroa.77.16.us.us.us.us = phi <32 x i32> [ %3195, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.77.15.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %convolved313.sroa.62.16.us.us.us.us = phi <32 x i32> [ %3189, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.62.15.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %convolved313.sroa.47.16.us.us.us.us = phi <32 x i32> [ %3183, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.47.15.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %convolved313.sroa.0.30.us.us.us.us = phi <32 x i32> [ %3176, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.29.us.us.us, %"for convolved.s1.r19$y168.us.us.us" ]
  %"convolved.s1.r19$x173.us.us.us.us" = phi i32 [ %3197, %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y168.us.us.us" ]
  %3157 = mul nsw i32 %"convolved.s1.r19$x173.us.us.us.us", %dilation_x
  %t1154.s.us.us.us.us = add nsw i32 %3157, %3056
  %3158 = mul nsw i32 %"convolved.s1.r19$x173.us.us.us.us", %9
  %t1155.us.us.us.us = add nsw i32 %3158, %3156
  %3159 = mul nsw i32 %t1154.s.us.us.us.us, %16
  %3160 = add nsw i32 %t1148.us.us.us, %3159
  %3161 = add i32 %t1155.us.us.us.us, %3048
  %3162 = add i32 %t1155.us.us.us.us, %3046
  %3163 = add i32 %t1155.us.us.us.us, %3044
  br label %"for convolved.s1.r19$z.r124174.us.us.us.us"

"for convolved.s1.r19$z.r124174.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r124174.us.us.us.us", %"for convolved.s1.r19$x171.us.us.us.us"
  %convolved313.sroa.77.18.us.us.us.us = phi <32 x i32> [ %3195, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.77.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %convolved313.sroa.62.18.us.us.us.us = phi <32 x i32> [ %3189, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.62.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %convolved313.sroa.47.18.us.us.us.us = phi <32 x i32> [ %3183, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.47.16.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %convolved313.sroa.0.32.us.us.us.us = phi <32 x i32> [ %3176, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ %convolved313.sroa.0.30.us.us.us.us, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %"convolved.s1.r19$z.r124176.us.us.us.us" = phi i32 [ %3196, %"for convolved.s1.r19$z.r124174.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x171.us.us.us.us" ]
  %3164 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 2
  %3165 = add nsw i32 %3160, %3164
  %3166 = getelementptr inbounds i8, i8* %12, i32 %3165
  %3167 = bitcast i8* %3166 to <4 x i8>*
  %3168 = load <4 x i8>, <4 x i8>* %3167, align 4, !tbaa !108
  %3169 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 5
  %3170 = add nsw i32 %3169, %3049
  %3171 = shl nsw i32 %3170, 2
  %3172 = add nsw i32 %t1155.us.us.us.us, %3171
  %3173 = getelementptr inbounds i8, i8* %4, i32 %3172
  %3174 = bitcast i8* %3173 to <128 x i8>*
  %3175 = load <128 x i8>, <128 x i8>* %3174, align 128, !tbaa !106
  %3176 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.0.32.us.us.us.us, <128 x i8> %3175, <4 x i8> %3168, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %3177 = load <4 x i8>, <4 x i8>* %3167, align 4, !tbaa !108
  %3178 = shl nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 7
  %3179 = add i32 %3161, %3178
  %3180 = getelementptr inbounds i8, i8* %4, i32 %3179
  %3181 = bitcast i8* %3180 to <128 x i8>*
  %3182 = load <128 x i8>, <128 x i8>* %3181, align 128, !tbaa !106
  %3183 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.47.18.us.us.us.us, <128 x i8> %3182, <4 x i8> %3177, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %3184 = load <4 x i8>, <4 x i8>* %3167, align 4, !tbaa !108
  %3185 = add i32 %3162, %3178
  %3186 = getelementptr inbounds i8, i8* %4, i32 %3185
  %3187 = bitcast i8* %3186 to <128 x i8>*
  %3188 = load <128 x i8>, <128 x i8>* %3187, align 128, !tbaa !106
  %3189 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.62.18.us.us.us.us, <128 x i8> %3188, <4 x i8> %3184, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %3190 = load <4 x i8>, <4 x i8>* %3167, align 4, !tbaa !108
  %3191 = add i32 %3163, %3178
  %3192 = getelementptr inbounds i8, i8* %4, i32 %3191
  %3193 = bitcast i8* %3192 to <128 x i8>*
  %3194 = load <128 x i8>, <128 x i8>* %3193, align 128, !tbaa !106
  %3195 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.77.18.us.us.us.us, <128 x i8> %3194, <4 x i8> %3190, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %3196 = add nuw nsw i32 %"convolved.s1.r19$z.r124176.us.us.us.us", 1
  %.not340.us.us.us.us = icmp eq i32 %3196, %6
  br i1 %.not340.us.us.us.us, label %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124174.us.us.us.us"

"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124174.us.us.us.us"
  %3197 = add nuw nsw i32 %"convolved.s1.r19$x173.us.us.us.us", 1
  %.not339.us.us.us.us = icmp eq i32 %3197, %8
  br i1 %.not339.us.us.us.us, label %"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x171.us.us.us.us"

"end for convolved.s1.r19$x172.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124175.loopexit.us.us.us.us"
  %3198 = add nuw nsw i32 %"convolved.s1.r19$y170.us.us.us", 1
  %.not338.us.us.us = icmp eq i32 %3198, %10
  br i1 %.not338.us.us.us, label %"consume convolved177.us", label %"for convolved.s1.r19$y168.us.us.us"

next_bb128:                                       ; preds = %next_bb75
  %a479 = ashr i32 %3, 5
  %3199 = icmp sgt i32 %3, 31
  %3200 = select i1 %3199, i32 %a479, i32 0
  %t1167 = sub nsw i32 %121, %3200
  %3201 = mul nsw i32 %18, %17
  %3202 = mul nsw i32 %16, %15
  %3203 = mul nsw i32 %21, %19
  %3204 = add i32 %3203, %3201
  %t1163 = add i32 %3204, %3202
  %3205 = icmp sgt i32 %20, 0
  br i1 %3205, label %"for output.s0.b.rebased178.preheader", label %after_bb3, !prof !96

"for output.s0.b.rebased178.preheader":           ; preds = %next_bb128
  %3206 = icmp sgt i32 %28, 0
  %.neg = mul i32 %29, %27
  %.neg739 = mul i32 %26, %24
  %.neg740 = mul i32 %30, %19
  %reass.add = add i32 %.neg, %.neg739
  %reass.add742 = add i32 %reass.add, %.neg740
  %3207 = icmp sgt i32 %10, 0
  %3208 = icmp sgt i32 %8, 0
  %3209 = icmp sgt i32 %6, 0
  %3210 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %3211 = shufflevector <32 x i32> %3210, <32 x i32> undef, <32 x i32> zeroinitializer
  %3212 = sext <32 x i32> %3211 to <32 x i64>
  %3213 = icmp sgt i32 %a497, 0
  %3214 = select i1 %3213, i32 %a497, i32 0
  %3215 = shl nuw i32 1, %3214
  %3216 = ashr i32 %3215, 1
  %3217 = insertelement <1 x i32> poison, i32 %3216, i32 0
  %3218 = insertelement <1 x i32> poison, i32 %a497, i32 0
  %3219 = zext i8 %output_zero to i16
  %3220 = insertelement <32 x i16> undef, i16 %3219, i32 0
  %3221 = shufflevector <32 x i16> %3220, <32 x i16> undef, <64 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3222 = bitcast <64 x i16> %3221 to <32 x i32>
  %3223 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %3224 = shufflevector <32 x i8> %3223, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3225 = bitcast <128 x i8> %3224 to <32 x i32>
  %3226 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %3227 = shufflevector <32 x i8> %3226, <32 x i8> undef, <128 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3228 = bitcast <128 x i8> %3227 to <32 x i32>
  %3229 = icmp sgt i32 %t1167, 0
  %3230 = add i32 %6, -1
  %3231 = add i32 %8, -1
  %xtraiter1462 = and i32 %6, 7
  %3232 = icmp ult i32 %3230, 7
  %unroll_iter1467 = and i32 %6, -8
  %lcmp.mod1464.not = icmp eq i32 %xtraiter1462, 0
  %xtraiter1469 = and i32 %8, 3
  %3233 = icmp ult i32 %3231, 3
  %unroll_iter1474 = and i32 %8, -4
  %lcmp.mod1471.not = icmp eq i32 %xtraiter1469, 0
  %brmerge1319.demorgan = and i1 %3208, %3209
  %or.cond1393 = and i1 %3207, %brmerge1319.demorgan
  %brmerge1322.demorgan = and i1 %3208, %3209
  %or.cond1392 = and i1 %3207, %brmerge1322.demorgan
  br label %"for output.s0.b.rebased178"

"for output.s0.b.rebased178":                     ; preds = %"end for output.s0.y.rebased182", %"for output.s0.b.rebased178.preheader"
  %sum_input187312.sroa.0.21 = phi <32 x i32> [ %sum_input187312.sroa.0.23, %"end for output.s0.y.rebased182" ], [ undef, %"for output.s0.b.rebased178.preheader" ]
  %convolved313.sroa.0.35 = phi <32 x i32> [ %convolved313.sroa.0.37, %"end for output.s0.y.rebased182" ], [ undef, %"for output.s0.b.rebased178.preheader" ]
  %output.s0.b.rebased180 = phi i32 [ %3550, %"end for output.s0.y.rebased182" ], [ 0, %"for output.s0.b.rebased178.preheader" ]
  br i1 %3206, label %"for output.s0.y.rebased181.preheader", label %"end for output.s0.y.rebased182", !prof !96

"for output.s0.y.rebased181.preheader":           ; preds = %"for output.s0.b.rebased178"
  %3234 = add nsw i32 %output.s0.b.rebased180, %19
  %3235 = mul nsw i32 %3234, %30
  %3236 = sub i32 %3235, %reass.add742
  %3237 = mul nsw i32 %3234, %21
  %3238 = sub i32 %3237, %t1163
  %3239 = sub i32 %3237, %3204
  br i1 %99, label %"for output.s0.y.rebased181.us", label %"end for output.s0.y.rebased182", !prof !96

"for output.s0.y.rebased181.us":                  ; preds = %"end for output.s0.x.xo185.loopexit.us", %"for output.s0.y.rebased181.preheader"
  %sum_input187312.sroa.0.22.us = phi <32 x i32> [ %sum_input187312.sroa.0.34.us, %"end for output.s0.x.xo185.loopexit.us" ], [ %sum_input187312.sroa.0.21, %"for output.s0.y.rebased181.preheader" ]
  %convolved313.sroa.0.36.us = phi <32 x i32> [ %convolved313.sroa.0.50.us, %"end for output.s0.x.xo185.loopexit.us" ], [ %convolved313.sroa.0.35, %"for output.s0.y.rebased181.preheader" ]
  %output.s0.y.rebased183.us = phi i32 [ %3414, %"end for output.s0.x.xo185.loopexit.us" ], [ 0, %"for output.s0.y.rebased181.preheader" ]
  %3240 = add nsw i32 %output.s0.y.rebased183.us, %27
  %3241 = mul nsw i32 %3240, %29
  %t1180.us = add i32 %3236, %3241
  %3242 = mul nsw i32 %3240, %stride_y
  br label %"for output.s0.x.xo184.us"

"for output.s0.x.xo184.us":                       ; preds = %"end for output.s0.c.co.rebased.us", %"for output.s0.y.rebased181.us"
  %sum_input187312.sroa.0.24.us = phi <32 x i32> [ %sum_input187312.sroa.0.34.us, %"end for output.s0.c.co.rebased.us" ], [ %sum_input187312.sroa.0.22.us, %"for output.s0.y.rebased181.us" ]
  %convolved313.sroa.0.38.us = phi <32 x i32> [ %convolved313.sroa.0.50.us, %"end for output.s0.c.co.rebased.us" ], [ %convolved313.sroa.0.36.us, %"for output.s0.y.rebased181.us" ]
  %output.s0.x.xo186.us = phi i32 [ %3394, %"end for output.s0.c.co.rebased.us" ], [ 0, %"for output.s0.y.rebased181.us" ]
  br i1 %t843.not, label %"consume sum_input210.us", label %then_bb190.us

then_bb190.us:                                    ; preds = %"for output.s0.x.xo184.us"
  %sum_input187312.sroa.0.0.vec.insert655.us = insertelement <32 x i32> %sum_input187312.sroa.0.24.us, i32 0, i32 0
  br i1 %t844, label %then_bb193.us, label %next_bb194.us

next_bb194.us:                                    ; preds = %then_bb190.us
  br i1 %3207, label %"for sum_input.s1.r19$y201.preheader.us", label %"consume sum_input210.us", !prof !96

then_bb193.us:                                    ; preds = %then_bb190.us
  br i1 %3207, label %"for sum_input.s1.r19$y195.preheader.us", label %"consume sum_input210.us", !prof !96

"for sum_input.s1.r19$y195.us":                   ; preds = %"for sum_input.s1.r19$y195.preheader.us", %"end for sum_input.s1.r19$x199.us"
  %sum_input187312.sroa.0.26.us = phi <32 x i32> [ %sum_input187312.sroa.0.28.us, %"end for sum_input.s1.r19$x199.us" ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %"for sum_input.s1.r19$y195.preheader.us" ]
  %"sum_input.s1.r19$y197.us" = phi i32 [ %3288, %"end for sum_input.s1.r19$x199.us" ], [ 0, %"for sum_input.s1.r19$y195.preheader.us" ]
  br i1 %3208, label %"for sum_input.s1.r19$x198.preheader.us", label %"end for sum_input.s1.r19$x199.us", !prof !96

"for sum_input.s1.r19$x198.us":                   ; preds = %"for sum_input.s1.r19$x198.preheader.us", %"for sum_input.s1.r19$x198.us"
  %sum_input187312.sroa.0.27.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert651.us.3, %"for sum_input.s1.r19$x198.us" ], [ %sum_input187312.sroa.0.26.us, %"for sum_input.s1.r19$x198.preheader.us" ]
  %"sum_input.s1.r19$x200.us" = phi i32 [ %3278, %"for sum_input.s1.r19$x198.us" ], [ 0, %"for sum_input.s1.r19$x198.preheader.us" ]
  %niter1475 = phi i32 [ %niter1475.nsub.3, %"for sum_input.s1.r19$x198.us" ], [ %unroll_iter1474, %"for sum_input.s1.r19$x198.preheader.us" ]
  %sum_input187312.sroa.0.0.vec.extract653.us = extractelement <32 x i32> %sum_input187312.sroa.0.27.us, i32 0
  %3243 = mul nsw i32 %"sum_input.s1.r19$x200.us", %dilation_x
  %reass.add747.us = add i32 %3411, %3243
  %reass.mul748.us = shl i32 %reass.add747.us, 2
  %3244 = add i32 %t1183.us, %reass.mul748.us
  %3245 = getelementptr inbounds i8, i8* %12, i32 %3244
  %3246 = bitcast i8* %3245 to <4 x i8>*
  %3247 = load <4 x i8>, <4 x i8>* %3246, align 4, !tbaa !108
  %3248 = zext <4 x i8> %3247 to <4 x i32>
  %3249 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3248) #10
  %3250 = add nsw i32 %3249, %sum_input187312.sroa.0.0.vec.extract653.us
  %3251 = or i32 %"sum_input.s1.r19$x200.us", 1
  %3252 = mul nsw i32 %3251, %dilation_x
  %reass.add747.us.1 = add i32 %3411, %3252
  %reass.mul748.us.1 = shl i32 %reass.add747.us.1, 2
  %3253 = add i32 %t1183.us, %reass.mul748.us.1
  %3254 = getelementptr inbounds i8, i8* %12, i32 %3253
  %3255 = bitcast i8* %3254 to <4 x i8>*
  %3256 = load <4 x i8>, <4 x i8>* %3255, align 4, !tbaa !108
  %3257 = zext <4 x i8> %3256 to <4 x i32>
  %3258 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3257) #10
  %3259 = add nsw i32 %3258, %3250
  %3260 = or i32 %"sum_input.s1.r19$x200.us", 2
  %3261 = mul nsw i32 %3260, %dilation_x
  %reass.add747.us.2 = add i32 %3411, %3261
  %reass.mul748.us.2 = shl i32 %reass.add747.us.2, 2
  %3262 = add i32 %t1183.us, %reass.mul748.us.2
  %3263 = getelementptr inbounds i8, i8* %12, i32 %3262
  %3264 = bitcast i8* %3263 to <4 x i8>*
  %3265 = load <4 x i8>, <4 x i8>* %3264, align 4, !tbaa !108
  %3266 = zext <4 x i8> %3265 to <4 x i32>
  %3267 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3266) #10
  %3268 = add nsw i32 %3267, %3259
  %sum_input187312.sroa.0.0.vec.insert651.us.2 = insertelement <32 x i32> %sum_input187312.sroa.0.27.us, i32 %3268, i32 0
  %3269 = or i32 %"sum_input.s1.r19$x200.us", 3
  %3270 = mul nsw i32 %3269, %dilation_x
  %reass.add747.us.3 = add i32 %3411, %3270
  %reass.mul748.us.3 = shl i32 %reass.add747.us.3, 2
  %3271 = add i32 %t1183.us, %reass.mul748.us.3
  %3272 = getelementptr inbounds i8, i8* %12, i32 %3271
  %3273 = bitcast i8* %3272 to <4 x i8>*
  %3274 = load <4 x i8>, <4 x i8>* %3273, align 4, !tbaa !108
  %3275 = zext <4 x i8> %3274 to <4 x i32>
  %3276 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3275) #10
  %3277 = add nsw i32 %3276, %3268
  %sum_input187312.sroa.0.0.vec.insert651.us.3 = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert651.us.2, i32 %3277, i32 0
  %3278 = add nuw nsw i32 %"sum_input.s1.r19$x200.us", 4
  %niter1475.nsub.3 = add i32 %niter1475, -4
  %niter1475.ncmp.3 = icmp eq i32 %niter1475.nsub.3, 0
  br i1 %niter1475.ncmp.3, label %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit", label %"for sum_input.s1.r19$x198.us"

"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$x198.us"
  %sum_input187312.sroa.0.0.vec.insert651.us.2.le = insertelement <32 x i32> %sum_input187312.sroa.0.27.us, i32 %3268, i32 0
  %sum_input187312.sroa.0.0.vec.insert651.us.3.le = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert651.us.2.le, i32 %3277, i32 0
  br label %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa"

"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa": ; preds = %"for sum_input.s1.r19$x198.preheader.us", %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit"
  %sum_input187312.sroa.0.27.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x198.preheader.us" ], [ %sum_input187312.sroa.0.0.vec.insert651.us.2.le, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  %.lcssa1458.ph = phi i32 [ undef, %"for sum_input.s1.r19$x198.preheader.us" ], [ %3277, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  %sum_input187312.sroa.0.27.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.26.us, %"for sum_input.s1.r19$x198.preheader.us" ], [ %sum_input187312.sroa.0.0.vec.insert651.us.3.le, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$x200.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x198.preheader.us" ], [ %3278, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1471.not, label %"end for sum_input.s1.r19$x199.us.loopexit", label %"for sum_input.s1.r19$x198.us.epil"

"for sum_input.s1.r19$x198.us.epil":              ; preds = %"for sum_input.s1.r19$x198.us.epil", %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa"
  %sum_input187312.sroa.0.27.us.epil = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert651.us.epil, %"for sum_input.s1.r19$x198.us.epil" ], [ %sum_input187312.sroa.0.27.us.unr, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ]
  %"sum_input.s1.r19$x200.us.epil" = phi i32 [ %3287, %"for sum_input.s1.r19$x198.us.epil" ], [ %"sum_input.s1.r19$x200.us.unr", %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ]
  %epil.iter1470 = phi i32 [ %epil.iter1470.sub, %"for sum_input.s1.r19$x198.us.epil" ], [ %xtraiter1469, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ]
  %sum_input187312.sroa.0.0.vec.extract653.us.epil = extractelement <32 x i32> %sum_input187312.sroa.0.27.us.epil, i32 0
  %3279 = mul nsw i32 %"sum_input.s1.r19$x200.us.epil", %dilation_x
  %reass.add747.us.epil = add i32 %3411, %3279
  %reass.mul748.us.epil = shl i32 %reass.add747.us.epil, 2
  %3280 = add i32 %t1183.us, %reass.mul748.us.epil
  %3281 = getelementptr inbounds i8, i8* %12, i32 %3280
  %3282 = bitcast i8* %3281 to <4 x i8>*
  %3283 = load <4 x i8>, <4 x i8>* %3282, align 4, !tbaa !108
  %3284 = zext <4 x i8> %3283 to <4 x i32>
  %3285 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3284) #10
  %3286 = add nsw i32 %3285, %sum_input187312.sroa.0.0.vec.extract653.us.epil
  %sum_input187312.sroa.0.0.vec.insert651.us.epil = insertelement <32 x i32> %sum_input187312.sroa.0.27.us.epil, i32 %3286, i32 0
  %3287 = add nuw nsw i32 %"sum_input.s1.r19$x200.us.epil", 1
  %epil.iter1470.sub = add i32 %epil.iter1470, -1
  %epil.iter1470.cmp.not = icmp eq i32 %epil.iter1470.sub, 0
  br i1 %epil.iter1470.cmp.not, label %"end for sum_input.s1.r19$x199.us.loopexit", label %"for sum_input.s1.r19$x198.us.epil", !llvm.loop !117

"end for sum_input.s1.r19$x199.us.loopexit":      ; preds = %"for sum_input.s1.r19$x198.us.epil", %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa"
  %sum_input187312.sroa.0.27.us.lcssa = phi <32 x i32> [ %sum_input187312.sroa.0.27.us.lcssa.ph, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ], [ %sum_input187312.sroa.0.27.us.epil, %"for sum_input.s1.r19$x198.us.epil" ]
  %.lcssa1458 = phi i32 [ %.lcssa1458.ph, %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa" ], [ %3286, %"for sum_input.s1.r19$x198.us.epil" ]
  %sum_input187312.sroa.0.0.vec.insert651.us.le = insertelement <32 x i32> %sum_input187312.sroa.0.27.us.lcssa, i32 %.lcssa1458, i32 0
  br label %"end for sum_input.s1.r19$x199.us"

"end for sum_input.s1.r19$x199.us":               ; preds = %"end for sum_input.s1.r19$x199.us.loopexit", %"for sum_input.s1.r19$y195.us"
  %sum_input187312.sroa.0.28.us = phi <32 x i32> [ %sum_input187312.sroa.0.26.us, %"for sum_input.s1.r19$y195.us" ], [ %sum_input187312.sroa.0.0.vec.insert651.us.le, %"end for sum_input.s1.r19$x199.us.loopexit" ]
  %3288 = add nuw nsw i32 %"sum_input.s1.r19$y197.us", 1
  %.not332.us = icmp eq i32 %3288, %10
  br i1 %.not332.us, label %"consume sum_input210.us", label %"for sum_input.s1.r19$y195.us"

"consume sum_input210.us":                        ; preds = %"end for sum_input.s1.r19$x205.loopexit.us.us", %"for sum_input.s1.r19$y201.preheader.us", %"end for sum_input.s1.r19$x199.us", %then_bb193.us, %next_bb194.us, %"for output.s0.x.xo184.us"
  %sum_input187312.sroa.0.34.us = phi <32 x i32> [ %sum_input187312.sroa.0.24.us, %"for output.s0.x.xo184.us" ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %then_bb193.us ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %next_bb194.us ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %"for sum_input.s1.r19$y201.preheader.us" ], [ %sum_input187312.sroa.0.28.us, %"end for sum_input.s1.r19$x199.us" ], [ %.us-phi.us.us, %"end for sum_input.s1.r19$x205.loopexit.us.us" ]
  br i1 %3199, label %"for output.s0.c.co211.preheader.us", label %"end for output.s0.c.co212.us", !prof !96

"for output.s0.c.co211.us":                       ; preds = %"for output.s0.c.co211.preheader.us", %"consume convolved230.us"
  %convolved313.sroa.0.40.us = phi <32 x i32> [ %convolved313.sroa.0.48.us, %"consume convolved230.us" ], [ %convolved313.sroa.0.38.us, %"for output.s0.c.co211.preheader.us" ]
  %output.s0.c.co213.us = phi i32 [ %3329, %"consume convolved230.us" ], [ 0, %"for output.s0.c.co211.preheader.us" ]
  %3289 = shl nsw i32 %output.s0.c.co213.us, 5
  %3290 = icmp slt i32 %3289, %3
  br i1 %3290, label %then_bb216.us, label %"consume convolved230.us"

then_bb216.us:                                    ; preds = %"for output.s0.c.co211.us"
  %3291 = getelementptr inbounds i32, i32* %offset_c, i32 %3289
  %3292 = bitcast i32* %3291 to <32 x i32>*
  %3293 = load <32 x i32>, <32 x i32>* %3292, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb218.us, label %next_bb220.us

next_bb220.us:                                    ; preds = %then_bb216.us
  %3294 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3405, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %3295 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %3293, <32 x i32> %3294, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  br label %after_bb218.us

after_bb218.us:                                   ; preds = %next_bb220.us, %then_bb216.us
  %convolved313.sroa.0.42.us = phi <32 x i32> [ %3295, %next_bb220.us ], [ %3293, %then_bb216.us ]
  %3296 = mul nsw i32 %output.s0.c.co213.us, %7
  br i1 %or.cond1393, label %"for convolved.s1.r19$y221.us.us.us", label %"consume convolved230.us", !prof !103

"consume convolved230.us":                        ; preds = %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us", %after_bb218.us, %"for output.s0.c.co211.us"
  %convolved313.sroa.0.48.us = phi <32 x i32> [ %convolved313.sroa.0.42.us, %after_bb218.us ], [ %convolved313.sroa.0.40.us, %"for output.s0.c.co211.us" ], [ %3523, %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us" ]
  %3297 = sext <32 x i32> %convolved313.sroa.0.48.us to <32 x i64>
  %a483.us = mul nsw <32 x i64> %3297, %3212
  %3298 = icmp slt <32 x i64> %a483.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3299 = select <32 x i1> %3298, <32 x i64> %a483.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3300 = add nsw <32 x i64> %3299, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a482.us = ashr <32 x i64> %3300, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3301 = icmp slt <32 x i64> %a482.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a481.us = select <32 x i1> %3301, <32 x i64> %a482.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3302 = icmp sgt <32 x i64> %a481.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3303 = select <32 x i1> %3302, <32 x i64> %a481.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3304 = trunc <32 x i64> %3303 to <32 x i32>
  %3305 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3218, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %3306 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3217, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %3307 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %3304, <32 x i32> %3306, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3308 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3305, <1 x i32> zeroinitializer, <32 x i32> %3307, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3309 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3308, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3310 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %3309, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3311 = trunc <32 x i32> %3310 to <32 x i16>
  %3312 = shufflevector <32 x i16> %3311, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3313 = bitcast <64 x i16> %3312 to <32 x i32>
  %3314 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3313, <32 x i32> %3222) #12
  %3315 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3314, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %3316 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3315, <32 x i32> zeroinitializer) #12
  %3317 = bitcast <32 x i32> %3316 to <64 x i16>
  %3318 = shufflevector <64 x i16> %3317, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3319 = trunc <32 x i16> %3318 to <32 x i8>
  %3320 = shufflevector <32 x i8> %3319, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3321 = bitcast <128 x i8> %3320 to <32 x i32>
  %3322 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3321, <32 x i32> %3225) #12
  %3323 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3322, <32 x i32> %3228) #12
  %3324 = bitcast <32 x i32> %3323 to <128 x i8>
  %3325 = shufflevector <128 x i8> %3324, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3326 = add nsw i32 %3409, %3289
  %3327 = getelementptr inbounds i8, i8* %22, i32 %3326
  %3328 = bitcast i8* %3327 to <32 x i8>*
  store <32 x i8> %3325, <32 x i8>* %3328, align 1, !tbaa !111
  %3329 = add nuw nsw i32 %output.s0.c.co213.us, 1
  %.not325.us = icmp eq i32 %3329, %3200
  br i1 %.not325.us, label %"end for output.s0.c.co212.us", label %"for output.s0.c.co211.us"

"end for output.s0.c.co212.us":                   ; preds = %"consume convolved230.us", %"consume sum_input210.us"
  %convolved313.sroa.0.41.us = phi <32 x i32> [ %convolved313.sroa.0.38.us, %"consume sum_input210.us" ], [ %convolved313.sroa.0.48.us, %"consume convolved230.us" ]
  br i1 %3229, label %"for output.s0.c.co.rebased.preheader.us", label %"end for output.s0.c.co.rebased.us", !prof !96

"for output.s0.c.co.rebased.us":                  ; preds = %"for output.s0.c.co.rebased.preheader.us", %after_bb254.us
  %convolved313.sroa.0.49.us = phi <32 x i32> [ %convolved313.sroa.0.57.us, %after_bb254.us ], [ %convolved313.sroa.0.41.us, %"for output.s0.c.co.rebased.preheader.us" ]
  %output.s0.c.co.rebased.us = phi i32 [ %3393, %after_bb254.us ], [ 0, %"for output.s0.c.co.rebased.preheader.us" ]
  %3330 = add nsw i32 %output.s0.c.co.rebased.us, %3200
  %3331 = icmp sgt i32 %3330, %a0
  %3332 = shl nsw i32 %3330, 5
  %3333 = icmp sge i32 %3332, %3
  %.not1315 = or i1 %3331, %3333
  %3334 = add nsw i32 %output.s0.c.co.rebased.us, %a479
  %.not1232 = icmp sgt i32 %3334, %a0
  %or.cond1316 = or i1 %.not1315, %.not1232
  br i1 %or.cond1316, label %"consume convolved253.us", label %then_bb236.us

then_bb236.us:                                    ; preds = %"for output.s0.c.co.rebased.us"
  %3335 = shl nsw i32 %3334, 5
  %3336 = getelementptr inbounds i32, i32* %offset_c, i32 %3335
  %3337 = bitcast i32* %3336 to <32 x i32>*
  %3338 = load <32 x i32>, <32 x i32>* %3337, align 128, !tbaa !104
  br i1 %t843.not, label %after_bb235.us, label %next_bb240.us

next_bb240.us:                                    ; preds = %then_bb236.us
  %3339 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3399, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %3340 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %3338, <32 x i32> %3339, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  br label %after_bb235.us

after_bb235.us:                                   ; preds = %next_bb240.us, %then_bb236.us
  %convolved313.sroa.0.51.us = phi <32 x i32> [ %3340, %next_bb240.us ], [ %3338, %then_bb236.us ]
  %3341 = mul nsw i32 %3334, %7
  br i1 %or.cond1392, label %"for convolved.s1.r19$y244.us.us.us", label %"consume convolved253.us", !prof !118

"consume convolved253.us":                        ; preds = %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us", %after_bb235.us, %"for output.s0.c.co.rebased.us"
  %convolved313.sroa.0.57.us = phi <32 x i32> [ %convolved313.sroa.0.51.us, %after_bb235.us ], [ %convolved313.sroa.0.49.us, %"for output.s0.c.co.rebased.us" ], [ %3546, %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us" ]
  %3342 = add nsw i32 %3332, 32
  %.not319.us = icmp sgt i32 %3342, %3
  br i1 %.not319.us, label %next_bb256.us, label %then_bb255.us

then_bb255.us:                                    ; preds = %"consume convolved253.us"
  %3343 = sext <32 x i32> %convolved313.sroa.0.57.us to <32 x i64>
  %a490.us = mul nsw <32 x i64> %3343, %3212
  %3344 = icmp slt <32 x i64> %a490.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3345 = select <32 x i1> %3344, <32 x i64> %a490.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3346 = add nsw <32 x i64> %3345, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a489.us = ashr <32 x i64> %3346, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3347 = icmp slt <32 x i64> %a489.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a488.us = select <32 x i1> %3347, <32 x i64> %a489.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3348 = icmp sgt <32 x i64> %a488.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3349 = select <32 x i1> %3348, <32 x i64> %a488.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3350 = trunc <32 x i64> %3349 to <32 x i32>
  %3351 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3218, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %3352 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3217, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %3353 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %3350, <32 x i32> %3352, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3354 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3351, <1 x i32> zeroinitializer, <32 x i32> %3353, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3355 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3354, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3356 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %3355, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3357 = trunc <32 x i32> %3356 to <32 x i16>
  %3358 = shufflevector <32 x i16> %3357, <32 x i16> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3359 = bitcast <64 x i16> %3358 to <32 x i32>
  %3360 = call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %3359, <32 x i32> %3222) #12
  %3361 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3360, <32 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>) #12
  %3362 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3361, <32 x i32> zeroinitializer) #12
  %3363 = bitcast <32 x i32> %3362 to <64 x i16>
  %3364 = shufflevector <64 x i16> %3363, <64 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3365 = trunc <32 x i16> %3364 to <32 x i8>
  %3366 = shufflevector <32 x i8> %3365, <32 x i8> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3367 = bitcast <128 x i8> %3366 to <32 x i32>
  %3368 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3367, <32 x i32> %3225) #12
  %3369 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3368, <32 x i32> %3228) #12
  %3370 = bitcast <32 x i32> %3369 to <128 x i8>
  %3371 = shufflevector <128 x i8> %3370, <128 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3372 = add nsw i32 %output.s0.c.co.rebased.us, %a479
  %3373 = shl nsw i32 %3372, 5
  %3374 = add nsw i32 %3403, %3373
  %3375 = getelementptr inbounds i8, i8* %22, i32 %3374
  %3376 = bitcast i8* %3375 to <32 x i8>*
  store <32 x i8> %3371, <32 x i8>* %3376, align 1, !tbaa !111
  br label %after_bb254.us

next_bb256.us:                                    ; preds = %"consume convolved253.us"
  %3377 = or i32 %3332, 1
  %.not320.us = icmp sgt i32 %3377, %3
  %3378 = sext <32 x i32> %convolved313.sroa.0.57.us to <32 x i64>
  %3379 = select i1 %.not320.us, <32 x i64> zeroinitializer, <32 x i64> %3378
  %a495.us = mul nsw <32 x i64> %3379, %3212
  %3380 = icmp slt <32 x i64> %a495.us, <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3381 = select <32 x i1> %3380, <32 x i64> %a495.us, <32 x i64> <i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983, i64 9223372035781033983>
  %3382 = add nsw <32 x i64> %3381, <i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824, i64 1073741824>
  %a494.us = ashr <32 x i64> %3382, <i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31, i64 31>
  %3383 = icmp slt <32 x i64> %a494.us, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a493.us = select <32 x i1> %3383, <32 x i64> %a494.us, <32 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3384 = icmp sgt <32 x i64> %a493.us, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3385 = select <32 x i1> %3384, <32 x i64> %a493.us, <32 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3386 = trunc <32 x i64> %3385 to <32 x i32>
  %3387 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3218, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0) #12
  %3388 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %3217, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %3389 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %3386, <32 x i32> %3388, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3390 = call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %3387, <1 x i32> zeroinitializer, <32 x i32> %3389, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3391 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3390, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  %3392 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %3391, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0) #12
  br label %after_bb254.us

after_bb254.us:                                   ; preds = %next_bb256.us, %then_bb255.us
  %3393 = add nuw nsw i32 %output.s0.c.co.rebased.us, 1
  %.not321.us = icmp eq i32 %3393, %t1167
  br i1 %.not321.us, label %"end for output.s0.c.co.rebased.us", label %"for output.s0.c.co.rebased.us"

"end for output.s0.c.co.rebased.us":              ; preds = %after_bb254.us, %"end for output.s0.c.co212.us"
  %convolved313.sroa.0.50.us = phi <32 x i32> [ %convolved313.sroa.0.41.us, %"end for output.s0.c.co212.us" ], [ %convolved313.sroa.0.57.us, %after_bb254.us ]
  %3394 = add nuw nsw i32 %output.s0.x.xo186.us, 1
  %.not318.us = icmp eq i32 %3394, %25
  br i1 %.not318.us, label %"end for output.s0.x.xo185.loopexit.us", label %"for output.s0.x.xo184.us"

"for sum_input.s1.r19$x198.preheader.us":         ; preds = %"for sum_input.s1.r19$y195.us"
  %3395 = mul nsw i32 %"sum_input.s1.r19$y197.us", %dilation_y
  %3396 = add nsw i32 %3395, %3242
  %3397 = mul nsw i32 %3396, %18
  %t1183.us = add i32 %3239, %3397
  br i1 %3233, label %"end for sum_input.s1.r19$x199.us.loopexit.unr-lcssa", label %"for sum_input.s1.r19$x198.us"

"for output.s0.c.co.rebased.preheader.us":        ; preds = %"end for output.s0.c.co212.us"
  %sum_input187312.sroa.0.0.vec.extract644.us = extractelement <32 x i32> %sum_input187312.sroa.0.34.us, i32 0
  %3398 = mul nsw i32 %sum_input187312.sroa.0.0.vec.extract644.us, %166
  %3399 = insertelement <1 x i32> poison, i32 %3398, i32 0
  %3400 = add nsw i32 %output.s0.x.xo186.us, %24
  %3401 = mul nsw i32 %3400, %stride_x
  %3402 = mul nsw i32 %3400, %26
  %3403 = add nsw i32 %3402, %t1180.us
  br label %"for output.s0.c.co.rebased.us"

"for output.s0.c.co211.preheader.us":             ; preds = %"consume sum_input210.us"
  %sum_input187312.sroa.0.0.vec.extract646.us = extractelement <32 x i32> %sum_input187312.sroa.0.34.us, i32 0
  %3404 = mul nsw i32 %sum_input187312.sroa.0.0.vec.extract646.us, %166
  %3405 = insertelement <1 x i32> poison, i32 %3404, i32 0
  %3406 = add nsw i32 %output.s0.x.xo186.us, %24
  %3407 = mul nsw i32 %3406, %stride_x
  %3408 = mul nsw i32 %3406, %26
  %3409 = add nsw i32 %3408, %t1180.us
  br label %"for output.s0.c.co211.us"

"for sum_input.s1.r19$y195.preheader.us":         ; preds = %then_bb193.us
  %3410 = add nsw i32 %output.s0.x.xo186.us, %24
  %3411 = sub i32 %3410, %15
  br label %"for sum_input.s1.r19$y195.us"

"for sum_input.s1.r19$y201.preheader.us":         ; preds = %next_bb194.us
  %3412 = add nsw i32 %output.s0.x.xo186.us, %24
  %3413 = mul nsw i32 %3412, %stride_x
  br i1 %3208, label %"for sum_input.s1.r19$y201.us.us", label %"consume sum_input210.us", !prof !96

"end for output.s0.x.xo185.loopexit.us":          ; preds = %"end for output.s0.c.co.rebased.us"
  %3414 = add nuw nsw i32 %output.s0.y.rebased183.us, 1
  %.not317.us = icmp eq i32 %3414, %28
  br i1 %.not317.us, label %"end for output.s0.y.rebased182", label %"for output.s0.y.rebased181.us"

"for sum_input.s1.r19$y201.us.us":                ; preds = %"end for sum_input.s1.r19$x205.loopexit.us.us", %"for sum_input.s1.r19$y201.preheader.us"
  %sum_input187312.sroa.0.29.us.us = phi <32 x i32> [ %.us-phi.us.us, %"end for sum_input.s1.r19$x205.loopexit.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert655.us, %"for sum_input.s1.r19$y201.preheader.us" ]
  %"sum_input.s1.r19$y203.us.us" = phi i32 [ %3418, %"end for sum_input.s1.r19$x205.loopexit.us.us" ], [ 0, %"for sum_input.s1.r19$y201.preheader.us" ]
  %3415 = mul nsw i32 %"sum_input.s1.r19$y203.us.us", %dilation_y
  %3416 = add nsw i32 %3415, %3242
  %3417 = mul nsw i32 %3416, %18
  %t1185.us.us = add nsw i32 %3238, %3417
  br i1 %3209, label %"for sum_input.s1.r19$x204.us.us.us", label %"end for sum_input.s1.r19$x205.loopexit.us.us", !prof !96

"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit": ; preds = %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us"
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.le.le = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1457, i32 0
  br label %"end for sum_input.s1.r19$x205.loopexit.us.us"

"end for sum_input.s1.r19$x205.loopexit.us.us":   ; preds = %"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit", %"for sum_input.s1.r19$y201.us.us"
  %.us-phi.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.29.us.us, %"for sum_input.s1.r19$y201.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.le.le, %"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit" ]
  %3418 = add nuw nsw i32 %"sum_input.s1.r19$y203.us.us", 1
  %.not329.us.us = icmp eq i32 %3418, %10
  br i1 %.not329.us.us, label %"consume sum_input210.us", label %"for sum_input.s1.r19$y201.us.us"

"for sum_input.s1.r19$x204.us.us.us":             ; preds = %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us", %"for sum_input.s1.r19$y201.us.us"
  %sum_input187312.sroa.0.30.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.le, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us" ], [ %sum_input187312.sroa.0.29.us.us, %"for sum_input.s1.r19$y201.us.us" ]
  %"sum_input.s1.r19$x206.us.us.us" = phi i32 [ %3503, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us" ], [ 0, %"for sum_input.s1.r19$y201.us.us" ]
  %3419 = mul nsw i32 %"sum_input.s1.r19$x206.us.us.us", %dilation_x
  %t1186.s.us.us.us = add nsw i32 %3419, %3413
  %3420 = mul nsw i32 %t1186.s.us.us.us, %16
  %3421 = add nsw i32 %t1185.us.us, %3420
  br i1 %3232, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa", label %"for sum_input.s1.r19$z.r124207.us.us.us"

"for sum_input.s1.r19$z.r124207.us.us.us":        ; preds = %"for sum_input.s1.r19$z.r124207.us.us.us", %"for sum_input.s1.r19$x204.us.us.us"
  %sum_input187312.sroa.0.32.us.us.us = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.7, %"for sum_input.s1.r19$z.r124207.us.us.us" ], [ %sum_input187312.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x204.us.us.us" ]
  %"sum_input.s1.r19$z.r124209.us.us.us" = phi i32 [ %3493, %"for sum_input.s1.r19$z.r124207.us.us.us" ], [ 0, %"for sum_input.s1.r19$x204.us.us.us" ]
  %niter1468 = phi i32 [ %niter1468.nsub.7, %"for sum_input.s1.r19$z.r124207.us.us.us" ], [ %unroll_iter1467, %"for sum_input.s1.r19$x204.us.us.us" ]
  %sum_input187312.sroa.0.0.vec.extract649.us.us.us = extractelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us, i32 0
  %3422 = shl nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3423 = add nsw i32 %3421, %3422
  %3424 = getelementptr inbounds i8, i8* %12, i32 %3423
  %3425 = bitcast i8* %3424 to <4 x i8>*
  %3426 = load <4 x i8>, <4 x i8>* %3425, align 4, !tbaa !108
  %3427 = zext <4 x i8> %3426 to <4 x i32>
  %3428 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3427) #10
  %3429 = add nsw i32 %3428, %sum_input187312.sroa.0.0.vec.extract649.us.us.us
  %3430 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3431 = or i32 %3430, 4
  %3432 = add nsw i32 %3421, %3431
  %3433 = getelementptr inbounds i8, i8* %12, i32 %3432
  %3434 = bitcast i8* %3433 to <4 x i8>*
  %3435 = load <4 x i8>, <4 x i8>* %3434, align 4, !tbaa !108
  %3436 = zext <4 x i8> %3435 to <4 x i32>
  %3437 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3436) #10
  %3438 = add nsw i32 %3437, %3429
  %3439 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3440 = or i32 %3439, 8
  %3441 = add nsw i32 %3421, %3440
  %3442 = getelementptr inbounds i8, i8* %12, i32 %3441
  %3443 = bitcast i8* %3442 to <4 x i8>*
  %3444 = load <4 x i8>, <4 x i8>* %3443, align 4, !tbaa !108
  %3445 = zext <4 x i8> %3444 to <4 x i32>
  %3446 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3445) #10
  %3447 = add nsw i32 %3446, %3438
  %3448 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3449 = or i32 %3448, 12
  %3450 = add nsw i32 %3421, %3449
  %3451 = getelementptr inbounds i8, i8* %12, i32 %3450
  %3452 = bitcast i8* %3451 to <4 x i8>*
  %3453 = load <4 x i8>, <4 x i8>* %3452, align 4, !tbaa !108
  %3454 = zext <4 x i8> %3453 to <4 x i32>
  %3455 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3454) #10
  %3456 = add nsw i32 %3455, %3447
  %3457 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3458 = or i32 %3457, 16
  %3459 = add nsw i32 %3421, %3458
  %3460 = getelementptr inbounds i8, i8* %12, i32 %3459
  %3461 = bitcast i8* %3460 to <4 x i8>*
  %3462 = load <4 x i8>, <4 x i8>* %3461, align 4, !tbaa !108
  %3463 = zext <4 x i8> %3462 to <4 x i32>
  %3464 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3463) #10
  %3465 = add nsw i32 %3464, %3456
  %3466 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3467 = or i32 %3466, 20
  %3468 = add nsw i32 %3421, %3467
  %3469 = getelementptr inbounds i8, i8* %12, i32 %3468
  %3470 = bitcast i8* %3469 to <4 x i8>*
  %3471 = load <4 x i8>, <4 x i8>* %3470, align 4, !tbaa !108
  %3472 = zext <4 x i8> %3471 to <4 x i32>
  %3473 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3472) #10
  %3474 = add nsw i32 %3473, %3465
  %3475 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3476 = or i32 %3475, 24
  %3477 = add nsw i32 %3421, %3476
  %3478 = getelementptr inbounds i8, i8* %12, i32 %3477
  %3479 = bitcast i8* %3478 to <4 x i8>*
  %3480 = load <4 x i8>, <4 x i8>* %3479, align 4, !tbaa !108
  %3481 = zext <4 x i8> %3480 to <4 x i32>
  %3482 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3481) #10
  %3483 = add nsw i32 %3482, %3474
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.6 = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us, i32 %3483, i32 0
  %3484 = shl i32 %"sum_input.s1.r19$z.r124209.us.us.us", 2
  %3485 = or i32 %3484, 28
  %3486 = add nsw i32 %3421, %3485
  %3487 = getelementptr inbounds i8, i8* %12, i32 %3486
  %3488 = bitcast i8* %3487 to <4 x i8>*
  %3489 = load <4 x i8>, <4 x i8>* %3488, align 4, !tbaa !108
  %3490 = zext <4 x i8> %3489 to <4 x i32>
  %3491 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3490) #10
  %3492 = add nsw i32 %3491, %3483
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.7 = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert.us.us.us.6, i32 %3492, i32 0
  %3493 = add nuw nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us", 8
  %niter1468.nsub.7 = add i32 %niter1468, -8
  %niter1468.ncmp.7 = icmp eq i32 %niter1468.nsub.7, 0
  br i1 %niter1468.ncmp.7, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit", label %"for sum_input.s1.r19$z.r124207.us.us.us"

"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit": ; preds = %"for sum_input.s1.r19$z.r124207.us.us.us"
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.6.le = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us, i32 %3483, i32 0
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.7.le = insertelement <32 x i32> %sum_input187312.sroa.0.0.vec.insert.us.us.us.6.le, i32 %3492, i32 0
  br label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa"

"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa": ; preds = %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit", %"for sum_input.s1.r19$x204.us.us.us"
  %sum_input187312.sroa.0.32.us.us.us.lcssa.ph = phi <32 x i32> [ undef, %"for sum_input.s1.r19$x204.us.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.6.le, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %.lcssa1457.ph = phi i32 [ undef, %"for sum_input.s1.r19$x204.us.us.us" ], [ %3492, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %sum_input187312.sroa.0.32.us.us.us.unr = phi <32 x i32> [ %sum_input187312.sroa.0.30.us.us.us, %"for sum_input.s1.r19$x204.us.us.us" ], [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.7.le, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  %"sum_input.s1.r19$z.r124209.us.us.us.unr" = phi i32 [ 0, %"for sum_input.s1.r19$x204.us.us.us" ], [ %3493, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod1464.not, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124207.us.us.us.epil"

"for sum_input.s1.r19$z.r124207.us.us.us.epil":   ; preds = %"for sum_input.s1.r19$z.r124207.us.us.us.epil", %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa"
  %sum_input187312.sroa.0.32.us.us.us.epil = phi <32 x i32> [ %sum_input187312.sroa.0.0.vec.insert.us.us.us.epil, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ], [ %sum_input187312.sroa.0.32.us.us.us.unr, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ]
  %"sum_input.s1.r19$z.r124209.us.us.us.epil" = phi i32 [ %3502, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ], [ %"sum_input.s1.r19$z.r124209.us.us.us.unr", %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ]
  %epil.iter1463 = phi i32 [ %epil.iter1463.sub, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ], [ %xtraiter1462, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ]
  %sum_input187312.sroa.0.0.vec.extract649.us.us.us.epil = extractelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.epil, i32 0
  %3494 = shl nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us.epil", 2
  %3495 = add nsw i32 %3421, %3494
  %3496 = getelementptr inbounds i8, i8* %12, i32 %3495
  %3497 = bitcast i8* %3496 to <4 x i8>*
  %3498 = load <4 x i8>, <4 x i8>* %3497, align 4, !tbaa !108
  %3499 = zext <4 x i8> %3498 to <4 x i32>
  %3500 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %3499) #10
  %3501 = add nsw i32 %3500, %sum_input187312.sroa.0.0.vec.extract649.us.us.us.epil
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.epil = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.epil, i32 %3501, i32 0
  %3502 = add nuw nsw i32 %"sum_input.s1.r19$z.r124209.us.us.us.epil", 1
  %epil.iter1463.sub = add i32 %epil.iter1463, -1
  %epil.iter1463.cmp.not = icmp eq i32 %epil.iter1463.sub, 0
  br i1 %epil.iter1463.cmp.not, label %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us", label %"for sum_input.s1.r19$z.r124207.us.us.us.epil", !llvm.loop !119

"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us": ; preds = %"for sum_input.s1.r19$z.r124207.us.us.us.epil", %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa"
  %sum_input187312.sroa.0.32.us.us.us.lcssa = phi <32 x i32> [ %sum_input187312.sroa.0.32.us.us.us.lcssa.ph, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ], [ %sum_input187312.sroa.0.32.us.us.us.epil, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ]
  %.lcssa1457 = phi i32 [ %.lcssa1457.ph, %"end for sum_input.s1.r19$z.r124208.loopexit.us.us.us.unr-lcssa" ], [ %3501, %"for sum_input.s1.r19$z.r124207.us.us.us.epil" ]
  %sum_input187312.sroa.0.0.vec.insert.us.us.us.le = insertelement <32 x i32> %sum_input187312.sroa.0.32.us.us.us.lcssa, i32 %.lcssa1457, i32 0
  %3503 = add nuw nsw i32 %"sum_input.s1.r19$x206.us.us.us", 1
  %.not330.us.us.us = icmp eq i32 %3503, %8
  br i1 %.not330.us.us.us, label %"end for sum_input.s1.r19$x205.loopexit.us.us.loopexit", label %"for sum_input.s1.r19$x204.us.us.us"

"for convolved.s1.r19$y221.us.us.us":             ; preds = %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us", %after_bb218.us
  %convolved313.sroa.0.43.us.us.us = phi <32 x i32> [ %3523, %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.0.42.us, %after_bb218.us ]
  %"convolved.s1.r19$y223.us.us.us" = phi i32 [ %3526, %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us" ], [ 0, %after_bb218.us ]
  %3504 = mul nsw i32 %"convolved.s1.r19$y223.us.us.us", %dilation_y
  %3505 = add nsw i32 %3504, %3242
  %3506 = mul nsw i32 %3505, %18
  %t1191.us.us.us = add nsw i32 %3238, %3506
  %3507 = mul nsw i32 %"convolved.s1.r19$y223.us.us.us", %11
  %t1192.us.us.us = add nsw i32 %3507, %3296
  br label %"for convolved.s1.r19$x224.us.us.us.us"

"for convolved.s1.r19$x224.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us", %"for convolved.s1.r19$y221.us.us.us"
  %convolved313.sroa.0.44.us.us.us.us = phi <32 x i32> [ %3523, %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.43.us.us.us, %"for convolved.s1.r19$y221.us.us.us" ]
  %"convolved.s1.r19$x226.us.us.us.us" = phi i32 [ %3525, %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y221.us.us.us" ]
  %3508 = mul nsw i32 %"convolved.s1.r19$x226.us.us.us.us", %dilation_x
  %t1193.s.us.us.us.us = add nsw i32 %3508, %3407
  %3509 = mul nsw i32 %t1193.s.us.us.us.us, %16
  %3510 = add nsw i32 %t1191.us.us.us, %3509
  %3511 = mul nsw i32 %"convolved.s1.r19$x226.us.us.us.us", %9
  %3512 = add nsw i32 %t1192.us.us.us, %3511
  br label %"for convolved.s1.r19$z.r124227.us.us.us.us"

"for convolved.s1.r19$z.r124227.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r124227.us.us.us.us", %"for convolved.s1.r19$x224.us.us.us.us"
  %convolved313.sroa.0.46.us.us.us.us = phi <32 x i32> [ %3523, %"for convolved.s1.r19$z.r124227.us.us.us.us" ], [ %convolved313.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x224.us.us.us.us" ]
  %"convolved.s1.r19$z.r124229.us.us.us.us" = phi i32 [ %3524, %"for convolved.s1.r19$z.r124227.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x224.us.us.us.us" ]
  %3513 = shl nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 2
  %3514 = add nsw i32 %3510, %3513
  %3515 = getelementptr inbounds i8, i8* %12, i32 %3514
  %3516 = bitcast i8* %3515 to <4 x i8>*
  %3517 = load <4 x i8>, <4 x i8>* %3516, align 4, !tbaa !108
  %3518 = shl nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 7
  %3519 = add nsw i32 %3512, %3518
  %3520 = getelementptr inbounds i8, i8* %4, i32 %3519
  %3521 = bitcast i8* %3520 to <128 x i8>*
  %3522 = load <128 x i8>, <128 x i8>* %3521, align 128, !tbaa !106
  %3523 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.0.46.us.us.us.us, <128 x i8> %3522, <4 x i8> %3517, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %3524 = add nuw nsw i32 %"convolved.s1.r19$z.r124229.us.us.us.us", 1
  %.not328.us.us.us.us = icmp eq i32 %3524, %6
  br i1 %.not328.us.us.us.us, label %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124227.us.us.us.us"

"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124227.us.us.us.us"
  %3525 = add nuw nsw i32 %"convolved.s1.r19$x226.us.us.us.us", 1
  %.not327.us.us.us.us = icmp eq i32 %3525, %8
  br i1 %.not327.us.us.us.us, label %"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x224.us.us.us.us"

"end for convolved.s1.r19$x225.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124228.loopexit.us.us.us.us"
  %3526 = add nuw nsw i32 %"convolved.s1.r19$y223.us.us.us", 1
  %.not326.us.us.us = icmp eq i32 %3526, %10
  br i1 %.not326.us.us.us, label %"consume convolved230.us", label %"for convolved.s1.r19$y221.us.us.us"

"for convolved.s1.r19$y244.us.us.us":             ; preds = %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us", %after_bb235.us
  %convolved313.sroa.0.52.us.us.us = phi <32 x i32> [ %3546, %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us" ], [ %convolved313.sroa.0.51.us, %after_bb235.us ]
  %"convolved.s1.r19$y246.us.us.us" = phi i32 [ %3549, %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us" ], [ 0, %after_bb235.us ]
  %3527 = mul nsw i32 %"convolved.s1.r19$y246.us.us.us", %dilation_y
  %3528 = add nsw i32 %3527, %3242
  %3529 = mul nsw i32 %3528, %18
  %t1201.us.us.us = add nsw i32 %3238, %3529
  %3530 = mul nsw i32 %"convolved.s1.r19$y246.us.us.us", %11
  %t1202.us.us.us = add nsw i32 %3530, %3341
  br label %"for convolved.s1.r19$x247.us.us.us.us"

"for convolved.s1.r19$x247.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us", %"for convolved.s1.r19$y244.us.us.us"
  %convolved313.sroa.0.53.us.us.us.us = phi <32 x i32> [ %3546, %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us" ], [ %convolved313.sroa.0.52.us.us.us, %"for convolved.s1.r19$y244.us.us.us" ]
  %"convolved.s1.r19$x249.us.us.us.us" = phi i32 [ %3548, %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y244.us.us.us" ]
  %3531 = mul nsw i32 %"convolved.s1.r19$x249.us.us.us.us", %dilation_x
  %t1203.s.us.us.us.us = add nsw i32 %3531, %3401
  %3532 = mul nsw i32 %t1203.s.us.us.us.us, %16
  %3533 = add nsw i32 %t1201.us.us.us, %3532
  %3534 = mul nsw i32 %"convolved.s1.r19$x249.us.us.us.us", %9
  %3535 = add nsw i32 %t1202.us.us.us, %3534
  br label %"for convolved.s1.r19$z.r124250.us.us.us.us"

"for convolved.s1.r19$z.r124250.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r124250.us.us.us.us", %"for convolved.s1.r19$x247.us.us.us.us"
  %convolved313.sroa.0.55.us.us.us.us = phi <32 x i32> [ %3546, %"for convolved.s1.r19$z.r124250.us.us.us.us" ], [ %convolved313.sroa.0.53.us.us.us.us, %"for convolved.s1.r19$x247.us.us.us.us" ]
  %"convolved.s1.r19$z.r124252.us.us.us.us" = phi i32 [ %3547, %"for convolved.s1.r19$z.r124250.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x247.us.us.us.us" ]
  %3536 = shl nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 2
  %3537 = add nsw i32 %3533, %3536
  %3538 = getelementptr inbounds i8, i8* %12, i32 %3537
  %3539 = bitcast i8* %3538 to <4 x i8>*
  %3540 = load <4 x i8>, <4 x i8>* %3539, align 4, !tbaa !108
  %3541 = shl nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 7
  %3542 = add nsw i32 %3535, %3541
  %3543 = getelementptr inbounds i8, i8* %4, i32 %3542
  %3544 = bitcast i8* %3543 to <128 x i8>*
  %3545 = load <128 x i8>, <128 x i8>* %3544, align 128, !tbaa !106
  %3546 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %convolved313.sroa.0.55.us.us.us.us, <128 x i8> %3545, <4 x i8> %3540, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  %3547 = add nuw nsw i32 %"convolved.s1.r19$z.r124252.us.us.us.us", 1
  %.not324.us.us.us.us = icmp eq i32 %3547, %6
  br i1 %.not324.us.us.us.us, label %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r124250.us.us.us.us"

"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r124250.us.us.us.us"
  %3548 = add nuw nsw i32 %"convolved.s1.r19$x249.us.us.us.us", 1
  %.not323.us.us.us.us = icmp eq i32 %3548, %8
  br i1 %.not323.us.us.us.us, label %"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x247.us.us.us.us"

"end for convolved.s1.r19$x248.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r124251.loopexit.us.us.us.us"
  %3549 = add nuw nsw i32 %"convolved.s1.r19$y246.us.us.us", 1
  %.not322.us.us.us = icmp eq i32 %3549, %10
  br i1 %.not322.us.us.us, label %"consume convolved253.us", label %"for convolved.s1.r19$y244.us.us.us"

"end for output.s0.y.rebased182":                 ; preds = %"end for output.s0.x.xo185.loopexit.us", %"for output.s0.y.rebased181.preheader", %"for output.s0.b.rebased178"
  %sum_input187312.sroa.0.23 = phi <32 x i32> [ %sum_input187312.sroa.0.21, %"for output.s0.b.rebased178" ], [ %sum_input187312.sroa.0.21, %"for output.s0.y.rebased181.preheader" ], [ %sum_input187312.sroa.0.34.us, %"end for output.s0.x.xo185.loopexit.us" ]
  %convolved313.sroa.0.37 = phi <32 x i32> [ %convolved313.sroa.0.35, %"for output.s0.b.rebased178" ], [ %convolved313.sroa.0.35, %"for output.s0.y.rebased181.preheader" ], [ %convolved313.sroa.0.50.us, %"end for output.s0.x.xo185.loopexit.us" ]
  %3550 = add nuw nsw i32 %output.s0.b.rebased180, 1
  %.not316 = icmp eq i32 %3550, %20
  br i1 %.not316, label %after_bb3, label %"for output.s0.b.rebased178"
}

; Function Attrs: nounwind
define i32 @conv_nn_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #12 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = load i8*, i8** %39, align 4
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr i8*, i8** %0, i32 12
  %43 = load i8*, i8** %42, align 4
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr i8*, i8** %0, i32 13
  %46 = load i8*, i8** %45, align 4
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr i8*, i8** %0, i32 14
  %49 = bitcast i8** %48 to %struct.halide_buffer_t**
  %50 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %49, align 4
  %51 = tail call i32 @conv_nn_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i8 %41, i8 %44, i8 %47, %struct.halide_buffer_t* %50) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata() local_unnamed_addr #13 {
entry:
  ret %struct.halide_filter_metadata_t* @conv_nn_hvx128_metadata_storage
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #14

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.0(<128 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybv_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <128 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

declare <32 x i32> @llvm.hydride.hexagon_V6_vrmpybv_128B_dsl(<32 x i32>, <128 x i8>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.1(<32 x i32> %arg, <1 x i32> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %0, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %2
}

declare <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32>, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32)

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.2(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.3(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.4(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.5(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.6(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.7(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.8(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.9(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.10(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.11(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.12(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.13(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.14(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.15(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.16(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.17(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.18(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.19(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.20(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.21(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.22(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.23(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.24(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.25(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.26(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.27(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.28(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.29(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.30(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.31(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.32(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.33(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.34(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.35(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.36(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.37(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.38(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.39(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.40(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.41(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.42(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.43(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.44(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.45(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.46(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.47(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.48(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.49(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <128 x i8> @hydride.node.conv_nn_hvx_depth5.50(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %10, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %14 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %13, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = bitcast <64 x i16> %14 to <128 x i8>
  %16 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %15, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %17 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %18 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %19 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %18, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %20 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %17, <1 x i32> zeroinitializer, <32 x i32> %19, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %20, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %22 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %23 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %24 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %25 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %24, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %26 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %23, <1 x i32> zeroinitializer, <32 x i32> %25, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %28 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %27, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %29 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %22, <32 x i32> %28, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %30 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %31 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %29, <128 x i8> %30, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %32 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %16, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %33 = bitcast <64 x i16> %32 to <128 x i8>
  %34 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %35 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %36 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %35, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %34, <1 x i32> zeroinitializer, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %38 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %37, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %39 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %41 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %42 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %40, <1 x i32> zeroinitializer, <32 x i32> %42, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %44 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %43, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %45 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %44, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %46 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %39, <32 x i32> %45, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %47 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %48 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %47, <64 x i16> %46, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %49 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %51 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %49, <1 x i32> zeroinitializer, <32 x i32> %51, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %53 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %54 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %53, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %55 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %56 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %57 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %58 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %55, <1 x i32> zeroinitializer, <32 x i32> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %59 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %58, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %60 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %59, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %61 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %54, <32 x i32> %60, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %62 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %63 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %61, <128 x i8> %62, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %64 = bitcast <64 x i16> %63 to <128 x i8>
  %65 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %64, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %66 = call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %65, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %67 = bitcast <64 x i16> %66 to <128 x i8>
  %68 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.1(<128 x i8> %33, <128 x i8> %67, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 2, i32 64, i32 2, i32 8, i32 0)
  %69 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8> %68, <128 x i8> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %70 = call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8> %arg.11, <128 x i8> %69, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %70
}

declare <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32>, <1 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.23(<256 x i8>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.13(<256 x i8>, i32, i32, i32, i32, i32, i32)

declare <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16>, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.1(<128 x i8>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32)

define <128 x i8> @hydride.node.conv_nn_hvx_depth5.51(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %10, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %14 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %13, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = bitcast <64 x i16> %14 to <128 x i8>
  %16 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %15, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %17 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %16, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %19 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %20 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %19, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %18, <1 x i32> zeroinitializer, <32 x i32> %20, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %23 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %22, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %25 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %26 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %25, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %24, <1 x i32> zeroinitializer, <32 x i32> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %28 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %29 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %28, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %30 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %23, <32 x i32> %29, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %31 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %32 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %30, <128 x i8> %31, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %33 = bitcast <64 x i16> %32 to <128 x i8>
  %34 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %33, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %35 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %34, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %36 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %17, <64 x i16> %35, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %38 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %39 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %38, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %40 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %37, <1 x i32> zeroinitializer, <32 x i32> %39, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %41 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %40, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %42 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %44 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %45 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %46 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %43, <1 x i32> zeroinitializer, <32 x i32> %45, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %47 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %46, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %48 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %47, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %49 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %42, <32 x i32> %48, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %50 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %51 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %50, <64 x i16> %49, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %52 = bitcast <64 x i16> %51 to <128 x i8>
  %53 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %52, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %54 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %53, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %55 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %56 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %57 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %58 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %55, <1 x i32> zeroinitializer, <32 x i32> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %59 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %58, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %60 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %59, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %61 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %62 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %63 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %62, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %64 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %61, <1 x i32> zeroinitializer, <32 x i32> %63, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %65 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %64, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %66 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %65, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %67 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %60, <32 x i32> %66, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %68 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %69 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %67, <128 x i8> %68, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %70 = bitcast <64 x i16> %69 to <128 x i8>
  %71 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %70, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %72 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %71, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %73 = tail call <256 x i8> @llvm.hydride.hexagon_V6_vcombine_128B_dsl.1(<64 x i16> %54, <64 x i16> %72, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %74 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.23(<256 x i8> %36, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %75 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.13(<256 x i8> %73, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %76 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.1(<128 x i8> %74, <128 x i8> %75, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 2, i32 64, i32 2, i32 8, i32 0)
  %77 = call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8> %76, <128 x i8> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %78 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8> %arg.11, <128 x i8> %77, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %78
}

define <128 x i8> @hydride.node.conv_nn_hvx_depth5.52(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %10, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %14 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %13, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = bitcast <64 x i16> %14 to <128 x i8>
  %16 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %15, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %17 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %16, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %19 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %20 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %19, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %18, <1 x i32> zeroinitializer, <32 x i32> %20, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %23 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %22, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %25 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %26 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %25, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %24, <1 x i32> zeroinitializer, <32 x i32> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %28 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %29 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %28, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %30 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %23, <32 x i32> %29, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %31 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %32 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %30, <128 x i8> %31, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %34 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %35 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %34, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %33, <1 x i32> zeroinitializer, <32 x i32> %35, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %38 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %37, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %40 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %41 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %40, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %39, <1 x i32> zeroinitializer, <32 x i32> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %42, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %44 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %43, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %45 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %38, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %46 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %47 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %46, <64 x i16> %45, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %49 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %49, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %48, <1 x i32> zeroinitializer, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %51, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %53 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %55 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %56 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %57 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %54, <1 x i32> zeroinitializer, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %58 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %59 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %58, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %60 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %53, <32 x i32> %59, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %61 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %62 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %60, <128 x i8> %61, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %63 = bitcast <64 x i16> %62 to <128 x i8>
  %64 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %63, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %65 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %64, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %66 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.73(<64 x i16> %17, <64 x i16> %65, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 2, i32 64, i32 2, i32 8, i32 0)
  %67 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8> %66, <128 x i8> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %68 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8> %arg.11, <128 x i8> %67, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %68
}

define <128 x i8> @hydride.node.conv_nn_hvx_depth5.53(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %10, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %14 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %13, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = bitcast <64 x i16> %14 to <128 x i8>
  %16 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %15, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %17 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %16, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %19 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %20 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %19, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %18, <1 x i32> zeroinitializer, <32 x i32> %20, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %23 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %22, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %25 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %26 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %25, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %24, <1 x i32> zeroinitializer, <32 x i32> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %28 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %29 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %28, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %30 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %23, <32 x i32> %29, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %31 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %32 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %30, <128 x i8> %31, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %34 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %35 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %34, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %33, <1 x i32> zeroinitializer, <32 x i32> %35, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %38 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %37, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %40 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %41 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %40, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %39, <1 x i32> zeroinitializer, <32 x i32> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %42, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %44 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %43, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %45 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %38, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %46 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %47 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %46, <64 x i16> %45, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %49 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %49, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %48, <1 x i32> zeroinitializer, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %51, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %53 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %55 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %56 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %57 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %54, <1 x i32> zeroinitializer, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %58 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %59 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %58, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %60 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %53, <32 x i32> %59, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %61 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %62 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %60, <128 x i8> %61, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %63 = bitcast <64 x i16> %62 to <128 x i8>
  %64 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %63, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %65 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %64, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %66 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.73(<64 x i16> %17, <64 x i16> %65, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 2, i32 64, i32 2, i32 8, i32 0)
  %67 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8> %66, <128 x i8> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %68 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8> %arg.11, <128 x i8> %67, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %68
}

define <128 x i8> @hydride.node.conv_nn_hvx_depth5.54(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %10, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %14 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %13, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = bitcast <64 x i16> %14 to <128 x i8>
  %16 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %15, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %17 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %16, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %19 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %20 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %19, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %18, <1 x i32> zeroinitializer, <32 x i32> %20, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %23 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %22, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %25 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %26 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %25, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %24, <1 x i32> zeroinitializer, <32 x i32> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %28 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %29 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %28, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %30 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %23, <32 x i32> %29, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %31 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %32 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %30, <128 x i8> %31, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %34 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %35 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %34, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %33, <1 x i32> zeroinitializer, <32 x i32> %35, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %38 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %37, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %40 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %41 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %40, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %39, <1 x i32> zeroinitializer, <32 x i32> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %42, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %44 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %43, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %45 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %38, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %46 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %47 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %46, <64 x i16> %45, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %49 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %49, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %48, <1 x i32> zeroinitializer, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %51, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %53 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %55 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %56 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %57 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %54, <1 x i32> zeroinitializer, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %58 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %59 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %58, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %60 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %53, <32 x i32> %59, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %61 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %62 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %60, <128 x i8> %61, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %63 = bitcast <64 x i16> %62 to <128 x i8>
  %64 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %63, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %65 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %64, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %66 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.73(<64 x i16> %17, <64 x i16> %65, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 2, i32 64, i32 2, i32 8, i32 0)
  %67 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8> %66, <128 x i8> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %68 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8> %arg.11, <128 x i8> %67, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %68
}

define <128 x i8> @hydride.node.conv_nn_hvx_depth5.55(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %10, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %14 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %13, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = bitcast <64 x i16> %14 to <128 x i8>
  %16 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %15, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %17 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %16, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %19 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %20 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %19, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %18, <1 x i32> zeroinitializer, <32 x i32> %20, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %23 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %22, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %25 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %26 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %25, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %24, <1 x i32> zeroinitializer, <32 x i32> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %28 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %29 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %28, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %30 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %23, <32 x i32> %29, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %31 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %32 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %30, <128 x i8> %31, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %34 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %35 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %34, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %33, <1 x i32> zeroinitializer, <32 x i32> %35, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %38 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %37, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %40 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %41 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %40, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %39, <1 x i32> zeroinitializer, <32 x i32> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %42, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %44 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %43, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %45 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %38, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %46 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %47 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %46, <64 x i16> %45, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %49 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %49, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %48, <1 x i32> zeroinitializer, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %51, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %53 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %55 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %56 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %57 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %54, <1 x i32> zeroinitializer, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %58 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %59 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %58, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %60 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %53, <32 x i32> %59, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %61 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %62 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %60, <128 x i8> %61, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %63 = bitcast <64 x i16> %62 to <128 x i8>
  %64 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %63, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %65 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %64, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %66 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.73(<64 x i16> %17, <64 x i16> %65, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 2, i32 64, i32 2, i32 8, i32 0)
  %67 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8> %66, <128 x i8> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %68 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8> %arg.11, <128 x i8> %67, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %68
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.56(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.57(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.58(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.59(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.60(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.61(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.62(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.63(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.64(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.65(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.66(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.67(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.68(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.69(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.70(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.71(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.72(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.73(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.74(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.75(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.76(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.77(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.78(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.79(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.80(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.81(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.82(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.83(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.84(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.85(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.86(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.87(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.88(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

declare <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32>, <32 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32)

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.89(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.90(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.91(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.92(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.93(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.94(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.95(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.96(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.97(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.98(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.99(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.100(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.101(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.102(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <64 x i16> @hydride.node.conv_nn_hvx_depth5.103(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <64 x i16> %arg.5) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> %9, <32 x i32> <i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32767, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <32 x i32> %10, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.2(<64 x i16> %arg.5, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %14 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.5(<64 x i16> %13, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> zeroinitializer, <64 x i16> %14, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  ret <64 x i16> %15
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.104(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.105(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.106(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.107(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.108(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.109(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.110(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.111(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.112(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.113(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.114(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.115(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.116(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.117(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.118(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.119(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.120(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.121(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.122(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.123(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.124(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.125(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.126(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.127(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.128(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.129(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.130(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.131(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.132(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.133(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.134(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.135(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <128 x i8> @hydride.node.conv_nn_hvx_depth5.136(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <1 x i32> %arg.6, <32 x i32> %arg.7, <1 x i32> %arg.8, <128 x i16> %arg.9, <128 x i8> %arg.10, <128 x i8> %arg.11) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %6 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %7 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %8 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %7, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %9 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %6, <1 x i32> zeroinitializer, <32 x i32> %8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %10 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %9, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %11 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %10, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %12 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %5, <32 x i32> %11, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %13 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %14 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %13, <64 x i16> %12, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %15 = bitcast <64 x i16> %14 to <128 x i8>
  %16 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %15, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %17 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %16, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %18 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %19 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %20 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %19, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %21 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %18, <1 x i32> zeroinitializer, <32 x i32> %20, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %22 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %21, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %23 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %22, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %24 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %25 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %26 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %25, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %27 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %24, <1 x i32> zeroinitializer, <32 x i32> %26, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %28 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %27, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %29 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %28, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %30 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %23, <32 x i32> %29, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %31 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %32 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %30, <128 x i8> %31, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %33 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %34 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %35 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %34, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %36 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %33, <1 x i32> zeroinitializer, <32 x i32> %35, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %37 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %36, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %38 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %37, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %39 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %40 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.4, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %41 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.3, <32 x i32> %40, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %42 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %39, <1 x i32> zeroinitializer, <32 x i32> %41, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %43 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %42, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %44 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %43, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %45 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %38, <32 x i32> %44, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %46 = call <128 x i8> @llvm.hydride.hexagon_V6_lo_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 1024, i32 0)
  %47 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8> %46, <64 x i16> %45, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %48 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %49 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.6, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %50 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.5, <32 x i32> %49, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %51 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %48, <1 x i32> zeroinitializer, <32 x i32> %50, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %52 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %51, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %53 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <32 x i32> %52, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %54 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %55 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.8, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %56 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg.7, <32 x i32> %55, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %57 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %54, <1 x i32> zeroinitializer, <32 x i32> %56, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %58 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %57, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %59 = call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %58, <32 x i32> <i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -32768, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %60 = call <64 x i16> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.2(<32 x i32> %53, <32 x i32> %59, i32 1024, i32 1024, i32 0, i32 512, i32 16, i32 0, i32 512, i32 16, i32 2, i32 32, i32 2, i32 16, i32 0)
  %61 = call <128 x i8> @llvm.hydride.hexagon_V6_vassign_128B_dsl.1(<128 x i16> %arg.9, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0)
  %62 = call <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16> %60, <128 x i8> %61, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %63 = bitcast <64 x i16> %62 to <128 x i8>
  %64 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.1(<128 x i8> %63, <64 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %65 = tail call <64 x i16> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.2(<64 x i16> %64, <64 x i16> zeroinitializer, i32 1024, i32 1024, i32 0, i32 1024, i32 16, i32 1, i32 0)
  %66 = call <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.73(<64 x i16> %17, <64 x i16> %65, i32 1024, i32 1024, i32 0, i32 512, i32 8, i32 0, i32 512, i32 8, i32 2, i32 64, i32 2, i32 8, i32 0)
  %67 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.2(<128 x i8> %66, <128 x i8> %arg.10, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  %68 = tail call <128 x i8> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.3(<128 x i8> %arg.11, <128 x i8> %67, i32 1024, i32 1024, i32 0, i32 1024, i32 8, i32 0, i32 0)
  ret <128 x i8> %68
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.137(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.138(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.139(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.140(<32 x i32> %arg, <1 x i32> %arg.1) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_vsubh_128B_dsl(<32 x i32> %arg, <32 x i32> %0, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 -1, i32 0)
  ret <32 x i32> %1
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.141(<4 x i8> %arg, <128 x i8> %arg.1, <32 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = call <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32> %arg.2, <128 x i8> %arg.1, <4 x i8> %arg, i32 1024, i32 32, i32 0, i32 32, i32 8, i32 -1, i32 0, i32 0, i32 16, i32 0, i32 0)
  ret <32 x i32> %0
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.142(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

define <32 x i32> @hydride.node.conv_nn_hvx_depth5.143(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %1 = call <32 x i32> @llvm.hydride.hexagon_V6_lvsplatw_128B_dsl(<1 x i32> %arg.1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 0)
  %2 = call <32 x i32> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.15(<32 x i32> %arg, <32 x i32> %1, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %3 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vasrhv_128B_dsl(<32 x i32> %0, <1 x i32> zeroinitializer, <32 x i32> %2, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %4 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vminuh_128B_dsl.7(<32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <32 x i32> %3, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  %5 = tail call <32 x i32> @llvm.hydride.hexagon_V6_vmaxw_128B_dsl.4(<32 x i32> %4, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>, i32 1024, i32 1024, i32 0, i32 1024, i32 32, i32 1, i32 0)
  ret <32 x i32> %5
}

declare <32 x i32> @llvm.hydride.hexagon_V6_vrmpybus_acc_128B_dsl(<32 x i32>, <128 x i8>, <4 x i8>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.21(<64 x i16>, <128 x i8>, i32, i32, i32, i32, i32, i32, i32)

declare <64 x i16> @llvm.hydride.hexagon_V6_vaddhsat_128B_dsl.27(<128 x i8>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <128 x i8> @llvm.hydride.hexagon_V6_vpackeh_128B_dsl.73(<64 x i16>, <64 x i16>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

attributes #0 = { mustprogress nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn }
attributes #6 = { argmemonly nofree nounwind willreturn writeonly }
attributes #7 = { alwaysinline mustprogress nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #10 = { nounwind readnone }
attributes #11 = { nounwind "reciprocal-estimates"="none" }
attributes #12 = { nounwind }
attributes #13 = { norecurse nounwind readnone willreturn }
attributes #14 = { nofree nosync nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!"branch_weights", i32 0, i32 1073741824}
!96 = !{!"branch_weights", i32 1073741824, i32 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"bias", !99, i64 0}
!99 = !{!"Halide buffer"}
!100 = !{!101, !101, i64 0}
!101 = !{!"bias_im_global_wrapper$0", !99, i64 0}
!102 = distinct !{!102, !32}
!103 = !{!"branch_weights", i32 -2147483648, i32 0}
!104 = !{!105, !105, i64 0}
!105 = !{!"offset_c", !99, i64 0}
!106 = !{!107, !107, i64 0}
!107 = !{!"filter", !99, i64 0}
!108 = !{!109, !109, i64 0}
!109 = !{!"input", !99, i64 0}
!110 = distinct !{!110, !32}
!111 = !{!112, !112, i64 0}
!112 = !{!"output", !99, i64 0}
!113 = distinct !{!113, !32}
!114 = distinct !{!114, !32}
!115 = distinct !{!115, !32}
!116 = distinct !{!116, !32}
!117 = distinct !{!117, !32}
!118 = !{!"branch_weights", i32 -2147483648, i32 -2147483648}
!119 = distinct !{!119, !32}
