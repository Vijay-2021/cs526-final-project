; ModuleID = 'depthwise_conv_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i32, i32 }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.107 = private constant [9 x i8] c"stride_x\00", align 32
@str.108 = private constant [9 x i8] c"stride_y\00", align 32
@str.109 = private constant [11 x i8] c"dilation_x\00", align 32
@str.110 = private constant [11 x i8] c"dilation_y\00", align 32
@str.111 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.112 = private constant [13 x i8] c"output_shift\00", align 32
@str.113 = private constant [12 x i8] c"output_zero\00", align 32
@str.114 = private constant [11 x i8] c"output_min\00", align 32
@str.115 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.116 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.115, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.116, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.117 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.118 = private constant [22 x i8] c"depthwise_conv_hvx128\00", align 32
@depthwise_conv_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.117, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.118, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #15
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #16
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #16
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #16
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #16
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #16
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #16
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #16
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #16
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #16
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #16
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #16
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #16
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #15
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #16
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #15
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #15
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #15
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #15
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #15
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #15
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #15
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #15
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #16
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #16
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #16
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #16
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #16
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #16
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #16
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #16
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #16
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #16
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #16
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #16
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #16
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #16
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #16
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #16
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #16
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #16
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #16
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #16
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #16
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #16
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #16
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #16
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #16
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #16
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #16
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #16
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #16
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #16
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #16
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #16
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #16
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #16
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #16
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #16
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #15
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #15
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #16
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #15
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #16
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #15
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #16
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #15
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #15
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #16
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #16
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #15
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #15
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #15
  tail call void @abort() #15
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #15
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #15
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #15
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #15
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #16
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #16
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #16
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #16
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #16
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #15
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #16
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #15
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #15
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #15
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #15
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #15
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #15
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #15
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #15
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #15
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #16
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #15
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #15
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #15
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #15
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #15
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #15
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #15
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #15
  %call.i = call i8* @malloc(i32 1024) #15
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #15
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #15
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #15
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #15
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #15
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #15
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #15
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #15
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #15
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #15
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #15
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #15
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #15
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #15
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #15
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #15
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #15
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #15
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #15
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #15
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #15
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #15
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #15
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #15
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #15
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #15
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #15
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #15
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #15
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #15
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #15
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #15
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #15
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #15
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #15
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #15
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #15
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #15
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #15
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #15
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #15
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #15
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #15
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #15
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #15
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #15
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #15
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #15
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #15
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #15
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #15
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #15
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #15
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #15
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #15
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #15
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #15
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #15
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #15
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #15
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #15
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #15
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #15
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #15
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #15
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #15
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #15
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #15
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #15
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #15
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #15
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #15
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #15
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #15
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #15
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #15
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #15
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #15
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #15
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #15
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #15
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #15
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #15
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #15
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #15
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a73, i32 %a68, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c699 = alloca [512 x i32], align 128
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep662 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep662, align 4
  %.fca.1.gep663 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep663, align 4
  %.fca.2.gep664 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep664, align 4
  %sum_filter701 = alloca [128 x i32], align 128
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep, align 4
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep, align 4
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep, align 4
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !43
  %host.i758 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %1 = load i8*, i8** %host.i758, align 4, !tbaa !43
  %dim.i759 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i759, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !49
  %extent.i767 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 1
  %4 = load i32, i32* %extent.i767, align 4, !tbaa !49
  %stride.i769 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 2
  %5 = load i32, i32* %stride.i769, align 4, !tbaa !50
  %extent.i773 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 1
  %6 = load i32, i32* %extent.i773, align 4, !tbaa !49
  %stride.i775 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 2
  %7 = load i32, i32* %stride.i775, align 4, !tbaa !50
  %host.i776 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %8 = load i8*, i8** %host.i776, align 4, !tbaa !43
  %dim.i777 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i777, align 8, !tbaa !46
  %min.i782 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 0
  %10 = load i32, i32* %min.i782, align 4, !tbaa !47
  %stride.i784 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 2
  %11 = load i32, i32* %stride.i784, align 4, !tbaa !50
  %min.i786 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 0
  %12 = load i32, i32* %min.i786, align 4, !tbaa !47
  %stride.i788 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 2
  %13 = load i32, i32* %stride.i788, align 4, !tbaa !50
  %min.i790 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 0
  %14 = load i32, i32* %min.i790, align 4, !tbaa !47
  %extent.i792 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 1
  %15 = load i32, i32* %extent.i792, align 4, !tbaa !49
  %stride.i794 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 2
  %16 = load i32, i32* %stride.i794, align 4, !tbaa !50
  %host.i795 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %17 = load i8*, i8** %host.i795, align 4, !tbaa !43
  %dim.i796 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %18 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i796, align 8, !tbaa !46
  %min.i803 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 0
  %19 = load i32, i32* %min.i803, align 4, !tbaa !47
  %extent.i805 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 1
  %20 = load i32, i32* %extent.i805, align 4, !tbaa !49
  %stride.i807 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 2
  %21 = load i32, i32* %stride.i807, align 4, !tbaa !50
  %min.i809 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 0
  %22 = load i32, i32* %min.i809, align 4, !tbaa !47
  %extent.i811 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 1
  %23 = load i32, i32* %extent.i811, align 4, !tbaa !49
  %stride.i813 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 2
  %24 = load i32, i32* %stride.i813, align 4, !tbaa !50
  %stride.i819 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 3, i32 2
  %25 = load i32, i32* %stride.i819, align 4, !tbaa !50
  %26 = icmp sgt i32 %20, 7
  %27 = and i32 %20, 1
  %28 = icmp eq i32 %27, 0
  %29 = or i1 %26, %28
  %30 = icmp sgt i32 %23, 7
  %31 = and i32 %23, 1
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %30, %32
  %34 = and i1 %29, %33
  %35 = icmp sgt i32 %3, 127
  %36 = and i1 %35, %34
  br i1 %36, label %then_bb, label %next_bb

after_bb.loopexit5059:                            ; preds = %"end for output.s0.b.rebased97"
  store i32 %2183, i32* %.fca.1.gep, align 4, !tbaa !95
  store i32 %2182, i32* %.fca.2.gep, align 4
  br label %after_bb

after_bb:                                         ; preds = %"end for output.s0.b.rebased", %after_bb.loopexit5059
  %.0955 = phi i8* [ %.4, %after_bb.loopexit5059 ], [ %.2, %"end for output.s0.b.rebased" ]
  %.0 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %tobool.not.i.not = icmp eq i8* %.0955, null
  br i1 %tobool.not.i.not, label %if.then.i821, label %if.then.i

if.then.i.loopexit:                               ; preds = %"end for output.s0.y.yo634"
  %37 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i

if.then.i:                                        ; preds = %if.then.i.loopexit, %after_bb
  %.0967 = phi i8* [ %.0, %after_bb ], [ %3536, %if.then.i.loopexit ]
  %.0955966 = phi i8* [ %.0955, %after_bb ], [ %37, %if.then.i.loopexit ]
  %ptr1.i = bitcast i8* %.0955966 to i8**
  %38 = load i8*, i8** %ptr1.i, align 4, !tbaa !97
  %tobool.not.i917 = icmp eq i8* %38, null
  br i1 %tobool.not.i917, label %pseudostack_free.exit, label %land.lhs.true.i920

land.lhs.true.i920:                               ; preds = %if.then.i
  %cumulative_size.i918 = getelementptr inbounds i8, i8* %.0955966, i32 8
  %39 = bitcast i8* %cumulative_size.i918 to i32*
  %40 = load i32, i32* %39, align 4, !tbaa !98
  %cmp.i919 = icmp ugt i32 %40, 16384
  br i1 %cmp.i919, label %if.then.i921, label %pseudostack_free.exit

if.then.i921:                                     ; preds = %land.lhs.true.i920
  call void @halide_free(i8* null, i8* nonnull %38) #15
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i, %land.lhs.true.i920, %if.then.i921
  store i8* null, i8** %ptr1.i, align 4, !tbaa !97
  %size.i922 = getelementptr inbounds i8, i8* %.0955966, i32 4
  %41 = bitcast i8* %size.i922 to i32*
  store i32 0, i32* %41, align 4, !tbaa !95
  %cumulative_size4.i = getelementptr inbounds i8, i8* %.0955966, i32 8
  %42 = bitcast i8* %cumulative_size4.i to i32*
  store i32 0, i32* %42, align 4, !tbaa !98
  br label %if.then.i821

if.then.i821:                                     ; preds = %pseudostack_free.exit, %after_bb, %after_bb223
  %.0960970 = phi i8* [ %3536, %after_bb223 ], [ %.0967, %pseudostack_free.exit ], [ %.0, %after_bb ]
  %ptr1.i924 = bitcast i8* %.0960970 to i8**
  %43 = load i8*, i8** %ptr1.i924, align 4, !tbaa !97
  %tobool.not.i925 = icmp eq i8* %43, null
  br i1 %tobool.not.i925, label %pseudostack_free.exit933, label %land.lhs.true.i928

land.lhs.true.i928:                               ; preds = %if.then.i821
  %cumulative_size.i926 = getelementptr inbounds i8, i8* %.0960970, i32 8
  %44 = bitcast i8* %cumulative_size.i926 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !98
  %cmp.i927 = icmp ugt i32 %45, 16384
  br i1 %cmp.i927, label %if.then.i929, label %pseudostack_free.exit933

if.then.i929:                                     ; preds = %land.lhs.true.i928
  call void @halide_free(i8* null, i8* nonnull %43) #15
  br label %pseudostack_free.exit933

pseudostack_free.exit933:                         ; preds = %if.then.i821, %land.lhs.true.i928, %if.then.i929
  store i8* null, i8** %ptr1.i924, align 4, !tbaa !97
  %size.i930 = getelementptr inbounds i8, i8* %.0960970, i32 4
  %46 = bitcast i8* %size.i930 to i32*
  store i32 0, i32* %46, align 4, !tbaa !95
  %cumulative_size4.i931 = getelementptr inbounds i8, i8* %.0960970, i32 8
  %47 = bitcast i8* %cumulative_size4.i931 to i32*
  store i32 0, i32* %47, align 4, !tbaa !98
  br label %call_destructor.exit825

call_destructor.exit825:                          ; preds = %next_bb68, %pseudostack_free.exit933
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #15
  ret i32 0

then_bb:                                          ; preds = %entry
  %t2201 = icmp slt i32 %a73, 0
  %t2203 = icmp slt i32 %stride_x, 0
  %48 = add nsw i32 %4, -1
  %49 = mul nsw i32 %48, %a73
  %t2207 = select i1 %t2201, i32 %49, i32 0
  %50 = add nsw i32 %20, -1
  %51 = icmp slt i32 %20, 2
  %52 = select i1 %51, i32 %20, i32 2
  %53 = add nsw i32 %52, -2
  %t2208.s = select i1 %t2203, i32 %50, i32 %53
  %t2209 = icmp slt i32 %a68, 0
  %t2211 = icmp slt i32 %stride_y, 0
  %54 = add nsw i32 %6, -1
  %55 = mul nsw i32 %54, %a68
  %t2215 = select i1 %t2209, i32 %55, i32 0
  %56 = add nsw i32 %23, -1
  %57 = icmp slt i32 %23, 2
  %58 = select i1 %57, i32 %23, i32 2
  %59 = add nsw i32 %58, -2
  %t2216.s = select i1 %t2211, i32 %56, i32 %59
  %60 = icmp eq i32 %4, 3
  %61 = icmp eq i32 %6, 3
  %t2217 = and i1 %60, %61
  %t2194 = icmp eq i32 %depth_multiplier, 1
  %a68.op736 = shl i32 %a68, 1
  %62 = select i1 %t2209, i32 %a68.op736, i32 0
  %63 = select i1 %t2217, i32 %62, i32 %t2215
  %64 = add nsw i32 %t2216.s, %22
  %65 = mul nsw i32 %64, %stride_y
  %b16 = add nsw i32 %65, %63
  %a73.op737 = shl i32 %a73, 1
  %66 = select i1 %t2201, i32 %a73.op737, i32 0
  %67 = select i1 %t2217, i32 %66, i32 %t2207
  %68 = add nsw i32 %t2208.s, %19
  %69 = mul nsw i32 %68, %stride_x
  %b15 = add nsw i32 %69, %67
  %70 = select i1 %t2209, i32 0, i32 %55
  %71 = select i1 %t2211, i32 %59, i32 %56
  %72 = add nsw i32 %71, %22
  %73 = mul nsw i32 %72, %stride_y
  %b23 = add nsw i32 %73, %70
  %74 = select i1 %t2201, i32 0, i32 %49
  %75 = select i1 %t2203, i32 %53, i32 %50
  %76 = add nsw i32 %75, %19
  %77 = mul nsw i32 %76, %stride_x
  %b17 = add nsw i32 %77, %74
  %78 = mul nsw i32 %13, %12
  %79 = mul nsw i32 %16, %14
  %80 = mul nsw i32 %11, %10
  %81 = add i32 %78, %80
  %t2195 = add i32 %81, %79
  %82 = add nuw nsw i32 %3, 127
  %83 = ashr i32 %82, 7
  %b10 = add nsw i32 %3, -128
  %84 = icmp sgt i32 %4, 0
  %85 = icmp sgt i32 %6, 0
  %86 = select i1 %85, i32 %6, i32 0
  %.op4970 = shl i32 %4, 8
  %87 = select i1 %84, i32 %.op4970, i32 0
  %88 = mul i32 %87, %86
  %89 = or i32 %88, 134
  %90 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %91 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %92 = shufflevector <64 x i8> %91, <64 x i8> undef, <64 x i32> zeroinitializer
  %93 = zext <64 x i8> %92 to <64 x i16>
  %94 = bitcast <64 x i16> %93 to <32 x i32>
  %95 = bitcast i8* %0 to i32*
  %96 = zext i8 %input_zero to i32
  %97 = bitcast [128 x i32]* %sum_filter701 to <32 x i32>*
  %98 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 32
  %99 = bitcast i32* %98 to <32 x i32>*
  %100 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 64
  %101 = bitcast i32* %100 to <32 x i32>*
  %102 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 96
  %103 = bitcast i32* %102 to <32 x i32>*
  %a13 = add nsw i32 %69, %t2207
  %104 = icmp slt i32 %t2207, %67
  %t2225 = select i1 %104, i32 %a13, i32 %b15
  %a14 = add nsw i32 %65, %t2215
  %105 = icmp slt i32 %t2215, %63
  %t2223 = select i1 %105, i32 %a14, i32 %b16
  %106 = icmp sgt i32 %a73, 0
  %107 = select i1 %106, i32 %a73, i32 0
  %108 = shl nuw nsw i32 %107, 1
  %109 = select i1 %t2217, i32 %108, i32 %74
  %a15 = add nsw i32 %77, %109
  %110 = icmp sgt i32 %109, %74
  %111 = select i1 %110, i32 %a15, i32 %b17
  %a29 = sub nsw i32 %111, %t2225
  %112 = icmp sgt i32 %a68, 0
  %113 = select i1 %112, i32 %a68, i32 0
  %114 = shl nuw nsw i32 %113, 1
  %115 = select i1 %t2217, i32 %114, i32 %70
  %a21 = add nsw i32 %73, %115
  %116 = icmp sgt i32 %115, %70
  %117 = select i1 %116, i32 %a21, i32 %b23
  %a30 = sub nsw i32 %117, %t2223
  %t2228 = sub nsw i32 %b17, %a13
  %t2227 = sub nsw i32 %b23, %a14
  %118 = icmp sgt i32 %15, 0
  %119 = icmp sgt i32 %a29, -1
  %t2531 = select i1 %119, i32 %a29, i32 -1
  %120 = icmp sgt i32 %a30, -1
  %t2532 = select i1 %120, i32 %a30, i32 -1
  %121 = add nsw i32 %t2532, 1
  %122 = shl i32 %t2531, 7
  %t2533 = add i32 %122, 128
  %123 = mul i32 %t2533, %121
  %124 = add i32 %123, 131
  %125 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %126 = icmp sgt i32 %t2227, -1
  %127 = sub i32 %a14, %t2223
  %128 = add nsw i32 %a29, 1
  %129 = sub i32 %a13, %t2225
  %130 = icmp sgt i32 %t2228, -1
  %131 = icmp eq i32 %depth_multiplier, 0
  %t2536 = select i1 %131, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit749 = ashr i32 %depth_multiplier, 31
  %132 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %133 = shufflevector <128 x i32> %132, <128 x i32> undef, <128 x i32> zeroinitializer
  %134 = sub nsw <128 x i32> %133, %t2536
  %135 = xor i32 %depth_multiplier.lobit749, -1
  %136 = sub nsw i32 %135, %depth_multiplier.lobit749
  %137 = insertelement <128 x i32> undef, i32 %136, i32 0
  %138 = shufflevector <128 x i32> %137, <128 x i32> undef, <128 x i32> zeroinitializer
  %139 = xor <128 x i32> %t2536, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg4772 = mul i32 %24, %22
  %.neg4773 = mul i32 %21, %19
  %.neg4774 = mul i32 %25, %14
  %reass.add4776 = add i32 %.neg4772, %.neg4773
  %reass.add4777 = add i32 %reass.add4776, %.neg4774
  %140 = add nuw nsw i32 %23, 1
  %141 = ashr i32 %140, 1
  %142 = icmp sgt i32 %23, 0
  %b33 = add nsw i32 %23, -2
  %143 = sub nsw i32 %a68.op736, %t2223
  %144 = sub nsw i32 %a68, %t2223
  %145 = add nuw nsw i32 %20, 1
  %146 = ashr i32 %145, 1
  %147 = icmp sgt i32 %20, 0
  %b34 = add nsw i32 %20, -2
  %148 = bitcast [512 x i32]* %offset_c699 to <32 x i32>*
  %149 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 32
  %150 = bitcast i32* %149 to <32 x i32>*
  %151 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 64
  %152 = bitcast i32* %151 to <32 x i32>*
  %153 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 96
  %154 = bitcast i32* %153 to <32 x i32>*
  %155 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 128
  %156 = bitcast i32* %155 to <32 x i32>*
  %157 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 160
  %158 = bitcast i32* %157 to <32 x i32>*
  %159 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 192
  %160 = bitcast i32* %159 to <32 x i32>*
  %161 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 224
  %162 = bitcast i32* %161 to <32 x i32>*
  %163 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 256
  %164 = bitcast i32* %163 to <32 x i32>*
  %165 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 288
  %166 = bitcast i32* %165 to <32 x i32>*
  %167 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 320
  %168 = bitcast i32* %167 to <32 x i32>*
  %169 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 352
  %170 = bitcast i32* %169 to <32 x i32>*
  %171 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 384
  %172 = bitcast i32* %171 to <32 x i32>*
  %173 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 416
  %174 = bitcast i32* %173 to <32 x i32>*
  %175 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 448
  %176 = bitcast i32* %175 to <32 x i32>*
  %177 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 480
  %178 = bitcast i32* %177 to <32 x i32>*
  %179 = sub nsw i32 %a73.op737, %t2225
  %180 = sub nsw i32 %a73, %t2225
  %.not743 = icmp eq i32 %output_shift, 0
  %181 = select i1 %.not743, <32 x i32> zeroinitializer, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %182 = add i32 %output_shift, -1
  %183 = zext i8 %output_zero to i16
  %184 = insertelement <128 x i16> undef, i16 %183, i32 0
  %185 = shufflevector <128 x i16> %184, <128 x i16> undef, <128 x i32> zeroinitializer
  %186 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %187 = shufflevector <128 x i8> %186, <128 x i8> undef, <128 x i32> zeroinitializer
  %188 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %189 = shufflevector <128 x i8> %188, <128 x i8> undef, <128 x i32> zeroinitializer
  %190 = bitcast <128 x i16> %185 to <64 x i32>
  %191 = bitcast <128 x i8> %187 to <32 x i32>
  %192 = bitcast <128 x i8> %189 to <32 x i32>
  %193 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %194 = add i32 %4, -1
  %xtraiter5258 = and i32 %4, 3
  %195 = icmp ult i32 %194, 3
  %unroll_iter5261 = and i32 %4, -4
  %lcmp.mod5260.not = icmp eq i32 %xtraiter5258, 0
  %xtraiter5263 = and i32 %4, 3
  %196 = icmp ult i32 %194, 3
  %unroll_iter5270 = and i32 %4, -4
  %lcmp.mod5265.not = icmp eq i32 %xtraiter5263, 0
  %197 = or i32 %t2227, %t2228
  %198 = icmp slt i32 %197, 0
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %35, label %then_bb67, label %next_bb68

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.1 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %497, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 7
  %199 = icmp slt i32 %a8, %b10
  %output.s0.c.c.base = select i1 %199, i32 %a8, i32 %b10
  %200 = load i32, i32* %.fca.1.gep, align 4, !tbaa !95
  %cmp.i = icmp ult i32 %200, %89
  %201 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !97
  br i1 %cmp.i, label %if.then.i826, label %pseudostack_alloc.exit, !prof !99

if.then.i826:                                     ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %201, null
  %202 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i = icmp ugt i32 %202, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i826
  call void @halide_free(i8* null, i8* nonnull %201) #15
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i826
  %add.i = add i32 %202, %89
  store i32 %add.i, i32* %.fca.2.gep, align 4, !tbaa !98
  %cmp7.i = icmp ugt i32 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i32 %89) #15
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 4, !tbaa !97
  store i32 %89, i32* %.fca.1.gep, align 4, !tbaa !95
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %203 = phi i8* [ %storemerge.i, %if.end11.i ], [ %201, %"for output.s0.c.co" ]
  %204 = bitcast i8* %203 to i16*
  %.not738 = icmp eq i8* %203, null
  br i1 %.not738, label %then_bb2, label %"produce filter_zeroed", !prof !100

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %205 = alloca i8*, i32 %89, align 128
  %206 = bitcast i8** %205 to i16*
  store i8** %205, i8*** %90, align 4
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %206, %then_bb2 ], [ %204, %pseudostack_alloc.exit ]
  br i1 %85, label %"for filter_zeroed.s0.y.preheader", label %"consume sum_filter", !prof !101

"for filter_zeroed.s0.y.preheader":               ; preds = %"produce filter_zeroed"
  br i1 %84, label %"for filter_zeroed.s0.y.us", label %"for sum_filter.s1.r19$y.preheader", !prof !101

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %filter_zeroed.s0.y.us = phi i32 [ %315, %"end for filter_zeroed.s0.x.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y.preheader" ]
  %207 = mul nsw i32 %filter_zeroed.s0.y.us, %7
  %208 = add nsw i32 %207, %output.s0.c.c.base
  %209 = mul nsw i32 %filter_zeroed.s0.y.us, %4
  br i1 %195, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %filter_zeroed.s0.x.us = phi i32 [ %293, %"for filter_zeroed.s0.x.us" ], [ 0, %"for filter_zeroed.s0.y.us" ]
  %niter5262 = phi i32 [ %niter5262.nsub.3, %"for filter_zeroed.s0.x.us" ], [ %unroll_iter5261, %"for filter_zeroed.s0.y.us" ]
  %210 = mul nsw i32 %filter_zeroed.s0.x.us, %5
  %211 = add nsw i32 %208, %210
  %212 = getelementptr inbounds i8, i8* %1, i32 %211
  %213 = bitcast i8* %212 to <64 x i8>*
  %214 = load <64 x i8>, <64 x i8>* %213, align 1, !tbaa !102
  %215 = zext <64 x i8> %214 to <64 x i16>
  %216 = bitcast <64 x i16> %215 to <32 x i32>
  %217 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %216, <32 x i32> %94) #11
  %218 = add nsw i32 %filter_zeroed.s0.x.us, %209
  %219 = shl nsw i32 %218, 7
  %220 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %219
  %221 = bitcast i16* %220 to <32 x i32>*
  store <32 x i32> %217, <32 x i32>* %221, align 128, !tbaa !105
  %222 = getelementptr inbounds i8, i8* %212, i32 64
  %223 = bitcast i8* %222 to <64 x i8>*
  %224 = load <64 x i8>, <64 x i8>* %223, align 1, !tbaa !102
  %225 = zext <64 x i8> %224 to <64 x i16>
  %226 = bitcast <64 x i16> %225 to <32 x i32>
  %227 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %226, <32 x i32> %94) #11
  %228 = getelementptr inbounds i16, i16* %220, i32 64
  %229 = bitcast i16* %228 to <32 x i32>*
  store <32 x i32> %227, <32 x i32>* %229, align 128, !tbaa !105
  %230 = or i32 %filter_zeroed.s0.x.us, 1
  %231 = mul nsw i32 %230, %5
  %232 = add nsw i32 %208, %231
  %233 = getelementptr inbounds i8, i8* %1, i32 %232
  %234 = bitcast i8* %233 to <64 x i8>*
  %235 = load <64 x i8>, <64 x i8>* %234, align 1, !tbaa !102
  %236 = zext <64 x i8> %235 to <64 x i16>
  %237 = bitcast <64 x i16> %236 to <32 x i32>
  %238 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %237, <32 x i32> %94) #11
  %239 = add nsw i32 %230, %209
  %240 = shl nsw i32 %239, 7
  %241 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %240
  %242 = bitcast i16* %241 to <32 x i32>*
  store <32 x i32> %238, <32 x i32>* %242, align 128, !tbaa !105
  %243 = getelementptr inbounds i8, i8* %233, i32 64
  %244 = bitcast i8* %243 to <64 x i8>*
  %245 = load <64 x i8>, <64 x i8>* %244, align 1, !tbaa !102
  %246 = zext <64 x i8> %245 to <64 x i16>
  %247 = bitcast <64 x i16> %246 to <32 x i32>
  %248 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %247, <32 x i32> %94) #11
  %249 = getelementptr inbounds i16, i16* %241, i32 64
  %250 = bitcast i16* %249 to <32 x i32>*
  store <32 x i32> %248, <32 x i32>* %250, align 128, !tbaa !105
  %251 = or i32 %filter_zeroed.s0.x.us, 2
  %252 = mul nsw i32 %251, %5
  %253 = add nsw i32 %208, %252
  %254 = getelementptr inbounds i8, i8* %1, i32 %253
  %255 = bitcast i8* %254 to <64 x i8>*
  %256 = load <64 x i8>, <64 x i8>* %255, align 1, !tbaa !102
  %257 = zext <64 x i8> %256 to <64 x i16>
  %258 = bitcast <64 x i16> %257 to <32 x i32>
  %259 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %258, <32 x i32> %94) #11
  %260 = add nsw i32 %251, %209
  %261 = shl nsw i32 %260, 7
  %262 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %261
  %263 = bitcast i16* %262 to <32 x i32>*
  store <32 x i32> %259, <32 x i32>* %263, align 128, !tbaa !105
  %264 = getelementptr inbounds i8, i8* %254, i32 64
  %265 = bitcast i8* %264 to <64 x i8>*
  %266 = load <64 x i8>, <64 x i8>* %265, align 1, !tbaa !102
  %267 = zext <64 x i8> %266 to <64 x i16>
  %268 = bitcast <64 x i16> %267 to <32 x i32>
  %269 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %268, <32 x i32> %94) #11
  %270 = getelementptr inbounds i16, i16* %262, i32 64
  %271 = bitcast i16* %270 to <32 x i32>*
  store <32 x i32> %269, <32 x i32>* %271, align 128, !tbaa !105
  %272 = or i32 %filter_zeroed.s0.x.us, 3
  %273 = mul nsw i32 %272, %5
  %274 = add nsw i32 %208, %273
  %275 = getelementptr inbounds i8, i8* %1, i32 %274
  %276 = bitcast i8* %275 to <64 x i8>*
  %277 = load <64 x i8>, <64 x i8>* %276, align 1, !tbaa !102
  %278 = zext <64 x i8> %277 to <64 x i16>
  %279 = bitcast <64 x i16> %278 to <32 x i32>
  %280 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %279, <32 x i32> %94) #11
  %281 = add nsw i32 %272, %209
  %282 = shl nsw i32 %281, 7
  %283 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %282
  %284 = bitcast i16* %283 to <32 x i32>*
  store <32 x i32> %280, <32 x i32>* %284, align 128, !tbaa !105
  %285 = getelementptr inbounds i8, i8* %275, i32 64
  %286 = bitcast i8* %285 to <64 x i8>*
  %287 = load <64 x i8>, <64 x i8>* %286, align 1, !tbaa !102
  %288 = zext <64 x i8> %287 to <64 x i16>
  %289 = bitcast <64 x i16> %288 to <32 x i32>
  %290 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %289, <32 x i32> %94) #11
  %291 = getelementptr inbounds i16, i16* %283, i32 64
  %292 = bitcast i16* %291 to <32 x i32>*
  store <32 x i32> %290, <32 x i32>* %292, align 128, !tbaa !105
  %293 = add nuw nsw i32 %filter_zeroed.s0.x.us, 4
  %niter5262.nsub.3 = add i32 %niter5262, -4
  %niter5262.ncmp.3 = icmp eq i32 %niter5262.nsub.3, 0
  br i1 %niter5262.ncmp.3, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x.us", %"for filter_zeroed.s0.y.us"
  %filter_zeroed.s0.x.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y.us" ], [ %293, %"for filter_zeroed.s0.x.us" ]
  br i1 %lcmp.mod5260.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil"

"for filter_zeroed.s0.x.us.epil":                 ; preds = %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x.us.epil"
  %filter_zeroed.s0.x.us.epil = phi i32 [ %314, %"for filter_zeroed.s0.x.us.epil" ], [ %filter_zeroed.s0.x.us.unr, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %epil.iter5259 = phi i32 [ %epil.iter5259.sub, %"for filter_zeroed.s0.x.us.epil" ], [ %xtraiter5258, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %294 = mul nsw i32 %filter_zeroed.s0.x.us.epil, %5
  %295 = add nsw i32 %208, %294
  %296 = getelementptr inbounds i8, i8* %1, i32 %295
  %297 = bitcast i8* %296 to <64 x i8>*
  %298 = load <64 x i8>, <64 x i8>* %297, align 1, !tbaa !102
  %299 = zext <64 x i8> %298 to <64 x i16>
  %300 = bitcast <64 x i16> %299 to <32 x i32>
  %301 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %300, <32 x i32> %94) #11
  %302 = add nsw i32 %filter_zeroed.s0.x.us.epil, %209
  %303 = shl nsw i32 %302, 7
  %304 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %303
  %305 = bitcast i16* %304 to <32 x i32>*
  store <32 x i32> %301, <32 x i32>* %305, align 128, !tbaa !105
  %306 = getelementptr inbounds i8, i8* %296, i32 64
  %307 = bitcast i8* %306 to <64 x i8>*
  %308 = load <64 x i8>, <64 x i8>* %307, align 1, !tbaa !102
  %309 = zext <64 x i8> %308 to <64 x i16>
  %310 = bitcast <64 x i16> %309 to <32 x i32>
  %311 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %310, <32 x i32> %94) #11
  %312 = getelementptr inbounds i16, i16* %304, i32 64
  %313 = bitcast i16* %312 to <32 x i32>*
  store <32 x i32> %311, <32 x i32>* %313, align 128, !tbaa !105
  %314 = add nuw nsw i32 %filter_zeroed.s0.x.us.epil, 1
  %epil.iter5259.sub = add i32 %epil.iter5259, -1
  %epil.iter5259.cmp.not = icmp eq i32 %epil.iter5259.sub, 0
  br i1 %epil.iter5259.cmp.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil", !llvm.loop !107

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us.epil", %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa"
  %315 = add nuw nsw i32 %filter_zeroed.s0.y.us, 1
  %.not755.us = icmp eq i32 %315, %6
  br i1 %.not755.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us", %"for filter_zeroed.s0.y.preheader"
  br label %"for sum_filter.s1.r19$y"

"for sum_filter.s1.r19$y":                        ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x"
  %convolved700.sroa.36.0 = phi <32 x i32> [ %convolved700.sroa.36.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved700.sroa.24.0 = phi <32 x i32> [ %convolved700.sroa.24.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved700.sroa.12.0 = phi <32 x i32> [ %convolved700.sroa.12.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved700.sroa.0.0 = phi <32 x i32> [ %convolved700.sroa.0.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %"sum_filter.s1.r19$y" = phi i32 [ %412, %"end for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  br i1 %84, label %"for sum_filter.s1.r19$x.preheader", label %"end for sum_filter.s1.r19$x", !prof !101

"for sum_filter.s1.r19$x.preheader":              ; preds = %"for sum_filter.s1.r19$y"
  %316 = mul nsw i32 %"sum_filter.s1.r19$y", %4
  br i1 %196, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"for sum_filter.s1.r19$x":                        ; preds = %"for sum_filter.s1.r19$x.preheader", %"for sum_filter.s1.r19$x"
  %convolved700.sroa.36.1 = phi <32 x i32> [ %391, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.36.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved700.sroa.24.1 = phi <32 x i32> [ %390, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.24.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved700.sroa.12.1 = phi <32 x i32> [ %389, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.12.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved700.sroa.0.1 = phi <32 x i32> [ %388, %"for sum_filter.s1.r19$x" ], [ %convolved700.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ]
  %"sum_filter.s1.r19$x" = phi i32 [ %392, %"for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$x.preheader" ]
  %niter5271 = phi i32 [ %niter5271.nsub.3, %"for sum_filter.s1.r19$x" ], [ %unroll_iter5270, %"for sum_filter.s1.r19$x.preheader" ]
  %317 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.1, <32 x i32> %convolved700.sroa.0.1)
  %318 = add nsw i32 %"sum_filter.s1.r19$x", %316
  %319 = shl nsw i32 %318, 7
  %320 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %319
  %321 = bitcast i16* %320 to <32 x i32>*
  %322 = load <32 x i32>, <32 x i32>* %321, align 128, !tbaa !105
  %323 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %322) #11
  %324 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %323, <64 x i32> %317) #11
  %325 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.1, <32 x i32> %convolved700.sroa.24.1)
  %326 = getelementptr inbounds i16, i16* %320, i32 64
  %327 = bitcast i16* %326 to <32 x i32>*
  %328 = load <32 x i32>, <32 x i32>* %327, align 128, !tbaa !105
  %329 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %328) #11
  %330 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %329, <64 x i32> %325) #11
  %331 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %324)
  %332 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %324)
  %333 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %330)
  %334 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %330)
  %335 = or i32 %"sum_filter.s1.r19$x", 1
  %336 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %332, <32 x i32> %331)
  %337 = add nsw i32 %335, %316
  %338 = shl nsw i32 %337, 7
  %339 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %338
  %340 = bitcast i16* %339 to <32 x i32>*
  %341 = load <32 x i32>, <32 x i32>* %340, align 128, !tbaa !105
  %342 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %341) #11
  %343 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %342, <64 x i32> %336) #11
  %344 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %334, <32 x i32> %333)
  %345 = getelementptr inbounds i16, i16* %339, i32 64
  %346 = bitcast i16* %345 to <32 x i32>*
  %347 = load <32 x i32>, <32 x i32>* %346, align 128, !tbaa !105
  %348 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %347) #11
  %349 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %348, <64 x i32> %344) #11
  %350 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %343)
  %351 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %343)
  %352 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %349)
  %353 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %349)
  %354 = or i32 %"sum_filter.s1.r19$x", 2
  %355 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %351, <32 x i32> %350)
  %356 = add nsw i32 %354, %316
  %357 = shl nsw i32 %356, 7
  %358 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %357
  %359 = bitcast i16* %358 to <32 x i32>*
  %360 = load <32 x i32>, <32 x i32>* %359, align 128, !tbaa !105
  %361 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %360) #11
  %362 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %361, <64 x i32> %355) #11
  %363 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %353, <32 x i32> %352)
  %364 = getelementptr inbounds i16, i16* %358, i32 64
  %365 = bitcast i16* %364 to <32 x i32>*
  %366 = load <32 x i32>, <32 x i32>* %365, align 128, !tbaa !105
  %367 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %366) #11
  %368 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %367, <64 x i32> %363) #11
  %369 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %362)
  %370 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %362)
  %371 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %368)
  %372 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %368)
  %373 = or i32 %"sum_filter.s1.r19$x", 3
  %374 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %370, <32 x i32> %369)
  %375 = add nsw i32 %373, %316
  %376 = shl nsw i32 %375, 7
  %377 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %376
  %378 = bitcast i16* %377 to <32 x i32>*
  %379 = load <32 x i32>, <32 x i32>* %378, align 128, !tbaa !105
  %380 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %379) #11
  %381 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %380, <64 x i32> %374) #11
  %382 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %372, <32 x i32> %371)
  %383 = getelementptr inbounds i16, i16* %377, i32 64
  %384 = bitcast i16* %383 to <32 x i32>*
  %385 = load <32 x i32>, <32 x i32>* %384, align 128, !tbaa !105
  %386 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %385) #11
  %387 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %386, <64 x i32> %382) #11
  %388 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %381)
  %389 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %381)
  %390 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %387)
  %391 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %387)
  %392 = add nuw nsw i32 %"sum_filter.s1.r19$x", 4
  %niter5271.nsub.3 = add i32 %niter5271, -4
  %niter5271.ncmp.3 = icmp eq i32 %niter5271.nsub.3, 0
  br i1 %niter5271.ncmp.3, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"end for sum_filter.s1.r19$x.loopexit.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x", %"for sum_filter.s1.r19$x.preheader"
  %.lcssa5157.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %388, %"for sum_filter.s1.r19$x" ]
  %.lcssa5156.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %389, %"for sum_filter.s1.r19$x" ]
  %.lcssa5155.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %390, %"for sum_filter.s1.r19$x" ]
  %.lcssa.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %391, %"for sum_filter.s1.r19$x" ]
  %convolved700.sroa.36.1.unr = phi <32 x i32> [ %convolved700.sroa.36.0, %"for sum_filter.s1.r19$x.preheader" ], [ %391, %"for sum_filter.s1.r19$x" ]
  %convolved700.sroa.24.1.unr = phi <32 x i32> [ %convolved700.sroa.24.0, %"for sum_filter.s1.r19$x.preheader" ], [ %390, %"for sum_filter.s1.r19$x" ]
  %convolved700.sroa.12.1.unr = phi <32 x i32> [ %convolved700.sroa.12.0, %"for sum_filter.s1.r19$x.preheader" ], [ %389, %"for sum_filter.s1.r19$x" ]
  %convolved700.sroa.0.1.unr = phi <32 x i32> [ %convolved700.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ], [ %388, %"for sum_filter.s1.r19$x" ]
  %"sum_filter.s1.r19$x.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$x.preheader" ], [ %392, %"for sum_filter.s1.r19$x" ]
  br i1 %lcmp.mod5265.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil"

"for sum_filter.s1.r19$x.epil":                   ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil"
  %convolved700.sroa.36.1.epil = phi <32 x i32> [ %410, %"for sum_filter.s1.r19$x.epil" ], [ %convolved700.sroa.36.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved700.sroa.24.1.epil = phi <32 x i32> [ %409, %"for sum_filter.s1.r19$x.epil" ], [ %convolved700.sroa.24.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved700.sroa.12.1.epil = phi <32 x i32> [ %408, %"for sum_filter.s1.r19$x.epil" ], [ %convolved700.sroa.12.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved700.sroa.0.1.epil = phi <32 x i32> [ %407, %"for sum_filter.s1.r19$x.epil" ], [ %convolved700.sroa.0.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %"sum_filter.s1.r19$x.epil" = phi i32 [ %411, %"for sum_filter.s1.r19$x.epil" ], [ %"sum_filter.s1.r19$x.unr", %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %epil.iter5264 = phi i32 [ %epil.iter5264.sub, %"for sum_filter.s1.r19$x.epil" ], [ %xtraiter5263, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %393 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.1.epil, <32 x i32> %convolved700.sroa.0.1.epil)
  %394 = add nsw i32 %"sum_filter.s1.r19$x.epil", %316
  %395 = shl nsw i32 %394, 7
  %396 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %395
  %397 = bitcast i16* %396 to <32 x i32>*
  %398 = load <32 x i32>, <32 x i32>* %397, align 128, !tbaa !105
  %399 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %398) #11
  %400 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %399, <64 x i32> %393) #11
  %401 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.1.epil, <32 x i32> %convolved700.sroa.24.1.epil)
  %402 = getelementptr inbounds i16, i16* %396, i32 64
  %403 = bitcast i16* %402 to <32 x i32>*
  %404 = load <32 x i32>, <32 x i32>* %403, align 128, !tbaa !105
  %405 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %404) #11
  %406 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %405, <64 x i32> %401) #11
  %407 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %400)
  %408 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %400)
  %409 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %406)
  %410 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %406)
  %411 = add nuw nsw i32 %"sum_filter.s1.r19$x.epil", 1
  %epil.iter5264.sub = add i32 %epil.iter5264, -1
  %epil.iter5264.cmp.not = icmp eq i32 %epil.iter5264.sub, 0
  br i1 %epil.iter5264.cmp.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil", !llvm.loop !108

"end for sum_filter.s1.r19$x":                    ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil", %"for sum_filter.s1.r19$y"
  %convolved700.sroa.36.2 = phi <32 x i32> [ %convolved700.sroa.36.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %410, %"for sum_filter.s1.r19$x.epil" ]
  %convolved700.sroa.24.2 = phi <32 x i32> [ %convolved700.sroa.24.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5155.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %409, %"for sum_filter.s1.r19$x.epil" ]
  %convolved700.sroa.12.2 = phi <32 x i32> [ %convolved700.sroa.12.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5156.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %408, %"for sum_filter.s1.r19$x.epil" ]
  %convolved700.sroa.0.2 = phi <32 x i32> [ %convolved700.sroa.0.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5157.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %407, %"for sum_filter.s1.r19$x.epil" ]
  %412 = add nuw nsw i32 %"sum_filter.s1.r19$y", 1
  %.not753 = icmp eq i32 %412, %6
  br i1 %.not753, label %"consume sum_filter", label %"for sum_filter.s1.r19$y"

"consume sum_filter":                             ; preds = %"end for sum_filter.s1.r19$x", %"produce filter_zeroed"
  %convolved700.sroa.36.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.36.2, %"end for sum_filter.s1.r19$x" ]
  %convolved700.sroa.24.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.24.2, %"end for sum_filter.s1.r19$x" ]
  %convolved700.sroa.12.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.12.2, %"end for sum_filter.s1.r19$x" ]
  %convolved700.sroa.0.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved700.sroa.0.2, %"end for sum_filter.s1.r19$x" ]
  %413 = getelementptr inbounds i32, i32* %95, i32 %output.s0.c.c.base
  %414 = bitcast i32* %413 to <32 x i32>*
  %415 = load <32 x i32>, <32 x i32>* %414, align 4, !tbaa !109
  %416 = getelementptr inbounds i32, i32* %413, i32 32
  %417 = bitcast i32* %416 to <32 x i32>*
  %418 = load <32 x i32>, <32 x i32>* %417, align 4, !tbaa !109
  %419 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %418, <32 x i32> %415)
  %420 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.3, <32 x i32> %convolved700.sroa.0.3)
  %421 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %96) #11
  %422 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %420) #11
  %423 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %421, <32 x i32> %422) #11
  %424 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %423, <32 x i32> %421, <32 x i32> %422) #11
  %425 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %420) #11
  %426 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %421, <32 x i32> %425) #11
  %427 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %426, <32 x i32> %421, <32 x i32> %425) #11
  %428 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %424, <32 x i32> %427) #11
  %429 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %419, <64 x i32> %428) #11
  %430 = getelementptr inbounds i32, i32* %413, i32 64
  %431 = bitcast i32* %430 to <32 x i32>*
  %432 = load <32 x i32>, <32 x i32>* %431, align 4, !tbaa !109
  %433 = getelementptr inbounds i32, i32* %413, i32 96
  %434 = bitcast i32* %433 to <32 x i32>*
  %435 = load <32 x i32>, <32 x i32>* %434, align 4, !tbaa !109
  %436 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %435, <32 x i32> %432)
  %437 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.3, <32 x i32> %convolved700.sroa.24.3)
  %438 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %437) #11
  %439 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %421, <32 x i32> %438) #11
  %440 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %439, <32 x i32> %421, <32 x i32> %438) #11
  %441 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %437) #11
  %442 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %421, <32 x i32> %441) #11
  %443 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %442, <32 x i32> %421, <32 x i32> %441) #11
  %444 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %440, <32 x i32> %443) #11
  %445 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %436, <64 x i32> %444) #11
  %446 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %429)
  store <32 x i32> %446, <32 x i32>* %97, align 128, !tbaa !111
  %447 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %429)
  store <32 x i32> %447, <32 x i32>* %99, align 128, !tbaa !119
  %448 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %445)
  store <32 x i32> %448, <32 x i32>* %101, align 128, !tbaa !121
  %449 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %445)
  store <32 x i32> %449, <32 x i32>* %103, align 128, !tbaa !124
  br i1 %118, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !101

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %450 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base, i32 0
  %451 = shufflevector <128 x i32> %450, <128 x i32> undef, <128 x i32> zeroinitializer
  %452 = add nsw <128 x i32> %451, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit748 = ashr <128 x i32> %452, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %453 = sub nsw <128 x i32> %452, %.lobit748
  %454 = and <128 x i32> %.lobit748, %138
  %455 = sub i32 %output.s0.c.c.base, %t2195
  %456 = sub i32 %output.s0.c.c.base, %reass.add4777
  %457 = getelementptr inbounds i16, i16* %filter_zeroed, i32 768
  %458 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1024
  %459 = bitcast i16* %458 to <32 x i32>*
  %460 = getelementptr inbounds i16, i16* %filter_zeroed, i32 896
  %461 = bitcast i16* %460 to <32 x i32>*
  %462 = bitcast i16* %457 to <32 x i32>*
  %463 = getelementptr inbounds i16, i16* %filter_zeroed, i32 384
  %464 = getelementptr inbounds i16, i16* %filter_zeroed, i32 640
  %465 = bitcast i16* %464 to <32 x i32>*
  %466 = getelementptr inbounds i16, i16* %filter_zeroed, i32 512
  %467 = bitcast i16* %466 to <32 x i32>*
  %468 = bitcast i16* %463 to <32 x i32>*
  %469 = getelementptr inbounds i16, i16* %filter_zeroed, i32 256
  %470 = bitcast i16* %469 to <32 x i32>*
  %471 = getelementptr inbounds i16, i16* %filter_zeroed, i32 128
  %472 = bitcast i16* %471 to <32 x i32>*
  %473 = bitcast i16* %filter_zeroed to <32 x i32>*
  %474 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1088
  %475 = bitcast i16* %474 to <32 x i32>*
  %476 = getelementptr inbounds i16, i16* %filter_zeroed, i32 960
  %477 = bitcast i16* %476 to <32 x i32>*
  %478 = getelementptr inbounds i16, i16* %filter_zeroed, i32 832
  %479 = bitcast i16* %478 to <32 x i32>*
  %480 = getelementptr inbounds i16, i16* %filter_zeroed, i32 704
  %481 = bitcast i16* %480 to <32 x i32>*
  %482 = getelementptr inbounds i16, i16* %filter_zeroed, i32 576
  %483 = bitcast i16* %482 to <32 x i32>*
  %484 = getelementptr inbounds i16, i16* %filter_zeroed, i32 448
  %485 = bitcast i16* %484 to <32 x i32>*
  %486 = getelementptr inbounds i16, i16* %filter_zeroed, i32 320
  %487 = bitcast i16* %486 to <32 x i32>*
  %488 = getelementptr inbounds i16, i16* %filter_zeroed, i32 192
  %489 = bitcast i16* %488 to <32 x i32>*
  %490 = getelementptr inbounds i16, i16* %filter_zeroed, i32 64
  %491 = bitcast i16* %490 to <32 x i32>*
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %output.s0.b.rebased = phi i32 [ %1093, %"end for output.s0.y.yo" ], [ 0, %"for output.s0.b.rebased.preheader" ]
  %492 = load i32, i32* %.fca.1.gep663, align 4, !tbaa !95
  %cmp.i828 = icmp ult i32 %492, %124
  %493 = load i8*, i8** %.fca.0.gep662, align 4, !tbaa !97
  br i1 %cmp.i828, label %if.then.i831, label %pseudostack_alloc.exit844, !prof !99

if.then.i831:                                     ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i830 = icmp ne i8* %493, null
  %494 = load i32, i32* %.fca.2.gep664, align 4
  %cmp2.i833 = icmp ugt i32 %494, 16384
  %or.cond4694 = and i1 %tobool1.not.i830, %cmp2.i833
  br i1 %or.cond4694, label %if.then3.i835, label %if.end.i839

if.then3.i835:                                    ; preds = %if.then.i831
  call void @halide_free(i8* null, i8* nonnull %493) #15
  %.pre5043 = load i32, i32* %.fca.2.gep664, align 4, !tbaa !98
  br label %if.end.i839

if.end.i839:                                      ; preds = %if.then3.i835, %if.then.i831
  %495 = phi i32 [ %.pre5043, %if.then3.i835 ], [ %494, %if.then.i831 ]
  %add.i837 = add i32 %495, %124
  store i32 %add.i837, i32* %.fca.2.gep664, align 4, !tbaa !98
  %cmp7.i838 = icmp ugt i32 %add.i837, 16384
  br i1 %cmp7.i838, label %if.then8.i841, label %if.end11.i843

if.then8.i841:                                    ; preds = %if.end.i839
  %call.i840 = call i8* @halide_malloc(i8* null, i32 %124) #15
  br label %if.end11.i843

if.end11.i843:                                    ; preds = %if.then8.i841, %if.end.i839
  %storemerge.i842 = phi i8* [ %call.i840, %if.then8.i841 ], [ null, %if.end.i839 ]
  store i8* %storemerge.i842, i8** %.fca.0.gep662, align 4, !tbaa !97
  store i32 %124, i32* %.fca.1.gep663, align 4, !tbaa !95
  br label %pseudostack_alloc.exit844

pseudostack_alloc.exit844:                        ; preds = %"for output.s0.b.rebased", %if.end11.i843
  %496 = phi i8* [ %storemerge.i842, %if.end11.i843 ], [ %493, %"for output.s0.b.rebased" ]
  %.not740 = icmp eq i8* %496, null
  br i1 %.not740, label %then_bb5, label %"produce resampled_input", !prof !100

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.1, %"consume sum_filter" ], [ %193, %"end for output.s0.y.yo" ]
  %497 = add nuw nsw i32 %output.s0.c.co, 1
  %.not739 = icmp eq i32 %497, %83
  br i1 %.not739, label %after_bb, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit844
  %498 = alloca i8*, i32 %124, align 128
  %499 = bitcast i8** %498 to i8*
  store i8** %498, i8*** %125, align 4
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit844, %then_bb5
  %resampled_input = phi i8* [ %499, %then_bb5 ], [ %496, %pseudostack_alloc.exit844 ]
  %500 = add nsw i32 %output.s0.b.rebased, %14
  br i1 %t2194, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %501 = mul nsw i32 %500, %16
  %t2239 = add nsw i32 %455, %501
  br i1 %198, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us", !prof !126

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %resampled_input.s0.y.rebased.us = phi i32 [ %518, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %502 = add nsw i32 %127, %resampled_input.s0.y.rebased.us
  %503 = mul nsw i32 %502, %128
  %t2243.us = add nsw i32 %129, %503
  %504 = add nsw i32 %resampled_input.s0.y.rebased.us, %a14
  %505 = mul nsw i32 %504, %13
  %506 = add nsw i32 %t2239, %505
  br label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %resampled_input.s0.x.rebased.us = phi i32 [ %517, %"for resampled_input.s0.x.rebased.us" ], [ 0, %"for resampled_input.s0.y.rebased.us" ]
  %507 = add nsw i32 %resampled_input.s0.x.rebased.us, %a13
  %508 = mul nsw i32 %507, %11
  %509 = add nsw i32 %506, %508
  %510 = getelementptr inbounds i8, i8* %8, i32 %509
  %511 = bitcast i8* %510 to <128 x i8>*
  %512 = load <128 x i8>, <128 x i8>* %511, align 1, !tbaa !127
  %513 = add nsw i32 %t2243.us, %resampled_input.s0.x.rebased.us
  %514 = shl nsw i32 %513, 7
  %515 = getelementptr inbounds i8, i8* %resampled_input, i32 %514
  %516 = bitcast i8* %515 to <128 x i8>*
  store <128 x i8> %512, <128 x i8>* %516, align 128, !tbaa !129
  %517 = add nuw nsw i32 %resampled_input.s0.x.rebased.us, 1
  %.not752.us = icmp eq i32 %resampled_input.s0.x.rebased.us, %t2228
  br i1 %.not752.us, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us"
  %518 = add nuw nsw i32 %resampled_input.s0.y.rebased.us, 1
  %.not751.us = icmp eq i32 %resampled_input.s0.y.rebased.us, %t2227
  br i1 %.not751.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  br i1 %126, label %"for resampled_input.s0.y.rebased9.preheader", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader":    ; preds = %next_bb8
  %519 = mul nsw i32 %500, %16
  %520 = sub i32 %519, %t2195
  br i1 %130, label %"for resampled_input.s0.y.rebased9.preheader.split.us", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased9.preheader"
  %521 = sdiv <128 x i32> %453, %134
  %522 = add nsw <128 x i32> %521, %454
  %523 = and <128 x i32> %522, %139
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %resampled_input.s0.y.rebased11.us = phi i32 [ %1051, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %524 = add nsw i32 %127, %resampled_input.s0.y.rebased11.us
  %525 = mul nsw i32 %524, %128
  %t2248.us = add nsw i32 %129, %525
  %526 = add nsw i32 %resampled_input.s0.y.rebased11.us, %a14
  %527 = mul nsw i32 %526, %13
  %t2247.us = add nsw i32 %520, %527
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %resampled_input.s0.x.rebased14.us = phi i32 [ %1050, %"for resampled_input.s0.x.rebased12.us" ], [ 0, %"for resampled_input.s0.y.rebased9.us" ]
  %528 = add nsw i32 %resampled_input.s0.x.rebased14.us, %a13
  %529 = mul nsw i32 %528, %11
  %530 = add nsw i32 %t2247.us, %529
  %531 = insertelement <128 x i32> undef, i32 %530, i32 0
  %532 = shufflevector <128 x i32> %531, <128 x i32> undef, <128 x i32> zeroinitializer
  %533 = add nsw <128 x i32> %532, %523
  %534 = extractelement <128 x i32> %533, i32 0
  %535 = getelementptr inbounds i8, i8* %8, i32 %534
  %536 = load i8, i8* %535, align 1, !tbaa !127
  %537 = insertelement <128 x i8> undef, i8 %536, i32 0
  %538 = extractelement <128 x i32> %533, i32 1
  %539 = getelementptr inbounds i8, i8* %8, i32 %538
  %540 = load i8, i8* %539, align 1, !tbaa !127
  %541 = insertelement <128 x i8> %537, i8 %540, i32 1
  %542 = extractelement <128 x i32> %533, i32 2
  %543 = getelementptr inbounds i8, i8* %8, i32 %542
  %544 = load i8, i8* %543, align 1, !tbaa !127
  %545 = insertelement <128 x i8> %541, i8 %544, i32 2
  %546 = extractelement <128 x i32> %533, i32 3
  %547 = getelementptr inbounds i8, i8* %8, i32 %546
  %548 = load i8, i8* %547, align 1, !tbaa !127
  %549 = insertelement <128 x i8> %545, i8 %548, i32 3
  %550 = extractelement <128 x i32> %533, i32 4
  %551 = getelementptr inbounds i8, i8* %8, i32 %550
  %552 = load i8, i8* %551, align 1, !tbaa !127
  %553 = insertelement <128 x i8> %549, i8 %552, i32 4
  %554 = extractelement <128 x i32> %533, i32 5
  %555 = getelementptr inbounds i8, i8* %8, i32 %554
  %556 = load i8, i8* %555, align 1, !tbaa !127
  %557 = insertelement <128 x i8> %553, i8 %556, i32 5
  %558 = extractelement <128 x i32> %533, i32 6
  %559 = getelementptr inbounds i8, i8* %8, i32 %558
  %560 = load i8, i8* %559, align 1, !tbaa !127
  %561 = insertelement <128 x i8> %557, i8 %560, i32 6
  %562 = extractelement <128 x i32> %533, i32 7
  %563 = getelementptr inbounds i8, i8* %8, i32 %562
  %564 = load i8, i8* %563, align 1, !tbaa !127
  %565 = insertelement <128 x i8> %561, i8 %564, i32 7
  %566 = extractelement <128 x i32> %533, i32 8
  %567 = getelementptr inbounds i8, i8* %8, i32 %566
  %568 = load i8, i8* %567, align 1, !tbaa !127
  %569 = insertelement <128 x i8> %565, i8 %568, i32 8
  %570 = extractelement <128 x i32> %533, i32 9
  %571 = getelementptr inbounds i8, i8* %8, i32 %570
  %572 = load i8, i8* %571, align 1, !tbaa !127
  %573 = insertelement <128 x i8> %569, i8 %572, i32 9
  %574 = extractelement <128 x i32> %533, i32 10
  %575 = getelementptr inbounds i8, i8* %8, i32 %574
  %576 = load i8, i8* %575, align 1, !tbaa !127
  %577 = insertelement <128 x i8> %573, i8 %576, i32 10
  %578 = extractelement <128 x i32> %533, i32 11
  %579 = getelementptr inbounds i8, i8* %8, i32 %578
  %580 = load i8, i8* %579, align 1, !tbaa !127
  %581 = insertelement <128 x i8> %577, i8 %580, i32 11
  %582 = extractelement <128 x i32> %533, i32 12
  %583 = getelementptr inbounds i8, i8* %8, i32 %582
  %584 = load i8, i8* %583, align 1, !tbaa !127
  %585 = insertelement <128 x i8> %581, i8 %584, i32 12
  %586 = extractelement <128 x i32> %533, i32 13
  %587 = getelementptr inbounds i8, i8* %8, i32 %586
  %588 = load i8, i8* %587, align 1, !tbaa !127
  %589 = insertelement <128 x i8> %585, i8 %588, i32 13
  %590 = extractelement <128 x i32> %533, i32 14
  %591 = getelementptr inbounds i8, i8* %8, i32 %590
  %592 = load i8, i8* %591, align 1, !tbaa !127
  %593 = insertelement <128 x i8> %589, i8 %592, i32 14
  %594 = extractelement <128 x i32> %533, i32 15
  %595 = getelementptr inbounds i8, i8* %8, i32 %594
  %596 = load i8, i8* %595, align 1, !tbaa !127
  %597 = insertelement <128 x i8> %593, i8 %596, i32 15
  %598 = extractelement <128 x i32> %533, i32 16
  %599 = getelementptr inbounds i8, i8* %8, i32 %598
  %600 = load i8, i8* %599, align 1, !tbaa !127
  %601 = insertelement <128 x i8> %597, i8 %600, i32 16
  %602 = extractelement <128 x i32> %533, i32 17
  %603 = getelementptr inbounds i8, i8* %8, i32 %602
  %604 = load i8, i8* %603, align 1, !tbaa !127
  %605 = insertelement <128 x i8> %601, i8 %604, i32 17
  %606 = extractelement <128 x i32> %533, i32 18
  %607 = getelementptr inbounds i8, i8* %8, i32 %606
  %608 = load i8, i8* %607, align 1, !tbaa !127
  %609 = insertelement <128 x i8> %605, i8 %608, i32 18
  %610 = extractelement <128 x i32> %533, i32 19
  %611 = getelementptr inbounds i8, i8* %8, i32 %610
  %612 = load i8, i8* %611, align 1, !tbaa !127
  %613 = insertelement <128 x i8> %609, i8 %612, i32 19
  %614 = extractelement <128 x i32> %533, i32 20
  %615 = getelementptr inbounds i8, i8* %8, i32 %614
  %616 = load i8, i8* %615, align 1, !tbaa !127
  %617 = insertelement <128 x i8> %613, i8 %616, i32 20
  %618 = extractelement <128 x i32> %533, i32 21
  %619 = getelementptr inbounds i8, i8* %8, i32 %618
  %620 = load i8, i8* %619, align 1, !tbaa !127
  %621 = insertelement <128 x i8> %617, i8 %620, i32 21
  %622 = extractelement <128 x i32> %533, i32 22
  %623 = getelementptr inbounds i8, i8* %8, i32 %622
  %624 = load i8, i8* %623, align 1, !tbaa !127
  %625 = insertelement <128 x i8> %621, i8 %624, i32 22
  %626 = extractelement <128 x i32> %533, i32 23
  %627 = getelementptr inbounds i8, i8* %8, i32 %626
  %628 = load i8, i8* %627, align 1, !tbaa !127
  %629 = insertelement <128 x i8> %625, i8 %628, i32 23
  %630 = extractelement <128 x i32> %533, i32 24
  %631 = getelementptr inbounds i8, i8* %8, i32 %630
  %632 = load i8, i8* %631, align 1, !tbaa !127
  %633 = insertelement <128 x i8> %629, i8 %632, i32 24
  %634 = extractelement <128 x i32> %533, i32 25
  %635 = getelementptr inbounds i8, i8* %8, i32 %634
  %636 = load i8, i8* %635, align 1, !tbaa !127
  %637 = insertelement <128 x i8> %633, i8 %636, i32 25
  %638 = extractelement <128 x i32> %533, i32 26
  %639 = getelementptr inbounds i8, i8* %8, i32 %638
  %640 = load i8, i8* %639, align 1, !tbaa !127
  %641 = insertelement <128 x i8> %637, i8 %640, i32 26
  %642 = extractelement <128 x i32> %533, i32 27
  %643 = getelementptr inbounds i8, i8* %8, i32 %642
  %644 = load i8, i8* %643, align 1, !tbaa !127
  %645 = insertelement <128 x i8> %641, i8 %644, i32 27
  %646 = extractelement <128 x i32> %533, i32 28
  %647 = getelementptr inbounds i8, i8* %8, i32 %646
  %648 = load i8, i8* %647, align 1, !tbaa !127
  %649 = insertelement <128 x i8> %645, i8 %648, i32 28
  %650 = extractelement <128 x i32> %533, i32 29
  %651 = getelementptr inbounds i8, i8* %8, i32 %650
  %652 = load i8, i8* %651, align 1, !tbaa !127
  %653 = insertelement <128 x i8> %649, i8 %652, i32 29
  %654 = extractelement <128 x i32> %533, i32 30
  %655 = getelementptr inbounds i8, i8* %8, i32 %654
  %656 = load i8, i8* %655, align 1, !tbaa !127
  %657 = insertelement <128 x i8> %653, i8 %656, i32 30
  %658 = extractelement <128 x i32> %533, i32 31
  %659 = getelementptr inbounds i8, i8* %8, i32 %658
  %660 = load i8, i8* %659, align 1, !tbaa !127
  %661 = insertelement <128 x i8> %657, i8 %660, i32 31
  %662 = extractelement <128 x i32> %533, i32 32
  %663 = getelementptr inbounds i8, i8* %8, i32 %662
  %664 = load i8, i8* %663, align 1, !tbaa !127
  %665 = insertelement <128 x i8> %661, i8 %664, i32 32
  %666 = extractelement <128 x i32> %533, i32 33
  %667 = getelementptr inbounds i8, i8* %8, i32 %666
  %668 = load i8, i8* %667, align 1, !tbaa !127
  %669 = insertelement <128 x i8> %665, i8 %668, i32 33
  %670 = extractelement <128 x i32> %533, i32 34
  %671 = getelementptr inbounds i8, i8* %8, i32 %670
  %672 = load i8, i8* %671, align 1, !tbaa !127
  %673 = insertelement <128 x i8> %669, i8 %672, i32 34
  %674 = extractelement <128 x i32> %533, i32 35
  %675 = getelementptr inbounds i8, i8* %8, i32 %674
  %676 = load i8, i8* %675, align 1, !tbaa !127
  %677 = insertelement <128 x i8> %673, i8 %676, i32 35
  %678 = extractelement <128 x i32> %533, i32 36
  %679 = getelementptr inbounds i8, i8* %8, i32 %678
  %680 = load i8, i8* %679, align 1, !tbaa !127
  %681 = insertelement <128 x i8> %677, i8 %680, i32 36
  %682 = extractelement <128 x i32> %533, i32 37
  %683 = getelementptr inbounds i8, i8* %8, i32 %682
  %684 = load i8, i8* %683, align 1, !tbaa !127
  %685 = insertelement <128 x i8> %681, i8 %684, i32 37
  %686 = extractelement <128 x i32> %533, i32 38
  %687 = getelementptr inbounds i8, i8* %8, i32 %686
  %688 = load i8, i8* %687, align 1, !tbaa !127
  %689 = insertelement <128 x i8> %685, i8 %688, i32 38
  %690 = extractelement <128 x i32> %533, i32 39
  %691 = getelementptr inbounds i8, i8* %8, i32 %690
  %692 = load i8, i8* %691, align 1, !tbaa !127
  %693 = insertelement <128 x i8> %689, i8 %692, i32 39
  %694 = extractelement <128 x i32> %533, i32 40
  %695 = getelementptr inbounds i8, i8* %8, i32 %694
  %696 = load i8, i8* %695, align 1, !tbaa !127
  %697 = insertelement <128 x i8> %693, i8 %696, i32 40
  %698 = extractelement <128 x i32> %533, i32 41
  %699 = getelementptr inbounds i8, i8* %8, i32 %698
  %700 = load i8, i8* %699, align 1, !tbaa !127
  %701 = insertelement <128 x i8> %697, i8 %700, i32 41
  %702 = extractelement <128 x i32> %533, i32 42
  %703 = getelementptr inbounds i8, i8* %8, i32 %702
  %704 = load i8, i8* %703, align 1, !tbaa !127
  %705 = insertelement <128 x i8> %701, i8 %704, i32 42
  %706 = extractelement <128 x i32> %533, i32 43
  %707 = getelementptr inbounds i8, i8* %8, i32 %706
  %708 = load i8, i8* %707, align 1, !tbaa !127
  %709 = insertelement <128 x i8> %705, i8 %708, i32 43
  %710 = extractelement <128 x i32> %533, i32 44
  %711 = getelementptr inbounds i8, i8* %8, i32 %710
  %712 = load i8, i8* %711, align 1, !tbaa !127
  %713 = insertelement <128 x i8> %709, i8 %712, i32 44
  %714 = extractelement <128 x i32> %533, i32 45
  %715 = getelementptr inbounds i8, i8* %8, i32 %714
  %716 = load i8, i8* %715, align 1, !tbaa !127
  %717 = insertelement <128 x i8> %713, i8 %716, i32 45
  %718 = extractelement <128 x i32> %533, i32 46
  %719 = getelementptr inbounds i8, i8* %8, i32 %718
  %720 = load i8, i8* %719, align 1, !tbaa !127
  %721 = insertelement <128 x i8> %717, i8 %720, i32 46
  %722 = extractelement <128 x i32> %533, i32 47
  %723 = getelementptr inbounds i8, i8* %8, i32 %722
  %724 = load i8, i8* %723, align 1, !tbaa !127
  %725 = insertelement <128 x i8> %721, i8 %724, i32 47
  %726 = extractelement <128 x i32> %533, i32 48
  %727 = getelementptr inbounds i8, i8* %8, i32 %726
  %728 = load i8, i8* %727, align 1, !tbaa !127
  %729 = insertelement <128 x i8> %725, i8 %728, i32 48
  %730 = extractelement <128 x i32> %533, i32 49
  %731 = getelementptr inbounds i8, i8* %8, i32 %730
  %732 = load i8, i8* %731, align 1, !tbaa !127
  %733 = insertelement <128 x i8> %729, i8 %732, i32 49
  %734 = extractelement <128 x i32> %533, i32 50
  %735 = getelementptr inbounds i8, i8* %8, i32 %734
  %736 = load i8, i8* %735, align 1, !tbaa !127
  %737 = insertelement <128 x i8> %733, i8 %736, i32 50
  %738 = extractelement <128 x i32> %533, i32 51
  %739 = getelementptr inbounds i8, i8* %8, i32 %738
  %740 = load i8, i8* %739, align 1, !tbaa !127
  %741 = insertelement <128 x i8> %737, i8 %740, i32 51
  %742 = extractelement <128 x i32> %533, i32 52
  %743 = getelementptr inbounds i8, i8* %8, i32 %742
  %744 = load i8, i8* %743, align 1, !tbaa !127
  %745 = insertelement <128 x i8> %741, i8 %744, i32 52
  %746 = extractelement <128 x i32> %533, i32 53
  %747 = getelementptr inbounds i8, i8* %8, i32 %746
  %748 = load i8, i8* %747, align 1, !tbaa !127
  %749 = insertelement <128 x i8> %745, i8 %748, i32 53
  %750 = extractelement <128 x i32> %533, i32 54
  %751 = getelementptr inbounds i8, i8* %8, i32 %750
  %752 = load i8, i8* %751, align 1, !tbaa !127
  %753 = insertelement <128 x i8> %749, i8 %752, i32 54
  %754 = extractelement <128 x i32> %533, i32 55
  %755 = getelementptr inbounds i8, i8* %8, i32 %754
  %756 = load i8, i8* %755, align 1, !tbaa !127
  %757 = insertelement <128 x i8> %753, i8 %756, i32 55
  %758 = extractelement <128 x i32> %533, i32 56
  %759 = getelementptr inbounds i8, i8* %8, i32 %758
  %760 = load i8, i8* %759, align 1, !tbaa !127
  %761 = insertelement <128 x i8> %757, i8 %760, i32 56
  %762 = extractelement <128 x i32> %533, i32 57
  %763 = getelementptr inbounds i8, i8* %8, i32 %762
  %764 = load i8, i8* %763, align 1, !tbaa !127
  %765 = insertelement <128 x i8> %761, i8 %764, i32 57
  %766 = extractelement <128 x i32> %533, i32 58
  %767 = getelementptr inbounds i8, i8* %8, i32 %766
  %768 = load i8, i8* %767, align 1, !tbaa !127
  %769 = insertelement <128 x i8> %765, i8 %768, i32 58
  %770 = extractelement <128 x i32> %533, i32 59
  %771 = getelementptr inbounds i8, i8* %8, i32 %770
  %772 = load i8, i8* %771, align 1, !tbaa !127
  %773 = insertelement <128 x i8> %769, i8 %772, i32 59
  %774 = extractelement <128 x i32> %533, i32 60
  %775 = getelementptr inbounds i8, i8* %8, i32 %774
  %776 = load i8, i8* %775, align 1, !tbaa !127
  %777 = insertelement <128 x i8> %773, i8 %776, i32 60
  %778 = extractelement <128 x i32> %533, i32 61
  %779 = getelementptr inbounds i8, i8* %8, i32 %778
  %780 = load i8, i8* %779, align 1, !tbaa !127
  %781 = insertelement <128 x i8> %777, i8 %780, i32 61
  %782 = extractelement <128 x i32> %533, i32 62
  %783 = getelementptr inbounds i8, i8* %8, i32 %782
  %784 = load i8, i8* %783, align 1, !tbaa !127
  %785 = insertelement <128 x i8> %781, i8 %784, i32 62
  %786 = extractelement <128 x i32> %533, i32 63
  %787 = getelementptr inbounds i8, i8* %8, i32 %786
  %788 = load i8, i8* %787, align 1, !tbaa !127
  %789 = insertelement <128 x i8> %785, i8 %788, i32 63
  %790 = extractelement <128 x i32> %533, i32 64
  %791 = getelementptr inbounds i8, i8* %8, i32 %790
  %792 = load i8, i8* %791, align 1, !tbaa !127
  %793 = insertelement <128 x i8> %789, i8 %792, i32 64
  %794 = extractelement <128 x i32> %533, i32 65
  %795 = getelementptr inbounds i8, i8* %8, i32 %794
  %796 = load i8, i8* %795, align 1, !tbaa !127
  %797 = insertelement <128 x i8> %793, i8 %796, i32 65
  %798 = extractelement <128 x i32> %533, i32 66
  %799 = getelementptr inbounds i8, i8* %8, i32 %798
  %800 = load i8, i8* %799, align 1, !tbaa !127
  %801 = insertelement <128 x i8> %797, i8 %800, i32 66
  %802 = extractelement <128 x i32> %533, i32 67
  %803 = getelementptr inbounds i8, i8* %8, i32 %802
  %804 = load i8, i8* %803, align 1, !tbaa !127
  %805 = insertelement <128 x i8> %801, i8 %804, i32 67
  %806 = extractelement <128 x i32> %533, i32 68
  %807 = getelementptr inbounds i8, i8* %8, i32 %806
  %808 = load i8, i8* %807, align 1, !tbaa !127
  %809 = insertelement <128 x i8> %805, i8 %808, i32 68
  %810 = extractelement <128 x i32> %533, i32 69
  %811 = getelementptr inbounds i8, i8* %8, i32 %810
  %812 = load i8, i8* %811, align 1, !tbaa !127
  %813 = insertelement <128 x i8> %809, i8 %812, i32 69
  %814 = extractelement <128 x i32> %533, i32 70
  %815 = getelementptr inbounds i8, i8* %8, i32 %814
  %816 = load i8, i8* %815, align 1, !tbaa !127
  %817 = insertelement <128 x i8> %813, i8 %816, i32 70
  %818 = extractelement <128 x i32> %533, i32 71
  %819 = getelementptr inbounds i8, i8* %8, i32 %818
  %820 = load i8, i8* %819, align 1, !tbaa !127
  %821 = insertelement <128 x i8> %817, i8 %820, i32 71
  %822 = extractelement <128 x i32> %533, i32 72
  %823 = getelementptr inbounds i8, i8* %8, i32 %822
  %824 = load i8, i8* %823, align 1, !tbaa !127
  %825 = insertelement <128 x i8> %821, i8 %824, i32 72
  %826 = extractelement <128 x i32> %533, i32 73
  %827 = getelementptr inbounds i8, i8* %8, i32 %826
  %828 = load i8, i8* %827, align 1, !tbaa !127
  %829 = insertelement <128 x i8> %825, i8 %828, i32 73
  %830 = extractelement <128 x i32> %533, i32 74
  %831 = getelementptr inbounds i8, i8* %8, i32 %830
  %832 = load i8, i8* %831, align 1, !tbaa !127
  %833 = insertelement <128 x i8> %829, i8 %832, i32 74
  %834 = extractelement <128 x i32> %533, i32 75
  %835 = getelementptr inbounds i8, i8* %8, i32 %834
  %836 = load i8, i8* %835, align 1, !tbaa !127
  %837 = insertelement <128 x i8> %833, i8 %836, i32 75
  %838 = extractelement <128 x i32> %533, i32 76
  %839 = getelementptr inbounds i8, i8* %8, i32 %838
  %840 = load i8, i8* %839, align 1, !tbaa !127
  %841 = insertelement <128 x i8> %837, i8 %840, i32 76
  %842 = extractelement <128 x i32> %533, i32 77
  %843 = getelementptr inbounds i8, i8* %8, i32 %842
  %844 = load i8, i8* %843, align 1, !tbaa !127
  %845 = insertelement <128 x i8> %841, i8 %844, i32 77
  %846 = extractelement <128 x i32> %533, i32 78
  %847 = getelementptr inbounds i8, i8* %8, i32 %846
  %848 = load i8, i8* %847, align 1, !tbaa !127
  %849 = insertelement <128 x i8> %845, i8 %848, i32 78
  %850 = extractelement <128 x i32> %533, i32 79
  %851 = getelementptr inbounds i8, i8* %8, i32 %850
  %852 = load i8, i8* %851, align 1, !tbaa !127
  %853 = insertelement <128 x i8> %849, i8 %852, i32 79
  %854 = extractelement <128 x i32> %533, i32 80
  %855 = getelementptr inbounds i8, i8* %8, i32 %854
  %856 = load i8, i8* %855, align 1, !tbaa !127
  %857 = insertelement <128 x i8> %853, i8 %856, i32 80
  %858 = extractelement <128 x i32> %533, i32 81
  %859 = getelementptr inbounds i8, i8* %8, i32 %858
  %860 = load i8, i8* %859, align 1, !tbaa !127
  %861 = insertelement <128 x i8> %857, i8 %860, i32 81
  %862 = extractelement <128 x i32> %533, i32 82
  %863 = getelementptr inbounds i8, i8* %8, i32 %862
  %864 = load i8, i8* %863, align 1, !tbaa !127
  %865 = insertelement <128 x i8> %861, i8 %864, i32 82
  %866 = extractelement <128 x i32> %533, i32 83
  %867 = getelementptr inbounds i8, i8* %8, i32 %866
  %868 = load i8, i8* %867, align 1, !tbaa !127
  %869 = insertelement <128 x i8> %865, i8 %868, i32 83
  %870 = extractelement <128 x i32> %533, i32 84
  %871 = getelementptr inbounds i8, i8* %8, i32 %870
  %872 = load i8, i8* %871, align 1, !tbaa !127
  %873 = insertelement <128 x i8> %869, i8 %872, i32 84
  %874 = extractelement <128 x i32> %533, i32 85
  %875 = getelementptr inbounds i8, i8* %8, i32 %874
  %876 = load i8, i8* %875, align 1, !tbaa !127
  %877 = insertelement <128 x i8> %873, i8 %876, i32 85
  %878 = extractelement <128 x i32> %533, i32 86
  %879 = getelementptr inbounds i8, i8* %8, i32 %878
  %880 = load i8, i8* %879, align 1, !tbaa !127
  %881 = insertelement <128 x i8> %877, i8 %880, i32 86
  %882 = extractelement <128 x i32> %533, i32 87
  %883 = getelementptr inbounds i8, i8* %8, i32 %882
  %884 = load i8, i8* %883, align 1, !tbaa !127
  %885 = insertelement <128 x i8> %881, i8 %884, i32 87
  %886 = extractelement <128 x i32> %533, i32 88
  %887 = getelementptr inbounds i8, i8* %8, i32 %886
  %888 = load i8, i8* %887, align 1, !tbaa !127
  %889 = insertelement <128 x i8> %885, i8 %888, i32 88
  %890 = extractelement <128 x i32> %533, i32 89
  %891 = getelementptr inbounds i8, i8* %8, i32 %890
  %892 = load i8, i8* %891, align 1, !tbaa !127
  %893 = insertelement <128 x i8> %889, i8 %892, i32 89
  %894 = extractelement <128 x i32> %533, i32 90
  %895 = getelementptr inbounds i8, i8* %8, i32 %894
  %896 = load i8, i8* %895, align 1, !tbaa !127
  %897 = insertelement <128 x i8> %893, i8 %896, i32 90
  %898 = extractelement <128 x i32> %533, i32 91
  %899 = getelementptr inbounds i8, i8* %8, i32 %898
  %900 = load i8, i8* %899, align 1, !tbaa !127
  %901 = insertelement <128 x i8> %897, i8 %900, i32 91
  %902 = extractelement <128 x i32> %533, i32 92
  %903 = getelementptr inbounds i8, i8* %8, i32 %902
  %904 = load i8, i8* %903, align 1, !tbaa !127
  %905 = insertelement <128 x i8> %901, i8 %904, i32 92
  %906 = extractelement <128 x i32> %533, i32 93
  %907 = getelementptr inbounds i8, i8* %8, i32 %906
  %908 = load i8, i8* %907, align 1, !tbaa !127
  %909 = insertelement <128 x i8> %905, i8 %908, i32 93
  %910 = extractelement <128 x i32> %533, i32 94
  %911 = getelementptr inbounds i8, i8* %8, i32 %910
  %912 = load i8, i8* %911, align 1, !tbaa !127
  %913 = insertelement <128 x i8> %909, i8 %912, i32 94
  %914 = extractelement <128 x i32> %533, i32 95
  %915 = getelementptr inbounds i8, i8* %8, i32 %914
  %916 = load i8, i8* %915, align 1, !tbaa !127
  %917 = insertelement <128 x i8> %913, i8 %916, i32 95
  %918 = extractelement <128 x i32> %533, i32 96
  %919 = getelementptr inbounds i8, i8* %8, i32 %918
  %920 = load i8, i8* %919, align 1, !tbaa !127
  %921 = insertelement <128 x i8> %917, i8 %920, i32 96
  %922 = extractelement <128 x i32> %533, i32 97
  %923 = getelementptr inbounds i8, i8* %8, i32 %922
  %924 = load i8, i8* %923, align 1, !tbaa !127
  %925 = insertelement <128 x i8> %921, i8 %924, i32 97
  %926 = extractelement <128 x i32> %533, i32 98
  %927 = getelementptr inbounds i8, i8* %8, i32 %926
  %928 = load i8, i8* %927, align 1, !tbaa !127
  %929 = insertelement <128 x i8> %925, i8 %928, i32 98
  %930 = extractelement <128 x i32> %533, i32 99
  %931 = getelementptr inbounds i8, i8* %8, i32 %930
  %932 = load i8, i8* %931, align 1, !tbaa !127
  %933 = insertelement <128 x i8> %929, i8 %932, i32 99
  %934 = extractelement <128 x i32> %533, i32 100
  %935 = getelementptr inbounds i8, i8* %8, i32 %934
  %936 = load i8, i8* %935, align 1, !tbaa !127
  %937 = insertelement <128 x i8> %933, i8 %936, i32 100
  %938 = extractelement <128 x i32> %533, i32 101
  %939 = getelementptr inbounds i8, i8* %8, i32 %938
  %940 = load i8, i8* %939, align 1, !tbaa !127
  %941 = insertelement <128 x i8> %937, i8 %940, i32 101
  %942 = extractelement <128 x i32> %533, i32 102
  %943 = getelementptr inbounds i8, i8* %8, i32 %942
  %944 = load i8, i8* %943, align 1, !tbaa !127
  %945 = insertelement <128 x i8> %941, i8 %944, i32 102
  %946 = extractelement <128 x i32> %533, i32 103
  %947 = getelementptr inbounds i8, i8* %8, i32 %946
  %948 = load i8, i8* %947, align 1, !tbaa !127
  %949 = insertelement <128 x i8> %945, i8 %948, i32 103
  %950 = extractelement <128 x i32> %533, i32 104
  %951 = getelementptr inbounds i8, i8* %8, i32 %950
  %952 = load i8, i8* %951, align 1, !tbaa !127
  %953 = insertelement <128 x i8> %949, i8 %952, i32 104
  %954 = extractelement <128 x i32> %533, i32 105
  %955 = getelementptr inbounds i8, i8* %8, i32 %954
  %956 = load i8, i8* %955, align 1, !tbaa !127
  %957 = insertelement <128 x i8> %953, i8 %956, i32 105
  %958 = extractelement <128 x i32> %533, i32 106
  %959 = getelementptr inbounds i8, i8* %8, i32 %958
  %960 = load i8, i8* %959, align 1, !tbaa !127
  %961 = insertelement <128 x i8> %957, i8 %960, i32 106
  %962 = extractelement <128 x i32> %533, i32 107
  %963 = getelementptr inbounds i8, i8* %8, i32 %962
  %964 = load i8, i8* %963, align 1, !tbaa !127
  %965 = insertelement <128 x i8> %961, i8 %964, i32 107
  %966 = extractelement <128 x i32> %533, i32 108
  %967 = getelementptr inbounds i8, i8* %8, i32 %966
  %968 = load i8, i8* %967, align 1, !tbaa !127
  %969 = insertelement <128 x i8> %965, i8 %968, i32 108
  %970 = extractelement <128 x i32> %533, i32 109
  %971 = getelementptr inbounds i8, i8* %8, i32 %970
  %972 = load i8, i8* %971, align 1, !tbaa !127
  %973 = insertelement <128 x i8> %969, i8 %972, i32 109
  %974 = extractelement <128 x i32> %533, i32 110
  %975 = getelementptr inbounds i8, i8* %8, i32 %974
  %976 = load i8, i8* %975, align 1, !tbaa !127
  %977 = insertelement <128 x i8> %973, i8 %976, i32 110
  %978 = extractelement <128 x i32> %533, i32 111
  %979 = getelementptr inbounds i8, i8* %8, i32 %978
  %980 = load i8, i8* %979, align 1, !tbaa !127
  %981 = insertelement <128 x i8> %977, i8 %980, i32 111
  %982 = extractelement <128 x i32> %533, i32 112
  %983 = getelementptr inbounds i8, i8* %8, i32 %982
  %984 = load i8, i8* %983, align 1, !tbaa !127
  %985 = insertelement <128 x i8> %981, i8 %984, i32 112
  %986 = extractelement <128 x i32> %533, i32 113
  %987 = getelementptr inbounds i8, i8* %8, i32 %986
  %988 = load i8, i8* %987, align 1, !tbaa !127
  %989 = insertelement <128 x i8> %985, i8 %988, i32 113
  %990 = extractelement <128 x i32> %533, i32 114
  %991 = getelementptr inbounds i8, i8* %8, i32 %990
  %992 = load i8, i8* %991, align 1, !tbaa !127
  %993 = insertelement <128 x i8> %989, i8 %992, i32 114
  %994 = extractelement <128 x i32> %533, i32 115
  %995 = getelementptr inbounds i8, i8* %8, i32 %994
  %996 = load i8, i8* %995, align 1, !tbaa !127
  %997 = insertelement <128 x i8> %993, i8 %996, i32 115
  %998 = extractelement <128 x i32> %533, i32 116
  %999 = getelementptr inbounds i8, i8* %8, i32 %998
  %1000 = load i8, i8* %999, align 1, !tbaa !127
  %1001 = insertelement <128 x i8> %997, i8 %1000, i32 116
  %1002 = extractelement <128 x i32> %533, i32 117
  %1003 = getelementptr inbounds i8, i8* %8, i32 %1002
  %1004 = load i8, i8* %1003, align 1, !tbaa !127
  %1005 = insertelement <128 x i8> %1001, i8 %1004, i32 117
  %1006 = extractelement <128 x i32> %533, i32 118
  %1007 = getelementptr inbounds i8, i8* %8, i32 %1006
  %1008 = load i8, i8* %1007, align 1, !tbaa !127
  %1009 = insertelement <128 x i8> %1005, i8 %1008, i32 118
  %1010 = extractelement <128 x i32> %533, i32 119
  %1011 = getelementptr inbounds i8, i8* %8, i32 %1010
  %1012 = load i8, i8* %1011, align 1, !tbaa !127
  %1013 = insertelement <128 x i8> %1009, i8 %1012, i32 119
  %1014 = extractelement <128 x i32> %533, i32 120
  %1015 = getelementptr inbounds i8, i8* %8, i32 %1014
  %1016 = load i8, i8* %1015, align 1, !tbaa !127
  %1017 = insertelement <128 x i8> %1013, i8 %1016, i32 120
  %1018 = extractelement <128 x i32> %533, i32 121
  %1019 = getelementptr inbounds i8, i8* %8, i32 %1018
  %1020 = load i8, i8* %1019, align 1, !tbaa !127
  %1021 = insertelement <128 x i8> %1017, i8 %1020, i32 121
  %1022 = extractelement <128 x i32> %533, i32 122
  %1023 = getelementptr inbounds i8, i8* %8, i32 %1022
  %1024 = load i8, i8* %1023, align 1, !tbaa !127
  %1025 = insertelement <128 x i8> %1021, i8 %1024, i32 122
  %1026 = extractelement <128 x i32> %533, i32 123
  %1027 = getelementptr inbounds i8, i8* %8, i32 %1026
  %1028 = load i8, i8* %1027, align 1, !tbaa !127
  %1029 = insertelement <128 x i8> %1025, i8 %1028, i32 123
  %1030 = extractelement <128 x i32> %533, i32 124
  %1031 = getelementptr inbounds i8, i8* %8, i32 %1030
  %1032 = load i8, i8* %1031, align 1, !tbaa !127
  %1033 = insertelement <128 x i8> %1029, i8 %1032, i32 124
  %1034 = extractelement <128 x i32> %533, i32 125
  %1035 = getelementptr inbounds i8, i8* %8, i32 %1034
  %1036 = load i8, i8* %1035, align 1, !tbaa !127
  %1037 = insertelement <128 x i8> %1033, i8 %1036, i32 125
  %1038 = extractelement <128 x i32> %533, i32 126
  %1039 = getelementptr inbounds i8, i8* %8, i32 %1038
  %1040 = load i8, i8* %1039, align 1, !tbaa !127
  %1041 = insertelement <128 x i8> %1037, i8 %1040, i32 126
  %1042 = extractelement <128 x i32> %533, i32 127
  %1043 = getelementptr inbounds i8, i8* %8, i32 %1042
  %1044 = load i8, i8* %1043, align 1, !tbaa !127
  %1045 = insertelement <128 x i8> %1041, i8 %1044, i32 127
  %1046 = add nsw i32 %t2248.us, %resampled_input.s0.x.rebased14.us
  %1047 = shl nsw i32 %1046, 7
  %1048 = getelementptr inbounds i8, i8* %resampled_input, i32 %1047
  %1049 = bitcast i8* %1048 to <128 x i8>*
  store <128 x i8> %1045, <128 x i8>* %1049, align 128, !tbaa !129
  %1050 = add nuw nsw i32 %resampled_input.s0.x.rebased14.us, 1
  %.not750.us = icmp eq i32 %resampled_input.s0.x.rebased14.us, %t2228
  br i1 %.not750.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %1051 = add nuw nsw i32 %resampled_input.s0.y.rebased11.us, 1
  %.not747.us = icmp eq i32 %resampled_input.s0.y.rebased11.us, %t2227
  br i1 %.not747.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7, %"for resampled_input.s0.y.rebased9.preheader"
  %1052 = mul nsw i32 %500, %25
  %t2255 = add i32 %456, %1052
  br i1 %142, label %"for output.s0.y.yo.preheader", label %"end for output.s0.y.yo", !prof !101

"for output.s0.y.yo.preheader":                   ; preds = %"consume resampled_input"
  %1053 = load <32 x i32>, <32 x i32>* %97, align 128
  %1054 = load <32 x i32>, <32 x i32>* %99, align 128
  %1055 = load <32 x i32>, <32 x i32>* %101, align 128
  %1056 = load <32 x i32>, <32 x i32>* %103, align 128
  br label %"for output.s0.y.yo"

"for output.s0.y.yo":                             ; preds = %"for output.s0.y.yo.preheader", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %1095, %"end for output.s0.x.xo" ], [ 0, %"for output.s0.y.yo.preheader" ]
  %a31 = shl nuw nsw i32 %output.s0.y.yo, 1
  %1057 = icmp slt i32 %a31, %b33
  %output.s0.y.y.base.s = select i1 %1057, i32 %a31, i32 %b33
  %1058 = add nsw i32 %output.s0.y.y.base.s, %22
  %1059 = mul nsw i32 %1058, %stride_y
  %1060 = add nsw i32 %1059, %143
  %t2283 = mul nsw i32 %1060, %128
  %1061 = add nsw i32 %1059, %144
  %t2286 = mul nsw i32 %1061, %128
  %1062 = add nsw i32 %1058, 1
  %1063 = mul nsw i32 %1062, %stride_y
  %1064 = add nsw i32 %1063, %143
  %t2288 = mul nsw i32 %1064, %128
  %1065 = add nsw i32 %1063, %144
  %t2289 = mul nsw i32 %1065, %128
  %1066 = sub nsw i32 %1059, %t2223
  %t2291 = mul nsw i32 %1066, %128
  %1067 = sub nsw i32 %1063, %t2223
  %t2293 = mul nsw i32 %1067, %128
  br i1 %147, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !101

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %1068 = add nsw i32 %t2283, %179
  %1069 = add nsw i32 %t2283, %180
  %1070 = sub nsw i32 %t2283, %t2225
  %1071 = add nsw i32 %t2286, %179
  %1072 = add nsw i32 %t2286, %180
  %1073 = sub nsw i32 %t2286, %t2225
  %1074 = add nsw i32 %t2291, %179
  %1075 = add nsw i32 %t2291, %180
  %1076 = sub nsw i32 %t2291, %t2225
  %1077 = add nsw i32 %t2288, %179
  %1078 = add nsw i32 %t2288, %180
  %1079 = sub nsw i32 %t2288, %t2225
  %1080 = add nsw i32 %t2289, %179
  %1081 = add nsw i32 %t2289, %180
  %1082 = sub nsw i32 %t2289, %t2225
  %1083 = add nsw i32 %t2293, %179
  %1084 = add nsw i32 %t2293, %180
  %1085 = sub nsw i32 %t2293, %t2225
  %1086 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %1087 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %1088 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %182) #11
  %1089 = mul nsw i32 %1058, %24
  %1090 = add nsw i32 %1089, %t2255
  %1091 = mul nsw i32 %1062, %24
  %1092 = add nsw i32 %1091, %t2255
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %1093 = add nuw nsw i32 %output.s0.b.rebased, 1
  %.not741 = icmp eq i32 %1093, %15
  br i1 %.not741, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %2053, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a32 = shl nuw nsw i32 %output.s0.x.xo, 1
  %1094 = icmp slt i32 %a32, %b34
  %output.s0.x.x.base.s = select i1 %1094, i32 %a32, i32 %b34
  br i1 %t2217, label %then_bb17, label %next_bb18

"end for output.s0.x.xo.loopexit":                ; preds = %"consume convolved"
  store <32 x i32> %.lcssa4858.us.lcssa4922, <32 x i32>* %148, align 128, !tbaa !131
  store <32 x i32> %.lcssa4860.us.lcssa4925, <32 x i32>* %150, align 128, !tbaa !139
  store <32 x i32> %.lcssa4862.us.lcssa4928, <32 x i32>* %152, align 128, !tbaa !141
  store <32 x i32> %.lcssa4864.us.lcssa4931, <32 x i32>* %154, align 128, !tbaa !144
  store <32 x i32> %.lcssa4866.us.lcssa4934, <32 x i32>* %156, align 128, !tbaa !146
  store <32 x i32> %.lcssa4868.us.lcssa4937, <32 x i32>* %158, align 128, !tbaa !150
  store <32 x i32> %.lcssa4870.us.lcssa4940, <32 x i32>* %160, align 128, !tbaa !152
  store <32 x i32> %.lcssa4872.us.lcssa4943, <32 x i32>* %162, align 128, !tbaa !155
  store <32 x i32> %.lcssa4874.us.lcssa4946, <32 x i32>* %164, align 128, !tbaa !157
  store <32 x i32> %.lcssa4876.us.lcssa4949, <32 x i32>* %166, align 128, !tbaa !162
  store <32 x i32> %.lcssa4878.us.lcssa4952, <32 x i32>* %168, align 128, !tbaa !164
  store <32 x i32> %.lcssa4880.us.lcssa4955, <32 x i32>* %170, align 128, !tbaa !167
  store <32 x i32> %.lcssa4882.us.lcssa4958, <32 x i32>* %172, align 128, !tbaa !169
  store <32 x i32> %.lcssa4884.us.lcssa4961, <32 x i32>* %174, align 128, !tbaa !173
  store <32 x i32> %.lcssa4886.us.lcssa4964, <32 x i32>* %176, align 128, !tbaa !175
  store <32 x i32> %.lcssa4888.us.lcssa4967, <32 x i32>* %178, align 128, !tbaa !178
  br label %"end for output.s0.x.xo"

"end for output.s0.x.xo":                         ; preds = %"end for output.s0.x.xo.loopexit", %"for output.s0.y.yo"
  %1095 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not742 = icmp eq i32 %1095, %141
  br i1 %.not742, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb17:                                        ; preds = %"for output.s0.x.xo"
  %1096 = load <32 x i32>, <32 x i32>* %459, align 128, !tbaa !105
  %1097 = add nsw i32 %output.s0.x.x.base.s, %19
  %1098 = mul nsw i32 %1097, %stride_x
  %1099 = add nsw i32 %1098, %1068
  %1100 = shl nsw i32 %1099, 7
  %1101 = getelementptr inbounds i8, i8* %resampled_input, i32 %1100
  %1102 = bitcast i8* %1101 to <64 x i8>*
  %1103 = load <64 x i8>, <64 x i8>* %1102, align 128, !tbaa !129
  %1104 = zext <64 x i8> %1103 to <64 x i16>
  %1105 = load <32 x i32>, <32 x i32>* %461, align 128, !tbaa !105
  %1106 = add nsw i32 %1098, %1069
  %1107 = shl nsw i32 %1106, 7
  %1108 = getelementptr inbounds i8, i8* %resampled_input, i32 %1107
  %1109 = bitcast i8* %1108 to <64 x i8>*
  %1110 = load <64 x i8>, <64 x i8>* %1109, align 128, !tbaa !129
  %1111 = zext <64 x i8> %1110 to <64 x i16>
  %1112 = load <32 x i32>, <32 x i32>* %462, align 128, !tbaa !105
  %1113 = add nsw i32 %1098, %1070
  %1114 = shl nsw i32 %1113, 7
  %1115 = getelementptr inbounds i8, i8* %resampled_input, i32 %1114
  %1116 = bitcast i8* %1115 to <64 x i8>*
  %1117 = load <64 x i8>, <64 x i8>* %1116, align 128, !tbaa !129
  %1118 = zext <64 x i8> %1117 to <64 x i16>
  %1119 = load <32 x i32>, <32 x i32>* %465, align 128, !tbaa !105
  %1120 = add nsw i32 %1098, %1071
  %1121 = shl nsw i32 %1120, 7
  %1122 = getelementptr inbounds i8, i8* %resampled_input, i32 %1121
  %1123 = bitcast i8* %1122 to <64 x i8>*
  %1124 = load <64 x i8>, <64 x i8>* %1123, align 128, !tbaa !129
  %1125 = zext <64 x i8> %1124 to <64 x i16>
  %1126 = load <32 x i32>, <32 x i32>* %467, align 128, !tbaa !105
  %1127 = add nsw i32 %1098, %1072
  %1128 = shl nsw i32 %1127, 7
  %1129 = getelementptr inbounds i8, i8* %resampled_input, i32 %1128
  %1130 = bitcast i8* %1129 to <64 x i8>*
  %1131 = load <64 x i8>, <64 x i8>* %1130, align 128, !tbaa !129
  %1132 = zext <64 x i8> %1131 to <64 x i16>
  %1133 = load <32 x i32>, <32 x i32>* %468, align 128, !tbaa !105
  %1134 = add nsw i32 %1098, %1073
  %1135 = shl nsw i32 %1134, 7
  %1136 = getelementptr inbounds i8, i8* %resampled_input, i32 %1135
  %1137 = bitcast i8* %1136 to <64 x i8>*
  %1138 = load <64 x i8>, <64 x i8>* %1137, align 128, !tbaa !129
  %1139 = zext <64 x i8> %1138 to <64 x i16>
  %1140 = load <32 x i32>, <32 x i32>* %470, align 128, !tbaa !180
  %1141 = add nsw i32 %1098, %1074
  %1142 = shl nsw i32 %1141, 7
  %1143 = getelementptr inbounds i8, i8* %resampled_input, i32 %1142
  %1144 = bitcast i8* %1143 to <64 x i8>*
  %1145 = load <64 x i8>, <64 x i8>* %1144, align 128, !tbaa !129
  %1146 = zext <64 x i8> %1145 to <64 x i16>
  %1147 = load <32 x i32>, <32 x i32>* %472, align 128, !tbaa !186
  %1148 = add nsw i32 %1098, %1075
  %1149 = shl nsw i32 %1148, 7
  %1150 = getelementptr inbounds i8, i8* %resampled_input, i32 %1149
  %1151 = bitcast i8* %1150 to <64 x i8>*
  %1152 = load <64 x i8>, <64 x i8>* %1151, align 128, !tbaa !129
  %1153 = zext <64 x i8> %1152 to <64 x i16>
  %1154 = load <32 x i32>, <32 x i32>* %473, align 128, !tbaa !190
  %1155 = add nsw i32 %1098, %1076
  %1156 = shl nsw i32 %1155, 7
  %1157 = getelementptr inbounds i8, i8* %resampled_input, i32 %1156
  %1158 = bitcast i8* %1157 to <64 x i8>*
  %1159 = load <64 x i8>, <64 x i8>* %1158, align 128, !tbaa !129
  %1160 = zext <64 x i8> %1159 to <64 x i16>
  %1161 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1054, <32 x i32> %1053)
  %1162 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1112) #11
  %1163 = bitcast <64 x i16> %1118 to <32 x i32>
  %1164 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1163) #11
  %1165 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1162, <32 x i32> %1164) #11
  %1166 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1133) #11
  %1167 = bitcast <64 x i16> %1139 to <32 x i32>
  %1168 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1167) #11
  %1169 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1166, <32 x i32> %1168) #11
  %1170 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1154) #11
  %1171 = bitcast <64 x i16> %1160 to <32 x i32>
  %1172 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1171) #11
  %1173 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1170, <32 x i32> %1172) #11
  %1174 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1173, <64 x i32> %1161) #11
  %1175 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1140) #11
  %1176 = bitcast <64 x i16> %1146 to <32 x i32>
  %1177 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1176) #11
  %1178 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1174, <32 x i32> %1175, <32 x i32> %1177) #11
  %1179 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1147) #11
  %1180 = bitcast <64 x i16> %1153 to <32 x i32>
  %1181 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1180) #11
  %1182 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1179, <32 x i32> %1181) #11
  %1183 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1178, <64 x i32> %1182) #11
  %1184 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1169, <64 x i32> %1183) #11
  %1185 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1119) #11
  %1186 = bitcast <64 x i16> %1125 to <32 x i32>
  %1187 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1186) #11
  %1188 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1184, <32 x i32> %1185, <32 x i32> %1187) #11
  %1189 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1126) #11
  %1190 = bitcast <64 x i16> %1132 to <32 x i32>
  %1191 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1190) #11
  %1192 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1189, <32 x i32> %1191) #11
  %1193 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1188, <64 x i32> %1192) #11
  %1194 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1165, <64 x i32> %1193) #11
  %1195 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1096) #11
  %1196 = bitcast <64 x i16> %1104 to <32 x i32>
  %1197 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1196) #11
  %1198 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1194, <32 x i32> %1195, <32 x i32> %1197) #11
  %1199 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1105) #11
  %1200 = bitcast <64 x i16> %1111 to <32 x i32>
  %1201 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1200) #11
  %1202 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1199, <32 x i32> %1201) #11
  %1203 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1198, <64 x i32> %1202) #11
  %1204 = load <32 x i32>, <32 x i32>* %475, align 128, !tbaa !105
  %1205 = getelementptr inbounds i8, i8* %1101, i32 64
  %1206 = bitcast i8* %1205 to <64 x i8>*
  %1207 = load <64 x i8>, <64 x i8>* %1206, align 64, !tbaa !129
  %1208 = zext <64 x i8> %1207 to <64 x i16>
  %1209 = load <32 x i32>, <32 x i32>* %477, align 128, !tbaa !105
  %1210 = getelementptr inbounds i8, i8* %1108, i32 64
  %1211 = bitcast i8* %1210 to <64 x i8>*
  %1212 = load <64 x i8>, <64 x i8>* %1211, align 64, !tbaa !129
  %1213 = zext <64 x i8> %1212 to <64 x i16>
  %1214 = load <32 x i32>, <32 x i32>* %479, align 128, !tbaa !105
  %1215 = getelementptr inbounds i8, i8* %1115, i32 64
  %1216 = bitcast i8* %1215 to <64 x i8>*
  %1217 = load <64 x i8>, <64 x i8>* %1216, align 64, !tbaa !129
  %1218 = zext <64 x i8> %1217 to <64 x i16>
  %1219 = load <32 x i32>, <32 x i32>* %481, align 128, !tbaa !105
  %1220 = getelementptr inbounds i8, i8* %1122, i32 64
  %1221 = bitcast i8* %1220 to <64 x i8>*
  %1222 = load <64 x i8>, <64 x i8>* %1221, align 64, !tbaa !129
  %1223 = zext <64 x i8> %1222 to <64 x i16>
  %1224 = load <32 x i32>, <32 x i32>* %483, align 128, !tbaa !105
  %1225 = getelementptr inbounds i8, i8* %1129, i32 64
  %1226 = bitcast i8* %1225 to <64 x i8>*
  %1227 = load <64 x i8>, <64 x i8>* %1226, align 64, !tbaa !129
  %1228 = zext <64 x i8> %1227 to <64 x i16>
  %1229 = load <32 x i32>, <32 x i32>* %485, align 128, !tbaa !105
  %1230 = getelementptr inbounds i8, i8* %1136, i32 64
  %1231 = bitcast i8* %1230 to <64 x i8>*
  %1232 = load <64 x i8>, <64 x i8>* %1231, align 64, !tbaa !129
  %1233 = zext <64 x i8> %1232 to <64 x i16>
  %1234 = load <32 x i32>, <32 x i32>* %487, align 128, !tbaa !193
  %1235 = getelementptr inbounds i8, i8* %1143, i32 64
  %1236 = bitcast i8* %1235 to <64 x i8>*
  %1237 = load <64 x i8>, <64 x i8>* %1236, align 64, !tbaa !129
  %1238 = zext <64 x i8> %1237 to <64 x i16>
  %1239 = load <32 x i32>, <32 x i32>* %489, align 128, !tbaa !195
  %1240 = getelementptr inbounds i8, i8* %1150, i32 64
  %1241 = bitcast i8* %1240 to <64 x i8>*
  %1242 = load <64 x i8>, <64 x i8>* %1241, align 64, !tbaa !129
  %1243 = zext <64 x i8> %1242 to <64 x i16>
  %1244 = load <32 x i32>, <32 x i32>* %491, align 128, !tbaa !197
  %1245 = getelementptr inbounds i8, i8* %1157, i32 64
  %1246 = bitcast i8* %1245 to <64 x i8>*
  %1247 = load <64 x i8>, <64 x i8>* %1246, align 64, !tbaa !129
  %1248 = zext <64 x i8> %1247 to <64 x i16>
  %1249 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1056, <32 x i32> %1055)
  %1250 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1214) #11
  %1251 = bitcast <64 x i16> %1218 to <32 x i32>
  %1252 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1251) #11
  %1253 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1250, <32 x i32> %1252) #11
  %1254 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1229) #11
  %1255 = bitcast <64 x i16> %1233 to <32 x i32>
  %1256 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1255) #11
  %1257 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1254, <32 x i32> %1256) #11
  %1258 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1244) #11
  %1259 = bitcast <64 x i16> %1248 to <32 x i32>
  %1260 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1259) #11
  %1261 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1258, <32 x i32> %1260) #11
  %1262 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1261, <64 x i32> %1249) #11
  %1263 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1234) #11
  %1264 = bitcast <64 x i16> %1238 to <32 x i32>
  %1265 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1264) #11
  %1266 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1262, <32 x i32> %1263, <32 x i32> %1265) #11
  %1267 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1239) #11
  %1268 = bitcast <64 x i16> %1243 to <32 x i32>
  %1269 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1268) #11
  %1270 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1267, <32 x i32> %1269) #11
  %1271 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1266, <64 x i32> %1270) #11
  %1272 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1257, <64 x i32> %1271) #11
  %1273 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1219) #11
  %1274 = bitcast <64 x i16> %1223 to <32 x i32>
  %1275 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1274) #11
  %1276 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1272, <32 x i32> %1273, <32 x i32> %1275) #11
  %1277 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1224) #11
  %1278 = bitcast <64 x i16> %1228 to <32 x i32>
  %1279 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1278) #11
  %1280 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1277, <32 x i32> %1279) #11
  %1281 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1276, <64 x i32> %1280) #11
  %1282 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1253, <64 x i32> %1281) #11
  %1283 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1204) #11
  %1284 = bitcast <64 x i16> %1208 to <32 x i32>
  %1285 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1284) #11
  %1286 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1282, <32 x i32> %1283, <32 x i32> %1285) #11
  %1287 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1209) #11
  %1288 = bitcast <64 x i16> %1213 to <32 x i32>
  %1289 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1288) #11
  %1290 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1287, <32 x i32> %1289) #11
  %1291 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1286, <64 x i32> %1290) #11
  %1292 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1203)
  %1293 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1203)
  %1294 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1291)
  %1295 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1291)
  %1296 = add nsw i32 %1097, 1
  %1297 = mul nsw i32 %1296, %stride_x
  %1298 = add nsw i32 %1297, %1068
  %1299 = shl nsw i32 %1298, 7
  %1300 = getelementptr inbounds i8, i8* %resampled_input, i32 %1299
  %1301 = bitcast i8* %1300 to <64 x i8>*
  %1302 = load <64 x i8>, <64 x i8>* %1301, align 128, !tbaa !129
  %1303 = zext <64 x i8> %1302 to <64 x i16>
  %1304 = add nsw i32 %1297, %1069
  %1305 = shl nsw i32 %1304, 7
  %1306 = getelementptr inbounds i8, i8* %resampled_input, i32 %1305
  %1307 = bitcast i8* %1306 to <64 x i8>*
  %1308 = load <64 x i8>, <64 x i8>* %1307, align 128, !tbaa !129
  %1309 = zext <64 x i8> %1308 to <64 x i16>
  %1310 = add nsw i32 %1297, %1070
  %1311 = shl nsw i32 %1310, 7
  %1312 = getelementptr inbounds i8, i8* %resampled_input, i32 %1311
  %1313 = bitcast i8* %1312 to <64 x i8>*
  %1314 = load <64 x i8>, <64 x i8>* %1313, align 128, !tbaa !129
  %1315 = zext <64 x i8> %1314 to <64 x i16>
  %1316 = add nsw i32 %1297, %1071
  %1317 = shl nsw i32 %1316, 7
  %1318 = getelementptr inbounds i8, i8* %resampled_input, i32 %1317
  %1319 = bitcast i8* %1318 to <64 x i8>*
  %1320 = load <64 x i8>, <64 x i8>* %1319, align 128, !tbaa !129
  %1321 = zext <64 x i8> %1320 to <64 x i16>
  %1322 = add nsw i32 %1297, %1072
  %1323 = shl nsw i32 %1322, 7
  %1324 = getelementptr inbounds i8, i8* %resampled_input, i32 %1323
  %1325 = bitcast i8* %1324 to <64 x i8>*
  %1326 = load <64 x i8>, <64 x i8>* %1325, align 128, !tbaa !129
  %1327 = zext <64 x i8> %1326 to <64 x i16>
  %1328 = add nsw i32 %1297, %1073
  %1329 = shl nsw i32 %1328, 7
  %1330 = getelementptr inbounds i8, i8* %resampled_input, i32 %1329
  %1331 = bitcast i8* %1330 to <64 x i8>*
  %1332 = load <64 x i8>, <64 x i8>* %1331, align 128, !tbaa !129
  %1333 = zext <64 x i8> %1332 to <64 x i16>
  %1334 = add nsw i32 %1297, %1074
  %1335 = shl nsw i32 %1334, 7
  %1336 = getelementptr inbounds i8, i8* %resampled_input, i32 %1335
  %1337 = bitcast i8* %1336 to <64 x i8>*
  %1338 = load <64 x i8>, <64 x i8>* %1337, align 128, !tbaa !129
  %1339 = zext <64 x i8> %1338 to <64 x i16>
  %1340 = add nsw i32 %1297, %1075
  %1341 = shl nsw i32 %1340, 7
  %1342 = getelementptr inbounds i8, i8* %resampled_input, i32 %1341
  %1343 = bitcast i8* %1342 to <64 x i8>*
  %1344 = load <64 x i8>, <64 x i8>* %1343, align 128, !tbaa !129
  %1345 = zext <64 x i8> %1344 to <64 x i16>
  %1346 = add nsw i32 %1297, %1076
  %1347 = shl nsw i32 %1346, 7
  %1348 = getelementptr inbounds i8, i8* %resampled_input, i32 %1347
  %1349 = bitcast i8* %1348 to <64 x i8>*
  %1350 = load <64 x i8>, <64 x i8>* %1349, align 128, !tbaa !129
  %1351 = zext <64 x i8> %1350 to <64 x i16>
  %1352 = bitcast <64 x i16> %1315 to <32 x i32>
  %1353 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1352) #11
  %1354 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1162, <32 x i32> %1353) #11
  %1355 = bitcast <64 x i16> %1333 to <32 x i32>
  %1356 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1355) #11
  %1357 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1166, <32 x i32> %1356) #11
  %1358 = bitcast <64 x i16> %1351 to <32 x i32>
  %1359 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1358) #11
  %1360 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1170, <32 x i32> %1359) #11
  %1361 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1360, <64 x i32> %1161) #11
  %1362 = bitcast <64 x i16> %1339 to <32 x i32>
  %1363 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1362) #11
  %1364 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1361, <32 x i32> %1175, <32 x i32> %1363) #11
  %1365 = bitcast <64 x i16> %1345 to <32 x i32>
  %1366 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1365) #11
  %1367 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1179, <32 x i32> %1366) #11
  %1368 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1364, <64 x i32> %1367) #11
  %1369 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1357, <64 x i32> %1368) #11
  %1370 = bitcast <64 x i16> %1321 to <32 x i32>
  %1371 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1370) #11
  %1372 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1369, <32 x i32> %1185, <32 x i32> %1371) #11
  %1373 = bitcast <64 x i16> %1327 to <32 x i32>
  %1374 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1373) #11
  %1375 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1189, <32 x i32> %1374) #11
  %1376 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1372, <64 x i32> %1375) #11
  %1377 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1354, <64 x i32> %1376) #11
  %1378 = bitcast <64 x i16> %1303 to <32 x i32>
  %1379 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1378) #11
  %1380 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1377, <32 x i32> %1195, <32 x i32> %1379) #11
  %1381 = bitcast <64 x i16> %1309 to <32 x i32>
  %1382 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1381) #11
  %1383 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1199, <32 x i32> %1382) #11
  %1384 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1380, <64 x i32> %1383) #11
  %1385 = getelementptr inbounds i8, i8* %1300, i32 64
  %1386 = bitcast i8* %1385 to <64 x i8>*
  %1387 = load <64 x i8>, <64 x i8>* %1386, align 64, !tbaa !129
  %1388 = zext <64 x i8> %1387 to <64 x i16>
  %1389 = getelementptr inbounds i8, i8* %1306, i32 64
  %1390 = bitcast i8* %1389 to <64 x i8>*
  %1391 = load <64 x i8>, <64 x i8>* %1390, align 64, !tbaa !129
  %1392 = zext <64 x i8> %1391 to <64 x i16>
  %1393 = getelementptr inbounds i8, i8* %1312, i32 64
  %1394 = bitcast i8* %1393 to <64 x i8>*
  %1395 = load <64 x i8>, <64 x i8>* %1394, align 64, !tbaa !129
  %1396 = zext <64 x i8> %1395 to <64 x i16>
  %1397 = getelementptr inbounds i8, i8* %1318, i32 64
  %1398 = bitcast i8* %1397 to <64 x i8>*
  %1399 = load <64 x i8>, <64 x i8>* %1398, align 64, !tbaa !129
  %1400 = zext <64 x i8> %1399 to <64 x i16>
  %1401 = getelementptr inbounds i8, i8* %1324, i32 64
  %1402 = bitcast i8* %1401 to <64 x i8>*
  %1403 = load <64 x i8>, <64 x i8>* %1402, align 64, !tbaa !129
  %1404 = zext <64 x i8> %1403 to <64 x i16>
  %1405 = getelementptr inbounds i8, i8* %1330, i32 64
  %1406 = bitcast i8* %1405 to <64 x i8>*
  %1407 = load <64 x i8>, <64 x i8>* %1406, align 64, !tbaa !129
  %1408 = zext <64 x i8> %1407 to <64 x i16>
  %1409 = getelementptr inbounds i8, i8* %1336, i32 64
  %1410 = bitcast i8* %1409 to <64 x i8>*
  %1411 = load <64 x i8>, <64 x i8>* %1410, align 64, !tbaa !129
  %1412 = zext <64 x i8> %1411 to <64 x i16>
  %1413 = getelementptr inbounds i8, i8* %1342, i32 64
  %1414 = bitcast i8* %1413 to <64 x i8>*
  %1415 = load <64 x i8>, <64 x i8>* %1414, align 64, !tbaa !129
  %1416 = zext <64 x i8> %1415 to <64 x i16>
  %1417 = getelementptr inbounds i8, i8* %1348, i32 64
  %1418 = bitcast i8* %1417 to <64 x i8>*
  %1419 = load <64 x i8>, <64 x i8>* %1418, align 64, !tbaa !129
  %1420 = zext <64 x i8> %1419 to <64 x i16>
  %1421 = bitcast <64 x i16> %1396 to <32 x i32>
  %1422 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1421) #11
  %1423 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1250, <32 x i32> %1422) #11
  %1424 = bitcast <64 x i16> %1408 to <32 x i32>
  %1425 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1424) #11
  %1426 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1254, <32 x i32> %1425) #11
  %1427 = bitcast <64 x i16> %1420 to <32 x i32>
  %1428 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1427) #11
  %1429 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1258, <32 x i32> %1428) #11
  %1430 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1429, <64 x i32> %1249) #11
  %1431 = bitcast <64 x i16> %1412 to <32 x i32>
  %1432 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1431) #11
  %1433 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1430, <32 x i32> %1263, <32 x i32> %1432) #11
  %1434 = bitcast <64 x i16> %1416 to <32 x i32>
  %1435 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1434) #11
  %1436 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1267, <32 x i32> %1435) #11
  %1437 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1433, <64 x i32> %1436) #11
  %1438 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1426, <64 x i32> %1437) #11
  %1439 = bitcast <64 x i16> %1400 to <32 x i32>
  %1440 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1439) #11
  %1441 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1438, <32 x i32> %1273, <32 x i32> %1440) #11
  %1442 = bitcast <64 x i16> %1404 to <32 x i32>
  %1443 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1442) #11
  %1444 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1277, <32 x i32> %1443) #11
  %1445 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1441, <64 x i32> %1444) #11
  %1446 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1423, <64 x i32> %1445) #11
  %1447 = bitcast <64 x i16> %1388 to <32 x i32>
  %1448 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1447) #11
  %1449 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1446, <32 x i32> %1283, <32 x i32> %1448) #11
  %1450 = bitcast <64 x i16> %1392 to <32 x i32>
  %1451 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1450) #11
  %1452 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1287, <32 x i32> %1451) #11
  %1453 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1449, <64 x i32> %1452) #11
  %1454 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1384)
  %1455 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1384)
  %1456 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1453)
  %1457 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1453)
  %1458 = add nsw i32 %1098, %1077
  %1459 = shl nsw i32 %1458, 7
  %1460 = getelementptr inbounds i8, i8* %resampled_input, i32 %1459
  %1461 = bitcast i8* %1460 to <64 x i8>*
  %1462 = load <64 x i8>, <64 x i8>* %1461, align 128, !tbaa !129
  %1463 = zext <64 x i8> %1462 to <64 x i16>
  %1464 = add nsw i32 %1098, %1078
  %1465 = shl nsw i32 %1464, 7
  %1466 = getelementptr inbounds i8, i8* %resampled_input, i32 %1465
  %1467 = bitcast i8* %1466 to <64 x i8>*
  %1468 = load <64 x i8>, <64 x i8>* %1467, align 128, !tbaa !129
  %1469 = zext <64 x i8> %1468 to <64 x i16>
  %1470 = add nsw i32 %1098, %1079
  %1471 = shl nsw i32 %1470, 7
  %1472 = getelementptr inbounds i8, i8* %resampled_input, i32 %1471
  %1473 = bitcast i8* %1472 to <64 x i8>*
  %1474 = load <64 x i8>, <64 x i8>* %1473, align 128, !tbaa !129
  %1475 = zext <64 x i8> %1474 to <64 x i16>
  %1476 = add nsw i32 %1098, %1080
  %1477 = shl nsw i32 %1476, 7
  %1478 = getelementptr inbounds i8, i8* %resampled_input, i32 %1477
  %1479 = bitcast i8* %1478 to <64 x i8>*
  %1480 = load <64 x i8>, <64 x i8>* %1479, align 128, !tbaa !129
  %1481 = zext <64 x i8> %1480 to <64 x i16>
  %1482 = add nsw i32 %1098, %1081
  %1483 = shl nsw i32 %1482, 7
  %1484 = getelementptr inbounds i8, i8* %resampled_input, i32 %1483
  %1485 = bitcast i8* %1484 to <64 x i8>*
  %1486 = load <64 x i8>, <64 x i8>* %1485, align 128, !tbaa !129
  %1487 = zext <64 x i8> %1486 to <64 x i16>
  %1488 = add nsw i32 %1098, %1082
  %1489 = shl nsw i32 %1488, 7
  %1490 = getelementptr inbounds i8, i8* %resampled_input, i32 %1489
  %1491 = bitcast i8* %1490 to <64 x i8>*
  %1492 = load <64 x i8>, <64 x i8>* %1491, align 128, !tbaa !129
  %1493 = zext <64 x i8> %1492 to <64 x i16>
  %1494 = add nsw i32 %1098, %1083
  %1495 = shl nsw i32 %1494, 7
  %1496 = getelementptr inbounds i8, i8* %resampled_input, i32 %1495
  %1497 = bitcast i8* %1496 to <64 x i8>*
  %1498 = load <64 x i8>, <64 x i8>* %1497, align 128, !tbaa !129
  %1499 = zext <64 x i8> %1498 to <64 x i16>
  %1500 = add nsw i32 %1098, %1084
  %1501 = shl nsw i32 %1500, 7
  %1502 = getelementptr inbounds i8, i8* %resampled_input, i32 %1501
  %1503 = bitcast i8* %1502 to <64 x i8>*
  %1504 = load <64 x i8>, <64 x i8>* %1503, align 128, !tbaa !129
  %1505 = zext <64 x i8> %1504 to <64 x i16>
  %1506 = add nsw i32 %1098, %1085
  %1507 = shl nsw i32 %1506, 7
  %1508 = getelementptr inbounds i8, i8* %resampled_input, i32 %1507
  %1509 = bitcast i8* %1508 to <64 x i8>*
  %1510 = load <64 x i8>, <64 x i8>* %1509, align 128, !tbaa !129
  %1511 = zext <64 x i8> %1510 to <64 x i16>
  %1512 = bitcast <64 x i16> %1475 to <32 x i32>
  %1513 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1512) #11
  %1514 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1162, <32 x i32> %1513) #11
  %1515 = bitcast <64 x i16> %1493 to <32 x i32>
  %1516 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1515) #11
  %1517 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1166, <32 x i32> %1516) #11
  %1518 = bitcast <64 x i16> %1511 to <32 x i32>
  %1519 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1518) #11
  %1520 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1170, <32 x i32> %1519) #11
  %1521 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1520, <64 x i32> %1161) #11
  %1522 = bitcast <64 x i16> %1499 to <32 x i32>
  %1523 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1522) #11
  %1524 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1521, <32 x i32> %1175, <32 x i32> %1523) #11
  %1525 = bitcast <64 x i16> %1505 to <32 x i32>
  %1526 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1525) #11
  %1527 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1179, <32 x i32> %1526) #11
  %1528 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1524, <64 x i32> %1527) #11
  %1529 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1517, <64 x i32> %1528) #11
  %1530 = bitcast <64 x i16> %1481 to <32 x i32>
  %1531 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1530) #11
  %1532 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1529, <32 x i32> %1185, <32 x i32> %1531) #11
  %1533 = bitcast <64 x i16> %1487 to <32 x i32>
  %1534 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1533) #11
  %1535 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1189, <32 x i32> %1534) #11
  %1536 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1532, <64 x i32> %1535) #11
  %1537 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1514, <64 x i32> %1536) #11
  %1538 = bitcast <64 x i16> %1463 to <32 x i32>
  %1539 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1538) #11
  %1540 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1537, <32 x i32> %1195, <32 x i32> %1539) #11
  %1541 = bitcast <64 x i16> %1469 to <32 x i32>
  %1542 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1541) #11
  %1543 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1199, <32 x i32> %1542) #11
  %1544 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1540, <64 x i32> %1543) #11
  %1545 = getelementptr inbounds i8, i8* %1460, i32 64
  %1546 = bitcast i8* %1545 to <64 x i8>*
  %1547 = load <64 x i8>, <64 x i8>* %1546, align 64, !tbaa !129
  %1548 = zext <64 x i8> %1547 to <64 x i16>
  %1549 = getelementptr inbounds i8, i8* %1466, i32 64
  %1550 = bitcast i8* %1549 to <64 x i8>*
  %1551 = load <64 x i8>, <64 x i8>* %1550, align 64, !tbaa !129
  %1552 = zext <64 x i8> %1551 to <64 x i16>
  %1553 = getelementptr inbounds i8, i8* %1472, i32 64
  %1554 = bitcast i8* %1553 to <64 x i8>*
  %1555 = load <64 x i8>, <64 x i8>* %1554, align 64, !tbaa !129
  %1556 = zext <64 x i8> %1555 to <64 x i16>
  %1557 = getelementptr inbounds i8, i8* %1478, i32 64
  %1558 = bitcast i8* %1557 to <64 x i8>*
  %1559 = load <64 x i8>, <64 x i8>* %1558, align 64, !tbaa !129
  %1560 = zext <64 x i8> %1559 to <64 x i16>
  %1561 = getelementptr inbounds i8, i8* %1484, i32 64
  %1562 = bitcast i8* %1561 to <64 x i8>*
  %1563 = load <64 x i8>, <64 x i8>* %1562, align 64, !tbaa !129
  %1564 = zext <64 x i8> %1563 to <64 x i16>
  %1565 = getelementptr inbounds i8, i8* %1490, i32 64
  %1566 = bitcast i8* %1565 to <64 x i8>*
  %1567 = load <64 x i8>, <64 x i8>* %1566, align 64, !tbaa !129
  %1568 = zext <64 x i8> %1567 to <64 x i16>
  %1569 = getelementptr inbounds i8, i8* %1496, i32 64
  %1570 = bitcast i8* %1569 to <64 x i8>*
  %1571 = load <64 x i8>, <64 x i8>* %1570, align 64, !tbaa !129
  %1572 = zext <64 x i8> %1571 to <64 x i16>
  %1573 = getelementptr inbounds i8, i8* %1502, i32 64
  %1574 = bitcast i8* %1573 to <64 x i8>*
  %1575 = load <64 x i8>, <64 x i8>* %1574, align 64, !tbaa !129
  %1576 = zext <64 x i8> %1575 to <64 x i16>
  %1577 = getelementptr inbounds i8, i8* %1508, i32 64
  %1578 = bitcast i8* %1577 to <64 x i8>*
  %1579 = load <64 x i8>, <64 x i8>* %1578, align 64, !tbaa !129
  %1580 = zext <64 x i8> %1579 to <64 x i16>
  %1581 = bitcast <64 x i16> %1556 to <32 x i32>
  %1582 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1581) #11
  %1583 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1250, <32 x i32> %1582) #11
  %1584 = bitcast <64 x i16> %1568 to <32 x i32>
  %1585 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1584) #11
  %1586 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1254, <32 x i32> %1585) #11
  %1587 = bitcast <64 x i16> %1580 to <32 x i32>
  %1588 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1587) #11
  %1589 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1258, <32 x i32> %1588) #11
  %1590 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1589, <64 x i32> %1249) #11
  %1591 = bitcast <64 x i16> %1572 to <32 x i32>
  %1592 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1591) #11
  %1593 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1590, <32 x i32> %1263, <32 x i32> %1592) #11
  %1594 = bitcast <64 x i16> %1576 to <32 x i32>
  %1595 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1594) #11
  %1596 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1267, <32 x i32> %1595) #11
  %1597 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1593, <64 x i32> %1596) #11
  %1598 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1586, <64 x i32> %1597) #11
  %1599 = bitcast <64 x i16> %1560 to <32 x i32>
  %1600 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1599) #11
  %1601 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1598, <32 x i32> %1273, <32 x i32> %1600) #11
  %1602 = bitcast <64 x i16> %1564 to <32 x i32>
  %1603 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1602) #11
  %1604 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1277, <32 x i32> %1603) #11
  %1605 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1601, <64 x i32> %1604) #11
  %1606 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1583, <64 x i32> %1605) #11
  %1607 = bitcast <64 x i16> %1548 to <32 x i32>
  %1608 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1607) #11
  %1609 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1606, <32 x i32> %1283, <32 x i32> %1608) #11
  %1610 = bitcast <64 x i16> %1552 to <32 x i32>
  %1611 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1610) #11
  %1612 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1287, <32 x i32> %1611) #11
  %1613 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1609, <64 x i32> %1612) #11
  %1614 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1544)
  %1615 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1544)
  %1616 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1613)
  %1617 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1613)
  %1618 = add nsw i32 %1297, %1077
  %1619 = shl nsw i32 %1618, 7
  %1620 = getelementptr inbounds i8, i8* %resampled_input, i32 %1619
  %1621 = bitcast i8* %1620 to <64 x i8>*
  %1622 = load <64 x i8>, <64 x i8>* %1621, align 128, !tbaa !129
  %1623 = zext <64 x i8> %1622 to <64 x i16>
  %1624 = add nsw i32 %1297, %1078
  %1625 = shl nsw i32 %1624, 7
  %1626 = getelementptr inbounds i8, i8* %resampled_input, i32 %1625
  %1627 = bitcast i8* %1626 to <64 x i8>*
  %1628 = load <64 x i8>, <64 x i8>* %1627, align 128, !tbaa !129
  %1629 = zext <64 x i8> %1628 to <64 x i16>
  %1630 = add nsw i32 %1297, %1079
  %1631 = shl nsw i32 %1630, 7
  %1632 = getelementptr inbounds i8, i8* %resampled_input, i32 %1631
  %1633 = bitcast i8* %1632 to <64 x i8>*
  %1634 = load <64 x i8>, <64 x i8>* %1633, align 128, !tbaa !129
  %1635 = zext <64 x i8> %1634 to <64 x i16>
  %1636 = add nsw i32 %1297, %1080
  %1637 = shl nsw i32 %1636, 7
  %1638 = getelementptr inbounds i8, i8* %resampled_input, i32 %1637
  %1639 = bitcast i8* %1638 to <64 x i8>*
  %1640 = load <64 x i8>, <64 x i8>* %1639, align 128, !tbaa !129
  %1641 = zext <64 x i8> %1640 to <64 x i16>
  %1642 = add nsw i32 %1297, %1081
  %1643 = shl nsw i32 %1642, 7
  %1644 = getelementptr inbounds i8, i8* %resampled_input, i32 %1643
  %1645 = bitcast i8* %1644 to <64 x i8>*
  %1646 = load <64 x i8>, <64 x i8>* %1645, align 128, !tbaa !129
  %1647 = zext <64 x i8> %1646 to <64 x i16>
  %1648 = add nsw i32 %1297, %1082
  %1649 = shl nsw i32 %1648, 7
  %1650 = getelementptr inbounds i8, i8* %resampled_input, i32 %1649
  %1651 = bitcast i8* %1650 to <64 x i8>*
  %1652 = load <64 x i8>, <64 x i8>* %1651, align 128, !tbaa !129
  %1653 = zext <64 x i8> %1652 to <64 x i16>
  %1654 = add nsw i32 %1297, %1083
  %1655 = shl nsw i32 %1654, 7
  %1656 = getelementptr inbounds i8, i8* %resampled_input, i32 %1655
  %1657 = bitcast i8* %1656 to <64 x i8>*
  %1658 = load <64 x i8>, <64 x i8>* %1657, align 128, !tbaa !129
  %1659 = zext <64 x i8> %1658 to <64 x i16>
  %1660 = add nsw i32 %1297, %1084
  %1661 = shl nsw i32 %1660, 7
  %1662 = getelementptr inbounds i8, i8* %resampled_input, i32 %1661
  %1663 = bitcast i8* %1662 to <64 x i8>*
  %1664 = load <64 x i8>, <64 x i8>* %1663, align 128, !tbaa !129
  %1665 = zext <64 x i8> %1664 to <64 x i16>
  %1666 = add nsw i32 %1297, %1085
  %1667 = shl nsw i32 %1666, 7
  %1668 = getelementptr inbounds i8, i8* %resampled_input, i32 %1667
  %1669 = bitcast i8* %1668 to <64 x i8>*
  %1670 = load <64 x i8>, <64 x i8>* %1669, align 128, !tbaa !129
  %1671 = zext <64 x i8> %1670 to <64 x i16>
  %1672 = bitcast <64 x i16> %1635 to <32 x i32>
  %1673 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1672) #11
  %1674 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1162, <32 x i32> %1673) #11
  %1675 = bitcast <64 x i16> %1653 to <32 x i32>
  %1676 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1675) #11
  %1677 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1166, <32 x i32> %1676) #11
  %1678 = bitcast <64 x i16> %1671 to <32 x i32>
  %1679 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1678) #11
  %1680 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1170, <32 x i32> %1679) #11
  %1681 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1680, <64 x i32> %1161) #11
  %1682 = bitcast <64 x i16> %1659 to <32 x i32>
  %1683 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1682) #11
  %1684 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1681, <32 x i32> %1175, <32 x i32> %1683) #11
  %1685 = bitcast <64 x i16> %1665 to <32 x i32>
  %1686 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1685) #11
  %1687 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1179, <32 x i32> %1686) #11
  %1688 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1684, <64 x i32> %1687) #11
  %1689 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1677, <64 x i32> %1688) #11
  %1690 = bitcast <64 x i16> %1641 to <32 x i32>
  %1691 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1690) #11
  %1692 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1689, <32 x i32> %1185, <32 x i32> %1691) #11
  %1693 = bitcast <64 x i16> %1647 to <32 x i32>
  %1694 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1693) #11
  %1695 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1189, <32 x i32> %1694) #11
  %1696 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1692, <64 x i32> %1695) #11
  %1697 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1674, <64 x i32> %1696) #11
  %1698 = bitcast <64 x i16> %1623 to <32 x i32>
  %1699 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1698) #11
  %1700 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1697, <32 x i32> %1195, <32 x i32> %1699) #11
  %1701 = bitcast <64 x i16> %1629 to <32 x i32>
  %1702 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1701) #11
  %1703 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1199, <32 x i32> %1702) #11
  %1704 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1700, <64 x i32> %1703) #11
  %1705 = getelementptr inbounds i8, i8* %1620, i32 64
  %1706 = bitcast i8* %1705 to <64 x i8>*
  %1707 = load <64 x i8>, <64 x i8>* %1706, align 64, !tbaa !129
  %1708 = zext <64 x i8> %1707 to <64 x i16>
  %1709 = getelementptr inbounds i8, i8* %1626, i32 64
  %1710 = bitcast i8* %1709 to <64 x i8>*
  %1711 = load <64 x i8>, <64 x i8>* %1710, align 64, !tbaa !129
  %1712 = zext <64 x i8> %1711 to <64 x i16>
  %1713 = getelementptr inbounds i8, i8* %1632, i32 64
  %1714 = bitcast i8* %1713 to <64 x i8>*
  %1715 = load <64 x i8>, <64 x i8>* %1714, align 64, !tbaa !129
  %1716 = zext <64 x i8> %1715 to <64 x i16>
  %1717 = getelementptr inbounds i8, i8* %1638, i32 64
  %1718 = bitcast i8* %1717 to <64 x i8>*
  %1719 = load <64 x i8>, <64 x i8>* %1718, align 64, !tbaa !129
  %1720 = zext <64 x i8> %1719 to <64 x i16>
  %1721 = getelementptr inbounds i8, i8* %1644, i32 64
  %1722 = bitcast i8* %1721 to <64 x i8>*
  %1723 = load <64 x i8>, <64 x i8>* %1722, align 64, !tbaa !129
  %1724 = zext <64 x i8> %1723 to <64 x i16>
  %1725 = getelementptr inbounds i8, i8* %1650, i32 64
  %1726 = bitcast i8* %1725 to <64 x i8>*
  %1727 = load <64 x i8>, <64 x i8>* %1726, align 64, !tbaa !129
  %1728 = zext <64 x i8> %1727 to <64 x i16>
  %1729 = getelementptr inbounds i8, i8* %1656, i32 64
  %1730 = bitcast i8* %1729 to <64 x i8>*
  %1731 = load <64 x i8>, <64 x i8>* %1730, align 64, !tbaa !129
  %1732 = zext <64 x i8> %1731 to <64 x i16>
  %1733 = getelementptr inbounds i8, i8* %1662, i32 64
  %1734 = bitcast i8* %1733 to <64 x i8>*
  %1735 = load <64 x i8>, <64 x i8>* %1734, align 64, !tbaa !129
  %1736 = zext <64 x i8> %1735 to <64 x i16>
  %1737 = getelementptr inbounds i8, i8* %1668, i32 64
  %1738 = bitcast i8* %1737 to <64 x i8>*
  %1739 = load <64 x i8>, <64 x i8>* %1738, align 64, !tbaa !129
  %1740 = zext <64 x i8> %1739 to <64 x i16>
  %1741 = bitcast <64 x i16> %1716 to <32 x i32>
  %1742 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1741) #11
  %1743 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1250, <32 x i32> %1742) #11
  %1744 = bitcast <64 x i16> %1728 to <32 x i32>
  %1745 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1744) #11
  %1746 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1254, <32 x i32> %1745) #11
  %1747 = bitcast <64 x i16> %1740 to <32 x i32>
  %1748 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1747) #11
  %1749 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1258, <32 x i32> %1748) #11
  %1750 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1749, <64 x i32> %1249) #11
  %1751 = bitcast <64 x i16> %1732 to <32 x i32>
  %1752 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1751) #11
  %1753 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1750, <32 x i32> %1263, <32 x i32> %1752) #11
  %1754 = bitcast <64 x i16> %1736 to <32 x i32>
  %1755 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1754) #11
  %1756 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1267, <32 x i32> %1755) #11
  %1757 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1753, <64 x i32> %1756) #11
  %1758 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1746, <64 x i32> %1757) #11
  %1759 = bitcast <64 x i16> %1720 to <32 x i32>
  %1760 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1759) #11
  %1761 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1758, <32 x i32> %1273, <32 x i32> %1760) #11
  %1762 = bitcast <64 x i16> %1724 to <32 x i32>
  %1763 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1762) #11
  %1764 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1277, <32 x i32> %1763) #11
  %1765 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1761, <64 x i32> %1764) #11
  %1766 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1743, <64 x i32> %1765) #11
  %1767 = bitcast <64 x i16> %1708 to <32 x i32>
  %1768 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1767) #11
  %1769 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1766, <32 x i32> %1283, <32 x i32> %1768) #11
  %1770 = bitcast <64 x i16> %1712 to <32 x i32>
  %1771 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1770) #11
  %1772 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1287, <32 x i32> %1771) #11
  %1773 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1769, <64 x i32> %1772) #11
  %1774 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1704)
  %1775 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1704)
  %1776 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1773)
  %1777 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1773)
  br label %"consume convolved"

next_bb18:                                        ; preds = %"for output.s0.x.xo"
  %1778 = add nsw i32 %output.s0.x.x.base.s, %19
  br i1 %85, label %"for convolved.s1.r19$y.preheader", label %"next_bb18.consume convolved_crit_edge", !prof !101

"next_bb18.consume convolved_crit_edge":          ; preds = %next_bb18
  %.pre5047 = add nsw i32 %1778, 1
  br label %"consume convolved"

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb18
  %1779 = mul nsw i32 %1778, %stride_x
  %1780 = sub nsw i32 %1779, %t2225
  %1781 = add nsw i32 %1778, 1
  %1782 = mul nsw i32 %1781, %stride_x
  %1783 = sub nsw i32 %1782, %t2225
  br i1 %84, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !101

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %.lcssa4888.us4920 = phi <32 x i32> [ %1904, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4886.us4918 = phi <32 x i32> [ %1903, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1055, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4884.us4916 = phi <32 x i32> [ %1902, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1054, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4882.us4914 = phi <32 x i32> [ %1901, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1053, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4880.us4912 = phi <32 x i32> [ %1882, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4878.us4910 = phi <32 x i32> [ %1881, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1055, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4876.us4908 = phi <32 x i32> [ %1880, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1054, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4874.us4906 = phi <32 x i32> [ %1879, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1053, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4872.us4904 = phi <32 x i32> [ %1859, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4870.us4902 = phi <32 x i32> [ %1858, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1055, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4868.us4900 = phi <32 x i32> [ %1857, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1054, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4866.us4898 = phi <32 x i32> [ %1856, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1053, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4864.us4896 = phi <32 x i32> [ %1837, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1056, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4862.us4894 = phi <32 x i32> [ %1836, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1055, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4860.us4892 = phi <32 x i32> [ %1835, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1054, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa4858.us4890 = phi <32 x i32> [ %1834, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1053, %"for convolved.s1.r19$y.preheader" ]
  %"convolved.s1.r19$y.us" = phi i32 [ %1906, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %1784 = mul nsw i32 %"convolved.s1.r19$y.us", %a68
  %1785 = add nsw i32 %1784, %1066
  %t2303.us = mul nsw i32 %1785, %128
  %1786 = add nsw i32 %1784, %1067
  %t2304.us = mul nsw i32 %1786, %128
  %1787 = mul nsw i32 %"convolved.s1.r19$y.us", %4
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %1788 = phi <32 x i32> [ %1904, %"for convolved.s1.r19$x.us" ], [ %.lcssa4888.us4920, %"for convolved.s1.r19$y.us" ]
  %1789 = phi <32 x i32> [ %1903, %"for convolved.s1.r19$x.us" ], [ %.lcssa4886.us4918, %"for convolved.s1.r19$y.us" ]
  %1790 = phi <32 x i32> [ %1902, %"for convolved.s1.r19$x.us" ], [ %.lcssa4884.us4916, %"for convolved.s1.r19$y.us" ]
  %1791 = phi <32 x i32> [ %1901, %"for convolved.s1.r19$x.us" ], [ %.lcssa4882.us4914, %"for convolved.s1.r19$y.us" ]
  %1792 = phi <32 x i32> [ %1882, %"for convolved.s1.r19$x.us" ], [ %.lcssa4880.us4912, %"for convolved.s1.r19$y.us" ]
  %1793 = phi <32 x i32> [ %1881, %"for convolved.s1.r19$x.us" ], [ %.lcssa4878.us4910, %"for convolved.s1.r19$y.us" ]
  %1794 = phi <32 x i32> [ %1880, %"for convolved.s1.r19$x.us" ], [ %.lcssa4876.us4908, %"for convolved.s1.r19$y.us" ]
  %1795 = phi <32 x i32> [ %1879, %"for convolved.s1.r19$x.us" ], [ %.lcssa4874.us4906, %"for convolved.s1.r19$y.us" ]
  %1796 = phi <32 x i32> [ %1859, %"for convolved.s1.r19$x.us" ], [ %.lcssa4872.us4904, %"for convolved.s1.r19$y.us" ]
  %1797 = phi <32 x i32> [ %1858, %"for convolved.s1.r19$x.us" ], [ %.lcssa4870.us4902, %"for convolved.s1.r19$y.us" ]
  %1798 = phi <32 x i32> [ %1857, %"for convolved.s1.r19$x.us" ], [ %.lcssa4868.us4900, %"for convolved.s1.r19$y.us" ]
  %1799 = phi <32 x i32> [ %1856, %"for convolved.s1.r19$x.us" ], [ %.lcssa4866.us4898, %"for convolved.s1.r19$y.us" ]
  %1800 = phi <32 x i32> [ %1837, %"for convolved.s1.r19$x.us" ], [ %.lcssa4864.us4896, %"for convolved.s1.r19$y.us" ]
  %1801 = phi <32 x i32> [ %1836, %"for convolved.s1.r19$x.us" ], [ %.lcssa4862.us4894, %"for convolved.s1.r19$y.us" ]
  %1802 = phi <32 x i32> [ %1835, %"for convolved.s1.r19$x.us" ], [ %.lcssa4860.us4892, %"for convolved.s1.r19$y.us" ]
  %1803 = phi <32 x i32> [ %1834, %"for convolved.s1.r19$x.us" ], [ %.lcssa4858.us4890, %"for convolved.s1.r19$y.us" ]
  %"convolved.s1.r19$x.us" = phi i32 [ %1905, %"for convolved.s1.r19$x.us" ], [ 0, %"for convolved.s1.r19$y.us" ]
  %1804 = add nsw i32 %"convolved.s1.r19$x.us", %1787
  %1805 = shl nsw i32 %1804, 7
  %1806 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %1805
  %1807 = bitcast i16* %1806 to <32 x i32>*
  %1808 = load <32 x i32>, <32 x i32>* %1807, align 128, !tbaa !105
  %1809 = mul nsw i32 %"convolved.s1.r19$x.us", %a73
  %1810 = add i32 %1809, %t2303.us
  %1811 = add i32 %1810, %1780
  %1812 = shl nsw i32 %1811, 7
  %1813 = getelementptr inbounds i8, i8* %resampled_input, i32 %1812
  %1814 = bitcast i8* %1813 to <64 x i8>*
  %1815 = load <64 x i8>, <64 x i8>* %1814, align 128, !tbaa !129
  %1816 = zext <64 x i8> %1815 to <64 x i16>
  %1817 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1802, <32 x i32> %1803)
  %1818 = bitcast <64 x i16> %1816 to <32 x i32>
  %1819 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1818) #11
  %1820 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1808) #11
  %1821 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1817, <32 x i32> %1819, <32 x i32> %1820) #11
  %1822 = getelementptr inbounds i16, i16* %1806, i32 64
  %1823 = bitcast i16* %1822 to <32 x i32>*
  %1824 = load <32 x i32>, <32 x i32>* %1823, align 128, !tbaa !105
  %1825 = getelementptr inbounds i8, i8* %1813, i32 64
  %1826 = bitcast i8* %1825 to <64 x i8>*
  %1827 = load <64 x i8>, <64 x i8>* %1826, align 64, !tbaa !129
  %1828 = zext <64 x i8> %1827 to <64 x i16>
  %1829 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1800, <32 x i32> %1801)
  %1830 = bitcast <64 x i16> %1828 to <32 x i32>
  %1831 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1830) #11
  %1832 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1824) #11
  %1833 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1829, <32 x i32> %1831, <32 x i32> %1832) #11
  %1834 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1821)
  %1835 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1821)
  %1836 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1833)
  %1837 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1833)
  %1838 = add i32 %1810, %1783
  %1839 = shl nsw i32 %1838, 7
  %1840 = getelementptr inbounds i8, i8* %resampled_input, i32 %1839
  %1841 = bitcast i8* %1840 to <64 x i8>*
  %1842 = load <64 x i8>, <64 x i8>* %1841, align 128, !tbaa !129
  %1843 = zext <64 x i8> %1842 to <64 x i16>
  %1844 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1798, <32 x i32> %1799)
  %1845 = bitcast <64 x i16> %1843 to <32 x i32>
  %1846 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1845) #11
  %1847 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1844, <32 x i32> %1846, <32 x i32> %1820) #11
  %1848 = getelementptr inbounds i8, i8* %1840, i32 64
  %1849 = bitcast i8* %1848 to <64 x i8>*
  %1850 = load <64 x i8>, <64 x i8>* %1849, align 64, !tbaa !129
  %1851 = zext <64 x i8> %1850 to <64 x i16>
  %1852 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1796, <32 x i32> %1797)
  %1853 = bitcast <64 x i16> %1851 to <32 x i32>
  %1854 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1853) #11
  %1855 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1852, <32 x i32> %1854, <32 x i32> %1832) #11
  %1856 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1847)
  %1857 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1847)
  %1858 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1855)
  %1859 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1855)
  %1860 = add i32 %1809, %t2304.us
  %1861 = add i32 %1860, %1780
  %1862 = shl nsw i32 %1861, 7
  %1863 = getelementptr inbounds i8, i8* %resampled_input, i32 %1862
  %1864 = bitcast i8* %1863 to <64 x i8>*
  %1865 = load <64 x i8>, <64 x i8>* %1864, align 128, !tbaa !129
  %1866 = zext <64 x i8> %1865 to <64 x i16>
  %1867 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1794, <32 x i32> %1795)
  %1868 = bitcast <64 x i16> %1866 to <32 x i32>
  %1869 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1868) #11
  %1870 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1867, <32 x i32> %1869, <32 x i32> %1820) #11
  %1871 = getelementptr inbounds i8, i8* %1863, i32 64
  %1872 = bitcast i8* %1871 to <64 x i8>*
  %1873 = load <64 x i8>, <64 x i8>* %1872, align 64, !tbaa !129
  %1874 = zext <64 x i8> %1873 to <64 x i16>
  %1875 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1792, <32 x i32> %1793)
  %1876 = bitcast <64 x i16> %1874 to <32 x i32>
  %1877 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1876) #11
  %1878 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1875, <32 x i32> %1877, <32 x i32> %1832) #11
  %1879 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1870)
  %1880 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1870)
  %1881 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1878)
  %1882 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1878)
  %1883 = add i32 %1860, %1783
  %1884 = shl nsw i32 %1883, 7
  %1885 = getelementptr inbounds i8, i8* %resampled_input, i32 %1884
  %1886 = bitcast i8* %1885 to <64 x i8>*
  %1887 = load <64 x i8>, <64 x i8>* %1886, align 128, !tbaa !129
  %1888 = zext <64 x i8> %1887 to <64 x i16>
  %1889 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1790, <32 x i32> %1791)
  %1890 = bitcast <64 x i16> %1888 to <32 x i32>
  %1891 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1890) #11
  %1892 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1889, <32 x i32> %1891, <32 x i32> %1820) #11
  %1893 = getelementptr inbounds i8, i8* %1885, i32 64
  %1894 = bitcast i8* %1893 to <64 x i8>*
  %1895 = load <64 x i8>, <64 x i8>* %1894, align 64, !tbaa !129
  %1896 = zext <64 x i8> %1895 to <64 x i16>
  %1897 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1788, <32 x i32> %1789)
  %1898 = bitcast <64 x i16> %1896 to <32 x i32>
  %1899 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %1898) #11
  %1900 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %1897, <32 x i32> %1899, <32 x i32> %1832) #11
  %1901 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1892)
  %1902 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1892)
  %1903 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1900)
  %1904 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1900)
  %1905 = add nuw nsw i32 %"convolved.s1.r19$x.us", 1
  %.not746.us = icmp eq i32 %1905, %4
  br i1 %.not746.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %1906 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not745.us = icmp eq i32 %1906, %6
  br i1 %.not745.us, label %"consume convolved", label %"for convolved.s1.r19$y.us"

"consume convolved":                              ; preds = %"end for convolved.s1.r19$x.loopexit.us", %"for convolved.s1.r19$y.preheader", %"next_bb18.consume convolved_crit_edge", %then_bb17
  %.pre-phi5048 = phi i32 [ %.pre5047, %"next_bb18.consume convolved_crit_edge" ], [ %1296, %then_bb17 ], [ %1781, %"for convolved.s1.r19$y.preheader" ], [ %1781, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.pre-phi5046 = phi i32 [ %1778, %"next_bb18.consume convolved_crit_edge" ], [ %1097, %then_bb17 ], [ %1778, %"for convolved.s1.r19$y.preheader" ], [ %1778, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4888.us.lcssa4967 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %1777, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %1904, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4886.us.lcssa4964 = phi <32 x i32> [ %1055, %"next_bb18.consume convolved_crit_edge" ], [ %1776, %then_bb17 ], [ %1055, %"for convolved.s1.r19$y.preheader" ], [ %1903, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4884.us.lcssa4961 = phi <32 x i32> [ %1054, %"next_bb18.consume convolved_crit_edge" ], [ %1775, %then_bb17 ], [ %1054, %"for convolved.s1.r19$y.preheader" ], [ %1902, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4882.us.lcssa4958 = phi <32 x i32> [ %1053, %"next_bb18.consume convolved_crit_edge" ], [ %1774, %then_bb17 ], [ %1053, %"for convolved.s1.r19$y.preheader" ], [ %1901, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4880.us.lcssa4955 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %1617, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %1882, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4878.us.lcssa4952 = phi <32 x i32> [ %1055, %"next_bb18.consume convolved_crit_edge" ], [ %1616, %then_bb17 ], [ %1055, %"for convolved.s1.r19$y.preheader" ], [ %1881, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4876.us.lcssa4949 = phi <32 x i32> [ %1054, %"next_bb18.consume convolved_crit_edge" ], [ %1615, %then_bb17 ], [ %1054, %"for convolved.s1.r19$y.preheader" ], [ %1880, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4874.us.lcssa4946 = phi <32 x i32> [ %1053, %"next_bb18.consume convolved_crit_edge" ], [ %1614, %then_bb17 ], [ %1053, %"for convolved.s1.r19$y.preheader" ], [ %1879, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4872.us.lcssa4943 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %1457, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %1859, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4870.us.lcssa4940 = phi <32 x i32> [ %1055, %"next_bb18.consume convolved_crit_edge" ], [ %1456, %then_bb17 ], [ %1055, %"for convolved.s1.r19$y.preheader" ], [ %1858, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4868.us.lcssa4937 = phi <32 x i32> [ %1054, %"next_bb18.consume convolved_crit_edge" ], [ %1455, %then_bb17 ], [ %1054, %"for convolved.s1.r19$y.preheader" ], [ %1857, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4866.us.lcssa4934 = phi <32 x i32> [ %1053, %"next_bb18.consume convolved_crit_edge" ], [ %1454, %then_bb17 ], [ %1053, %"for convolved.s1.r19$y.preheader" ], [ %1856, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4864.us.lcssa4931 = phi <32 x i32> [ %1056, %"next_bb18.consume convolved_crit_edge" ], [ %1295, %then_bb17 ], [ %1056, %"for convolved.s1.r19$y.preheader" ], [ %1837, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4862.us.lcssa4928 = phi <32 x i32> [ %1055, %"next_bb18.consume convolved_crit_edge" ], [ %1294, %then_bb17 ], [ %1055, %"for convolved.s1.r19$y.preheader" ], [ %1836, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4860.us.lcssa4925 = phi <32 x i32> [ %1054, %"next_bb18.consume convolved_crit_edge" ], [ %1293, %then_bb17 ], [ %1054, %"for convolved.s1.r19$y.preheader" ], [ %1835, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa4858.us.lcssa4922 = phi <32 x i32> [ %1053, %"next_bb18.consume convolved_crit_edge" ], [ %1292, %then_bb17 ], [ %1053, %"for convolved.s1.r19$y.preheader" ], [ %1834, %"end for convolved.s1.r19$x.loopexit.us" ]
  %1907 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4860.us.lcssa4925, <32 x i32> %1087) #11
  %1908 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1907, <32 x i32> %.lcssa4860.us.lcssa4925, <32 x i32> %1087) #11
  %1909 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1908, <32 x i32> %1086) #11
  %1910 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1908, <32 x i32> %1088) #11
  %1911 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1910, <32 x i32> %181) #11
  %1912 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1909, <32 x i32> %1911) #11
  %1913 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4858.us.lcssa4922, <32 x i32> %1087) #11
  %1914 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1913, <32 x i32> %.lcssa4858.us.lcssa4922, <32 x i32> %1087) #11
  %1915 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1914, <32 x i32> %1086) #11
  %1916 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1914, <32 x i32> %1088) #11
  %1917 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1916, <32 x i32> %181) #11
  %1918 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1915, <32 x i32> %1917) #11
  %1919 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1912, <32 x i32> %1918) #11
  %1920 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4864.us.lcssa4931, <32 x i32> %1087) #11
  %1921 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1920, <32 x i32> %.lcssa4864.us.lcssa4931, <32 x i32> %1087) #11
  %1922 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1921, <32 x i32> %1086) #11
  %1923 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1921, <32 x i32> %1088) #11
  %1924 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1923, <32 x i32> %181) #11
  %1925 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1922, <32 x i32> %1924) #11
  %1926 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4862.us.lcssa4928, <32 x i32> %1087) #11
  %1927 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1926, <32 x i32> %.lcssa4862.us.lcssa4928, <32 x i32> %1087) #11
  %1928 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1927, <32 x i32> %1086) #11
  %1929 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1927, <32 x i32> %1088) #11
  %1930 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1929, <32 x i32> %181) #11
  %1931 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1928, <32 x i32> %1930) #11
  %1932 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1925, <32 x i32> %1931) #11
  %1933 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1919, <32 x i32> %1932) #11
  %1934 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1933, <64 x i32> %190) #11
  %1935 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1934) #11
  %1936 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1934) #11
  %1937 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %1935, <32 x i32> %1936) #11
  %1938 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %191, <32 x i32> %1937) #11
  %1939 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1938, <32 x i32> %192) #11
  %1940 = mul nsw i32 %.pre-phi5046, %21
  %1941 = add nsw i32 %1940, %1090
  %1942 = getelementptr inbounds i8, i8* %17, i32 %1941
  %1943 = bitcast i8* %1942 to <32 x i32>*
  store <32 x i32> %1939, <32 x i32>* %1943, align 1, !tbaa !199
  %1944 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4868.us.lcssa4937, <32 x i32> %1087) #11
  %1945 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1944, <32 x i32> %.lcssa4868.us.lcssa4937, <32 x i32> %1087) #11
  %1946 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1945, <32 x i32> %1086) #11
  %1947 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1945, <32 x i32> %1088) #11
  %1948 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1947, <32 x i32> %181) #11
  %1949 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1946, <32 x i32> %1948) #11
  %1950 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4866.us.lcssa4934, <32 x i32> %1087) #11
  %1951 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1950, <32 x i32> %.lcssa4866.us.lcssa4934, <32 x i32> %1087) #11
  %1952 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1951, <32 x i32> %1086) #11
  %1953 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1951, <32 x i32> %1088) #11
  %1954 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1953, <32 x i32> %181) #11
  %1955 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1952, <32 x i32> %1954) #11
  %1956 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1949, <32 x i32> %1955) #11
  %1957 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4872.us.lcssa4943, <32 x i32> %1087) #11
  %1958 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1957, <32 x i32> %.lcssa4872.us.lcssa4943, <32 x i32> %1087) #11
  %1959 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1958, <32 x i32> %1086) #11
  %1960 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1958, <32 x i32> %1088) #11
  %1961 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1960, <32 x i32> %181) #11
  %1962 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1959, <32 x i32> %1961) #11
  %1963 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4870.us.lcssa4940, <32 x i32> %1087) #11
  %1964 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1963, <32 x i32> %.lcssa4870.us.lcssa4940, <32 x i32> %1087) #11
  %1965 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1964, <32 x i32> %1086) #11
  %1966 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1964, <32 x i32> %1088) #11
  %1967 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1966, <32 x i32> %181) #11
  %1968 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1965, <32 x i32> %1967) #11
  %1969 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1962, <32 x i32> %1968) #11
  %1970 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1956, <32 x i32> %1969) #11
  %1971 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %1970, <64 x i32> %190) #11
  %1972 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1971) #11
  %1973 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1971) #11
  %1974 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %1972, <32 x i32> %1973) #11
  %1975 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %191, <32 x i32> %1974) #11
  %1976 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %1975, <32 x i32> %192) #11
  %1977 = mul nsw i32 %.pre-phi5048, %21
  %1978 = add nsw i32 %1977, %1090
  %1979 = getelementptr inbounds i8, i8* %17, i32 %1978
  %1980 = bitcast i8* %1979 to <32 x i32>*
  store <32 x i32> %1976, <32 x i32>* %1980, align 1, !tbaa !199
  %1981 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4876.us.lcssa4949, <32 x i32> %1087) #11
  %1982 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1981, <32 x i32> %.lcssa4876.us.lcssa4949, <32 x i32> %1087) #11
  %1983 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1982, <32 x i32> %1086) #11
  %1984 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1982, <32 x i32> %1088) #11
  %1985 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1984, <32 x i32> %181) #11
  %1986 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1983, <32 x i32> %1985) #11
  %1987 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4874.us.lcssa4946, <32 x i32> %1087) #11
  %1988 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1987, <32 x i32> %.lcssa4874.us.lcssa4946, <32 x i32> %1087) #11
  %1989 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1988, <32 x i32> %1086) #11
  %1990 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1988, <32 x i32> %1088) #11
  %1991 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1990, <32 x i32> %181) #11
  %1992 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1989, <32 x i32> %1991) #11
  %1993 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1986, <32 x i32> %1992) #11
  %1994 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4880.us.lcssa4955, <32 x i32> %1087) #11
  %1995 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %1994, <32 x i32> %.lcssa4880.us.lcssa4955, <32 x i32> %1087) #11
  %1996 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1995, <32 x i32> %1086) #11
  %1997 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %1995, <32 x i32> %1088) #11
  %1998 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1997, <32 x i32> %181) #11
  %1999 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %1996, <32 x i32> %1998) #11
  %2000 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4878.us.lcssa4952, <32 x i32> %1087) #11
  %2001 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2000, <32 x i32> %.lcssa4878.us.lcssa4952, <32 x i32> %1087) #11
  %2002 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2001, <32 x i32> %1086) #11
  %2003 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2001, <32 x i32> %1088) #11
  %2004 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2003, <32 x i32> %181) #11
  %2005 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2002, <32 x i32> %2004) #11
  %2006 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %1999, <32 x i32> %2005) #11
  %2007 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1993, <32 x i32> %2006) #11
  %2008 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2007, <64 x i32> %190) #11
  %2009 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2008) #11
  %2010 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2008) #11
  %2011 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %2009, <32 x i32> %2010) #11
  %2012 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %191, <32 x i32> %2011) #11
  %2013 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2012, <32 x i32> %192) #11
  %2014 = add nsw i32 %1940, %1092
  %2015 = getelementptr inbounds i8, i8* %17, i32 %2014
  %2016 = bitcast i8* %2015 to <32 x i32>*
  store <32 x i32> %2013, <32 x i32>* %2016, align 1, !tbaa !199
  %2017 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4884.us.lcssa4961, <32 x i32> %1087) #11
  %2018 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2017, <32 x i32> %.lcssa4884.us.lcssa4961, <32 x i32> %1087) #11
  %2019 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2018, <32 x i32> %1086) #11
  %2020 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2018, <32 x i32> %1088) #11
  %2021 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2020, <32 x i32> %181) #11
  %2022 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2019, <32 x i32> %2021) #11
  %2023 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4882.us.lcssa4958, <32 x i32> %1087) #11
  %2024 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2023, <32 x i32> %.lcssa4882.us.lcssa4958, <32 x i32> %1087) #11
  %2025 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2024, <32 x i32> %1086) #11
  %2026 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2024, <32 x i32> %1088) #11
  %2027 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2026, <32 x i32> %181) #11
  %2028 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2025, <32 x i32> %2027) #11
  %2029 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %2022, <32 x i32> %2028) #11
  %2030 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4888.us.lcssa4967, <32 x i32> %1087) #11
  %2031 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2030, <32 x i32> %.lcssa4888.us.lcssa4967, <32 x i32> %1087) #11
  %2032 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2031, <32 x i32> %1086) #11
  %2033 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2031, <32 x i32> %1088) #11
  %2034 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2033, <32 x i32> %181) #11
  %2035 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2032, <32 x i32> %2034) #11
  %2036 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4886.us.lcssa4964, <32 x i32> %1087) #11
  %2037 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %2036, <32 x i32> %.lcssa4886.us.lcssa4964, <32 x i32> %1087) #11
  %2038 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2037, <32 x i32> %1086) #11
  %2039 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %2037, <32 x i32> %1088) #11
  %2040 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2039, <32 x i32> %181) #11
  %2041 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %2038, <32 x i32> %2040) #11
  %2042 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %2035, <32 x i32> %2041) #11
  %2043 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2029, <32 x i32> %2042) #11
  %2044 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2043, <64 x i32> %190) #11
  %2045 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2044) #11
  %2046 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2044) #11
  %2047 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %2045, <32 x i32> %2046) #11
  %2048 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %191, <32 x i32> %2047) #11
  %2049 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2048, <32 x i32> %192) #11
  %2050 = add nsw i32 %1977, %1092
  %2051 = getelementptr inbounds i8, i8* %17, i32 %2050
  %2052 = bitcast i8* %2051 to <32 x i32>*
  store <32 x i32> %2049, <32 x i32>* %2052, align 1, !tbaa !199
  %2053 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not744 = icmp eq i32 %2053, %146
  br i1 %.not744, label %"end for output.s0.x.xo.loopexit", label %"for output.s0.x.xo"

then_bb67:                                        ; preds = %next_bb
  %t2330 = icmp slt i32 %a73, 0
  %t2332 = icmp slt i32 %stride_x, 0
  %2054 = add nsw i32 %4, -1
  %2055 = mul nsw i32 %2054, %a73
  %t2333 = select i1 %t2330, i32 %2055, i32 0
  %t2334.s = select i1 %t2332, i32 %20, i32 1
  %t2335 = icmp slt i32 %a68, 0
  %t2337 = icmp slt i32 %stride_y, 0
  %2056 = add nsw i32 %6, -1
  %2057 = mul nsw i32 %2056, %a68
  %t2338 = select i1 %t2335, i32 %2057, i32 0
  %t2339.s = select i1 %t2337, i32 %23, i32 1
  %2058 = icmp eq i32 %4, 3
  %2059 = icmp eq i32 %6, 3
  %t2340 = and i1 %2058, %2059
  %t2325 = icmp eq i32 %depth_multiplier, 1
  %a68.op717 = shl i32 %a68, 1
  %2060 = select i1 %t2335, i32 %a68.op717, i32 0
  %2061 = select i1 %t2340, i32 %2060, i32 %t2338
  %2062 = add i32 %22, -1
  %2063 = add i32 %2062, %t2339.s
  %2064 = mul nsw i32 %2063, %stride_y
  %b45 = add nsw i32 %2064, %2061
  %a73.op718 = shl i32 %a73, 1
  %2065 = select i1 %t2330, i32 %a73.op718, i32 0
  %2066 = select i1 %t2340, i32 %2065, i32 %t2333
  %2067 = add i32 %19, -1
  %2068 = add i32 %2067, %t2334.s
  %2069 = mul nsw i32 %2068, %stride_x
  %b44 = add nsw i32 %2069, %2066
  %2070 = select i1 %t2335, i32 0, i32 %2057
  %2071 = add nsw i32 %23, -1
  %2072 = select i1 %t2337, i32 0, i32 %2071
  %2073 = add nsw i32 %2072, %22
  %2074 = mul nsw i32 %2073, %stride_y
  %b50 = add nsw i32 %2074, %2070
  %2075 = select i1 %t2330, i32 0, i32 %2055
  %2076 = add nsw i32 %20, -1
  %2077 = select i1 %t2332, i32 0, i32 %2076
  %2078 = add nsw i32 %2077, %19
  %2079 = mul nsw i32 %2078, %stride_x
  %b46 = add nsw i32 %2079, %2075
  %2080 = mul nsw i32 %13, %12
  %2081 = mul nsw i32 %16, %14
  %2082 = mul nsw i32 %11, %10
  %2083 = add i32 %2080, %2082
  %t2326 = add i32 %2083, %2081
  %2084 = add nuw nsw i32 %3, 127
  %2085 = ashr i32 %2084, 7
  %b39 = add nsw i32 %3, -128
  %2086 = icmp sgt i32 %4, 0
  %2087 = icmp sgt i32 %6, 0
  %2088 = select i1 %2087, i32 %6, i32 0
  %.op4969 = shl i32 %4, 8
  %2089 = select i1 %2086, i32 %.op4969, i32 0
  %2090 = mul i32 %2089, %2088
  %2091 = or i32 %2090, 134
  %2092 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %2093 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %2094 = shufflevector <64 x i8> %2093, <64 x i8> undef, <64 x i32> zeroinitializer
  %2095 = zext <64 x i8> %2094 to <64 x i16>
  %2096 = bitcast <64 x i16> %2095 to <32 x i32>
  %2097 = bitcast [512 x i32]* %offset_c699 to <32 x i32>*
  %2098 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 32
  %2099 = bitcast i32* %2098 to <32 x i32>*
  %2100 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 64
  %2101 = bitcast i32* %2100 to <32 x i32>*
  %2102 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 96
  %2103 = bitcast i32* %2102 to <32 x i32>*
  %2104 = bitcast i8* %0 to i32*
  %2105 = zext i8 %input_zero to i32
  %a42 = add nsw i32 %2069, %t2333
  %2106 = icmp slt i32 %t2333, %2066
  %t2348 = select i1 %2106, i32 %a42, i32 %b44
  %a43 = add nsw i32 %2064, %t2338
  %2107 = icmp slt i32 %t2338, %2061
  %t2346 = select i1 %2107, i32 %a43, i32 %b45
  %2108 = icmp sgt i32 %a73, 0
  %2109 = select i1 %2108, i32 %a73, i32 0
  %2110 = shl nuw nsw i32 %2109, 1
  %2111 = select i1 %t2340, i32 %2110, i32 %2075
  %a44 = add nsw i32 %2079, %2111
  %2112 = icmp sgt i32 %2111, %2075
  %2113 = select i1 %2112, i32 %a44, i32 %b46
  %a54 = sub nsw i32 %2113, %t2348
  %2114 = icmp sgt i32 %a68, 0
  %2115 = select i1 %2114, i32 %a68, i32 0
  %2116 = shl nuw nsw i32 %2115, 1
  %2117 = select i1 %t2340, i32 %2116, i32 %2070
  %a48 = add nsw i32 %2074, %2117
  %2118 = icmp sgt i32 %2117, %2070
  %2119 = select i1 %2118, i32 %a48, i32 %b50
  %a55 = sub nsw i32 %2119, %t2346
  %t2351 = sub nsw i32 %b46, %a42
  %t2350 = sub nsw i32 %b50, %a43
  %2120 = icmp sgt i32 %15, 0
  %2121 = icmp sgt i32 %a54, -1
  %t2540 = select i1 %2121, i32 %a54, i32 -1
  %2122 = icmp sgt i32 %a55, -1
  %t2541 = select i1 %2122, i32 %a55, i32 -1
  %2123 = add nsw i32 %t2541, 1
  %2124 = shl i32 %t2540, 7
  %t2542 = add i32 %2124, 128
  %2125 = mul i32 %t2542, %2123
  %2126 = add i32 %2125, 131
  %2127 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %2128 = icmp sgt i32 %t2350, -1
  %2129 = sub i32 %a43, %t2346
  %2130 = add nsw i32 %a54, 1
  %2131 = sub i32 %a42, %t2348
  %2132 = icmp sgt i32 %t2351, -1
  %2133 = icmp eq i32 %depth_multiplier, 0
  %t2545 = select i1 %2133, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %2134 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %2135 = shufflevector <128 x i32> %2134, <128 x i32> undef, <128 x i32> zeroinitializer
  %2136 = sub nsw <128 x i32> %2135, %t2545
  %2137 = xor i32 %depth_multiplier.lobit, -1
  %2138 = sub nsw i32 %2137, %depth_multiplier.lobit
  %2139 = insertelement <128 x i32> undef, i32 %2138, i32 0
  %2140 = shufflevector <128 x i32> %2139, <128 x i32> undef, <128 x i32> zeroinitializer
  %2141 = xor <128 x i32> %t2545, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg4765 = mul i32 %24, %22
  %.neg4766 = mul i32 %21, %19
  %.neg4767 = mul i32 %25, %14
  %2142 = icmp sgt i32 %23, 0
  %2143 = sub i32 %a68.op717, %t2346
  %2144 = sub i32 %a68, %t2346
  %2145 = icmp sgt i32 %20, 0
  %2146 = bitcast [128 x i32]* %sum_filter701 to <32 x i32>*
  %2147 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 32
  %2148 = bitcast i32* %2147 to <32 x i32>*
  %2149 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 64
  %2150 = bitcast i32* %2149 to <32 x i32>*
  %2151 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 96
  %2152 = bitcast i32* %2151 to <32 x i32>*
  %2153 = sub nsw i32 %a73.op718, %t2348
  %2154 = sub nsw i32 %a73, %t2348
  %.not724 = icmp eq i32 %output_shift, 0
  %2155 = select i1 %.not724, <32 x i32> zeroinitializer, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2156 = add i32 %output_shift, -1
  %2157 = zext i8 %output_zero to i16
  %2158 = insertelement <128 x i16> undef, i16 %2157, i32 0
  %2159 = shufflevector <128 x i16> %2158, <128 x i16> undef, <128 x i32> zeroinitializer
  %2160 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %2161 = shufflevector <128 x i8> %2160, <128 x i8> undef, <128 x i32> zeroinitializer
  %2162 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %2163 = shufflevector <128 x i8> %2162, <128 x i8> undef, <128 x i32> zeroinitializer
  %2164 = bitcast <128 x i16> %2159 to <64 x i32>
  %2165 = bitcast <128 x i8> %2161 to <32 x i32>
  %2166 = bitcast <128 x i8> %2163 to <32 x i32>
  %reass.add4769 = add i32 %.neg4765, %.neg4766
  %reass.add4770 = add i32 %reass.add4769, %.neg4767
  %2167 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %2168 = bitcast [512 x i32]* %offset_c699 to i8*
  %2169 = bitcast [512 x i32]* %offset_c699 to i8*
  %2170 = bitcast [512 x i32]* %offset_c699 to i8*
  %.fca.1.gep.promoted = load i32, i32* %.fca.1.gep, align 4, !tbaa !95
  %.fca.2.gep.promoted = load i32, i32* %.fca.2.gep, align 4
  %2171 = add i32 %4, -1
  %xtraiter5228 = and i32 %4, 3
  %2172 = icmp ult i32 %2171, 3
  %unroll_iter5231 = and i32 %4, -4
  %lcmp.mod5230.not = icmp eq i32 %xtraiter5228, 0
  %xtraiter5233 = and i32 %4, 3
  %2173 = icmp ult i32 %2171, 3
  %unroll_iter5243 = and i32 %4, -4
  %lcmp.mod5238.not = icmp eq i32 %xtraiter5233, 0
  %2174 = or i32 %t2350, %t2351
  %2175 = icmp slt i32 %2174, 0
  %xtraiter5245 = and i32 %4, 3
  %2176 = icmp ult i32 %2171, 3
  %unroll_iter5256 = and i32 %4, -4
  %lcmp.mod5251.not = icmp eq i32 %xtraiter5245, 0
  br label %"for output.s0.c.co69"

next_bb68:                                        ; preds = %next_bb
  %2177 = icmp sgt i32 %3, 0
  br i1 %2177, label %if.end.i893, label %call_destructor.exit825

"for output.s0.c.co69":                           ; preds = %then_bb67, %"end for output.s0.b.rebased97"
  %2178 = phi i32 [ %.fca.2.gep.promoted, %then_bb67 ], [ %2182, %"end for output.s0.b.rebased97" ]
  %2179 = phi i32 [ %.fca.1.gep.promoted, %then_bb67 ], [ %2183, %"end for output.s0.b.rebased97" ]
  %.3 = phi i8* [ null, %then_bb67 ], [ %.4, %"end for output.s0.b.rebased97" ]
  %output.s0.c.co71 = phi i32 [ 0, %then_bb67 ], [ %2490, %"end for output.s0.b.rebased97" ]
  %a37 = shl nsw i32 %output.s0.c.co71, 7
  %2180 = icmp slt i32 %a37, %b39
  %output.s0.c.c.base72 = select i1 %2180, i32 %a37, i32 %b39
  %cmp.i846 = icmp ult i32 %2179, %2091
  %2181 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !97
  br i1 %cmp.i846, label %if.then.i849, label %pseudostack_alloc.exit862, !prof !99

if.then.i849:                                     ; preds = %"for output.s0.c.co69"
  %tobool1.not.i848 = icmp ne i8* %2181, null
  %cmp2.i851 = icmp ugt i32 %2178, 16384
  %or.cond4695 = and i1 %tobool1.not.i848, %cmp2.i851
  br i1 %or.cond4695, label %if.then3.i853, label %if.end.i857

if.then3.i853:                                    ; preds = %if.then.i849
  call void @halide_free(i8* null, i8* nonnull %2181) #15
  br label %if.end.i857

if.end.i857:                                      ; preds = %if.then3.i853, %if.then.i849
  %add.i855 = add i32 %2178, %2091
  %cmp7.i856 = icmp ugt i32 %add.i855, 16384
  br i1 %cmp7.i856, label %if.then8.i859, label %if.end11.i861

if.then8.i859:                                    ; preds = %if.end.i857
  %call.i858 = call i8* @halide_malloc(i8* null, i32 %2091) #15
  br label %if.end11.i861

if.end11.i861:                                    ; preds = %if.then8.i859, %if.end.i857
  %storemerge.i860 = phi i8* [ %call.i858, %if.then8.i859 ], [ null, %if.end.i857 ]
  store i8* %storemerge.i860, i8** %.fca.0.gep, align 4, !tbaa !97
  br label %pseudostack_alloc.exit862

pseudostack_alloc.exit862:                        ; preds = %"for output.s0.c.co69", %if.end11.i861
  %2182 = phi i32 [ %add.i855, %if.end11.i861 ], [ %2178, %"for output.s0.c.co69" ]
  %2183 = phi i32 [ %2091, %if.end11.i861 ], [ %2179, %"for output.s0.c.co69" ]
  %2184 = phi i8* [ %storemerge.i860, %if.end11.i861 ], [ %2181, %"for output.s0.c.co69" ]
  %2185 = bitcast i8* %2184 to i16*
  %.not719 = icmp eq i8* %2184, null
  br i1 %.not719, label %then_bb74, label %"produce filter_zeroed76", !prof !100

then_bb74:                                        ; preds = %pseudostack_alloc.exit862
  %2186 = alloca i8*, i32 %2091, align 128
  %2187 = bitcast i8** %2186 to i16*
  store i8** %2186, i8*** %2092, align 4
  br label %"produce filter_zeroed76"

"produce filter_zeroed76":                        ; preds = %pseudostack_alloc.exit862, %then_bb74
  %filter_zeroed75 = phi i16* [ %2187, %then_bb74 ], [ %2185, %pseudostack_alloc.exit862 ]
  br i1 %2087, label %"for filter_zeroed.s0.y77.preheader", label %"consume sum_filter93.critedge", !prof !101

"for filter_zeroed.s0.y77.preheader":             ; preds = %"produce filter_zeroed76"
  br i1 %2086, label %"for filter_zeroed.s0.y77.us", label %"for sum_filter.s1.r19$y87.preheader.thread", !prof !101

"for sum_filter.s1.r19$y87.preheader.thread":     ; preds = %"for filter_zeroed.s0.y77.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2169, i8 0, i64 512, i1 false)
  br label %"consume sum_filter93"

"for filter_zeroed.s0.y77.us":                    ; preds = %"for filter_zeroed.s0.y77.preheader", %"end for filter_zeroed.s0.x81.loopexit.us"
  %filter_zeroed.s0.y79.us = phi i32 [ %2296, %"end for filter_zeroed.s0.x81.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y77.preheader" ]
  %2188 = mul nsw i32 %filter_zeroed.s0.y79.us, %7
  %2189 = add nsw i32 %2188, %output.s0.c.c.base72
  %2190 = mul nsw i32 %filter_zeroed.s0.y79.us, %4
  br i1 %2172, label %"end for filter_zeroed.s0.x81.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x80.us"

"for filter_zeroed.s0.x80.us":                    ; preds = %"for filter_zeroed.s0.y77.us", %"for filter_zeroed.s0.x80.us"
  %filter_zeroed.s0.x82.us = phi i32 [ %2274, %"for filter_zeroed.s0.x80.us" ], [ 0, %"for filter_zeroed.s0.y77.us" ]
  %niter5232 = phi i32 [ %niter5232.nsub.3, %"for filter_zeroed.s0.x80.us" ], [ %unroll_iter5231, %"for filter_zeroed.s0.y77.us" ]
  %2191 = mul nsw i32 %filter_zeroed.s0.x82.us, %5
  %2192 = add nsw i32 %2189, %2191
  %2193 = getelementptr inbounds i8, i8* %1, i32 %2192
  %2194 = bitcast i8* %2193 to <64 x i8>*
  %2195 = load <64 x i8>, <64 x i8>* %2194, align 1, !tbaa !102
  %2196 = zext <64 x i8> %2195 to <64 x i16>
  %2197 = bitcast <64 x i16> %2196 to <32 x i32>
  %2198 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2197, <32 x i32> %2096) #11
  %2199 = add nsw i32 %filter_zeroed.s0.x82.us, %2190
  %2200 = shl nsw i32 %2199, 7
  %2201 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2200
  %2202 = bitcast i16* %2201 to <32 x i32>*
  store <32 x i32> %2198, <32 x i32>* %2202, align 128, !tbaa !105
  %2203 = getelementptr inbounds i8, i8* %2193, i32 64
  %2204 = bitcast i8* %2203 to <64 x i8>*
  %2205 = load <64 x i8>, <64 x i8>* %2204, align 1, !tbaa !102
  %2206 = zext <64 x i8> %2205 to <64 x i16>
  %2207 = bitcast <64 x i16> %2206 to <32 x i32>
  %2208 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2207, <32 x i32> %2096) #11
  %2209 = getelementptr inbounds i16, i16* %2201, i32 64
  %2210 = bitcast i16* %2209 to <32 x i32>*
  store <32 x i32> %2208, <32 x i32>* %2210, align 128, !tbaa !105
  %2211 = or i32 %filter_zeroed.s0.x82.us, 1
  %2212 = mul nsw i32 %2211, %5
  %2213 = add nsw i32 %2189, %2212
  %2214 = getelementptr inbounds i8, i8* %1, i32 %2213
  %2215 = bitcast i8* %2214 to <64 x i8>*
  %2216 = load <64 x i8>, <64 x i8>* %2215, align 1, !tbaa !102
  %2217 = zext <64 x i8> %2216 to <64 x i16>
  %2218 = bitcast <64 x i16> %2217 to <32 x i32>
  %2219 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2218, <32 x i32> %2096) #11
  %2220 = add nsw i32 %2211, %2190
  %2221 = shl nsw i32 %2220, 7
  %2222 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2221
  %2223 = bitcast i16* %2222 to <32 x i32>*
  store <32 x i32> %2219, <32 x i32>* %2223, align 128, !tbaa !105
  %2224 = getelementptr inbounds i8, i8* %2214, i32 64
  %2225 = bitcast i8* %2224 to <64 x i8>*
  %2226 = load <64 x i8>, <64 x i8>* %2225, align 1, !tbaa !102
  %2227 = zext <64 x i8> %2226 to <64 x i16>
  %2228 = bitcast <64 x i16> %2227 to <32 x i32>
  %2229 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2228, <32 x i32> %2096) #11
  %2230 = getelementptr inbounds i16, i16* %2222, i32 64
  %2231 = bitcast i16* %2230 to <32 x i32>*
  store <32 x i32> %2229, <32 x i32>* %2231, align 128, !tbaa !105
  %2232 = or i32 %filter_zeroed.s0.x82.us, 2
  %2233 = mul nsw i32 %2232, %5
  %2234 = add nsw i32 %2189, %2233
  %2235 = getelementptr inbounds i8, i8* %1, i32 %2234
  %2236 = bitcast i8* %2235 to <64 x i8>*
  %2237 = load <64 x i8>, <64 x i8>* %2236, align 1, !tbaa !102
  %2238 = zext <64 x i8> %2237 to <64 x i16>
  %2239 = bitcast <64 x i16> %2238 to <32 x i32>
  %2240 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2239, <32 x i32> %2096) #11
  %2241 = add nsw i32 %2232, %2190
  %2242 = shl nsw i32 %2241, 7
  %2243 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2242
  %2244 = bitcast i16* %2243 to <32 x i32>*
  store <32 x i32> %2240, <32 x i32>* %2244, align 128, !tbaa !105
  %2245 = getelementptr inbounds i8, i8* %2235, i32 64
  %2246 = bitcast i8* %2245 to <64 x i8>*
  %2247 = load <64 x i8>, <64 x i8>* %2246, align 1, !tbaa !102
  %2248 = zext <64 x i8> %2247 to <64 x i16>
  %2249 = bitcast <64 x i16> %2248 to <32 x i32>
  %2250 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2249, <32 x i32> %2096) #11
  %2251 = getelementptr inbounds i16, i16* %2243, i32 64
  %2252 = bitcast i16* %2251 to <32 x i32>*
  store <32 x i32> %2250, <32 x i32>* %2252, align 128, !tbaa !105
  %2253 = or i32 %filter_zeroed.s0.x82.us, 3
  %2254 = mul nsw i32 %2253, %5
  %2255 = add nsw i32 %2189, %2254
  %2256 = getelementptr inbounds i8, i8* %1, i32 %2255
  %2257 = bitcast i8* %2256 to <64 x i8>*
  %2258 = load <64 x i8>, <64 x i8>* %2257, align 1, !tbaa !102
  %2259 = zext <64 x i8> %2258 to <64 x i16>
  %2260 = bitcast <64 x i16> %2259 to <32 x i32>
  %2261 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2260, <32 x i32> %2096) #11
  %2262 = add nsw i32 %2253, %2190
  %2263 = shl nsw i32 %2262, 7
  %2264 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2263
  %2265 = bitcast i16* %2264 to <32 x i32>*
  store <32 x i32> %2261, <32 x i32>* %2265, align 128, !tbaa !105
  %2266 = getelementptr inbounds i8, i8* %2256, i32 64
  %2267 = bitcast i8* %2266 to <64 x i8>*
  %2268 = load <64 x i8>, <64 x i8>* %2267, align 1, !tbaa !102
  %2269 = zext <64 x i8> %2268 to <64 x i16>
  %2270 = bitcast <64 x i16> %2269 to <32 x i32>
  %2271 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2270, <32 x i32> %2096) #11
  %2272 = getelementptr inbounds i16, i16* %2264, i32 64
  %2273 = bitcast i16* %2272 to <32 x i32>*
  store <32 x i32> %2271, <32 x i32>* %2273, align 128, !tbaa !105
  %2274 = add nuw nsw i32 %filter_zeroed.s0.x82.us, 4
  %niter5232.nsub.3 = add i32 %niter5232, -4
  %niter5232.ncmp.3 = icmp eq i32 %niter5232.nsub.3, 0
  br i1 %niter5232.ncmp.3, label %"end for filter_zeroed.s0.x81.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x80.us"

"end for filter_zeroed.s0.x81.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x80.us", %"for filter_zeroed.s0.y77.us"
  %filter_zeroed.s0.x82.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y77.us" ], [ %2274, %"for filter_zeroed.s0.x80.us" ]
  br i1 %lcmp.mod5230.not, label %"end for filter_zeroed.s0.x81.loopexit.us", label %"for filter_zeroed.s0.x80.us.epil"

"for filter_zeroed.s0.x80.us.epil":               ; preds = %"end for filter_zeroed.s0.x81.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x80.us.epil"
  %filter_zeroed.s0.x82.us.epil = phi i32 [ %2295, %"for filter_zeroed.s0.x80.us.epil" ], [ %filter_zeroed.s0.x82.us.unr, %"end for filter_zeroed.s0.x81.loopexit.us.unr-lcssa" ]
  %epil.iter5229 = phi i32 [ %epil.iter5229.sub, %"for filter_zeroed.s0.x80.us.epil" ], [ %xtraiter5228, %"end for filter_zeroed.s0.x81.loopexit.us.unr-lcssa" ]
  %2275 = mul nsw i32 %filter_zeroed.s0.x82.us.epil, %5
  %2276 = add nsw i32 %2189, %2275
  %2277 = getelementptr inbounds i8, i8* %1, i32 %2276
  %2278 = bitcast i8* %2277 to <64 x i8>*
  %2279 = load <64 x i8>, <64 x i8>* %2278, align 1, !tbaa !102
  %2280 = zext <64 x i8> %2279 to <64 x i16>
  %2281 = bitcast <64 x i16> %2280 to <32 x i32>
  %2282 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2281, <32 x i32> %2096) #11
  %2283 = add nsw i32 %filter_zeroed.s0.x82.us.epil, %2190
  %2284 = shl nsw i32 %2283, 7
  %2285 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2284
  %2286 = bitcast i16* %2285 to <32 x i32>*
  store <32 x i32> %2282, <32 x i32>* %2286, align 128, !tbaa !105
  %2287 = getelementptr inbounds i8, i8* %2277, i32 64
  %2288 = bitcast i8* %2287 to <64 x i8>*
  %2289 = load <64 x i8>, <64 x i8>* %2288, align 1, !tbaa !102
  %2290 = zext <64 x i8> %2289 to <64 x i16>
  %2291 = bitcast <64 x i16> %2290 to <32 x i32>
  %2292 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %2291, <32 x i32> %2096) #11
  %2293 = getelementptr inbounds i16, i16* %2285, i32 64
  %2294 = bitcast i16* %2293 to <32 x i32>*
  store <32 x i32> %2292, <32 x i32>* %2294, align 128, !tbaa !105
  %2295 = add nuw nsw i32 %filter_zeroed.s0.x82.us.epil, 1
  %epil.iter5229.sub = add i32 %epil.iter5229, -1
  %epil.iter5229.cmp.not = icmp eq i32 %epil.iter5229.sub, 0
  br i1 %epil.iter5229.cmp.not, label %"end for filter_zeroed.s0.x81.loopexit.us", label %"for filter_zeroed.s0.x80.us.epil", !llvm.loop !201

"end for filter_zeroed.s0.x81.loopexit.us":       ; preds = %"for filter_zeroed.s0.x80.us.epil", %"end for filter_zeroed.s0.x81.loopexit.us.unr-lcssa"
  %2296 = add nuw nsw i32 %filter_zeroed.s0.y79.us, 1
  %.not734.us = icmp eq i32 %2296, %6
  br i1 %.not734.us, label %"for sum_filter.s1.r19$y87.preheader", label %"for filter_zeroed.s0.y77.us"

"for sum_filter.s1.r19$y87.preheader":            ; preds = %"end for filter_zeroed.s0.x81.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2170, i8 0, i64 512, i1 false)
  br i1 %2086, label %"for sum_filter.s1.r19$y87.us", label %"consume sum_filter93", !prof !101

"for sum_filter.s1.r19$y87.us":                   ; preds = %"for sum_filter.s1.r19$y87.preheader", %"end for sum_filter.s1.r19$x91.loopexit.us"
  %.lcssa4817.us4824 = phi <32 x i32> [ %.lcssa5177, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %.lcssa4815.us4822 = phi <32 x i32> [ %.lcssa5178, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %.lcssa4813.us4820 = phi <32 x i32> [ %.lcssa5179, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %.lcssa4811.us4818 = phi <32 x i32> [ %.lcssa5180, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %"sum_filter.s1.r19$y89.us" = phi i32 [ %2401, %"end for sum_filter.s1.r19$x91.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y87.preheader" ]
  %2297 = mul nsw i32 %"sum_filter.s1.r19$y89.us", %4
  br i1 %2173, label %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x90.us"

"for sum_filter.s1.r19$x90.us":                   ; preds = %"for sum_filter.s1.r19$y87.us", %"for sum_filter.s1.r19$x90.us"
  %2298 = phi <32 x i32> [ %2376, %"for sum_filter.s1.r19$x90.us" ], [ %.lcssa4817.us4824, %"for sum_filter.s1.r19$y87.us" ]
  %2299 = phi <32 x i32> [ %2375, %"for sum_filter.s1.r19$x90.us" ], [ %.lcssa4815.us4822, %"for sum_filter.s1.r19$y87.us" ]
  %2300 = phi <32 x i32> [ %2374, %"for sum_filter.s1.r19$x90.us" ], [ %.lcssa4813.us4820, %"for sum_filter.s1.r19$y87.us" ]
  %2301 = phi <32 x i32> [ %2373, %"for sum_filter.s1.r19$x90.us" ], [ %.lcssa4811.us4818, %"for sum_filter.s1.r19$y87.us" ]
  %"sum_filter.s1.r19$x92.us" = phi i32 [ %2377, %"for sum_filter.s1.r19$x90.us" ], [ 0, %"for sum_filter.s1.r19$y87.us" ]
  %niter5244 = phi i32 [ %niter5244.nsub.3, %"for sum_filter.s1.r19$x90.us" ], [ %unroll_iter5243, %"for sum_filter.s1.r19$y87.us" ]
  %2302 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2300, <32 x i32> %2301)
  %2303 = add nsw i32 %"sum_filter.s1.r19$x92.us", %2297
  %2304 = shl nsw i32 %2303, 7
  %2305 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2304
  %2306 = bitcast i16* %2305 to <32 x i32>*
  %2307 = load <32 x i32>, <32 x i32>* %2306, align 128, !tbaa !105
  %2308 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2307) #11
  %2309 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2308, <64 x i32> %2302) #11
  %2310 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2298, <32 x i32> %2299)
  %2311 = getelementptr inbounds i16, i16* %2305, i32 64
  %2312 = bitcast i16* %2311 to <32 x i32>*
  %2313 = load <32 x i32>, <32 x i32>* %2312, align 128, !tbaa !105
  %2314 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2313) #11
  %2315 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2314, <64 x i32> %2310) #11
  %2316 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2309)
  %2317 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2309)
  %2318 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2315)
  %2319 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2315)
  %2320 = or i32 %"sum_filter.s1.r19$x92.us", 1
  %2321 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2317, <32 x i32> %2316)
  %2322 = add nsw i32 %2320, %2297
  %2323 = shl nsw i32 %2322, 7
  %2324 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2323
  %2325 = bitcast i16* %2324 to <32 x i32>*
  %2326 = load <32 x i32>, <32 x i32>* %2325, align 128, !tbaa !105
  %2327 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2326) #11
  %2328 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2327, <64 x i32> %2321) #11
  %2329 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2319, <32 x i32> %2318)
  %2330 = getelementptr inbounds i16, i16* %2324, i32 64
  %2331 = bitcast i16* %2330 to <32 x i32>*
  %2332 = load <32 x i32>, <32 x i32>* %2331, align 128, !tbaa !105
  %2333 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2332) #11
  %2334 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2333, <64 x i32> %2329) #11
  %2335 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2328)
  %2336 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2328)
  %2337 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2334)
  %2338 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2334)
  %2339 = or i32 %"sum_filter.s1.r19$x92.us", 2
  %2340 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2336, <32 x i32> %2335)
  %2341 = add nsw i32 %2339, %2297
  %2342 = shl nsw i32 %2341, 7
  %2343 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2342
  %2344 = bitcast i16* %2343 to <32 x i32>*
  %2345 = load <32 x i32>, <32 x i32>* %2344, align 128, !tbaa !105
  %2346 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2345) #11
  %2347 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2346, <64 x i32> %2340) #11
  %2348 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2338, <32 x i32> %2337)
  %2349 = getelementptr inbounds i16, i16* %2343, i32 64
  %2350 = bitcast i16* %2349 to <32 x i32>*
  %2351 = load <32 x i32>, <32 x i32>* %2350, align 128, !tbaa !105
  %2352 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2351) #11
  %2353 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2352, <64 x i32> %2348) #11
  %2354 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2347)
  %2355 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2347)
  %2356 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2353)
  %2357 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2353)
  %2358 = or i32 %"sum_filter.s1.r19$x92.us", 3
  %2359 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2355, <32 x i32> %2354)
  %2360 = add nsw i32 %2358, %2297
  %2361 = shl nsw i32 %2360, 7
  %2362 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2361
  %2363 = bitcast i16* %2362 to <32 x i32>*
  %2364 = load <32 x i32>, <32 x i32>* %2363, align 128, !tbaa !105
  %2365 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2364) #11
  %2366 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2365, <64 x i32> %2359) #11
  %2367 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2357, <32 x i32> %2356)
  %2368 = getelementptr inbounds i16, i16* %2362, i32 64
  %2369 = bitcast i16* %2368 to <32 x i32>*
  %2370 = load <32 x i32>, <32 x i32>* %2369, align 128, !tbaa !105
  %2371 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2370) #11
  %2372 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2371, <64 x i32> %2367) #11
  %2373 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2366)
  %2374 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2366)
  %2375 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2372)
  %2376 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2372)
  %2377 = add nuw nsw i32 %"sum_filter.s1.r19$x92.us", 4
  %niter5244.nsub.3 = add i32 %niter5244, -4
  %niter5244.ncmp.3 = icmp eq i32 %niter5244.nsub.3, 0
  br i1 %niter5244.ncmp.3, label %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x90.us"

"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x90.us", %"for sum_filter.s1.r19$y87.us"
  %.lcssa5180.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y87.us" ], [ %2373, %"for sum_filter.s1.r19$x90.us" ]
  %.lcssa5179.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y87.us" ], [ %2374, %"for sum_filter.s1.r19$x90.us" ]
  %.lcssa5178.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y87.us" ], [ %2375, %"for sum_filter.s1.r19$x90.us" ]
  %.lcssa5177.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y87.us" ], [ %2376, %"for sum_filter.s1.r19$x90.us" ]
  %.unr = phi <32 x i32> [ %.lcssa4817.us4824, %"for sum_filter.s1.r19$y87.us" ], [ %2376, %"for sum_filter.s1.r19$x90.us" ]
  %.unr5235 = phi <32 x i32> [ %.lcssa4815.us4822, %"for sum_filter.s1.r19$y87.us" ], [ %2375, %"for sum_filter.s1.r19$x90.us" ]
  %.unr5236 = phi <32 x i32> [ %.lcssa4813.us4820, %"for sum_filter.s1.r19$y87.us" ], [ %2374, %"for sum_filter.s1.r19$x90.us" ]
  %.unr5237 = phi <32 x i32> [ %.lcssa4811.us4818, %"for sum_filter.s1.r19$y87.us" ], [ %2373, %"for sum_filter.s1.r19$x90.us" ]
  %"sum_filter.s1.r19$x92.us.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y87.us" ], [ %2377, %"for sum_filter.s1.r19$x90.us" ]
  br i1 %lcmp.mod5238.not, label %"end for sum_filter.s1.r19$x91.loopexit.us", label %"for sum_filter.s1.r19$x90.us.epil"

"for sum_filter.s1.r19$x90.us.epil":              ; preds = %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x90.us.epil"
  %2378 = phi <32 x i32> [ %2399, %"for sum_filter.s1.r19$x90.us.epil" ], [ %.unr, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ]
  %2379 = phi <32 x i32> [ %2398, %"for sum_filter.s1.r19$x90.us.epil" ], [ %.unr5235, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ]
  %2380 = phi <32 x i32> [ %2397, %"for sum_filter.s1.r19$x90.us.epil" ], [ %.unr5236, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ]
  %2381 = phi <32 x i32> [ %2396, %"for sum_filter.s1.r19$x90.us.epil" ], [ %.unr5237, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ]
  %"sum_filter.s1.r19$x92.us.epil" = phi i32 [ %2400, %"for sum_filter.s1.r19$x90.us.epil" ], [ %"sum_filter.s1.r19$x92.us.unr", %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ]
  %epil.iter5234 = phi i32 [ %epil.iter5234.sub, %"for sum_filter.s1.r19$x90.us.epil" ], [ %xtraiter5233, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ]
  %2382 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2380, <32 x i32> %2381)
  %2383 = add nsw i32 %"sum_filter.s1.r19$x92.us.epil", %2297
  %2384 = shl nsw i32 %2383, 7
  %2385 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %2384
  %2386 = bitcast i16* %2385 to <32 x i32>*
  %2387 = load <32 x i32>, <32 x i32>* %2386, align 128, !tbaa !105
  %2388 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2387) #11
  %2389 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2388, <64 x i32> %2382) #11
  %2390 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2378, <32 x i32> %2379)
  %2391 = getelementptr inbounds i16, i16* %2385, i32 64
  %2392 = bitcast i16* %2391 to <32 x i32>*
  %2393 = load <32 x i32>, <32 x i32>* %2392, align 128, !tbaa !105
  %2394 = call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %2393) #11
  %2395 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2394, <64 x i32> %2390) #11
  %2396 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2389)
  %2397 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2389)
  %2398 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2395)
  %2399 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2395)
  %2400 = add nuw nsw i32 %"sum_filter.s1.r19$x92.us.epil", 1
  %epil.iter5234.sub = add i32 %epil.iter5234, -1
  %epil.iter5234.cmp.not = icmp eq i32 %epil.iter5234.sub, 0
  br i1 %epil.iter5234.cmp.not, label %"end for sum_filter.s1.r19$x91.loopexit.us", label %"for sum_filter.s1.r19$x90.us.epil", !llvm.loop !202

"end for sum_filter.s1.r19$x91.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x90.us.epil", %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa"
  %.lcssa5180 = phi <32 x i32> [ %.lcssa5180.ph, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ], [ %2396, %"for sum_filter.s1.r19$x90.us.epil" ]
  %.lcssa5179 = phi <32 x i32> [ %.lcssa5179.ph, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ], [ %2397, %"for sum_filter.s1.r19$x90.us.epil" ]
  %.lcssa5178 = phi <32 x i32> [ %.lcssa5178.ph, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ], [ %2398, %"for sum_filter.s1.r19$x90.us.epil" ]
  %.lcssa5177 = phi <32 x i32> [ %.lcssa5177.ph, %"end for sum_filter.s1.r19$x91.loopexit.us.unr-lcssa" ], [ %2399, %"for sum_filter.s1.r19$x90.us.epil" ]
  %2401 = add nuw nsw i32 %"sum_filter.s1.r19$y89.us", 1
  %.not732.us = icmp eq i32 %2401, %6
  br i1 %.not732.us, label %"consume sum_filter93.loopexit.split.us", label %"for sum_filter.s1.r19$y87.us"

"consume sum_filter93.loopexit.split.us":         ; preds = %"end for sum_filter.s1.r19$x91.loopexit.us"
  store <32 x i32> %.lcssa5180, <32 x i32>* %2097, align 128, !tbaa !131
  store <32 x i32> %.lcssa5179, <32 x i32>* %2099, align 128, !tbaa !139
  store <32 x i32> %.lcssa5178, <32 x i32>* %2101, align 128, !tbaa !141
  store <32 x i32> %.lcssa5177, <32 x i32>* %2103, align 128, !tbaa !144
  br label %"consume sum_filter93"

"consume sum_filter93.critedge":                  ; preds = %"produce filter_zeroed76"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2168, i8 0, i64 512, i1 false)
  br label %"consume sum_filter93"

"consume sum_filter93":                           ; preds = %"for sum_filter.s1.r19$y87.preheader", %"for sum_filter.s1.r19$y87.preheader.thread", %"consume sum_filter93.loopexit.split.us", %"consume sum_filter93.critedge"
  %2402 = phi <32 x i32> [ %.lcssa5177, %"consume sum_filter93.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter93.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %2403 = phi <32 x i32> [ %.lcssa5178, %"consume sum_filter93.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter93.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %2404 = phi <32 x i32> [ %.lcssa5179, %"consume sum_filter93.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter93.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %2405 = phi <32 x i32> [ %.lcssa5180, %"consume sum_filter93.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter93.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y87.preheader" ]
  %2406 = getelementptr inbounds i32, i32* %2104, i32 %output.s0.c.c.base72
  %2407 = bitcast i32* %2406 to <32 x i32>*
  %2408 = load <32 x i32>, <32 x i32>* %2407, align 4, !tbaa !109
  %2409 = getelementptr inbounds i32, i32* %2406, i32 32
  %2410 = bitcast i32* %2409 to <32 x i32>*
  %2411 = load <32 x i32>, <32 x i32>* %2410, align 4, !tbaa !109
  %2412 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2411, <32 x i32> %2408)
  %2413 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2404, <32 x i32> %2405)
  %2414 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2105) #11
  %2415 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2413) #11
  %2416 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2414, <32 x i32> %2415) #11
  %2417 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2416, <32 x i32> %2414, <32 x i32> %2415) #11
  %2418 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2413) #11
  %2419 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2414, <32 x i32> %2418) #11
  %2420 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2419, <32 x i32> %2414, <32 x i32> %2418) #11
  %2421 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2417, <32 x i32> %2420) #11
  %2422 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2412, <64 x i32> %2421) #11
  %2423 = getelementptr inbounds i32, i32* %2406, i32 64
  %2424 = bitcast i32* %2423 to <32 x i32>*
  %2425 = load <32 x i32>, <32 x i32>* %2424, align 4, !tbaa !109
  %2426 = getelementptr inbounds i32, i32* %2406, i32 96
  %2427 = bitcast i32* %2426 to <32 x i32>*
  %2428 = load <32 x i32>, <32 x i32>* %2427, align 4, !tbaa !109
  %2429 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2428, <32 x i32> %2425)
  %2430 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2402, <32 x i32> %2403)
  %2431 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2430) #11
  %2432 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2414, <32 x i32> %2431) #11
  %2433 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2432, <32 x i32> %2414, <32 x i32> %2431) #11
  %2434 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2430) #11
  %2435 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2414, <32 x i32> %2434) #11
  %2436 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %2435, <32 x i32> %2414, <32 x i32> %2434) #11
  %2437 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2433, <32 x i32> %2436) #11
  %2438 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %2429, <64 x i32> %2437) #11
  %2439 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2422)
  %2440 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2422)
  %2441 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2438)
  %2442 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2438)
  br i1 %2120, label %"for output.s0.b.rebased96.preheader", label %"end for output.s0.b.rebased97", !prof !101

"for output.s0.b.rebased96.preheader":            ; preds = %"consume sum_filter93"
  %2443 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base72, i32 0
  %2444 = shufflevector <128 x i32> %2443, <128 x i32> undef, <128 x i32> zeroinitializer
  %2445 = add nsw <128 x i32> %2444, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit = ashr <128 x i32> %2445, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %2446 = sub nsw <128 x i32> %2445, %.lobit
  %2447 = and <128 x i32> %.lobit, %2140
  %2448 = sub i32 %output.s0.c.c.base72, %t2326
  %2449 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 768
  %2450 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 1024
  %2451 = bitcast i16* %2450 to <32 x i32>*
  %2452 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 896
  %2453 = bitcast i16* %2452 to <32 x i32>*
  %2454 = bitcast i16* %2449 to <32 x i32>*
  %2455 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 384
  %2456 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 640
  %2457 = bitcast i16* %2456 to <32 x i32>*
  %2458 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 512
  %2459 = bitcast i16* %2458 to <32 x i32>*
  %2460 = bitcast i16* %2455 to <32 x i32>*
  %2461 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 256
  %2462 = bitcast i16* %2461 to <32 x i32>*
  %2463 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 128
  %2464 = bitcast i16* %2463 to <32 x i32>*
  %2465 = bitcast i16* %filter_zeroed75 to <32 x i32>*
  %2466 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 1088
  %2467 = bitcast i16* %2466 to <32 x i32>*
  %2468 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 960
  %2469 = bitcast i16* %2468 to <32 x i32>*
  %2470 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 832
  %2471 = bitcast i16* %2470 to <32 x i32>*
  %2472 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 704
  %2473 = bitcast i16* %2472 to <32 x i32>*
  %2474 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 576
  %2475 = bitcast i16* %2474 to <32 x i32>*
  %2476 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 448
  %2477 = bitcast i16* %2476 to <32 x i32>*
  %2478 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 320
  %2479 = bitcast i16* %2478 to <32 x i32>*
  %2480 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 192
  %2481 = bitcast i16* %2480 to <32 x i32>*
  %2482 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 64
  %2483 = bitcast i16* %2482 to <32 x i32>*
  %2484 = sub i32 %output.s0.c.c.base72, %reass.add4770
  br label %"for output.s0.b.rebased96"

"for output.s0.b.rebased96":                      ; preds = %"for output.s0.b.rebased96.preheader", %"end for output.s0.y.yo123"
  %output.s0.b.rebased98 = phi i32 [ %3301, %"end for output.s0.y.yo123" ], [ 0, %"for output.s0.b.rebased96.preheader" ]
  %2485 = load i32, i32* %.fca.1.gep663, align 4, !tbaa !95
  %cmp.i864 = icmp ult i32 %2485, %2126
  %2486 = load i8*, i8** %.fca.0.gep662, align 4, !tbaa !97
  br i1 %cmp.i864, label %if.then.i867, label %pseudostack_alloc.exit880, !prof !99

if.then.i867:                                     ; preds = %"for output.s0.b.rebased96"
  %tobool1.not.i866 = icmp ne i8* %2486, null
  %2487 = load i32, i32* %.fca.2.gep664, align 4
  %cmp2.i869 = icmp ugt i32 %2487, 16384
  %or.cond4696 = and i1 %tobool1.not.i866, %cmp2.i869
  br i1 %or.cond4696, label %if.then3.i871, label %if.end.i875

if.then3.i871:                                    ; preds = %if.then.i867
  call void @halide_free(i8* null, i8* nonnull %2486) #15
  %.pre5042 = load i32, i32* %.fca.2.gep664, align 4, !tbaa !98
  br label %if.end.i875

if.end.i875:                                      ; preds = %if.then3.i871, %if.then.i867
  %2488 = phi i32 [ %.pre5042, %if.then3.i871 ], [ %2487, %if.then.i867 ]
  %add.i873 = add i32 %2488, %2126
  store i32 %add.i873, i32* %.fca.2.gep664, align 4, !tbaa !98
  %cmp7.i874 = icmp ugt i32 %add.i873, 16384
  br i1 %cmp7.i874, label %if.then8.i877, label %if.end11.i879

if.then8.i877:                                    ; preds = %if.end.i875
  %call.i876 = call i8* @halide_malloc(i8* null, i32 %2126) #15
  br label %if.end11.i879

if.end11.i879:                                    ; preds = %if.then8.i877, %if.end.i875
  %storemerge.i878 = phi i8* [ %call.i876, %if.then8.i877 ], [ null, %if.end.i875 ]
  store i8* %storemerge.i878, i8** %.fca.0.gep662, align 4, !tbaa !97
  store i32 %2126, i32* %.fca.1.gep663, align 4, !tbaa !95
  br label %pseudostack_alloc.exit880

pseudostack_alloc.exit880:                        ; preds = %"for output.s0.b.rebased96", %if.end11.i879
  %2489 = phi i8* [ %storemerge.i878, %if.end11.i879 ], [ %2486, %"for output.s0.b.rebased96" ]
  %.not721 = icmp eq i8* %2489, null
  br i1 %.not721, label %then_bb100, label %"produce resampled_input102", !prof !100

"end for output.s0.b.rebased97":                  ; preds = %"end for output.s0.y.yo123", %"consume sum_filter93"
  %.4 = phi i8* [ %.3, %"consume sum_filter93" ], [ %2167, %"end for output.s0.y.yo123" ]
  %2490 = add nuw nsw i32 %output.s0.c.co71, 1
  %.not720 = icmp eq i32 %2490, %2085
  br i1 %.not720, label %after_bb.loopexit5059, label %"for output.s0.c.co69"

then_bb100:                                       ; preds = %pseudostack_alloc.exit880
  %2491 = alloca i8*, i32 %2126, align 128
  %2492 = bitcast i8** %2491 to i8*
  store i8** %2491, i8*** %2127, align 4
  br label %"produce resampled_input102"

"produce resampled_input102":                     ; preds = %pseudostack_alloc.exit880, %then_bb100
  %resampled_input101 = phi i8* [ %2492, %then_bb100 ], [ %2489, %pseudostack_alloc.exit880 ]
  br i1 %t2325, label %then_bb104, label %next_bb105

then_bb104:                                       ; preds = %"produce resampled_input102"
  %2493 = add nsw i32 %output.s0.b.rebased98, %14
  %2494 = mul nsw i32 %2493, %16
  %t2358 = add nsw i32 %2448, %2494
  br i1 %2175, label %"consume resampled_input121", label %"for resampled_input.s0.y.rebased106.us", !prof !126

"for resampled_input.s0.y.rebased106.us":         ; preds = %then_bb104, %"end for resampled_input.s0.x.rebased110.loopexit.us"
  %resampled_input.s0.y.rebased108.us = phi i32 [ %2511, %"end for resampled_input.s0.x.rebased110.loopexit.us" ], [ 0, %then_bb104 ]
  %2495 = add nsw i32 %2129, %resampled_input.s0.y.rebased108.us
  %2496 = mul nsw i32 %2495, %2130
  %t2362.us = add nsw i32 %2131, %2496
  %2497 = add nsw i32 %resampled_input.s0.y.rebased108.us, %a43
  %2498 = mul nsw i32 %2497, %13
  %2499 = add nsw i32 %t2358, %2498
  br label %"for resampled_input.s0.x.rebased109.us"

"for resampled_input.s0.x.rebased109.us":         ; preds = %"for resampled_input.s0.y.rebased106.us", %"for resampled_input.s0.x.rebased109.us"
  %resampled_input.s0.x.rebased111.us = phi i32 [ %2510, %"for resampled_input.s0.x.rebased109.us" ], [ 0, %"for resampled_input.s0.y.rebased106.us" ]
  %2500 = add nsw i32 %resampled_input.s0.x.rebased111.us, %a42
  %2501 = mul nsw i32 %2500, %11
  %2502 = add nsw i32 %2499, %2501
  %2503 = getelementptr inbounds i8, i8* %8, i32 %2502
  %2504 = bitcast i8* %2503 to <128 x i8>*
  %2505 = load <128 x i8>, <128 x i8>* %2504, align 1, !tbaa !127
  %2506 = add nsw i32 %t2362.us, %resampled_input.s0.x.rebased111.us
  %2507 = shl nsw i32 %2506, 7
  %2508 = getelementptr inbounds i8, i8* %resampled_input101, i32 %2507
  %2509 = bitcast i8* %2508 to <128 x i8>*
  store <128 x i8> %2505, <128 x i8>* %2509, align 128, !tbaa !129
  %2510 = add nuw nsw i32 %resampled_input.s0.x.rebased111.us, 1
  %.not731.us = icmp eq i32 %resampled_input.s0.x.rebased111.us, %t2351
  br i1 %.not731.us, label %"end for resampled_input.s0.x.rebased110.loopexit.us", label %"for resampled_input.s0.x.rebased109.us"

"end for resampled_input.s0.x.rebased110.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased109.us"
  %2511 = add nuw nsw i32 %resampled_input.s0.y.rebased108.us, 1
  %.not730.us = icmp eq i32 %resampled_input.s0.y.rebased108.us, %t2350
  br i1 %.not730.us, label %"consume resampled_input121", label %"for resampled_input.s0.y.rebased106.us"

next_bb105:                                       ; preds = %"produce resampled_input102"
  br i1 %2128, label %"for resampled_input.s0.y.rebased112.preheader", label %"consume resampled_input121", !prof !101

"for resampled_input.s0.y.rebased112.preheader":  ; preds = %next_bb105
  %2512 = add nsw i32 %output.s0.b.rebased98, %14
  %2513 = mul nsw i32 %2512, %16
  %2514 = sub i32 %2513, %t2326
  br i1 %2132, label %"for resampled_input.s0.y.rebased112.preheader.split.us", label %"consume resampled_input121", !prof !101

"for resampled_input.s0.y.rebased112.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased112.preheader"
  %2515 = sdiv <128 x i32> %2446, %2136
  %2516 = add nsw <128 x i32> %2515, %2447
  %2517 = and <128 x i32> %2516, %2141
  br label %"for resampled_input.s0.y.rebased112.us"

"for resampled_input.s0.y.rebased112.us":         ; preds = %"end for resampled_input.s0.x.rebased116.loopexit.us", %"for resampled_input.s0.y.rebased112.preheader.split.us"
  %resampled_input.s0.y.rebased114.us = phi i32 [ %3045, %"end for resampled_input.s0.x.rebased116.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased112.preheader.split.us" ]
  %2518 = add nsw i32 %2129, %resampled_input.s0.y.rebased114.us
  %2519 = mul nsw i32 %2518, %2130
  %t2367.us = add nsw i32 %2131, %2519
  %2520 = add nsw i32 %resampled_input.s0.y.rebased114.us, %a43
  %2521 = mul nsw i32 %2520, %13
  %t2366.us = add nsw i32 %2514, %2521
  br label %"for resampled_input.s0.x.rebased115.us"

"for resampled_input.s0.x.rebased115.us":         ; preds = %"for resampled_input.s0.y.rebased112.us", %"for resampled_input.s0.x.rebased115.us"
  %resampled_input.s0.x.rebased117.us = phi i32 [ %3044, %"for resampled_input.s0.x.rebased115.us" ], [ 0, %"for resampled_input.s0.y.rebased112.us" ]
  %2522 = add nsw i32 %resampled_input.s0.x.rebased117.us, %a42
  %2523 = mul nsw i32 %2522, %11
  %2524 = add nsw i32 %t2366.us, %2523
  %2525 = insertelement <128 x i32> undef, i32 %2524, i32 0
  %2526 = shufflevector <128 x i32> %2525, <128 x i32> undef, <128 x i32> zeroinitializer
  %2527 = add nsw <128 x i32> %2526, %2517
  %2528 = extractelement <128 x i32> %2527, i32 0
  %2529 = getelementptr inbounds i8, i8* %8, i32 %2528
  %2530 = load i8, i8* %2529, align 1, !tbaa !127
  %2531 = insertelement <128 x i8> undef, i8 %2530, i32 0
  %2532 = extractelement <128 x i32> %2527, i32 1
  %2533 = getelementptr inbounds i8, i8* %8, i32 %2532
  %2534 = load i8, i8* %2533, align 1, !tbaa !127
  %2535 = insertelement <128 x i8> %2531, i8 %2534, i32 1
  %2536 = extractelement <128 x i32> %2527, i32 2
  %2537 = getelementptr inbounds i8, i8* %8, i32 %2536
  %2538 = load i8, i8* %2537, align 1, !tbaa !127
  %2539 = insertelement <128 x i8> %2535, i8 %2538, i32 2
  %2540 = extractelement <128 x i32> %2527, i32 3
  %2541 = getelementptr inbounds i8, i8* %8, i32 %2540
  %2542 = load i8, i8* %2541, align 1, !tbaa !127
  %2543 = insertelement <128 x i8> %2539, i8 %2542, i32 3
  %2544 = extractelement <128 x i32> %2527, i32 4
  %2545 = getelementptr inbounds i8, i8* %8, i32 %2544
  %2546 = load i8, i8* %2545, align 1, !tbaa !127
  %2547 = insertelement <128 x i8> %2543, i8 %2546, i32 4
  %2548 = extractelement <128 x i32> %2527, i32 5
  %2549 = getelementptr inbounds i8, i8* %8, i32 %2548
  %2550 = load i8, i8* %2549, align 1, !tbaa !127
  %2551 = insertelement <128 x i8> %2547, i8 %2550, i32 5
  %2552 = extractelement <128 x i32> %2527, i32 6
  %2553 = getelementptr inbounds i8, i8* %8, i32 %2552
  %2554 = load i8, i8* %2553, align 1, !tbaa !127
  %2555 = insertelement <128 x i8> %2551, i8 %2554, i32 6
  %2556 = extractelement <128 x i32> %2527, i32 7
  %2557 = getelementptr inbounds i8, i8* %8, i32 %2556
  %2558 = load i8, i8* %2557, align 1, !tbaa !127
  %2559 = insertelement <128 x i8> %2555, i8 %2558, i32 7
  %2560 = extractelement <128 x i32> %2527, i32 8
  %2561 = getelementptr inbounds i8, i8* %8, i32 %2560
  %2562 = load i8, i8* %2561, align 1, !tbaa !127
  %2563 = insertelement <128 x i8> %2559, i8 %2562, i32 8
  %2564 = extractelement <128 x i32> %2527, i32 9
  %2565 = getelementptr inbounds i8, i8* %8, i32 %2564
  %2566 = load i8, i8* %2565, align 1, !tbaa !127
  %2567 = insertelement <128 x i8> %2563, i8 %2566, i32 9
  %2568 = extractelement <128 x i32> %2527, i32 10
  %2569 = getelementptr inbounds i8, i8* %8, i32 %2568
  %2570 = load i8, i8* %2569, align 1, !tbaa !127
  %2571 = insertelement <128 x i8> %2567, i8 %2570, i32 10
  %2572 = extractelement <128 x i32> %2527, i32 11
  %2573 = getelementptr inbounds i8, i8* %8, i32 %2572
  %2574 = load i8, i8* %2573, align 1, !tbaa !127
  %2575 = insertelement <128 x i8> %2571, i8 %2574, i32 11
  %2576 = extractelement <128 x i32> %2527, i32 12
  %2577 = getelementptr inbounds i8, i8* %8, i32 %2576
  %2578 = load i8, i8* %2577, align 1, !tbaa !127
  %2579 = insertelement <128 x i8> %2575, i8 %2578, i32 12
  %2580 = extractelement <128 x i32> %2527, i32 13
  %2581 = getelementptr inbounds i8, i8* %8, i32 %2580
  %2582 = load i8, i8* %2581, align 1, !tbaa !127
  %2583 = insertelement <128 x i8> %2579, i8 %2582, i32 13
  %2584 = extractelement <128 x i32> %2527, i32 14
  %2585 = getelementptr inbounds i8, i8* %8, i32 %2584
  %2586 = load i8, i8* %2585, align 1, !tbaa !127
  %2587 = insertelement <128 x i8> %2583, i8 %2586, i32 14
  %2588 = extractelement <128 x i32> %2527, i32 15
  %2589 = getelementptr inbounds i8, i8* %8, i32 %2588
  %2590 = load i8, i8* %2589, align 1, !tbaa !127
  %2591 = insertelement <128 x i8> %2587, i8 %2590, i32 15
  %2592 = extractelement <128 x i32> %2527, i32 16
  %2593 = getelementptr inbounds i8, i8* %8, i32 %2592
  %2594 = load i8, i8* %2593, align 1, !tbaa !127
  %2595 = insertelement <128 x i8> %2591, i8 %2594, i32 16
  %2596 = extractelement <128 x i32> %2527, i32 17
  %2597 = getelementptr inbounds i8, i8* %8, i32 %2596
  %2598 = load i8, i8* %2597, align 1, !tbaa !127
  %2599 = insertelement <128 x i8> %2595, i8 %2598, i32 17
  %2600 = extractelement <128 x i32> %2527, i32 18
  %2601 = getelementptr inbounds i8, i8* %8, i32 %2600
  %2602 = load i8, i8* %2601, align 1, !tbaa !127
  %2603 = insertelement <128 x i8> %2599, i8 %2602, i32 18
  %2604 = extractelement <128 x i32> %2527, i32 19
  %2605 = getelementptr inbounds i8, i8* %8, i32 %2604
  %2606 = load i8, i8* %2605, align 1, !tbaa !127
  %2607 = insertelement <128 x i8> %2603, i8 %2606, i32 19
  %2608 = extractelement <128 x i32> %2527, i32 20
  %2609 = getelementptr inbounds i8, i8* %8, i32 %2608
  %2610 = load i8, i8* %2609, align 1, !tbaa !127
  %2611 = insertelement <128 x i8> %2607, i8 %2610, i32 20
  %2612 = extractelement <128 x i32> %2527, i32 21
  %2613 = getelementptr inbounds i8, i8* %8, i32 %2612
  %2614 = load i8, i8* %2613, align 1, !tbaa !127
  %2615 = insertelement <128 x i8> %2611, i8 %2614, i32 21
  %2616 = extractelement <128 x i32> %2527, i32 22
  %2617 = getelementptr inbounds i8, i8* %8, i32 %2616
  %2618 = load i8, i8* %2617, align 1, !tbaa !127
  %2619 = insertelement <128 x i8> %2615, i8 %2618, i32 22
  %2620 = extractelement <128 x i32> %2527, i32 23
  %2621 = getelementptr inbounds i8, i8* %8, i32 %2620
  %2622 = load i8, i8* %2621, align 1, !tbaa !127
  %2623 = insertelement <128 x i8> %2619, i8 %2622, i32 23
  %2624 = extractelement <128 x i32> %2527, i32 24
  %2625 = getelementptr inbounds i8, i8* %8, i32 %2624
  %2626 = load i8, i8* %2625, align 1, !tbaa !127
  %2627 = insertelement <128 x i8> %2623, i8 %2626, i32 24
  %2628 = extractelement <128 x i32> %2527, i32 25
  %2629 = getelementptr inbounds i8, i8* %8, i32 %2628
  %2630 = load i8, i8* %2629, align 1, !tbaa !127
  %2631 = insertelement <128 x i8> %2627, i8 %2630, i32 25
  %2632 = extractelement <128 x i32> %2527, i32 26
  %2633 = getelementptr inbounds i8, i8* %8, i32 %2632
  %2634 = load i8, i8* %2633, align 1, !tbaa !127
  %2635 = insertelement <128 x i8> %2631, i8 %2634, i32 26
  %2636 = extractelement <128 x i32> %2527, i32 27
  %2637 = getelementptr inbounds i8, i8* %8, i32 %2636
  %2638 = load i8, i8* %2637, align 1, !tbaa !127
  %2639 = insertelement <128 x i8> %2635, i8 %2638, i32 27
  %2640 = extractelement <128 x i32> %2527, i32 28
  %2641 = getelementptr inbounds i8, i8* %8, i32 %2640
  %2642 = load i8, i8* %2641, align 1, !tbaa !127
  %2643 = insertelement <128 x i8> %2639, i8 %2642, i32 28
  %2644 = extractelement <128 x i32> %2527, i32 29
  %2645 = getelementptr inbounds i8, i8* %8, i32 %2644
  %2646 = load i8, i8* %2645, align 1, !tbaa !127
  %2647 = insertelement <128 x i8> %2643, i8 %2646, i32 29
  %2648 = extractelement <128 x i32> %2527, i32 30
  %2649 = getelementptr inbounds i8, i8* %8, i32 %2648
  %2650 = load i8, i8* %2649, align 1, !tbaa !127
  %2651 = insertelement <128 x i8> %2647, i8 %2650, i32 30
  %2652 = extractelement <128 x i32> %2527, i32 31
  %2653 = getelementptr inbounds i8, i8* %8, i32 %2652
  %2654 = load i8, i8* %2653, align 1, !tbaa !127
  %2655 = insertelement <128 x i8> %2651, i8 %2654, i32 31
  %2656 = extractelement <128 x i32> %2527, i32 32
  %2657 = getelementptr inbounds i8, i8* %8, i32 %2656
  %2658 = load i8, i8* %2657, align 1, !tbaa !127
  %2659 = insertelement <128 x i8> %2655, i8 %2658, i32 32
  %2660 = extractelement <128 x i32> %2527, i32 33
  %2661 = getelementptr inbounds i8, i8* %8, i32 %2660
  %2662 = load i8, i8* %2661, align 1, !tbaa !127
  %2663 = insertelement <128 x i8> %2659, i8 %2662, i32 33
  %2664 = extractelement <128 x i32> %2527, i32 34
  %2665 = getelementptr inbounds i8, i8* %8, i32 %2664
  %2666 = load i8, i8* %2665, align 1, !tbaa !127
  %2667 = insertelement <128 x i8> %2663, i8 %2666, i32 34
  %2668 = extractelement <128 x i32> %2527, i32 35
  %2669 = getelementptr inbounds i8, i8* %8, i32 %2668
  %2670 = load i8, i8* %2669, align 1, !tbaa !127
  %2671 = insertelement <128 x i8> %2667, i8 %2670, i32 35
  %2672 = extractelement <128 x i32> %2527, i32 36
  %2673 = getelementptr inbounds i8, i8* %8, i32 %2672
  %2674 = load i8, i8* %2673, align 1, !tbaa !127
  %2675 = insertelement <128 x i8> %2671, i8 %2674, i32 36
  %2676 = extractelement <128 x i32> %2527, i32 37
  %2677 = getelementptr inbounds i8, i8* %8, i32 %2676
  %2678 = load i8, i8* %2677, align 1, !tbaa !127
  %2679 = insertelement <128 x i8> %2675, i8 %2678, i32 37
  %2680 = extractelement <128 x i32> %2527, i32 38
  %2681 = getelementptr inbounds i8, i8* %8, i32 %2680
  %2682 = load i8, i8* %2681, align 1, !tbaa !127
  %2683 = insertelement <128 x i8> %2679, i8 %2682, i32 38
  %2684 = extractelement <128 x i32> %2527, i32 39
  %2685 = getelementptr inbounds i8, i8* %8, i32 %2684
  %2686 = load i8, i8* %2685, align 1, !tbaa !127
  %2687 = insertelement <128 x i8> %2683, i8 %2686, i32 39
  %2688 = extractelement <128 x i32> %2527, i32 40
  %2689 = getelementptr inbounds i8, i8* %8, i32 %2688
  %2690 = load i8, i8* %2689, align 1, !tbaa !127
  %2691 = insertelement <128 x i8> %2687, i8 %2690, i32 40
  %2692 = extractelement <128 x i32> %2527, i32 41
  %2693 = getelementptr inbounds i8, i8* %8, i32 %2692
  %2694 = load i8, i8* %2693, align 1, !tbaa !127
  %2695 = insertelement <128 x i8> %2691, i8 %2694, i32 41
  %2696 = extractelement <128 x i32> %2527, i32 42
  %2697 = getelementptr inbounds i8, i8* %8, i32 %2696
  %2698 = load i8, i8* %2697, align 1, !tbaa !127
  %2699 = insertelement <128 x i8> %2695, i8 %2698, i32 42
  %2700 = extractelement <128 x i32> %2527, i32 43
  %2701 = getelementptr inbounds i8, i8* %8, i32 %2700
  %2702 = load i8, i8* %2701, align 1, !tbaa !127
  %2703 = insertelement <128 x i8> %2699, i8 %2702, i32 43
  %2704 = extractelement <128 x i32> %2527, i32 44
  %2705 = getelementptr inbounds i8, i8* %8, i32 %2704
  %2706 = load i8, i8* %2705, align 1, !tbaa !127
  %2707 = insertelement <128 x i8> %2703, i8 %2706, i32 44
  %2708 = extractelement <128 x i32> %2527, i32 45
  %2709 = getelementptr inbounds i8, i8* %8, i32 %2708
  %2710 = load i8, i8* %2709, align 1, !tbaa !127
  %2711 = insertelement <128 x i8> %2707, i8 %2710, i32 45
  %2712 = extractelement <128 x i32> %2527, i32 46
  %2713 = getelementptr inbounds i8, i8* %8, i32 %2712
  %2714 = load i8, i8* %2713, align 1, !tbaa !127
  %2715 = insertelement <128 x i8> %2711, i8 %2714, i32 46
  %2716 = extractelement <128 x i32> %2527, i32 47
  %2717 = getelementptr inbounds i8, i8* %8, i32 %2716
  %2718 = load i8, i8* %2717, align 1, !tbaa !127
  %2719 = insertelement <128 x i8> %2715, i8 %2718, i32 47
  %2720 = extractelement <128 x i32> %2527, i32 48
  %2721 = getelementptr inbounds i8, i8* %8, i32 %2720
  %2722 = load i8, i8* %2721, align 1, !tbaa !127
  %2723 = insertelement <128 x i8> %2719, i8 %2722, i32 48
  %2724 = extractelement <128 x i32> %2527, i32 49
  %2725 = getelementptr inbounds i8, i8* %8, i32 %2724
  %2726 = load i8, i8* %2725, align 1, !tbaa !127
  %2727 = insertelement <128 x i8> %2723, i8 %2726, i32 49
  %2728 = extractelement <128 x i32> %2527, i32 50
  %2729 = getelementptr inbounds i8, i8* %8, i32 %2728
  %2730 = load i8, i8* %2729, align 1, !tbaa !127
  %2731 = insertelement <128 x i8> %2727, i8 %2730, i32 50
  %2732 = extractelement <128 x i32> %2527, i32 51
  %2733 = getelementptr inbounds i8, i8* %8, i32 %2732
  %2734 = load i8, i8* %2733, align 1, !tbaa !127
  %2735 = insertelement <128 x i8> %2731, i8 %2734, i32 51
  %2736 = extractelement <128 x i32> %2527, i32 52
  %2737 = getelementptr inbounds i8, i8* %8, i32 %2736
  %2738 = load i8, i8* %2737, align 1, !tbaa !127
  %2739 = insertelement <128 x i8> %2735, i8 %2738, i32 52
  %2740 = extractelement <128 x i32> %2527, i32 53
  %2741 = getelementptr inbounds i8, i8* %8, i32 %2740
  %2742 = load i8, i8* %2741, align 1, !tbaa !127
  %2743 = insertelement <128 x i8> %2739, i8 %2742, i32 53
  %2744 = extractelement <128 x i32> %2527, i32 54
  %2745 = getelementptr inbounds i8, i8* %8, i32 %2744
  %2746 = load i8, i8* %2745, align 1, !tbaa !127
  %2747 = insertelement <128 x i8> %2743, i8 %2746, i32 54
  %2748 = extractelement <128 x i32> %2527, i32 55
  %2749 = getelementptr inbounds i8, i8* %8, i32 %2748
  %2750 = load i8, i8* %2749, align 1, !tbaa !127
  %2751 = insertelement <128 x i8> %2747, i8 %2750, i32 55
  %2752 = extractelement <128 x i32> %2527, i32 56
  %2753 = getelementptr inbounds i8, i8* %8, i32 %2752
  %2754 = load i8, i8* %2753, align 1, !tbaa !127
  %2755 = insertelement <128 x i8> %2751, i8 %2754, i32 56
  %2756 = extractelement <128 x i32> %2527, i32 57
  %2757 = getelementptr inbounds i8, i8* %8, i32 %2756
  %2758 = load i8, i8* %2757, align 1, !tbaa !127
  %2759 = insertelement <128 x i8> %2755, i8 %2758, i32 57
  %2760 = extractelement <128 x i32> %2527, i32 58
  %2761 = getelementptr inbounds i8, i8* %8, i32 %2760
  %2762 = load i8, i8* %2761, align 1, !tbaa !127
  %2763 = insertelement <128 x i8> %2759, i8 %2762, i32 58
  %2764 = extractelement <128 x i32> %2527, i32 59
  %2765 = getelementptr inbounds i8, i8* %8, i32 %2764
  %2766 = load i8, i8* %2765, align 1, !tbaa !127
  %2767 = insertelement <128 x i8> %2763, i8 %2766, i32 59
  %2768 = extractelement <128 x i32> %2527, i32 60
  %2769 = getelementptr inbounds i8, i8* %8, i32 %2768
  %2770 = load i8, i8* %2769, align 1, !tbaa !127
  %2771 = insertelement <128 x i8> %2767, i8 %2770, i32 60
  %2772 = extractelement <128 x i32> %2527, i32 61
  %2773 = getelementptr inbounds i8, i8* %8, i32 %2772
  %2774 = load i8, i8* %2773, align 1, !tbaa !127
  %2775 = insertelement <128 x i8> %2771, i8 %2774, i32 61
  %2776 = extractelement <128 x i32> %2527, i32 62
  %2777 = getelementptr inbounds i8, i8* %8, i32 %2776
  %2778 = load i8, i8* %2777, align 1, !tbaa !127
  %2779 = insertelement <128 x i8> %2775, i8 %2778, i32 62
  %2780 = extractelement <128 x i32> %2527, i32 63
  %2781 = getelementptr inbounds i8, i8* %8, i32 %2780
  %2782 = load i8, i8* %2781, align 1, !tbaa !127
  %2783 = insertelement <128 x i8> %2779, i8 %2782, i32 63
  %2784 = extractelement <128 x i32> %2527, i32 64
  %2785 = getelementptr inbounds i8, i8* %8, i32 %2784
  %2786 = load i8, i8* %2785, align 1, !tbaa !127
  %2787 = insertelement <128 x i8> %2783, i8 %2786, i32 64
  %2788 = extractelement <128 x i32> %2527, i32 65
  %2789 = getelementptr inbounds i8, i8* %8, i32 %2788
  %2790 = load i8, i8* %2789, align 1, !tbaa !127
  %2791 = insertelement <128 x i8> %2787, i8 %2790, i32 65
  %2792 = extractelement <128 x i32> %2527, i32 66
  %2793 = getelementptr inbounds i8, i8* %8, i32 %2792
  %2794 = load i8, i8* %2793, align 1, !tbaa !127
  %2795 = insertelement <128 x i8> %2791, i8 %2794, i32 66
  %2796 = extractelement <128 x i32> %2527, i32 67
  %2797 = getelementptr inbounds i8, i8* %8, i32 %2796
  %2798 = load i8, i8* %2797, align 1, !tbaa !127
  %2799 = insertelement <128 x i8> %2795, i8 %2798, i32 67
  %2800 = extractelement <128 x i32> %2527, i32 68
  %2801 = getelementptr inbounds i8, i8* %8, i32 %2800
  %2802 = load i8, i8* %2801, align 1, !tbaa !127
  %2803 = insertelement <128 x i8> %2799, i8 %2802, i32 68
  %2804 = extractelement <128 x i32> %2527, i32 69
  %2805 = getelementptr inbounds i8, i8* %8, i32 %2804
  %2806 = load i8, i8* %2805, align 1, !tbaa !127
  %2807 = insertelement <128 x i8> %2803, i8 %2806, i32 69
  %2808 = extractelement <128 x i32> %2527, i32 70
  %2809 = getelementptr inbounds i8, i8* %8, i32 %2808
  %2810 = load i8, i8* %2809, align 1, !tbaa !127
  %2811 = insertelement <128 x i8> %2807, i8 %2810, i32 70
  %2812 = extractelement <128 x i32> %2527, i32 71
  %2813 = getelementptr inbounds i8, i8* %8, i32 %2812
  %2814 = load i8, i8* %2813, align 1, !tbaa !127
  %2815 = insertelement <128 x i8> %2811, i8 %2814, i32 71
  %2816 = extractelement <128 x i32> %2527, i32 72
  %2817 = getelementptr inbounds i8, i8* %8, i32 %2816
  %2818 = load i8, i8* %2817, align 1, !tbaa !127
  %2819 = insertelement <128 x i8> %2815, i8 %2818, i32 72
  %2820 = extractelement <128 x i32> %2527, i32 73
  %2821 = getelementptr inbounds i8, i8* %8, i32 %2820
  %2822 = load i8, i8* %2821, align 1, !tbaa !127
  %2823 = insertelement <128 x i8> %2819, i8 %2822, i32 73
  %2824 = extractelement <128 x i32> %2527, i32 74
  %2825 = getelementptr inbounds i8, i8* %8, i32 %2824
  %2826 = load i8, i8* %2825, align 1, !tbaa !127
  %2827 = insertelement <128 x i8> %2823, i8 %2826, i32 74
  %2828 = extractelement <128 x i32> %2527, i32 75
  %2829 = getelementptr inbounds i8, i8* %8, i32 %2828
  %2830 = load i8, i8* %2829, align 1, !tbaa !127
  %2831 = insertelement <128 x i8> %2827, i8 %2830, i32 75
  %2832 = extractelement <128 x i32> %2527, i32 76
  %2833 = getelementptr inbounds i8, i8* %8, i32 %2832
  %2834 = load i8, i8* %2833, align 1, !tbaa !127
  %2835 = insertelement <128 x i8> %2831, i8 %2834, i32 76
  %2836 = extractelement <128 x i32> %2527, i32 77
  %2837 = getelementptr inbounds i8, i8* %8, i32 %2836
  %2838 = load i8, i8* %2837, align 1, !tbaa !127
  %2839 = insertelement <128 x i8> %2835, i8 %2838, i32 77
  %2840 = extractelement <128 x i32> %2527, i32 78
  %2841 = getelementptr inbounds i8, i8* %8, i32 %2840
  %2842 = load i8, i8* %2841, align 1, !tbaa !127
  %2843 = insertelement <128 x i8> %2839, i8 %2842, i32 78
  %2844 = extractelement <128 x i32> %2527, i32 79
  %2845 = getelementptr inbounds i8, i8* %8, i32 %2844
  %2846 = load i8, i8* %2845, align 1, !tbaa !127
  %2847 = insertelement <128 x i8> %2843, i8 %2846, i32 79
  %2848 = extractelement <128 x i32> %2527, i32 80
  %2849 = getelementptr inbounds i8, i8* %8, i32 %2848
  %2850 = load i8, i8* %2849, align 1, !tbaa !127
  %2851 = insertelement <128 x i8> %2847, i8 %2850, i32 80
  %2852 = extractelement <128 x i32> %2527, i32 81
  %2853 = getelementptr inbounds i8, i8* %8, i32 %2852
  %2854 = load i8, i8* %2853, align 1, !tbaa !127
  %2855 = insertelement <128 x i8> %2851, i8 %2854, i32 81
  %2856 = extractelement <128 x i32> %2527, i32 82
  %2857 = getelementptr inbounds i8, i8* %8, i32 %2856
  %2858 = load i8, i8* %2857, align 1, !tbaa !127
  %2859 = insertelement <128 x i8> %2855, i8 %2858, i32 82
  %2860 = extractelement <128 x i32> %2527, i32 83
  %2861 = getelementptr inbounds i8, i8* %8, i32 %2860
  %2862 = load i8, i8* %2861, align 1, !tbaa !127
  %2863 = insertelement <128 x i8> %2859, i8 %2862, i32 83
  %2864 = extractelement <128 x i32> %2527, i32 84
  %2865 = getelementptr inbounds i8, i8* %8, i32 %2864
  %2866 = load i8, i8* %2865, align 1, !tbaa !127
  %2867 = insertelement <128 x i8> %2863, i8 %2866, i32 84
  %2868 = extractelement <128 x i32> %2527, i32 85
  %2869 = getelementptr inbounds i8, i8* %8, i32 %2868
  %2870 = load i8, i8* %2869, align 1, !tbaa !127
  %2871 = insertelement <128 x i8> %2867, i8 %2870, i32 85
  %2872 = extractelement <128 x i32> %2527, i32 86
  %2873 = getelementptr inbounds i8, i8* %8, i32 %2872
  %2874 = load i8, i8* %2873, align 1, !tbaa !127
  %2875 = insertelement <128 x i8> %2871, i8 %2874, i32 86
  %2876 = extractelement <128 x i32> %2527, i32 87
  %2877 = getelementptr inbounds i8, i8* %8, i32 %2876
  %2878 = load i8, i8* %2877, align 1, !tbaa !127
  %2879 = insertelement <128 x i8> %2875, i8 %2878, i32 87
  %2880 = extractelement <128 x i32> %2527, i32 88
  %2881 = getelementptr inbounds i8, i8* %8, i32 %2880
  %2882 = load i8, i8* %2881, align 1, !tbaa !127
  %2883 = insertelement <128 x i8> %2879, i8 %2882, i32 88
  %2884 = extractelement <128 x i32> %2527, i32 89
  %2885 = getelementptr inbounds i8, i8* %8, i32 %2884
  %2886 = load i8, i8* %2885, align 1, !tbaa !127
  %2887 = insertelement <128 x i8> %2883, i8 %2886, i32 89
  %2888 = extractelement <128 x i32> %2527, i32 90
  %2889 = getelementptr inbounds i8, i8* %8, i32 %2888
  %2890 = load i8, i8* %2889, align 1, !tbaa !127
  %2891 = insertelement <128 x i8> %2887, i8 %2890, i32 90
  %2892 = extractelement <128 x i32> %2527, i32 91
  %2893 = getelementptr inbounds i8, i8* %8, i32 %2892
  %2894 = load i8, i8* %2893, align 1, !tbaa !127
  %2895 = insertelement <128 x i8> %2891, i8 %2894, i32 91
  %2896 = extractelement <128 x i32> %2527, i32 92
  %2897 = getelementptr inbounds i8, i8* %8, i32 %2896
  %2898 = load i8, i8* %2897, align 1, !tbaa !127
  %2899 = insertelement <128 x i8> %2895, i8 %2898, i32 92
  %2900 = extractelement <128 x i32> %2527, i32 93
  %2901 = getelementptr inbounds i8, i8* %8, i32 %2900
  %2902 = load i8, i8* %2901, align 1, !tbaa !127
  %2903 = insertelement <128 x i8> %2899, i8 %2902, i32 93
  %2904 = extractelement <128 x i32> %2527, i32 94
  %2905 = getelementptr inbounds i8, i8* %8, i32 %2904
  %2906 = load i8, i8* %2905, align 1, !tbaa !127
  %2907 = insertelement <128 x i8> %2903, i8 %2906, i32 94
  %2908 = extractelement <128 x i32> %2527, i32 95
  %2909 = getelementptr inbounds i8, i8* %8, i32 %2908
  %2910 = load i8, i8* %2909, align 1, !tbaa !127
  %2911 = insertelement <128 x i8> %2907, i8 %2910, i32 95
  %2912 = extractelement <128 x i32> %2527, i32 96
  %2913 = getelementptr inbounds i8, i8* %8, i32 %2912
  %2914 = load i8, i8* %2913, align 1, !tbaa !127
  %2915 = insertelement <128 x i8> %2911, i8 %2914, i32 96
  %2916 = extractelement <128 x i32> %2527, i32 97
  %2917 = getelementptr inbounds i8, i8* %8, i32 %2916
  %2918 = load i8, i8* %2917, align 1, !tbaa !127
  %2919 = insertelement <128 x i8> %2915, i8 %2918, i32 97
  %2920 = extractelement <128 x i32> %2527, i32 98
  %2921 = getelementptr inbounds i8, i8* %8, i32 %2920
  %2922 = load i8, i8* %2921, align 1, !tbaa !127
  %2923 = insertelement <128 x i8> %2919, i8 %2922, i32 98
  %2924 = extractelement <128 x i32> %2527, i32 99
  %2925 = getelementptr inbounds i8, i8* %8, i32 %2924
  %2926 = load i8, i8* %2925, align 1, !tbaa !127
  %2927 = insertelement <128 x i8> %2923, i8 %2926, i32 99
  %2928 = extractelement <128 x i32> %2527, i32 100
  %2929 = getelementptr inbounds i8, i8* %8, i32 %2928
  %2930 = load i8, i8* %2929, align 1, !tbaa !127
  %2931 = insertelement <128 x i8> %2927, i8 %2930, i32 100
  %2932 = extractelement <128 x i32> %2527, i32 101
  %2933 = getelementptr inbounds i8, i8* %8, i32 %2932
  %2934 = load i8, i8* %2933, align 1, !tbaa !127
  %2935 = insertelement <128 x i8> %2931, i8 %2934, i32 101
  %2936 = extractelement <128 x i32> %2527, i32 102
  %2937 = getelementptr inbounds i8, i8* %8, i32 %2936
  %2938 = load i8, i8* %2937, align 1, !tbaa !127
  %2939 = insertelement <128 x i8> %2935, i8 %2938, i32 102
  %2940 = extractelement <128 x i32> %2527, i32 103
  %2941 = getelementptr inbounds i8, i8* %8, i32 %2940
  %2942 = load i8, i8* %2941, align 1, !tbaa !127
  %2943 = insertelement <128 x i8> %2939, i8 %2942, i32 103
  %2944 = extractelement <128 x i32> %2527, i32 104
  %2945 = getelementptr inbounds i8, i8* %8, i32 %2944
  %2946 = load i8, i8* %2945, align 1, !tbaa !127
  %2947 = insertelement <128 x i8> %2943, i8 %2946, i32 104
  %2948 = extractelement <128 x i32> %2527, i32 105
  %2949 = getelementptr inbounds i8, i8* %8, i32 %2948
  %2950 = load i8, i8* %2949, align 1, !tbaa !127
  %2951 = insertelement <128 x i8> %2947, i8 %2950, i32 105
  %2952 = extractelement <128 x i32> %2527, i32 106
  %2953 = getelementptr inbounds i8, i8* %8, i32 %2952
  %2954 = load i8, i8* %2953, align 1, !tbaa !127
  %2955 = insertelement <128 x i8> %2951, i8 %2954, i32 106
  %2956 = extractelement <128 x i32> %2527, i32 107
  %2957 = getelementptr inbounds i8, i8* %8, i32 %2956
  %2958 = load i8, i8* %2957, align 1, !tbaa !127
  %2959 = insertelement <128 x i8> %2955, i8 %2958, i32 107
  %2960 = extractelement <128 x i32> %2527, i32 108
  %2961 = getelementptr inbounds i8, i8* %8, i32 %2960
  %2962 = load i8, i8* %2961, align 1, !tbaa !127
  %2963 = insertelement <128 x i8> %2959, i8 %2962, i32 108
  %2964 = extractelement <128 x i32> %2527, i32 109
  %2965 = getelementptr inbounds i8, i8* %8, i32 %2964
  %2966 = load i8, i8* %2965, align 1, !tbaa !127
  %2967 = insertelement <128 x i8> %2963, i8 %2966, i32 109
  %2968 = extractelement <128 x i32> %2527, i32 110
  %2969 = getelementptr inbounds i8, i8* %8, i32 %2968
  %2970 = load i8, i8* %2969, align 1, !tbaa !127
  %2971 = insertelement <128 x i8> %2967, i8 %2970, i32 110
  %2972 = extractelement <128 x i32> %2527, i32 111
  %2973 = getelementptr inbounds i8, i8* %8, i32 %2972
  %2974 = load i8, i8* %2973, align 1, !tbaa !127
  %2975 = insertelement <128 x i8> %2971, i8 %2974, i32 111
  %2976 = extractelement <128 x i32> %2527, i32 112
  %2977 = getelementptr inbounds i8, i8* %8, i32 %2976
  %2978 = load i8, i8* %2977, align 1, !tbaa !127
  %2979 = insertelement <128 x i8> %2975, i8 %2978, i32 112
  %2980 = extractelement <128 x i32> %2527, i32 113
  %2981 = getelementptr inbounds i8, i8* %8, i32 %2980
  %2982 = load i8, i8* %2981, align 1, !tbaa !127
  %2983 = insertelement <128 x i8> %2979, i8 %2982, i32 113
  %2984 = extractelement <128 x i32> %2527, i32 114
  %2985 = getelementptr inbounds i8, i8* %8, i32 %2984
  %2986 = load i8, i8* %2985, align 1, !tbaa !127
  %2987 = insertelement <128 x i8> %2983, i8 %2986, i32 114
  %2988 = extractelement <128 x i32> %2527, i32 115
  %2989 = getelementptr inbounds i8, i8* %8, i32 %2988
  %2990 = load i8, i8* %2989, align 1, !tbaa !127
  %2991 = insertelement <128 x i8> %2987, i8 %2990, i32 115
  %2992 = extractelement <128 x i32> %2527, i32 116
  %2993 = getelementptr inbounds i8, i8* %8, i32 %2992
  %2994 = load i8, i8* %2993, align 1, !tbaa !127
  %2995 = insertelement <128 x i8> %2991, i8 %2994, i32 116
  %2996 = extractelement <128 x i32> %2527, i32 117
  %2997 = getelementptr inbounds i8, i8* %8, i32 %2996
  %2998 = load i8, i8* %2997, align 1, !tbaa !127
  %2999 = insertelement <128 x i8> %2995, i8 %2998, i32 117
  %3000 = extractelement <128 x i32> %2527, i32 118
  %3001 = getelementptr inbounds i8, i8* %8, i32 %3000
  %3002 = load i8, i8* %3001, align 1, !tbaa !127
  %3003 = insertelement <128 x i8> %2999, i8 %3002, i32 118
  %3004 = extractelement <128 x i32> %2527, i32 119
  %3005 = getelementptr inbounds i8, i8* %8, i32 %3004
  %3006 = load i8, i8* %3005, align 1, !tbaa !127
  %3007 = insertelement <128 x i8> %3003, i8 %3006, i32 119
  %3008 = extractelement <128 x i32> %2527, i32 120
  %3009 = getelementptr inbounds i8, i8* %8, i32 %3008
  %3010 = load i8, i8* %3009, align 1, !tbaa !127
  %3011 = insertelement <128 x i8> %3007, i8 %3010, i32 120
  %3012 = extractelement <128 x i32> %2527, i32 121
  %3013 = getelementptr inbounds i8, i8* %8, i32 %3012
  %3014 = load i8, i8* %3013, align 1, !tbaa !127
  %3015 = insertelement <128 x i8> %3011, i8 %3014, i32 121
  %3016 = extractelement <128 x i32> %2527, i32 122
  %3017 = getelementptr inbounds i8, i8* %8, i32 %3016
  %3018 = load i8, i8* %3017, align 1, !tbaa !127
  %3019 = insertelement <128 x i8> %3015, i8 %3018, i32 122
  %3020 = extractelement <128 x i32> %2527, i32 123
  %3021 = getelementptr inbounds i8, i8* %8, i32 %3020
  %3022 = load i8, i8* %3021, align 1, !tbaa !127
  %3023 = insertelement <128 x i8> %3019, i8 %3022, i32 123
  %3024 = extractelement <128 x i32> %2527, i32 124
  %3025 = getelementptr inbounds i8, i8* %8, i32 %3024
  %3026 = load i8, i8* %3025, align 1, !tbaa !127
  %3027 = insertelement <128 x i8> %3023, i8 %3026, i32 124
  %3028 = extractelement <128 x i32> %2527, i32 125
  %3029 = getelementptr inbounds i8, i8* %8, i32 %3028
  %3030 = load i8, i8* %3029, align 1, !tbaa !127
  %3031 = insertelement <128 x i8> %3027, i8 %3030, i32 125
  %3032 = extractelement <128 x i32> %2527, i32 126
  %3033 = getelementptr inbounds i8, i8* %8, i32 %3032
  %3034 = load i8, i8* %3033, align 1, !tbaa !127
  %3035 = insertelement <128 x i8> %3031, i8 %3034, i32 126
  %3036 = extractelement <128 x i32> %2527, i32 127
  %3037 = getelementptr inbounds i8, i8* %8, i32 %3036
  %3038 = load i8, i8* %3037, align 1, !tbaa !127
  %3039 = insertelement <128 x i8> %3035, i8 %3038, i32 127
  %3040 = add nsw i32 %t2367.us, %resampled_input.s0.x.rebased117.us
  %3041 = shl nsw i32 %3040, 7
  %3042 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3041
  %3043 = bitcast i8* %3042 to <128 x i8>*
  store <128 x i8> %3039, <128 x i8>* %3043, align 128, !tbaa !129
  %3044 = add nuw nsw i32 %resampled_input.s0.x.rebased117.us, 1
  %.not729.us = icmp eq i32 %resampled_input.s0.x.rebased117.us, %t2351
  br i1 %.not729.us, label %"end for resampled_input.s0.x.rebased116.loopexit.us", label %"for resampled_input.s0.x.rebased115.us"

"end for resampled_input.s0.x.rebased116.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased115.us"
  %3045 = add nuw nsw i32 %resampled_input.s0.y.rebased114.us, 1
  %.not728.us = icmp eq i32 %resampled_input.s0.y.rebased114.us, %t2350
  br i1 %.not728.us, label %"consume resampled_input121", label %"for resampled_input.s0.y.rebased112.us"

"consume resampled_input121":                     ; preds = %"end for resampled_input.s0.x.rebased116.loopexit.us", %"end for resampled_input.s0.x.rebased110.loopexit.us", %then_bb104, %"for resampled_input.s0.y.rebased112.preheader", %next_bb105
  br i1 %2142, label %"for output.s0.y.yo122.preheader", label %"end for output.s0.y.yo123", !prof !101

"for output.s0.y.yo122.preheader":                ; preds = %"consume resampled_input121"
  %3046 = add nsw i32 %output.s0.b.rebased98, %14
  %3047 = mul nsw i32 %3046, %25
  %t2374 = add i32 %2484, %3047
  br label %"for output.s0.y.yo122"

"for output.s0.y.yo122":                          ; preds = %"for output.s0.y.yo122.preheader", %"end for output.s0.x.xo126"
  %output.s0.y.yo124 = phi i32 [ %3303, %"end for output.s0.x.xo126" ], [ 0, %"for output.s0.y.yo122.preheader" ]
  %3048 = add nsw i32 %output.s0.y.yo124, %22
  %3049 = mul nsw i32 %3048, %stride_y
  %3050 = add nsw i32 %2143, %3049
  %t2390 = mul nsw i32 %3050, %2130
  %3051 = add nsw i32 %2144, %3049
  %t2392 = mul nsw i32 %3051, %2130
  %3052 = sub nsw i32 %3049, %t2346
  %t2394 = mul nsw i32 %3052, %2130
  br i1 %2145, label %"for output.s0.x.xo125.preheader", label %"end for output.s0.x.xo126", !prof !101

"for output.s0.x.xo125.preheader":                ; preds = %"for output.s0.y.yo122"
  %3053 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %3054 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %3055 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2156) #11
  %3056 = mul nsw i32 %3048, %24
  %3057 = add i32 %t2374, %3056
  br i1 %t2340, label %"for output.s0.x.xo125.preheader.split.us", label %"for output.s0.x.xo125"

"for output.s0.x.xo125.preheader.split.us":       ; preds = %"for output.s0.x.xo125.preheader"
  %3058 = load <32 x i32>, <32 x i32>* %2451, align 128, !tbaa !105
  %3059 = load <32 x i32>, <32 x i32>* %2453, align 128, !tbaa !105
  %3060 = load <32 x i32>, <32 x i32>* %2454, align 128, !tbaa !105
  %3061 = load <32 x i32>, <32 x i32>* %2457, align 128, !tbaa !105
  %3062 = load <32 x i32>, <32 x i32>* %2459, align 128, !tbaa !105
  %3063 = load <32 x i32>, <32 x i32>* %2460, align 128, !tbaa !105
  %3064 = load <32 x i32>, <32 x i32>* %2462, align 128, !tbaa !180
  %3065 = load <32 x i32>, <32 x i32>* %2464, align 128, !tbaa !186
  %3066 = load <32 x i32>, <32 x i32>* %2465, align 128, !tbaa !190
  %3067 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2440, <32 x i32> %2439)
  %3068 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3060) #11
  %3069 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3063) #11
  %3070 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3066) #11
  %3071 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3064) #11
  %3072 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3065) #11
  %3073 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3061) #11
  %3074 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3062) #11
  %3075 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3058) #11
  %3076 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3059) #11
  %3077 = load <32 x i32>, <32 x i32>* %2467, align 128, !tbaa !105
  %3078 = load <32 x i32>, <32 x i32>* %2469, align 128, !tbaa !105
  %3079 = load <32 x i32>, <32 x i32>* %2471, align 128, !tbaa !105
  %3080 = load <32 x i32>, <32 x i32>* %2473, align 128, !tbaa !105
  %3081 = load <32 x i32>, <32 x i32>* %2475, align 128, !tbaa !105
  %3082 = load <32 x i32>, <32 x i32>* %2477, align 128, !tbaa !105
  %3083 = load <32 x i32>, <32 x i32>* %2479, align 128, !tbaa !193
  %3084 = load <32 x i32>, <32 x i32>* %2481, align 128, !tbaa !195
  %3085 = load <32 x i32>, <32 x i32>* %2483, align 128, !tbaa !197
  %3086 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2442, <32 x i32> %2441)
  %3087 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3079) #11
  %3088 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3082) #11
  %3089 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3085) #11
  %3090 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3083) #11
  %3091 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3084) #11
  %3092 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3080) #11
  %3093 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3081) #11
  %3094 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3077) #11
  %3095 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3078) #11
  br label %"for output.s0.x.xo125.us"

"for output.s0.x.xo125.us":                       ; preds = %"for output.s0.x.xo125.us", %"for output.s0.x.xo125.preheader.split.us"
  %output.s0.x.xo127.us = phi i32 [ %3300, %"for output.s0.x.xo125.us" ], [ 0, %"for output.s0.x.xo125.preheader.split.us" ]
  %3096 = add nsw i32 %output.s0.x.xo127.us, %19
  %3097 = mul nsw i32 %3096, %stride_x
  %3098 = add i32 %3097, %2153
  %3099 = add i32 %3098, %t2390
  %3100 = shl nsw i32 %3099, 7
  %3101 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3100
  %3102 = bitcast i8* %3101 to <64 x i8>*
  %3103 = load <64 x i8>, <64 x i8>* %3102, align 128, !tbaa !129
  %3104 = zext <64 x i8> %3103 to <64 x i16>
  %3105 = add i32 %3097, %2154
  %3106 = add i32 %3105, %t2390
  %3107 = shl nsw i32 %3106, 7
  %3108 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3107
  %3109 = bitcast i8* %3108 to <64 x i8>*
  %3110 = load <64 x i8>, <64 x i8>* %3109, align 128, !tbaa !129
  %3111 = zext <64 x i8> %3110 to <64 x i16>
  %3112 = add i32 %3097, %t2390
  %3113 = sub i32 %3112, %t2348
  %3114 = shl nsw i32 %3113, 7
  %3115 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3114
  %3116 = bitcast i8* %3115 to <64 x i8>*
  %3117 = load <64 x i8>, <64 x i8>* %3116, align 128, !tbaa !129
  %3118 = zext <64 x i8> %3117 to <64 x i16>
  %3119 = add i32 %3098, %t2392
  %3120 = shl nsw i32 %3119, 7
  %3121 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3120
  %3122 = bitcast i8* %3121 to <64 x i8>*
  %3123 = load <64 x i8>, <64 x i8>* %3122, align 128, !tbaa !129
  %3124 = zext <64 x i8> %3123 to <64 x i16>
  %3125 = add i32 %3105, %t2392
  %3126 = shl nsw i32 %3125, 7
  %3127 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3126
  %3128 = bitcast i8* %3127 to <64 x i8>*
  %3129 = load <64 x i8>, <64 x i8>* %3128, align 128, !tbaa !129
  %3130 = zext <64 x i8> %3129 to <64 x i16>
  %3131 = add i32 %3097, %t2392
  %3132 = sub i32 %3131, %t2348
  %3133 = shl nsw i32 %3132, 7
  %3134 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3133
  %3135 = bitcast i8* %3134 to <64 x i8>*
  %3136 = load <64 x i8>, <64 x i8>* %3135, align 128, !tbaa !129
  %3137 = zext <64 x i8> %3136 to <64 x i16>
  %3138 = add i32 %3098, %t2394
  %3139 = shl nsw i32 %3138, 7
  %3140 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3139
  %3141 = bitcast i8* %3140 to <64 x i8>*
  %3142 = load <64 x i8>, <64 x i8>* %3141, align 128, !tbaa !129
  %3143 = zext <64 x i8> %3142 to <64 x i16>
  %3144 = add i32 %3105, %t2394
  %3145 = shl nsw i32 %3144, 7
  %3146 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3145
  %3147 = bitcast i8* %3146 to <64 x i8>*
  %3148 = load <64 x i8>, <64 x i8>* %3147, align 128, !tbaa !129
  %3149 = zext <64 x i8> %3148 to <64 x i16>
  %3150 = add i32 %3097, %t2394
  %3151 = sub i32 %3150, %t2348
  %3152 = shl nsw i32 %3151, 7
  %3153 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3152
  %3154 = bitcast i8* %3153 to <64 x i8>*
  %3155 = load <64 x i8>, <64 x i8>* %3154, align 128, !tbaa !129
  %3156 = zext <64 x i8> %3155 to <64 x i16>
  %3157 = bitcast <64 x i16> %3118 to <32 x i32>
  %3158 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3157) #11
  %3159 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3068, <32 x i32> %3158) #11
  %3160 = bitcast <64 x i16> %3137 to <32 x i32>
  %3161 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3160) #11
  %3162 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3069, <32 x i32> %3161) #11
  %3163 = bitcast <64 x i16> %3156 to <32 x i32>
  %3164 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3163) #11
  %3165 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3070, <32 x i32> %3164) #11
  %3166 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3165, <64 x i32> %3067) #11
  %3167 = bitcast <64 x i16> %3143 to <32 x i32>
  %3168 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3167) #11
  %3169 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3166, <32 x i32> %3071, <32 x i32> %3168) #11
  %3170 = bitcast <64 x i16> %3149 to <32 x i32>
  %3171 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3170) #11
  %3172 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3072, <32 x i32> %3171) #11
  %3173 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3169, <64 x i32> %3172) #11
  %3174 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3162, <64 x i32> %3173) #11
  %3175 = bitcast <64 x i16> %3124 to <32 x i32>
  %3176 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3175) #11
  %3177 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3174, <32 x i32> %3073, <32 x i32> %3176) #11
  %3178 = bitcast <64 x i16> %3130 to <32 x i32>
  %3179 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3178) #11
  %3180 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3074, <32 x i32> %3179) #11
  %3181 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3177, <64 x i32> %3180) #11
  %3182 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3159, <64 x i32> %3181) #11
  %3183 = bitcast <64 x i16> %3104 to <32 x i32>
  %3184 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3183) #11
  %3185 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3182, <32 x i32> %3075, <32 x i32> %3184) #11
  %3186 = bitcast <64 x i16> %3111 to <32 x i32>
  %3187 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3186) #11
  %3188 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3076, <32 x i32> %3187) #11
  %3189 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3185, <64 x i32> %3188) #11
  %3190 = getelementptr inbounds i8, i8* %3101, i32 64
  %3191 = bitcast i8* %3190 to <64 x i8>*
  %3192 = load <64 x i8>, <64 x i8>* %3191, align 64, !tbaa !129
  %3193 = zext <64 x i8> %3192 to <64 x i16>
  %3194 = getelementptr inbounds i8, i8* %3108, i32 64
  %3195 = bitcast i8* %3194 to <64 x i8>*
  %3196 = load <64 x i8>, <64 x i8>* %3195, align 64, !tbaa !129
  %3197 = zext <64 x i8> %3196 to <64 x i16>
  %3198 = getelementptr inbounds i8, i8* %3115, i32 64
  %3199 = bitcast i8* %3198 to <64 x i8>*
  %3200 = load <64 x i8>, <64 x i8>* %3199, align 64, !tbaa !129
  %3201 = zext <64 x i8> %3200 to <64 x i16>
  %3202 = getelementptr inbounds i8, i8* %3121, i32 64
  %3203 = bitcast i8* %3202 to <64 x i8>*
  %3204 = load <64 x i8>, <64 x i8>* %3203, align 64, !tbaa !129
  %3205 = zext <64 x i8> %3204 to <64 x i16>
  %3206 = getelementptr inbounds i8, i8* %3127, i32 64
  %3207 = bitcast i8* %3206 to <64 x i8>*
  %3208 = load <64 x i8>, <64 x i8>* %3207, align 64, !tbaa !129
  %3209 = zext <64 x i8> %3208 to <64 x i16>
  %3210 = getelementptr inbounds i8, i8* %3134, i32 64
  %3211 = bitcast i8* %3210 to <64 x i8>*
  %3212 = load <64 x i8>, <64 x i8>* %3211, align 64, !tbaa !129
  %3213 = zext <64 x i8> %3212 to <64 x i16>
  %3214 = getelementptr inbounds i8, i8* %3140, i32 64
  %3215 = bitcast i8* %3214 to <64 x i8>*
  %3216 = load <64 x i8>, <64 x i8>* %3215, align 64, !tbaa !129
  %3217 = zext <64 x i8> %3216 to <64 x i16>
  %3218 = getelementptr inbounds i8, i8* %3146, i32 64
  %3219 = bitcast i8* %3218 to <64 x i8>*
  %3220 = load <64 x i8>, <64 x i8>* %3219, align 64, !tbaa !129
  %3221 = zext <64 x i8> %3220 to <64 x i16>
  %3222 = getelementptr inbounds i8, i8* %3153, i32 64
  %3223 = bitcast i8* %3222 to <64 x i8>*
  %3224 = load <64 x i8>, <64 x i8>* %3223, align 64, !tbaa !129
  %3225 = zext <64 x i8> %3224 to <64 x i16>
  %3226 = bitcast <64 x i16> %3201 to <32 x i32>
  %3227 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3226) #11
  %3228 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3087, <32 x i32> %3227) #11
  %3229 = bitcast <64 x i16> %3213 to <32 x i32>
  %3230 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3229) #11
  %3231 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3088, <32 x i32> %3230) #11
  %3232 = bitcast <64 x i16> %3225 to <32 x i32>
  %3233 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3232) #11
  %3234 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3089, <32 x i32> %3233) #11
  %3235 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3234, <64 x i32> %3086) #11
  %3236 = bitcast <64 x i16> %3217 to <32 x i32>
  %3237 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3236) #11
  %3238 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3235, <32 x i32> %3090, <32 x i32> %3237) #11
  %3239 = bitcast <64 x i16> %3221 to <32 x i32>
  %3240 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3239) #11
  %3241 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3091, <32 x i32> %3240) #11
  %3242 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3238, <64 x i32> %3241) #11
  %3243 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3231, <64 x i32> %3242) #11
  %3244 = bitcast <64 x i16> %3205 to <32 x i32>
  %3245 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3244) #11
  %3246 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3243, <32 x i32> %3092, <32 x i32> %3245) #11
  %3247 = bitcast <64 x i16> %3209 to <32 x i32>
  %3248 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3247) #11
  %3249 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3093, <32 x i32> %3248) #11
  %3250 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3246, <64 x i32> %3249) #11
  %3251 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3228, <64 x i32> %3250) #11
  %3252 = bitcast <64 x i16> %3193 to <32 x i32>
  %3253 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3252) #11
  %3254 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3251, <32 x i32> %3094, <32 x i32> %3253) #11
  %3255 = bitcast <64 x i16> %3197 to <32 x i32>
  %3256 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3255) #11
  %3257 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3095, <32 x i32> %3256) #11
  %3258 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %3254, <64 x i32> %3257) #11
  %3259 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3189)
  %3260 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3189)
  %3261 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3258)
  %3262 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3258)
  %3263 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %3260, <32 x i32> %3054) #11
  %3264 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3263, <32 x i32> %3260, <32 x i32> %3054) #11
  %3265 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3264, <32 x i32> %3053) #11
  %3266 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3264, <32 x i32> %3055) #11
  %3267 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3266, <32 x i32> %2155) #11
  %3268 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3265, <32 x i32> %3267) #11
  %3269 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %3259, <32 x i32> %3054) #11
  %3270 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3269, <32 x i32> %3259, <32 x i32> %3054) #11
  %3271 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3270, <32 x i32> %3053) #11
  %3272 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3270, <32 x i32> %3055) #11
  %3273 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3272, <32 x i32> %2155) #11
  %3274 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3271, <32 x i32> %3273) #11
  %3275 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %3268, <32 x i32> %3274) #11
  %3276 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %3262, <32 x i32> %3054) #11
  %3277 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3276, <32 x i32> %3262, <32 x i32> %3054) #11
  %3278 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3277, <32 x i32> %3053) #11
  %3279 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3277, <32 x i32> %3055) #11
  %3280 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3279, <32 x i32> %2155) #11
  %3281 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3278, <32 x i32> %3280) #11
  %3282 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %3261, <32 x i32> %3054) #11
  %3283 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3282, <32 x i32> %3261, <32 x i32> %3054) #11
  %3284 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3283, <32 x i32> %3053) #11
  %3285 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3283, <32 x i32> %3055) #11
  %3286 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3285, <32 x i32> %2155) #11
  %3287 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3284, <32 x i32> %3286) #11
  %3288 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %3281, <32 x i32> %3287) #11
  %3289 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3275, <32 x i32> %3288) #11
  %3290 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %3289, <64 x i32> %2164) #11
  %3291 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3290) #11
  %3292 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3290) #11
  %3293 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %3291, <32 x i32> %3292) #11
  %3294 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2165, <32 x i32> %3293) #11
  %3295 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3294, <32 x i32> %2166) #11
  %3296 = mul nsw i32 %3096, %21
  %3297 = add i32 %3057, %3296
  %3298 = getelementptr inbounds i8, i8* %17, i32 %3297
  %3299 = bitcast i8* %3298 to <32 x i32>*
  store <32 x i32> %3295, <32 x i32>* %3299, align 1, !tbaa !199
  %3300 = add nuw nsw i32 %output.s0.x.xo127.us, 1
  %.not725.us = icmp eq i32 %3300, %20
  br i1 %.not725.us, label %"end for output.s0.x.xo126.loopexit", label %"for output.s0.x.xo125.us"

"end for output.s0.y.yo123":                      ; preds = %"end for output.s0.x.xo126", %"consume resampled_input121"
  %3301 = add nuw nsw i32 %output.s0.b.rebased98, 1
  %.not722 = icmp eq i32 %3301, %15
  br i1 %.not722, label %"end for output.s0.b.rebased97", label %"for output.s0.b.rebased96"

"for output.s0.x.xo125":                          ; preds = %"for output.s0.x.xo125.preheader", %"consume convolved138"
  %output.s0.x.xo127 = phi i32 [ %3526, %"consume convolved138" ], [ 0, %"for output.s0.x.xo125.preheader" ]
  %3302 = add nsw i32 %output.s0.x.xo127, %19
  br i1 %2087, label %"for convolved.s1.r19$y132.preheader", label %"consume convolved138", !prof !101

"end for output.s0.x.xo126.loopexit":             ; preds = %"consume convolved138", %"for output.s0.x.xo125.us"
  %.us-phi4853 = phi <32 x i32> [ %3262, %"for output.s0.x.xo125.us" ], [ %.lcssa4832.us.lcssa4851, %"consume convolved138" ]
  %.us-phi4854 = phi <32 x i32> [ %3261, %"for output.s0.x.xo125.us" ], [ %.lcssa4830.us.lcssa4848, %"consume convolved138" ]
  %.us-phi4855 = phi <32 x i32> [ %3260, %"for output.s0.x.xo125.us" ], [ %.lcssa4828.us.lcssa4845, %"consume convolved138" ]
  %.us-phi4856 = phi <32 x i32> [ %3259, %"for output.s0.x.xo125.us" ], [ %.lcssa4826.us.lcssa4842, %"consume convolved138" ]
  store <32 x i32> %.us-phi4856, <32 x i32>* %2146, align 128, !tbaa !111
  store <32 x i32> %.us-phi4855, <32 x i32>* %2148, align 128, !tbaa !119
  store <32 x i32> %.us-phi4854, <32 x i32>* %2150, align 128, !tbaa !121
  store <32 x i32> %.us-phi4853, <32 x i32>* %2152, align 128, !tbaa !124
  br label %"end for output.s0.x.xo126"

"end for output.s0.x.xo126":                      ; preds = %"end for output.s0.x.xo126.loopexit", %"for output.s0.y.yo122"
  %3303 = add nuw nsw i32 %output.s0.y.yo124, 1
  %.not723 = icmp eq i32 %3303, %23
  br i1 %.not723, label %"end for output.s0.y.yo123", label %"for output.s0.y.yo122"

"for convolved.s1.r19$y132.preheader":            ; preds = %"for output.s0.x.xo125"
  %3304 = mul nsw i32 %3302, %stride_x
  %3305 = sub i32 %3304, %t2348
  br i1 %2086, label %"for convolved.s1.r19$y132.us", label %"consume convolved138", !prof !101

"for convolved.s1.r19$y132.us":                   ; preds = %"for convolved.s1.r19$y132.preheader", %"end for convolved.s1.r19$x136.loopexit.us"
  %.lcssa4832.us4840 = phi <32 x i32> [ %.lcssa5181, %"end for convolved.s1.r19$x136.loopexit.us" ], [ %2442, %"for convolved.s1.r19$y132.preheader" ]
  %.lcssa4830.us4838 = phi <32 x i32> [ %.lcssa5182, %"end for convolved.s1.r19$x136.loopexit.us" ], [ %2441, %"for convolved.s1.r19$y132.preheader" ]
  %.lcssa4828.us4836 = phi <32 x i32> [ %.lcssa5183, %"end for convolved.s1.r19$x136.loopexit.us" ], [ %2440, %"for convolved.s1.r19$y132.preheader" ]
  %.lcssa4826.us4834 = phi <32 x i32> [ %.lcssa5184, %"end for convolved.s1.r19$x136.loopexit.us" ], [ %2439, %"for convolved.s1.r19$y132.preheader" ]
  %"convolved.s1.r19$y134.us" = phi i32 [ %3488, %"end for convolved.s1.r19$x136.loopexit.us" ], [ 0, %"for convolved.s1.r19$y132.preheader" ]
  %3306 = mul nsw i32 %"convolved.s1.r19$y134.us", %a68
  %3307 = add nsw i32 %3306, %3052
  %3308 = mul nsw i32 %3307, %2130
  %t2397.us = add nsw i32 %3305, %3308
  %3309 = mul nsw i32 %"convolved.s1.r19$y134.us", %4
  br i1 %2176, label %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x135.us"

"for convolved.s1.r19$x135.us":                   ; preds = %"for convolved.s1.r19$y132.us", %"for convolved.s1.r19$x135.us"
  %3310 = phi <32 x i32> [ %3448, %"for convolved.s1.r19$x135.us" ], [ %.lcssa4832.us4840, %"for convolved.s1.r19$y132.us" ]
  %3311 = phi <32 x i32> [ %3447, %"for convolved.s1.r19$x135.us" ], [ %.lcssa4830.us4838, %"for convolved.s1.r19$y132.us" ]
  %3312 = phi <32 x i32> [ %3446, %"for convolved.s1.r19$x135.us" ], [ %.lcssa4828.us4836, %"for convolved.s1.r19$y132.us" ]
  %3313 = phi <32 x i32> [ %3445, %"for convolved.s1.r19$x135.us" ], [ %.lcssa4826.us4834, %"for convolved.s1.r19$y132.us" ]
  %"convolved.s1.r19$x137.us" = phi i32 [ %3449, %"for convolved.s1.r19$x135.us" ], [ 0, %"for convolved.s1.r19$y132.us" ]
  %niter5257 = phi i32 [ %niter5257.nsub.3, %"for convolved.s1.r19$x135.us" ], [ %unroll_iter5256, %"for convolved.s1.r19$y132.us" ]
  %3314 = add nsw i32 %"convolved.s1.r19$x137.us", %3309
  %3315 = shl nsw i32 %3314, 7
  %3316 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %3315
  %3317 = bitcast i16* %3316 to <32 x i32>*
  %3318 = load <32 x i32>, <32 x i32>* %3317, align 128, !tbaa !105
  %3319 = mul nsw i32 %"convolved.s1.r19$x137.us", %a73
  %3320 = add nsw i32 %t2397.us, %3319
  %3321 = shl nsw i32 %3320, 7
  %3322 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3321
  %3323 = bitcast i8* %3322 to <64 x i8>*
  %3324 = load <64 x i8>, <64 x i8>* %3323, align 128, !tbaa !129
  %3325 = zext <64 x i8> %3324 to <64 x i16>
  %3326 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3312, <32 x i32> %3313)
  %3327 = bitcast <64 x i16> %3325 to <32 x i32>
  %3328 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3327) #11
  %3329 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3318) #11
  %3330 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3326, <32 x i32> %3328, <32 x i32> %3329) #11
  %3331 = getelementptr inbounds i16, i16* %3316, i32 64
  %3332 = bitcast i16* %3331 to <32 x i32>*
  %3333 = load <32 x i32>, <32 x i32>* %3332, align 128, !tbaa !105
  %3334 = getelementptr inbounds i8, i8* %3322, i32 64
  %3335 = bitcast i8* %3334 to <64 x i8>*
  %3336 = load <64 x i8>, <64 x i8>* %3335, align 64, !tbaa !129
  %3337 = zext <64 x i8> %3336 to <64 x i16>
  %3338 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3310, <32 x i32> %3311)
  %3339 = bitcast <64 x i16> %3337 to <32 x i32>
  %3340 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3339) #11
  %3341 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3333) #11
  %3342 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3338, <32 x i32> %3340, <32 x i32> %3341) #11
  %3343 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3330)
  %3344 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3330)
  %3345 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3342)
  %3346 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3342)
  %3347 = or i32 %"convolved.s1.r19$x137.us", 1
  %3348 = add nsw i32 %3347, %3309
  %3349 = shl nsw i32 %3348, 7
  %3350 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %3349
  %3351 = bitcast i16* %3350 to <32 x i32>*
  %3352 = load <32 x i32>, <32 x i32>* %3351, align 128, !tbaa !105
  %3353 = mul nsw i32 %3347, %a73
  %3354 = add nsw i32 %t2397.us, %3353
  %3355 = shl nsw i32 %3354, 7
  %3356 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3355
  %3357 = bitcast i8* %3356 to <64 x i8>*
  %3358 = load <64 x i8>, <64 x i8>* %3357, align 128, !tbaa !129
  %3359 = zext <64 x i8> %3358 to <64 x i16>
  %3360 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3344, <32 x i32> %3343)
  %3361 = bitcast <64 x i16> %3359 to <32 x i32>
  %3362 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3361) #11
  %3363 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3352) #11
  %3364 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3360, <32 x i32> %3362, <32 x i32> %3363) #11
  %3365 = getelementptr inbounds i16, i16* %3350, i32 64
  %3366 = bitcast i16* %3365 to <32 x i32>*
  %3367 = load <32 x i32>, <32 x i32>* %3366, align 128, !tbaa !105
  %3368 = getelementptr inbounds i8, i8* %3356, i32 64
  %3369 = bitcast i8* %3368 to <64 x i8>*
  %3370 = load <64 x i8>, <64 x i8>* %3369, align 64, !tbaa !129
  %3371 = zext <64 x i8> %3370 to <64 x i16>
  %3372 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3346, <32 x i32> %3345)
  %3373 = bitcast <64 x i16> %3371 to <32 x i32>
  %3374 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3373) #11
  %3375 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3367) #11
  %3376 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3372, <32 x i32> %3374, <32 x i32> %3375) #11
  %3377 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3364)
  %3378 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3364)
  %3379 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3376)
  %3380 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3376)
  %3381 = or i32 %"convolved.s1.r19$x137.us", 2
  %3382 = add nsw i32 %3381, %3309
  %3383 = shl nsw i32 %3382, 7
  %3384 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %3383
  %3385 = bitcast i16* %3384 to <32 x i32>*
  %3386 = load <32 x i32>, <32 x i32>* %3385, align 128, !tbaa !105
  %3387 = mul nsw i32 %3381, %a73
  %3388 = add nsw i32 %t2397.us, %3387
  %3389 = shl nsw i32 %3388, 7
  %3390 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3389
  %3391 = bitcast i8* %3390 to <64 x i8>*
  %3392 = load <64 x i8>, <64 x i8>* %3391, align 128, !tbaa !129
  %3393 = zext <64 x i8> %3392 to <64 x i16>
  %3394 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3378, <32 x i32> %3377)
  %3395 = bitcast <64 x i16> %3393 to <32 x i32>
  %3396 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3395) #11
  %3397 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3386) #11
  %3398 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3394, <32 x i32> %3396, <32 x i32> %3397) #11
  %3399 = getelementptr inbounds i16, i16* %3384, i32 64
  %3400 = bitcast i16* %3399 to <32 x i32>*
  %3401 = load <32 x i32>, <32 x i32>* %3400, align 128, !tbaa !105
  %3402 = getelementptr inbounds i8, i8* %3390, i32 64
  %3403 = bitcast i8* %3402 to <64 x i8>*
  %3404 = load <64 x i8>, <64 x i8>* %3403, align 64, !tbaa !129
  %3405 = zext <64 x i8> %3404 to <64 x i16>
  %3406 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3380, <32 x i32> %3379)
  %3407 = bitcast <64 x i16> %3405 to <32 x i32>
  %3408 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3407) #11
  %3409 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3401) #11
  %3410 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3406, <32 x i32> %3408, <32 x i32> %3409) #11
  %3411 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3398)
  %3412 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3398)
  %3413 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3410)
  %3414 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3410)
  %3415 = or i32 %"convolved.s1.r19$x137.us", 3
  %3416 = add nsw i32 %3415, %3309
  %3417 = shl nsw i32 %3416, 7
  %3418 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %3417
  %3419 = bitcast i16* %3418 to <32 x i32>*
  %3420 = load <32 x i32>, <32 x i32>* %3419, align 128, !tbaa !105
  %3421 = mul nsw i32 %3415, %a73
  %3422 = add nsw i32 %t2397.us, %3421
  %3423 = shl nsw i32 %3422, 7
  %3424 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3423
  %3425 = bitcast i8* %3424 to <64 x i8>*
  %3426 = load <64 x i8>, <64 x i8>* %3425, align 128, !tbaa !129
  %3427 = zext <64 x i8> %3426 to <64 x i16>
  %3428 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3412, <32 x i32> %3411)
  %3429 = bitcast <64 x i16> %3427 to <32 x i32>
  %3430 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3429) #11
  %3431 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3420) #11
  %3432 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3428, <32 x i32> %3430, <32 x i32> %3431) #11
  %3433 = getelementptr inbounds i16, i16* %3418, i32 64
  %3434 = bitcast i16* %3433 to <32 x i32>*
  %3435 = load <32 x i32>, <32 x i32>* %3434, align 128, !tbaa !105
  %3436 = getelementptr inbounds i8, i8* %3424, i32 64
  %3437 = bitcast i8* %3436 to <64 x i8>*
  %3438 = load <64 x i8>, <64 x i8>* %3437, align 64, !tbaa !129
  %3439 = zext <64 x i8> %3438 to <64 x i16>
  %3440 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3414, <32 x i32> %3413)
  %3441 = bitcast <64 x i16> %3439 to <32 x i32>
  %3442 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3441) #11
  %3443 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3435) #11
  %3444 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3440, <32 x i32> %3442, <32 x i32> %3443) #11
  %3445 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3432)
  %3446 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3432)
  %3447 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3444)
  %3448 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3444)
  %3449 = add nuw nsw i32 %"convolved.s1.r19$x137.us", 4
  %niter5257.nsub.3 = add i32 %niter5257, -4
  %niter5257.ncmp.3 = icmp eq i32 %niter5257.nsub.3, 0
  br i1 %niter5257.ncmp.3, label %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x135.us"

"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x135.us", %"for convolved.s1.r19$y132.us"
  %.lcssa5184.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y132.us" ], [ %3445, %"for convolved.s1.r19$x135.us" ]
  %.lcssa5183.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y132.us" ], [ %3446, %"for convolved.s1.r19$x135.us" ]
  %.lcssa5182.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y132.us" ], [ %3447, %"for convolved.s1.r19$x135.us" ]
  %.lcssa5181.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y132.us" ], [ %3448, %"for convolved.s1.r19$x135.us" ]
  %.unr5247 = phi <32 x i32> [ %.lcssa4832.us4840, %"for convolved.s1.r19$y132.us" ], [ %3448, %"for convolved.s1.r19$x135.us" ]
  %.unr5248 = phi <32 x i32> [ %.lcssa4830.us4838, %"for convolved.s1.r19$y132.us" ], [ %3447, %"for convolved.s1.r19$x135.us" ]
  %.unr5249 = phi <32 x i32> [ %.lcssa4828.us4836, %"for convolved.s1.r19$y132.us" ], [ %3446, %"for convolved.s1.r19$x135.us" ]
  %.unr5250 = phi <32 x i32> [ %.lcssa4826.us4834, %"for convolved.s1.r19$y132.us" ], [ %3445, %"for convolved.s1.r19$x135.us" ]
  %"convolved.s1.r19$x137.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y132.us" ], [ %3449, %"for convolved.s1.r19$x135.us" ]
  br i1 %lcmp.mod5251.not, label %"end for convolved.s1.r19$x136.loopexit.us", label %"for convolved.s1.r19$x135.us.epil"

"for convolved.s1.r19$x135.us.epil":              ; preds = %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x135.us.epil"
  %3450 = phi <32 x i32> [ %3486, %"for convolved.s1.r19$x135.us.epil" ], [ %.unr5247, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ]
  %3451 = phi <32 x i32> [ %3485, %"for convolved.s1.r19$x135.us.epil" ], [ %.unr5248, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ]
  %3452 = phi <32 x i32> [ %3484, %"for convolved.s1.r19$x135.us.epil" ], [ %.unr5249, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ]
  %3453 = phi <32 x i32> [ %3483, %"for convolved.s1.r19$x135.us.epil" ], [ %.unr5250, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ]
  %"convolved.s1.r19$x137.us.epil" = phi i32 [ %3487, %"for convolved.s1.r19$x135.us.epil" ], [ %"convolved.s1.r19$x137.us.unr", %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ]
  %epil.iter5246 = phi i32 [ %epil.iter5246.sub, %"for convolved.s1.r19$x135.us.epil" ], [ %xtraiter5245, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ]
  %3454 = add nsw i32 %"convolved.s1.r19$x137.us.epil", %3309
  %3455 = shl nsw i32 %3454, 7
  %3456 = getelementptr inbounds i16, i16* %filter_zeroed75, i32 %3455
  %3457 = bitcast i16* %3456 to <32 x i32>*
  %3458 = load <32 x i32>, <32 x i32>* %3457, align 128, !tbaa !105
  %3459 = mul nsw i32 %"convolved.s1.r19$x137.us.epil", %a73
  %3460 = add nsw i32 %t2397.us, %3459
  %3461 = shl nsw i32 %3460, 7
  %3462 = getelementptr inbounds i8, i8* %resampled_input101, i32 %3461
  %3463 = bitcast i8* %3462 to <64 x i8>*
  %3464 = load <64 x i8>, <64 x i8>* %3463, align 128, !tbaa !129
  %3465 = zext <64 x i8> %3464 to <64 x i16>
  %3466 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3452, <32 x i32> %3453)
  %3467 = bitcast <64 x i16> %3465 to <32 x i32>
  %3468 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3467) #11
  %3469 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3458) #11
  %3470 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3466, <32 x i32> %3468, <32 x i32> %3469) #11
  %3471 = getelementptr inbounds i16, i16* %3456, i32 64
  %3472 = bitcast i16* %3471 to <32 x i32>*
  %3473 = load <32 x i32>, <32 x i32>* %3472, align 128, !tbaa !105
  %3474 = getelementptr inbounds i8, i8* %3462, i32 64
  %3475 = bitcast i8* %3474 to <64 x i8>*
  %3476 = load <64 x i8>, <64 x i8>* %3475, align 64, !tbaa !129
  %3477 = zext <64 x i8> %3476 to <64 x i16>
  %3478 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3450, <32 x i32> %3451)
  %3479 = bitcast <64 x i16> %3477 to <32 x i32>
  %3480 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3479) #11
  %3481 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %3473) #11
  %3482 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %3478, <32 x i32> %3480, <32 x i32> %3481) #11
  %3483 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3470)
  %3484 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3470)
  %3485 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3482)
  %3486 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3482)
  %3487 = add nuw nsw i32 %"convolved.s1.r19$x137.us.epil", 1
  %epil.iter5246.sub = add i32 %epil.iter5246, -1
  %epil.iter5246.cmp.not = icmp eq i32 %epil.iter5246.sub, 0
  br i1 %epil.iter5246.cmp.not, label %"end for convolved.s1.r19$x136.loopexit.us", label %"for convolved.s1.r19$x135.us.epil", !llvm.loop !203

"end for convolved.s1.r19$x136.loopexit.us":      ; preds = %"for convolved.s1.r19$x135.us.epil", %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa"
  %.lcssa5184 = phi <32 x i32> [ %.lcssa5184.ph, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ], [ %3483, %"for convolved.s1.r19$x135.us.epil" ]
  %.lcssa5183 = phi <32 x i32> [ %.lcssa5183.ph, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ], [ %3484, %"for convolved.s1.r19$x135.us.epil" ]
  %.lcssa5182 = phi <32 x i32> [ %.lcssa5182.ph, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ], [ %3485, %"for convolved.s1.r19$x135.us.epil" ]
  %.lcssa5181 = phi <32 x i32> [ %.lcssa5181.ph, %"end for convolved.s1.r19$x136.loopexit.us.unr-lcssa" ], [ %3486, %"for convolved.s1.r19$x135.us.epil" ]
  %3488 = add nuw nsw i32 %"convolved.s1.r19$y134.us", 1
  %.not726.us = icmp eq i32 %3488, %6
  br i1 %.not726.us, label %"consume convolved138", label %"for convolved.s1.r19$y132.us"

"consume convolved138":                           ; preds = %"end for convolved.s1.r19$x136.loopexit.us", %"for output.s0.x.xo125", %"for convolved.s1.r19$y132.preheader"
  %.lcssa4832.us.lcssa4851 = phi <32 x i32> [ %2442, %"for convolved.s1.r19$y132.preheader" ], [ %2442, %"for output.s0.x.xo125" ], [ %.lcssa5181, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %.lcssa4830.us.lcssa4848 = phi <32 x i32> [ %2441, %"for convolved.s1.r19$y132.preheader" ], [ %2441, %"for output.s0.x.xo125" ], [ %.lcssa5182, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %.lcssa4828.us.lcssa4845 = phi <32 x i32> [ %2440, %"for convolved.s1.r19$y132.preheader" ], [ %2440, %"for output.s0.x.xo125" ], [ %.lcssa5183, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %.lcssa4826.us.lcssa4842 = phi <32 x i32> [ %2439, %"for convolved.s1.r19$y132.preheader" ], [ %2439, %"for output.s0.x.xo125" ], [ %.lcssa5184, %"end for convolved.s1.r19$x136.loopexit.us" ]
  %3489 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4828.us.lcssa4845, <32 x i32> %3054) #11
  %3490 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3489, <32 x i32> %.lcssa4828.us.lcssa4845, <32 x i32> %3054) #11
  %3491 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3490, <32 x i32> %3053) #11
  %3492 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3490, <32 x i32> %3055) #11
  %3493 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3492, <32 x i32> %2155) #11
  %3494 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3491, <32 x i32> %3493) #11
  %3495 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4826.us.lcssa4842, <32 x i32> %3054) #11
  %3496 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3495, <32 x i32> %.lcssa4826.us.lcssa4842, <32 x i32> %3054) #11
  %3497 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3496, <32 x i32> %3053) #11
  %3498 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3496, <32 x i32> %3055) #11
  %3499 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3498, <32 x i32> %2155) #11
  %3500 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3497, <32 x i32> %3499) #11
  %3501 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %3494, <32 x i32> %3500) #11
  %3502 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4832.us.lcssa4851, <32 x i32> %3054) #11
  %3503 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3502, <32 x i32> %.lcssa4832.us.lcssa4851, <32 x i32> %3054) #11
  %3504 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3503, <32 x i32> %3053) #11
  %3505 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3503, <32 x i32> %3055) #11
  %3506 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3505, <32 x i32> %2155) #11
  %3507 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3504, <32 x i32> %3506) #11
  %3508 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %.lcssa4830.us.lcssa4848, <32 x i32> %3054) #11
  %3509 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %3508, <32 x i32> %.lcssa4830.us.lcssa4848, <32 x i32> %3054) #11
  %3510 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3509, <32 x i32> %3053) #11
  %3511 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %3509, <32 x i32> %3055) #11
  %3512 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %3511, <32 x i32> %2155) #11
  %3513 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %3510, <32 x i32> %3512) #11
  %3514 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %3507, <32 x i32> %3513) #11
  %3515 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3501, <32 x i32> %3514) #11
  %3516 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %3515, <64 x i32> %2164) #11
  %3517 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3516) #11
  %3518 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3516) #11
  %3519 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %3517, <32 x i32> %3518) #11
  %3520 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2165, <32 x i32> %3519) #11
  %3521 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3520, <32 x i32> %2166) #11
  %3522 = mul nsw i32 %3302, %21
  %3523 = add i32 %3057, %3522
  %3524 = getelementptr inbounds i8, i8* %17, i32 %3523
  %3525 = bitcast i8* %3524 to <32 x i32>*
  store <32 x i32> %3521, <32 x i32>* %3525, align 1, !tbaa !199
  %3526 = add nuw nsw i32 %output.s0.x.xo127, 1
  %.not725 = icmp eq i32 %3526, %20
  br i1 %.not725, label %"end for output.s0.x.xo126.loopexit", label %"for output.s0.x.xo125"

if.end.i893:                                      ; preds = %next_bb68
  %3527 = icmp eq i32 %4, 3
  %3528 = icmp eq i32 %6, 3
  %3529 = and i1 %3527, %3528
  %3530 = icmp sgt i32 %4, 0
  %3531 = icmp sgt i32 %6, 0
  %3532 = select i1 %3531, i32 %6, i32 0
  %.op = shl i32 %4, 8
  %3533 = select i1 %3530, i32 %.op, i32 0
  %3534 = mul i32 %3533, %3532
  %3535 = or i32 %3534, 134
  %3536 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i32 %3535, i32* %.fca.2.gep, align 4, !tbaa !98
  %cmp7.i892 = icmp ugt i32 %3535, 16384
  br i1 %cmp7.i892, label %pseudostack_alloc.exit898, label %pseudostack_alloc.exit898.thread

pseudostack_alloc.exit898.thread:                 ; preds = %if.end.i893
  store i32 %3535, i32* %.fca.1.gep, align 4, !tbaa !95
  br label %then_bb154

pseudostack_alloc.exit898:                        ; preds = %if.end.i893
  %call.i894 = tail call i8* @halide_malloc(i8* null, i32 %3535) #15
  store i8* %call.i894, i8** %.fca.0.gep, align 4, !tbaa !97
  store i32 %3535, i32* %.fca.1.gep, align 4, !tbaa !95
  %3537 = bitcast i8* %call.i894 to i16*
  %.not = icmp eq i8* %call.i894, null
  br i1 %.not, label %then_bb154, label %"produce filter_zeroed156", !prof !100

then_bb154:                                       ; preds = %pseudostack_alloc.exit898.thread, %pseudostack_alloc.exit898
  %3538 = alloca i8*, i32 %3535, align 128
  %3539 = bitcast i8** %3538 to i16*
  %3540 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %3538, i8*** %3540, align 4
  br label %"produce filter_zeroed156"

"produce filter_zeroed156":                       ; preds = %pseudostack_alloc.exit898, %then_bb154
  %filter_zeroed155 = phi i16* [ %3539, %then_bb154 ], [ %3537, %pseudostack_alloc.exit898 ]
  %t2399 = icmp sgt i32 %3, 64
  %t2398 = icmp sgt i32 %3, 63
  br i1 %3531, label %"for filter_zeroed.s0.y157.preheader", label %"produce sum_filter174", !prof !101

"for filter_zeroed.s0.y157.preheader":            ; preds = %"produce filter_zeroed156"
  %3541 = insertelement <64 x i32> undef, i32 %3, i32 0
  %3542 = shufflevector <64 x i32> %3541, <64 x i32> undef, <64 x i32> zeroinitializer
  %3543 = icmp sgt <64 x i32> %3542, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3544 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %3545 = shufflevector <64 x i8> %3544, <64 x i8> undef, <64 x i32> zeroinitializer
  %3546 = zext <64 x i8> %3545 to <64 x i16>
  %3547 = bitcast <64 x i16> %3546 to <32 x i32>
  %3548 = icmp sgt <64 x i32> %3542, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br i1 %3530, label %"for filter_zeroed.s0.y157.preheader.split.us", label %"produce sum_filter174", !prof !101

"for filter_zeroed.s0.y157.preheader.split.us":   ; preds = %"for filter_zeroed.s0.y157.preheader"
  br i1 %t2398, label %"for filter_zeroed.s0.y157.preheader.split.us.split.us", label %"for filter_zeroed.s0.y157.us.preheader"

"for filter_zeroed.s0.y157.us.preheader":         ; preds = %"for filter_zeroed.s0.y157.preheader.split.us"
  %3549 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %3550 = icmp ult i32 %3549, 7
  %unroll_iter = and i32 %4, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %"for filter_zeroed.s0.y157.us"

"for filter_zeroed.s0.y157.preheader.split.us.split.us": ; preds = %"for filter_zeroed.s0.y157.preheader.split.us"
  br i1 %t2399, label %"for filter_zeroed.s0.y157.us.us.us.preheader", label %"for filter_zeroed.s0.y157.us.us.preheader"

"for filter_zeroed.s0.y157.us.us.preheader":      ; preds = %"for filter_zeroed.s0.y157.preheader.split.us.split.us"
  %3551 = add i32 %4, -1
  %xtraiter5199 = and i32 %4, 7
  %3552 = icmp ult i32 %3551, 7
  %unroll_iter5202 = and i32 %4, -8
  %lcmp.mod5201.not = icmp eq i32 %xtraiter5199, 0
  br label %"for filter_zeroed.s0.y157.us.us"

"for filter_zeroed.s0.y157.us.us.us.preheader":   ; preds = %"for filter_zeroed.s0.y157.preheader.split.us.split.us"
  %3553 = add i32 %4, -1
  %xtraiter5204 = and i32 %4, 3
  %3554 = icmp ult i32 %3553, 3
  %unroll_iter5207 = and i32 %4, -4
  %lcmp.mod5206.not = icmp eq i32 %xtraiter5204, 0
  br label %"for filter_zeroed.s0.y157.us.us.us"

"for filter_zeroed.s0.y157.us.us.us":             ; preds = %"for filter_zeroed.s0.y157.us.us.us.preheader", %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us"
  %filter_zeroed.s0.y159.us.us.us = phi i32 [ %3667, %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y157.us.us.us.preheader" ]
  %3555 = mul nsw i32 %filter_zeroed.s0.y159.us.us.us, %7
  %3556 = mul nsw i32 %filter_zeroed.s0.y159.us.us.us, %4
  br i1 %3554, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x160.us.us.us.us.us"

"for filter_zeroed.s0.x160.us.us.us.us.us":       ; preds = %"for filter_zeroed.s0.y157.us.us.us", %"for filter_zeroed.s0.x160.us.us.us.us.us"
  %filter_zeroed.s0.x162.us.us.us.us.us = phi i32 [ %3644, %"for filter_zeroed.s0.x160.us.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y157.us.us.us" ]
  %niter5208 = phi i32 [ %niter5208.nsub.3, %"for filter_zeroed.s0.x160.us.us.us.us.us" ], [ %unroll_iter5207, %"for filter_zeroed.s0.y157.us.us.us" ]
  %3557 = mul nsw i32 %filter_zeroed.s0.x162.us.us.us.us.us, %5
  %3558 = add nsw i32 %3557, %3555
  %3559 = getelementptr inbounds i8, i8* %1, i32 %3558
  %3560 = bitcast i8* %3559 to <64 x i8>*
  %3561 = load <64 x i8>, <64 x i8>* %3560, align 1, !tbaa !102
  %3562 = zext <64 x i8> %3561 to <64 x i16>
  %3563 = bitcast <64 x i16> %3562 to <32 x i32>
  %3564 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3563, <32 x i32> %3547) #11
  %3565 = add nsw i32 %filter_zeroed.s0.x162.us.us.us.us.us, %3556
  %3566 = shl nsw i32 %3565, 7
  %3567 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3566
  %3568 = bitcast i16* %3567 to <32 x i32>*
  store <32 x i32> %3564, <32 x i32>* %3568, align 128, !tbaa !105
  %3569 = getelementptr inbounds i8, i8* %3559, i32 64
  %3570 = bitcast i8* %3569 to <64 x i8>*
  %3571 = load <64 x i8>, <64 x i8>* %3570, align 1, !tbaa !102
  %3572 = zext <64 x i8> %3571 to <64 x i16>
  %3573 = bitcast <64 x i16> %3572 to <32 x i32>
  %3574 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3573, <32 x i32> %3547) #11
  %3575 = bitcast <32 x i32> %3574 to <64 x i16>
  %3576 = getelementptr inbounds i16, i16* %3567, i32 64
  %3577 = bitcast i16* %3576 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3575, <64 x i16>* nonnull %3577, i32 128, <64 x i1> %3548), !tbaa !105
  %3578 = or i32 %filter_zeroed.s0.x162.us.us.us.us.us, 1
  %3579 = mul nsw i32 %3578, %5
  %3580 = add nsw i32 %3579, %3555
  %3581 = getelementptr inbounds i8, i8* %1, i32 %3580
  %3582 = bitcast i8* %3581 to <64 x i8>*
  %3583 = load <64 x i8>, <64 x i8>* %3582, align 1, !tbaa !102
  %3584 = zext <64 x i8> %3583 to <64 x i16>
  %3585 = bitcast <64 x i16> %3584 to <32 x i32>
  %3586 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3585, <32 x i32> %3547) #11
  %3587 = add nsw i32 %3578, %3556
  %3588 = shl nsw i32 %3587, 7
  %3589 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3588
  %3590 = bitcast i16* %3589 to <32 x i32>*
  store <32 x i32> %3586, <32 x i32>* %3590, align 128, !tbaa !105
  %3591 = getelementptr inbounds i8, i8* %3581, i32 64
  %3592 = bitcast i8* %3591 to <64 x i8>*
  %3593 = load <64 x i8>, <64 x i8>* %3592, align 1, !tbaa !102
  %3594 = zext <64 x i8> %3593 to <64 x i16>
  %3595 = bitcast <64 x i16> %3594 to <32 x i32>
  %3596 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3595, <32 x i32> %3547) #11
  %3597 = bitcast <32 x i32> %3596 to <64 x i16>
  %3598 = getelementptr inbounds i16, i16* %3589, i32 64
  %3599 = bitcast i16* %3598 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3597, <64 x i16>* nonnull %3599, i32 128, <64 x i1> %3548), !tbaa !105
  %3600 = or i32 %filter_zeroed.s0.x162.us.us.us.us.us, 2
  %3601 = mul nsw i32 %3600, %5
  %3602 = add nsw i32 %3601, %3555
  %3603 = getelementptr inbounds i8, i8* %1, i32 %3602
  %3604 = bitcast i8* %3603 to <64 x i8>*
  %3605 = load <64 x i8>, <64 x i8>* %3604, align 1, !tbaa !102
  %3606 = zext <64 x i8> %3605 to <64 x i16>
  %3607 = bitcast <64 x i16> %3606 to <32 x i32>
  %3608 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3607, <32 x i32> %3547) #11
  %3609 = add nsw i32 %3600, %3556
  %3610 = shl nsw i32 %3609, 7
  %3611 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3610
  %3612 = bitcast i16* %3611 to <32 x i32>*
  store <32 x i32> %3608, <32 x i32>* %3612, align 128, !tbaa !105
  %3613 = getelementptr inbounds i8, i8* %3603, i32 64
  %3614 = bitcast i8* %3613 to <64 x i8>*
  %3615 = load <64 x i8>, <64 x i8>* %3614, align 1, !tbaa !102
  %3616 = zext <64 x i8> %3615 to <64 x i16>
  %3617 = bitcast <64 x i16> %3616 to <32 x i32>
  %3618 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3617, <32 x i32> %3547) #11
  %3619 = bitcast <32 x i32> %3618 to <64 x i16>
  %3620 = getelementptr inbounds i16, i16* %3611, i32 64
  %3621 = bitcast i16* %3620 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3619, <64 x i16>* nonnull %3621, i32 128, <64 x i1> %3548), !tbaa !105
  %3622 = or i32 %filter_zeroed.s0.x162.us.us.us.us.us, 3
  %3623 = mul nsw i32 %3622, %5
  %3624 = add nsw i32 %3623, %3555
  %3625 = getelementptr inbounds i8, i8* %1, i32 %3624
  %3626 = bitcast i8* %3625 to <64 x i8>*
  %3627 = load <64 x i8>, <64 x i8>* %3626, align 1, !tbaa !102
  %3628 = zext <64 x i8> %3627 to <64 x i16>
  %3629 = bitcast <64 x i16> %3628 to <32 x i32>
  %3630 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3629, <32 x i32> %3547) #11
  %3631 = add nsw i32 %3622, %3556
  %3632 = shl nsw i32 %3631, 7
  %3633 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3632
  %3634 = bitcast i16* %3633 to <32 x i32>*
  store <32 x i32> %3630, <32 x i32>* %3634, align 128, !tbaa !105
  %3635 = getelementptr inbounds i8, i8* %3625, i32 64
  %3636 = bitcast i8* %3635 to <64 x i8>*
  %3637 = load <64 x i8>, <64 x i8>* %3636, align 1, !tbaa !102
  %3638 = zext <64 x i8> %3637 to <64 x i16>
  %3639 = bitcast <64 x i16> %3638 to <32 x i32>
  %3640 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3639, <32 x i32> %3547) #11
  %3641 = bitcast <32 x i32> %3640 to <64 x i16>
  %3642 = getelementptr inbounds i16, i16* %3633, i32 64
  %3643 = bitcast i16* %3642 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3641, <64 x i16>* nonnull %3643, i32 128, <64 x i1> %3548), !tbaa !105
  %3644 = add nuw nsw i32 %filter_zeroed.s0.x162.us.us.us.us.us, 4
  %niter5208.nsub.3 = add i32 %niter5208, -4
  %niter5208.ncmp.3 = icmp eq i32 %niter5208.nsub.3, 0
  br i1 %niter5208.ncmp.3, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x160.us.us.us.us.us"

"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x160.us.us.us.us.us", %"for filter_zeroed.s0.y157.us.us.us"
  %filter_zeroed.s0.x162.us.us.us.us.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y157.us.us.us" ], [ %3644, %"for filter_zeroed.s0.x160.us.us.us.us.us" ]
  br i1 %lcmp.mod5206.not, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x160.us.us.us.us.us.epil"

"for filter_zeroed.s0.x160.us.us.us.us.us.epil":  ; preds = %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us.unr-lcssa", %"for filter_zeroed.s0.x160.us.us.us.us.us.epil"
  %filter_zeroed.s0.x162.us.us.us.us.us.epil = phi i32 [ %3666, %"for filter_zeroed.s0.x160.us.us.us.us.us.epil" ], [ %filter_zeroed.s0.x162.us.us.us.us.us.unr, %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %epil.iter5205 = phi i32 [ %epil.iter5205.sub, %"for filter_zeroed.s0.x160.us.us.us.us.us.epil" ], [ %xtraiter5204, %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %3645 = mul nsw i32 %filter_zeroed.s0.x162.us.us.us.us.us.epil, %5
  %3646 = add nsw i32 %3645, %3555
  %3647 = getelementptr inbounds i8, i8* %1, i32 %3646
  %3648 = bitcast i8* %3647 to <64 x i8>*
  %3649 = load <64 x i8>, <64 x i8>* %3648, align 1, !tbaa !102
  %3650 = zext <64 x i8> %3649 to <64 x i16>
  %3651 = bitcast <64 x i16> %3650 to <32 x i32>
  %3652 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3651, <32 x i32> %3547) #11
  %3653 = add nsw i32 %filter_zeroed.s0.x162.us.us.us.us.us.epil, %3556
  %3654 = shl nsw i32 %3653, 7
  %3655 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3654
  %3656 = bitcast i16* %3655 to <32 x i32>*
  store <32 x i32> %3652, <32 x i32>* %3656, align 128, !tbaa !105
  %3657 = getelementptr inbounds i8, i8* %3647, i32 64
  %3658 = bitcast i8* %3657 to <64 x i8>*
  %3659 = load <64 x i8>, <64 x i8>* %3658, align 1, !tbaa !102
  %3660 = zext <64 x i8> %3659 to <64 x i16>
  %3661 = bitcast <64 x i16> %3660 to <32 x i32>
  %3662 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3661, <32 x i32> %3547) #11
  %3663 = bitcast <32 x i32> %3662 to <64 x i16>
  %3664 = getelementptr inbounds i16, i16* %3655, i32 64
  %3665 = bitcast i16* %3664 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3663, <64 x i16>* nonnull %3665, i32 128, <64 x i1> %3548), !tbaa !105
  %3666 = add nuw nsw i32 %filter_zeroed.s0.x162.us.us.us.us.us.epil, 1
  %epil.iter5205.sub = add i32 %epil.iter5205, -1
  %epil.iter5205.cmp.not = icmp eq i32 %epil.iter5205.sub, 0
  br i1 %epil.iter5205.cmp.not, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x160.us.us.us.us.us.epil", !llvm.loop !204

"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us": ; preds = %"for filter_zeroed.s0.x160.us.us.us.us.us.epil", %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us.unr-lcssa"
  %3667 = add nuw nsw i32 %filter_zeroed.s0.y159.us.us.us, 1
  %.not715.us.us.us = icmp eq i32 %3667, %6
  br i1 %.not715.us.us.us, label %"produce sum_filter174", label %"for filter_zeroed.s0.y157.us.us.us"

"for filter_zeroed.s0.y157.us.us":                ; preds = %"for filter_zeroed.s0.y157.us.us.preheader", %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us"
  %filter_zeroed.s0.y159.us.us = phi i32 [ %3787, %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us" ], [ 0, %"for filter_zeroed.s0.y157.us.us.preheader" ]
  %3668 = mul nsw i32 %filter_zeroed.s0.y159.us.us, %7
  %3669 = mul nsw i32 %filter_zeroed.s0.y159.us.us, %4
  br i1 %3552, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us.unr-lcssa", label %"for filter_zeroed.s0.x160.us.us4798.us"

"for filter_zeroed.s0.x160.us.us4798.us":         ; preds = %"for filter_zeroed.s0.y157.us.us", %"for filter_zeroed.s0.x160.us.us4798.us"
  %filter_zeroed.s0.x162.us.us4799.us = phi i32 [ %3773, %"for filter_zeroed.s0.x160.us.us4798.us" ], [ 0, %"for filter_zeroed.s0.y157.us.us" ]
  %niter5203 = phi i32 [ %niter5203.nsub.7, %"for filter_zeroed.s0.x160.us.us4798.us" ], [ %unroll_iter5202, %"for filter_zeroed.s0.y157.us.us" ]
  %3670 = mul nsw i32 %filter_zeroed.s0.x162.us.us4799.us, %5
  %3671 = add nsw i32 %3670, %3668
  %3672 = getelementptr inbounds i8, i8* %1, i32 %3671
  %3673 = bitcast i8* %3672 to <64 x i8>*
  %3674 = load <64 x i8>, <64 x i8>* %3673, align 1, !tbaa !102
  %3675 = zext <64 x i8> %3674 to <64 x i16>
  %3676 = bitcast <64 x i16> %3675 to <32 x i32>
  %3677 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3676, <32 x i32> %3547) #11
  %3678 = add nsw i32 %filter_zeroed.s0.x162.us.us4799.us, %3669
  %3679 = shl nsw i32 %3678, 7
  %3680 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3679
  %3681 = bitcast i16* %3680 to <32 x i32>*
  store <32 x i32> %3677, <32 x i32>* %3681, align 128, !tbaa !105
  %3682 = or i32 %filter_zeroed.s0.x162.us.us4799.us, 1
  %3683 = mul nsw i32 %3682, %5
  %3684 = add nsw i32 %3683, %3668
  %3685 = getelementptr inbounds i8, i8* %1, i32 %3684
  %3686 = bitcast i8* %3685 to <64 x i8>*
  %3687 = load <64 x i8>, <64 x i8>* %3686, align 1, !tbaa !102
  %3688 = zext <64 x i8> %3687 to <64 x i16>
  %3689 = bitcast <64 x i16> %3688 to <32 x i32>
  %3690 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3689, <32 x i32> %3547) #11
  %3691 = add nsw i32 %3682, %3669
  %3692 = shl nsw i32 %3691, 7
  %3693 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3692
  %3694 = bitcast i16* %3693 to <32 x i32>*
  store <32 x i32> %3690, <32 x i32>* %3694, align 128, !tbaa !105
  %3695 = or i32 %filter_zeroed.s0.x162.us.us4799.us, 2
  %3696 = mul nsw i32 %3695, %5
  %3697 = add nsw i32 %3696, %3668
  %3698 = getelementptr inbounds i8, i8* %1, i32 %3697
  %3699 = bitcast i8* %3698 to <64 x i8>*
  %3700 = load <64 x i8>, <64 x i8>* %3699, align 1, !tbaa !102
  %3701 = zext <64 x i8> %3700 to <64 x i16>
  %3702 = bitcast <64 x i16> %3701 to <32 x i32>
  %3703 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3702, <32 x i32> %3547) #11
  %3704 = add nsw i32 %3695, %3669
  %3705 = shl nsw i32 %3704, 7
  %3706 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3705
  %3707 = bitcast i16* %3706 to <32 x i32>*
  store <32 x i32> %3703, <32 x i32>* %3707, align 128, !tbaa !105
  %3708 = or i32 %filter_zeroed.s0.x162.us.us4799.us, 3
  %3709 = mul nsw i32 %3708, %5
  %3710 = add nsw i32 %3709, %3668
  %3711 = getelementptr inbounds i8, i8* %1, i32 %3710
  %3712 = bitcast i8* %3711 to <64 x i8>*
  %3713 = load <64 x i8>, <64 x i8>* %3712, align 1, !tbaa !102
  %3714 = zext <64 x i8> %3713 to <64 x i16>
  %3715 = bitcast <64 x i16> %3714 to <32 x i32>
  %3716 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3715, <32 x i32> %3547) #11
  %3717 = add nsw i32 %3708, %3669
  %3718 = shl nsw i32 %3717, 7
  %3719 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3718
  %3720 = bitcast i16* %3719 to <32 x i32>*
  store <32 x i32> %3716, <32 x i32>* %3720, align 128, !tbaa !105
  %3721 = or i32 %filter_zeroed.s0.x162.us.us4799.us, 4
  %3722 = mul nsw i32 %3721, %5
  %3723 = add nsw i32 %3722, %3668
  %3724 = getelementptr inbounds i8, i8* %1, i32 %3723
  %3725 = bitcast i8* %3724 to <64 x i8>*
  %3726 = load <64 x i8>, <64 x i8>* %3725, align 1, !tbaa !102
  %3727 = zext <64 x i8> %3726 to <64 x i16>
  %3728 = bitcast <64 x i16> %3727 to <32 x i32>
  %3729 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3728, <32 x i32> %3547) #11
  %3730 = add nsw i32 %3721, %3669
  %3731 = shl nsw i32 %3730, 7
  %3732 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3731
  %3733 = bitcast i16* %3732 to <32 x i32>*
  store <32 x i32> %3729, <32 x i32>* %3733, align 128, !tbaa !105
  %3734 = or i32 %filter_zeroed.s0.x162.us.us4799.us, 5
  %3735 = mul nsw i32 %3734, %5
  %3736 = add nsw i32 %3735, %3668
  %3737 = getelementptr inbounds i8, i8* %1, i32 %3736
  %3738 = bitcast i8* %3737 to <64 x i8>*
  %3739 = load <64 x i8>, <64 x i8>* %3738, align 1, !tbaa !102
  %3740 = zext <64 x i8> %3739 to <64 x i16>
  %3741 = bitcast <64 x i16> %3740 to <32 x i32>
  %3742 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3741, <32 x i32> %3547) #11
  %3743 = add nsw i32 %3734, %3669
  %3744 = shl nsw i32 %3743, 7
  %3745 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3744
  %3746 = bitcast i16* %3745 to <32 x i32>*
  store <32 x i32> %3742, <32 x i32>* %3746, align 128, !tbaa !105
  %3747 = or i32 %filter_zeroed.s0.x162.us.us4799.us, 6
  %3748 = mul nsw i32 %3747, %5
  %3749 = add nsw i32 %3748, %3668
  %3750 = getelementptr inbounds i8, i8* %1, i32 %3749
  %3751 = bitcast i8* %3750 to <64 x i8>*
  %3752 = load <64 x i8>, <64 x i8>* %3751, align 1, !tbaa !102
  %3753 = zext <64 x i8> %3752 to <64 x i16>
  %3754 = bitcast <64 x i16> %3753 to <32 x i32>
  %3755 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3754, <32 x i32> %3547) #11
  %3756 = add nsw i32 %3747, %3669
  %3757 = shl nsw i32 %3756, 7
  %3758 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3757
  %3759 = bitcast i16* %3758 to <32 x i32>*
  store <32 x i32> %3755, <32 x i32>* %3759, align 128, !tbaa !105
  %3760 = or i32 %filter_zeroed.s0.x162.us.us4799.us, 7
  %3761 = mul nsw i32 %3760, %5
  %3762 = add nsw i32 %3761, %3668
  %3763 = getelementptr inbounds i8, i8* %1, i32 %3762
  %3764 = bitcast i8* %3763 to <64 x i8>*
  %3765 = load <64 x i8>, <64 x i8>* %3764, align 1, !tbaa !102
  %3766 = zext <64 x i8> %3765 to <64 x i16>
  %3767 = bitcast <64 x i16> %3766 to <32 x i32>
  %3768 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3767, <32 x i32> %3547) #11
  %3769 = add nsw i32 %3760, %3669
  %3770 = shl nsw i32 %3769, 7
  %3771 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3770
  %3772 = bitcast i16* %3771 to <32 x i32>*
  store <32 x i32> %3768, <32 x i32>* %3772, align 128, !tbaa !105
  %3773 = add nuw nsw i32 %filter_zeroed.s0.x162.us.us4799.us, 8
  %niter5203.nsub.7 = add i32 %niter5203, -8
  %niter5203.ncmp.7 = icmp eq i32 %niter5203.nsub.7, 0
  br i1 %niter5203.ncmp.7, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us.unr-lcssa", label %"for filter_zeroed.s0.x160.us.us4798.us"

"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x160.us.us4798.us", %"for filter_zeroed.s0.y157.us.us"
  %filter_zeroed.s0.x162.us.us4799.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y157.us.us" ], [ %3773, %"for filter_zeroed.s0.x160.us.us4798.us" ]
  br i1 %lcmp.mod5201.not, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us", label %"for filter_zeroed.s0.x160.us.us4798.us.epil"

"for filter_zeroed.s0.x160.us.us4798.us.epil":    ; preds = %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us.unr-lcssa", %"for filter_zeroed.s0.x160.us.us4798.us.epil"
  %filter_zeroed.s0.x162.us.us4799.us.epil = phi i32 [ %3786, %"for filter_zeroed.s0.x160.us.us4798.us.epil" ], [ %filter_zeroed.s0.x162.us.us4799.us.unr, %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us.unr-lcssa" ]
  %epil.iter5200 = phi i32 [ %epil.iter5200.sub, %"for filter_zeroed.s0.x160.us.us4798.us.epil" ], [ %xtraiter5199, %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us.unr-lcssa" ]
  %3774 = mul nsw i32 %filter_zeroed.s0.x162.us.us4799.us.epil, %5
  %3775 = add nsw i32 %3774, %3668
  %3776 = getelementptr inbounds i8, i8* %1, i32 %3775
  %3777 = bitcast i8* %3776 to <64 x i8>*
  %3778 = load <64 x i8>, <64 x i8>* %3777, align 1, !tbaa !102
  %3779 = zext <64 x i8> %3778 to <64 x i16>
  %3780 = bitcast <64 x i16> %3779 to <32 x i32>
  %3781 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3780, <32 x i32> %3547) #11
  %3782 = add nsw i32 %filter_zeroed.s0.x162.us.us4799.us.epil, %3669
  %3783 = shl nsw i32 %3782, 7
  %3784 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3783
  %3785 = bitcast i16* %3784 to <32 x i32>*
  store <32 x i32> %3781, <32 x i32>* %3785, align 128, !tbaa !105
  %3786 = add nuw nsw i32 %filter_zeroed.s0.x162.us.us4799.us.epil, 1
  %epil.iter5200.sub = add i32 %epil.iter5200, -1
  %epil.iter5200.cmp.not = icmp eq i32 %epil.iter5200.sub, 0
  br i1 %epil.iter5200.cmp.not, label %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us", label %"for filter_zeroed.s0.x160.us.us4798.us.epil", !llvm.loop !205

"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us": ; preds = %"for filter_zeroed.s0.x160.us.us4798.us.epil", %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us.unr-lcssa"
  %3787 = add nuw nsw i32 %filter_zeroed.s0.y159.us.us, 1
  %.not715.us.us = icmp eq i32 %3787, %6
  br i1 %.not715.us.us, label %"produce sum_filter174", label %"for filter_zeroed.s0.y157.us.us"

"for filter_zeroed.s0.y157.us":                   ; preds = %"for filter_zeroed.s0.y157.us.preheader", %"end for filter_zeroed.s0.x161.loopexit.split.us4796"
  %filter_zeroed.s0.y159.us = phi i32 [ %3916, %"end for filter_zeroed.s0.x161.loopexit.split.us4796" ], [ 0, %"for filter_zeroed.s0.y157.us.preheader" ]
  %3788 = mul nsw i32 %filter_zeroed.s0.y159.us, %7
  %3789 = mul nsw i32 %filter_zeroed.s0.y159.us, %4
  br i1 %3550, label %"end for filter_zeroed.s0.x161.loopexit.split.us4796.unr-lcssa", label %"for filter_zeroed.s0.x160.us4793"

"for filter_zeroed.s0.x160.us4793":               ; preds = %"for filter_zeroed.s0.y157.us", %"for filter_zeroed.s0.x160.us4793"
  %filter_zeroed.s0.x162.us4794 = phi i32 [ %3901, %"for filter_zeroed.s0.x160.us4793" ], [ 0, %"for filter_zeroed.s0.y157.us" ]
  %niter = phi i32 [ %niter.nsub.7, %"for filter_zeroed.s0.x160.us4793" ], [ %unroll_iter, %"for filter_zeroed.s0.y157.us" ]
  %3790 = mul nsw i32 %filter_zeroed.s0.x162.us4794, %5
  %3791 = add nsw i32 %3790, %3788
  %3792 = getelementptr inbounds i8, i8* %1, i32 %3791
  %3793 = bitcast i8* %3792 to <64 x i8>*
  %3794 = load <64 x i8>, <64 x i8>* %3793, align 1, !tbaa !102
  %3795 = zext <64 x i8> %3794 to <64 x i16>
  %3796 = bitcast <64 x i16> %3795 to <32 x i32>
  %3797 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3796, <32 x i32> %3547) #11
  %3798 = bitcast <32 x i32> %3797 to <64 x i16>
  %3799 = add nsw i32 %filter_zeroed.s0.x162.us4794, %3789
  %3800 = shl nsw i32 %3799, 7
  %3801 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3800
  %3802 = bitcast i16* %3801 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3798, <64 x i16>* %3802, i32 128, <64 x i1> %3543), !tbaa !105
  %3803 = or i32 %filter_zeroed.s0.x162.us4794, 1
  %3804 = mul nsw i32 %3803, %5
  %3805 = add nsw i32 %3804, %3788
  %3806 = getelementptr inbounds i8, i8* %1, i32 %3805
  %3807 = bitcast i8* %3806 to <64 x i8>*
  %3808 = load <64 x i8>, <64 x i8>* %3807, align 1, !tbaa !102
  %3809 = zext <64 x i8> %3808 to <64 x i16>
  %3810 = bitcast <64 x i16> %3809 to <32 x i32>
  %3811 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3810, <32 x i32> %3547) #11
  %3812 = bitcast <32 x i32> %3811 to <64 x i16>
  %3813 = add nsw i32 %3803, %3789
  %3814 = shl nsw i32 %3813, 7
  %3815 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3814
  %3816 = bitcast i16* %3815 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3812, <64 x i16>* %3816, i32 128, <64 x i1> %3543), !tbaa !105
  %3817 = or i32 %filter_zeroed.s0.x162.us4794, 2
  %3818 = mul nsw i32 %3817, %5
  %3819 = add nsw i32 %3818, %3788
  %3820 = getelementptr inbounds i8, i8* %1, i32 %3819
  %3821 = bitcast i8* %3820 to <64 x i8>*
  %3822 = load <64 x i8>, <64 x i8>* %3821, align 1, !tbaa !102
  %3823 = zext <64 x i8> %3822 to <64 x i16>
  %3824 = bitcast <64 x i16> %3823 to <32 x i32>
  %3825 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3824, <32 x i32> %3547) #11
  %3826 = bitcast <32 x i32> %3825 to <64 x i16>
  %3827 = add nsw i32 %3817, %3789
  %3828 = shl nsw i32 %3827, 7
  %3829 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3828
  %3830 = bitcast i16* %3829 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3826, <64 x i16>* %3830, i32 128, <64 x i1> %3543), !tbaa !105
  %3831 = or i32 %filter_zeroed.s0.x162.us4794, 3
  %3832 = mul nsw i32 %3831, %5
  %3833 = add nsw i32 %3832, %3788
  %3834 = getelementptr inbounds i8, i8* %1, i32 %3833
  %3835 = bitcast i8* %3834 to <64 x i8>*
  %3836 = load <64 x i8>, <64 x i8>* %3835, align 1, !tbaa !102
  %3837 = zext <64 x i8> %3836 to <64 x i16>
  %3838 = bitcast <64 x i16> %3837 to <32 x i32>
  %3839 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3838, <32 x i32> %3547) #11
  %3840 = bitcast <32 x i32> %3839 to <64 x i16>
  %3841 = add nsw i32 %3831, %3789
  %3842 = shl nsw i32 %3841, 7
  %3843 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3842
  %3844 = bitcast i16* %3843 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3840, <64 x i16>* %3844, i32 128, <64 x i1> %3543), !tbaa !105
  %3845 = or i32 %filter_zeroed.s0.x162.us4794, 4
  %3846 = mul nsw i32 %3845, %5
  %3847 = add nsw i32 %3846, %3788
  %3848 = getelementptr inbounds i8, i8* %1, i32 %3847
  %3849 = bitcast i8* %3848 to <64 x i8>*
  %3850 = load <64 x i8>, <64 x i8>* %3849, align 1, !tbaa !102
  %3851 = zext <64 x i8> %3850 to <64 x i16>
  %3852 = bitcast <64 x i16> %3851 to <32 x i32>
  %3853 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3852, <32 x i32> %3547) #11
  %3854 = bitcast <32 x i32> %3853 to <64 x i16>
  %3855 = add nsw i32 %3845, %3789
  %3856 = shl nsw i32 %3855, 7
  %3857 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3856
  %3858 = bitcast i16* %3857 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3854, <64 x i16>* %3858, i32 128, <64 x i1> %3543), !tbaa !105
  %3859 = or i32 %filter_zeroed.s0.x162.us4794, 5
  %3860 = mul nsw i32 %3859, %5
  %3861 = add nsw i32 %3860, %3788
  %3862 = getelementptr inbounds i8, i8* %1, i32 %3861
  %3863 = bitcast i8* %3862 to <64 x i8>*
  %3864 = load <64 x i8>, <64 x i8>* %3863, align 1, !tbaa !102
  %3865 = zext <64 x i8> %3864 to <64 x i16>
  %3866 = bitcast <64 x i16> %3865 to <32 x i32>
  %3867 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3866, <32 x i32> %3547) #11
  %3868 = bitcast <32 x i32> %3867 to <64 x i16>
  %3869 = add nsw i32 %3859, %3789
  %3870 = shl nsw i32 %3869, 7
  %3871 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3870
  %3872 = bitcast i16* %3871 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3868, <64 x i16>* %3872, i32 128, <64 x i1> %3543), !tbaa !105
  %3873 = or i32 %filter_zeroed.s0.x162.us4794, 6
  %3874 = mul nsw i32 %3873, %5
  %3875 = add nsw i32 %3874, %3788
  %3876 = getelementptr inbounds i8, i8* %1, i32 %3875
  %3877 = bitcast i8* %3876 to <64 x i8>*
  %3878 = load <64 x i8>, <64 x i8>* %3877, align 1, !tbaa !102
  %3879 = zext <64 x i8> %3878 to <64 x i16>
  %3880 = bitcast <64 x i16> %3879 to <32 x i32>
  %3881 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3880, <32 x i32> %3547) #11
  %3882 = bitcast <32 x i32> %3881 to <64 x i16>
  %3883 = add nsw i32 %3873, %3789
  %3884 = shl nsw i32 %3883, 7
  %3885 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3884
  %3886 = bitcast i16* %3885 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3882, <64 x i16>* %3886, i32 128, <64 x i1> %3543), !tbaa !105
  %3887 = or i32 %filter_zeroed.s0.x162.us4794, 7
  %3888 = mul nsw i32 %3887, %5
  %3889 = add nsw i32 %3888, %3788
  %3890 = getelementptr inbounds i8, i8* %1, i32 %3889
  %3891 = bitcast i8* %3890 to <64 x i8>*
  %3892 = load <64 x i8>, <64 x i8>* %3891, align 1, !tbaa !102
  %3893 = zext <64 x i8> %3892 to <64 x i16>
  %3894 = bitcast <64 x i16> %3893 to <32 x i32>
  %3895 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3894, <32 x i32> %3547) #11
  %3896 = bitcast <32 x i32> %3895 to <64 x i16>
  %3897 = add nsw i32 %3887, %3789
  %3898 = shl nsw i32 %3897, 7
  %3899 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3898
  %3900 = bitcast i16* %3899 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3896, <64 x i16>* %3900, i32 128, <64 x i1> %3543), !tbaa !105
  %3901 = add nuw nsw i32 %filter_zeroed.s0.x162.us4794, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for filter_zeroed.s0.x161.loopexit.split.us4796.unr-lcssa", label %"for filter_zeroed.s0.x160.us4793"

"end for filter_zeroed.s0.x161.loopexit.split.us4796.unr-lcssa": ; preds = %"for filter_zeroed.s0.x160.us4793", %"for filter_zeroed.s0.y157.us"
  %filter_zeroed.s0.x162.us4794.unr = phi i32 [ 0, %"for filter_zeroed.s0.y157.us" ], [ %3901, %"for filter_zeroed.s0.x160.us4793" ]
  br i1 %lcmp.mod.not, label %"end for filter_zeroed.s0.x161.loopexit.split.us4796", label %"for filter_zeroed.s0.x160.us4793.epil"

"for filter_zeroed.s0.x160.us4793.epil":          ; preds = %"end for filter_zeroed.s0.x161.loopexit.split.us4796.unr-lcssa", %"for filter_zeroed.s0.x160.us4793.epil"
  %filter_zeroed.s0.x162.us4794.epil = phi i32 [ %3915, %"for filter_zeroed.s0.x160.us4793.epil" ], [ %filter_zeroed.s0.x162.us4794.unr, %"end for filter_zeroed.s0.x161.loopexit.split.us4796.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for filter_zeroed.s0.x160.us4793.epil" ], [ %xtraiter, %"end for filter_zeroed.s0.x161.loopexit.split.us4796.unr-lcssa" ]
  %3902 = mul nsw i32 %filter_zeroed.s0.x162.us4794.epil, %5
  %3903 = add nsw i32 %3902, %3788
  %3904 = getelementptr inbounds i8, i8* %1, i32 %3903
  %3905 = bitcast i8* %3904 to <64 x i8>*
  %3906 = load <64 x i8>, <64 x i8>* %3905, align 1, !tbaa !102
  %3907 = zext <64 x i8> %3906 to <64 x i16>
  %3908 = bitcast <64 x i16> %3907 to <32 x i32>
  %3909 = call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %3908, <32 x i32> %3547) #11
  %3910 = bitcast <32 x i32> %3909 to <64 x i16>
  %3911 = add nsw i32 %filter_zeroed.s0.x162.us4794.epil, %3789
  %3912 = shl nsw i32 %3911, 7
  %3913 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3912
  %3914 = bitcast i16* %3913 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3910, <64 x i16>* %3914, i32 128, <64 x i1> %3543), !tbaa !105
  %3915 = add nuw nsw i32 %filter_zeroed.s0.x162.us4794.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for filter_zeroed.s0.x161.loopexit.split.us4796", label %"for filter_zeroed.s0.x160.us4793.epil", !llvm.loop !206

"end for filter_zeroed.s0.x161.loopexit.split.us4796": ; preds = %"for filter_zeroed.s0.x160.us4793.epil", %"end for filter_zeroed.s0.x161.loopexit.split.us4796.unr-lcssa"
  %3916 = add nuw nsw i32 %filter_zeroed.s0.y159.us, 1
  %.not715.us = icmp eq i32 %3916, %6
  br i1 %.not715.us, label %"produce sum_filter174", label %"for filter_zeroed.s0.y157.us"

"produce sum_filter174":                          ; preds = %"end for filter_zeroed.s0.x161.loopexit.split.us4796", %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us4801.us", %"end for filter_zeroed.s0.x161.loopexit.split.us.split.us.us.us.us", %"for filter_zeroed.s0.y157.preheader", %"produce filter_zeroed156"
  %3917 = insertelement <128 x i32> undef, i32 %3, i32 0
  %3918 = shufflevector <128 x i32> %3917, <128 x i32> undef, <128 x i32> zeroinitializer
  %3919 = icmp sgt <128 x i32> %3918, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3920 = bitcast [128 x i32]* %sum_filter701 to <32 x i32>*
  %3921 = shufflevector <128 x i1> %3919, <128 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  %3922 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 32
  %3923 = bitcast i32* %3922 to <32 x i32>*
  %3924 = shufflevector <128 x i1> %3919, <128 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  %3925 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 64
  %3926 = bitcast i32* %3925 to <32 x i32>*
  %3927 = shufflevector <128 x i1> %3919, <128 x i1> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  %3928 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter701, i32 0, i32 96
  %3929 = bitcast i32* %3928 to <32 x i32>*
  %3930 = shufflevector <128 x i1> %3919, <128 x i1> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %brmerge5108.demorgan = and i1 %3531, %3530
  br i1 %brmerge5108.demorgan, label %"for sum_filter.s1.r19$y175.preheader.split.us", label %"consume sum_filter199", !prof !207

"for sum_filter.s1.r19$y175.preheader.split.us":  ; preds = %"produce sum_filter174"
  %3931 = zext <128 x i1> %3919 to <128 x i8>
  %3932 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %3931) #9
  %3933 = and i8 %3932, 1
  %t2486.not.us = icmp eq i8 %3933, 0
  br i1 %t2486.not.us, label %"for sum_filter.s1.r19$y175.preheader.split.us.split.us", label %"for sum_filter.s1.r19$y175.us.preheader"

"for sum_filter.s1.r19$y175.us.preheader":        ; preds = %"for sum_filter.s1.r19$y175.preheader.split.us"
  %3934 = add i32 %4, -1
  %xtraiter5209 = and i32 %4, 3
  %3935 = icmp ult i32 %3934, 3
  %unroll_iter5212 = and i32 %4, -4
  %lcmp.mod5211.not = icmp eq i32 %xtraiter5209, 0
  br label %"for sum_filter.s1.r19$y175.us"

"for sum_filter.s1.r19$y175.preheader.split.us.split.us": ; preds = %"for sum_filter.s1.r19$y175.preheader.split.us"
  %3936 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer) #11
  %3937 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> zeroinitializer, <32 x i32> zeroinitializer, <32 x i32> %3936) #11
  %3938 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer) #11
  %3939 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %3938, <32 x i32> zeroinitializer) #11
  %3940 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3937)
  %3941 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3937)
  %3942 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3939)
  %3943 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3939)
  %3944 = add i32 %4, -1
  %xtraiter5214 = and i32 %4, 7
  %3945 = icmp ult i32 %3944, 7
  %unroll_iter5217 = and i32 %4, -8
  %lcmp.mod5216.not = icmp eq i32 %xtraiter5214, 0
  br label %"for sum_filter.s1.r19$y175.us.us"

"for sum_filter.s1.r19$y175.us.us":               ; preds = %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us", %"for sum_filter.s1.r19$y175.preheader.split.us.split.us"
  %"sum_filter.s1.r19$y177.us.us" = phi i32 [ %3946, %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us" ], [ 0, %"for sum_filter.s1.r19$y175.preheader.split.us.split.us" ]
  br i1 %3945, label %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x178.us.us.us"

"for sum_filter.s1.r19$x178.us.us.us":            ; preds = %"for sum_filter.s1.r19$y175.us.us", %"for sum_filter.s1.r19$x178.us.us.us"
  %niter5218 = phi i32 [ %niter5218.nsub.7, %"for sum_filter.s1.r19$x178.us.us.us" ], [ %unroll_iter5217, %"for sum_filter.s1.r19$y175.us.us" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %niter5218.nsub.7 = add i32 %niter5218, -8
  %niter5218.ncmp.7 = icmp eq i32 %niter5218.nsub.7, 0
  br i1 %niter5218.ncmp.7, label %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x178.us.us.us"

"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x178.us.us.us", %"for sum_filter.s1.r19$y175.us.us"
  br i1 %lcmp.mod5216.not, label %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x178.us.us.us.epil"

"for sum_filter.s1.r19$x178.us.us.us.epil":       ; preds = %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us.unr-lcssa", %"for sum_filter.s1.r19$x178.us.us.us.epil"
  %epil.iter5215 = phi i32 [ %epil.iter5215.sub, %"for sum_filter.s1.r19$x178.us.us.us.epil" ], [ %xtraiter5214, %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us.unr-lcssa" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3940, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3941, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3942, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3943, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %epil.iter5215.sub = add i32 %epil.iter5215, -1
  %epil.iter5215.cmp.not = icmp eq i32 %epil.iter5215.sub, 0
  br i1 %epil.iter5215.cmp.not, label %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x178.us.us.us.epil", !llvm.loop !208

"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us": ; preds = %"for sum_filter.s1.r19$x178.us.us.us.epil", %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us.unr-lcssa"
  %3946 = add nuw nsw i32 %"sum_filter.s1.r19$y177.us.us", 1
  %.not713.us.us = icmp eq i32 %3946, %6
  br i1 %.not713.us.us, label %"consume sum_filter199", label %"for sum_filter.s1.r19$y175.us.us"

"for sum_filter.s1.r19$y175.us":                  ; preds = %"for sum_filter.s1.r19$y175.us.preheader", %"end for sum_filter.s1.r19$x179.loopexit.split.us4806"
  %"sum_filter.s1.r19$y177.us" = phi i32 [ %4108, %"end for sum_filter.s1.r19$x179.loopexit.split.us4806" ], [ 0, %"for sum_filter.s1.r19$y175.us.preheader" ]
  %3947 = mul nsw i32 %"sum_filter.s1.r19$y177.us", %4
  br i1 %3935, label %"end for sum_filter.s1.r19$x179.loopexit.split.us4806.unr-lcssa", label %"for sum_filter.s1.r19$x178.us4803"

"for sum_filter.s1.r19$x178.us4803":              ; preds = %"for sum_filter.s1.r19$y175.us", %"for sum_filter.s1.r19$x178.us4803"
  %"sum_filter.s1.r19$x180.us4804" = phi i32 [ %4075, %"for sum_filter.s1.r19$x178.us4803" ], [ 0, %"for sum_filter.s1.r19$y175.us" ]
  %niter5213 = phi i32 [ %niter5213.nsub.3, %"for sum_filter.s1.r19$x178.us4803" ], [ %unroll_iter5212, %"for sum_filter.s1.r19$y175.us" ]
  %3948 = load <32 x i32>, <32 x i32>* %3920, align 128, !tbaa !111
  %3949 = load <32 x i32>, <32 x i32>* %3923, align 128, !tbaa !119
  %3950 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3949, <32 x i32> %3948)
  %3951 = shufflevector <64 x i32> %3950, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3952 = bitcast <128 x i32> %3951 to <64 x i64>
  %3953 = shufflevector <64 x i64> %3952, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3954 = bitcast <32 x i64> %3953 to <64 x i32>
  %3955 = add nsw i32 %"sum_filter.s1.r19$x180.us4804", %3947
  %3956 = shl nsw i32 %3955, 7
  %3957 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3956
  %3958 = bitcast i16* %3957 to <32 x i32>*
  %3959 = load <32 x i32>, <32 x i32>* %3958, align 128, !tbaa !105
  %3960 = getelementptr inbounds i16, i16* %3957, i32 64
  %3961 = bitcast i16* %3960 to <32 x i32>*
  %3962 = load <32 x i32>, <32 x i32>* %3961, align 128, !tbaa !105
  %3963 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3962, <32 x i32> %3959)
  %3964 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3963) #11
  %3965 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %3954, <32 x i32> zeroinitializer, <32 x i32> %3964) #11
  %3966 = load <32 x i32>, <32 x i32>* %3926, align 128, !tbaa !121
  %3967 = load <32 x i32>, <32 x i32>* %3929, align 128, !tbaa !124
  %3968 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3967, <32 x i32> %3966)
  %3969 = shufflevector <64 x i32> %3968, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3970 = bitcast <128 x i32> %3969 to <64 x i64>
  %3971 = shufflevector <64 x i64> %3970, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3972 = bitcast <32 x i64> %3971 to <64 x i32>
  %3973 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3963) #11
  %3974 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %3972, <32 x i32> %3973, <32 x i32> zeroinitializer) #11
  %3975 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3965)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3975, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  %3976 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3965)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3976, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  %3977 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3974)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3977, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  %3978 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3974)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %3978, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %3979 = or i32 %"sum_filter.s1.r19$x180.us4804", 1
  %3980 = load <32 x i32>, <32 x i32>* %3920, align 128, !tbaa !111
  %3981 = load <32 x i32>, <32 x i32>* %3923, align 128, !tbaa !119
  %3982 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3981, <32 x i32> %3980)
  %3983 = shufflevector <64 x i32> %3982, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3984 = bitcast <128 x i32> %3983 to <64 x i64>
  %3985 = shufflevector <64 x i64> %3984, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3986 = bitcast <32 x i64> %3985 to <64 x i32>
  %3987 = add nsw i32 %3979, %3947
  %3988 = shl nsw i32 %3987, 7
  %3989 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %3988
  %3990 = bitcast i16* %3989 to <32 x i32>*
  %3991 = load <32 x i32>, <32 x i32>* %3990, align 128, !tbaa !105
  %3992 = getelementptr inbounds i16, i16* %3989, i32 64
  %3993 = bitcast i16* %3992 to <32 x i32>*
  %3994 = load <32 x i32>, <32 x i32>* %3993, align 128, !tbaa !105
  %3995 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3994, <32 x i32> %3991)
  %3996 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3995) #11
  %3997 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %3986, <32 x i32> zeroinitializer, <32 x i32> %3996) #11
  %3998 = load <32 x i32>, <32 x i32>* %3926, align 128, !tbaa !121
  %3999 = load <32 x i32>, <32 x i32>* %3929, align 128, !tbaa !124
  %4000 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3999, <32 x i32> %3998)
  %4001 = shufflevector <64 x i32> %4000, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4002 = bitcast <128 x i32> %4001 to <64 x i64>
  %4003 = shufflevector <64 x i64> %4002, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4004 = bitcast <32 x i64> %4003 to <64 x i32>
  %4005 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3995) #11
  %4006 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %4004, <32 x i32> %4005, <32 x i32> zeroinitializer) #11
  %4007 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3997)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4007, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  %4008 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3997)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4008, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  %4009 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4006)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4009, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  %4010 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4006)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4010, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %4011 = or i32 %"sum_filter.s1.r19$x180.us4804", 2
  %4012 = load <32 x i32>, <32 x i32>* %3920, align 128, !tbaa !111
  %4013 = load <32 x i32>, <32 x i32>* %3923, align 128, !tbaa !119
  %4014 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4013, <32 x i32> %4012)
  %4015 = shufflevector <64 x i32> %4014, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4016 = bitcast <128 x i32> %4015 to <64 x i64>
  %4017 = shufflevector <64 x i64> %4016, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4018 = bitcast <32 x i64> %4017 to <64 x i32>
  %4019 = add nsw i32 %4011, %3947
  %4020 = shl nsw i32 %4019, 7
  %4021 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %4020
  %4022 = bitcast i16* %4021 to <32 x i32>*
  %4023 = load <32 x i32>, <32 x i32>* %4022, align 128, !tbaa !105
  %4024 = getelementptr inbounds i16, i16* %4021, i32 64
  %4025 = bitcast i16* %4024 to <32 x i32>*
  %4026 = load <32 x i32>, <32 x i32>* %4025, align 128, !tbaa !105
  %4027 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4026, <32 x i32> %4023)
  %4028 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4027) #11
  %4029 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %4018, <32 x i32> zeroinitializer, <32 x i32> %4028) #11
  %4030 = load <32 x i32>, <32 x i32>* %3926, align 128, !tbaa !121
  %4031 = load <32 x i32>, <32 x i32>* %3929, align 128, !tbaa !124
  %4032 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4031, <32 x i32> %4030)
  %4033 = shufflevector <64 x i32> %4032, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4034 = bitcast <128 x i32> %4033 to <64 x i64>
  %4035 = shufflevector <64 x i64> %4034, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4036 = bitcast <32 x i64> %4035 to <64 x i32>
  %4037 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4027) #11
  %4038 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %4036, <32 x i32> %4037, <32 x i32> zeroinitializer) #11
  %4039 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4029)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4039, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  %4040 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4029)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4040, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  %4041 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4038)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4041, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  %4042 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4038)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4042, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %4043 = or i32 %"sum_filter.s1.r19$x180.us4804", 3
  %4044 = load <32 x i32>, <32 x i32>* %3920, align 128, !tbaa !111
  %4045 = load <32 x i32>, <32 x i32>* %3923, align 128, !tbaa !119
  %4046 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4045, <32 x i32> %4044)
  %4047 = shufflevector <64 x i32> %4046, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4048 = bitcast <128 x i32> %4047 to <64 x i64>
  %4049 = shufflevector <64 x i64> %4048, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4050 = bitcast <32 x i64> %4049 to <64 x i32>
  %4051 = add nsw i32 %4043, %3947
  %4052 = shl nsw i32 %4051, 7
  %4053 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %4052
  %4054 = bitcast i16* %4053 to <32 x i32>*
  %4055 = load <32 x i32>, <32 x i32>* %4054, align 128, !tbaa !105
  %4056 = getelementptr inbounds i16, i16* %4053, i32 64
  %4057 = bitcast i16* %4056 to <32 x i32>*
  %4058 = load <32 x i32>, <32 x i32>* %4057, align 128, !tbaa !105
  %4059 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4058, <32 x i32> %4055)
  %4060 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4059) #11
  %4061 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %4050, <32 x i32> zeroinitializer, <32 x i32> %4060) #11
  %4062 = load <32 x i32>, <32 x i32>* %3926, align 128, !tbaa !121
  %4063 = load <32 x i32>, <32 x i32>* %3929, align 128, !tbaa !124
  %4064 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4063, <32 x i32> %4062)
  %4065 = shufflevector <64 x i32> %4064, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4066 = bitcast <128 x i32> %4065 to <64 x i64>
  %4067 = shufflevector <64 x i64> %4066, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4068 = bitcast <32 x i64> %4067 to <64 x i32>
  %4069 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4059) #11
  %4070 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %4068, <32 x i32> %4069, <32 x i32> zeroinitializer) #11
  %4071 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4061)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4071, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  %4072 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4061)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4072, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  %4073 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4070)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4073, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  %4074 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4070)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4074, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %4075 = add nuw nsw i32 %"sum_filter.s1.r19$x180.us4804", 4
  %niter5213.nsub.3 = add i32 %niter5213, -4
  %niter5213.ncmp.3 = icmp eq i32 %niter5213.nsub.3, 0
  br i1 %niter5213.ncmp.3, label %"end for sum_filter.s1.r19$x179.loopexit.split.us4806.unr-lcssa", label %"for sum_filter.s1.r19$x178.us4803"

"end for sum_filter.s1.r19$x179.loopexit.split.us4806.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x178.us4803", %"for sum_filter.s1.r19$y175.us"
  %"sum_filter.s1.r19$x180.us4804.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y175.us" ], [ %4075, %"for sum_filter.s1.r19$x178.us4803" ]
  br i1 %lcmp.mod5211.not, label %"end for sum_filter.s1.r19$x179.loopexit.split.us4806", label %"for sum_filter.s1.r19$x178.us4803.epil"

"for sum_filter.s1.r19$x178.us4803.epil":         ; preds = %"end for sum_filter.s1.r19$x179.loopexit.split.us4806.unr-lcssa", %"for sum_filter.s1.r19$x178.us4803.epil"
  %"sum_filter.s1.r19$x180.us4804.epil" = phi i32 [ %4107, %"for sum_filter.s1.r19$x178.us4803.epil" ], [ %"sum_filter.s1.r19$x180.us4804.unr", %"end for sum_filter.s1.r19$x179.loopexit.split.us4806.unr-lcssa" ]
  %epil.iter5210 = phi i32 [ %epil.iter5210.sub, %"for sum_filter.s1.r19$x178.us4803.epil" ], [ %xtraiter5209, %"end for sum_filter.s1.r19$x179.loopexit.split.us4806.unr-lcssa" ]
  %4076 = load <32 x i32>, <32 x i32>* %3920, align 128, !tbaa !111
  %4077 = load <32 x i32>, <32 x i32>* %3923, align 128, !tbaa !119
  %4078 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4077, <32 x i32> %4076)
  %4079 = shufflevector <64 x i32> %4078, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4080 = bitcast <128 x i32> %4079 to <64 x i64>
  %4081 = shufflevector <64 x i64> %4080, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4082 = bitcast <32 x i64> %4081 to <64 x i32>
  %4083 = add nsw i32 %"sum_filter.s1.r19$x180.us4804.epil", %3947
  %4084 = shl nsw i32 %4083, 7
  %4085 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %4084
  %4086 = bitcast i16* %4085 to <32 x i32>*
  %4087 = load <32 x i32>, <32 x i32>* %4086, align 128, !tbaa !105
  %4088 = getelementptr inbounds i16, i16* %4085, i32 64
  %4089 = bitcast i16* %4088 to <32 x i32>*
  %4090 = load <32 x i32>, <32 x i32>* %4089, align 128, !tbaa !105
  %4091 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4090, <32 x i32> %4087)
  %4092 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4091) #11
  %4093 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %4082, <32 x i32> zeroinitializer, <32 x i32> %4092) #11
  %4094 = load <32 x i32>, <32 x i32>* %3926, align 128, !tbaa !121
  %4095 = load <32 x i32>, <32 x i32>* %3929, align 128, !tbaa !124
  %4096 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4095, <32 x i32> %4094)
  %4097 = shufflevector <64 x i32> %4096, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4098 = bitcast <128 x i32> %4097 to <64 x i64>
  %4099 = shufflevector <64 x i64> %4098, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4100 = bitcast <32 x i64> %4099 to <64 x i32>
  %4101 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4091) #11
  %4102 = call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %4100, <32 x i32> %4101, <32 x i32> zeroinitializer) #11
  %4103 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4093)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4103, <32 x i32>* nonnull %3920, i32 128, <32 x i1> %3921), !tbaa !111
  %4104 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4093)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4104, <32 x i32>* nonnull %3923, i32 128, <32 x i1> %3924), !tbaa !119
  %4105 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4102)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4105, <32 x i32>* nonnull %3926, i32 128, <32 x i1> %3927), !tbaa !121
  %4106 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4102)
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4106, <32 x i32>* nonnull %3929, i32 128, <32 x i1> %3930), !tbaa !124
  %4107 = add nuw nsw i32 %"sum_filter.s1.r19$x180.us4804.epil", 1
  %epil.iter5210.sub = add i32 %epil.iter5210, -1
  %epil.iter5210.cmp.not = icmp eq i32 %epil.iter5210.sub, 0
  br i1 %epil.iter5210.cmp.not, label %"end for sum_filter.s1.r19$x179.loopexit.split.us4806", label %"for sum_filter.s1.r19$x178.us4803.epil", !llvm.loop !209

"end for sum_filter.s1.r19$x179.loopexit.split.us4806": ; preds = %"for sum_filter.s1.r19$x178.us4803.epil", %"end for sum_filter.s1.r19$x179.loopexit.split.us4806.unr-lcssa"
  %4108 = add nuw nsw i32 %"sum_filter.s1.r19$y177.us", 1
  %.not713.us = icmp eq i32 %4108, %6
  br i1 %.not713.us, label %"consume sum_filter199", label %"for sum_filter.s1.r19$y175.us"

"consume sum_filter199":                          ; preds = %"end for sum_filter.s1.r19$x179.loopexit.split.us4806", %"end for sum_filter.s1.r19$x179.loopexit.split.us.us.us", %"produce sum_filter174"
  %4109 = zext <128 x i1> %3919 to <128 x i8>
  %4110 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %4109) #9
  %4111 = and i8 %4110, 1
  %t2487.not = icmp eq i8 %4111, 0
  br i1 %t2487.not, label %after_bb211, label %true_bb206

true_bb206:                                       ; preds = %"consume sum_filter199"
  %4112 = bitcast i8* %0 to <32 x i32>*
  %4113 = load <32 x i32>, <32 x i32>* %4112, align 4, !tbaa !210
  %4114 = getelementptr inbounds i8, i8* %0, i32 128
  %4115 = bitcast i8* %4114 to <32 x i32>*
  %4116 = load <32 x i32>, <32 x i32>* %4115, align 4, !tbaa !217
  %4117 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4116, <32 x i32> %4113)
  %4118 = shufflevector <64 x i32> %4117, <64 x i32> poison, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4119 = bitcast <128 x i32> %4118 to <64 x i64>
  %4120 = shufflevector <64 x i64> %4119, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4121 = bitcast <32 x i64> %4120 to <64 x i32>
  %4122 = load <32 x i32>, <32 x i32>* %3920, align 128, !tbaa !111
  %4123 = load <32 x i32>, <32 x i32>* %3923, align 128, !tbaa !119
  %4124 = load <32 x i32>, <32 x i32>* %3926, align 128, !tbaa !121
  %4125 = load <32 x i32>, <32 x i32>* %3929, align 128, !tbaa !124
  %4126 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4123, <32 x i32> %4122)
  %4127 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4125, <32 x i32> %4124)
  %4128 = shufflevector <64 x i32> %4126, <64 x i32> %4127, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast = bitcast <128 x i32> %4128 to <64 x i64>
  br label %after_bb211

after_bb211:                                      ; preds = %"consume sum_filter199", %true_bb206
  %4129 = phi <64 x i32> [ %4121, %true_bb206 ], [ zeroinitializer, %"consume sum_filter199" ]
  %4130 = phi <64 x i64> [ %phi.cast, %true_bb206 ], [ zeroinitializer, %"consume sum_filter199" ]
  %4131 = shufflevector <64 x i64> %4130, <64 x i64> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4132 = bitcast <32 x i64> %4131 to <64 x i32>
  %4133 = zext i8 %input_zero to i32
  %4134 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4133) #11
  %4135 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4132) #11
  %4136 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4134, <32 x i32> %4135) #11
  %4137 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4136, <32 x i32> %4134, <32 x i32> %4135) #11
  %4138 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4132) #11
  %4139 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4134, <32 x i32> %4138) #11
  %4140 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4139, <32 x i32> %4134, <32 x i32> %4138) #11
  %4141 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4137, <32 x i32> %4140) #11
  %4142 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %4129, <64 x i32> %4141) #11
  br i1 %t2487.not, label %after_bb223, label %true_bb218

true_bb218:                                       ; preds = %after_bb211
  %4143 = getelementptr inbounds i8, i8* %0, i32 256
  %4144 = bitcast i8* %4143 to <32 x i32>*
  %4145 = load <32 x i32>, <32 x i32>* %4144, align 4, !tbaa !219
  %4146 = getelementptr inbounds i8, i8* %0, i32 384
  %4147 = bitcast i8* %4146 to <32 x i32>*
  %4148 = load <32 x i32>, <32 x i32>* %4147, align 4, !tbaa !222
  %4149 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4148, <32 x i32> %4145)
  %4150 = shufflevector <64 x i32> %4149, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4151 = bitcast <128 x i32> %4150 to <64 x i64>
  %4152 = shufflevector <64 x i64> %4151, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4153 = bitcast <32 x i64> %4152 to <64 x i32>
  %4154 = load <32 x i32>, <32 x i32>* %3920, align 128, !tbaa !111
  %4155 = load <32 x i32>, <32 x i32>* %3923, align 128, !tbaa !119
  %4156 = load <32 x i32>, <32 x i32>* %3926, align 128, !tbaa !121
  %4157 = load <32 x i32>, <32 x i32>* %3929, align 128, !tbaa !124
  %4158 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4155, <32 x i32> %4154)
  %4159 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4157, <32 x i32> %4156)
  %4160 = shufflevector <64 x i32> %4158, <64 x i32> %4159, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %phi.cast5053 = bitcast <128 x i32> %4160 to <64 x i64>
  br label %after_bb223

after_bb223:                                      ; preds = %after_bb211, %true_bb218
  %4161 = phi <64 x i32> [ %4153, %true_bb218 ], [ zeroinitializer, %after_bb211 ]
  %4162 = phi <64 x i64> [ %phi.cast5053, %true_bb218 ], [ zeroinitializer, %after_bb211 ]
  %4163 = shufflevector <64 x i64> %4162, <64 x i64> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4164 = bitcast <32 x i64> %4163 to <64 x i32>
  %4165 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4164) #11
  %4166 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4134, <32 x i32> %4165) #11
  %4167 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4166, <32 x i32> %4134, <32 x i32> %4165) #11
  %4168 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4164) #11
  %4169 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4134, <32 x i32> %4168) #11
  %4170 = call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %4169, <32 x i32> %4134, <32 x i32> %4168) #11
  %4171 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4167, <32 x i32> %4170) #11
  %4172 = call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %4161, <64 x i32> %4171) #11
  %4173 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4142)
  %4174 = bitcast [512 x i32]* %offset_c699 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4173, <32 x i32>* nonnull %4174, i32 128, <32 x i1> %3921), !tbaa !131
  %4175 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4142)
  %4176 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 32
  %4177 = bitcast i32* %4176 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4175, <32 x i32>* nonnull %4177, i32 128, <32 x i1> %3924), !tbaa !139
  %4178 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %4172)
  %4179 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 64
  %4180 = bitcast i32* %4179 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4178, <32 x i32>* nonnull %4180, i32 128, <32 x i1> %3927), !tbaa !141
  %4181 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %4172)
  %4182 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c699, i32 0, i32 96
  %4183 = bitcast i32* %4182 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4181, <32 x i32>* nonnull %4183, i32 128, <32 x i1> %3930), !tbaa !144
  %t2427 = icmp slt i32 %a73, 0
  %t2429 = icmp slt i32 %stride_x, 0
  %4184 = add nsw i32 %4, -1
  %4185 = mul nsw i32 %4184, %a73
  %t2430 = select i1 %t2427, i32 %4185, i32 0
  %t2431.s = select i1 %t2429, i32 %20, i32 1
  %t2432 = icmp slt i32 %a68, 0
  %t2434 = icmp slt i32 %stride_y, 0
  %4186 = add nsw i32 %6, -1
  %4187 = mul nsw i32 %4186, %a68
  %t2435 = select i1 %t2432, i32 %4187, i32 0
  %t2436.s = select i1 %t2434, i32 %23, i32 1
  %t2420 = icmp eq i32 %depth_multiplier, 1
  %a68.op = shl i32 %a68, 1
  %4188 = select i1 %t2432, i32 %a68.op, i32 0
  %4189 = select i1 %3529, i32 %4188, i32 %t2435
  %4190 = add i32 %22, -1
  %4191 = add i32 %4190, %t2436.s
  %4192 = mul nsw i32 %4191, %stride_y
  %a73.op = shl i32 %a73, 1
  %4193 = select i1 %t2427, i32 %a73.op, i32 0
  %4194 = select i1 %3529, i32 %4193, i32 %t2430
  %4195 = add i32 %19, -1
  %4196 = add i32 %4195, %t2431.s
  %4197 = mul nsw i32 %4196, %stride_x
  %4198 = select i1 %t2432, i32 0, i32 %4187
  %4199 = add nsw i32 %23, -1
  %4200 = select i1 %t2434, i32 0, i32 %4199
  %4201 = add nsw i32 %4200, %22
  %4202 = mul nsw i32 %4201, %stride_y
  %b67 = add nsw i32 %4202, %4198
  %4203 = select i1 %t2427, i32 0, i32 %4185
  %4204 = add nsw i32 %20, -1
  %4205 = select i1 %t2429, i32 0, i32 %4204
  %4206 = add nsw i32 %4205, %19
  %4207 = mul nsw i32 %4206, %stride_x
  %b72 = add nsw i32 %4207, %4203
  %4208 = mul nsw i32 %13, %12
  %4209 = mul nsw i32 %16, %14
  %4210 = mul nsw i32 %11, %10
  %4211 = add i32 %4208, %4210
  %t2421 = add i32 %4211, %4209
  %4212 = icmp sgt i32 %15, 0
  br i1 %4212, label %"for output.s0.b.rebased226.preheader", label %if.then.i821, !prof !101

"for output.s0.b.rebased226.preheader":           ; preds = %after_bb223
  %b71 = add nsw i32 %4197, %4194
  %b66 = add nsw i32 %4192, %4189
  %a64 = add nsw i32 %4192, %t2435
  %4213 = icmp slt i32 %t2435, %4189
  %resampled_input.y.min_realized = select i1 %4213, i32 %a64, i32 %b66
  %4214 = icmp sgt i32 %a68, 0
  %4215 = select i1 %4214, i32 %a68, i32 0
  %4216 = shl nuw nsw i32 %4215, 1
  %4217 = select i1 %3529, i32 %4216, i32 %4198
  %a65 = add nsw i32 %4202, %4217
  %4218 = icmp sgt i32 %4217, %4198
  %4219 = select i1 %4218, i32 %a65, i32 %b67
  %a77 = sub nsw i32 %4219, %resampled_input.y.min_realized
  %a69 = add nsw i32 %4197, %t2430
  %4220 = icmp slt i32 %t2430, %4194
  %resampled_input.x.min_realized = select i1 %4220, i32 %a69, i32 %b71
  %4221 = icmp sgt i32 %a73, 0
  %4222 = select i1 %4221, i32 %a73, i32 0
  %4223 = shl nuw nsw i32 %4222, 1
  %4224 = select i1 %3529, i32 %4223, i32 %4203
  %a70 = add nsw i32 %4207, %4224
  %4225 = icmp sgt i32 %4224, %4203
  %4226 = select i1 %4225, i32 %a70, i32 %b72
  %a76 = sub nsw i32 %4226, %resampled_input.x.min_realized
  %4227 = icmp sgt i32 %a76, -1
  %t2549 = select i1 %4227, i32 %a76, i32 -1
  %4228 = icmp sgt i32 %a77, -1
  %t2550 = select i1 %4228, i32 %a77, i32 -1
  %4229 = add nsw i32 %t2550, 1
  %4230 = shl i32 %t2549, 7
  %t2551 = add i32 %4230, 128
  %4231 = mul i32 %t2551, %4229
  %4232 = add i32 %4231, 131
  %4233 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2448 = sub nsw i32 %b72, %a69
  %t2447 = sub nsw i32 %b67, %a64
  %4234 = icmp sgt i32 %t2447, -1
  %4235 = sub i32 %a64, %resampled_input.y.min_realized
  %4236 = add nsw i32 %a76, 1
  %4237 = sub i32 %a69, %resampled_input.x.min_realized
  %4238 = icmp sgt i32 %t2448, -1
  %4239 = icmp sgt i32 %3, 1
  %4240 = icmp eq i32 %depth_multiplier, 0
  %t2553 = sext i1 %4240 to i32
  %4241 = sub nsw i32 %depth_multiplier, %t2553
  %4242 = add i32 %4241, 1
  %4243 = icmp ult i32 %4242, 3
  %4244 = select i1 %4243, i32 %4241, i32 0
  %4245 = xor i32 %t2553, -1
  %4246 = and i32 %4244, %4245
  %.not4730 = icmp eq i32 %3, 2
  %4247 = icmp sgt i32 %3, 3
  %.not4731 = icmp eq i32 %3, 4
  %4248 = icmp sgt i32 %3, 5
  %.not4732 = icmp eq i32 %3, 6
  %4249 = icmp sgt i32 %3, 7
  %.not4733 = icmp eq i32 %3, 8
  %4250 = icmp sgt i32 %3, 9
  %.not4734 = icmp eq i32 %3, 10
  %4251 = icmp sgt i32 %3, 11
  %.not4735 = icmp eq i32 %3, 12
  %4252 = icmp sgt i32 %3, 13
  %.not4736 = icmp eq i32 %3, 14
  %4253 = icmp sgt i32 %3, 15
  %.not4737 = icmp eq i32 %3, 16
  %4254 = icmp sgt i32 %3, 17
  %.not4738 = icmp eq i32 %3, 18
  %4255 = icmp sgt i32 %3, 19
  %.not4739 = icmp eq i32 %3, 20
  %4256 = icmp sgt i32 %3, 21
  %.not4740 = icmp eq i32 %3, 22
  %4257 = icmp sgt i32 %3, 23
  %.not4741 = icmp eq i32 %3, 24
  %4258 = icmp sgt i32 %3, 25
  %.not4742 = icmp eq i32 %3, 26
  %4259 = icmp sgt i32 %3, 27
  %.not4743 = icmp eq i32 %3, 28
  %4260 = icmp sgt i32 %3, 29
  %.not4744 = icmp eq i32 %3, 30
  %4261 = icmp sgt i32 %3, 31
  %.not4745 = icmp eq i32 %3, 32
  %4262 = icmp sgt i32 %3, 33
  %.not4746 = icmp eq i32 %3, 34
  %4263 = icmp sgt i32 %3, 35
  %.not4747 = icmp eq i32 %3, 36
  %4264 = icmp sgt i32 %3, 37
  %.not4748 = icmp eq i32 %3, 38
  %4265 = icmp sgt i32 %3, 39
  %.not4749 = icmp eq i32 %3, 40
  %4266 = icmp sgt i32 %3, 41
  %.not4750 = icmp eq i32 %3, 42
  %4267 = icmp sgt i32 %3, 43
  %.not4751 = icmp eq i32 %3, 44
  %4268 = icmp sgt i32 %3, 45
  %.not4752 = icmp eq i32 %3, 46
  %4269 = icmp sgt i32 %3, 47
  %.not4753 = icmp eq i32 %3, 48
  %4270 = icmp sgt i32 %3, 49
  %.not4754 = icmp eq i32 %3, 50
  %4271 = icmp sgt i32 %3, 51
  %.not4755 = icmp eq i32 %3, 52
  %4272 = icmp sgt i32 %3, 53
  %.not4756 = icmp eq i32 %3, 54
  %4273 = icmp sgt i32 %3, 55
  %.not4757 = icmp eq i32 %3, 56
  %4274 = icmp sgt i32 %3, 57
  %.not4758 = icmp eq i32 %3, 58
  %4275 = icmp sgt i32 %3, 59
  %.not4759 = icmp eq i32 %3, 60
  %4276 = icmp sgt i32 %3, 61
  %.not4760 = icmp eq i32 %3, 62
  %.not4699 = icmp eq i32 %3, 65
  %4277 = icmp sgt i32 %3, 66
  %.not4700 = icmp eq i32 %3, 67
  %4278 = icmp sgt i32 %3, 68
  %.not4701 = icmp eq i32 %3, 69
  %4279 = icmp sgt i32 %3, 70
  %.not4702 = icmp eq i32 %3, 71
  %4280 = icmp sgt i32 %3, 72
  %.not4703 = icmp eq i32 %3, 73
  %4281 = icmp sgt i32 %3, 74
  %.not4704 = icmp eq i32 %3, 75
  %4282 = icmp sgt i32 %3, 76
  %.not4705 = icmp eq i32 %3, 77
  %4283 = icmp sgt i32 %3, 78
  %.not4706 = icmp eq i32 %3, 79
  %4284 = icmp sgt i32 %3, 80
  %.not4707 = icmp eq i32 %3, 81
  %4285 = icmp sgt i32 %3, 82
  %.not4708 = icmp eq i32 %3, 83
  %4286 = icmp sgt i32 %3, 84
  %.not4709 = icmp eq i32 %3, 85
  %4287 = icmp sgt i32 %3, 86
  %.not4710 = icmp eq i32 %3, 87
  %4288 = icmp sgt i32 %3, 88
  %.not4711 = icmp eq i32 %3, 89
  %4289 = icmp sgt i32 %3, 90
  %.not4712 = icmp eq i32 %3, 91
  %4290 = icmp sgt i32 %3, 92
  %.not4713 = icmp eq i32 %3, 93
  %4291 = icmp sgt i32 %3, 94
  %.not4714 = icmp eq i32 %3, 95
  %4292 = icmp sgt i32 %3, 96
  %.not4715 = icmp eq i32 %3, 97
  %4293 = icmp sgt i32 %3, 98
  %.not4716 = icmp eq i32 %3, 99
  %4294 = icmp sgt i32 %3, 100
  %.not4717 = icmp eq i32 %3, 101
  %4295 = icmp sgt i32 %3, 102
  %.not4718 = icmp eq i32 %3, 103
  %4296 = icmp sgt i32 %3, 104
  %.not4719 = icmp eq i32 %3, 105
  %4297 = icmp sgt i32 %3, 106
  %.not4720 = icmp eq i32 %3, 107
  %4298 = icmp sgt i32 %3, 108
  %.not4721 = icmp eq i32 %3, 109
  %4299 = icmp sgt i32 %3, 110
  %.not4722 = icmp eq i32 %3, 111
  %4300 = icmp sgt i32 %3, 112
  %.not4723 = icmp eq i32 %3, 113
  %4301 = icmp sgt i32 %3, 114
  %.not4724 = icmp eq i32 %3, 115
  %4302 = icmp sgt i32 %3, 116
  %.not4725 = icmp eq i32 %3, 117
  %4303 = icmp sgt i32 %3, 118
  %.not4726 = icmp eq i32 %3, 119
  %4304 = icmp sgt i32 %3, 120
  %.not4727 = icmp eq i32 %3, 121
  %4305 = icmp sgt i32 %3, 122
  %.not4728 = icmp eq i32 %3, 123
  %4306 = icmp sgt i32 %3, 124
  %.not4729 = icmp eq i32 %3, 125
  %4307 = icmp sgt i32 %3, 126
  %4308 = icmp sgt i32 %23, 0
  %4309 = sub i32 %a68.op, %resampled_input.y.min_realized
  %4310 = sub i32 %a68, %resampled_input.y.min_realized
  %.neg = mul i32 %24, %22
  %.neg4761 = mul i32 %21, %19
  %.neg4762 = mul i32 %25, %14
  %4311 = icmp sgt i32 %20, 0
  %4312 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 768
  %4313 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 1024
  %4314 = bitcast i16* %4313 to <32 x i32>*
  %4315 = sub nsw i32 %a73.op, %resampled_input.x.min_realized
  %4316 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 896
  %4317 = bitcast i16* %4316 to <32 x i32>*
  %4318 = sub nsw i32 %a73, %resampled_input.x.min_realized
  %4319 = bitcast i16* %4312 to <32 x i32>*
  %4320 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 384
  %4321 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 640
  %4322 = bitcast i16* %4321 to <32 x i32>*
  %4323 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 512
  %4324 = bitcast i16* %4323 to <32 x i32>*
  %4325 = bitcast i16* %4320 to <32 x i32>*
  %4326 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 256
  %4327 = bitcast i16* %4326 to <32 x i32>*
  %4328 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 128
  %4329 = bitcast i16* %4328 to <32 x i32>*
  %4330 = bitcast i16* %filter_zeroed155 to <32 x i32>*
  %4331 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 1088
  %4332 = bitcast i16* %4331 to <32 x i32>*
  %4333 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 960
  %4334 = bitcast i16* %4333 to <32 x i32>*
  %4335 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 832
  %4336 = bitcast i16* %4335 to <32 x i32>*
  %4337 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 704
  %4338 = bitcast i16* %4337 to <32 x i32>*
  %4339 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 576
  %4340 = bitcast i16* %4339 to <32 x i32>*
  %4341 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 448
  %4342 = bitcast i16* %4341 to <32 x i32>*
  %4343 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 320
  %4344 = bitcast i16* %4343 to <32 x i32>*
  %4345 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 192
  %4346 = bitcast i16* %4345 to <32 x i32>*
  %4347 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 64
  %4348 = bitcast i16* %4347 to <32 x i32>*
  %.not705 = icmp eq i32 %output_shift, 0
  %4349 = select i1 %.not705, <32 x i32> zeroinitializer, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4350 = add i32 %output_shift, -1
  %4351 = zext i8 %output_zero to i16
  %4352 = insertelement <128 x i16> undef, i16 %4351, i32 0
  %4353 = shufflevector <128 x i16> %4352, <128 x i16> undef, <128 x i32> zeroinitializer
  %4354 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %4355 = shufflevector <128 x i8> %4354, <128 x i8> undef, <128 x i32> zeroinitializer
  %4356 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %4357 = shufflevector <128 x i8> %4356, <128 x i8> undef, <128 x i32> zeroinitializer
  %4358 = bitcast <128 x i16> %4353 to <64 x i32>
  %4359 = bitcast <128 x i8> %4355 to <32 x i32>
  %4360 = bitcast <128 x i8> %4357 to <32 x i32>
  %reass.add = add i32 %.neg, %.neg4761
  %reass.add4764 = add i32 %reass.add, %.neg4762
  %4361 = add i32 %4, -1
  %xtraiter5219 = and i32 %4, 3
  %4362 = icmp ult i32 %4361, 3
  %unroll_iter5226 = and i32 %4, -4
  %lcmp.mod5221.not = icmp eq i32 %xtraiter5219, 0
  br label %"for output.s0.b.rebased226"

"for output.s0.b.rebased226":                     ; preds = %"for output.s0.b.rebased226.preheader", %"end for output.s0.y.yo634"
  %output.s0.b.rebased228 = phi i32 [ %5304, %"end for output.s0.y.yo634" ], [ 0, %"for output.s0.b.rebased226.preheader" ]
  %4363 = load i32, i32* %.fca.1.gep663, align 4, !tbaa !95
  %cmp.i900 = icmp ult i32 %4363, %4232
  %4364 = load i8*, i8** %.fca.0.gep662, align 4, !tbaa !97
  br i1 %cmp.i900, label %if.then.i903, label %pseudostack_alloc.exit916, !prof !99

if.then.i903:                                     ; preds = %"for output.s0.b.rebased226"
  %tobool1.not.i902 = icmp ne i8* %4364, null
  %4365 = load i32, i32* %.fca.2.gep664, align 4
  %cmp2.i905 = icmp ugt i32 %4365, 16384
  %or.cond4698 = and i1 %tobool1.not.i902, %cmp2.i905
  br i1 %or.cond4698, label %if.then3.i907, label %if.end.i911

if.then3.i907:                                    ; preds = %if.then.i903
  call void @halide_free(i8* null, i8* nonnull %4364) #15
  %.pre = load i32, i32* %.fca.2.gep664, align 4, !tbaa !98
  br label %if.end.i911

if.end.i911:                                      ; preds = %if.then3.i907, %if.then.i903
  %4366 = phi i32 [ %.pre, %if.then3.i907 ], [ %4365, %if.then.i903 ]
  %add.i909 = add i32 %4366, %4232
  store i32 %add.i909, i32* %.fca.2.gep664, align 4, !tbaa !98
  %cmp7.i910 = icmp ugt i32 %add.i909, 16384
  br i1 %cmp7.i910, label %if.then8.i913, label %if.end11.i915

if.then8.i913:                                    ; preds = %if.end.i911
  %call.i912 = call i8* @halide_malloc(i8* null, i32 %4232) #15
  br label %if.end11.i915

if.end11.i915:                                    ; preds = %if.then8.i913, %if.end.i911
  %storemerge.i914 = phi i8* [ %call.i912, %if.then8.i913 ], [ null, %if.end.i911 ]
  store i8* %storemerge.i914, i8** %.fca.0.gep662, align 4, !tbaa !97
  store i32 %4232, i32* %.fca.1.gep663, align 4, !tbaa !95
  br label %pseudostack_alloc.exit916

pseudostack_alloc.exit916:                        ; preds = %"for output.s0.b.rebased226", %if.end11.i915
  %4367 = phi i8* [ %storemerge.i914, %if.end11.i915 ], [ %4364, %"for output.s0.b.rebased226" ]
  %.not702 = icmp eq i8* %4367, null
  br i1 %.not702, label %then_bb230, label %"produce resampled_input232", !prof !100

then_bb230:                                       ; preds = %pseudostack_alloc.exit916
  %4368 = alloca i8*, i32 %4232, align 128
  %4369 = bitcast i8** %4368 to i8*
  store i8** %4368, i8*** %4233, align 4
  br label %"produce resampled_input232"

"produce resampled_input232":                     ; preds = %pseudostack_alloc.exit916, %then_bb230
  %resampled_input231 = phi i8* [ %4369, %then_bb230 ], [ %4367, %pseudostack_alloc.exit916 ]
  br i1 %t2420, label %then_bb234, label %next_bb235

then_bb234:                                       ; preds = %"produce resampled_input232"
  br i1 %4234, label %"for resampled_input.s0.y.rebased236.preheader", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased236.preheader":  ; preds = %then_bb234
  %4370 = add nsw i32 %output.s0.b.rebased228, %14
  %4371 = mul nsw i32 %4370, %16
  %4372 = sub i32 %4371, %t2421
  br i1 %4238, label %"for resampled_input.s0.y.rebased236.us", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased236.us":         ; preds = %"for resampled_input.s0.y.rebased236.preheader", %"end for resampled_input.s0.x.rebased240.loopexit.us"
  %resampled_input.s0.y.rebased238.us = phi i32 [ %4388, %"end for resampled_input.s0.x.rebased240.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased236.preheader" ]
  %4373 = add nsw i32 %4235, %resampled_input.s0.y.rebased238.us
  %4374 = mul nsw i32 %4373, %4236
  %t2446.us = add nsw i32 %4237, %4374
  %4375 = add nsw i32 %resampled_input.s0.y.rebased238.us, %a64
  %4376 = mul nsw i32 %4375, %13
  %t2445.us = add nsw i32 %4372, %4376
  br label %"for resampled_input.s0.x.rebased239.us"

"for resampled_input.s0.x.rebased239.us":         ; preds = %"for resampled_input.s0.y.rebased236.us", %"for resampled_input.s0.x.rebased239.us"
  %resampled_input.s0.x.rebased241.us = phi i32 [ %4387, %"for resampled_input.s0.x.rebased239.us" ], [ 0, %"for resampled_input.s0.y.rebased236.us" ]
  %4377 = add nsw i32 %resampled_input.s0.x.rebased241.us, %a69
  %4378 = mul nsw i32 %4377, %11
  %4379 = add nsw i32 %t2445.us, %4378
  %4380 = getelementptr inbounds i8, i8* %8, i32 %4379
  %4381 = bitcast i8* %4380 to <128 x i8>*
  %4382 = load <128 x i8>, <128 x i8>* %4381, align 1, !tbaa !127
  %4383 = add nsw i32 %t2446.us, %resampled_input.s0.x.rebased241.us
  %4384 = shl nsw i32 %4383, 7
  %4385 = getelementptr inbounds i8, i8* %resampled_input231, i32 %4384
  %4386 = bitcast i8* %4385 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %4382, <128 x i8>* %4386, i32 128, <128 x i1> %3919), !tbaa !129
  %4387 = add nuw nsw i32 %resampled_input.s0.x.rebased241.us, 1
  %.not712.us = icmp eq i32 %resampled_input.s0.x.rebased241.us, %t2448
  br i1 %.not712.us, label %"end for resampled_input.s0.x.rebased240.loopexit.us", label %"for resampled_input.s0.x.rebased239.us"

"end for resampled_input.s0.x.rebased240.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased239.us"
  %4388 = add nuw nsw i32 %resampled_input.s0.y.rebased238.us, 1
  %.not711.us = icmp eq i32 %resampled_input.s0.y.rebased238.us, %t2447
  br i1 %.not711.us, label %"consume resampled_input632", label %"for resampled_input.s0.y.rebased236.us"

next_bb235:                                       ; preds = %"produce resampled_input232"
  br i1 %4234, label %"for resampled_input.s0.y.rebased242.preheader", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased242.preheader":  ; preds = %next_bb235
  %4389 = add nsw i32 %output.s0.b.rebased228, %14
  %4390 = mul nsw i32 %4389, %16
  %4391 = sub i32 %4390, %t2421
  br i1 %4238, label %"for resampled_input.s0.y.rebased242.us", label %"consume resampled_input632", !prof !101

"for resampled_input.s0.y.rebased242.us":         ; preds = %"for resampled_input.s0.y.rebased242.preheader", %"end for resampled_input.s0.x.rebased246.loopexit.us"
  %resampled_input.s0.y.rebased244.us = phi i32 [ %5287, %"end for resampled_input.s0.x.rebased246.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased242.preheader" ]
  %4392 = add nsw i32 %4235, %resampled_input.s0.y.rebased244.us
  %4393 = mul nsw i32 %4392, %4236
  %t2453.us = add nsw i32 %4237, %4393
  %4394 = add nsw i32 %resampled_input.s0.y.rebased244.us, %a64
  %4395 = mul nsw i32 %4394, %13
  %t2452.us = add nsw i32 %4391, %4395
  br label %"for resampled_input.s0.x.rebased245.us"

"for resampled_input.s0.x.rebased245.us":         ; preds = %"for resampled_input.s0.y.rebased242.us", %after_bb631.us
  %resampled_input.s0.x.rebased247.us = phi i32 [ %5286, %after_bb631.us ], [ 0, %"for resampled_input.s0.y.rebased242.us" ]
  %4396 = add nsw i32 %resampled_input.s0.x.rebased247.us, %a69
  %4397 = mul nsw i32 %4396, %11
  %4398 = add nsw i32 %t2452.us, %4397
  %4399 = getelementptr inbounds i8, i8* %8, i32 %4398
  %4400 = load i8, i8* %4399, align 1, !tbaa !127
  br i1 %4239, label %after_bb253.us, label %after_bb436.us

after_bb253.us:                                   ; preds = %"for resampled_input.s0.x.rebased245.us"
  %4401 = add nsw i32 %4398, %4246
  %4402 = getelementptr inbounds i8, i8* %8, i32 %4401
  %4403 = load i8, i8* %4402, align 1, !tbaa !127
  br i1 %.not4730, label %after_bb436.us, label %after_bb256.us

after_bb256.us:                                   ; preds = %after_bb253.us
  %4404 = sdiv i32 2, %4241
  %4405 = and i32 %4404, %4245
  %4406 = add nsw i32 %4405, %4398
  %4407 = getelementptr inbounds i8, i8* %8, i32 %4406
  %4408 = load i8, i8* %4407, align 1, !tbaa !127
  br i1 %4247, label %after_bb259.us, label %after_bb436.us

after_bb259.us:                                   ; preds = %after_bb256.us
  %4409 = sdiv i32 3, %4241
  %4410 = and i32 %4409, %4245
  %4411 = add nsw i32 %4410, %4398
  %4412 = getelementptr inbounds i8, i8* %8, i32 %4411
  %4413 = load i8, i8* %4412, align 1, !tbaa !127
  br i1 %.not4731, label %after_bb436.us, label %after_bb262.us

after_bb262.us:                                   ; preds = %after_bb259.us
  %4414 = sdiv i32 4, %4241
  %4415 = and i32 %4414, %4245
  %4416 = add nsw i32 %4415, %4398
  %4417 = getelementptr inbounds i8, i8* %8, i32 %4416
  %4418 = load i8, i8* %4417, align 1, !tbaa !127
  br i1 %4248, label %after_bb265.us, label %after_bb436.us

after_bb265.us:                                   ; preds = %after_bb262.us
  %4419 = sdiv i32 5, %4241
  %4420 = and i32 %4419, %4245
  %4421 = add nsw i32 %4420, %4398
  %4422 = getelementptr inbounds i8, i8* %8, i32 %4421
  %4423 = load i8, i8* %4422, align 1, !tbaa !127
  br i1 %.not4732, label %after_bb436.us, label %after_bb268.us

after_bb268.us:                                   ; preds = %after_bb265.us
  %4424 = sdiv i32 6, %4241
  %4425 = and i32 %4424, %4245
  %4426 = add nsw i32 %4425, %4398
  %4427 = getelementptr inbounds i8, i8* %8, i32 %4426
  %4428 = load i8, i8* %4427, align 1, !tbaa !127
  br i1 %4249, label %after_bb271.us, label %after_bb436.us

after_bb271.us:                                   ; preds = %after_bb268.us
  %4429 = sdiv i32 7, %4241
  %4430 = and i32 %4429, %4245
  %4431 = add nsw i32 %4430, %4398
  %4432 = getelementptr inbounds i8, i8* %8, i32 %4431
  %4433 = load i8, i8* %4432, align 1, !tbaa !127
  br i1 %.not4733, label %after_bb436.us, label %after_bb274.us

after_bb274.us:                                   ; preds = %after_bb271.us
  %4434 = sdiv i32 8, %4241
  %4435 = and i32 %4434, %4245
  %4436 = add nsw i32 %4435, %4398
  %4437 = getelementptr inbounds i8, i8* %8, i32 %4436
  %4438 = load i8, i8* %4437, align 1, !tbaa !127
  br i1 %4250, label %after_bb277.us, label %after_bb436.us

after_bb277.us:                                   ; preds = %after_bb274.us
  %4439 = sdiv i32 9, %4241
  %4440 = and i32 %4439, %4245
  %4441 = add nsw i32 %4440, %4398
  %4442 = getelementptr inbounds i8, i8* %8, i32 %4441
  %4443 = load i8, i8* %4442, align 1, !tbaa !127
  br i1 %.not4734, label %after_bb436.us, label %after_bb280.us

after_bb280.us:                                   ; preds = %after_bb277.us
  %4444 = sdiv i32 10, %4241
  %4445 = and i32 %4444, %4245
  %4446 = add nsw i32 %4445, %4398
  %4447 = getelementptr inbounds i8, i8* %8, i32 %4446
  %4448 = load i8, i8* %4447, align 1, !tbaa !127
  br i1 %4251, label %after_bb283.us, label %after_bb436.us

after_bb283.us:                                   ; preds = %after_bb280.us
  %4449 = sdiv i32 11, %4241
  %4450 = and i32 %4449, %4245
  %4451 = add nsw i32 %4450, %4398
  %4452 = getelementptr inbounds i8, i8* %8, i32 %4451
  %4453 = load i8, i8* %4452, align 1, !tbaa !127
  br i1 %.not4735, label %after_bb436.us, label %after_bb286.us

after_bb286.us:                                   ; preds = %after_bb283.us
  %4454 = sdiv i32 12, %4241
  %4455 = and i32 %4454, %4245
  %4456 = add nsw i32 %4455, %4398
  %4457 = getelementptr inbounds i8, i8* %8, i32 %4456
  %4458 = load i8, i8* %4457, align 1, !tbaa !127
  br i1 %4252, label %after_bb289.us, label %after_bb436.us

after_bb289.us:                                   ; preds = %after_bb286.us
  %4459 = sdiv i32 13, %4241
  %4460 = and i32 %4459, %4245
  %4461 = add nsw i32 %4460, %4398
  %4462 = getelementptr inbounds i8, i8* %8, i32 %4461
  %4463 = load i8, i8* %4462, align 1, !tbaa !127
  br i1 %.not4736, label %after_bb436.us, label %after_bb292.us

after_bb292.us:                                   ; preds = %after_bb289.us
  %4464 = sdiv i32 14, %4241
  %4465 = and i32 %4464, %4245
  %4466 = add nsw i32 %4465, %4398
  %4467 = getelementptr inbounds i8, i8* %8, i32 %4466
  %4468 = load i8, i8* %4467, align 1, !tbaa !127
  br i1 %4253, label %after_bb295.us, label %after_bb436.us

after_bb295.us:                                   ; preds = %after_bb292.us
  %4469 = sdiv i32 15, %4241
  %4470 = and i32 %4469, %4245
  %4471 = add nsw i32 %4470, %4398
  %4472 = getelementptr inbounds i8, i8* %8, i32 %4471
  %4473 = load i8, i8* %4472, align 1, !tbaa !127
  br i1 %.not4737, label %after_bb436.us, label %after_bb298.us

after_bb298.us:                                   ; preds = %after_bb295.us
  %4474 = sdiv i32 16, %4241
  %4475 = and i32 %4474, %4245
  %4476 = add nsw i32 %4475, %4398
  %4477 = getelementptr inbounds i8, i8* %8, i32 %4476
  %4478 = load i8, i8* %4477, align 1, !tbaa !127
  br i1 %4254, label %after_bb301.us, label %after_bb436.us

after_bb301.us:                                   ; preds = %after_bb298.us
  %4479 = sdiv i32 17, %4241
  %4480 = and i32 %4479, %4245
  %4481 = add nsw i32 %4480, %4398
  %4482 = getelementptr inbounds i8, i8* %8, i32 %4481
  %4483 = load i8, i8* %4482, align 1, !tbaa !127
  br i1 %.not4738, label %after_bb436.us, label %after_bb304.us

after_bb304.us:                                   ; preds = %after_bb301.us
  %4484 = sdiv i32 18, %4241
  %4485 = and i32 %4484, %4245
  %4486 = add nsw i32 %4485, %4398
  %4487 = getelementptr inbounds i8, i8* %8, i32 %4486
  %4488 = load i8, i8* %4487, align 1, !tbaa !127
  br i1 %4255, label %after_bb307.us, label %after_bb436.us

after_bb307.us:                                   ; preds = %after_bb304.us
  %4489 = sdiv i32 19, %4241
  %4490 = and i32 %4489, %4245
  %4491 = add nsw i32 %4490, %4398
  %4492 = getelementptr inbounds i8, i8* %8, i32 %4491
  %4493 = load i8, i8* %4492, align 1, !tbaa !127
  br i1 %.not4739, label %after_bb436.us, label %after_bb310.us

after_bb310.us:                                   ; preds = %after_bb307.us
  %4494 = sdiv i32 20, %4241
  %4495 = and i32 %4494, %4245
  %4496 = add nsw i32 %4495, %4398
  %4497 = getelementptr inbounds i8, i8* %8, i32 %4496
  %4498 = load i8, i8* %4497, align 1, !tbaa !127
  br i1 %4256, label %after_bb313.us, label %after_bb436.us

after_bb313.us:                                   ; preds = %after_bb310.us
  %4499 = sdiv i32 21, %4241
  %4500 = and i32 %4499, %4245
  %4501 = add nsw i32 %4500, %4398
  %4502 = getelementptr inbounds i8, i8* %8, i32 %4501
  %4503 = load i8, i8* %4502, align 1, !tbaa !127
  br i1 %.not4740, label %after_bb436.us, label %after_bb316.us

after_bb316.us:                                   ; preds = %after_bb313.us
  %4504 = sdiv i32 22, %4241
  %4505 = and i32 %4504, %4245
  %4506 = add nsw i32 %4505, %4398
  %4507 = getelementptr inbounds i8, i8* %8, i32 %4506
  %4508 = load i8, i8* %4507, align 1, !tbaa !127
  br i1 %4257, label %after_bb319.us, label %after_bb436.us

after_bb319.us:                                   ; preds = %after_bb316.us
  %4509 = sdiv i32 23, %4241
  %4510 = and i32 %4509, %4245
  %4511 = add nsw i32 %4510, %4398
  %4512 = getelementptr inbounds i8, i8* %8, i32 %4511
  %4513 = load i8, i8* %4512, align 1, !tbaa !127
  br i1 %.not4741, label %after_bb436.us, label %after_bb322.us

after_bb322.us:                                   ; preds = %after_bb319.us
  %4514 = sdiv i32 24, %4241
  %4515 = and i32 %4514, %4245
  %4516 = add nsw i32 %4515, %4398
  %4517 = getelementptr inbounds i8, i8* %8, i32 %4516
  %4518 = load i8, i8* %4517, align 1, !tbaa !127
  br i1 %4258, label %after_bb325.us, label %after_bb436.us

after_bb325.us:                                   ; preds = %after_bb322.us
  %4519 = sdiv i32 25, %4241
  %4520 = and i32 %4519, %4245
  %4521 = add nsw i32 %4520, %4398
  %4522 = getelementptr inbounds i8, i8* %8, i32 %4521
  %4523 = load i8, i8* %4522, align 1, !tbaa !127
  br i1 %.not4742, label %after_bb436.us, label %after_bb328.us

after_bb328.us:                                   ; preds = %after_bb325.us
  %4524 = sdiv i32 26, %4241
  %4525 = and i32 %4524, %4245
  %4526 = add nsw i32 %4525, %4398
  %4527 = getelementptr inbounds i8, i8* %8, i32 %4526
  %4528 = load i8, i8* %4527, align 1, !tbaa !127
  br i1 %4259, label %after_bb331.us, label %after_bb436.us

after_bb331.us:                                   ; preds = %after_bb328.us
  %4529 = sdiv i32 27, %4241
  %4530 = and i32 %4529, %4245
  %4531 = add nsw i32 %4530, %4398
  %4532 = getelementptr inbounds i8, i8* %8, i32 %4531
  %4533 = load i8, i8* %4532, align 1, !tbaa !127
  br i1 %.not4743, label %after_bb436.us, label %after_bb334.us

after_bb334.us:                                   ; preds = %after_bb331.us
  %4534 = sdiv i32 28, %4241
  %4535 = and i32 %4534, %4245
  %4536 = add nsw i32 %4535, %4398
  %4537 = getelementptr inbounds i8, i8* %8, i32 %4536
  %4538 = load i8, i8* %4537, align 1, !tbaa !127
  br i1 %4260, label %after_bb337.us, label %after_bb436.us

after_bb337.us:                                   ; preds = %after_bb334.us
  %4539 = sdiv i32 29, %4241
  %4540 = and i32 %4539, %4245
  %4541 = add nsw i32 %4540, %4398
  %4542 = getelementptr inbounds i8, i8* %8, i32 %4541
  %4543 = load i8, i8* %4542, align 1, !tbaa !127
  br i1 %.not4744, label %after_bb436.us, label %after_bb340.us

after_bb340.us:                                   ; preds = %after_bb337.us
  %4544 = sdiv i32 30, %4241
  %4545 = and i32 %4544, %4245
  %4546 = add nsw i32 %4545, %4398
  %4547 = getelementptr inbounds i8, i8* %8, i32 %4546
  %4548 = load i8, i8* %4547, align 1, !tbaa !127
  br i1 %4261, label %after_bb343.us, label %after_bb436.us

after_bb343.us:                                   ; preds = %after_bb340.us
  %4549 = sdiv i32 31, %4241
  %4550 = and i32 %4549, %4245
  %4551 = add nsw i32 %4550, %4398
  %4552 = getelementptr inbounds i8, i8* %8, i32 %4551
  %4553 = load i8, i8* %4552, align 1, !tbaa !127
  br i1 %.not4745, label %after_bb436.us, label %after_bb346.us

after_bb346.us:                                   ; preds = %after_bb343.us
  %4554 = sdiv i32 32, %4241
  %4555 = and i32 %4554, %4245
  %4556 = add nsw i32 %4555, %4398
  %4557 = getelementptr inbounds i8, i8* %8, i32 %4556
  %4558 = load i8, i8* %4557, align 1, !tbaa !127
  br i1 %4262, label %after_bb349.us, label %after_bb436.us

after_bb349.us:                                   ; preds = %after_bb346.us
  %4559 = sdiv i32 33, %4241
  %4560 = and i32 %4559, %4245
  %4561 = add nsw i32 %4560, %4398
  %4562 = getelementptr inbounds i8, i8* %8, i32 %4561
  %4563 = load i8, i8* %4562, align 1, !tbaa !127
  br i1 %.not4746, label %after_bb436.us, label %after_bb352.us

after_bb352.us:                                   ; preds = %after_bb349.us
  %4564 = sdiv i32 34, %4241
  %4565 = and i32 %4564, %4245
  %4566 = add nsw i32 %4565, %4398
  %4567 = getelementptr inbounds i8, i8* %8, i32 %4566
  %4568 = load i8, i8* %4567, align 1, !tbaa !127
  br i1 %4263, label %after_bb355.us, label %after_bb436.us

after_bb355.us:                                   ; preds = %after_bb352.us
  %4569 = sdiv i32 35, %4241
  %4570 = and i32 %4569, %4245
  %4571 = add nsw i32 %4570, %4398
  %4572 = getelementptr inbounds i8, i8* %8, i32 %4571
  %4573 = load i8, i8* %4572, align 1, !tbaa !127
  br i1 %.not4747, label %after_bb436.us, label %after_bb358.us

after_bb358.us:                                   ; preds = %after_bb355.us
  %4574 = sdiv i32 36, %4241
  %4575 = and i32 %4574, %4245
  %4576 = add nsw i32 %4575, %4398
  %4577 = getelementptr inbounds i8, i8* %8, i32 %4576
  %4578 = load i8, i8* %4577, align 1, !tbaa !127
  br i1 %4264, label %after_bb361.us, label %after_bb436.us

after_bb361.us:                                   ; preds = %after_bb358.us
  %4579 = sdiv i32 37, %4241
  %4580 = and i32 %4579, %4245
  %4581 = add nsw i32 %4580, %4398
  %4582 = getelementptr inbounds i8, i8* %8, i32 %4581
  %4583 = load i8, i8* %4582, align 1, !tbaa !127
  br i1 %.not4748, label %after_bb436.us, label %after_bb364.us

after_bb364.us:                                   ; preds = %after_bb361.us
  %4584 = sdiv i32 38, %4241
  %4585 = and i32 %4584, %4245
  %4586 = add nsw i32 %4585, %4398
  %4587 = getelementptr inbounds i8, i8* %8, i32 %4586
  %4588 = load i8, i8* %4587, align 1, !tbaa !127
  br i1 %4265, label %after_bb367.us, label %after_bb436.us

after_bb367.us:                                   ; preds = %after_bb364.us
  %4589 = sdiv i32 39, %4241
  %4590 = and i32 %4589, %4245
  %4591 = add nsw i32 %4590, %4398
  %4592 = getelementptr inbounds i8, i8* %8, i32 %4591
  %4593 = load i8, i8* %4592, align 1, !tbaa !127
  br i1 %.not4749, label %after_bb436.us, label %after_bb370.us

after_bb370.us:                                   ; preds = %after_bb367.us
  %4594 = sdiv i32 40, %4241
  %4595 = and i32 %4594, %4245
  %4596 = add nsw i32 %4595, %4398
  %4597 = getelementptr inbounds i8, i8* %8, i32 %4596
  %4598 = load i8, i8* %4597, align 1, !tbaa !127
  br i1 %4266, label %after_bb373.us, label %after_bb436.us

after_bb373.us:                                   ; preds = %after_bb370.us
  %4599 = sdiv i32 41, %4241
  %4600 = and i32 %4599, %4245
  %4601 = add nsw i32 %4600, %4398
  %4602 = getelementptr inbounds i8, i8* %8, i32 %4601
  %4603 = load i8, i8* %4602, align 1, !tbaa !127
  br i1 %.not4750, label %after_bb436.us, label %after_bb376.us

after_bb376.us:                                   ; preds = %after_bb373.us
  %4604 = sdiv i32 42, %4241
  %4605 = and i32 %4604, %4245
  %4606 = add nsw i32 %4605, %4398
  %4607 = getelementptr inbounds i8, i8* %8, i32 %4606
  %4608 = load i8, i8* %4607, align 1, !tbaa !127
  br i1 %4267, label %after_bb379.us, label %after_bb436.us

after_bb379.us:                                   ; preds = %after_bb376.us
  %4609 = sdiv i32 43, %4241
  %4610 = and i32 %4609, %4245
  %4611 = add nsw i32 %4610, %4398
  %4612 = getelementptr inbounds i8, i8* %8, i32 %4611
  %4613 = load i8, i8* %4612, align 1, !tbaa !127
  br i1 %.not4751, label %after_bb436.us, label %after_bb382.us

after_bb382.us:                                   ; preds = %after_bb379.us
  %4614 = sdiv i32 44, %4241
  %4615 = and i32 %4614, %4245
  %4616 = add nsw i32 %4615, %4398
  %4617 = getelementptr inbounds i8, i8* %8, i32 %4616
  %4618 = load i8, i8* %4617, align 1, !tbaa !127
  br i1 %4268, label %after_bb385.us, label %after_bb436.us

after_bb385.us:                                   ; preds = %after_bb382.us
  %4619 = sdiv i32 45, %4241
  %4620 = and i32 %4619, %4245
  %4621 = add nsw i32 %4620, %4398
  %4622 = getelementptr inbounds i8, i8* %8, i32 %4621
  %4623 = load i8, i8* %4622, align 1, !tbaa !127
  br i1 %.not4752, label %after_bb436.us, label %after_bb388.us

after_bb388.us:                                   ; preds = %after_bb385.us
  %4624 = sdiv i32 46, %4241
  %4625 = and i32 %4624, %4245
  %4626 = add nsw i32 %4625, %4398
  %4627 = getelementptr inbounds i8, i8* %8, i32 %4626
  %4628 = load i8, i8* %4627, align 1, !tbaa !127
  br i1 %4269, label %after_bb391.us, label %after_bb436.us

after_bb391.us:                                   ; preds = %after_bb388.us
  %4629 = sdiv i32 47, %4241
  %4630 = and i32 %4629, %4245
  %4631 = add nsw i32 %4630, %4398
  %4632 = getelementptr inbounds i8, i8* %8, i32 %4631
  %4633 = load i8, i8* %4632, align 1, !tbaa !127
  br i1 %.not4753, label %after_bb436.us, label %after_bb394.us

after_bb394.us:                                   ; preds = %after_bb391.us
  %4634 = sdiv i32 48, %4241
  %4635 = and i32 %4634, %4245
  %4636 = add nsw i32 %4635, %4398
  %4637 = getelementptr inbounds i8, i8* %8, i32 %4636
  %4638 = load i8, i8* %4637, align 1, !tbaa !127
  br i1 %4270, label %after_bb397.us, label %after_bb436.us

after_bb397.us:                                   ; preds = %after_bb394.us
  %4639 = sdiv i32 49, %4241
  %4640 = and i32 %4639, %4245
  %4641 = add nsw i32 %4640, %4398
  %4642 = getelementptr inbounds i8, i8* %8, i32 %4641
  %4643 = load i8, i8* %4642, align 1, !tbaa !127
  br i1 %.not4754, label %after_bb436.us, label %after_bb400.us

after_bb400.us:                                   ; preds = %after_bb397.us
  %4644 = sdiv i32 50, %4241
  %4645 = and i32 %4644, %4245
  %4646 = add nsw i32 %4645, %4398
  %4647 = getelementptr inbounds i8, i8* %8, i32 %4646
  %4648 = load i8, i8* %4647, align 1, !tbaa !127
  br i1 %4271, label %after_bb403.us, label %after_bb436.us

after_bb403.us:                                   ; preds = %after_bb400.us
  %4649 = sdiv i32 51, %4241
  %4650 = and i32 %4649, %4245
  %4651 = add nsw i32 %4650, %4398
  %4652 = getelementptr inbounds i8, i8* %8, i32 %4651
  %4653 = load i8, i8* %4652, align 1, !tbaa !127
  br i1 %.not4755, label %after_bb436.us, label %after_bb406.us

after_bb406.us:                                   ; preds = %after_bb403.us
  %4654 = sdiv i32 52, %4241
  %4655 = and i32 %4654, %4245
  %4656 = add nsw i32 %4655, %4398
  %4657 = getelementptr inbounds i8, i8* %8, i32 %4656
  %4658 = load i8, i8* %4657, align 1, !tbaa !127
  br i1 %4272, label %after_bb409.us, label %after_bb436.us

after_bb409.us:                                   ; preds = %after_bb406.us
  %4659 = sdiv i32 53, %4241
  %4660 = and i32 %4659, %4245
  %4661 = add nsw i32 %4660, %4398
  %4662 = getelementptr inbounds i8, i8* %8, i32 %4661
  %4663 = load i8, i8* %4662, align 1, !tbaa !127
  br i1 %.not4756, label %after_bb436.us, label %after_bb412.us

after_bb412.us:                                   ; preds = %after_bb409.us
  %4664 = sdiv i32 54, %4241
  %4665 = and i32 %4664, %4245
  %4666 = add nsw i32 %4665, %4398
  %4667 = getelementptr inbounds i8, i8* %8, i32 %4666
  %4668 = load i8, i8* %4667, align 1, !tbaa !127
  br i1 %4273, label %after_bb415.us, label %after_bb436.us

after_bb415.us:                                   ; preds = %after_bb412.us
  %4669 = sdiv i32 55, %4241
  %4670 = and i32 %4669, %4245
  %4671 = add nsw i32 %4670, %4398
  %4672 = getelementptr inbounds i8, i8* %8, i32 %4671
  %4673 = load i8, i8* %4672, align 1, !tbaa !127
  br i1 %.not4757, label %after_bb436.us, label %after_bb418.us

after_bb418.us:                                   ; preds = %after_bb415.us
  %4674 = sdiv i32 56, %4241
  %4675 = and i32 %4674, %4245
  %4676 = add nsw i32 %4675, %4398
  %4677 = getelementptr inbounds i8, i8* %8, i32 %4676
  %4678 = load i8, i8* %4677, align 1, !tbaa !127
  br i1 %4274, label %after_bb421.us, label %after_bb436.us

after_bb421.us:                                   ; preds = %after_bb418.us
  %4679 = sdiv i32 57, %4241
  %4680 = and i32 %4679, %4245
  %4681 = add nsw i32 %4680, %4398
  %4682 = getelementptr inbounds i8, i8* %8, i32 %4681
  %4683 = load i8, i8* %4682, align 1, !tbaa !127
  br i1 %.not4758, label %after_bb436.us, label %after_bb424.us

after_bb424.us:                                   ; preds = %after_bb421.us
  %4684 = sdiv i32 58, %4241
  %4685 = and i32 %4684, %4245
  %4686 = add nsw i32 %4685, %4398
  %4687 = getelementptr inbounds i8, i8* %8, i32 %4686
  %4688 = load i8, i8* %4687, align 1, !tbaa !127
  br i1 %4275, label %after_bb427.us, label %after_bb436.us

after_bb427.us:                                   ; preds = %after_bb424.us
  %4689 = sdiv i32 59, %4241
  %4690 = and i32 %4689, %4245
  %4691 = add nsw i32 %4690, %4398
  %4692 = getelementptr inbounds i8, i8* %8, i32 %4691
  %4693 = load i8, i8* %4692, align 1, !tbaa !127
  br i1 %.not4759, label %after_bb436.us, label %after_bb430.us

after_bb430.us:                                   ; preds = %after_bb427.us
  %4694 = sdiv i32 60, %4241
  %4695 = and i32 %4694, %4245
  %4696 = add nsw i32 %4695, %4398
  %4697 = getelementptr inbounds i8, i8* %8, i32 %4696
  %4698 = load i8, i8* %4697, align 1, !tbaa !127
  br i1 %4276, label %after_bb433.us, label %after_bb436.us

after_bb433.us:                                   ; preds = %after_bb430.us
  %4699 = sdiv i32 61, %4241
  %4700 = and i32 %4699, %4245
  %4701 = add nsw i32 %4700, %4398
  %4702 = getelementptr inbounds i8, i8* %8, i32 %4701
  %4703 = load i8, i8* %4702, align 1, !tbaa !127
  br i1 %.not4760, label %after_bb436.us, label %true_bb434.us

true_bb434.us:                                    ; preds = %after_bb433.us
  %4704 = sdiv i32 62, %4241
  %4705 = and i32 %4704, %4245
  %4706 = add nsw i32 %4705, %4398
  %4707 = getelementptr inbounds i8, i8* %8, i32 %4706
  %4708 = load i8, i8* %4707, align 1, !tbaa !127
  br label %after_bb436.us

after_bb436.us:                                   ; preds = %true_bb434.us, %after_bb433.us, %after_bb430.us, %after_bb427.us, %after_bb424.us, %after_bb421.us, %after_bb418.us, %after_bb415.us, %after_bb412.us, %after_bb409.us, %after_bb406.us, %after_bb403.us, %after_bb400.us, %after_bb397.us, %after_bb394.us, %after_bb391.us, %after_bb388.us, %after_bb385.us, %after_bb382.us, %after_bb379.us, %after_bb376.us, %after_bb373.us, %after_bb370.us, %after_bb367.us, %after_bb364.us, %after_bb361.us, %after_bb358.us, %after_bb355.us, %after_bb352.us, %after_bb349.us, %after_bb346.us, %after_bb343.us, %after_bb340.us, %after_bb337.us, %after_bb334.us, %after_bb331.us, %after_bb328.us, %after_bb325.us, %after_bb322.us, %after_bb319.us, %after_bb316.us, %after_bb313.us, %after_bb310.us, %after_bb307.us, %after_bb304.us, %after_bb301.us, %after_bb298.us, %after_bb295.us, %after_bb292.us, %after_bb289.us, %after_bb286.us, %after_bb283.us, %after_bb280.us, %after_bb277.us, %after_bb274.us, %after_bb271.us, %after_bb268.us, %after_bb265.us, %after_bb262.us, %after_bb259.us, %after_bb256.us, %after_bb253.us, %"for resampled_input.s0.x.rebased245.us"
  %4709 = phi i8 [ %4703, %true_bb434.us ], [ %4703, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4710 = phi i8 [ %4693, %true_bb434.us ], [ %4693, %after_bb433.us ], [ %4693, %after_bb430.us ], [ %4693, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4711 = phi i8 [ %4683, %true_bb434.us ], [ %4683, %after_bb433.us ], [ %4683, %after_bb430.us ], [ %4683, %after_bb427.us ], [ %4683, %after_bb424.us ], [ %4683, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4712 = phi i8 [ %4673, %true_bb434.us ], [ %4673, %after_bb433.us ], [ %4673, %after_bb430.us ], [ %4673, %after_bb427.us ], [ %4673, %after_bb424.us ], [ %4673, %after_bb421.us ], [ %4673, %after_bb418.us ], [ %4673, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4713 = phi i8 [ %4663, %true_bb434.us ], [ %4663, %after_bb433.us ], [ %4663, %after_bb430.us ], [ %4663, %after_bb427.us ], [ %4663, %after_bb424.us ], [ %4663, %after_bb421.us ], [ %4663, %after_bb418.us ], [ %4663, %after_bb415.us ], [ %4663, %after_bb412.us ], [ %4663, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4714 = phi i8 [ %4653, %true_bb434.us ], [ %4653, %after_bb433.us ], [ %4653, %after_bb430.us ], [ %4653, %after_bb427.us ], [ %4653, %after_bb424.us ], [ %4653, %after_bb421.us ], [ %4653, %after_bb418.us ], [ %4653, %after_bb415.us ], [ %4653, %after_bb412.us ], [ %4653, %after_bb409.us ], [ %4653, %after_bb406.us ], [ %4653, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4715 = phi i8 [ %4643, %true_bb434.us ], [ %4643, %after_bb433.us ], [ %4643, %after_bb430.us ], [ %4643, %after_bb427.us ], [ %4643, %after_bb424.us ], [ %4643, %after_bb421.us ], [ %4643, %after_bb418.us ], [ %4643, %after_bb415.us ], [ %4643, %after_bb412.us ], [ %4643, %after_bb409.us ], [ %4643, %after_bb406.us ], [ %4643, %after_bb403.us ], [ %4643, %after_bb400.us ], [ %4643, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4716 = phi i8 [ %4633, %true_bb434.us ], [ %4633, %after_bb433.us ], [ %4633, %after_bb430.us ], [ %4633, %after_bb427.us ], [ %4633, %after_bb424.us ], [ %4633, %after_bb421.us ], [ %4633, %after_bb418.us ], [ %4633, %after_bb415.us ], [ %4633, %after_bb412.us ], [ %4633, %after_bb409.us ], [ %4633, %after_bb406.us ], [ %4633, %after_bb403.us ], [ %4633, %after_bb400.us ], [ %4633, %after_bb397.us ], [ %4633, %after_bb394.us ], [ %4633, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4717 = phi i8 [ %4623, %true_bb434.us ], [ %4623, %after_bb433.us ], [ %4623, %after_bb430.us ], [ %4623, %after_bb427.us ], [ %4623, %after_bb424.us ], [ %4623, %after_bb421.us ], [ %4623, %after_bb418.us ], [ %4623, %after_bb415.us ], [ %4623, %after_bb412.us ], [ %4623, %after_bb409.us ], [ %4623, %after_bb406.us ], [ %4623, %after_bb403.us ], [ %4623, %after_bb400.us ], [ %4623, %after_bb397.us ], [ %4623, %after_bb394.us ], [ %4623, %after_bb391.us ], [ %4623, %after_bb388.us ], [ %4623, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4718 = phi i8 [ %4613, %true_bb434.us ], [ %4613, %after_bb433.us ], [ %4613, %after_bb430.us ], [ %4613, %after_bb427.us ], [ %4613, %after_bb424.us ], [ %4613, %after_bb421.us ], [ %4613, %after_bb418.us ], [ %4613, %after_bb415.us ], [ %4613, %after_bb412.us ], [ %4613, %after_bb409.us ], [ %4613, %after_bb406.us ], [ %4613, %after_bb403.us ], [ %4613, %after_bb400.us ], [ %4613, %after_bb397.us ], [ %4613, %after_bb394.us ], [ %4613, %after_bb391.us ], [ %4613, %after_bb388.us ], [ %4613, %after_bb385.us ], [ %4613, %after_bb382.us ], [ %4613, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4719 = phi i8 [ %4603, %true_bb434.us ], [ %4603, %after_bb433.us ], [ %4603, %after_bb430.us ], [ %4603, %after_bb427.us ], [ %4603, %after_bb424.us ], [ %4603, %after_bb421.us ], [ %4603, %after_bb418.us ], [ %4603, %after_bb415.us ], [ %4603, %after_bb412.us ], [ %4603, %after_bb409.us ], [ %4603, %after_bb406.us ], [ %4603, %after_bb403.us ], [ %4603, %after_bb400.us ], [ %4603, %after_bb397.us ], [ %4603, %after_bb394.us ], [ %4603, %after_bb391.us ], [ %4603, %after_bb388.us ], [ %4603, %after_bb385.us ], [ %4603, %after_bb382.us ], [ %4603, %after_bb379.us ], [ %4603, %after_bb376.us ], [ %4603, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4720 = phi i8 [ %4593, %true_bb434.us ], [ %4593, %after_bb433.us ], [ %4593, %after_bb430.us ], [ %4593, %after_bb427.us ], [ %4593, %after_bb424.us ], [ %4593, %after_bb421.us ], [ %4593, %after_bb418.us ], [ %4593, %after_bb415.us ], [ %4593, %after_bb412.us ], [ %4593, %after_bb409.us ], [ %4593, %after_bb406.us ], [ %4593, %after_bb403.us ], [ %4593, %after_bb400.us ], [ %4593, %after_bb397.us ], [ %4593, %after_bb394.us ], [ %4593, %after_bb391.us ], [ %4593, %after_bb388.us ], [ %4593, %after_bb385.us ], [ %4593, %after_bb382.us ], [ %4593, %after_bb379.us ], [ %4593, %after_bb376.us ], [ %4593, %after_bb373.us ], [ %4593, %after_bb370.us ], [ %4593, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4721 = phi i8 [ %4583, %true_bb434.us ], [ %4583, %after_bb433.us ], [ %4583, %after_bb430.us ], [ %4583, %after_bb427.us ], [ %4583, %after_bb424.us ], [ %4583, %after_bb421.us ], [ %4583, %after_bb418.us ], [ %4583, %after_bb415.us ], [ %4583, %after_bb412.us ], [ %4583, %after_bb409.us ], [ %4583, %after_bb406.us ], [ %4583, %after_bb403.us ], [ %4583, %after_bb400.us ], [ %4583, %after_bb397.us ], [ %4583, %after_bb394.us ], [ %4583, %after_bb391.us ], [ %4583, %after_bb388.us ], [ %4583, %after_bb385.us ], [ %4583, %after_bb382.us ], [ %4583, %after_bb379.us ], [ %4583, %after_bb376.us ], [ %4583, %after_bb373.us ], [ %4583, %after_bb370.us ], [ %4583, %after_bb367.us ], [ %4583, %after_bb364.us ], [ %4583, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4722 = phi i8 [ %4573, %true_bb434.us ], [ %4573, %after_bb433.us ], [ %4573, %after_bb430.us ], [ %4573, %after_bb427.us ], [ %4573, %after_bb424.us ], [ %4573, %after_bb421.us ], [ %4573, %after_bb418.us ], [ %4573, %after_bb415.us ], [ %4573, %after_bb412.us ], [ %4573, %after_bb409.us ], [ %4573, %after_bb406.us ], [ %4573, %after_bb403.us ], [ %4573, %after_bb400.us ], [ %4573, %after_bb397.us ], [ %4573, %after_bb394.us ], [ %4573, %after_bb391.us ], [ %4573, %after_bb388.us ], [ %4573, %after_bb385.us ], [ %4573, %after_bb382.us ], [ %4573, %after_bb379.us ], [ %4573, %after_bb376.us ], [ %4573, %after_bb373.us ], [ %4573, %after_bb370.us ], [ %4573, %after_bb367.us ], [ %4573, %after_bb364.us ], [ %4573, %after_bb361.us ], [ %4573, %after_bb358.us ], [ %4573, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4723 = phi i8 [ %4563, %true_bb434.us ], [ %4563, %after_bb433.us ], [ %4563, %after_bb430.us ], [ %4563, %after_bb427.us ], [ %4563, %after_bb424.us ], [ %4563, %after_bb421.us ], [ %4563, %after_bb418.us ], [ %4563, %after_bb415.us ], [ %4563, %after_bb412.us ], [ %4563, %after_bb409.us ], [ %4563, %after_bb406.us ], [ %4563, %after_bb403.us ], [ %4563, %after_bb400.us ], [ %4563, %after_bb397.us ], [ %4563, %after_bb394.us ], [ %4563, %after_bb391.us ], [ %4563, %after_bb388.us ], [ %4563, %after_bb385.us ], [ %4563, %after_bb382.us ], [ %4563, %after_bb379.us ], [ %4563, %after_bb376.us ], [ %4563, %after_bb373.us ], [ %4563, %after_bb370.us ], [ %4563, %after_bb367.us ], [ %4563, %after_bb364.us ], [ %4563, %after_bb361.us ], [ %4563, %after_bb358.us ], [ %4563, %after_bb355.us ], [ %4563, %after_bb352.us ], [ %4563, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4724 = phi i8 [ %4553, %true_bb434.us ], [ %4553, %after_bb433.us ], [ %4553, %after_bb430.us ], [ %4553, %after_bb427.us ], [ %4553, %after_bb424.us ], [ %4553, %after_bb421.us ], [ %4553, %after_bb418.us ], [ %4553, %after_bb415.us ], [ %4553, %after_bb412.us ], [ %4553, %after_bb409.us ], [ %4553, %after_bb406.us ], [ %4553, %after_bb403.us ], [ %4553, %after_bb400.us ], [ %4553, %after_bb397.us ], [ %4553, %after_bb394.us ], [ %4553, %after_bb391.us ], [ %4553, %after_bb388.us ], [ %4553, %after_bb385.us ], [ %4553, %after_bb382.us ], [ %4553, %after_bb379.us ], [ %4553, %after_bb376.us ], [ %4553, %after_bb373.us ], [ %4553, %after_bb370.us ], [ %4553, %after_bb367.us ], [ %4553, %after_bb364.us ], [ %4553, %after_bb361.us ], [ %4553, %after_bb358.us ], [ %4553, %after_bb355.us ], [ %4553, %after_bb352.us ], [ %4553, %after_bb349.us ], [ %4553, %after_bb346.us ], [ %4553, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4725 = phi i8 [ %4543, %true_bb434.us ], [ %4543, %after_bb433.us ], [ %4543, %after_bb430.us ], [ %4543, %after_bb427.us ], [ %4543, %after_bb424.us ], [ %4543, %after_bb421.us ], [ %4543, %after_bb418.us ], [ %4543, %after_bb415.us ], [ %4543, %after_bb412.us ], [ %4543, %after_bb409.us ], [ %4543, %after_bb406.us ], [ %4543, %after_bb403.us ], [ %4543, %after_bb400.us ], [ %4543, %after_bb397.us ], [ %4543, %after_bb394.us ], [ %4543, %after_bb391.us ], [ %4543, %after_bb388.us ], [ %4543, %after_bb385.us ], [ %4543, %after_bb382.us ], [ %4543, %after_bb379.us ], [ %4543, %after_bb376.us ], [ %4543, %after_bb373.us ], [ %4543, %after_bb370.us ], [ %4543, %after_bb367.us ], [ %4543, %after_bb364.us ], [ %4543, %after_bb361.us ], [ %4543, %after_bb358.us ], [ %4543, %after_bb355.us ], [ %4543, %after_bb352.us ], [ %4543, %after_bb349.us ], [ %4543, %after_bb346.us ], [ %4543, %after_bb343.us ], [ %4543, %after_bb340.us ], [ %4543, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4726 = phi i8 [ %4533, %true_bb434.us ], [ %4533, %after_bb433.us ], [ %4533, %after_bb430.us ], [ %4533, %after_bb427.us ], [ %4533, %after_bb424.us ], [ %4533, %after_bb421.us ], [ %4533, %after_bb418.us ], [ %4533, %after_bb415.us ], [ %4533, %after_bb412.us ], [ %4533, %after_bb409.us ], [ %4533, %after_bb406.us ], [ %4533, %after_bb403.us ], [ %4533, %after_bb400.us ], [ %4533, %after_bb397.us ], [ %4533, %after_bb394.us ], [ %4533, %after_bb391.us ], [ %4533, %after_bb388.us ], [ %4533, %after_bb385.us ], [ %4533, %after_bb382.us ], [ %4533, %after_bb379.us ], [ %4533, %after_bb376.us ], [ %4533, %after_bb373.us ], [ %4533, %after_bb370.us ], [ %4533, %after_bb367.us ], [ %4533, %after_bb364.us ], [ %4533, %after_bb361.us ], [ %4533, %after_bb358.us ], [ %4533, %after_bb355.us ], [ %4533, %after_bb352.us ], [ %4533, %after_bb349.us ], [ %4533, %after_bb346.us ], [ %4533, %after_bb343.us ], [ %4533, %after_bb340.us ], [ %4533, %after_bb337.us ], [ %4533, %after_bb334.us ], [ %4533, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4727 = phi i8 [ %4523, %true_bb434.us ], [ %4523, %after_bb433.us ], [ %4523, %after_bb430.us ], [ %4523, %after_bb427.us ], [ %4523, %after_bb424.us ], [ %4523, %after_bb421.us ], [ %4523, %after_bb418.us ], [ %4523, %after_bb415.us ], [ %4523, %after_bb412.us ], [ %4523, %after_bb409.us ], [ %4523, %after_bb406.us ], [ %4523, %after_bb403.us ], [ %4523, %after_bb400.us ], [ %4523, %after_bb397.us ], [ %4523, %after_bb394.us ], [ %4523, %after_bb391.us ], [ %4523, %after_bb388.us ], [ %4523, %after_bb385.us ], [ %4523, %after_bb382.us ], [ %4523, %after_bb379.us ], [ %4523, %after_bb376.us ], [ %4523, %after_bb373.us ], [ %4523, %after_bb370.us ], [ %4523, %after_bb367.us ], [ %4523, %after_bb364.us ], [ %4523, %after_bb361.us ], [ %4523, %after_bb358.us ], [ %4523, %after_bb355.us ], [ %4523, %after_bb352.us ], [ %4523, %after_bb349.us ], [ %4523, %after_bb346.us ], [ %4523, %after_bb343.us ], [ %4523, %after_bb340.us ], [ %4523, %after_bb337.us ], [ %4523, %after_bb334.us ], [ %4523, %after_bb331.us ], [ %4523, %after_bb328.us ], [ %4523, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4728 = phi i8 [ %4513, %true_bb434.us ], [ %4513, %after_bb433.us ], [ %4513, %after_bb430.us ], [ %4513, %after_bb427.us ], [ %4513, %after_bb424.us ], [ %4513, %after_bb421.us ], [ %4513, %after_bb418.us ], [ %4513, %after_bb415.us ], [ %4513, %after_bb412.us ], [ %4513, %after_bb409.us ], [ %4513, %after_bb406.us ], [ %4513, %after_bb403.us ], [ %4513, %after_bb400.us ], [ %4513, %after_bb397.us ], [ %4513, %after_bb394.us ], [ %4513, %after_bb391.us ], [ %4513, %after_bb388.us ], [ %4513, %after_bb385.us ], [ %4513, %after_bb382.us ], [ %4513, %after_bb379.us ], [ %4513, %after_bb376.us ], [ %4513, %after_bb373.us ], [ %4513, %after_bb370.us ], [ %4513, %after_bb367.us ], [ %4513, %after_bb364.us ], [ %4513, %after_bb361.us ], [ %4513, %after_bb358.us ], [ %4513, %after_bb355.us ], [ %4513, %after_bb352.us ], [ %4513, %after_bb349.us ], [ %4513, %after_bb346.us ], [ %4513, %after_bb343.us ], [ %4513, %after_bb340.us ], [ %4513, %after_bb337.us ], [ %4513, %after_bb334.us ], [ %4513, %after_bb331.us ], [ %4513, %after_bb328.us ], [ %4513, %after_bb325.us ], [ %4513, %after_bb322.us ], [ %4513, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4729 = phi i8 [ %4503, %true_bb434.us ], [ %4503, %after_bb433.us ], [ %4503, %after_bb430.us ], [ %4503, %after_bb427.us ], [ %4503, %after_bb424.us ], [ %4503, %after_bb421.us ], [ %4503, %after_bb418.us ], [ %4503, %after_bb415.us ], [ %4503, %after_bb412.us ], [ %4503, %after_bb409.us ], [ %4503, %after_bb406.us ], [ %4503, %after_bb403.us ], [ %4503, %after_bb400.us ], [ %4503, %after_bb397.us ], [ %4503, %after_bb394.us ], [ %4503, %after_bb391.us ], [ %4503, %after_bb388.us ], [ %4503, %after_bb385.us ], [ %4503, %after_bb382.us ], [ %4503, %after_bb379.us ], [ %4503, %after_bb376.us ], [ %4503, %after_bb373.us ], [ %4503, %after_bb370.us ], [ %4503, %after_bb367.us ], [ %4503, %after_bb364.us ], [ %4503, %after_bb361.us ], [ %4503, %after_bb358.us ], [ %4503, %after_bb355.us ], [ %4503, %after_bb352.us ], [ %4503, %after_bb349.us ], [ %4503, %after_bb346.us ], [ %4503, %after_bb343.us ], [ %4503, %after_bb340.us ], [ %4503, %after_bb337.us ], [ %4503, %after_bb334.us ], [ %4503, %after_bb331.us ], [ %4503, %after_bb328.us ], [ %4503, %after_bb325.us ], [ %4503, %after_bb322.us ], [ %4503, %after_bb319.us ], [ %4503, %after_bb316.us ], [ %4503, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4730 = phi i8 [ %4493, %true_bb434.us ], [ %4493, %after_bb433.us ], [ %4493, %after_bb430.us ], [ %4493, %after_bb427.us ], [ %4493, %after_bb424.us ], [ %4493, %after_bb421.us ], [ %4493, %after_bb418.us ], [ %4493, %after_bb415.us ], [ %4493, %after_bb412.us ], [ %4493, %after_bb409.us ], [ %4493, %after_bb406.us ], [ %4493, %after_bb403.us ], [ %4493, %after_bb400.us ], [ %4493, %after_bb397.us ], [ %4493, %after_bb394.us ], [ %4493, %after_bb391.us ], [ %4493, %after_bb388.us ], [ %4493, %after_bb385.us ], [ %4493, %after_bb382.us ], [ %4493, %after_bb379.us ], [ %4493, %after_bb376.us ], [ %4493, %after_bb373.us ], [ %4493, %after_bb370.us ], [ %4493, %after_bb367.us ], [ %4493, %after_bb364.us ], [ %4493, %after_bb361.us ], [ %4493, %after_bb358.us ], [ %4493, %after_bb355.us ], [ %4493, %after_bb352.us ], [ %4493, %after_bb349.us ], [ %4493, %after_bb346.us ], [ %4493, %after_bb343.us ], [ %4493, %after_bb340.us ], [ %4493, %after_bb337.us ], [ %4493, %after_bb334.us ], [ %4493, %after_bb331.us ], [ %4493, %after_bb328.us ], [ %4493, %after_bb325.us ], [ %4493, %after_bb322.us ], [ %4493, %after_bb319.us ], [ %4493, %after_bb316.us ], [ %4493, %after_bb313.us ], [ %4493, %after_bb310.us ], [ %4493, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4731 = phi i8 [ %4483, %true_bb434.us ], [ %4483, %after_bb433.us ], [ %4483, %after_bb430.us ], [ %4483, %after_bb427.us ], [ %4483, %after_bb424.us ], [ %4483, %after_bb421.us ], [ %4483, %after_bb418.us ], [ %4483, %after_bb415.us ], [ %4483, %after_bb412.us ], [ %4483, %after_bb409.us ], [ %4483, %after_bb406.us ], [ %4483, %after_bb403.us ], [ %4483, %after_bb400.us ], [ %4483, %after_bb397.us ], [ %4483, %after_bb394.us ], [ %4483, %after_bb391.us ], [ %4483, %after_bb388.us ], [ %4483, %after_bb385.us ], [ %4483, %after_bb382.us ], [ %4483, %after_bb379.us ], [ %4483, %after_bb376.us ], [ %4483, %after_bb373.us ], [ %4483, %after_bb370.us ], [ %4483, %after_bb367.us ], [ %4483, %after_bb364.us ], [ %4483, %after_bb361.us ], [ %4483, %after_bb358.us ], [ %4483, %after_bb355.us ], [ %4483, %after_bb352.us ], [ %4483, %after_bb349.us ], [ %4483, %after_bb346.us ], [ %4483, %after_bb343.us ], [ %4483, %after_bb340.us ], [ %4483, %after_bb337.us ], [ %4483, %after_bb334.us ], [ %4483, %after_bb331.us ], [ %4483, %after_bb328.us ], [ %4483, %after_bb325.us ], [ %4483, %after_bb322.us ], [ %4483, %after_bb319.us ], [ %4483, %after_bb316.us ], [ %4483, %after_bb313.us ], [ %4483, %after_bb310.us ], [ %4483, %after_bb307.us ], [ %4483, %after_bb304.us ], [ %4483, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4732 = phi i8 [ %4473, %true_bb434.us ], [ %4473, %after_bb433.us ], [ %4473, %after_bb430.us ], [ %4473, %after_bb427.us ], [ %4473, %after_bb424.us ], [ %4473, %after_bb421.us ], [ %4473, %after_bb418.us ], [ %4473, %after_bb415.us ], [ %4473, %after_bb412.us ], [ %4473, %after_bb409.us ], [ %4473, %after_bb406.us ], [ %4473, %after_bb403.us ], [ %4473, %after_bb400.us ], [ %4473, %after_bb397.us ], [ %4473, %after_bb394.us ], [ %4473, %after_bb391.us ], [ %4473, %after_bb388.us ], [ %4473, %after_bb385.us ], [ %4473, %after_bb382.us ], [ %4473, %after_bb379.us ], [ %4473, %after_bb376.us ], [ %4473, %after_bb373.us ], [ %4473, %after_bb370.us ], [ %4473, %after_bb367.us ], [ %4473, %after_bb364.us ], [ %4473, %after_bb361.us ], [ %4473, %after_bb358.us ], [ %4473, %after_bb355.us ], [ %4473, %after_bb352.us ], [ %4473, %after_bb349.us ], [ %4473, %after_bb346.us ], [ %4473, %after_bb343.us ], [ %4473, %after_bb340.us ], [ %4473, %after_bb337.us ], [ %4473, %after_bb334.us ], [ %4473, %after_bb331.us ], [ %4473, %after_bb328.us ], [ %4473, %after_bb325.us ], [ %4473, %after_bb322.us ], [ %4473, %after_bb319.us ], [ %4473, %after_bb316.us ], [ %4473, %after_bb313.us ], [ %4473, %after_bb310.us ], [ %4473, %after_bb307.us ], [ %4473, %after_bb304.us ], [ %4473, %after_bb301.us ], [ %4473, %after_bb298.us ], [ %4473, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4733 = phi i8 [ %4463, %true_bb434.us ], [ %4463, %after_bb433.us ], [ %4463, %after_bb430.us ], [ %4463, %after_bb427.us ], [ %4463, %after_bb424.us ], [ %4463, %after_bb421.us ], [ %4463, %after_bb418.us ], [ %4463, %after_bb415.us ], [ %4463, %after_bb412.us ], [ %4463, %after_bb409.us ], [ %4463, %after_bb406.us ], [ %4463, %after_bb403.us ], [ %4463, %after_bb400.us ], [ %4463, %after_bb397.us ], [ %4463, %after_bb394.us ], [ %4463, %after_bb391.us ], [ %4463, %after_bb388.us ], [ %4463, %after_bb385.us ], [ %4463, %after_bb382.us ], [ %4463, %after_bb379.us ], [ %4463, %after_bb376.us ], [ %4463, %after_bb373.us ], [ %4463, %after_bb370.us ], [ %4463, %after_bb367.us ], [ %4463, %after_bb364.us ], [ %4463, %after_bb361.us ], [ %4463, %after_bb358.us ], [ %4463, %after_bb355.us ], [ %4463, %after_bb352.us ], [ %4463, %after_bb349.us ], [ %4463, %after_bb346.us ], [ %4463, %after_bb343.us ], [ %4463, %after_bb340.us ], [ %4463, %after_bb337.us ], [ %4463, %after_bb334.us ], [ %4463, %after_bb331.us ], [ %4463, %after_bb328.us ], [ %4463, %after_bb325.us ], [ %4463, %after_bb322.us ], [ %4463, %after_bb319.us ], [ %4463, %after_bb316.us ], [ %4463, %after_bb313.us ], [ %4463, %after_bb310.us ], [ %4463, %after_bb307.us ], [ %4463, %after_bb304.us ], [ %4463, %after_bb301.us ], [ %4463, %after_bb298.us ], [ %4463, %after_bb295.us ], [ %4463, %after_bb292.us ], [ %4463, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4734 = phi i8 [ %4453, %true_bb434.us ], [ %4453, %after_bb433.us ], [ %4453, %after_bb430.us ], [ %4453, %after_bb427.us ], [ %4453, %after_bb424.us ], [ %4453, %after_bb421.us ], [ %4453, %after_bb418.us ], [ %4453, %after_bb415.us ], [ %4453, %after_bb412.us ], [ %4453, %after_bb409.us ], [ %4453, %after_bb406.us ], [ %4453, %after_bb403.us ], [ %4453, %after_bb400.us ], [ %4453, %after_bb397.us ], [ %4453, %after_bb394.us ], [ %4453, %after_bb391.us ], [ %4453, %after_bb388.us ], [ %4453, %after_bb385.us ], [ %4453, %after_bb382.us ], [ %4453, %after_bb379.us ], [ %4453, %after_bb376.us ], [ %4453, %after_bb373.us ], [ %4453, %after_bb370.us ], [ %4453, %after_bb367.us ], [ %4453, %after_bb364.us ], [ %4453, %after_bb361.us ], [ %4453, %after_bb358.us ], [ %4453, %after_bb355.us ], [ %4453, %after_bb352.us ], [ %4453, %after_bb349.us ], [ %4453, %after_bb346.us ], [ %4453, %after_bb343.us ], [ %4453, %after_bb340.us ], [ %4453, %after_bb337.us ], [ %4453, %after_bb334.us ], [ %4453, %after_bb331.us ], [ %4453, %after_bb328.us ], [ %4453, %after_bb325.us ], [ %4453, %after_bb322.us ], [ %4453, %after_bb319.us ], [ %4453, %after_bb316.us ], [ %4453, %after_bb313.us ], [ %4453, %after_bb310.us ], [ %4453, %after_bb307.us ], [ %4453, %after_bb304.us ], [ %4453, %after_bb301.us ], [ %4453, %after_bb298.us ], [ %4453, %after_bb295.us ], [ %4453, %after_bb292.us ], [ %4453, %after_bb289.us ], [ %4453, %after_bb286.us ], [ %4453, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4735 = phi i8 [ %4443, %true_bb434.us ], [ %4443, %after_bb433.us ], [ %4443, %after_bb430.us ], [ %4443, %after_bb427.us ], [ %4443, %after_bb424.us ], [ %4443, %after_bb421.us ], [ %4443, %after_bb418.us ], [ %4443, %after_bb415.us ], [ %4443, %after_bb412.us ], [ %4443, %after_bb409.us ], [ %4443, %after_bb406.us ], [ %4443, %after_bb403.us ], [ %4443, %after_bb400.us ], [ %4443, %after_bb397.us ], [ %4443, %after_bb394.us ], [ %4443, %after_bb391.us ], [ %4443, %after_bb388.us ], [ %4443, %after_bb385.us ], [ %4443, %after_bb382.us ], [ %4443, %after_bb379.us ], [ %4443, %after_bb376.us ], [ %4443, %after_bb373.us ], [ %4443, %after_bb370.us ], [ %4443, %after_bb367.us ], [ %4443, %after_bb364.us ], [ %4443, %after_bb361.us ], [ %4443, %after_bb358.us ], [ %4443, %after_bb355.us ], [ %4443, %after_bb352.us ], [ %4443, %after_bb349.us ], [ %4443, %after_bb346.us ], [ %4443, %after_bb343.us ], [ %4443, %after_bb340.us ], [ %4443, %after_bb337.us ], [ %4443, %after_bb334.us ], [ %4443, %after_bb331.us ], [ %4443, %after_bb328.us ], [ %4443, %after_bb325.us ], [ %4443, %after_bb322.us ], [ %4443, %after_bb319.us ], [ %4443, %after_bb316.us ], [ %4443, %after_bb313.us ], [ %4443, %after_bb310.us ], [ %4443, %after_bb307.us ], [ %4443, %after_bb304.us ], [ %4443, %after_bb301.us ], [ %4443, %after_bb298.us ], [ %4443, %after_bb295.us ], [ %4443, %after_bb292.us ], [ %4443, %after_bb289.us ], [ %4443, %after_bb286.us ], [ %4443, %after_bb283.us ], [ %4443, %after_bb280.us ], [ %4443, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4736 = phi i8 [ %4433, %true_bb434.us ], [ %4433, %after_bb433.us ], [ %4433, %after_bb430.us ], [ %4433, %after_bb427.us ], [ %4433, %after_bb424.us ], [ %4433, %after_bb421.us ], [ %4433, %after_bb418.us ], [ %4433, %after_bb415.us ], [ %4433, %after_bb412.us ], [ %4433, %after_bb409.us ], [ %4433, %after_bb406.us ], [ %4433, %after_bb403.us ], [ %4433, %after_bb400.us ], [ %4433, %after_bb397.us ], [ %4433, %after_bb394.us ], [ %4433, %after_bb391.us ], [ %4433, %after_bb388.us ], [ %4433, %after_bb385.us ], [ %4433, %after_bb382.us ], [ %4433, %after_bb379.us ], [ %4433, %after_bb376.us ], [ %4433, %after_bb373.us ], [ %4433, %after_bb370.us ], [ %4433, %after_bb367.us ], [ %4433, %after_bb364.us ], [ %4433, %after_bb361.us ], [ %4433, %after_bb358.us ], [ %4433, %after_bb355.us ], [ %4433, %after_bb352.us ], [ %4433, %after_bb349.us ], [ %4433, %after_bb346.us ], [ %4433, %after_bb343.us ], [ %4433, %after_bb340.us ], [ %4433, %after_bb337.us ], [ %4433, %after_bb334.us ], [ %4433, %after_bb331.us ], [ %4433, %after_bb328.us ], [ %4433, %after_bb325.us ], [ %4433, %after_bb322.us ], [ %4433, %after_bb319.us ], [ %4433, %after_bb316.us ], [ %4433, %after_bb313.us ], [ %4433, %after_bb310.us ], [ %4433, %after_bb307.us ], [ %4433, %after_bb304.us ], [ %4433, %after_bb301.us ], [ %4433, %after_bb298.us ], [ %4433, %after_bb295.us ], [ %4433, %after_bb292.us ], [ %4433, %after_bb289.us ], [ %4433, %after_bb286.us ], [ %4433, %after_bb283.us ], [ %4433, %after_bb280.us ], [ %4433, %after_bb277.us ], [ %4433, %after_bb274.us ], [ %4433, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4737 = phi i8 [ %4423, %true_bb434.us ], [ %4423, %after_bb433.us ], [ %4423, %after_bb430.us ], [ %4423, %after_bb427.us ], [ %4423, %after_bb424.us ], [ %4423, %after_bb421.us ], [ %4423, %after_bb418.us ], [ %4423, %after_bb415.us ], [ %4423, %after_bb412.us ], [ %4423, %after_bb409.us ], [ %4423, %after_bb406.us ], [ %4423, %after_bb403.us ], [ %4423, %after_bb400.us ], [ %4423, %after_bb397.us ], [ %4423, %after_bb394.us ], [ %4423, %after_bb391.us ], [ %4423, %after_bb388.us ], [ %4423, %after_bb385.us ], [ %4423, %after_bb382.us ], [ %4423, %after_bb379.us ], [ %4423, %after_bb376.us ], [ %4423, %after_bb373.us ], [ %4423, %after_bb370.us ], [ %4423, %after_bb367.us ], [ %4423, %after_bb364.us ], [ %4423, %after_bb361.us ], [ %4423, %after_bb358.us ], [ %4423, %after_bb355.us ], [ %4423, %after_bb352.us ], [ %4423, %after_bb349.us ], [ %4423, %after_bb346.us ], [ %4423, %after_bb343.us ], [ %4423, %after_bb340.us ], [ %4423, %after_bb337.us ], [ %4423, %after_bb334.us ], [ %4423, %after_bb331.us ], [ %4423, %after_bb328.us ], [ %4423, %after_bb325.us ], [ %4423, %after_bb322.us ], [ %4423, %after_bb319.us ], [ %4423, %after_bb316.us ], [ %4423, %after_bb313.us ], [ %4423, %after_bb310.us ], [ %4423, %after_bb307.us ], [ %4423, %after_bb304.us ], [ %4423, %after_bb301.us ], [ %4423, %after_bb298.us ], [ %4423, %after_bb295.us ], [ %4423, %after_bb292.us ], [ %4423, %after_bb289.us ], [ %4423, %after_bb286.us ], [ %4423, %after_bb283.us ], [ %4423, %after_bb280.us ], [ %4423, %after_bb277.us ], [ %4423, %after_bb274.us ], [ %4423, %after_bb271.us ], [ %4423, %after_bb268.us ], [ %4423, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4738 = phi i8 [ %4413, %true_bb434.us ], [ %4413, %after_bb433.us ], [ %4413, %after_bb430.us ], [ %4413, %after_bb427.us ], [ %4413, %after_bb424.us ], [ %4413, %after_bb421.us ], [ %4413, %after_bb418.us ], [ %4413, %after_bb415.us ], [ %4413, %after_bb412.us ], [ %4413, %after_bb409.us ], [ %4413, %after_bb406.us ], [ %4413, %after_bb403.us ], [ %4413, %after_bb400.us ], [ %4413, %after_bb397.us ], [ %4413, %after_bb394.us ], [ %4413, %after_bb391.us ], [ %4413, %after_bb388.us ], [ %4413, %after_bb385.us ], [ %4413, %after_bb382.us ], [ %4413, %after_bb379.us ], [ %4413, %after_bb376.us ], [ %4413, %after_bb373.us ], [ %4413, %after_bb370.us ], [ %4413, %after_bb367.us ], [ %4413, %after_bb364.us ], [ %4413, %after_bb361.us ], [ %4413, %after_bb358.us ], [ %4413, %after_bb355.us ], [ %4413, %after_bb352.us ], [ %4413, %after_bb349.us ], [ %4413, %after_bb346.us ], [ %4413, %after_bb343.us ], [ %4413, %after_bb340.us ], [ %4413, %after_bb337.us ], [ %4413, %after_bb334.us ], [ %4413, %after_bb331.us ], [ %4413, %after_bb328.us ], [ %4413, %after_bb325.us ], [ %4413, %after_bb322.us ], [ %4413, %after_bb319.us ], [ %4413, %after_bb316.us ], [ %4413, %after_bb313.us ], [ %4413, %after_bb310.us ], [ %4413, %after_bb307.us ], [ %4413, %after_bb304.us ], [ %4413, %after_bb301.us ], [ %4413, %after_bb298.us ], [ %4413, %after_bb295.us ], [ %4413, %after_bb292.us ], [ %4413, %after_bb289.us ], [ %4413, %after_bb286.us ], [ %4413, %after_bb283.us ], [ %4413, %after_bb280.us ], [ %4413, %after_bb277.us ], [ %4413, %after_bb274.us ], [ %4413, %after_bb271.us ], [ %4413, %after_bb268.us ], [ %4413, %after_bb265.us ], [ %4413, %after_bb262.us ], [ %4413, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4739 = phi i8 [ %4403, %true_bb434.us ], [ %4403, %after_bb433.us ], [ %4403, %after_bb430.us ], [ %4403, %after_bb427.us ], [ %4403, %after_bb424.us ], [ %4403, %after_bb421.us ], [ %4403, %after_bb418.us ], [ %4403, %after_bb415.us ], [ %4403, %after_bb412.us ], [ %4403, %after_bb409.us ], [ %4403, %after_bb406.us ], [ %4403, %after_bb403.us ], [ %4403, %after_bb400.us ], [ %4403, %after_bb397.us ], [ %4403, %after_bb394.us ], [ %4403, %after_bb391.us ], [ %4403, %after_bb388.us ], [ %4403, %after_bb385.us ], [ %4403, %after_bb382.us ], [ %4403, %after_bb379.us ], [ %4403, %after_bb376.us ], [ %4403, %after_bb373.us ], [ %4403, %after_bb370.us ], [ %4403, %after_bb367.us ], [ %4403, %after_bb364.us ], [ %4403, %after_bb361.us ], [ %4403, %after_bb358.us ], [ %4403, %after_bb355.us ], [ %4403, %after_bb352.us ], [ %4403, %after_bb349.us ], [ %4403, %after_bb346.us ], [ %4403, %after_bb343.us ], [ %4403, %after_bb340.us ], [ %4403, %after_bb337.us ], [ %4403, %after_bb334.us ], [ %4403, %after_bb331.us ], [ %4403, %after_bb328.us ], [ %4403, %after_bb325.us ], [ %4403, %after_bb322.us ], [ %4403, %after_bb319.us ], [ %4403, %after_bb316.us ], [ %4403, %after_bb313.us ], [ %4403, %after_bb310.us ], [ %4403, %after_bb307.us ], [ %4403, %after_bb304.us ], [ %4403, %after_bb301.us ], [ %4403, %after_bb298.us ], [ %4403, %after_bb295.us ], [ %4403, %after_bb292.us ], [ %4403, %after_bb289.us ], [ %4403, %after_bb286.us ], [ %4403, %after_bb283.us ], [ %4403, %after_bb280.us ], [ %4403, %after_bb277.us ], [ %4403, %after_bb274.us ], [ %4403, %after_bb271.us ], [ %4403, %after_bb268.us ], [ %4403, %after_bb265.us ], [ %4403, %after_bb262.us ], [ %4403, %after_bb259.us ], [ %4403, %after_bb256.us ], [ %4403, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4740 = phi i8 [ %4408, %true_bb434.us ], [ %4408, %after_bb433.us ], [ %4408, %after_bb430.us ], [ %4408, %after_bb427.us ], [ %4408, %after_bb424.us ], [ %4408, %after_bb421.us ], [ %4408, %after_bb418.us ], [ %4408, %after_bb415.us ], [ %4408, %after_bb412.us ], [ %4408, %after_bb409.us ], [ %4408, %after_bb406.us ], [ %4408, %after_bb403.us ], [ %4408, %after_bb400.us ], [ %4408, %after_bb397.us ], [ %4408, %after_bb394.us ], [ %4408, %after_bb391.us ], [ %4408, %after_bb388.us ], [ %4408, %after_bb385.us ], [ %4408, %after_bb382.us ], [ %4408, %after_bb379.us ], [ %4408, %after_bb376.us ], [ %4408, %after_bb373.us ], [ %4408, %after_bb370.us ], [ %4408, %after_bb367.us ], [ %4408, %after_bb364.us ], [ %4408, %after_bb361.us ], [ %4408, %after_bb358.us ], [ %4408, %after_bb355.us ], [ %4408, %after_bb352.us ], [ %4408, %after_bb349.us ], [ %4408, %after_bb346.us ], [ %4408, %after_bb343.us ], [ %4408, %after_bb340.us ], [ %4408, %after_bb337.us ], [ %4408, %after_bb334.us ], [ %4408, %after_bb331.us ], [ %4408, %after_bb328.us ], [ %4408, %after_bb325.us ], [ %4408, %after_bb322.us ], [ %4408, %after_bb319.us ], [ %4408, %after_bb316.us ], [ %4408, %after_bb313.us ], [ %4408, %after_bb310.us ], [ %4408, %after_bb307.us ], [ %4408, %after_bb304.us ], [ %4408, %after_bb301.us ], [ %4408, %after_bb298.us ], [ %4408, %after_bb295.us ], [ %4408, %after_bb292.us ], [ %4408, %after_bb289.us ], [ %4408, %after_bb286.us ], [ %4408, %after_bb283.us ], [ %4408, %after_bb280.us ], [ %4408, %after_bb277.us ], [ %4408, %after_bb274.us ], [ %4408, %after_bb271.us ], [ %4408, %after_bb268.us ], [ %4408, %after_bb265.us ], [ %4408, %after_bb262.us ], [ %4408, %after_bb259.us ], [ %4408, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4741 = phi i8 [ %4418, %true_bb434.us ], [ %4418, %after_bb433.us ], [ %4418, %after_bb430.us ], [ %4418, %after_bb427.us ], [ %4418, %after_bb424.us ], [ %4418, %after_bb421.us ], [ %4418, %after_bb418.us ], [ %4418, %after_bb415.us ], [ %4418, %after_bb412.us ], [ %4418, %after_bb409.us ], [ %4418, %after_bb406.us ], [ %4418, %after_bb403.us ], [ %4418, %after_bb400.us ], [ %4418, %after_bb397.us ], [ %4418, %after_bb394.us ], [ %4418, %after_bb391.us ], [ %4418, %after_bb388.us ], [ %4418, %after_bb385.us ], [ %4418, %after_bb382.us ], [ %4418, %after_bb379.us ], [ %4418, %after_bb376.us ], [ %4418, %after_bb373.us ], [ %4418, %after_bb370.us ], [ %4418, %after_bb367.us ], [ %4418, %after_bb364.us ], [ %4418, %after_bb361.us ], [ %4418, %after_bb358.us ], [ %4418, %after_bb355.us ], [ %4418, %after_bb352.us ], [ %4418, %after_bb349.us ], [ %4418, %after_bb346.us ], [ %4418, %after_bb343.us ], [ %4418, %after_bb340.us ], [ %4418, %after_bb337.us ], [ %4418, %after_bb334.us ], [ %4418, %after_bb331.us ], [ %4418, %after_bb328.us ], [ %4418, %after_bb325.us ], [ %4418, %after_bb322.us ], [ %4418, %after_bb319.us ], [ %4418, %after_bb316.us ], [ %4418, %after_bb313.us ], [ %4418, %after_bb310.us ], [ %4418, %after_bb307.us ], [ %4418, %after_bb304.us ], [ %4418, %after_bb301.us ], [ %4418, %after_bb298.us ], [ %4418, %after_bb295.us ], [ %4418, %after_bb292.us ], [ %4418, %after_bb289.us ], [ %4418, %after_bb286.us ], [ %4418, %after_bb283.us ], [ %4418, %after_bb280.us ], [ %4418, %after_bb277.us ], [ %4418, %after_bb274.us ], [ %4418, %after_bb271.us ], [ %4418, %after_bb268.us ], [ %4418, %after_bb265.us ], [ %4418, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4742 = phi i8 [ %4428, %true_bb434.us ], [ %4428, %after_bb433.us ], [ %4428, %after_bb430.us ], [ %4428, %after_bb427.us ], [ %4428, %after_bb424.us ], [ %4428, %after_bb421.us ], [ %4428, %after_bb418.us ], [ %4428, %after_bb415.us ], [ %4428, %after_bb412.us ], [ %4428, %after_bb409.us ], [ %4428, %after_bb406.us ], [ %4428, %after_bb403.us ], [ %4428, %after_bb400.us ], [ %4428, %after_bb397.us ], [ %4428, %after_bb394.us ], [ %4428, %after_bb391.us ], [ %4428, %after_bb388.us ], [ %4428, %after_bb385.us ], [ %4428, %after_bb382.us ], [ %4428, %after_bb379.us ], [ %4428, %after_bb376.us ], [ %4428, %after_bb373.us ], [ %4428, %after_bb370.us ], [ %4428, %after_bb367.us ], [ %4428, %after_bb364.us ], [ %4428, %after_bb361.us ], [ %4428, %after_bb358.us ], [ %4428, %after_bb355.us ], [ %4428, %after_bb352.us ], [ %4428, %after_bb349.us ], [ %4428, %after_bb346.us ], [ %4428, %after_bb343.us ], [ %4428, %after_bb340.us ], [ %4428, %after_bb337.us ], [ %4428, %after_bb334.us ], [ %4428, %after_bb331.us ], [ %4428, %after_bb328.us ], [ %4428, %after_bb325.us ], [ %4428, %after_bb322.us ], [ %4428, %after_bb319.us ], [ %4428, %after_bb316.us ], [ %4428, %after_bb313.us ], [ %4428, %after_bb310.us ], [ %4428, %after_bb307.us ], [ %4428, %after_bb304.us ], [ %4428, %after_bb301.us ], [ %4428, %after_bb298.us ], [ %4428, %after_bb295.us ], [ %4428, %after_bb292.us ], [ %4428, %after_bb289.us ], [ %4428, %after_bb286.us ], [ %4428, %after_bb283.us ], [ %4428, %after_bb280.us ], [ %4428, %after_bb277.us ], [ %4428, %after_bb274.us ], [ %4428, %after_bb271.us ], [ %4428, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4743 = phi i8 [ %4438, %true_bb434.us ], [ %4438, %after_bb433.us ], [ %4438, %after_bb430.us ], [ %4438, %after_bb427.us ], [ %4438, %after_bb424.us ], [ %4438, %after_bb421.us ], [ %4438, %after_bb418.us ], [ %4438, %after_bb415.us ], [ %4438, %after_bb412.us ], [ %4438, %after_bb409.us ], [ %4438, %after_bb406.us ], [ %4438, %after_bb403.us ], [ %4438, %after_bb400.us ], [ %4438, %after_bb397.us ], [ %4438, %after_bb394.us ], [ %4438, %after_bb391.us ], [ %4438, %after_bb388.us ], [ %4438, %after_bb385.us ], [ %4438, %after_bb382.us ], [ %4438, %after_bb379.us ], [ %4438, %after_bb376.us ], [ %4438, %after_bb373.us ], [ %4438, %after_bb370.us ], [ %4438, %after_bb367.us ], [ %4438, %after_bb364.us ], [ %4438, %after_bb361.us ], [ %4438, %after_bb358.us ], [ %4438, %after_bb355.us ], [ %4438, %after_bb352.us ], [ %4438, %after_bb349.us ], [ %4438, %after_bb346.us ], [ %4438, %after_bb343.us ], [ %4438, %after_bb340.us ], [ %4438, %after_bb337.us ], [ %4438, %after_bb334.us ], [ %4438, %after_bb331.us ], [ %4438, %after_bb328.us ], [ %4438, %after_bb325.us ], [ %4438, %after_bb322.us ], [ %4438, %after_bb319.us ], [ %4438, %after_bb316.us ], [ %4438, %after_bb313.us ], [ %4438, %after_bb310.us ], [ %4438, %after_bb307.us ], [ %4438, %after_bb304.us ], [ %4438, %after_bb301.us ], [ %4438, %after_bb298.us ], [ %4438, %after_bb295.us ], [ %4438, %after_bb292.us ], [ %4438, %after_bb289.us ], [ %4438, %after_bb286.us ], [ %4438, %after_bb283.us ], [ %4438, %after_bb280.us ], [ %4438, %after_bb277.us ], [ %4438, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4744 = phi i8 [ %4448, %true_bb434.us ], [ %4448, %after_bb433.us ], [ %4448, %after_bb430.us ], [ %4448, %after_bb427.us ], [ %4448, %after_bb424.us ], [ %4448, %after_bb421.us ], [ %4448, %after_bb418.us ], [ %4448, %after_bb415.us ], [ %4448, %after_bb412.us ], [ %4448, %after_bb409.us ], [ %4448, %after_bb406.us ], [ %4448, %after_bb403.us ], [ %4448, %after_bb400.us ], [ %4448, %after_bb397.us ], [ %4448, %after_bb394.us ], [ %4448, %after_bb391.us ], [ %4448, %after_bb388.us ], [ %4448, %after_bb385.us ], [ %4448, %after_bb382.us ], [ %4448, %after_bb379.us ], [ %4448, %after_bb376.us ], [ %4448, %after_bb373.us ], [ %4448, %after_bb370.us ], [ %4448, %after_bb367.us ], [ %4448, %after_bb364.us ], [ %4448, %after_bb361.us ], [ %4448, %after_bb358.us ], [ %4448, %after_bb355.us ], [ %4448, %after_bb352.us ], [ %4448, %after_bb349.us ], [ %4448, %after_bb346.us ], [ %4448, %after_bb343.us ], [ %4448, %after_bb340.us ], [ %4448, %after_bb337.us ], [ %4448, %after_bb334.us ], [ %4448, %after_bb331.us ], [ %4448, %after_bb328.us ], [ %4448, %after_bb325.us ], [ %4448, %after_bb322.us ], [ %4448, %after_bb319.us ], [ %4448, %after_bb316.us ], [ %4448, %after_bb313.us ], [ %4448, %after_bb310.us ], [ %4448, %after_bb307.us ], [ %4448, %after_bb304.us ], [ %4448, %after_bb301.us ], [ %4448, %after_bb298.us ], [ %4448, %after_bb295.us ], [ %4448, %after_bb292.us ], [ %4448, %after_bb289.us ], [ %4448, %after_bb286.us ], [ %4448, %after_bb283.us ], [ %4448, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4745 = phi i8 [ %4458, %true_bb434.us ], [ %4458, %after_bb433.us ], [ %4458, %after_bb430.us ], [ %4458, %after_bb427.us ], [ %4458, %after_bb424.us ], [ %4458, %after_bb421.us ], [ %4458, %after_bb418.us ], [ %4458, %after_bb415.us ], [ %4458, %after_bb412.us ], [ %4458, %after_bb409.us ], [ %4458, %after_bb406.us ], [ %4458, %after_bb403.us ], [ %4458, %after_bb400.us ], [ %4458, %after_bb397.us ], [ %4458, %after_bb394.us ], [ %4458, %after_bb391.us ], [ %4458, %after_bb388.us ], [ %4458, %after_bb385.us ], [ %4458, %after_bb382.us ], [ %4458, %after_bb379.us ], [ %4458, %after_bb376.us ], [ %4458, %after_bb373.us ], [ %4458, %after_bb370.us ], [ %4458, %after_bb367.us ], [ %4458, %after_bb364.us ], [ %4458, %after_bb361.us ], [ %4458, %after_bb358.us ], [ %4458, %after_bb355.us ], [ %4458, %after_bb352.us ], [ %4458, %after_bb349.us ], [ %4458, %after_bb346.us ], [ %4458, %after_bb343.us ], [ %4458, %after_bb340.us ], [ %4458, %after_bb337.us ], [ %4458, %after_bb334.us ], [ %4458, %after_bb331.us ], [ %4458, %after_bb328.us ], [ %4458, %after_bb325.us ], [ %4458, %after_bb322.us ], [ %4458, %after_bb319.us ], [ %4458, %after_bb316.us ], [ %4458, %after_bb313.us ], [ %4458, %after_bb310.us ], [ %4458, %after_bb307.us ], [ %4458, %after_bb304.us ], [ %4458, %after_bb301.us ], [ %4458, %after_bb298.us ], [ %4458, %after_bb295.us ], [ %4458, %after_bb292.us ], [ %4458, %after_bb289.us ], [ %4458, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4746 = phi i8 [ %4468, %true_bb434.us ], [ %4468, %after_bb433.us ], [ %4468, %after_bb430.us ], [ %4468, %after_bb427.us ], [ %4468, %after_bb424.us ], [ %4468, %after_bb421.us ], [ %4468, %after_bb418.us ], [ %4468, %after_bb415.us ], [ %4468, %after_bb412.us ], [ %4468, %after_bb409.us ], [ %4468, %after_bb406.us ], [ %4468, %after_bb403.us ], [ %4468, %after_bb400.us ], [ %4468, %after_bb397.us ], [ %4468, %after_bb394.us ], [ %4468, %after_bb391.us ], [ %4468, %after_bb388.us ], [ %4468, %after_bb385.us ], [ %4468, %after_bb382.us ], [ %4468, %after_bb379.us ], [ %4468, %after_bb376.us ], [ %4468, %after_bb373.us ], [ %4468, %after_bb370.us ], [ %4468, %after_bb367.us ], [ %4468, %after_bb364.us ], [ %4468, %after_bb361.us ], [ %4468, %after_bb358.us ], [ %4468, %after_bb355.us ], [ %4468, %after_bb352.us ], [ %4468, %after_bb349.us ], [ %4468, %after_bb346.us ], [ %4468, %after_bb343.us ], [ %4468, %after_bb340.us ], [ %4468, %after_bb337.us ], [ %4468, %after_bb334.us ], [ %4468, %after_bb331.us ], [ %4468, %after_bb328.us ], [ %4468, %after_bb325.us ], [ %4468, %after_bb322.us ], [ %4468, %after_bb319.us ], [ %4468, %after_bb316.us ], [ %4468, %after_bb313.us ], [ %4468, %after_bb310.us ], [ %4468, %after_bb307.us ], [ %4468, %after_bb304.us ], [ %4468, %after_bb301.us ], [ %4468, %after_bb298.us ], [ %4468, %after_bb295.us ], [ %4468, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4747 = phi i8 [ %4478, %true_bb434.us ], [ %4478, %after_bb433.us ], [ %4478, %after_bb430.us ], [ %4478, %after_bb427.us ], [ %4478, %after_bb424.us ], [ %4478, %after_bb421.us ], [ %4478, %after_bb418.us ], [ %4478, %after_bb415.us ], [ %4478, %after_bb412.us ], [ %4478, %after_bb409.us ], [ %4478, %after_bb406.us ], [ %4478, %after_bb403.us ], [ %4478, %after_bb400.us ], [ %4478, %after_bb397.us ], [ %4478, %after_bb394.us ], [ %4478, %after_bb391.us ], [ %4478, %after_bb388.us ], [ %4478, %after_bb385.us ], [ %4478, %after_bb382.us ], [ %4478, %after_bb379.us ], [ %4478, %after_bb376.us ], [ %4478, %after_bb373.us ], [ %4478, %after_bb370.us ], [ %4478, %after_bb367.us ], [ %4478, %after_bb364.us ], [ %4478, %after_bb361.us ], [ %4478, %after_bb358.us ], [ %4478, %after_bb355.us ], [ %4478, %after_bb352.us ], [ %4478, %after_bb349.us ], [ %4478, %after_bb346.us ], [ %4478, %after_bb343.us ], [ %4478, %after_bb340.us ], [ %4478, %after_bb337.us ], [ %4478, %after_bb334.us ], [ %4478, %after_bb331.us ], [ %4478, %after_bb328.us ], [ %4478, %after_bb325.us ], [ %4478, %after_bb322.us ], [ %4478, %after_bb319.us ], [ %4478, %after_bb316.us ], [ %4478, %after_bb313.us ], [ %4478, %after_bb310.us ], [ %4478, %after_bb307.us ], [ %4478, %after_bb304.us ], [ %4478, %after_bb301.us ], [ %4478, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4748 = phi i8 [ %4488, %true_bb434.us ], [ %4488, %after_bb433.us ], [ %4488, %after_bb430.us ], [ %4488, %after_bb427.us ], [ %4488, %after_bb424.us ], [ %4488, %after_bb421.us ], [ %4488, %after_bb418.us ], [ %4488, %after_bb415.us ], [ %4488, %after_bb412.us ], [ %4488, %after_bb409.us ], [ %4488, %after_bb406.us ], [ %4488, %after_bb403.us ], [ %4488, %after_bb400.us ], [ %4488, %after_bb397.us ], [ %4488, %after_bb394.us ], [ %4488, %after_bb391.us ], [ %4488, %after_bb388.us ], [ %4488, %after_bb385.us ], [ %4488, %after_bb382.us ], [ %4488, %after_bb379.us ], [ %4488, %after_bb376.us ], [ %4488, %after_bb373.us ], [ %4488, %after_bb370.us ], [ %4488, %after_bb367.us ], [ %4488, %after_bb364.us ], [ %4488, %after_bb361.us ], [ %4488, %after_bb358.us ], [ %4488, %after_bb355.us ], [ %4488, %after_bb352.us ], [ %4488, %after_bb349.us ], [ %4488, %after_bb346.us ], [ %4488, %after_bb343.us ], [ %4488, %after_bb340.us ], [ %4488, %after_bb337.us ], [ %4488, %after_bb334.us ], [ %4488, %after_bb331.us ], [ %4488, %after_bb328.us ], [ %4488, %after_bb325.us ], [ %4488, %after_bb322.us ], [ %4488, %after_bb319.us ], [ %4488, %after_bb316.us ], [ %4488, %after_bb313.us ], [ %4488, %after_bb310.us ], [ %4488, %after_bb307.us ], [ %4488, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4749 = phi i8 [ %4498, %true_bb434.us ], [ %4498, %after_bb433.us ], [ %4498, %after_bb430.us ], [ %4498, %after_bb427.us ], [ %4498, %after_bb424.us ], [ %4498, %after_bb421.us ], [ %4498, %after_bb418.us ], [ %4498, %after_bb415.us ], [ %4498, %after_bb412.us ], [ %4498, %after_bb409.us ], [ %4498, %after_bb406.us ], [ %4498, %after_bb403.us ], [ %4498, %after_bb400.us ], [ %4498, %after_bb397.us ], [ %4498, %after_bb394.us ], [ %4498, %after_bb391.us ], [ %4498, %after_bb388.us ], [ %4498, %after_bb385.us ], [ %4498, %after_bb382.us ], [ %4498, %after_bb379.us ], [ %4498, %after_bb376.us ], [ %4498, %after_bb373.us ], [ %4498, %after_bb370.us ], [ %4498, %after_bb367.us ], [ %4498, %after_bb364.us ], [ %4498, %after_bb361.us ], [ %4498, %after_bb358.us ], [ %4498, %after_bb355.us ], [ %4498, %after_bb352.us ], [ %4498, %after_bb349.us ], [ %4498, %after_bb346.us ], [ %4498, %after_bb343.us ], [ %4498, %after_bb340.us ], [ %4498, %after_bb337.us ], [ %4498, %after_bb334.us ], [ %4498, %after_bb331.us ], [ %4498, %after_bb328.us ], [ %4498, %after_bb325.us ], [ %4498, %after_bb322.us ], [ %4498, %after_bb319.us ], [ %4498, %after_bb316.us ], [ %4498, %after_bb313.us ], [ %4498, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4750 = phi i8 [ %4508, %true_bb434.us ], [ %4508, %after_bb433.us ], [ %4508, %after_bb430.us ], [ %4508, %after_bb427.us ], [ %4508, %after_bb424.us ], [ %4508, %after_bb421.us ], [ %4508, %after_bb418.us ], [ %4508, %after_bb415.us ], [ %4508, %after_bb412.us ], [ %4508, %after_bb409.us ], [ %4508, %after_bb406.us ], [ %4508, %after_bb403.us ], [ %4508, %after_bb400.us ], [ %4508, %after_bb397.us ], [ %4508, %after_bb394.us ], [ %4508, %after_bb391.us ], [ %4508, %after_bb388.us ], [ %4508, %after_bb385.us ], [ %4508, %after_bb382.us ], [ %4508, %after_bb379.us ], [ %4508, %after_bb376.us ], [ %4508, %after_bb373.us ], [ %4508, %after_bb370.us ], [ %4508, %after_bb367.us ], [ %4508, %after_bb364.us ], [ %4508, %after_bb361.us ], [ %4508, %after_bb358.us ], [ %4508, %after_bb355.us ], [ %4508, %after_bb352.us ], [ %4508, %after_bb349.us ], [ %4508, %after_bb346.us ], [ %4508, %after_bb343.us ], [ %4508, %after_bb340.us ], [ %4508, %after_bb337.us ], [ %4508, %after_bb334.us ], [ %4508, %after_bb331.us ], [ %4508, %after_bb328.us ], [ %4508, %after_bb325.us ], [ %4508, %after_bb322.us ], [ %4508, %after_bb319.us ], [ %4508, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4751 = phi i8 [ %4518, %true_bb434.us ], [ %4518, %after_bb433.us ], [ %4518, %after_bb430.us ], [ %4518, %after_bb427.us ], [ %4518, %after_bb424.us ], [ %4518, %after_bb421.us ], [ %4518, %after_bb418.us ], [ %4518, %after_bb415.us ], [ %4518, %after_bb412.us ], [ %4518, %after_bb409.us ], [ %4518, %after_bb406.us ], [ %4518, %after_bb403.us ], [ %4518, %after_bb400.us ], [ %4518, %after_bb397.us ], [ %4518, %after_bb394.us ], [ %4518, %after_bb391.us ], [ %4518, %after_bb388.us ], [ %4518, %after_bb385.us ], [ %4518, %after_bb382.us ], [ %4518, %after_bb379.us ], [ %4518, %after_bb376.us ], [ %4518, %after_bb373.us ], [ %4518, %after_bb370.us ], [ %4518, %after_bb367.us ], [ %4518, %after_bb364.us ], [ %4518, %after_bb361.us ], [ %4518, %after_bb358.us ], [ %4518, %after_bb355.us ], [ %4518, %after_bb352.us ], [ %4518, %after_bb349.us ], [ %4518, %after_bb346.us ], [ %4518, %after_bb343.us ], [ %4518, %after_bb340.us ], [ %4518, %after_bb337.us ], [ %4518, %after_bb334.us ], [ %4518, %after_bb331.us ], [ %4518, %after_bb328.us ], [ %4518, %after_bb325.us ], [ %4518, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4752 = phi i8 [ %4528, %true_bb434.us ], [ %4528, %after_bb433.us ], [ %4528, %after_bb430.us ], [ %4528, %after_bb427.us ], [ %4528, %after_bb424.us ], [ %4528, %after_bb421.us ], [ %4528, %after_bb418.us ], [ %4528, %after_bb415.us ], [ %4528, %after_bb412.us ], [ %4528, %after_bb409.us ], [ %4528, %after_bb406.us ], [ %4528, %after_bb403.us ], [ %4528, %after_bb400.us ], [ %4528, %after_bb397.us ], [ %4528, %after_bb394.us ], [ %4528, %after_bb391.us ], [ %4528, %after_bb388.us ], [ %4528, %after_bb385.us ], [ %4528, %after_bb382.us ], [ %4528, %after_bb379.us ], [ %4528, %after_bb376.us ], [ %4528, %after_bb373.us ], [ %4528, %after_bb370.us ], [ %4528, %after_bb367.us ], [ %4528, %after_bb364.us ], [ %4528, %after_bb361.us ], [ %4528, %after_bb358.us ], [ %4528, %after_bb355.us ], [ %4528, %after_bb352.us ], [ %4528, %after_bb349.us ], [ %4528, %after_bb346.us ], [ %4528, %after_bb343.us ], [ %4528, %after_bb340.us ], [ %4528, %after_bb337.us ], [ %4528, %after_bb334.us ], [ %4528, %after_bb331.us ], [ %4528, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4753 = phi i8 [ %4538, %true_bb434.us ], [ %4538, %after_bb433.us ], [ %4538, %after_bb430.us ], [ %4538, %after_bb427.us ], [ %4538, %after_bb424.us ], [ %4538, %after_bb421.us ], [ %4538, %after_bb418.us ], [ %4538, %after_bb415.us ], [ %4538, %after_bb412.us ], [ %4538, %after_bb409.us ], [ %4538, %after_bb406.us ], [ %4538, %after_bb403.us ], [ %4538, %after_bb400.us ], [ %4538, %after_bb397.us ], [ %4538, %after_bb394.us ], [ %4538, %after_bb391.us ], [ %4538, %after_bb388.us ], [ %4538, %after_bb385.us ], [ %4538, %after_bb382.us ], [ %4538, %after_bb379.us ], [ %4538, %after_bb376.us ], [ %4538, %after_bb373.us ], [ %4538, %after_bb370.us ], [ %4538, %after_bb367.us ], [ %4538, %after_bb364.us ], [ %4538, %after_bb361.us ], [ %4538, %after_bb358.us ], [ %4538, %after_bb355.us ], [ %4538, %after_bb352.us ], [ %4538, %after_bb349.us ], [ %4538, %after_bb346.us ], [ %4538, %after_bb343.us ], [ %4538, %after_bb340.us ], [ %4538, %after_bb337.us ], [ %4538, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4754 = phi i8 [ %4548, %true_bb434.us ], [ %4548, %after_bb433.us ], [ %4548, %after_bb430.us ], [ %4548, %after_bb427.us ], [ %4548, %after_bb424.us ], [ %4548, %after_bb421.us ], [ %4548, %after_bb418.us ], [ %4548, %after_bb415.us ], [ %4548, %after_bb412.us ], [ %4548, %after_bb409.us ], [ %4548, %after_bb406.us ], [ %4548, %after_bb403.us ], [ %4548, %after_bb400.us ], [ %4548, %after_bb397.us ], [ %4548, %after_bb394.us ], [ %4548, %after_bb391.us ], [ %4548, %after_bb388.us ], [ %4548, %after_bb385.us ], [ %4548, %after_bb382.us ], [ %4548, %after_bb379.us ], [ %4548, %after_bb376.us ], [ %4548, %after_bb373.us ], [ %4548, %after_bb370.us ], [ %4548, %after_bb367.us ], [ %4548, %after_bb364.us ], [ %4548, %after_bb361.us ], [ %4548, %after_bb358.us ], [ %4548, %after_bb355.us ], [ %4548, %after_bb352.us ], [ %4548, %after_bb349.us ], [ %4548, %after_bb346.us ], [ %4548, %after_bb343.us ], [ %4548, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4755 = phi i8 [ %4558, %true_bb434.us ], [ %4558, %after_bb433.us ], [ %4558, %after_bb430.us ], [ %4558, %after_bb427.us ], [ %4558, %after_bb424.us ], [ %4558, %after_bb421.us ], [ %4558, %after_bb418.us ], [ %4558, %after_bb415.us ], [ %4558, %after_bb412.us ], [ %4558, %after_bb409.us ], [ %4558, %after_bb406.us ], [ %4558, %after_bb403.us ], [ %4558, %after_bb400.us ], [ %4558, %after_bb397.us ], [ %4558, %after_bb394.us ], [ %4558, %after_bb391.us ], [ %4558, %after_bb388.us ], [ %4558, %after_bb385.us ], [ %4558, %after_bb382.us ], [ %4558, %after_bb379.us ], [ %4558, %after_bb376.us ], [ %4558, %after_bb373.us ], [ %4558, %after_bb370.us ], [ %4558, %after_bb367.us ], [ %4558, %after_bb364.us ], [ %4558, %after_bb361.us ], [ %4558, %after_bb358.us ], [ %4558, %after_bb355.us ], [ %4558, %after_bb352.us ], [ %4558, %after_bb349.us ], [ %4558, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4756 = phi i8 [ %4568, %true_bb434.us ], [ %4568, %after_bb433.us ], [ %4568, %after_bb430.us ], [ %4568, %after_bb427.us ], [ %4568, %after_bb424.us ], [ %4568, %after_bb421.us ], [ %4568, %after_bb418.us ], [ %4568, %after_bb415.us ], [ %4568, %after_bb412.us ], [ %4568, %after_bb409.us ], [ %4568, %after_bb406.us ], [ %4568, %after_bb403.us ], [ %4568, %after_bb400.us ], [ %4568, %after_bb397.us ], [ %4568, %after_bb394.us ], [ %4568, %after_bb391.us ], [ %4568, %after_bb388.us ], [ %4568, %after_bb385.us ], [ %4568, %after_bb382.us ], [ %4568, %after_bb379.us ], [ %4568, %after_bb376.us ], [ %4568, %after_bb373.us ], [ %4568, %after_bb370.us ], [ %4568, %after_bb367.us ], [ %4568, %after_bb364.us ], [ %4568, %after_bb361.us ], [ %4568, %after_bb358.us ], [ %4568, %after_bb355.us ], [ %4568, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4757 = phi i8 [ %4578, %true_bb434.us ], [ %4578, %after_bb433.us ], [ %4578, %after_bb430.us ], [ %4578, %after_bb427.us ], [ %4578, %after_bb424.us ], [ %4578, %after_bb421.us ], [ %4578, %after_bb418.us ], [ %4578, %after_bb415.us ], [ %4578, %after_bb412.us ], [ %4578, %after_bb409.us ], [ %4578, %after_bb406.us ], [ %4578, %after_bb403.us ], [ %4578, %after_bb400.us ], [ %4578, %after_bb397.us ], [ %4578, %after_bb394.us ], [ %4578, %after_bb391.us ], [ %4578, %after_bb388.us ], [ %4578, %after_bb385.us ], [ %4578, %after_bb382.us ], [ %4578, %after_bb379.us ], [ %4578, %after_bb376.us ], [ %4578, %after_bb373.us ], [ %4578, %after_bb370.us ], [ %4578, %after_bb367.us ], [ %4578, %after_bb364.us ], [ %4578, %after_bb361.us ], [ %4578, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4758 = phi i8 [ %4588, %true_bb434.us ], [ %4588, %after_bb433.us ], [ %4588, %after_bb430.us ], [ %4588, %after_bb427.us ], [ %4588, %after_bb424.us ], [ %4588, %after_bb421.us ], [ %4588, %after_bb418.us ], [ %4588, %after_bb415.us ], [ %4588, %after_bb412.us ], [ %4588, %after_bb409.us ], [ %4588, %after_bb406.us ], [ %4588, %after_bb403.us ], [ %4588, %after_bb400.us ], [ %4588, %after_bb397.us ], [ %4588, %after_bb394.us ], [ %4588, %after_bb391.us ], [ %4588, %after_bb388.us ], [ %4588, %after_bb385.us ], [ %4588, %after_bb382.us ], [ %4588, %after_bb379.us ], [ %4588, %after_bb376.us ], [ %4588, %after_bb373.us ], [ %4588, %after_bb370.us ], [ %4588, %after_bb367.us ], [ %4588, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4759 = phi i8 [ %4598, %true_bb434.us ], [ %4598, %after_bb433.us ], [ %4598, %after_bb430.us ], [ %4598, %after_bb427.us ], [ %4598, %after_bb424.us ], [ %4598, %after_bb421.us ], [ %4598, %after_bb418.us ], [ %4598, %after_bb415.us ], [ %4598, %after_bb412.us ], [ %4598, %after_bb409.us ], [ %4598, %after_bb406.us ], [ %4598, %after_bb403.us ], [ %4598, %after_bb400.us ], [ %4598, %after_bb397.us ], [ %4598, %after_bb394.us ], [ %4598, %after_bb391.us ], [ %4598, %after_bb388.us ], [ %4598, %after_bb385.us ], [ %4598, %after_bb382.us ], [ %4598, %after_bb379.us ], [ %4598, %after_bb376.us ], [ %4598, %after_bb373.us ], [ %4598, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4760 = phi i8 [ %4608, %true_bb434.us ], [ %4608, %after_bb433.us ], [ %4608, %after_bb430.us ], [ %4608, %after_bb427.us ], [ %4608, %after_bb424.us ], [ %4608, %after_bb421.us ], [ %4608, %after_bb418.us ], [ %4608, %after_bb415.us ], [ %4608, %after_bb412.us ], [ %4608, %after_bb409.us ], [ %4608, %after_bb406.us ], [ %4608, %after_bb403.us ], [ %4608, %after_bb400.us ], [ %4608, %after_bb397.us ], [ %4608, %after_bb394.us ], [ %4608, %after_bb391.us ], [ %4608, %after_bb388.us ], [ %4608, %after_bb385.us ], [ %4608, %after_bb382.us ], [ %4608, %after_bb379.us ], [ %4608, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4761 = phi i8 [ %4618, %true_bb434.us ], [ %4618, %after_bb433.us ], [ %4618, %after_bb430.us ], [ %4618, %after_bb427.us ], [ %4618, %after_bb424.us ], [ %4618, %after_bb421.us ], [ %4618, %after_bb418.us ], [ %4618, %after_bb415.us ], [ %4618, %after_bb412.us ], [ %4618, %after_bb409.us ], [ %4618, %after_bb406.us ], [ %4618, %after_bb403.us ], [ %4618, %after_bb400.us ], [ %4618, %after_bb397.us ], [ %4618, %after_bb394.us ], [ %4618, %after_bb391.us ], [ %4618, %after_bb388.us ], [ %4618, %after_bb385.us ], [ %4618, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4762 = phi i8 [ %4628, %true_bb434.us ], [ %4628, %after_bb433.us ], [ %4628, %after_bb430.us ], [ %4628, %after_bb427.us ], [ %4628, %after_bb424.us ], [ %4628, %after_bb421.us ], [ %4628, %after_bb418.us ], [ %4628, %after_bb415.us ], [ %4628, %after_bb412.us ], [ %4628, %after_bb409.us ], [ %4628, %after_bb406.us ], [ %4628, %after_bb403.us ], [ %4628, %after_bb400.us ], [ %4628, %after_bb397.us ], [ %4628, %after_bb394.us ], [ %4628, %after_bb391.us ], [ %4628, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4763 = phi i8 [ %4638, %true_bb434.us ], [ %4638, %after_bb433.us ], [ %4638, %after_bb430.us ], [ %4638, %after_bb427.us ], [ %4638, %after_bb424.us ], [ %4638, %after_bb421.us ], [ %4638, %after_bb418.us ], [ %4638, %after_bb415.us ], [ %4638, %after_bb412.us ], [ %4638, %after_bb409.us ], [ %4638, %after_bb406.us ], [ %4638, %after_bb403.us ], [ %4638, %after_bb400.us ], [ %4638, %after_bb397.us ], [ %4638, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4764 = phi i8 [ %4648, %true_bb434.us ], [ %4648, %after_bb433.us ], [ %4648, %after_bb430.us ], [ %4648, %after_bb427.us ], [ %4648, %after_bb424.us ], [ %4648, %after_bb421.us ], [ %4648, %after_bb418.us ], [ %4648, %after_bb415.us ], [ %4648, %after_bb412.us ], [ %4648, %after_bb409.us ], [ %4648, %after_bb406.us ], [ %4648, %after_bb403.us ], [ %4648, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4765 = phi i8 [ %4658, %true_bb434.us ], [ %4658, %after_bb433.us ], [ %4658, %after_bb430.us ], [ %4658, %after_bb427.us ], [ %4658, %after_bb424.us ], [ %4658, %after_bb421.us ], [ %4658, %after_bb418.us ], [ %4658, %after_bb415.us ], [ %4658, %after_bb412.us ], [ %4658, %after_bb409.us ], [ %4658, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4766 = phi i8 [ %4668, %true_bb434.us ], [ %4668, %after_bb433.us ], [ %4668, %after_bb430.us ], [ %4668, %after_bb427.us ], [ %4668, %after_bb424.us ], [ %4668, %after_bb421.us ], [ %4668, %after_bb418.us ], [ %4668, %after_bb415.us ], [ %4668, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4767 = phi i8 [ %4678, %true_bb434.us ], [ %4678, %after_bb433.us ], [ %4678, %after_bb430.us ], [ %4678, %after_bb427.us ], [ %4678, %after_bb424.us ], [ %4678, %after_bb421.us ], [ %4678, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4768 = phi i8 [ %4688, %true_bb434.us ], [ %4688, %after_bb433.us ], [ %4688, %after_bb430.us ], [ %4688, %after_bb427.us ], [ %4688, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4769 = phi i8 [ %4698, %true_bb434.us ], [ %4698, %after_bb433.us ], [ %4698, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  %4770 = phi i8 [ %4708, %true_bb434.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ], [ 0, %after_bb361.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %"for resampled_input.s0.x.rebased245.us" ]
  br i1 %t2398, label %true_bb437.us, label %after_bb439.us

true_bb437.us:                                    ; preds = %after_bb436.us
  %4771 = sdiv i32 63, %4241
  %4772 = and i32 %4771, %4245
  %4773 = add nsw i32 %4772, %4398
  %4774 = getelementptr inbounds i8, i8* %8, i32 %4773
  %4775 = load i8, i8* %4774, align 1, !tbaa !127
  br label %after_bb439.us

after_bb439.us:                                   ; preds = %true_bb437.us, %after_bb436.us
  %4776 = phi i8 [ %4775, %true_bb437.us ], [ 0, %after_bb436.us ]
  br i1 %t2399, label %after_bb442.us, label %after_bb631.us

after_bb442.us:                                   ; preds = %after_bb439.us
  %4777 = sdiv i32 64, %4241
  %4778 = and i32 %4777, %4245
  %4779 = add nsw i32 %4778, %4398
  %4780 = getelementptr inbounds i8, i8* %8, i32 %4779
  %4781 = load i8, i8* %4780, align 1, !tbaa !127
  br i1 %.not4699, label %after_bb631.us, label %after_bb445.us

after_bb445.us:                                   ; preds = %after_bb442.us
  %4782 = sdiv i32 65, %4241
  %4783 = and i32 %4782, %4245
  %4784 = add nsw i32 %4783, %4398
  %4785 = getelementptr inbounds i8, i8* %8, i32 %4784
  %4786 = load i8, i8* %4785, align 1, !tbaa !127
  br i1 %4277, label %after_bb448.us, label %after_bb631.us

after_bb448.us:                                   ; preds = %after_bb445.us
  %4787 = sdiv i32 66, %4241
  %4788 = and i32 %4787, %4245
  %4789 = add nsw i32 %4788, %4398
  %4790 = getelementptr inbounds i8, i8* %8, i32 %4789
  %4791 = load i8, i8* %4790, align 1, !tbaa !127
  br i1 %.not4700, label %after_bb631.us, label %after_bb451.us

after_bb451.us:                                   ; preds = %after_bb448.us
  %4792 = sdiv i32 67, %4241
  %4793 = and i32 %4792, %4245
  %4794 = add nsw i32 %4793, %4398
  %4795 = getelementptr inbounds i8, i8* %8, i32 %4794
  %4796 = load i8, i8* %4795, align 1, !tbaa !127
  br i1 %4278, label %after_bb454.us, label %after_bb631.us

after_bb454.us:                                   ; preds = %after_bb451.us
  %4797 = sdiv i32 68, %4241
  %4798 = and i32 %4797, %4245
  %4799 = add nsw i32 %4798, %4398
  %4800 = getelementptr inbounds i8, i8* %8, i32 %4799
  %4801 = load i8, i8* %4800, align 1, !tbaa !127
  br i1 %.not4701, label %after_bb631.us, label %after_bb457.us

after_bb457.us:                                   ; preds = %after_bb454.us
  %4802 = sdiv i32 69, %4241
  %4803 = and i32 %4802, %4245
  %4804 = add nsw i32 %4803, %4398
  %4805 = getelementptr inbounds i8, i8* %8, i32 %4804
  %4806 = load i8, i8* %4805, align 1, !tbaa !127
  br i1 %4279, label %after_bb460.us, label %after_bb631.us

after_bb460.us:                                   ; preds = %after_bb457.us
  %4807 = sdiv i32 70, %4241
  %4808 = and i32 %4807, %4245
  %4809 = add nsw i32 %4808, %4398
  %4810 = getelementptr inbounds i8, i8* %8, i32 %4809
  %4811 = load i8, i8* %4810, align 1, !tbaa !127
  br i1 %.not4702, label %after_bb631.us, label %after_bb463.us

after_bb463.us:                                   ; preds = %after_bb460.us
  %4812 = sdiv i32 71, %4241
  %4813 = and i32 %4812, %4245
  %4814 = add nsw i32 %4813, %4398
  %4815 = getelementptr inbounds i8, i8* %8, i32 %4814
  %4816 = load i8, i8* %4815, align 1, !tbaa !127
  br i1 %4280, label %after_bb466.us, label %after_bb631.us

after_bb466.us:                                   ; preds = %after_bb463.us
  %4817 = sdiv i32 72, %4241
  %4818 = and i32 %4817, %4245
  %4819 = add nsw i32 %4818, %4398
  %4820 = getelementptr inbounds i8, i8* %8, i32 %4819
  %4821 = load i8, i8* %4820, align 1, !tbaa !127
  br i1 %.not4703, label %after_bb631.us, label %after_bb469.us

after_bb469.us:                                   ; preds = %after_bb466.us
  %4822 = sdiv i32 73, %4241
  %4823 = and i32 %4822, %4245
  %4824 = add nsw i32 %4823, %4398
  %4825 = getelementptr inbounds i8, i8* %8, i32 %4824
  %4826 = load i8, i8* %4825, align 1, !tbaa !127
  br i1 %4281, label %after_bb472.us, label %after_bb631.us

after_bb472.us:                                   ; preds = %after_bb469.us
  %4827 = sdiv i32 74, %4241
  %4828 = and i32 %4827, %4245
  %4829 = add nsw i32 %4828, %4398
  %4830 = getelementptr inbounds i8, i8* %8, i32 %4829
  %4831 = load i8, i8* %4830, align 1, !tbaa !127
  br i1 %.not4704, label %after_bb631.us, label %after_bb475.us

after_bb475.us:                                   ; preds = %after_bb472.us
  %4832 = sdiv i32 75, %4241
  %4833 = and i32 %4832, %4245
  %4834 = add nsw i32 %4833, %4398
  %4835 = getelementptr inbounds i8, i8* %8, i32 %4834
  %4836 = load i8, i8* %4835, align 1, !tbaa !127
  br i1 %4282, label %after_bb478.us, label %after_bb631.us

after_bb478.us:                                   ; preds = %after_bb475.us
  %4837 = sdiv i32 76, %4241
  %4838 = and i32 %4837, %4245
  %4839 = add nsw i32 %4838, %4398
  %4840 = getelementptr inbounds i8, i8* %8, i32 %4839
  %4841 = load i8, i8* %4840, align 1, !tbaa !127
  br i1 %.not4705, label %after_bb631.us, label %after_bb481.us

after_bb481.us:                                   ; preds = %after_bb478.us
  %4842 = sdiv i32 77, %4241
  %4843 = and i32 %4842, %4245
  %4844 = add nsw i32 %4843, %4398
  %4845 = getelementptr inbounds i8, i8* %8, i32 %4844
  %4846 = load i8, i8* %4845, align 1, !tbaa !127
  br i1 %4283, label %after_bb484.us, label %after_bb631.us

after_bb484.us:                                   ; preds = %after_bb481.us
  %4847 = sdiv i32 78, %4241
  %4848 = and i32 %4847, %4245
  %4849 = add nsw i32 %4848, %4398
  %4850 = getelementptr inbounds i8, i8* %8, i32 %4849
  %4851 = load i8, i8* %4850, align 1, !tbaa !127
  br i1 %.not4706, label %after_bb631.us, label %after_bb487.us

after_bb487.us:                                   ; preds = %after_bb484.us
  %4852 = sdiv i32 79, %4241
  %4853 = and i32 %4852, %4245
  %4854 = add nsw i32 %4853, %4398
  %4855 = getelementptr inbounds i8, i8* %8, i32 %4854
  %4856 = load i8, i8* %4855, align 1, !tbaa !127
  br i1 %4284, label %after_bb490.us, label %after_bb631.us

after_bb490.us:                                   ; preds = %after_bb487.us
  %4857 = sdiv i32 80, %4241
  %4858 = and i32 %4857, %4245
  %4859 = add nsw i32 %4858, %4398
  %4860 = getelementptr inbounds i8, i8* %8, i32 %4859
  %4861 = load i8, i8* %4860, align 1, !tbaa !127
  br i1 %.not4707, label %after_bb631.us, label %after_bb493.us

after_bb493.us:                                   ; preds = %after_bb490.us
  %4862 = sdiv i32 81, %4241
  %4863 = and i32 %4862, %4245
  %4864 = add nsw i32 %4863, %4398
  %4865 = getelementptr inbounds i8, i8* %8, i32 %4864
  %4866 = load i8, i8* %4865, align 1, !tbaa !127
  br i1 %4285, label %after_bb496.us, label %after_bb631.us

after_bb496.us:                                   ; preds = %after_bb493.us
  %4867 = sdiv i32 82, %4241
  %4868 = and i32 %4867, %4245
  %4869 = add nsw i32 %4868, %4398
  %4870 = getelementptr inbounds i8, i8* %8, i32 %4869
  %4871 = load i8, i8* %4870, align 1, !tbaa !127
  br i1 %.not4708, label %after_bb631.us, label %after_bb499.us

after_bb499.us:                                   ; preds = %after_bb496.us
  %4872 = sdiv i32 83, %4241
  %4873 = and i32 %4872, %4245
  %4874 = add nsw i32 %4873, %4398
  %4875 = getelementptr inbounds i8, i8* %8, i32 %4874
  %4876 = load i8, i8* %4875, align 1, !tbaa !127
  br i1 %4286, label %after_bb502.us, label %after_bb631.us

after_bb502.us:                                   ; preds = %after_bb499.us
  %4877 = sdiv i32 84, %4241
  %4878 = and i32 %4877, %4245
  %4879 = add nsw i32 %4878, %4398
  %4880 = getelementptr inbounds i8, i8* %8, i32 %4879
  %4881 = load i8, i8* %4880, align 1, !tbaa !127
  br i1 %.not4709, label %after_bb631.us, label %after_bb505.us

after_bb505.us:                                   ; preds = %after_bb502.us
  %4882 = sdiv i32 85, %4241
  %4883 = and i32 %4882, %4245
  %4884 = add nsw i32 %4883, %4398
  %4885 = getelementptr inbounds i8, i8* %8, i32 %4884
  %4886 = load i8, i8* %4885, align 1, !tbaa !127
  br i1 %4287, label %after_bb508.us, label %after_bb631.us

after_bb508.us:                                   ; preds = %after_bb505.us
  %4887 = sdiv i32 86, %4241
  %4888 = and i32 %4887, %4245
  %4889 = add nsw i32 %4888, %4398
  %4890 = getelementptr inbounds i8, i8* %8, i32 %4889
  %4891 = load i8, i8* %4890, align 1, !tbaa !127
  br i1 %.not4710, label %after_bb631.us, label %after_bb511.us

after_bb511.us:                                   ; preds = %after_bb508.us
  %4892 = sdiv i32 87, %4241
  %4893 = and i32 %4892, %4245
  %4894 = add nsw i32 %4893, %4398
  %4895 = getelementptr inbounds i8, i8* %8, i32 %4894
  %4896 = load i8, i8* %4895, align 1, !tbaa !127
  br i1 %4288, label %after_bb514.us, label %after_bb631.us

after_bb514.us:                                   ; preds = %after_bb511.us
  %4897 = sdiv i32 88, %4241
  %4898 = and i32 %4897, %4245
  %4899 = add nsw i32 %4898, %4398
  %4900 = getelementptr inbounds i8, i8* %8, i32 %4899
  %4901 = load i8, i8* %4900, align 1, !tbaa !127
  br i1 %.not4711, label %after_bb631.us, label %after_bb517.us

after_bb517.us:                                   ; preds = %after_bb514.us
  %4902 = sdiv i32 89, %4241
  %4903 = and i32 %4902, %4245
  %4904 = add nsw i32 %4903, %4398
  %4905 = getelementptr inbounds i8, i8* %8, i32 %4904
  %4906 = load i8, i8* %4905, align 1, !tbaa !127
  br i1 %4289, label %after_bb520.us, label %after_bb631.us

after_bb520.us:                                   ; preds = %after_bb517.us
  %4907 = sdiv i32 90, %4241
  %4908 = and i32 %4907, %4245
  %4909 = add nsw i32 %4908, %4398
  %4910 = getelementptr inbounds i8, i8* %8, i32 %4909
  %4911 = load i8, i8* %4910, align 1, !tbaa !127
  br i1 %.not4712, label %after_bb631.us, label %after_bb523.us

after_bb523.us:                                   ; preds = %after_bb520.us
  %4912 = sdiv i32 91, %4241
  %4913 = and i32 %4912, %4245
  %4914 = add nsw i32 %4913, %4398
  %4915 = getelementptr inbounds i8, i8* %8, i32 %4914
  %4916 = load i8, i8* %4915, align 1, !tbaa !127
  br i1 %4290, label %after_bb526.us, label %after_bb631.us

after_bb526.us:                                   ; preds = %after_bb523.us
  %4917 = sdiv i32 92, %4241
  %4918 = and i32 %4917, %4245
  %4919 = add nsw i32 %4918, %4398
  %4920 = getelementptr inbounds i8, i8* %8, i32 %4919
  %4921 = load i8, i8* %4920, align 1, !tbaa !127
  br i1 %.not4713, label %after_bb631.us, label %after_bb529.us

after_bb529.us:                                   ; preds = %after_bb526.us
  %4922 = sdiv i32 93, %4241
  %4923 = and i32 %4922, %4245
  %4924 = add nsw i32 %4923, %4398
  %4925 = getelementptr inbounds i8, i8* %8, i32 %4924
  %4926 = load i8, i8* %4925, align 1, !tbaa !127
  br i1 %4291, label %after_bb532.us, label %after_bb631.us

after_bb532.us:                                   ; preds = %after_bb529.us
  %4927 = sdiv i32 94, %4241
  %4928 = and i32 %4927, %4245
  %4929 = add nsw i32 %4928, %4398
  %4930 = getelementptr inbounds i8, i8* %8, i32 %4929
  %4931 = load i8, i8* %4930, align 1, !tbaa !127
  br i1 %.not4714, label %after_bb631.us, label %after_bb535.us

after_bb535.us:                                   ; preds = %after_bb532.us
  %4932 = sdiv i32 95, %4241
  %4933 = and i32 %4932, %4245
  %4934 = add nsw i32 %4933, %4398
  %4935 = getelementptr inbounds i8, i8* %8, i32 %4934
  %4936 = load i8, i8* %4935, align 1, !tbaa !127
  br i1 %4292, label %after_bb538.us, label %after_bb631.us

after_bb538.us:                                   ; preds = %after_bb535.us
  %4937 = sdiv i32 96, %4241
  %4938 = and i32 %4937, %4245
  %4939 = add nsw i32 %4938, %4398
  %4940 = getelementptr inbounds i8, i8* %8, i32 %4939
  %4941 = load i8, i8* %4940, align 1, !tbaa !127
  br i1 %.not4715, label %after_bb631.us, label %after_bb541.us

after_bb541.us:                                   ; preds = %after_bb538.us
  %4942 = sdiv i32 97, %4241
  %4943 = and i32 %4942, %4245
  %4944 = add nsw i32 %4943, %4398
  %4945 = getelementptr inbounds i8, i8* %8, i32 %4944
  %4946 = load i8, i8* %4945, align 1, !tbaa !127
  br i1 %4293, label %after_bb544.us, label %after_bb631.us

after_bb544.us:                                   ; preds = %after_bb541.us
  %4947 = sdiv i32 98, %4241
  %4948 = and i32 %4947, %4245
  %4949 = add nsw i32 %4948, %4398
  %4950 = getelementptr inbounds i8, i8* %8, i32 %4949
  %4951 = load i8, i8* %4950, align 1, !tbaa !127
  br i1 %.not4716, label %after_bb631.us, label %after_bb547.us

after_bb547.us:                                   ; preds = %after_bb544.us
  %4952 = sdiv i32 99, %4241
  %4953 = and i32 %4952, %4245
  %4954 = add nsw i32 %4953, %4398
  %4955 = getelementptr inbounds i8, i8* %8, i32 %4954
  %4956 = load i8, i8* %4955, align 1, !tbaa !127
  br i1 %4294, label %after_bb550.us, label %after_bb631.us

after_bb550.us:                                   ; preds = %after_bb547.us
  %4957 = sdiv i32 100, %4241
  %4958 = and i32 %4957, %4245
  %4959 = add nsw i32 %4958, %4398
  %4960 = getelementptr inbounds i8, i8* %8, i32 %4959
  %4961 = load i8, i8* %4960, align 1, !tbaa !127
  br i1 %.not4717, label %after_bb631.us, label %after_bb553.us

after_bb553.us:                                   ; preds = %after_bb550.us
  %4962 = sdiv i32 101, %4241
  %4963 = and i32 %4962, %4245
  %4964 = add nsw i32 %4963, %4398
  %4965 = getelementptr inbounds i8, i8* %8, i32 %4964
  %4966 = load i8, i8* %4965, align 1, !tbaa !127
  br i1 %4295, label %after_bb556.us, label %after_bb631.us

after_bb556.us:                                   ; preds = %after_bb553.us
  %4967 = sdiv i32 102, %4241
  %4968 = and i32 %4967, %4245
  %4969 = add nsw i32 %4968, %4398
  %4970 = getelementptr inbounds i8, i8* %8, i32 %4969
  %4971 = load i8, i8* %4970, align 1, !tbaa !127
  br i1 %.not4718, label %after_bb631.us, label %after_bb559.us

after_bb559.us:                                   ; preds = %after_bb556.us
  %4972 = sdiv i32 103, %4241
  %4973 = and i32 %4972, %4245
  %4974 = add nsw i32 %4973, %4398
  %4975 = getelementptr inbounds i8, i8* %8, i32 %4974
  %4976 = load i8, i8* %4975, align 1, !tbaa !127
  br i1 %4296, label %after_bb562.us, label %after_bb631.us

after_bb562.us:                                   ; preds = %after_bb559.us
  %4977 = sdiv i32 104, %4241
  %4978 = and i32 %4977, %4245
  %4979 = add nsw i32 %4978, %4398
  %4980 = getelementptr inbounds i8, i8* %8, i32 %4979
  %4981 = load i8, i8* %4980, align 1, !tbaa !127
  br i1 %.not4719, label %after_bb631.us, label %after_bb565.us

after_bb565.us:                                   ; preds = %after_bb562.us
  %4982 = sdiv i32 105, %4241
  %4983 = and i32 %4982, %4245
  %4984 = add nsw i32 %4983, %4398
  %4985 = getelementptr inbounds i8, i8* %8, i32 %4984
  %4986 = load i8, i8* %4985, align 1, !tbaa !127
  br i1 %4297, label %after_bb568.us, label %after_bb631.us

after_bb568.us:                                   ; preds = %after_bb565.us
  %4987 = sdiv i32 106, %4241
  %4988 = and i32 %4987, %4245
  %4989 = add nsw i32 %4988, %4398
  %4990 = getelementptr inbounds i8, i8* %8, i32 %4989
  %4991 = load i8, i8* %4990, align 1, !tbaa !127
  br i1 %.not4720, label %after_bb631.us, label %after_bb571.us

after_bb571.us:                                   ; preds = %after_bb568.us
  %4992 = sdiv i32 107, %4241
  %4993 = and i32 %4992, %4245
  %4994 = add nsw i32 %4993, %4398
  %4995 = getelementptr inbounds i8, i8* %8, i32 %4994
  %4996 = load i8, i8* %4995, align 1, !tbaa !127
  br i1 %4298, label %after_bb574.us, label %after_bb631.us

after_bb574.us:                                   ; preds = %after_bb571.us
  %4997 = sdiv i32 108, %4241
  %4998 = and i32 %4997, %4245
  %4999 = add nsw i32 %4998, %4398
  %5000 = getelementptr inbounds i8, i8* %8, i32 %4999
  %5001 = load i8, i8* %5000, align 1, !tbaa !127
  br i1 %.not4721, label %after_bb631.us, label %after_bb577.us

after_bb577.us:                                   ; preds = %after_bb574.us
  %5002 = sdiv i32 109, %4241
  %5003 = and i32 %5002, %4245
  %5004 = add nsw i32 %5003, %4398
  %5005 = getelementptr inbounds i8, i8* %8, i32 %5004
  %5006 = load i8, i8* %5005, align 1, !tbaa !127
  br i1 %4299, label %after_bb580.us, label %after_bb631.us

after_bb580.us:                                   ; preds = %after_bb577.us
  %5007 = sdiv i32 110, %4241
  %5008 = and i32 %5007, %4245
  %5009 = add nsw i32 %5008, %4398
  %5010 = getelementptr inbounds i8, i8* %8, i32 %5009
  %5011 = load i8, i8* %5010, align 1, !tbaa !127
  br i1 %.not4722, label %after_bb631.us, label %after_bb583.us

after_bb583.us:                                   ; preds = %after_bb580.us
  %5012 = sdiv i32 111, %4241
  %5013 = and i32 %5012, %4245
  %5014 = add nsw i32 %5013, %4398
  %5015 = getelementptr inbounds i8, i8* %8, i32 %5014
  %5016 = load i8, i8* %5015, align 1, !tbaa !127
  br i1 %4300, label %after_bb586.us, label %after_bb631.us

after_bb586.us:                                   ; preds = %after_bb583.us
  %5017 = sdiv i32 112, %4241
  %5018 = and i32 %5017, %4245
  %5019 = add nsw i32 %5018, %4398
  %5020 = getelementptr inbounds i8, i8* %8, i32 %5019
  %5021 = load i8, i8* %5020, align 1, !tbaa !127
  br i1 %.not4723, label %after_bb631.us, label %after_bb589.us

after_bb589.us:                                   ; preds = %after_bb586.us
  %5022 = sdiv i32 113, %4241
  %5023 = and i32 %5022, %4245
  %5024 = add nsw i32 %5023, %4398
  %5025 = getelementptr inbounds i8, i8* %8, i32 %5024
  %5026 = load i8, i8* %5025, align 1, !tbaa !127
  br i1 %4301, label %after_bb592.us, label %after_bb631.us

after_bb592.us:                                   ; preds = %after_bb589.us
  %5027 = sdiv i32 114, %4241
  %5028 = and i32 %5027, %4245
  %5029 = add nsw i32 %5028, %4398
  %5030 = getelementptr inbounds i8, i8* %8, i32 %5029
  %5031 = load i8, i8* %5030, align 1, !tbaa !127
  br i1 %.not4724, label %after_bb631.us, label %after_bb595.us

after_bb595.us:                                   ; preds = %after_bb592.us
  %5032 = sdiv i32 115, %4241
  %5033 = and i32 %5032, %4245
  %5034 = add nsw i32 %5033, %4398
  %5035 = getelementptr inbounds i8, i8* %8, i32 %5034
  %5036 = load i8, i8* %5035, align 1, !tbaa !127
  br i1 %4302, label %after_bb598.us, label %after_bb631.us

after_bb598.us:                                   ; preds = %after_bb595.us
  %5037 = sdiv i32 116, %4241
  %5038 = and i32 %5037, %4245
  %5039 = add nsw i32 %5038, %4398
  %5040 = getelementptr inbounds i8, i8* %8, i32 %5039
  %5041 = load i8, i8* %5040, align 1, !tbaa !127
  br i1 %.not4725, label %after_bb631.us, label %after_bb601.us

after_bb601.us:                                   ; preds = %after_bb598.us
  %5042 = sdiv i32 117, %4241
  %5043 = and i32 %5042, %4245
  %5044 = add nsw i32 %5043, %4398
  %5045 = getelementptr inbounds i8, i8* %8, i32 %5044
  %5046 = load i8, i8* %5045, align 1, !tbaa !127
  br i1 %4303, label %after_bb604.us, label %after_bb631.us

after_bb604.us:                                   ; preds = %after_bb601.us
  %5047 = sdiv i32 118, %4241
  %5048 = and i32 %5047, %4245
  %5049 = add nsw i32 %5048, %4398
  %5050 = getelementptr inbounds i8, i8* %8, i32 %5049
  %5051 = load i8, i8* %5050, align 1, !tbaa !127
  br i1 %.not4726, label %after_bb631.us, label %after_bb607.us

after_bb607.us:                                   ; preds = %after_bb604.us
  %5052 = sdiv i32 119, %4241
  %5053 = and i32 %5052, %4245
  %5054 = add nsw i32 %5053, %4398
  %5055 = getelementptr inbounds i8, i8* %8, i32 %5054
  %5056 = load i8, i8* %5055, align 1, !tbaa !127
  br i1 %4304, label %after_bb610.us, label %after_bb631.us

after_bb610.us:                                   ; preds = %after_bb607.us
  %5057 = sdiv i32 120, %4241
  %5058 = and i32 %5057, %4245
  %5059 = add nsw i32 %5058, %4398
  %5060 = getelementptr inbounds i8, i8* %8, i32 %5059
  %5061 = load i8, i8* %5060, align 1, !tbaa !127
  br i1 %.not4727, label %after_bb631.us, label %after_bb613.us

after_bb613.us:                                   ; preds = %after_bb610.us
  %5062 = sdiv i32 121, %4241
  %5063 = and i32 %5062, %4245
  %5064 = add nsw i32 %5063, %4398
  %5065 = getelementptr inbounds i8, i8* %8, i32 %5064
  %5066 = load i8, i8* %5065, align 1, !tbaa !127
  br i1 %4305, label %after_bb616.us, label %after_bb631.us

after_bb616.us:                                   ; preds = %after_bb613.us
  %5067 = sdiv i32 122, %4241
  %5068 = and i32 %5067, %4245
  %5069 = add nsw i32 %5068, %4398
  %5070 = getelementptr inbounds i8, i8* %8, i32 %5069
  %5071 = load i8, i8* %5070, align 1, !tbaa !127
  br i1 %.not4728, label %after_bb631.us, label %after_bb619.us

after_bb619.us:                                   ; preds = %after_bb616.us
  %5072 = sdiv i32 123, %4241
  %5073 = and i32 %5072, %4245
  %5074 = add nsw i32 %5073, %4398
  %5075 = getelementptr inbounds i8, i8* %8, i32 %5074
  %5076 = load i8, i8* %5075, align 1, !tbaa !127
  br i1 %4306, label %after_bb622.us, label %after_bb631.us

after_bb622.us:                                   ; preds = %after_bb619.us
  %5077 = sdiv i32 124, %4241
  %5078 = and i32 %5077, %4245
  %5079 = add nsw i32 %5078, %4398
  %5080 = getelementptr inbounds i8, i8* %8, i32 %5079
  %5081 = load i8, i8* %5080, align 1, !tbaa !127
  br i1 %.not4729, label %after_bb631.us, label %after_bb625.us

after_bb625.us:                                   ; preds = %after_bb622.us
  %5082 = sdiv i32 125, %4241
  %5083 = and i32 %5082, %4245
  %5084 = add nsw i32 %5083, %4398
  %5085 = getelementptr inbounds i8, i8* %8, i32 %5084
  %5086 = load i8, i8* %5085, align 1, !tbaa !127
  br i1 %4307, label %true_bb626.us, label %after_bb631.us

true_bb626.us:                                    ; preds = %after_bb625.us
  %5087 = sdiv i32 126, %4241
  %5088 = and i32 %5087, %4245
  %5089 = add nsw i32 %5088, %4398
  %5090 = getelementptr inbounds i8, i8* %8, i32 %5089
  %5091 = load i8, i8* %5090, align 1, !tbaa !127
  br label %after_bb631.us

after_bb631.us:                                   ; preds = %true_bb626.us, %after_bb625.us, %after_bb622.us, %after_bb619.us, %after_bb616.us, %after_bb613.us, %after_bb610.us, %after_bb607.us, %after_bb604.us, %after_bb601.us, %after_bb598.us, %after_bb595.us, %after_bb592.us, %after_bb589.us, %after_bb586.us, %after_bb583.us, %after_bb580.us, %after_bb577.us, %after_bb574.us, %after_bb571.us, %after_bb568.us, %after_bb565.us, %after_bb562.us, %after_bb559.us, %after_bb556.us, %after_bb553.us, %after_bb550.us, %after_bb547.us, %after_bb544.us, %after_bb541.us, %after_bb538.us, %after_bb535.us, %after_bb532.us, %after_bb529.us, %after_bb526.us, %after_bb523.us, %after_bb520.us, %after_bb517.us, %after_bb514.us, %after_bb511.us, %after_bb508.us, %after_bb505.us, %after_bb502.us, %after_bb499.us, %after_bb496.us, %after_bb493.us, %after_bb490.us, %after_bb487.us, %after_bb484.us, %after_bb481.us, %after_bb478.us, %after_bb475.us, %after_bb472.us, %after_bb469.us, %after_bb466.us, %after_bb463.us, %after_bb460.us, %after_bb457.us, %after_bb454.us, %after_bb451.us, %after_bb448.us, %after_bb445.us, %after_bb442.us, %after_bb439.us
  %5092 = phi i8 [ %5086, %true_bb626.us ], [ %5086, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5093 = phi i8 [ %5076, %true_bb626.us ], [ %5076, %after_bb625.us ], [ %5076, %after_bb622.us ], [ %5076, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5094 = phi i8 [ %5066, %true_bb626.us ], [ %5066, %after_bb625.us ], [ %5066, %after_bb622.us ], [ %5066, %after_bb619.us ], [ %5066, %after_bb616.us ], [ %5066, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5095 = phi i8 [ %5056, %true_bb626.us ], [ %5056, %after_bb625.us ], [ %5056, %after_bb622.us ], [ %5056, %after_bb619.us ], [ %5056, %after_bb616.us ], [ %5056, %after_bb613.us ], [ %5056, %after_bb610.us ], [ %5056, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5096 = phi i8 [ %5046, %true_bb626.us ], [ %5046, %after_bb625.us ], [ %5046, %after_bb622.us ], [ %5046, %after_bb619.us ], [ %5046, %after_bb616.us ], [ %5046, %after_bb613.us ], [ %5046, %after_bb610.us ], [ %5046, %after_bb607.us ], [ %5046, %after_bb604.us ], [ %5046, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5097 = phi i8 [ %5036, %true_bb626.us ], [ %5036, %after_bb625.us ], [ %5036, %after_bb622.us ], [ %5036, %after_bb619.us ], [ %5036, %after_bb616.us ], [ %5036, %after_bb613.us ], [ %5036, %after_bb610.us ], [ %5036, %after_bb607.us ], [ %5036, %after_bb604.us ], [ %5036, %after_bb601.us ], [ %5036, %after_bb598.us ], [ %5036, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5098 = phi i8 [ %5026, %true_bb626.us ], [ %5026, %after_bb625.us ], [ %5026, %after_bb622.us ], [ %5026, %after_bb619.us ], [ %5026, %after_bb616.us ], [ %5026, %after_bb613.us ], [ %5026, %after_bb610.us ], [ %5026, %after_bb607.us ], [ %5026, %after_bb604.us ], [ %5026, %after_bb601.us ], [ %5026, %after_bb598.us ], [ %5026, %after_bb595.us ], [ %5026, %after_bb592.us ], [ %5026, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5099 = phi i8 [ %5016, %true_bb626.us ], [ %5016, %after_bb625.us ], [ %5016, %after_bb622.us ], [ %5016, %after_bb619.us ], [ %5016, %after_bb616.us ], [ %5016, %after_bb613.us ], [ %5016, %after_bb610.us ], [ %5016, %after_bb607.us ], [ %5016, %after_bb604.us ], [ %5016, %after_bb601.us ], [ %5016, %after_bb598.us ], [ %5016, %after_bb595.us ], [ %5016, %after_bb592.us ], [ %5016, %after_bb589.us ], [ %5016, %after_bb586.us ], [ %5016, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5100 = phi i8 [ %5006, %true_bb626.us ], [ %5006, %after_bb625.us ], [ %5006, %after_bb622.us ], [ %5006, %after_bb619.us ], [ %5006, %after_bb616.us ], [ %5006, %after_bb613.us ], [ %5006, %after_bb610.us ], [ %5006, %after_bb607.us ], [ %5006, %after_bb604.us ], [ %5006, %after_bb601.us ], [ %5006, %after_bb598.us ], [ %5006, %after_bb595.us ], [ %5006, %after_bb592.us ], [ %5006, %after_bb589.us ], [ %5006, %after_bb586.us ], [ %5006, %after_bb583.us ], [ %5006, %after_bb580.us ], [ %5006, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5101 = phi i8 [ %4996, %true_bb626.us ], [ %4996, %after_bb625.us ], [ %4996, %after_bb622.us ], [ %4996, %after_bb619.us ], [ %4996, %after_bb616.us ], [ %4996, %after_bb613.us ], [ %4996, %after_bb610.us ], [ %4996, %after_bb607.us ], [ %4996, %after_bb604.us ], [ %4996, %after_bb601.us ], [ %4996, %after_bb598.us ], [ %4996, %after_bb595.us ], [ %4996, %after_bb592.us ], [ %4996, %after_bb589.us ], [ %4996, %after_bb586.us ], [ %4996, %after_bb583.us ], [ %4996, %after_bb580.us ], [ %4996, %after_bb577.us ], [ %4996, %after_bb574.us ], [ %4996, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5102 = phi i8 [ %4986, %true_bb626.us ], [ %4986, %after_bb625.us ], [ %4986, %after_bb622.us ], [ %4986, %after_bb619.us ], [ %4986, %after_bb616.us ], [ %4986, %after_bb613.us ], [ %4986, %after_bb610.us ], [ %4986, %after_bb607.us ], [ %4986, %after_bb604.us ], [ %4986, %after_bb601.us ], [ %4986, %after_bb598.us ], [ %4986, %after_bb595.us ], [ %4986, %after_bb592.us ], [ %4986, %after_bb589.us ], [ %4986, %after_bb586.us ], [ %4986, %after_bb583.us ], [ %4986, %after_bb580.us ], [ %4986, %after_bb577.us ], [ %4986, %after_bb574.us ], [ %4986, %after_bb571.us ], [ %4986, %after_bb568.us ], [ %4986, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5103 = phi i8 [ %4976, %true_bb626.us ], [ %4976, %after_bb625.us ], [ %4976, %after_bb622.us ], [ %4976, %after_bb619.us ], [ %4976, %after_bb616.us ], [ %4976, %after_bb613.us ], [ %4976, %after_bb610.us ], [ %4976, %after_bb607.us ], [ %4976, %after_bb604.us ], [ %4976, %after_bb601.us ], [ %4976, %after_bb598.us ], [ %4976, %after_bb595.us ], [ %4976, %after_bb592.us ], [ %4976, %after_bb589.us ], [ %4976, %after_bb586.us ], [ %4976, %after_bb583.us ], [ %4976, %after_bb580.us ], [ %4976, %after_bb577.us ], [ %4976, %after_bb574.us ], [ %4976, %after_bb571.us ], [ %4976, %after_bb568.us ], [ %4976, %after_bb565.us ], [ %4976, %after_bb562.us ], [ %4976, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5104 = phi i8 [ %4966, %true_bb626.us ], [ %4966, %after_bb625.us ], [ %4966, %after_bb622.us ], [ %4966, %after_bb619.us ], [ %4966, %after_bb616.us ], [ %4966, %after_bb613.us ], [ %4966, %after_bb610.us ], [ %4966, %after_bb607.us ], [ %4966, %after_bb604.us ], [ %4966, %after_bb601.us ], [ %4966, %after_bb598.us ], [ %4966, %after_bb595.us ], [ %4966, %after_bb592.us ], [ %4966, %after_bb589.us ], [ %4966, %after_bb586.us ], [ %4966, %after_bb583.us ], [ %4966, %after_bb580.us ], [ %4966, %after_bb577.us ], [ %4966, %after_bb574.us ], [ %4966, %after_bb571.us ], [ %4966, %after_bb568.us ], [ %4966, %after_bb565.us ], [ %4966, %after_bb562.us ], [ %4966, %after_bb559.us ], [ %4966, %after_bb556.us ], [ %4966, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5105 = phi i8 [ %4956, %true_bb626.us ], [ %4956, %after_bb625.us ], [ %4956, %after_bb622.us ], [ %4956, %after_bb619.us ], [ %4956, %after_bb616.us ], [ %4956, %after_bb613.us ], [ %4956, %after_bb610.us ], [ %4956, %after_bb607.us ], [ %4956, %after_bb604.us ], [ %4956, %after_bb601.us ], [ %4956, %after_bb598.us ], [ %4956, %after_bb595.us ], [ %4956, %after_bb592.us ], [ %4956, %after_bb589.us ], [ %4956, %after_bb586.us ], [ %4956, %after_bb583.us ], [ %4956, %after_bb580.us ], [ %4956, %after_bb577.us ], [ %4956, %after_bb574.us ], [ %4956, %after_bb571.us ], [ %4956, %after_bb568.us ], [ %4956, %after_bb565.us ], [ %4956, %after_bb562.us ], [ %4956, %after_bb559.us ], [ %4956, %after_bb556.us ], [ %4956, %after_bb553.us ], [ %4956, %after_bb550.us ], [ %4956, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5106 = phi i8 [ %4946, %true_bb626.us ], [ %4946, %after_bb625.us ], [ %4946, %after_bb622.us ], [ %4946, %after_bb619.us ], [ %4946, %after_bb616.us ], [ %4946, %after_bb613.us ], [ %4946, %after_bb610.us ], [ %4946, %after_bb607.us ], [ %4946, %after_bb604.us ], [ %4946, %after_bb601.us ], [ %4946, %after_bb598.us ], [ %4946, %after_bb595.us ], [ %4946, %after_bb592.us ], [ %4946, %after_bb589.us ], [ %4946, %after_bb586.us ], [ %4946, %after_bb583.us ], [ %4946, %after_bb580.us ], [ %4946, %after_bb577.us ], [ %4946, %after_bb574.us ], [ %4946, %after_bb571.us ], [ %4946, %after_bb568.us ], [ %4946, %after_bb565.us ], [ %4946, %after_bb562.us ], [ %4946, %after_bb559.us ], [ %4946, %after_bb556.us ], [ %4946, %after_bb553.us ], [ %4946, %after_bb550.us ], [ %4946, %after_bb547.us ], [ %4946, %after_bb544.us ], [ %4946, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5107 = phi i8 [ %4936, %true_bb626.us ], [ %4936, %after_bb625.us ], [ %4936, %after_bb622.us ], [ %4936, %after_bb619.us ], [ %4936, %after_bb616.us ], [ %4936, %after_bb613.us ], [ %4936, %after_bb610.us ], [ %4936, %after_bb607.us ], [ %4936, %after_bb604.us ], [ %4936, %after_bb601.us ], [ %4936, %after_bb598.us ], [ %4936, %after_bb595.us ], [ %4936, %after_bb592.us ], [ %4936, %after_bb589.us ], [ %4936, %after_bb586.us ], [ %4936, %after_bb583.us ], [ %4936, %after_bb580.us ], [ %4936, %after_bb577.us ], [ %4936, %after_bb574.us ], [ %4936, %after_bb571.us ], [ %4936, %after_bb568.us ], [ %4936, %after_bb565.us ], [ %4936, %after_bb562.us ], [ %4936, %after_bb559.us ], [ %4936, %after_bb556.us ], [ %4936, %after_bb553.us ], [ %4936, %after_bb550.us ], [ %4936, %after_bb547.us ], [ %4936, %after_bb544.us ], [ %4936, %after_bb541.us ], [ %4936, %after_bb538.us ], [ %4936, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5108 = phi i8 [ %4926, %true_bb626.us ], [ %4926, %after_bb625.us ], [ %4926, %after_bb622.us ], [ %4926, %after_bb619.us ], [ %4926, %after_bb616.us ], [ %4926, %after_bb613.us ], [ %4926, %after_bb610.us ], [ %4926, %after_bb607.us ], [ %4926, %after_bb604.us ], [ %4926, %after_bb601.us ], [ %4926, %after_bb598.us ], [ %4926, %after_bb595.us ], [ %4926, %after_bb592.us ], [ %4926, %after_bb589.us ], [ %4926, %after_bb586.us ], [ %4926, %after_bb583.us ], [ %4926, %after_bb580.us ], [ %4926, %after_bb577.us ], [ %4926, %after_bb574.us ], [ %4926, %after_bb571.us ], [ %4926, %after_bb568.us ], [ %4926, %after_bb565.us ], [ %4926, %after_bb562.us ], [ %4926, %after_bb559.us ], [ %4926, %after_bb556.us ], [ %4926, %after_bb553.us ], [ %4926, %after_bb550.us ], [ %4926, %after_bb547.us ], [ %4926, %after_bb544.us ], [ %4926, %after_bb541.us ], [ %4926, %after_bb538.us ], [ %4926, %after_bb535.us ], [ %4926, %after_bb532.us ], [ %4926, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5109 = phi i8 [ %4916, %true_bb626.us ], [ %4916, %after_bb625.us ], [ %4916, %after_bb622.us ], [ %4916, %after_bb619.us ], [ %4916, %after_bb616.us ], [ %4916, %after_bb613.us ], [ %4916, %after_bb610.us ], [ %4916, %after_bb607.us ], [ %4916, %after_bb604.us ], [ %4916, %after_bb601.us ], [ %4916, %after_bb598.us ], [ %4916, %after_bb595.us ], [ %4916, %after_bb592.us ], [ %4916, %after_bb589.us ], [ %4916, %after_bb586.us ], [ %4916, %after_bb583.us ], [ %4916, %after_bb580.us ], [ %4916, %after_bb577.us ], [ %4916, %after_bb574.us ], [ %4916, %after_bb571.us ], [ %4916, %after_bb568.us ], [ %4916, %after_bb565.us ], [ %4916, %after_bb562.us ], [ %4916, %after_bb559.us ], [ %4916, %after_bb556.us ], [ %4916, %after_bb553.us ], [ %4916, %after_bb550.us ], [ %4916, %after_bb547.us ], [ %4916, %after_bb544.us ], [ %4916, %after_bb541.us ], [ %4916, %after_bb538.us ], [ %4916, %after_bb535.us ], [ %4916, %after_bb532.us ], [ %4916, %after_bb529.us ], [ %4916, %after_bb526.us ], [ %4916, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5110 = phi i8 [ %4906, %true_bb626.us ], [ %4906, %after_bb625.us ], [ %4906, %after_bb622.us ], [ %4906, %after_bb619.us ], [ %4906, %after_bb616.us ], [ %4906, %after_bb613.us ], [ %4906, %after_bb610.us ], [ %4906, %after_bb607.us ], [ %4906, %after_bb604.us ], [ %4906, %after_bb601.us ], [ %4906, %after_bb598.us ], [ %4906, %after_bb595.us ], [ %4906, %after_bb592.us ], [ %4906, %after_bb589.us ], [ %4906, %after_bb586.us ], [ %4906, %after_bb583.us ], [ %4906, %after_bb580.us ], [ %4906, %after_bb577.us ], [ %4906, %after_bb574.us ], [ %4906, %after_bb571.us ], [ %4906, %after_bb568.us ], [ %4906, %after_bb565.us ], [ %4906, %after_bb562.us ], [ %4906, %after_bb559.us ], [ %4906, %after_bb556.us ], [ %4906, %after_bb553.us ], [ %4906, %after_bb550.us ], [ %4906, %after_bb547.us ], [ %4906, %after_bb544.us ], [ %4906, %after_bb541.us ], [ %4906, %after_bb538.us ], [ %4906, %after_bb535.us ], [ %4906, %after_bb532.us ], [ %4906, %after_bb529.us ], [ %4906, %after_bb526.us ], [ %4906, %after_bb523.us ], [ %4906, %after_bb520.us ], [ %4906, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5111 = phi i8 [ %4896, %true_bb626.us ], [ %4896, %after_bb625.us ], [ %4896, %after_bb622.us ], [ %4896, %after_bb619.us ], [ %4896, %after_bb616.us ], [ %4896, %after_bb613.us ], [ %4896, %after_bb610.us ], [ %4896, %after_bb607.us ], [ %4896, %after_bb604.us ], [ %4896, %after_bb601.us ], [ %4896, %after_bb598.us ], [ %4896, %after_bb595.us ], [ %4896, %after_bb592.us ], [ %4896, %after_bb589.us ], [ %4896, %after_bb586.us ], [ %4896, %after_bb583.us ], [ %4896, %after_bb580.us ], [ %4896, %after_bb577.us ], [ %4896, %after_bb574.us ], [ %4896, %after_bb571.us ], [ %4896, %after_bb568.us ], [ %4896, %after_bb565.us ], [ %4896, %after_bb562.us ], [ %4896, %after_bb559.us ], [ %4896, %after_bb556.us ], [ %4896, %after_bb553.us ], [ %4896, %after_bb550.us ], [ %4896, %after_bb547.us ], [ %4896, %after_bb544.us ], [ %4896, %after_bb541.us ], [ %4896, %after_bb538.us ], [ %4896, %after_bb535.us ], [ %4896, %after_bb532.us ], [ %4896, %after_bb529.us ], [ %4896, %after_bb526.us ], [ %4896, %after_bb523.us ], [ %4896, %after_bb520.us ], [ %4896, %after_bb517.us ], [ %4896, %after_bb514.us ], [ %4896, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5112 = phi i8 [ %4886, %true_bb626.us ], [ %4886, %after_bb625.us ], [ %4886, %after_bb622.us ], [ %4886, %after_bb619.us ], [ %4886, %after_bb616.us ], [ %4886, %after_bb613.us ], [ %4886, %after_bb610.us ], [ %4886, %after_bb607.us ], [ %4886, %after_bb604.us ], [ %4886, %after_bb601.us ], [ %4886, %after_bb598.us ], [ %4886, %after_bb595.us ], [ %4886, %after_bb592.us ], [ %4886, %after_bb589.us ], [ %4886, %after_bb586.us ], [ %4886, %after_bb583.us ], [ %4886, %after_bb580.us ], [ %4886, %after_bb577.us ], [ %4886, %after_bb574.us ], [ %4886, %after_bb571.us ], [ %4886, %after_bb568.us ], [ %4886, %after_bb565.us ], [ %4886, %after_bb562.us ], [ %4886, %after_bb559.us ], [ %4886, %after_bb556.us ], [ %4886, %after_bb553.us ], [ %4886, %after_bb550.us ], [ %4886, %after_bb547.us ], [ %4886, %after_bb544.us ], [ %4886, %after_bb541.us ], [ %4886, %after_bb538.us ], [ %4886, %after_bb535.us ], [ %4886, %after_bb532.us ], [ %4886, %after_bb529.us ], [ %4886, %after_bb526.us ], [ %4886, %after_bb523.us ], [ %4886, %after_bb520.us ], [ %4886, %after_bb517.us ], [ %4886, %after_bb514.us ], [ %4886, %after_bb511.us ], [ %4886, %after_bb508.us ], [ %4886, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5113 = phi i8 [ %4876, %true_bb626.us ], [ %4876, %after_bb625.us ], [ %4876, %after_bb622.us ], [ %4876, %after_bb619.us ], [ %4876, %after_bb616.us ], [ %4876, %after_bb613.us ], [ %4876, %after_bb610.us ], [ %4876, %after_bb607.us ], [ %4876, %after_bb604.us ], [ %4876, %after_bb601.us ], [ %4876, %after_bb598.us ], [ %4876, %after_bb595.us ], [ %4876, %after_bb592.us ], [ %4876, %after_bb589.us ], [ %4876, %after_bb586.us ], [ %4876, %after_bb583.us ], [ %4876, %after_bb580.us ], [ %4876, %after_bb577.us ], [ %4876, %after_bb574.us ], [ %4876, %after_bb571.us ], [ %4876, %after_bb568.us ], [ %4876, %after_bb565.us ], [ %4876, %after_bb562.us ], [ %4876, %after_bb559.us ], [ %4876, %after_bb556.us ], [ %4876, %after_bb553.us ], [ %4876, %after_bb550.us ], [ %4876, %after_bb547.us ], [ %4876, %after_bb544.us ], [ %4876, %after_bb541.us ], [ %4876, %after_bb538.us ], [ %4876, %after_bb535.us ], [ %4876, %after_bb532.us ], [ %4876, %after_bb529.us ], [ %4876, %after_bb526.us ], [ %4876, %after_bb523.us ], [ %4876, %after_bb520.us ], [ %4876, %after_bb517.us ], [ %4876, %after_bb514.us ], [ %4876, %after_bb511.us ], [ %4876, %after_bb508.us ], [ %4876, %after_bb505.us ], [ %4876, %after_bb502.us ], [ %4876, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5114 = phi i8 [ %4866, %true_bb626.us ], [ %4866, %after_bb625.us ], [ %4866, %after_bb622.us ], [ %4866, %after_bb619.us ], [ %4866, %after_bb616.us ], [ %4866, %after_bb613.us ], [ %4866, %after_bb610.us ], [ %4866, %after_bb607.us ], [ %4866, %after_bb604.us ], [ %4866, %after_bb601.us ], [ %4866, %after_bb598.us ], [ %4866, %after_bb595.us ], [ %4866, %after_bb592.us ], [ %4866, %after_bb589.us ], [ %4866, %after_bb586.us ], [ %4866, %after_bb583.us ], [ %4866, %after_bb580.us ], [ %4866, %after_bb577.us ], [ %4866, %after_bb574.us ], [ %4866, %after_bb571.us ], [ %4866, %after_bb568.us ], [ %4866, %after_bb565.us ], [ %4866, %after_bb562.us ], [ %4866, %after_bb559.us ], [ %4866, %after_bb556.us ], [ %4866, %after_bb553.us ], [ %4866, %after_bb550.us ], [ %4866, %after_bb547.us ], [ %4866, %after_bb544.us ], [ %4866, %after_bb541.us ], [ %4866, %after_bb538.us ], [ %4866, %after_bb535.us ], [ %4866, %after_bb532.us ], [ %4866, %after_bb529.us ], [ %4866, %after_bb526.us ], [ %4866, %after_bb523.us ], [ %4866, %after_bb520.us ], [ %4866, %after_bb517.us ], [ %4866, %after_bb514.us ], [ %4866, %after_bb511.us ], [ %4866, %after_bb508.us ], [ %4866, %after_bb505.us ], [ %4866, %after_bb502.us ], [ %4866, %after_bb499.us ], [ %4866, %after_bb496.us ], [ %4866, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5115 = phi i8 [ %4856, %true_bb626.us ], [ %4856, %after_bb625.us ], [ %4856, %after_bb622.us ], [ %4856, %after_bb619.us ], [ %4856, %after_bb616.us ], [ %4856, %after_bb613.us ], [ %4856, %after_bb610.us ], [ %4856, %after_bb607.us ], [ %4856, %after_bb604.us ], [ %4856, %after_bb601.us ], [ %4856, %after_bb598.us ], [ %4856, %after_bb595.us ], [ %4856, %after_bb592.us ], [ %4856, %after_bb589.us ], [ %4856, %after_bb586.us ], [ %4856, %after_bb583.us ], [ %4856, %after_bb580.us ], [ %4856, %after_bb577.us ], [ %4856, %after_bb574.us ], [ %4856, %after_bb571.us ], [ %4856, %after_bb568.us ], [ %4856, %after_bb565.us ], [ %4856, %after_bb562.us ], [ %4856, %after_bb559.us ], [ %4856, %after_bb556.us ], [ %4856, %after_bb553.us ], [ %4856, %after_bb550.us ], [ %4856, %after_bb547.us ], [ %4856, %after_bb544.us ], [ %4856, %after_bb541.us ], [ %4856, %after_bb538.us ], [ %4856, %after_bb535.us ], [ %4856, %after_bb532.us ], [ %4856, %after_bb529.us ], [ %4856, %after_bb526.us ], [ %4856, %after_bb523.us ], [ %4856, %after_bb520.us ], [ %4856, %after_bb517.us ], [ %4856, %after_bb514.us ], [ %4856, %after_bb511.us ], [ %4856, %after_bb508.us ], [ %4856, %after_bb505.us ], [ %4856, %after_bb502.us ], [ %4856, %after_bb499.us ], [ %4856, %after_bb496.us ], [ %4856, %after_bb493.us ], [ %4856, %after_bb490.us ], [ %4856, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5116 = phi i8 [ %4846, %true_bb626.us ], [ %4846, %after_bb625.us ], [ %4846, %after_bb622.us ], [ %4846, %after_bb619.us ], [ %4846, %after_bb616.us ], [ %4846, %after_bb613.us ], [ %4846, %after_bb610.us ], [ %4846, %after_bb607.us ], [ %4846, %after_bb604.us ], [ %4846, %after_bb601.us ], [ %4846, %after_bb598.us ], [ %4846, %after_bb595.us ], [ %4846, %after_bb592.us ], [ %4846, %after_bb589.us ], [ %4846, %after_bb586.us ], [ %4846, %after_bb583.us ], [ %4846, %after_bb580.us ], [ %4846, %after_bb577.us ], [ %4846, %after_bb574.us ], [ %4846, %after_bb571.us ], [ %4846, %after_bb568.us ], [ %4846, %after_bb565.us ], [ %4846, %after_bb562.us ], [ %4846, %after_bb559.us ], [ %4846, %after_bb556.us ], [ %4846, %after_bb553.us ], [ %4846, %after_bb550.us ], [ %4846, %after_bb547.us ], [ %4846, %after_bb544.us ], [ %4846, %after_bb541.us ], [ %4846, %after_bb538.us ], [ %4846, %after_bb535.us ], [ %4846, %after_bb532.us ], [ %4846, %after_bb529.us ], [ %4846, %after_bb526.us ], [ %4846, %after_bb523.us ], [ %4846, %after_bb520.us ], [ %4846, %after_bb517.us ], [ %4846, %after_bb514.us ], [ %4846, %after_bb511.us ], [ %4846, %after_bb508.us ], [ %4846, %after_bb505.us ], [ %4846, %after_bb502.us ], [ %4846, %after_bb499.us ], [ %4846, %after_bb496.us ], [ %4846, %after_bb493.us ], [ %4846, %after_bb490.us ], [ %4846, %after_bb487.us ], [ %4846, %after_bb484.us ], [ %4846, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5117 = phi i8 [ %4836, %true_bb626.us ], [ %4836, %after_bb625.us ], [ %4836, %after_bb622.us ], [ %4836, %after_bb619.us ], [ %4836, %after_bb616.us ], [ %4836, %after_bb613.us ], [ %4836, %after_bb610.us ], [ %4836, %after_bb607.us ], [ %4836, %after_bb604.us ], [ %4836, %after_bb601.us ], [ %4836, %after_bb598.us ], [ %4836, %after_bb595.us ], [ %4836, %after_bb592.us ], [ %4836, %after_bb589.us ], [ %4836, %after_bb586.us ], [ %4836, %after_bb583.us ], [ %4836, %after_bb580.us ], [ %4836, %after_bb577.us ], [ %4836, %after_bb574.us ], [ %4836, %after_bb571.us ], [ %4836, %after_bb568.us ], [ %4836, %after_bb565.us ], [ %4836, %after_bb562.us ], [ %4836, %after_bb559.us ], [ %4836, %after_bb556.us ], [ %4836, %after_bb553.us ], [ %4836, %after_bb550.us ], [ %4836, %after_bb547.us ], [ %4836, %after_bb544.us ], [ %4836, %after_bb541.us ], [ %4836, %after_bb538.us ], [ %4836, %after_bb535.us ], [ %4836, %after_bb532.us ], [ %4836, %after_bb529.us ], [ %4836, %after_bb526.us ], [ %4836, %after_bb523.us ], [ %4836, %after_bb520.us ], [ %4836, %after_bb517.us ], [ %4836, %after_bb514.us ], [ %4836, %after_bb511.us ], [ %4836, %after_bb508.us ], [ %4836, %after_bb505.us ], [ %4836, %after_bb502.us ], [ %4836, %after_bb499.us ], [ %4836, %after_bb496.us ], [ %4836, %after_bb493.us ], [ %4836, %after_bb490.us ], [ %4836, %after_bb487.us ], [ %4836, %after_bb484.us ], [ %4836, %after_bb481.us ], [ %4836, %after_bb478.us ], [ %4836, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5118 = phi i8 [ %4826, %true_bb626.us ], [ %4826, %after_bb625.us ], [ %4826, %after_bb622.us ], [ %4826, %after_bb619.us ], [ %4826, %after_bb616.us ], [ %4826, %after_bb613.us ], [ %4826, %after_bb610.us ], [ %4826, %after_bb607.us ], [ %4826, %after_bb604.us ], [ %4826, %after_bb601.us ], [ %4826, %after_bb598.us ], [ %4826, %after_bb595.us ], [ %4826, %after_bb592.us ], [ %4826, %after_bb589.us ], [ %4826, %after_bb586.us ], [ %4826, %after_bb583.us ], [ %4826, %after_bb580.us ], [ %4826, %after_bb577.us ], [ %4826, %after_bb574.us ], [ %4826, %after_bb571.us ], [ %4826, %after_bb568.us ], [ %4826, %after_bb565.us ], [ %4826, %after_bb562.us ], [ %4826, %after_bb559.us ], [ %4826, %after_bb556.us ], [ %4826, %after_bb553.us ], [ %4826, %after_bb550.us ], [ %4826, %after_bb547.us ], [ %4826, %after_bb544.us ], [ %4826, %after_bb541.us ], [ %4826, %after_bb538.us ], [ %4826, %after_bb535.us ], [ %4826, %after_bb532.us ], [ %4826, %after_bb529.us ], [ %4826, %after_bb526.us ], [ %4826, %after_bb523.us ], [ %4826, %after_bb520.us ], [ %4826, %after_bb517.us ], [ %4826, %after_bb514.us ], [ %4826, %after_bb511.us ], [ %4826, %after_bb508.us ], [ %4826, %after_bb505.us ], [ %4826, %after_bb502.us ], [ %4826, %after_bb499.us ], [ %4826, %after_bb496.us ], [ %4826, %after_bb493.us ], [ %4826, %after_bb490.us ], [ %4826, %after_bb487.us ], [ %4826, %after_bb484.us ], [ %4826, %after_bb481.us ], [ %4826, %after_bb478.us ], [ %4826, %after_bb475.us ], [ %4826, %after_bb472.us ], [ %4826, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5119 = phi i8 [ %4816, %true_bb626.us ], [ %4816, %after_bb625.us ], [ %4816, %after_bb622.us ], [ %4816, %after_bb619.us ], [ %4816, %after_bb616.us ], [ %4816, %after_bb613.us ], [ %4816, %after_bb610.us ], [ %4816, %after_bb607.us ], [ %4816, %after_bb604.us ], [ %4816, %after_bb601.us ], [ %4816, %after_bb598.us ], [ %4816, %after_bb595.us ], [ %4816, %after_bb592.us ], [ %4816, %after_bb589.us ], [ %4816, %after_bb586.us ], [ %4816, %after_bb583.us ], [ %4816, %after_bb580.us ], [ %4816, %after_bb577.us ], [ %4816, %after_bb574.us ], [ %4816, %after_bb571.us ], [ %4816, %after_bb568.us ], [ %4816, %after_bb565.us ], [ %4816, %after_bb562.us ], [ %4816, %after_bb559.us ], [ %4816, %after_bb556.us ], [ %4816, %after_bb553.us ], [ %4816, %after_bb550.us ], [ %4816, %after_bb547.us ], [ %4816, %after_bb544.us ], [ %4816, %after_bb541.us ], [ %4816, %after_bb538.us ], [ %4816, %after_bb535.us ], [ %4816, %after_bb532.us ], [ %4816, %after_bb529.us ], [ %4816, %after_bb526.us ], [ %4816, %after_bb523.us ], [ %4816, %after_bb520.us ], [ %4816, %after_bb517.us ], [ %4816, %after_bb514.us ], [ %4816, %after_bb511.us ], [ %4816, %after_bb508.us ], [ %4816, %after_bb505.us ], [ %4816, %after_bb502.us ], [ %4816, %after_bb499.us ], [ %4816, %after_bb496.us ], [ %4816, %after_bb493.us ], [ %4816, %after_bb490.us ], [ %4816, %after_bb487.us ], [ %4816, %after_bb484.us ], [ %4816, %after_bb481.us ], [ %4816, %after_bb478.us ], [ %4816, %after_bb475.us ], [ %4816, %after_bb472.us ], [ %4816, %after_bb469.us ], [ %4816, %after_bb466.us ], [ %4816, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5120 = phi i8 [ %4806, %true_bb626.us ], [ %4806, %after_bb625.us ], [ %4806, %after_bb622.us ], [ %4806, %after_bb619.us ], [ %4806, %after_bb616.us ], [ %4806, %after_bb613.us ], [ %4806, %after_bb610.us ], [ %4806, %after_bb607.us ], [ %4806, %after_bb604.us ], [ %4806, %after_bb601.us ], [ %4806, %after_bb598.us ], [ %4806, %after_bb595.us ], [ %4806, %after_bb592.us ], [ %4806, %after_bb589.us ], [ %4806, %after_bb586.us ], [ %4806, %after_bb583.us ], [ %4806, %after_bb580.us ], [ %4806, %after_bb577.us ], [ %4806, %after_bb574.us ], [ %4806, %after_bb571.us ], [ %4806, %after_bb568.us ], [ %4806, %after_bb565.us ], [ %4806, %after_bb562.us ], [ %4806, %after_bb559.us ], [ %4806, %after_bb556.us ], [ %4806, %after_bb553.us ], [ %4806, %after_bb550.us ], [ %4806, %after_bb547.us ], [ %4806, %after_bb544.us ], [ %4806, %after_bb541.us ], [ %4806, %after_bb538.us ], [ %4806, %after_bb535.us ], [ %4806, %after_bb532.us ], [ %4806, %after_bb529.us ], [ %4806, %after_bb526.us ], [ %4806, %after_bb523.us ], [ %4806, %after_bb520.us ], [ %4806, %after_bb517.us ], [ %4806, %after_bb514.us ], [ %4806, %after_bb511.us ], [ %4806, %after_bb508.us ], [ %4806, %after_bb505.us ], [ %4806, %after_bb502.us ], [ %4806, %after_bb499.us ], [ %4806, %after_bb496.us ], [ %4806, %after_bb493.us ], [ %4806, %after_bb490.us ], [ %4806, %after_bb487.us ], [ %4806, %after_bb484.us ], [ %4806, %after_bb481.us ], [ %4806, %after_bb478.us ], [ %4806, %after_bb475.us ], [ %4806, %after_bb472.us ], [ %4806, %after_bb469.us ], [ %4806, %after_bb466.us ], [ %4806, %after_bb463.us ], [ %4806, %after_bb460.us ], [ %4806, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5121 = phi i8 [ %4796, %true_bb626.us ], [ %4796, %after_bb625.us ], [ %4796, %after_bb622.us ], [ %4796, %after_bb619.us ], [ %4796, %after_bb616.us ], [ %4796, %after_bb613.us ], [ %4796, %after_bb610.us ], [ %4796, %after_bb607.us ], [ %4796, %after_bb604.us ], [ %4796, %after_bb601.us ], [ %4796, %after_bb598.us ], [ %4796, %after_bb595.us ], [ %4796, %after_bb592.us ], [ %4796, %after_bb589.us ], [ %4796, %after_bb586.us ], [ %4796, %after_bb583.us ], [ %4796, %after_bb580.us ], [ %4796, %after_bb577.us ], [ %4796, %after_bb574.us ], [ %4796, %after_bb571.us ], [ %4796, %after_bb568.us ], [ %4796, %after_bb565.us ], [ %4796, %after_bb562.us ], [ %4796, %after_bb559.us ], [ %4796, %after_bb556.us ], [ %4796, %after_bb553.us ], [ %4796, %after_bb550.us ], [ %4796, %after_bb547.us ], [ %4796, %after_bb544.us ], [ %4796, %after_bb541.us ], [ %4796, %after_bb538.us ], [ %4796, %after_bb535.us ], [ %4796, %after_bb532.us ], [ %4796, %after_bb529.us ], [ %4796, %after_bb526.us ], [ %4796, %after_bb523.us ], [ %4796, %after_bb520.us ], [ %4796, %after_bb517.us ], [ %4796, %after_bb514.us ], [ %4796, %after_bb511.us ], [ %4796, %after_bb508.us ], [ %4796, %after_bb505.us ], [ %4796, %after_bb502.us ], [ %4796, %after_bb499.us ], [ %4796, %after_bb496.us ], [ %4796, %after_bb493.us ], [ %4796, %after_bb490.us ], [ %4796, %after_bb487.us ], [ %4796, %after_bb484.us ], [ %4796, %after_bb481.us ], [ %4796, %after_bb478.us ], [ %4796, %after_bb475.us ], [ %4796, %after_bb472.us ], [ %4796, %after_bb469.us ], [ %4796, %after_bb466.us ], [ %4796, %after_bb463.us ], [ %4796, %after_bb460.us ], [ %4796, %after_bb457.us ], [ %4796, %after_bb454.us ], [ %4796, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5122 = phi i8 [ %4786, %true_bb626.us ], [ %4786, %after_bb625.us ], [ %4786, %after_bb622.us ], [ %4786, %after_bb619.us ], [ %4786, %after_bb616.us ], [ %4786, %after_bb613.us ], [ %4786, %after_bb610.us ], [ %4786, %after_bb607.us ], [ %4786, %after_bb604.us ], [ %4786, %after_bb601.us ], [ %4786, %after_bb598.us ], [ %4786, %after_bb595.us ], [ %4786, %after_bb592.us ], [ %4786, %after_bb589.us ], [ %4786, %after_bb586.us ], [ %4786, %after_bb583.us ], [ %4786, %after_bb580.us ], [ %4786, %after_bb577.us ], [ %4786, %after_bb574.us ], [ %4786, %after_bb571.us ], [ %4786, %after_bb568.us ], [ %4786, %after_bb565.us ], [ %4786, %after_bb562.us ], [ %4786, %after_bb559.us ], [ %4786, %after_bb556.us ], [ %4786, %after_bb553.us ], [ %4786, %after_bb550.us ], [ %4786, %after_bb547.us ], [ %4786, %after_bb544.us ], [ %4786, %after_bb541.us ], [ %4786, %after_bb538.us ], [ %4786, %after_bb535.us ], [ %4786, %after_bb532.us ], [ %4786, %after_bb529.us ], [ %4786, %after_bb526.us ], [ %4786, %after_bb523.us ], [ %4786, %after_bb520.us ], [ %4786, %after_bb517.us ], [ %4786, %after_bb514.us ], [ %4786, %after_bb511.us ], [ %4786, %after_bb508.us ], [ %4786, %after_bb505.us ], [ %4786, %after_bb502.us ], [ %4786, %after_bb499.us ], [ %4786, %after_bb496.us ], [ %4786, %after_bb493.us ], [ %4786, %after_bb490.us ], [ %4786, %after_bb487.us ], [ %4786, %after_bb484.us ], [ %4786, %after_bb481.us ], [ %4786, %after_bb478.us ], [ %4786, %after_bb475.us ], [ %4786, %after_bb472.us ], [ %4786, %after_bb469.us ], [ %4786, %after_bb466.us ], [ %4786, %after_bb463.us ], [ %4786, %after_bb460.us ], [ %4786, %after_bb457.us ], [ %4786, %after_bb454.us ], [ %4786, %after_bb451.us ], [ %4786, %after_bb448.us ], [ %4786, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5123 = phi i8 [ %4781, %true_bb626.us ], [ %4781, %after_bb625.us ], [ %4781, %after_bb622.us ], [ %4781, %after_bb619.us ], [ %4781, %after_bb616.us ], [ %4781, %after_bb613.us ], [ %4781, %after_bb610.us ], [ %4781, %after_bb607.us ], [ %4781, %after_bb604.us ], [ %4781, %after_bb601.us ], [ %4781, %after_bb598.us ], [ %4781, %after_bb595.us ], [ %4781, %after_bb592.us ], [ %4781, %after_bb589.us ], [ %4781, %after_bb586.us ], [ %4781, %after_bb583.us ], [ %4781, %after_bb580.us ], [ %4781, %after_bb577.us ], [ %4781, %after_bb574.us ], [ %4781, %after_bb571.us ], [ %4781, %after_bb568.us ], [ %4781, %after_bb565.us ], [ %4781, %after_bb562.us ], [ %4781, %after_bb559.us ], [ %4781, %after_bb556.us ], [ %4781, %after_bb553.us ], [ %4781, %after_bb550.us ], [ %4781, %after_bb547.us ], [ %4781, %after_bb544.us ], [ %4781, %after_bb541.us ], [ %4781, %after_bb538.us ], [ %4781, %after_bb535.us ], [ %4781, %after_bb532.us ], [ %4781, %after_bb529.us ], [ %4781, %after_bb526.us ], [ %4781, %after_bb523.us ], [ %4781, %after_bb520.us ], [ %4781, %after_bb517.us ], [ %4781, %after_bb514.us ], [ %4781, %after_bb511.us ], [ %4781, %after_bb508.us ], [ %4781, %after_bb505.us ], [ %4781, %after_bb502.us ], [ %4781, %after_bb499.us ], [ %4781, %after_bb496.us ], [ %4781, %after_bb493.us ], [ %4781, %after_bb490.us ], [ %4781, %after_bb487.us ], [ %4781, %after_bb484.us ], [ %4781, %after_bb481.us ], [ %4781, %after_bb478.us ], [ %4781, %after_bb475.us ], [ %4781, %after_bb472.us ], [ %4781, %after_bb469.us ], [ %4781, %after_bb466.us ], [ %4781, %after_bb463.us ], [ %4781, %after_bb460.us ], [ %4781, %after_bb457.us ], [ %4781, %after_bb454.us ], [ %4781, %after_bb451.us ], [ %4781, %after_bb448.us ], [ %4781, %after_bb445.us ], [ %4781, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5124 = phi i8 [ %4791, %true_bb626.us ], [ %4791, %after_bb625.us ], [ %4791, %after_bb622.us ], [ %4791, %after_bb619.us ], [ %4791, %after_bb616.us ], [ %4791, %after_bb613.us ], [ %4791, %after_bb610.us ], [ %4791, %after_bb607.us ], [ %4791, %after_bb604.us ], [ %4791, %after_bb601.us ], [ %4791, %after_bb598.us ], [ %4791, %after_bb595.us ], [ %4791, %after_bb592.us ], [ %4791, %after_bb589.us ], [ %4791, %after_bb586.us ], [ %4791, %after_bb583.us ], [ %4791, %after_bb580.us ], [ %4791, %after_bb577.us ], [ %4791, %after_bb574.us ], [ %4791, %after_bb571.us ], [ %4791, %after_bb568.us ], [ %4791, %after_bb565.us ], [ %4791, %after_bb562.us ], [ %4791, %after_bb559.us ], [ %4791, %after_bb556.us ], [ %4791, %after_bb553.us ], [ %4791, %after_bb550.us ], [ %4791, %after_bb547.us ], [ %4791, %after_bb544.us ], [ %4791, %after_bb541.us ], [ %4791, %after_bb538.us ], [ %4791, %after_bb535.us ], [ %4791, %after_bb532.us ], [ %4791, %after_bb529.us ], [ %4791, %after_bb526.us ], [ %4791, %after_bb523.us ], [ %4791, %after_bb520.us ], [ %4791, %after_bb517.us ], [ %4791, %after_bb514.us ], [ %4791, %after_bb511.us ], [ %4791, %after_bb508.us ], [ %4791, %after_bb505.us ], [ %4791, %after_bb502.us ], [ %4791, %after_bb499.us ], [ %4791, %after_bb496.us ], [ %4791, %after_bb493.us ], [ %4791, %after_bb490.us ], [ %4791, %after_bb487.us ], [ %4791, %after_bb484.us ], [ %4791, %after_bb481.us ], [ %4791, %after_bb478.us ], [ %4791, %after_bb475.us ], [ %4791, %after_bb472.us ], [ %4791, %after_bb469.us ], [ %4791, %after_bb466.us ], [ %4791, %after_bb463.us ], [ %4791, %after_bb460.us ], [ %4791, %after_bb457.us ], [ %4791, %after_bb454.us ], [ %4791, %after_bb451.us ], [ %4791, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5125 = phi i8 [ %4801, %true_bb626.us ], [ %4801, %after_bb625.us ], [ %4801, %after_bb622.us ], [ %4801, %after_bb619.us ], [ %4801, %after_bb616.us ], [ %4801, %after_bb613.us ], [ %4801, %after_bb610.us ], [ %4801, %after_bb607.us ], [ %4801, %after_bb604.us ], [ %4801, %after_bb601.us ], [ %4801, %after_bb598.us ], [ %4801, %after_bb595.us ], [ %4801, %after_bb592.us ], [ %4801, %after_bb589.us ], [ %4801, %after_bb586.us ], [ %4801, %after_bb583.us ], [ %4801, %after_bb580.us ], [ %4801, %after_bb577.us ], [ %4801, %after_bb574.us ], [ %4801, %after_bb571.us ], [ %4801, %after_bb568.us ], [ %4801, %after_bb565.us ], [ %4801, %after_bb562.us ], [ %4801, %after_bb559.us ], [ %4801, %after_bb556.us ], [ %4801, %after_bb553.us ], [ %4801, %after_bb550.us ], [ %4801, %after_bb547.us ], [ %4801, %after_bb544.us ], [ %4801, %after_bb541.us ], [ %4801, %after_bb538.us ], [ %4801, %after_bb535.us ], [ %4801, %after_bb532.us ], [ %4801, %after_bb529.us ], [ %4801, %after_bb526.us ], [ %4801, %after_bb523.us ], [ %4801, %after_bb520.us ], [ %4801, %after_bb517.us ], [ %4801, %after_bb514.us ], [ %4801, %after_bb511.us ], [ %4801, %after_bb508.us ], [ %4801, %after_bb505.us ], [ %4801, %after_bb502.us ], [ %4801, %after_bb499.us ], [ %4801, %after_bb496.us ], [ %4801, %after_bb493.us ], [ %4801, %after_bb490.us ], [ %4801, %after_bb487.us ], [ %4801, %after_bb484.us ], [ %4801, %after_bb481.us ], [ %4801, %after_bb478.us ], [ %4801, %after_bb475.us ], [ %4801, %after_bb472.us ], [ %4801, %after_bb469.us ], [ %4801, %after_bb466.us ], [ %4801, %after_bb463.us ], [ %4801, %after_bb460.us ], [ %4801, %after_bb457.us ], [ %4801, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5126 = phi i8 [ %4811, %true_bb626.us ], [ %4811, %after_bb625.us ], [ %4811, %after_bb622.us ], [ %4811, %after_bb619.us ], [ %4811, %after_bb616.us ], [ %4811, %after_bb613.us ], [ %4811, %after_bb610.us ], [ %4811, %after_bb607.us ], [ %4811, %after_bb604.us ], [ %4811, %after_bb601.us ], [ %4811, %after_bb598.us ], [ %4811, %after_bb595.us ], [ %4811, %after_bb592.us ], [ %4811, %after_bb589.us ], [ %4811, %after_bb586.us ], [ %4811, %after_bb583.us ], [ %4811, %after_bb580.us ], [ %4811, %after_bb577.us ], [ %4811, %after_bb574.us ], [ %4811, %after_bb571.us ], [ %4811, %after_bb568.us ], [ %4811, %after_bb565.us ], [ %4811, %after_bb562.us ], [ %4811, %after_bb559.us ], [ %4811, %after_bb556.us ], [ %4811, %after_bb553.us ], [ %4811, %after_bb550.us ], [ %4811, %after_bb547.us ], [ %4811, %after_bb544.us ], [ %4811, %after_bb541.us ], [ %4811, %after_bb538.us ], [ %4811, %after_bb535.us ], [ %4811, %after_bb532.us ], [ %4811, %after_bb529.us ], [ %4811, %after_bb526.us ], [ %4811, %after_bb523.us ], [ %4811, %after_bb520.us ], [ %4811, %after_bb517.us ], [ %4811, %after_bb514.us ], [ %4811, %after_bb511.us ], [ %4811, %after_bb508.us ], [ %4811, %after_bb505.us ], [ %4811, %after_bb502.us ], [ %4811, %after_bb499.us ], [ %4811, %after_bb496.us ], [ %4811, %after_bb493.us ], [ %4811, %after_bb490.us ], [ %4811, %after_bb487.us ], [ %4811, %after_bb484.us ], [ %4811, %after_bb481.us ], [ %4811, %after_bb478.us ], [ %4811, %after_bb475.us ], [ %4811, %after_bb472.us ], [ %4811, %after_bb469.us ], [ %4811, %after_bb466.us ], [ %4811, %after_bb463.us ], [ %4811, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5127 = phi i8 [ %4821, %true_bb626.us ], [ %4821, %after_bb625.us ], [ %4821, %after_bb622.us ], [ %4821, %after_bb619.us ], [ %4821, %after_bb616.us ], [ %4821, %after_bb613.us ], [ %4821, %after_bb610.us ], [ %4821, %after_bb607.us ], [ %4821, %after_bb604.us ], [ %4821, %after_bb601.us ], [ %4821, %after_bb598.us ], [ %4821, %after_bb595.us ], [ %4821, %after_bb592.us ], [ %4821, %after_bb589.us ], [ %4821, %after_bb586.us ], [ %4821, %after_bb583.us ], [ %4821, %after_bb580.us ], [ %4821, %after_bb577.us ], [ %4821, %after_bb574.us ], [ %4821, %after_bb571.us ], [ %4821, %after_bb568.us ], [ %4821, %after_bb565.us ], [ %4821, %after_bb562.us ], [ %4821, %after_bb559.us ], [ %4821, %after_bb556.us ], [ %4821, %after_bb553.us ], [ %4821, %after_bb550.us ], [ %4821, %after_bb547.us ], [ %4821, %after_bb544.us ], [ %4821, %after_bb541.us ], [ %4821, %after_bb538.us ], [ %4821, %after_bb535.us ], [ %4821, %after_bb532.us ], [ %4821, %after_bb529.us ], [ %4821, %after_bb526.us ], [ %4821, %after_bb523.us ], [ %4821, %after_bb520.us ], [ %4821, %after_bb517.us ], [ %4821, %after_bb514.us ], [ %4821, %after_bb511.us ], [ %4821, %after_bb508.us ], [ %4821, %after_bb505.us ], [ %4821, %after_bb502.us ], [ %4821, %after_bb499.us ], [ %4821, %after_bb496.us ], [ %4821, %after_bb493.us ], [ %4821, %after_bb490.us ], [ %4821, %after_bb487.us ], [ %4821, %after_bb484.us ], [ %4821, %after_bb481.us ], [ %4821, %after_bb478.us ], [ %4821, %after_bb475.us ], [ %4821, %after_bb472.us ], [ %4821, %after_bb469.us ], [ %4821, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5128 = phi i8 [ %4831, %true_bb626.us ], [ %4831, %after_bb625.us ], [ %4831, %after_bb622.us ], [ %4831, %after_bb619.us ], [ %4831, %after_bb616.us ], [ %4831, %after_bb613.us ], [ %4831, %after_bb610.us ], [ %4831, %after_bb607.us ], [ %4831, %after_bb604.us ], [ %4831, %after_bb601.us ], [ %4831, %after_bb598.us ], [ %4831, %after_bb595.us ], [ %4831, %after_bb592.us ], [ %4831, %after_bb589.us ], [ %4831, %after_bb586.us ], [ %4831, %after_bb583.us ], [ %4831, %after_bb580.us ], [ %4831, %after_bb577.us ], [ %4831, %after_bb574.us ], [ %4831, %after_bb571.us ], [ %4831, %after_bb568.us ], [ %4831, %after_bb565.us ], [ %4831, %after_bb562.us ], [ %4831, %after_bb559.us ], [ %4831, %after_bb556.us ], [ %4831, %after_bb553.us ], [ %4831, %after_bb550.us ], [ %4831, %after_bb547.us ], [ %4831, %after_bb544.us ], [ %4831, %after_bb541.us ], [ %4831, %after_bb538.us ], [ %4831, %after_bb535.us ], [ %4831, %after_bb532.us ], [ %4831, %after_bb529.us ], [ %4831, %after_bb526.us ], [ %4831, %after_bb523.us ], [ %4831, %after_bb520.us ], [ %4831, %after_bb517.us ], [ %4831, %after_bb514.us ], [ %4831, %after_bb511.us ], [ %4831, %after_bb508.us ], [ %4831, %after_bb505.us ], [ %4831, %after_bb502.us ], [ %4831, %after_bb499.us ], [ %4831, %after_bb496.us ], [ %4831, %after_bb493.us ], [ %4831, %after_bb490.us ], [ %4831, %after_bb487.us ], [ %4831, %after_bb484.us ], [ %4831, %after_bb481.us ], [ %4831, %after_bb478.us ], [ %4831, %after_bb475.us ], [ %4831, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5129 = phi i8 [ %4841, %true_bb626.us ], [ %4841, %after_bb625.us ], [ %4841, %after_bb622.us ], [ %4841, %after_bb619.us ], [ %4841, %after_bb616.us ], [ %4841, %after_bb613.us ], [ %4841, %after_bb610.us ], [ %4841, %after_bb607.us ], [ %4841, %after_bb604.us ], [ %4841, %after_bb601.us ], [ %4841, %after_bb598.us ], [ %4841, %after_bb595.us ], [ %4841, %after_bb592.us ], [ %4841, %after_bb589.us ], [ %4841, %after_bb586.us ], [ %4841, %after_bb583.us ], [ %4841, %after_bb580.us ], [ %4841, %after_bb577.us ], [ %4841, %after_bb574.us ], [ %4841, %after_bb571.us ], [ %4841, %after_bb568.us ], [ %4841, %after_bb565.us ], [ %4841, %after_bb562.us ], [ %4841, %after_bb559.us ], [ %4841, %after_bb556.us ], [ %4841, %after_bb553.us ], [ %4841, %after_bb550.us ], [ %4841, %after_bb547.us ], [ %4841, %after_bb544.us ], [ %4841, %after_bb541.us ], [ %4841, %after_bb538.us ], [ %4841, %after_bb535.us ], [ %4841, %after_bb532.us ], [ %4841, %after_bb529.us ], [ %4841, %after_bb526.us ], [ %4841, %after_bb523.us ], [ %4841, %after_bb520.us ], [ %4841, %after_bb517.us ], [ %4841, %after_bb514.us ], [ %4841, %after_bb511.us ], [ %4841, %after_bb508.us ], [ %4841, %after_bb505.us ], [ %4841, %after_bb502.us ], [ %4841, %after_bb499.us ], [ %4841, %after_bb496.us ], [ %4841, %after_bb493.us ], [ %4841, %after_bb490.us ], [ %4841, %after_bb487.us ], [ %4841, %after_bb484.us ], [ %4841, %after_bb481.us ], [ %4841, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5130 = phi i8 [ %4851, %true_bb626.us ], [ %4851, %after_bb625.us ], [ %4851, %after_bb622.us ], [ %4851, %after_bb619.us ], [ %4851, %after_bb616.us ], [ %4851, %after_bb613.us ], [ %4851, %after_bb610.us ], [ %4851, %after_bb607.us ], [ %4851, %after_bb604.us ], [ %4851, %after_bb601.us ], [ %4851, %after_bb598.us ], [ %4851, %after_bb595.us ], [ %4851, %after_bb592.us ], [ %4851, %after_bb589.us ], [ %4851, %after_bb586.us ], [ %4851, %after_bb583.us ], [ %4851, %after_bb580.us ], [ %4851, %after_bb577.us ], [ %4851, %after_bb574.us ], [ %4851, %after_bb571.us ], [ %4851, %after_bb568.us ], [ %4851, %after_bb565.us ], [ %4851, %after_bb562.us ], [ %4851, %after_bb559.us ], [ %4851, %after_bb556.us ], [ %4851, %after_bb553.us ], [ %4851, %after_bb550.us ], [ %4851, %after_bb547.us ], [ %4851, %after_bb544.us ], [ %4851, %after_bb541.us ], [ %4851, %after_bb538.us ], [ %4851, %after_bb535.us ], [ %4851, %after_bb532.us ], [ %4851, %after_bb529.us ], [ %4851, %after_bb526.us ], [ %4851, %after_bb523.us ], [ %4851, %after_bb520.us ], [ %4851, %after_bb517.us ], [ %4851, %after_bb514.us ], [ %4851, %after_bb511.us ], [ %4851, %after_bb508.us ], [ %4851, %after_bb505.us ], [ %4851, %after_bb502.us ], [ %4851, %after_bb499.us ], [ %4851, %after_bb496.us ], [ %4851, %after_bb493.us ], [ %4851, %after_bb490.us ], [ %4851, %after_bb487.us ], [ %4851, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5131 = phi i8 [ %4861, %true_bb626.us ], [ %4861, %after_bb625.us ], [ %4861, %after_bb622.us ], [ %4861, %after_bb619.us ], [ %4861, %after_bb616.us ], [ %4861, %after_bb613.us ], [ %4861, %after_bb610.us ], [ %4861, %after_bb607.us ], [ %4861, %after_bb604.us ], [ %4861, %after_bb601.us ], [ %4861, %after_bb598.us ], [ %4861, %after_bb595.us ], [ %4861, %after_bb592.us ], [ %4861, %after_bb589.us ], [ %4861, %after_bb586.us ], [ %4861, %after_bb583.us ], [ %4861, %after_bb580.us ], [ %4861, %after_bb577.us ], [ %4861, %after_bb574.us ], [ %4861, %after_bb571.us ], [ %4861, %after_bb568.us ], [ %4861, %after_bb565.us ], [ %4861, %after_bb562.us ], [ %4861, %after_bb559.us ], [ %4861, %after_bb556.us ], [ %4861, %after_bb553.us ], [ %4861, %after_bb550.us ], [ %4861, %after_bb547.us ], [ %4861, %after_bb544.us ], [ %4861, %after_bb541.us ], [ %4861, %after_bb538.us ], [ %4861, %after_bb535.us ], [ %4861, %after_bb532.us ], [ %4861, %after_bb529.us ], [ %4861, %after_bb526.us ], [ %4861, %after_bb523.us ], [ %4861, %after_bb520.us ], [ %4861, %after_bb517.us ], [ %4861, %after_bb514.us ], [ %4861, %after_bb511.us ], [ %4861, %after_bb508.us ], [ %4861, %after_bb505.us ], [ %4861, %after_bb502.us ], [ %4861, %after_bb499.us ], [ %4861, %after_bb496.us ], [ %4861, %after_bb493.us ], [ %4861, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5132 = phi i8 [ %4871, %true_bb626.us ], [ %4871, %after_bb625.us ], [ %4871, %after_bb622.us ], [ %4871, %after_bb619.us ], [ %4871, %after_bb616.us ], [ %4871, %after_bb613.us ], [ %4871, %after_bb610.us ], [ %4871, %after_bb607.us ], [ %4871, %after_bb604.us ], [ %4871, %after_bb601.us ], [ %4871, %after_bb598.us ], [ %4871, %after_bb595.us ], [ %4871, %after_bb592.us ], [ %4871, %after_bb589.us ], [ %4871, %after_bb586.us ], [ %4871, %after_bb583.us ], [ %4871, %after_bb580.us ], [ %4871, %after_bb577.us ], [ %4871, %after_bb574.us ], [ %4871, %after_bb571.us ], [ %4871, %after_bb568.us ], [ %4871, %after_bb565.us ], [ %4871, %after_bb562.us ], [ %4871, %after_bb559.us ], [ %4871, %after_bb556.us ], [ %4871, %after_bb553.us ], [ %4871, %after_bb550.us ], [ %4871, %after_bb547.us ], [ %4871, %after_bb544.us ], [ %4871, %after_bb541.us ], [ %4871, %after_bb538.us ], [ %4871, %after_bb535.us ], [ %4871, %after_bb532.us ], [ %4871, %after_bb529.us ], [ %4871, %after_bb526.us ], [ %4871, %after_bb523.us ], [ %4871, %after_bb520.us ], [ %4871, %after_bb517.us ], [ %4871, %after_bb514.us ], [ %4871, %after_bb511.us ], [ %4871, %after_bb508.us ], [ %4871, %after_bb505.us ], [ %4871, %after_bb502.us ], [ %4871, %after_bb499.us ], [ %4871, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5133 = phi i8 [ %4881, %true_bb626.us ], [ %4881, %after_bb625.us ], [ %4881, %after_bb622.us ], [ %4881, %after_bb619.us ], [ %4881, %after_bb616.us ], [ %4881, %after_bb613.us ], [ %4881, %after_bb610.us ], [ %4881, %after_bb607.us ], [ %4881, %after_bb604.us ], [ %4881, %after_bb601.us ], [ %4881, %after_bb598.us ], [ %4881, %after_bb595.us ], [ %4881, %after_bb592.us ], [ %4881, %after_bb589.us ], [ %4881, %after_bb586.us ], [ %4881, %after_bb583.us ], [ %4881, %after_bb580.us ], [ %4881, %after_bb577.us ], [ %4881, %after_bb574.us ], [ %4881, %after_bb571.us ], [ %4881, %after_bb568.us ], [ %4881, %after_bb565.us ], [ %4881, %after_bb562.us ], [ %4881, %after_bb559.us ], [ %4881, %after_bb556.us ], [ %4881, %after_bb553.us ], [ %4881, %after_bb550.us ], [ %4881, %after_bb547.us ], [ %4881, %after_bb544.us ], [ %4881, %after_bb541.us ], [ %4881, %after_bb538.us ], [ %4881, %after_bb535.us ], [ %4881, %after_bb532.us ], [ %4881, %after_bb529.us ], [ %4881, %after_bb526.us ], [ %4881, %after_bb523.us ], [ %4881, %after_bb520.us ], [ %4881, %after_bb517.us ], [ %4881, %after_bb514.us ], [ %4881, %after_bb511.us ], [ %4881, %after_bb508.us ], [ %4881, %after_bb505.us ], [ %4881, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5134 = phi i8 [ %4891, %true_bb626.us ], [ %4891, %after_bb625.us ], [ %4891, %after_bb622.us ], [ %4891, %after_bb619.us ], [ %4891, %after_bb616.us ], [ %4891, %after_bb613.us ], [ %4891, %after_bb610.us ], [ %4891, %after_bb607.us ], [ %4891, %after_bb604.us ], [ %4891, %after_bb601.us ], [ %4891, %after_bb598.us ], [ %4891, %after_bb595.us ], [ %4891, %after_bb592.us ], [ %4891, %after_bb589.us ], [ %4891, %after_bb586.us ], [ %4891, %after_bb583.us ], [ %4891, %after_bb580.us ], [ %4891, %after_bb577.us ], [ %4891, %after_bb574.us ], [ %4891, %after_bb571.us ], [ %4891, %after_bb568.us ], [ %4891, %after_bb565.us ], [ %4891, %after_bb562.us ], [ %4891, %after_bb559.us ], [ %4891, %after_bb556.us ], [ %4891, %after_bb553.us ], [ %4891, %after_bb550.us ], [ %4891, %after_bb547.us ], [ %4891, %after_bb544.us ], [ %4891, %after_bb541.us ], [ %4891, %after_bb538.us ], [ %4891, %after_bb535.us ], [ %4891, %after_bb532.us ], [ %4891, %after_bb529.us ], [ %4891, %after_bb526.us ], [ %4891, %after_bb523.us ], [ %4891, %after_bb520.us ], [ %4891, %after_bb517.us ], [ %4891, %after_bb514.us ], [ %4891, %after_bb511.us ], [ %4891, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5135 = phi i8 [ %4901, %true_bb626.us ], [ %4901, %after_bb625.us ], [ %4901, %after_bb622.us ], [ %4901, %after_bb619.us ], [ %4901, %after_bb616.us ], [ %4901, %after_bb613.us ], [ %4901, %after_bb610.us ], [ %4901, %after_bb607.us ], [ %4901, %after_bb604.us ], [ %4901, %after_bb601.us ], [ %4901, %after_bb598.us ], [ %4901, %after_bb595.us ], [ %4901, %after_bb592.us ], [ %4901, %after_bb589.us ], [ %4901, %after_bb586.us ], [ %4901, %after_bb583.us ], [ %4901, %after_bb580.us ], [ %4901, %after_bb577.us ], [ %4901, %after_bb574.us ], [ %4901, %after_bb571.us ], [ %4901, %after_bb568.us ], [ %4901, %after_bb565.us ], [ %4901, %after_bb562.us ], [ %4901, %after_bb559.us ], [ %4901, %after_bb556.us ], [ %4901, %after_bb553.us ], [ %4901, %after_bb550.us ], [ %4901, %after_bb547.us ], [ %4901, %after_bb544.us ], [ %4901, %after_bb541.us ], [ %4901, %after_bb538.us ], [ %4901, %after_bb535.us ], [ %4901, %after_bb532.us ], [ %4901, %after_bb529.us ], [ %4901, %after_bb526.us ], [ %4901, %after_bb523.us ], [ %4901, %after_bb520.us ], [ %4901, %after_bb517.us ], [ %4901, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5136 = phi i8 [ %4911, %true_bb626.us ], [ %4911, %after_bb625.us ], [ %4911, %after_bb622.us ], [ %4911, %after_bb619.us ], [ %4911, %after_bb616.us ], [ %4911, %after_bb613.us ], [ %4911, %after_bb610.us ], [ %4911, %after_bb607.us ], [ %4911, %after_bb604.us ], [ %4911, %after_bb601.us ], [ %4911, %after_bb598.us ], [ %4911, %after_bb595.us ], [ %4911, %after_bb592.us ], [ %4911, %after_bb589.us ], [ %4911, %after_bb586.us ], [ %4911, %after_bb583.us ], [ %4911, %after_bb580.us ], [ %4911, %after_bb577.us ], [ %4911, %after_bb574.us ], [ %4911, %after_bb571.us ], [ %4911, %after_bb568.us ], [ %4911, %after_bb565.us ], [ %4911, %after_bb562.us ], [ %4911, %after_bb559.us ], [ %4911, %after_bb556.us ], [ %4911, %after_bb553.us ], [ %4911, %after_bb550.us ], [ %4911, %after_bb547.us ], [ %4911, %after_bb544.us ], [ %4911, %after_bb541.us ], [ %4911, %after_bb538.us ], [ %4911, %after_bb535.us ], [ %4911, %after_bb532.us ], [ %4911, %after_bb529.us ], [ %4911, %after_bb526.us ], [ %4911, %after_bb523.us ], [ %4911, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5137 = phi i8 [ %4921, %true_bb626.us ], [ %4921, %after_bb625.us ], [ %4921, %after_bb622.us ], [ %4921, %after_bb619.us ], [ %4921, %after_bb616.us ], [ %4921, %after_bb613.us ], [ %4921, %after_bb610.us ], [ %4921, %after_bb607.us ], [ %4921, %after_bb604.us ], [ %4921, %after_bb601.us ], [ %4921, %after_bb598.us ], [ %4921, %after_bb595.us ], [ %4921, %after_bb592.us ], [ %4921, %after_bb589.us ], [ %4921, %after_bb586.us ], [ %4921, %after_bb583.us ], [ %4921, %after_bb580.us ], [ %4921, %after_bb577.us ], [ %4921, %after_bb574.us ], [ %4921, %after_bb571.us ], [ %4921, %after_bb568.us ], [ %4921, %after_bb565.us ], [ %4921, %after_bb562.us ], [ %4921, %after_bb559.us ], [ %4921, %after_bb556.us ], [ %4921, %after_bb553.us ], [ %4921, %after_bb550.us ], [ %4921, %after_bb547.us ], [ %4921, %after_bb544.us ], [ %4921, %after_bb541.us ], [ %4921, %after_bb538.us ], [ %4921, %after_bb535.us ], [ %4921, %after_bb532.us ], [ %4921, %after_bb529.us ], [ %4921, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5138 = phi i8 [ %4931, %true_bb626.us ], [ %4931, %after_bb625.us ], [ %4931, %after_bb622.us ], [ %4931, %after_bb619.us ], [ %4931, %after_bb616.us ], [ %4931, %after_bb613.us ], [ %4931, %after_bb610.us ], [ %4931, %after_bb607.us ], [ %4931, %after_bb604.us ], [ %4931, %after_bb601.us ], [ %4931, %after_bb598.us ], [ %4931, %after_bb595.us ], [ %4931, %after_bb592.us ], [ %4931, %after_bb589.us ], [ %4931, %after_bb586.us ], [ %4931, %after_bb583.us ], [ %4931, %after_bb580.us ], [ %4931, %after_bb577.us ], [ %4931, %after_bb574.us ], [ %4931, %after_bb571.us ], [ %4931, %after_bb568.us ], [ %4931, %after_bb565.us ], [ %4931, %after_bb562.us ], [ %4931, %after_bb559.us ], [ %4931, %after_bb556.us ], [ %4931, %after_bb553.us ], [ %4931, %after_bb550.us ], [ %4931, %after_bb547.us ], [ %4931, %after_bb544.us ], [ %4931, %after_bb541.us ], [ %4931, %after_bb538.us ], [ %4931, %after_bb535.us ], [ %4931, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5139 = phi i8 [ %4941, %true_bb626.us ], [ %4941, %after_bb625.us ], [ %4941, %after_bb622.us ], [ %4941, %after_bb619.us ], [ %4941, %after_bb616.us ], [ %4941, %after_bb613.us ], [ %4941, %after_bb610.us ], [ %4941, %after_bb607.us ], [ %4941, %after_bb604.us ], [ %4941, %after_bb601.us ], [ %4941, %after_bb598.us ], [ %4941, %after_bb595.us ], [ %4941, %after_bb592.us ], [ %4941, %after_bb589.us ], [ %4941, %after_bb586.us ], [ %4941, %after_bb583.us ], [ %4941, %after_bb580.us ], [ %4941, %after_bb577.us ], [ %4941, %after_bb574.us ], [ %4941, %after_bb571.us ], [ %4941, %after_bb568.us ], [ %4941, %after_bb565.us ], [ %4941, %after_bb562.us ], [ %4941, %after_bb559.us ], [ %4941, %after_bb556.us ], [ %4941, %after_bb553.us ], [ %4941, %after_bb550.us ], [ %4941, %after_bb547.us ], [ %4941, %after_bb544.us ], [ %4941, %after_bb541.us ], [ %4941, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5140 = phi i8 [ %4951, %true_bb626.us ], [ %4951, %after_bb625.us ], [ %4951, %after_bb622.us ], [ %4951, %after_bb619.us ], [ %4951, %after_bb616.us ], [ %4951, %after_bb613.us ], [ %4951, %after_bb610.us ], [ %4951, %after_bb607.us ], [ %4951, %after_bb604.us ], [ %4951, %after_bb601.us ], [ %4951, %after_bb598.us ], [ %4951, %after_bb595.us ], [ %4951, %after_bb592.us ], [ %4951, %after_bb589.us ], [ %4951, %after_bb586.us ], [ %4951, %after_bb583.us ], [ %4951, %after_bb580.us ], [ %4951, %after_bb577.us ], [ %4951, %after_bb574.us ], [ %4951, %after_bb571.us ], [ %4951, %after_bb568.us ], [ %4951, %after_bb565.us ], [ %4951, %after_bb562.us ], [ %4951, %after_bb559.us ], [ %4951, %after_bb556.us ], [ %4951, %after_bb553.us ], [ %4951, %after_bb550.us ], [ %4951, %after_bb547.us ], [ %4951, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5141 = phi i8 [ %4961, %true_bb626.us ], [ %4961, %after_bb625.us ], [ %4961, %after_bb622.us ], [ %4961, %after_bb619.us ], [ %4961, %after_bb616.us ], [ %4961, %after_bb613.us ], [ %4961, %after_bb610.us ], [ %4961, %after_bb607.us ], [ %4961, %after_bb604.us ], [ %4961, %after_bb601.us ], [ %4961, %after_bb598.us ], [ %4961, %after_bb595.us ], [ %4961, %after_bb592.us ], [ %4961, %after_bb589.us ], [ %4961, %after_bb586.us ], [ %4961, %after_bb583.us ], [ %4961, %after_bb580.us ], [ %4961, %after_bb577.us ], [ %4961, %after_bb574.us ], [ %4961, %after_bb571.us ], [ %4961, %after_bb568.us ], [ %4961, %after_bb565.us ], [ %4961, %after_bb562.us ], [ %4961, %after_bb559.us ], [ %4961, %after_bb556.us ], [ %4961, %after_bb553.us ], [ %4961, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5142 = phi i8 [ %4971, %true_bb626.us ], [ %4971, %after_bb625.us ], [ %4971, %after_bb622.us ], [ %4971, %after_bb619.us ], [ %4971, %after_bb616.us ], [ %4971, %after_bb613.us ], [ %4971, %after_bb610.us ], [ %4971, %after_bb607.us ], [ %4971, %after_bb604.us ], [ %4971, %after_bb601.us ], [ %4971, %after_bb598.us ], [ %4971, %after_bb595.us ], [ %4971, %after_bb592.us ], [ %4971, %after_bb589.us ], [ %4971, %after_bb586.us ], [ %4971, %after_bb583.us ], [ %4971, %after_bb580.us ], [ %4971, %after_bb577.us ], [ %4971, %after_bb574.us ], [ %4971, %after_bb571.us ], [ %4971, %after_bb568.us ], [ %4971, %after_bb565.us ], [ %4971, %after_bb562.us ], [ %4971, %after_bb559.us ], [ %4971, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5143 = phi i8 [ %4981, %true_bb626.us ], [ %4981, %after_bb625.us ], [ %4981, %after_bb622.us ], [ %4981, %after_bb619.us ], [ %4981, %after_bb616.us ], [ %4981, %after_bb613.us ], [ %4981, %after_bb610.us ], [ %4981, %after_bb607.us ], [ %4981, %after_bb604.us ], [ %4981, %after_bb601.us ], [ %4981, %after_bb598.us ], [ %4981, %after_bb595.us ], [ %4981, %after_bb592.us ], [ %4981, %after_bb589.us ], [ %4981, %after_bb586.us ], [ %4981, %after_bb583.us ], [ %4981, %after_bb580.us ], [ %4981, %after_bb577.us ], [ %4981, %after_bb574.us ], [ %4981, %after_bb571.us ], [ %4981, %after_bb568.us ], [ %4981, %after_bb565.us ], [ %4981, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5144 = phi i8 [ %4991, %true_bb626.us ], [ %4991, %after_bb625.us ], [ %4991, %after_bb622.us ], [ %4991, %after_bb619.us ], [ %4991, %after_bb616.us ], [ %4991, %after_bb613.us ], [ %4991, %after_bb610.us ], [ %4991, %after_bb607.us ], [ %4991, %after_bb604.us ], [ %4991, %after_bb601.us ], [ %4991, %after_bb598.us ], [ %4991, %after_bb595.us ], [ %4991, %after_bb592.us ], [ %4991, %after_bb589.us ], [ %4991, %after_bb586.us ], [ %4991, %after_bb583.us ], [ %4991, %after_bb580.us ], [ %4991, %after_bb577.us ], [ %4991, %after_bb574.us ], [ %4991, %after_bb571.us ], [ %4991, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5145 = phi i8 [ %5001, %true_bb626.us ], [ %5001, %after_bb625.us ], [ %5001, %after_bb622.us ], [ %5001, %after_bb619.us ], [ %5001, %after_bb616.us ], [ %5001, %after_bb613.us ], [ %5001, %after_bb610.us ], [ %5001, %after_bb607.us ], [ %5001, %after_bb604.us ], [ %5001, %after_bb601.us ], [ %5001, %after_bb598.us ], [ %5001, %after_bb595.us ], [ %5001, %after_bb592.us ], [ %5001, %after_bb589.us ], [ %5001, %after_bb586.us ], [ %5001, %after_bb583.us ], [ %5001, %after_bb580.us ], [ %5001, %after_bb577.us ], [ %5001, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5146 = phi i8 [ %5011, %true_bb626.us ], [ %5011, %after_bb625.us ], [ %5011, %after_bb622.us ], [ %5011, %after_bb619.us ], [ %5011, %after_bb616.us ], [ %5011, %after_bb613.us ], [ %5011, %after_bb610.us ], [ %5011, %after_bb607.us ], [ %5011, %after_bb604.us ], [ %5011, %after_bb601.us ], [ %5011, %after_bb598.us ], [ %5011, %after_bb595.us ], [ %5011, %after_bb592.us ], [ %5011, %after_bb589.us ], [ %5011, %after_bb586.us ], [ %5011, %after_bb583.us ], [ %5011, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5147 = phi i8 [ %5021, %true_bb626.us ], [ %5021, %after_bb625.us ], [ %5021, %after_bb622.us ], [ %5021, %after_bb619.us ], [ %5021, %after_bb616.us ], [ %5021, %after_bb613.us ], [ %5021, %after_bb610.us ], [ %5021, %after_bb607.us ], [ %5021, %after_bb604.us ], [ %5021, %after_bb601.us ], [ %5021, %after_bb598.us ], [ %5021, %after_bb595.us ], [ %5021, %after_bb592.us ], [ %5021, %after_bb589.us ], [ %5021, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5148 = phi i8 [ %5031, %true_bb626.us ], [ %5031, %after_bb625.us ], [ %5031, %after_bb622.us ], [ %5031, %after_bb619.us ], [ %5031, %after_bb616.us ], [ %5031, %after_bb613.us ], [ %5031, %after_bb610.us ], [ %5031, %after_bb607.us ], [ %5031, %after_bb604.us ], [ %5031, %after_bb601.us ], [ %5031, %after_bb598.us ], [ %5031, %after_bb595.us ], [ %5031, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5149 = phi i8 [ %5041, %true_bb626.us ], [ %5041, %after_bb625.us ], [ %5041, %after_bb622.us ], [ %5041, %after_bb619.us ], [ %5041, %after_bb616.us ], [ %5041, %after_bb613.us ], [ %5041, %after_bb610.us ], [ %5041, %after_bb607.us ], [ %5041, %after_bb604.us ], [ %5041, %after_bb601.us ], [ %5041, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5150 = phi i8 [ %5051, %true_bb626.us ], [ %5051, %after_bb625.us ], [ %5051, %after_bb622.us ], [ %5051, %after_bb619.us ], [ %5051, %after_bb616.us ], [ %5051, %after_bb613.us ], [ %5051, %after_bb610.us ], [ %5051, %after_bb607.us ], [ %5051, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5151 = phi i8 [ %5061, %true_bb626.us ], [ %5061, %after_bb625.us ], [ %5061, %after_bb622.us ], [ %5061, %after_bb619.us ], [ %5061, %after_bb616.us ], [ %5061, %after_bb613.us ], [ %5061, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5152 = phi i8 [ %5071, %true_bb626.us ], [ %5071, %after_bb625.us ], [ %5071, %after_bb622.us ], [ %5071, %after_bb619.us ], [ %5071, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5153 = phi i8 [ %5081, %true_bb626.us ], [ %5081, %after_bb625.us ], [ %5081, %after_bb622.us ], [ 0, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5154 = phi i8 [ %5091, %true_bb626.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %after_bb619.us ], [ 0, %after_bb616.us ], [ 0, %after_bb613.us ], [ 0, %after_bb610.us ], [ 0, %after_bb607.us ], [ 0, %after_bb604.us ], [ 0, %after_bb601.us ], [ 0, %after_bb598.us ], [ 0, %after_bb595.us ], [ 0, %after_bb592.us ], [ 0, %after_bb589.us ], [ 0, %after_bb586.us ], [ 0, %after_bb583.us ], [ 0, %after_bb580.us ], [ 0, %after_bb577.us ], [ 0, %after_bb574.us ], [ 0, %after_bb571.us ], [ 0, %after_bb568.us ], [ 0, %after_bb565.us ], [ 0, %after_bb562.us ], [ 0, %after_bb559.us ], [ 0, %after_bb556.us ], [ 0, %after_bb553.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ]
  %5155 = insertelement <128 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %4400, i32 0
  %5156 = insertelement <128 x i8> %5155, i8 %4739, i32 1
  %5157 = insertelement <128 x i8> %5156, i8 %4740, i32 2
  %5158 = insertelement <128 x i8> %5157, i8 %4738, i32 3
  %5159 = insertelement <128 x i8> %5158, i8 %4741, i32 4
  %5160 = insertelement <128 x i8> %5159, i8 %4737, i32 5
  %5161 = insertelement <128 x i8> %5160, i8 %4742, i32 6
  %5162 = insertelement <128 x i8> %5161, i8 %4736, i32 7
  %5163 = insertelement <128 x i8> %5162, i8 %4743, i32 8
  %5164 = insertelement <128 x i8> %5163, i8 %4735, i32 9
  %5165 = insertelement <128 x i8> %5164, i8 %4744, i32 10
  %5166 = insertelement <128 x i8> %5165, i8 %4734, i32 11
  %5167 = insertelement <128 x i8> %5166, i8 %4745, i32 12
  %5168 = insertelement <128 x i8> %5167, i8 %4733, i32 13
  %5169 = insertelement <128 x i8> %5168, i8 %4746, i32 14
  %5170 = insertelement <128 x i8> %5169, i8 %4732, i32 15
  %5171 = insertelement <128 x i8> %5170, i8 %4747, i32 16
  %5172 = insertelement <128 x i8> %5171, i8 %4731, i32 17
  %5173 = insertelement <128 x i8> %5172, i8 %4748, i32 18
  %5174 = insertelement <128 x i8> %5173, i8 %4730, i32 19
  %5175 = insertelement <128 x i8> %5174, i8 %4749, i32 20
  %5176 = insertelement <128 x i8> %5175, i8 %4729, i32 21
  %5177 = insertelement <128 x i8> %5176, i8 %4750, i32 22
  %5178 = insertelement <128 x i8> %5177, i8 %4728, i32 23
  %5179 = insertelement <128 x i8> %5178, i8 %4751, i32 24
  %5180 = insertelement <128 x i8> %5179, i8 %4727, i32 25
  %5181 = insertelement <128 x i8> %5180, i8 %4752, i32 26
  %5182 = insertelement <128 x i8> %5181, i8 %4726, i32 27
  %5183 = insertelement <128 x i8> %5182, i8 %4753, i32 28
  %5184 = insertelement <128 x i8> %5183, i8 %4725, i32 29
  %5185 = insertelement <128 x i8> %5184, i8 %4754, i32 30
  %5186 = insertelement <128 x i8> %5185, i8 %4724, i32 31
  %5187 = insertelement <128 x i8> %5186, i8 %4755, i32 32
  %5188 = insertelement <128 x i8> %5187, i8 %4723, i32 33
  %5189 = insertelement <128 x i8> %5188, i8 %4756, i32 34
  %5190 = insertelement <128 x i8> %5189, i8 %4722, i32 35
  %5191 = insertelement <128 x i8> %5190, i8 %4757, i32 36
  %5192 = insertelement <128 x i8> %5191, i8 %4721, i32 37
  %5193 = insertelement <128 x i8> %5192, i8 %4758, i32 38
  %5194 = insertelement <128 x i8> %5193, i8 %4720, i32 39
  %5195 = insertelement <128 x i8> %5194, i8 %4759, i32 40
  %5196 = insertelement <128 x i8> %5195, i8 %4719, i32 41
  %5197 = insertelement <128 x i8> %5196, i8 %4760, i32 42
  %5198 = insertelement <128 x i8> %5197, i8 %4718, i32 43
  %5199 = insertelement <128 x i8> %5198, i8 %4761, i32 44
  %5200 = insertelement <128 x i8> %5199, i8 %4717, i32 45
  %5201 = insertelement <128 x i8> %5200, i8 %4762, i32 46
  %5202 = insertelement <128 x i8> %5201, i8 %4716, i32 47
  %5203 = insertelement <128 x i8> %5202, i8 %4763, i32 48
  %5204 = insertelement <128 x i8> %5203, i8 %4715, i32 49
  %5205 = insertelement <128 x i8> %5204, i8 %4764, i32 50
  %5206 = insertelement <128 x i8> %5205, i8 %4714, i32 51
  %5207 = insertelement <128 x i8> %5206, i8 %4765, i32 52
  %5208 = insertelement <128 x i8> %5207, i8 %4713, i32 53
  %5209 = insertelement <128 x i8> %5208, i8 %4766, i32 54
  %5210 = insertelement <128 x i8> %5209, i8 %4712, i32 55
  %5211 = insertelement <128 x i8> %5210, i8 %4767, i32 56
  %5212 = insertelement <128 x i8> %5211, i8 %4711, i32 57
  %5213 = insertelement <128 x i8> %5212, i8 %4768, i32 58
  %5214 = insertelement <128 x i8> %5213, i8 %4710, i32 59
  %5215 = insertelement <128 x i8> %5214, i8 %4769, i32 60
  %5216 = insertelement <128 x i8> %5215, i8 %4709, i32 61
  %5217 = insertelement <128 x i8> %5216, i8 %4770, i32 62
  %5218 = insertelement <128 x i8> %5217, i8 %4776, i32 63
  %5219 = insertelement <128 x i8> %5218, i8 %5123, i32 64
  %5220 = insertelement <128 x i8> %5219, i8 %5122, i32 65
  %5221 = insertelement <128 x i8> %5220, i8 %5124, i32 66
  %5222 = insertelement <128 x i8> %5221, i8 %5121, i32 67
  %5223 = insertelement <128 x i8> %5222, i8 %5125, i32 68
  %5224 = insertelement <128 x i8> %5223, i8 %5120, i32 69
  %5225 = insertelement <128 x i8> %5224, i8 %5126, i32 70
  %5226 = insertelement <128 x i8> %5225, i8 %5119, i32 71
  %5227 = insertelement <128 x i8> %5226, i8 %5127, i32 72
  %5228 = insertelement <128 x i8> %5227, i8 %5118, i32 73
  %5229 = insertelement <128 x i8> %5228, i8 %5128, i32 74
  %5230 = insertelement <128 x i8> %5229, i8 %5117, i32 75
  %5231 = insertelement <128 x i8> %5230, i8 %5129, i32 76
  %5232 = insertelement <128 x i8> %5231, i8 %5116, i32 77
  %5233 = insertelement <128 x i8> %5232, i8 %5130, i32 78
  %5234 = insertelement <128 x i8> %5233, i8 %5115, i32 79
  %5235 = insertelement <128 x i8> %5234, i8 %5131, i32 80
  %5236 = insertelement <128 x i8> %5235, i8 %5114, i32 81
  %5237 = insertelement <128 x i8> %5236, i8 %5132, i32 82
  %5238 = insertelement <128 x i8> %5237, i8 %5113, i32 83
  %5239 = insertelement <128 x i8> %5238, i8 %5133, i32 84
  %5240 = insertelement <128 x i8> %5239, i8 %5112, i32 85
  %5241 = insertelement <128 x i8> %5240, i8 %5134, i32 86
  %5242 = insertelement <128 x i8> %5241, i8 %5111, i32 87
  %5243 = insertelement <128 x i8> %5242, i8 %5135, i32 88
  %5244 = insertelement <128 x i8> %5243, i8 %5110, i32 89
  %5245 = insertelement <128 x i8> %5244, i8 %5136, i32 90
  %5246 = insertelement <128 x i8> %5245, i8 %5109, i32 91
  %5247 = insertelement <128 x i8> %5246, i8 %5137, i32 92
  %5248 = insertelement <128 x i8> %5247, i8 %5108, i32 93
  %5249 = insertelement <128 x i8> %5248, i8 %5138, i32 94
  %5250 = insertelement <128 x i8> %5249, i8 %5107, i32 95
  %5251 = insertelement <128 x i8> %5250, i8 %5139, i32 96
  %5252 = insertelement <128 x i8> %5251, i8 %5106, i32 97
  %5253 = insertelement <128 x i8> %5252, i8 %5140, i32 98
  %5254 = insertelement <128 x i8> %5253, i8 %5105, i32 99
  %5255 = insertelement <128 x i8> %5254, i8 %5141, i32 100
  %5256 = insertelement <128 x i8> %5255, i8 %5104, i32 101
  %5257 = insertelement <128 x i8> %5256, i8 %5142, i32 102
  %5258 = insertelement <128 x i8> %5257, i8 %5103, i32 103
  %5259 = insertelement <128 x i8> %5258, i8 %5143, i32 104
  %5260 = insertelement <128 x i8> %5259, i8 %5102, i32 105
  %5261 = insertelement <128 x i8> %5260, i8 %5144, i32 106
  %5262 = insertelement <128 x i8> %5261, i8 %5101, i32 107
  %5263 = insertelement <128 x i8> %5262, i8 %5145, i32 108
  %5264 = insertelement <128 x i8> %5263, i8 %5100, i32 109
  %5265 = insertelement <128 x i8> %5264, i8 %5146, i32 110
  %5266 = insertelement <128 x i8> %5265, i8 %5099, i32 111
  %5267 = insertelement <128 x i8> %5266, i8 %5147, i32 112
  %5268 = insertelement <128 x i8> %5267, i8 %5098, i32 113
  %5269 = insertelement <128 x i8> %5268, i8 %5148, i32 114
  %5270 = insertelement <128 x i8> %5269, i8 %5097, i32 115
  %5271 = insertelement <128 x i8> %5270, i8 %5149, i32 116
  %5272 = insertelement <128 x i8> %5271, i8 %5096, i32 117
  %5273 = insertelement <128 x i8> %5272, i8 %5150, i32 118
  %5274 = insertelement <128 x i8> %5273, i8 %5095, i32 119
  %5275 = insertelement <128 x i8> %5274, i8 %5151, i32 120
  %5276 = insertelement <128 x i8> %5275, i8 %5094, i32 121
  %5277 = insertelement <128 x i8> %5276, i8 %5152, i32 122
  %5278 = insertelement <128 x i8> %5277, i8 %5093, i32 123
  %5279 = insertelement <128 x i8> %5278, i8 %5153, i32 124
  %5280 = insertelement <128 x i8> %5279, i8 %5092, i32 125
  %5281 = insertelement <128 x i8> %5280, i8 %5154, i32 126
  %5282 = add nsw i32 %t2453.us, %resampled_input.s0.x.rebased247.us
  %5283 = shl nsw i32 %5282, 7
  %5284 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5283
  %5285 = bitcast i8* %5284 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5281, <128 x i8>* %5285, i32 128, <128 x i1> %3919), !tbaa !129
  %5286 = add nuw nsw i32 %resampled_input.s0.x.rebased247.us, 1
  %.not710.us = icmp eq i32 %resampled_input.s0.x.rebased247.us, %t2448
  br i1 %.not710.us, label %"end for resampled_input.s0.x.rebased246.loopexit.us", label %"for resampled_input.s0.x.rebased245.us"

"end for resampled_input.s0.x.rebased246.loopexit.us": ; preds = %after_bb631.us
  %5287 = add nuw nsw i32 %resampled_input.s0.y.rebased244.us, 1
  %.not709.us = icmp eq i32 %resampled_input.s0.y.rebased244.us, %t2447
  br i1 %.not709.us, label %"consume resampled_input632", label %"for resampled_input.s0.y.rebased242.us"

"consume resampled_input632":                     ; preds = %"end for resampled_input.s0.x.rebased246.loopexit.us", %"end for resampled_input.s0.x.rebased240.loopexit.us", %"for resampled_input.s0.y.rebased242.preheader", %"for resampled_input.s0.y.rebased236.preheader", %next_bb235, %then_bb234
  br i1 %4308, label %"for output.s0.y.yo633.preheader", label %"end for output.s0.y.yo634", !prof !101

"for output.s0.y.yo633.preheader":                ; preds = %"consume resampled_input632"
  %5288 = add nsw i32 %output.s0.b.rebased228, %14
  %5289 = mul nsw i32 %5288, %25
  %5290 = load <32 x i32>, <32 x i32>* %4174, align 128
  %5291 = load <32 x i32>, <32 x i32>* %4177, align 128
  %5292 = load <32 x i32>, <32 x i32>* %4180, align 128
  %5293 = load <32 x i32>, <32 x i32>* %4183, align 128
  br label %"for output.s0.y.yo633"

"for output.s0.y.yo633":                          ; preds = %"for output.s0.y.yo633.preheader", %"end for output.s0.x.xo637"
  %output.s0.y.yo635 = phi i32 [ %5305, %"end for output.s0.x.xo637" ], [ 0, %"for output.s0.y.yo633.preheader" ]
  %5294 = add nsw i32 %output.s0.y.yo635, %22
  %5295 = mul nsw i32 %5294, %stride_y
  %5296 = add nsw i32 %4309, %5295
  %t2476 = mul nsw i32 %5296, %4236
  %5297 = add nsw i32 %4310, %5295
  %t2478 = mul nsw i32 %5297, %4236
  %5298 = sub nsw i32 %5295, %resampled_input.y.min_realized
  %t2480 = mul nsw i32 %5298, %4236
  br i1 %4311, label %"for output.s0.x.xo636.preheader", label %"end for output.s0.x.xo637", !prof !101

"for output.s0.x.xo636.preheader":                ; preds = %"for output.s0.y.yo633"
  %5299 = mul nsw i32 %5294, %24
  %5300 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_shift) #11
  %5301 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %output_multiplier) #11
  %5302 = call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %4350) #11
  %5303 = add i32 %5299, %5289
  br label %"for output.s0.x.xo636"

"end for output.s0.y.yo634":                      ; preds = %"end for output.s0.x.xo637", %"consume resampled_input632"
  %5304 = add nuw nsw i32 %output.s0.b.rebased228, 1
  %.not703 = icmp eq i32 %5304, %15
  br i1 %.not703, label %if.then.i.loopexit, label %"for output.s0.b.rebased226"

"for output.s0.x.xo636":                          ; preds = %"for output.s0.x.xo636.preheader", %"consume convolved649"
  %output.s0.x.xo638 = phi i32 [ %5727, %"consume convolved649" ], [ 0, %"for output.s0.x.xo636.preheader" ]
  br i1 %3529, label %then_bb641, label %next_bb642

"end for output.s0.x.xo637":                      ; preds = %"consume convolved649", %"for output.s0.y.yo633"
  %5305 = add nuw nsw i32 %output.s0.y.yo635, 1
  %.not704 = icmp eq i32 %5305, %23
  br i1 %.not704, label %"end for output.s0.y.yo634", label %"for output.s0.y.yo633"

then_bb641:                                       ; preds = %"for output.s0.x.xo636"
  %5306 = load <32 x i32>, <32 x i32>* %4314, align 128, !tbaa !105
  %5307 = add nsw i32 %output.s0.x.xo638, %19
  %5308 = mul nsw i32 %5307, %stride_x
  %5309 = add i32 %5308, %4315
  %5310 = add i32 %5309, %t2476
  %5311 = shl nsw i32 %5310, 7
  %5312 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5311
  %5313 = bitcast i8* %5312 to <64 x i8>*
  %5314 = load <64 x i8>, <64 x i8>* %5313, align 128, !tbaa !129
  %5315 = zext <64 x i8> %5314 to <64 x i16>
  %5316 = load <32 x i32>, <32 x i32>* %4317, align 128, !tbaa !105
  %5317 = add i32 %5308, %4318
  %5318 = add i32 %5317, %t2476
  %5319 = shl nsw i32 %5318, 7
  %5320 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5319
  %5321 = bitcast i8* %5320 to <64 x i8>*
  %5322 = load <64 x i8>, <64 x i8>* %5321, align 128, !tbaa !129
  %5323 = zext <64 x i8> %5322 to <64 x i16>
  %5324 = load <32 x i32>, <32 x i32>* %4319, align 128, !tbaa !105
  %5325 = add i32 %5308, %t2476
  %5326 = sub i32 %5325, %resampled_input.x.min_realized
  %5327 = shl nsw i32 %5326, 7
  %5328 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5327
  %5329 = bitcast i8* %5328 to <64 x i8>*
  %5330 = load <64 x i8>, <64 x i8>* %5329, align 128, !tbaa !129
  %5331 = zext <64 x i8> %5330 to <64 x i16>
  %5332 = load <32 x i32>, <32 x i32>* %4322, align 128, !tbaa !105
  %5333 = add i32 %5309, %t2478
  %5334 = shl nsw i32 %5333, 7
  %5335 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5334
  %5336 = bitcast i8* %5335 to <64 x i8>*
  %5337 = load <64 x i8>, <64 x i8>* %5336, align 128, !tbaa !129
  %5338 = zext <64 x i8> %5337 to <64 x i16>
  %5339 = load <32 x i32>, <32 x i32>* %4324, align 128, !tbaa !105
  %5340 = add i32 %5317, %t2478
  %5341 = shl nsw i32 %5340, 7
  %5342 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5341
  %5343 = bitcast i8* %5342 to <64 x i8>*
  %5344 = load <64 x i8>, <64 x i8>* %5343, align 128, !tbaa !129
  %5345 = zext <64 x i8> %5344 to <64 x i16>
  %5346 = load <32 x i32>, <32 x i32>* %4325, align 128, !tbaa !105
  %5347 = add i32 %5308, %t2478
  %5348 = sub i32 %5347, %resampled_input.x.min_realized
  %5349 = shl nsw i32 %5348, 7
  %5350 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5349
  %5351 = bitcast i8* %5350 to <64 x i8>*
  %5352 = load <64 x i8>, <64 x i8>* %5351, align 128, !tbaa !129
  %5353 = zext <64 x i8> %5352 to <64 x i16>
  %5354 = load <32 x i32>, <32 x i32>* %4327, align 128, !tbaa !180
  %5355 = add i32 %5309, %t2480
  %5356 = shl nsw i32 %5355, 7
  %5357 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5356
  %5358 = bitcast i8* %5357 to <64 x i8>*
  %5359 = load <64 x i8>, <64 x i8>* %5358, align 128, !tbaa !129
  %5360 = zext <64 x i8> %5359 to <64 x i16>
  %5361 = load <32 x i32>, <32 x i32>* %4329, align 128, !tbaa !186
  %5362 = add i32 %5317, %t2480
  %5363 = shl nsw i32 %5362, 7
  %5364 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5363
  %5365 = bitcast i8* %5364 to <64 x i8>*
  %5366 = load <64 x i8>, <64 x i8>* %5365, align 128, !tbaa !129
  %5367 = zext <64 x i8> %5366 to <64 x i16>
  %5368 = load <32 x i32>, <32 x i32>* %4330, align 128, !tbaa !190
  %5369 = add i32 %5308, %t2480
  %5370 = sub i32 %5369, %resampled_input.x.min_realized
  %5371 = shl nsw i32 %5370, 7
  %5372 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5371
  %5373 = bitcast i8* %5372 to <64 x i8>*
  %5374 = load <64 x i8>, <64 x i8>* %5373, align 128, !tbaa !129
  %5375 = zext <64 x i8> %5374 to <64 x i16>
  %5376 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5291, <32 x i32> %5290)
  %5377 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5324) #11
  %5378 = bitcast <64 x i16> %5331 to <32 x i32>
  %5379 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5378) #11
  %5380 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5377, <32 x i32> %5379) #11
  %5381 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5346) #11
  %5382 = bitcast <64 x i16> %5353 to <32 x i32>
  %5383 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5382) #11
  %5384 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5381, <32 x i32> %5383) #11
  %5385 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5368) #11
  %5386 = bitcast <64 x i16> %5375 to <32 x i32>
  %5387 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5386) #11
  %5388 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5385, <32 x i32> %5387) #11
  %5389 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5388, <64 x i32> %5376) #11
  %5390 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5354) #11
  %5391 = bitcast <64 x i16> %5360 to <32 x i32>
  %5392 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5391) #11
  %5393 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5389, <32 x i32> %5390, <32 x i32> %5392) #11
  %5394 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5361) #11
  %5395 = bitcast <64 x i16> %5367 to <32 x i32>
  %5396 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5395) #11
  %5397 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5394, <32 x i32> %5396) #11
  %5398 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5393, <64 x i32> %5397) #11
  %5399 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5384, <64 x i32> %5398) #11
  %5400 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5332) #11
  %5401 = bitcast <64 x i16> %5338 to <32 x i32>
  %5402 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5401) #11
  %5403 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5399, <32 x i32> %5400, <32 x i32> %5402) #11
  %5404 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5339) #11
  %5405 = bitcast <64 x i16> %5345 to <32 x i32>
  %5406 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5405) #11
  %5407 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5404, <32 x i32> %5406) #11
  %5408 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5403, <64 x i32> %5407) #11
  %5409 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5380, <64 x i32> %5408) #11
  %5410 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5306) #11
  %5411 = bitcast <64 x i16> %5315 to <32 x i32>
  %5412 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5411) #11
  %5413 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5409, <32 x i32> %5410, <32 x i32> %5412) #11
  %5414 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5316) #11
  %5415 = bitcast <64 x i16> %5323 to <32 x i32>
  %5416 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5415) #11
  %5417 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5414, <32 x i32> %5416) #11
  %5418 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5413, <64 x i32> %5417) #11
  %5419 = load <32 x i32>, <32 x i32>* %4332, align 128, !tbaa !105
  %5420 = getelementptr inbounds i8, i8* %5312, i32 64
  %5421 = bitcast i8* %5420 to <64 x i8>*
  %5422 = load <64 x i8>, <64 x i8>* %5421, align 64, !tbaa !129
  %5423 = zext <64 x i8> %5422 to <64 x i16>
  %5424 = load <32 x i32>, <32 x i32>* %4334, align 128, !tbaa !105
  %5425 = getelementptr inbounds i8, i8* %5320, i32 64
  %5426 = bitcast i8* %5425 to <64 x i8>*
  %5427 = load <64 x i8>, <64 x i8>* %5426, align 64, !tbaa !129
  %5428 = zext <64 x i8> %5427 to <64 x i16>
  %5429 = load <32 x i32>, <32 x i32>* %4336, align 128, !tbaa !105
  %5430 = getelementptr inbounds i8, i8* %5328, i32 64
  %5431 = bitcast i8* %5430 to <64 x i8>*
  %5432 = load <64 x i8>, <64 x i8>* %5431, align 64, !tbaa !129
  %5433 = zext <64 x i8> %5432 to <64 x i16>
  %5434 = load <32 x i32>, <32 x i32>* %4338, align 128, !tbaa !105
  %5435 = getelementptr inbounds i8, i8* %5335, i32 64
  %5436 = bitcast i8* %5435 to <64 x i8>*
  %5437 = load <64 x i8>, <64 x i8>* %5436, align 64, !tbaa !129
  %5438 = zext <64 x i8> %5437 to <64 x i16>
  %5439 = load <32 x i32>, <32 x i32>* %4340, align 128, !tbaa !105
  %5440 = getelementptr inbounds i8, i8* %5342, i32 64
  %5441 = bitcast i8* %5440 to <64 x i8>*
  %5442 = load <64 x i8>, <64 x i8>* %5441, align 64, !tbaa !129
  %5443 = zext <64 x i8> %5442 to <64 x i16>
  %5444 = load <32 x i32>, <32 x i32>* %4342, align 128, !tbaa !105
  %5445 = getelementptr inbounds i8, i8* %5350, i32 64
  %5446 = bitcast i8* %5445 to <64 x i8>*
  %5447 = load <64 x i8>, <64 x i8>* %5446, align 64, !tbaa !129
  %5448 = zext <64 x i8> %5447 to <64 x i16>
  %5449 = load <32 x i32>, <32 x i32>* %4344, align 128, !tbaa !193
  %5450 = getelementptr inbounds i8, i8* %5357, i32 64
  %5451 = bitcast i8* %5450 to <64 x i8>*
  %5452 = load <64 x i8>, <64 x i8>* %5451, align 64, !tbaa !129
  %5453 = zext <64 x i8> %5452 to <64 x i16>
  %5454 = load <32 x i32>, <32 x i32>* %4346, align 128, !tbaa !195
  %5455 = getelementptr inbounds i8, i8* %5364, i32 64
  %5456 = bitcast i8* %5455 to <64 x i8>*
  %5457 = load <64 x i8>, <64 x i8>* %5456, align 64, !tbaa !129
  %5458 = zext <64 x i8> %5457 to <64 x i16>
  %5459 = load <32 x i32>, <32 x i32>* %4348, align 128, !tbaa !197
  %5460 = getelementptr inbounds i8, i8* %5372, i32 64
  %5461 = bitcast i8* %5460 to <64 x i8>*
  %5462 = load <64 x i8>, <64 x i8>* %5461, align 64, !tbaa !129
  %5463 = zext <64 x i8> %5462 to <64 x i16>
  %5464 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5293, <32 x i32> %5292)
  %5465 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5429) #11
  %5466 = bitcast <64 x i16> %5433 to <32 x i32>
  %5467 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5466) #11
  %5468 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5465, <32 x i32> %5467) #11
  %5469 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5444) #11
  %5470 = bitcast <64 x i16> %5448 to <32 x i32>
  %5471 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5470) #11
  %5472 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5469, <32 x i32> %5471) #11
  %5473 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5459) #11
  %5474 = bitcast <64 x i16> %5463 to <32 x i32>
  %5475 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5474) #11
  %5476 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5473, <32 x i32> %5475) #11
  %5477 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5476, <64 x i32> %5464) #11
  %5478 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5449) #11
  %5479 = bitcast <64 x i16> %5453 to <32 x i32>
  %5480 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5479) #11
  %5481 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5477, <32 x i32> %5478, <32 x i32> %5480) #11
  %5482 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5454) #11
  %5483 = bitcast <64 x i16> %5458 to <32 x i32>
  %5484 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5483) #11
  %5485 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5482, <32 x i32> %5484) #11
  %5486 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5481, <64 x i32> %5485) #11
  %5487 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5472, <64 x i32> %5486) #11
  %5488 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5434) #11
  %5489 = bitcast <64 x i16> %5438 to <32 x i32>
  %5490 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5489) #11
  %5491 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5487, <32 x i32> %5488, <32 x i32> %5490) #11
  %5492 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5439) #11
  %5493 = bitcast <64 x i16> %5443 to <32 x i32>
  %5494 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5493) #11
  %5495 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5492, <32 x i32> %5494) #11
  %5496 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5491, <64 x i32> %5495) #11
  %5497 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5468, <64 x i32> %5496) #11
  %5498 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5419) #11
  %5499 = bitcast <64 x i16> %5423 to <32 x i32>
  %5500 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5499) #11
  %5501 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5497, <32 x i32> %5498, <32 x i32> %5500) #11
  %5502 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5424) #11
  %5503 = bitcast <64 x i16> %5428 to <32 x i32>
  %5504 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5503) #11
  %5505 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %5502, <32 x i32> %5504) #11
  %5506 = call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %5501, <64 x i32> %5505) #11
  %5507 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5418)
  %5508 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5418)
  %5509 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5506)
  %5510 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5506)
  br label %"consume convolved649"

next_bb642:                                       ; preds = %"for output.s0.x.xo636"
  %5511 = add nsw i32 %output.s0.x.xo638, %19
  br i1 %3531, label %"for convolved.s1.r19$y643.preheader", label %"consume convolved649", !prof !101

"for convolved.s1.r19$y643.preheader":            ; preds = %next_bb642
  %5512 = mul nsw i32 %5511, %stride_x
  %5513 = sub i32 %5512, %resampled_input.x.min_realized
  br i1 %3530, label %"for convolved.s1.r19$y643.us", label %"consume convolved649", !prof !101

"for convolved.s1.r19$y643.us":                   ; preds = %"for convolved.s1.r19$y643.preheader", %"end for convolved.s1.r19$x647.loopexit.us"
  %convolved700.sroa.36.4.us = phi <32 x i32> [ %.lcssa5192, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %5293, %"for convolved.s1.r19$y643.preheader" ]
  %convolved700.sroa.24.4.us = phi <32 x i32> [ %.lcssa5193, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %5292, %"for convolved.s1.r19$y643.preheader" ]
  %convolved700.sroa.12.4.us = phi <32 x i32> [ %.lcssa5194, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %5291, %"for convolved.s1.r19$y643.preheader" ]
  %convolved700.sroa.0.4.us = phi <32 x i32> [ %.lcssa5195, %"end for convolved.s1.r19$x647.loopexit.us" ], [ %5290, %"for convolved.s1.r19$y643.preheader" ]
  %"convolved.s1.r19$y645.us" = phi i32 [ %5688, %"end for convolved.s1.r19$x647.loopexit.us" ], [ 0, %"for convolved.s1.r19$y643.preheader" ]
  %5514 = mul nsw i32 %"convolved.s1.r19$y645.us", %a68
  %5515 = add nsw i32 %5514, %5298
  %5516 = mul nsw i32 %5515, %4236
  %t2483.us = add nsw i32 %5513, %5516
  %5517 = mul nsw i32 %"convolved.s1.r19$y645.us", %4
  br i1 %4362, label %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x646.us"

"for convolved.s1.r19$x646.us":                   ; preds = %"for convolved.s1.r19$y643.us", %"for convolved.s1.r19$x646.us"
  %convolved700.sroa.36.5.us = phi <32 x i32> [ %5652, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.36.4.us, %"for convolved.s1.r19$y643.us" ]
  %convolved700.sroa.24.5.us = phi <32 x i32> [ %5651, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.24.4.us, %"for convolved.s1.r19$y643.us" ]
  %convolved700.sroa.12.5.us = phi <32 x i32> [ %5650, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.12.4.us, %"for convolved.s1.r19$y643.us" ]
  %convolved700.sroa.0.5.us = phi <32 x i32> [ %5649, %"for convolved.s1.r19$x646.us" ], [ %convolved700.sroa.0.4.us, %"for convolved.s1.r19$y643.us" ]
  %"convolved.s1.r19$x648.us" = phi i32 [ %5653, %"for convolved.s1.r19$x646.us" ], [ 0, %"for convolved.s1.r19$y643.us" ]
  %niter5227 = phi i32 [ %niter5227.nsub.3, %"for convolved.s1.r19$x646.us" ], [ %unroll_iter5226, %"for convolved.s1.r19$y643.us" ]
  %5518 = add nsw i32 %"convolved.s1.r19$x648.us", %5517
  %5519 = shl nsw i32 %5518, 7
  %5520 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %5519
  %5521 = bitcast i16* %5520 to <32 x i32>*
  %5522 = load <32 x i32>, <32 x i32>* %5521, align 128, !tbaa !105
  %5523 = mul nsw i32 %"convolved.s1.r19$x648.us", %a73
  %5524 = add nsw i32 %t2483.us, %5523
  %5525 = shl nsw i32 %5524, 7
  %5526 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5525
  %5527 = bitcast i8* %5526 to <64 x i8>*
  %5528 = load <64 x i8>, <64 x i8>* %5527, align 128, !tbaa !129
  %5529 = zext <64 x i8> %5528 to <64 x i16>
  %5530 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.5.us, <32 x i32> %convolved700.sroa.0.5.us)
  %5531 = bitcast <64 x i16> %5529 to <32 x i32>
  %5532 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5531) #11
  %5533 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5522) #11
  %5534 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5530, <32 x i32> %5532, <32 x i32> %5533) #11
  %5535 = getelementptr inbounds i16, i16* %5520, i32 64
  %5536 = bitcast i16* %5535 to <32 x i32>*
  %5537 = load <32 x i32>, <32 x i32>* %5536, align 128, !tbaa !105
  %5538 = getelementptr inbounds i8, i8* %5526, i32 64
  %5539 = bitcast i8* %5538 to <64 x i8>*
  %5540 = load <64 x i8>, <64 x i8>* %5539, align 64, !tbaa !129
  %5541 = zext <64 x i8> %5540 to <64 x i16>
  %5542 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.5.us, <32 x i32> %convolved700.sroa.24.5.us)
  %5543 = bitcast <64 x i16> %5541 to <32 x i32>
  %5544 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5543) #11
  %5545 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5537) #11
  %5546 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5542, <32 x i32> %5544, <32 x i32> %5545) #11
  %5547 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5534)
  %5548 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5534)
  %5549 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5546)
  %5550 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5546)
  %5551 = or i32 %"convolved.s1.r19$x648.us", 1
  %5552 = add nsw i32 %5551, %5517
  %5553 = shl nsw i32 %5552, 7
  %5554 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %5553
  %5555 = bitcast i16* %5554 to <32 x i32>*
  %5556 = load <32 x i32>, <32 x i32>* %5555, align 128, !tbaa !105
  %5557 = mul nsw i32 %5551, %a73
  %5558 = add nsw i32 %t2483.us, %5557
  %5559 = shl nsw i32 %5558, 7
  %5560 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5559
  %5561 = bitcast i8* %5560 to <64 x i8>*
  %5562 = load <64 x i8>, <64 x i8>* %5561, align 128, !tbaa !129
  %5563 = zext <64 x i8> %5562 to <64 x i16>
  %5564 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5548, <32 x i32> %5547)
  %5565 = bitcast <64 x i16> %5563 to <32 x i32>
  %5566 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5565) #11
  %5567 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5556) #11
  %5568 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5564, <32 x i32> %5566, <32 x i32> %5567) #11
  %5569 = getelementptr inbounds i16, i16* %5554, i32 64
  %5570 = bitcast i16* %5569 to <32 x i32>*
  %5571 = load <32 x i32>, <32 x i32>* %5570, align 128, !tbaa !105
  %5572 = getelementptr inbounds i8, i8* %5560, i32 64
  %5573 = bitcast i8* %5572 to <64 x i8>*
  %5574 = load <64 x i8>, <64 x i8>* %5573, align 64, !tbaa !129
  %5575 = zext <64 x i8> %5574 to <64 x i16>
  %5576 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5550, <32 x i32> %5549)
  %5577 = bitcast <64 x i16> %5575 to <32 x i32>
  %5578 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5577) #11
  %5579 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5571) #11
  %5580 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5576, <32 x i32> %5578, <32 x i32> %5579) #11
  %5581 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5568)
  %5582 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5568)
  %5583 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5580)
  %5584 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5580)
  %5585 = or i32 %"convolved.s1.r19$x648.us", 2
  %5586 = add nsw i32 %5585, %5517
  %5587 = shl nsw i32 %5586, 7
  %5588 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %5587
  %5589 = bitcast i16* %5588 to <32 x i32>*
  %5590 = load <32 x i32>, <32 x i32>* %5589, align 128, !tbaa !105
  %5591 = mul nsw i32 %5585, %a73
  %5592 = add nsw i32 %t2483.us, %5591
  %5593 = shl nsw i32 %5592, 7
  %5594 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5593
  %5595 = bitcast i8* %5594 to <64 x i8>*
  %5596 = load <64 x i8>, <64 x i8>* %5595, align 128, !tbaa !129
  %5597 = zext <64 x i8> %5596 to <64 x i16>
  %5598 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5582, <32 x i32> %5581)
  %5599 = bitcast <64 x i16> %5597 to <32 x i32>
  %5600 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5599) #11
  %5601 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5590) #11
  %5602 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5598, <32 x i32> %5600, <32 x i32> %5601) #11
  %5603 = getelementptr inbounds i16, i16* %5588, i32 64
  %5604 = bitcast i16* %5603 to <32 x i32>*
  %5605 = load <32 x i32>, <32 x i32>* %5604, align 128, !tbaa !105
  %5606 = getelementptr inbounds i8, i8* %5594, i32 64
  %5607 = bitcast i8* %5606 to <64 x i8>*
  %5608 = load <64 x i8>, <64 x i8>* %5607, align 64, !tbaa !129
  %5609 = zext <64 x i8> %5608 to <64 x i16>
  %5610 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5584, <32 x i32> %5583)
  %5611 = bitcast <64 x i16> %5609 to <32 x i32>
  %5612 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5611) #11
  %5613 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5605) #11
  %5614 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5610, <32 x i32> %5612, <32 x i32> %5613) #11
  %5615 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5602)
  %5616 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5602)
  %5617 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5614)
  %5618 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5614)
  %5619 = or i32 %"convolved.s1.r19$x648.us", 3
  %5620 = add nsw i32 %5619, %5517
  %5621 = shl nsw i32 %5620, 7
  %5622 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %5621
  %5623 = bitcast i16* %5622 to <32 x i32>*
  %5624 = load <32 x i32>, <32 x i32>* %5623, align 128, !tbaa !105
  %5625 = mul nsw i32 %5619, %a73
  %5626 = add nsw i32 %t2483.us, %5625
  %5627 = shl nsw i32 %5626, 7
  %5628 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5627
  %5629 = bitcast i8* %5628 to <64 x i8>*
  %5630 = load <64 x i8>, <64 x i8>* %5629, align 128, !tbaa !129
  %5631 = zext <64 x i8> %5630 to <64 x i16>
  %5632 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5616, <32 x i32> %5615)
  %5633 = bitcast <64 x i16> %5631 to <32 x i32>
  %5634 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5633) #11
  %5635 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5624) #11
  %5636 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5632, <32 x i32> %5634, <32 x i32> %5635) #11
  %5637 = getelementptr inbounds i16, i16* %5622, i32 64
  %5638 = bitcast i16* %5637 to <32 x i32>*
  %5639 = load <32 x i32>, <32 x i32>* %5638, align 128, !tbaa !105
  %5640 = getelementptr inbounds i8, i8* %5628, i32 64
  %5641 = bitcast i8* %5640 to <64 x i8>*
  %5642 = load <64 x i8>, <64 x i8>* %5641, align 64, !tbaa !129
  %5643 = zext <64 x i8> %5642 to <64 x i16>
  %5644 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5618, <32 x i32> %5617)
  %5645 = bitcast <64 x i16> %5643 to <32 x i32>
  %5646 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5645) #11
  %5647 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5639) #11
  %5648 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5644, <32 x i32> %5646, <32 x i32> %5647) #11
  %5649 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5636)
  %5650 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5636)
  %5651 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5648)
  %5652 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5648)
  %5653 = add nuw nsw i32 %"convolved.s1.r19$x648.us", 4
  %niter5227.nsub.3 = add i32 %niter5227, -4
  %niter5227.ncmp.3 = icmp eq i32 %niter5227.nsub.3, 0
  br i1 %niter5227.ncmp.3, label %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x646.us"

"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x646.us", %"for convolved.s1.r19$y643.us"
  %.lcssa5195.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y643.us" ], [ %5649, %"for convolved.s1.r19$x646.us" ]
  %.lcssa5194.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y643.us" ], [ %5650, %"for convolved.s1.r19$x646.us" ]
  %.lcssa5193.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y643.us" ], [ %5651, %"for convolved.s1.r19$x646.us" ]
  %.lcssa5192.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y643.us" ], [ %5652, %"for convolved.s1.r19$x646.us" ]
  %convolved700.sroa.36.5.us.unr = phi <32 x i32> [ %convolved700.sroa.36.4.us, %"for convolved.s1.r19$y643.us" ], [ %5652, %"for convolved.s1.r19$x646.us" ]
  %convolved700.sroa.24.5.us.unr = phi <32 x i32> [ %convolved700.sroa.24.4.us, %"for convolved.s1.r19$y643.us" ], [ %5651, %"for convolved.s1.r19$x646.us" ]
  %convolved700.sroa.12.5.us.unr = phi <32 x i32> [ %convolved700.sroa.12.4.us, %"for convolved.s1.r19$y643.us" ], [ %5650, %"for convolved.s1.r19$x646.us" ]
  %convolved700.sroa.0.5.us.unr = phi <32 x i32> [ %convolved700.sroa.0.4.us, %"for convolved.s1.r19$y643.us" ], [ %5649, %"for convolved.s1.r19$x646.us" ]
  %"convolved.s1.r19$x648.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y643.us" ], [ %5653, %"for convolved.s1.r19$x646.us" ]
  br i1 %lcmp.mod5221.not, label %"end for convolved.s1.r19$x647.loopexit.us", label %"for convolved.s1.r19$x646.us.epil"

"for convolved.s1.r19$x646.us.epil":              ; preds = %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x646.us.epil"
  %convolved700.sroa.36.5.us.epil = phi <32 x i32> [ %5686, %"for convolved.s1.r19$x646.us.epil" ], [ %convolved700.sroa.36.5.us.unr, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ]
  %convolved700.sroa.24.5.us.epil = phi <32 x i32> [ %5685, %"for convolved.s1.r19$x646.us.epil" ], [ %convolved700.sroa.24.5.us.unr, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ]
  %convolved700.sroa.12.5.us.epil = phi <32 x i32> [ %5684, %"for convolved.s1.r19$x646.us.epil" ], [ %convolved700.sroa.12.5.us.unr, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ]
  %convolved700.sroa.0.5.us.epil = phi <32 x i32> [ %5683, %"for convolved.s1.r19$x646.us.epil" ], [ %convolved700.sroa.0.5.us.unr, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ]
  %"convolved.s1.r19$x648.us.epil" = phi i32 [ %5687, %"for convolved.s1.r19$x646.us.epil" ], [ %"convolved.s1.r19$x648.us.unr", %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ]
  %epil.iter5220 = phi i32 [ %epil.iter5220.sub, %"for convolved.s1.r19$x646.us.epil" ], [ %xtraiter5219, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ]
  %5654 = add nsw i32 %"convolved.s1.r19$x648.us.epil", %5517
  %5655 = shl nsw i32 %5654, 7
  %5656 = getelementptr inbounds i16, i16* %filter_zeroed155, i32 %5655
  %5657 = bitcast i16* %5656 to <32 x i32>*
  %5658 = load <32 x i32>, <32 x i32>* %5657, align 128, !tbaa !105
  %5659 = mul nsw i32 %"convolved.s1.r19$x648.us.epil", %a73
  %5660 = add nsw i32 %t2483.us, %5659
  %5661 = shl nsw i32 %5660, 7
  %5662 = getelementptr inbounds i8, i8* %resampled_input231, i32 %5661
  %5663 = bitcast i8* %5662 to <64 x i8>*
  %5664 = load <64 x i8>, <64 x i8>* %5663, align 128, !tbaa !129
  %5665 = zext <64 x i8> %5664 to <64 x i16>
  %5666 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.12.5.us.epil, <32 x i32> %convolved700.sroa.0.5.us.epil)
  %5667 = bitcast <64 x i16> %5665 to <32 x i32>
  %5668 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5667) #11
  %5669 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5658) #11
  %5670 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5666, <32 x i32> %5668, <32 x i32> %5669) #11
  %5671 = getelementptr inbounds i16, i16* %5656, i32 64
  %5672 = bitcast i16* %5671 to <32 x i32>*
  %5673 = load <32 x i32>, <32 x i32>* %5672, align 128, !tbaa !105
  %5674 = getelementptr inbounds i8, i8* %5662, i32 64
  %5675 = bitcast i8* %5674 to <64 x i8>*
  %5676 = load <64 x i8>, <64 x i8>* %5675, align 64, !tbaa !129
  %5677 = zext <64 x i8> %5676 to <64 x i16>
  %5678 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved700.sroa.36.5.us.epil, <32 x i32> %convolved700.sroa.24.5.us.epil)
  %5679 = bitcast <64 x i16> %5677 to <32 x i32>
  %5680 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5679) #11
  %5681 = call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5673) #11
  %5682 = call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %5678, <32 x i32> %5680, <32 x i32> %5681) #11
  %5683 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5670)
  %5684 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5670)
  %5685 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5682)
  %5686 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5682)
  %5687 = add nuw nsw i32 %"convolved.s1.r19$x648.us.epil", 1
  %epil.iter5220.sub = add i32 %epil.iter5220, -1
  %epil.iter5220.cmp.not = icmp eq i32 %epil.iter5220.sub, 0
  br i1 %epil.iter5220.cmp.not, label %"end for convolved.s1.r19$x647.loopexit.us", label %"for convolved.s1.r19$x646.us.epil", !llvm.loop !224

"end for convolved.s1.r19$x647.loopexit.us":      ; preds = %"for convolved.s1.r19$x646.us.epil", %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa"
  %.lcssa5195 = phi <32 x i32> [ %.lcssa5195.ph, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ], [ %5683, %"for convolved.s1.r19$x646.us.epil" ]
  %.lcssa5194 = phi <32 x i32> [ %.lcssa5194.ph, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ], [ %5684, %"for convolved.s1.r19$x646.us.epil" ]
  %.lcssa5193 = phi <32 x i32> [ %.lcssa5193.ph, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ], [ %5685, %"for convolved.s1.r19$x646.us.epil" ]
  %.lcssa5192 = phi <32 x i32> [ %.lcssa5192.ph, %"end for convolved.s1.r19$x647.loopexit.us.unr-lcssa" ], [ %5686, %"for convolved.s1.r19$x646.us.epil" ]
  %5688 = add nuw nsw i32 %"convolved.s1.r19$y645.us", 1
  %.not707.us = icmp eq i32 %5688, %6
  br i1 %.not707.us, label %"consume convolved649", label %"for convolved.s1.r19$y643.us"

"consume convolved649":                           ; preds = %"end for convolved.s1.r19$x647.loopexit.us", %next_bb642, %"for convolved.s1.r19$y643.preheader", %then_bb641
  %.pre-phi5052 = phi i32 [ %5307, %then_bb641 ], [ %5511, %"for convolved.s1.r19$y643.preheader" ], [ %5511, %next_bb642 ], [ %5511, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.36.7 = phi <32 x i32> [ %5510, %then_bb641 ], [ %5293, %"for convolved.s1.r19$y643.preheader" ], [ %5293, %next_bb642 ], [ %.lcssa5192, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.24.7 = phi <32 x i32> [ %5509, %then_bb641 ], [ %5292, %"for convolved.s1.r19$y643.preheader" ], [ %5292, %next_bb642 ], [ %.lcssa5193, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.12.7 = phi <32 x i32> [ %5508, %then_bb641 ], [ %5291, %"for convolved.s1.r19$y643.preheader" ], [ %5291, %next_bb642 ], [ %.lcssa5194, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %convolved700.sroa.0.7 = phi <32 x i32> [ %5507, %then_bb641 ], [ %5290, %"for convolved.s1.r19$y643.preheader" ], [ %5290, %next_bb642 ], [ %.lcssa5195, %"end for convolved.s1.r19$x647.loopexit.us" ]
  %5689 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved700.sroa.12.7, <32 x i32> %5301) #11
  %5690 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %5689, <32 x i32> %convolved700.sroa.12.7, <32 x i32> %5301) #11
  %5691 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5690, <32 x i32> %5300) #11
  %5692 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5690, <32 x i32> %5302) #11
  %5693 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %5692, <32 x i32> %4349) #11
  %5694 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %5691, <32 x i32> %5693) #11
  %5695 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved700.sroa.0.7, <32 x i32> %5301) #11
  %5696 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %5695, <32 x i32> %convolved700.sroa.0.7, <32 x i32> %5301) #11
  %5697 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5696, <32 x i32> %5300) #11
  %5698 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5696, <32 x i32> %5302) #11
  %5699 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %5698, <32 x i32> %4349) #11
  %5700 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %5697, <32 x i32> %5699) #11
  %5701 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %5694, <32 x i32> %5700) #11
  %5702 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved700.sroa.36.7, <32 x i32> %5301) #11
  %5703 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %5702, <32 x i32> %convolved700.sroa.36.7, <32 x i32> %5301) #11
  %5704 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5703, <32 x i32> %5300) #11
  %5705 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5703, <32 x i32> %5302) #11
  %5706 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %5705, <32 x i32> %4349) #11
  %5707 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %5704, <32 x i32> %5706) #11
  %5708 = call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %convolved700.sroa.24.7, <32 x i32> %5301) #11
  %5709 = call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %5708, <32 x i32> %convolved700.sroa.24.7, <32 x i32> %5301) #11
  %5710 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5709, <32 x i32> %5300) #11
  %5711 = call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5709, <32 x i32> %5302) #11
  %5712 = call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %5711, <32 x i32> %4349) #11
  %5713 = call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %5710, <32 x i32> %5712) #11
  %5714 = call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %5707, <32 x i32> %5713) #11
  %5715 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5701, <32 x i32> %5714) #11
  %5716 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %5715, <64 x i32> %4358) #11
  %5717 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5716) #11
  %5718 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5716) #11
  %5719 = call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %5717, <32 x i32> %5718) #11
  %5720 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %4359, <32 x i32> %5719) #11
  %5721 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %5720, <32 x i32> %4360) #11
  %5722 = bitcast <32 x i32> %5721 to <128 x i8>
  %5723 = mul nsw i32 %.pre-phi5052, %21
  %t2473 = add i32 %5303, %5723
  %5724 = sub i32 %t2473, %reass.add4764
  %5725 = getelementptr inbounds i8, i8* %17, i32 %5724
  %5726 = bitcast i8* %5725 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5722, <128 x i8>* %5726, i32 1, <128 x i1> %3919), !tbaa !199
  %5727 = add nuw nsw i32 %output.s0.x.xo638, 1
  %.not706 = icmp eq i32 %5727, %20
  br i1 %.not706, label %"end for output.s0.x.xo637", label %"for output.s0.x.xo636"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i32 12
  %44 = load i8*, i8** %43, align 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i32 13
  %47 = load i8*, i8** %46, align 4
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i32 14
  %50 = load i8*, i8** %49, align 4
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i32 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 4
  %55 = tail call i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #17
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i16.p0v64i16(<64 x i16>, <64 x i16>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i32.p0v32i32(<32 x i32>, <32 x i32>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8 @llvm.vector.reduce.umax.v128i8(<128 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v128i8.p0v128i8(<128 x i8>, <128 x i8>*, i32 immarg, <128 x i1>) #5

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.0(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.1(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.2(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.3(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.4(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %1, <32 x i32> %5)
  %8 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %8)
  ret <64 x i32> %9
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.5(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %1, <32 x i32> %5)
  %8 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %8)
  ret <64 x i32> %9
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.6(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.7(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.8(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.9(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.10(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.11(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.12(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.13(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.14(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.15(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.16(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.17(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.18(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.19(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.20(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.21(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.22(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.7, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.6)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %12, <32 x i32> %arg, <32 x i32> %3)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %1)
  %15 = extractelement <1 x i32> %arg.4, i32 0
  %16 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %17, <32 x i32> %arg.3)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %14, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %21, <32 x i32> %arg.11, <32 x i32> %3)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %1)
  %24 = extractelement <1 x i32> %arg.13, i32 0
  %25 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %24)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %26, <32 x i32> %arg.12)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %23, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %29, <32 x i32> %arg.8, <32 x i32> %3)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %1)
  %32 = extractelement <1 x i32> %arg.10, i32 0
  %33 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %34, <32 x i32> %arg.9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %31, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %44, <32 x i32> %43)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.23(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.7, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.6)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %12, <32 x i32> %arg, <32 x i32> %3)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %1)
  %15 = extractelement <1 x i32> %arg.4, i32 0
  %16 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %17, <32 x i32> %arg.3)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %14, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %21, <32 x i32> %arg.11, <32 x i32> %3)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %1)
  %24 = extractelement <1 x i32> %arg.13, i32 0
  %25 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %24)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %26, <32 x i32> %arg.12)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %23, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %29, <32 x i32> %arg.8, <32 x i32> %3)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %1)
  %32 = extractelement <1 x i32> %arg.10, i32 0
  %33 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %34, <32 x i32> %arg.9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %31, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %44, <32 x i32> %43)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.24(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.7, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.6)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %12, <32 x i32> %arg, <32 x i32> %3)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %1)
  %15 = extractelement <1 x i32> %arg.4, i32 0
  %16 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %17, <32 x i32> %arg.3)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %14, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %21, <32 x i32> %arg.11, <32 x i32> %3)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %1)
  %24 = extractelement <1 x i32> %arg.13, i32 0
  %25 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %24)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %26, <32 x i32> %arg.12)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %23, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %29, <32 x i32> %arg.8, <32 x i32> %3)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %1)
  %32 = extractelement <1 x i32> %arg.10, i32 0
  %33 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %34, <32 x i32> %arg.9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %31, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %44, <32 x i32> %43)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.25(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.7, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.6)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %12, <32 x i32> %arg, <32 x i32> %3)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %1)
  %15 = extractelement <1 x i32> %arg.4, i32 0
  %16 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %17, <32 x i32> %arg.3)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %14, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %21, <32 x i32> %arg.11, <32 x i32> %3)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %1)
  %24 = extractelement <1 x i32> %arg.13, i32 0
  %25 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %24)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %26, <32 x i32> %arg.12)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %23, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %29, <32 x i32> %arg.8, <32 x i32> %3)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %1)
  %32 = extractelement <1 x i32> %arg.10, i32 0
  %33 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %34, <32 x i32> %arg.9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %31, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %44, <32 x i32> %43)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.26(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.27(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.28(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.29(<64 x i32> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <64 x i32> @llvm.hexagon.V6.vunpackh.128B(<32 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1, <64 x i32> %arg)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.30(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %1, <32 x i32> %5)
  %8 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %8)
  ret <64 x i32> %9
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.31(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %1, <32 x i32> %5)
  %8 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %8)
  ret <64 x i32> %9
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.32(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.33(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.34(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.35(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.36(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.7, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.6)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %12, <32 x i32> %arg, <32 x i32> %3)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %1)
  %15 = extractelement <1 x i32> %arg.4, i32 0
  %16 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %17, <32 x i32> %arg.3)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %14, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %21, <32 x i32> %arg.11, <32 x i32> %3)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %1)
  %24 = extractelement <1 x i32> %arg.13, i32 0
  %25 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %24)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %26, <32 x i32> %arg.12)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %23, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %29, <32 x i32> %arg.8, <32 x i32> %3)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %1)
  %32 = extractelement <1 x i32> %arg.10, i32 0
  %33 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %34, <32 x i32> %arg.9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %31, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %44, <32 x i32> %43)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.37(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.38(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i16> @hydride.node.depthwise_conv_hvx_depth3.39(<64 x i16> %arg, <64 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg to <32 x i32>
  %1 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %2 = tail call <32 x i32> @llvm.hexagon.V6.vsubh.128B(<32 x i32> %0, <32 x i32> %1)
  %3 = bitcast <32 x i32> %2 to <64 x i16>
  ret <64 x i16> %3
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.40(<64 x i32> %arg, <128 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.1 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %arg, <32 x i32> zeroinitializer, <32 x i32> %1)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.41(<64 x i32> %arg, <128 x i16> %arg.1) local_unnamed_addr #14 {
entry:
  %0 = bitcast <128 x i16> %arg.1 to <64 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %0)
  %2 = tail call <64 x i32> @llvm.hexagon.V6.vaddhw.acc.128B(<64 x i32> %arg, <32 x i32> %1, <32 x i32> zeroinitializer)
  ret <64 x i32> %2
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.42(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %1, <32 x i32> %5)
  %8 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %8)
  ret <64 x i32> %9
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.43(<64 x i32> %arg, <64 x i32> %arg.1, <1 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %arg.1)
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %3, <32 x i32> %1, <32 x i32> %2)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %arg.1)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1, <32 x i32> %5)
  %7 = tail call <32 x i32> @llvm.hexagon.V6.vmpyiewh.acc.128B(<32 x i32> %6, <32 x i32> %1, <32 x i32> %5)
  %8 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4, <32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vsubw.dv.128B(<64 x i32> %arg, <64 x i32> %8)
  ret <64 x i32> %9
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.44(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.45(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i16> %arg.2, <64 x i16> %arg.3, <64 x i16> %arg.4, <64 x i16> %arg.5, <64 x i16> %arg.6, <64 x i16> %arg.7, <64 x i16> %arg.8, <64 x i16> %arg.9, <64 x i16> %arg.10, <64 x i16> %arg.11, <64 x i16> %arg.12, <64 x i16> %arg.13, <64 x i16> %arg.14, <64 x i16> %arg.15, <64 x i16> %arg.16, <64 x i16> %arg.17, <64 x i32> %arg.18) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.4 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg.5 to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %1, <32 x i32> %3)
  %5 = bitcast <64 x i16> %arg.10 to <32 x i32>
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %5)
  %7 = bitcast <64 x i16> %arg.11 to <32 x i32>
  %8 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %7)
  %9 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %6, <32 x i32> %8)
  %10 = bitcast <64 x i16> %arg.16 to <32 x i32>
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %10)
  %12 = bitcast <64 x i16> %arg.17 to <32 x i32>
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %12)
  %14 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %11, <32 x i32> %13)
  %15 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %14, <64 x i32> %arg.18)
  %16 = bitcast <64 x i16> %arg.12 to <32 x i32>
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %16)
  %18 = bitcast <64 x i16> %arg.13 to <32 x i32>
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %18)
  %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %15, <32 x i32> %17, <32 x i32> %19)
  %21 = bitcast <64 x i16> %arg.14 to <32 x i32>
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %21)
  %23 = bitcast <64 x i16> %arg.15 to <32 x i32>
  %24 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %23)
  %25 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %22, <32 x i32> %24)
  %26 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %20, <64 x i32> %25)
  %27 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %9, <64 x i32> %26)
  %28 = bitcast <64 x i16> %arg.6 to <32 x i32>
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %28)
  %30 = bitcast <64 x i16> %arg.7 to <32 x i32>
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %30)
  %32 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %27, <32 x i32> %29, <32 x i32> %31)
  %33 = bitcast <64 x i16> %arg.8 to <32 x i32>
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %33)
  %35 = bitcast <64 x i16> %arg.9 to <32 x i32>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %35)
  %37 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %34, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %32, <64 x i32> %37)
  %39 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %4, <64 x i32> %38)
  %40 = bitcast <64 x i16> %arg to <32 x i32>
  %41 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %40)
  %42 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %42)
  %44 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %39, <32 x i32> %41, <32 x i32> %43)
  %45 = bitcast <64 x i16> %arg.2 to <32 x i32>
  %46 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %45)
  %47 = bitcast <64 x i16> %arg.3 to <32 x i32>
  %48 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %47)
  %49 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> zeroinitializer, <32 x i32> %46, <32 x i32> %48)
  %50 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %44, <64 x i32> %49)
  ret <64 x i32> %50
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.46(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <64 x i32> @hydride.node.depthwise_conv_hvx_depth3.47(<64 x i16> %arg, <64 x i16> %arg.1, <64 x i32> %arg.2) local_unnamed_addr #14 {
entry:
  %0 = bitcast <64 x i16> %arg.1 to <32 x i32>
  %1 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %0)
  %2 = bitcast <64 x i16> %arg to <32 x i32>
  %3 = tail call <32 x i32> @llvm.hexagon.V6.vshuffh.128B(<32 x i32> %2)
  %4 = tail call <64 x i32> @llvm.hexagon.V6.vmpyhv.acc.128B(<64 x i32> %arg.2, <32 x i32> %1, <32 x i32> %3)
  ret <64 x i32> %4
}

; Function Attrs: nounwind readnone willreturn
define <128 x i8> @hydride.node.depthwise_conv_hvx_depth3.48(<32 x i32> %arg, <1 x i32> %arg.1, <1 x i32> %arg.2, <32 x i32> %arg.3, <1 x i32> %arg.4, <32 x i32> %arg.5, <32 x i32> %arg.6, <1 x i32> %arg.7, <32 x i32> %arg.8, <32 x i32> %arg.9, <1 x i32> %arg.10, <32 x i32> %arg.11, <32 x i32> %arg.12, <1 x i32> %arg.13, <128 x i16> %arg.14, <128 x i8> %arg.15, <128 x i8> %arg.16) local_unnamed_addr #14 {
entry:
  %0 = extractelement <1 x i32> %arg.2, i32 0
  %1 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %0)
  %2 = extractelement <1 x i32> %arg.1, i32 0
  %3 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2)
  %4 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.5, <32 x i32> %3)
  %5 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %4, <32 x i32> %arg.5, <32 x i32> %3)
  %6 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %1)
  %7 = extractelement <1 x i32> %arg.7, i32 0
  %8 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %7)
  %9 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %5, <32 x i32> %8)
  %10 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %9, <32 x i32> %arg.6)
  %11 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %6, <32 x i32> %10)
  %12 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg, <32 x i32> %3)
  %13 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %12, <32 x i32> %arg, <32 x i32> %3)
  %14 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %1)
  %15 = extractelement <1 x i32> %arg.4, i32 0
  %16 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %15)
  %17 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %13, <32 x i32> %16)
  %18 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %17, <32 x i32> %arg.3)
  %19 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %14, <32 x i32> %18)
  %20 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %11, <32 x i32> %19)
  %21 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.11, <32 x i32> %3)
  %22 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %21, <32 x i32> %arg.11, <32 x i32> %3)
  %23 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %1)
  %24 = extractelement <1 x i32> %arg.13, i32 0
  %25 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %24)
  %26 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %22, <32 x i32> %25)
  %27 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %26, <32 x i32> %arg.12)
  %28 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %23, <32 x i32> %27)
  %29 = tail call <32 x i32> @llvm.hexagon.V6.vmpyewuh.128B(<32 x i32> %arg.8, <32 x i32> %3)
  %30 = tail call <32 x i32> @llvm.hexagon.V6.vmpyowh.sacc.128B(<32 x i32> %29, <32 x i32> %arg.8, <32 x i32> %3)
  %31 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %1)
  %32 = extractelement <1 x i32> %arg.10, i32 0
  %33 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %32)
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vasrwv.128B(<32 x i32> %30, <32 x i32> %33)
  %35 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %34, <32 x i32> %arg.9)
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.128B(<32 x i32> %31, <32 x i32> %35)
  %37 = tail call <32 x i32> @llvm.hexagon.V6.vsatwh.128B(<32 x i32> %28, <32 x i32> %36)
  %38 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %20, <32 x i32> %37)
  %39 = bitcast <128 x i16> %arg.14 to <64 x i32>
  %40 = tail call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %38, <64 x i32> %39)
  %41 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %40)
  %42 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %40)
  %43 = tail call <32 x i32> @llvm.hexagon.V6.vpackhub.sat.128B(<32 x i32> %41, <32 x i32> %42)
  %44 = bitcast <128 x i8> %arg.15 to <32 x i32>
  %45 = tail call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %44, <32 x i32> %43)
  %46 = bitcast <128 x i8> %arg.16 to <32 x i32>
  %47 = tail call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %45, <32 x i32> %46)
  %48 = bitcast <32 x i32> %47 to <128 x i8>
  ret <128 x i8> %48
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nounwind readnone willreturn }
attributes #15 = { nobuiltin nounwind "no-builtins" }
attributes #16 = { nobuiltin "no-builtins" }
attributes #17 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!96, !15, i64 4}
!96 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !15, i64 4, !15, i64 8}
!97 = !{!96, !11, i64 0}
!98 = !{!96, !15, i64 8}
!99 = !{!"branch_weights", i32 1, i32 2000}
!100 = !{!"branch_weights", i32 0, i32 1073741824}
!101 = !{!"branch_weights", i32 1073741824, i32 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"filter", !104, i64 0}
!104 = !{!"Halide buffer"}
!105 = !{!106, !106, i64 0}
!106 = !{!"filter_zeroed", !104, i64 0}
!107 = distinct !{!107, !32}
!108 = distinct !{!108, !32}
!109 = !{!110, !110, i64 0}
!110 = !{!"bias", !104, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"offset_c.width32.base0", !113, i64 0}
!113 = !{!"offset_c.width64.base0", !114, i64 0}
!114 = !{!"offset_c.width128.base0", !115, i64 0}
!115 = !{!"offset_c.width256.base0", !116, i64 0}
!116 = !{!"offset_c.width512.base0", !117, i64 0}
!117 = !{!"offset_c.width1024.base0", !118, i64 0}
!118 = !{!"offset_c", !104, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"offset_c.width32.base32", !113, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"offset_c.width32.base64", !123, i64 0}
!123 = !{!"offset_c.width64.base64", !114, i64 0}
!124 = !{!125, !125, i64 0}
!125 = !{!"offset_c.width32.base96", !123, i64 0}
!126 = !{!"branch_weights", i32 0, i32 -2147483648}
!127 = !{!128, !128, i64 0}
!128 = !{!"input", !104, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"resampled_input", !104, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"convolved.width32.base0", !133, i64 0}
!133 = !{!"convolved.width64.base0", !134, i64 0}
!134 = !{!"convolved.width128.base0", !135, i64 0}
!135 = !{!"convolved.width256.base0", !136, i64 0}
!136 = !{!"convolved.width512.base0", !137, i64 0}
!137 = !{!"convolved.width1024.base0", !138, i64 0}
!138 = !{!"convolved", !104, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"convolved.width32.base32", !133, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"convolved.width32.base64", !143, i64 0}
!143 = !{!"convolved.width64.base64", !134, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"convolved.width32.base96", !143, i64 0}
!146 = !{!147, !147, i64 0}
!147 = !{!"convolved.width32.base128", !148, i64 0}
!148 = !{!"convolved.width64.base128", !149, i64 0}
!149 = !{!"convolved.width128.base128", !135, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"convolved.width32.base160", !148, i64 0}
!152 = !{!153, !153, i64 0}
!153 = !{!"convolved.width32.base192", !154, i64 0}
!154 = !{!"convolved.width64.base192", !149, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"convolved.width32.base224", !154, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"convolved.width32.base256", !159, i64 0}
!159 = !{!"convolved.width64.base256", !160, i64 0}
!160 = !{!"convolved.width128.base256", !161, i64 0}
!161 = !{!"convolved.width256.base256", !136, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"convolved.width32.base288", !159, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"convolved.width32.base320", !166, i64 0}
!166 = !{!"convolved.width64.base320", !160, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"convolved.width32.base352", !166, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"convolved.width32.base384", !171, i64 0}
!171 = !{!"convolved.width64.base384", !172, i64 0}
!172 = !{!"convolved.width128.base384", !161, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"convolved.width32.base416", !171, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"convolved.width32.base448", !177, i64 0}
!177 = !{!"convolved.width64.base448", !172, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"convolved.width32.base480", !177, i64 0}
!180 = !{!181, !181, i64 0}
!181 = !{!"filter_zeroed.width64.base256", !182, i64 0}
!182 = !{!"filter_zeroed.width128.base256", !183, i64 0}
!183 = !{!"filter_zeroed.width256.base256", !184, i64 0}
!184 = !{!"filter_zeroed.width512.base0", !185, i64 0}
!185 = !{!"filter_zeroed.width1024.base0", !106, i64 0}
!186 = !{!187, !187, i64 0}
!187 = !{!"filter_zeroed.width64.base128", !188, i64 0}
!188 = !{!"filter_zeroed.width128.base128", !189, i64 0}
!189 = !{!"filter_zeroed.width256.base0", !184, i64 0}
!190 = !{!191, !191, i64 0}
!191 = !{!"filter_zeroed.width64.base0", !192, i64 0}
!192 = !{!"filter_zeroed.width128.base0", !189, i64 0}
!193 = !{!194, !194, i64 0}
!194 = !{!"filter_zeroed.width64.base320", !182, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"filter_zeroed.width64.base192", !188, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"filter_zeroed.width64.base64", !192, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"output", !104, i64 0}
!201 = distinct !{!201, !32}
!202 = distinct !{!202, !32}
!203 = distinct !{!203, !32}
!204 = distinct !{!204, !32}
!205 = distinct !{!205, !32}
!206 = distinct !{!206, !32}
!207 = !{!"branch_weights", i32 -2147483648, i32 0}
!208 = distinct !{!208, !32}
!209 = distinct !{!209, !32}
!210 = !{!211, !211, i64 0}
!211 = !{!"bias.width32.base0", !212, i64 0}
!212 = !{!"bias.width64.base0", !213, i64 0}
!213 = !{!"bias.width128.base0", !214, i64 0}
!214 = !{!"bias.width256.base0", !215, i64 0}
!215 = !{!"bias.width512.base0", !216, i64 0}
!216 = !{!"bias.width1024.base0", !110, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"bias.width32.base32", !212, i64 0}
!219 = !{!220, !220, i64 0}
!220 = !{!"bias.width32.base64", !221, i64 0}
!221 = !{!"bias.width64.base64", !213, i64 0}
!222 = !{!223, !223, i64 0}
!223 = !{!"bias.width32.base96", !221, i64 0}
!224 = distinct !{!224, !32}
