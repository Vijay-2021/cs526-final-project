; ModuleID = 'depthwise_conv_hvx128'
source_filename = "/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8 }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32 }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%struct.halide_mutex = type { [1 x i32] }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i32, i32 }

@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"halide_default_do_parallel_tasks not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 4
@.str.1.2 = private unnamed_addr constant [64 x i8] c"halide_default_semaphore_init not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 4
@.str.3 = private unnamed_addr constant [71 x i8] c"halide_default_semaphore_try_acquire not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 4
@.str.2 = private unnamed_addr constant [67 x i8] c"halide_default_semaphore_release not implemented on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE = linkonce global %struct.halide_mutex_array zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"halide_join_thread not implemented on this platform.\00", align 1
@.str.6 = private unnamed_addr constant [69 x i8] c"halide_set_num_threads: only supports a value of 1 on this platform.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.9 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.10 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.11 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.12 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.13 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.14 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.15 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.16 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 4
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.6.17 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.18 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.19 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.20 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.21 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.22 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.23 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.24 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.26 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [157 x i8] c"/home/arnoor2/Racket/TensorSynth/Rosette-experiments/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.37 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.38 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.39 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.40 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.41 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.42 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.43 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.44 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.45 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.46 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.47 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.48 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.49 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.50 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.51 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.52 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.53 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.54 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.55 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.56 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.57 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.58 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.59 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.60 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.61 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.62 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.63 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.65 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.67 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.68 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.69 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.70 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.71 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.72 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.74 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.75 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.76 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.77 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.78 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.4.91 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.6.93 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.102 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.103 = private constant [7 x i8] c"filter\00", align 32
@str.104 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.105 = private constant [5 x i8] c"bias\00", align 32
@str.106 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.107 = private constant [9 x i8] c"stride_x\00", align 32
@str.108 = private constant [9 x i8] c"stride_y\00", align 32
@str.109 = private constant [11 x i8] c"dilation_x\00", align 32
@str.110 = private constant [11 x i8] c"dilation_y\00", align 32
@str.111 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.112 = private constant [13 x i8] c"output_shift\00", align 32
@str.113 = private constant [12 x i8] c"output_zero\00", align 32
@str.114 = private constant [11 x i8] c"output_min\00", align 32
@str.115 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.116 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.102, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.103, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.104, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.105, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.106, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.107, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.108, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.109, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.110, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.111, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.112, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.113, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.114, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.115, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.116, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.117 = private constant [63 x i8] c"hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query\00", align 128
@str.118 = private constant [22 x i8] c"depthwise_conv_hvx128\00", align 32
@depthwise_conv_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str.117, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.118, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)], align 4

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #14
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call to i32
  %add3 = add i32 %alignment, 3
  %sub5 = add i32 %add3, %0
  %and8 = and i32 %sub5, %neg
  %1 = inttoptr i32 %and8 to i8*
  %2 = inttoptr i32 %and8 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq i8* %ptr, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i32 -4
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 4, !tbaa !10
  tail call void @free(i8* %1) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #15
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #15
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #15
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #15
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #15
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #15
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #15
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #15
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #15
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %for.body.preheader.if.then3_crit_edge, label %for.inc

for.body.preheader.if.then3_crit_edge:            ; preds = %for.body.preheader
  %arrayidx.0 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0
  br label %if.then3

if.then3:                                         ; preds = %for.inc.8.if.then3_crit_edge, %for.inc.7.if.then3_crit_edge, %for.inc.6.if.then3_crit_edge, %for.inc.5.if.then3_crit_edge, %for.inc.4.if.then3_crit_edge, %for.inc.3.if.then3_crit_edge, %for.inc.2.if.then3_crit_edge, %for.inc.1.if.then3_crit_edge, %for.inc.if.then3_crit_edge, %for.body.preheader.if.then3_crit_edge
  %arrayidx.phi = phi i8** [ %arrayidx.0, %for.body.preheader.if.then3_crit_edge ], [ %arrayidx.1, %for.inc.if.then3_crit_edge ], [ %arrayidx.2, %for.inc.1.if.then3_crit_edge ], [ %arrayidx.3, %for.inc.2.if.then3_crit_edge ], [ %arrayidx.4, %for.inc.3.if.then3_crit_edge ], [ %arrayidx.5, %for.inc.4.if.then3_crit_edge ], [ %arrayidx.6, %for.inc.5.if.then3_crit_edge ], [ %arrayidx.7, %for.inc.6.if.then3_crit_edge ], [ %arrayidx.8, %for.inc.7.if.then3_crit_edge ], [ %arrayidx.9, %for.inc.8.if.then3_crit_edge ]
  %1 = load i8*, i8** %arrayidx.phi, align 4, !tbaa !10
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #15
  store i8* %call, i8** %arrayidx.phi, align 4, !tbaa !10
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %for.inc.if.then3_crit_edge, label %for.inc.1

for.inc.if.then3_crit_edge:                       ; preds = %for.inc
  %arrayidx.1 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1
  br label %if.then3

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #15
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %for.inc.1.if.then3_crit_edge, label %for.inc.2

for.inc.1.if.then3_crit_edge:                     ; preds = %for.inc.1
  %arrayidx.2 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2
  br label %if.then3

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %for.inc.2.if.then3_crit_edge, label %for.inc.3

for.inc.2.if.then3_crit_edge:                     ; preds = %for.inc.2
  %arrayidx.3 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3
  br label %if.then3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %for.inc.3.if.then3_crit_edge, label %for.inc.4

for.inc.3.if.then3_crit_edge:                     ; preds = %for.inc.3
  %arrayidx.4 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4
  br label %if.then3

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %for.inc.4.if.then3_crit_edge, label %for.inc.5

for.inc.4.if.then3_crit_edge:                     ; preds = %for.inc.4
  %arrayidx.5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5
  br label %if.then3

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %for.inc.5.if.then3_crit_edge, label %for.inc.6

for.inc.5.if.then3_crit_edge:                     ; preds = %for.inc.5
  %arrayidx.6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6
  br label %if.then3

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %for.inc.6.if.then3_crit_edge, label %for.inc.7

for.inc.6.if.then3_crit_edge:                     ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7
  br label %if.then3

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %for.inc.7.if.then3_crit_edge, label %for.inc.8

for.inc.7.if.then3_crit_edge:                     ; preds = %for.inc.7
  %arrayidx.8 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8
  br label %if.then3

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %for.inc.8.if.then3_crit_edge, label %if.end9

for.inc.8.if.then3_crit_edge:                     ; preds = %for.inc.8
  %arrayidx.9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9
  br label %if.then3
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !10
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %entry.if.then_crit_edge, label %for.inc

entry.if.then_crit_edge:                          ; preds = %entry
  %arrayidx2.0 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0
  br label %if.then

if.then:                                          ; preds = %for.inc.8.if.then_crit_edge, %for.inc.7.if.then_crit_edge, %for.inc.6.if.then_crit_edge, %for.inc.5.if.then_crit_edge, %for.inc.4.if.then_crit_edge, %for.inc.3.if.then_crit_edge, %for.inc.2.if.then_crit_edge, %for.inc.1.if.then_crit_edge, %for.inc.if.then_crit_edge, %entry.if.then_crit_edge
  %arrayidx2.phi = phi i32* [ %arrayidx2.0, %entry.if.then_crit_edge ], [ %arrayidx2.1, %for.inc.if.then_crit_edge ], [ %arrayidx2.2, %for.inc.1.if.then_crit_edge ], [ %arrayidx2.3, %for.inc.2.if.then_crit_edge ], [ %arrayidx2.4, %for.inc.3.if.then_crit_edge ], [ %arrayidx2.5, %for.inc.4.if.then_crit_edge ], [ %arrayidx2.6, %for.inc.5.if.then_crit_edge ], [ %arrayidx2.7, %for.inc.6.if.then_crit_edge ], [ %arrayidx2.8, %for.inc.7.if.then_crit_edge ], [ %arrayidx2.9, %for.inc.8.if.then_crit_edge ]
  store i32 0, i32* %arrayidx2.phi, align 4, !tbaa !14
  br label %return

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !10
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %for.inc.if.then_crit_edge, label %for.inc.1

for.inc.if.then_crit_edge:                        ; preds = %for.inc
  %arrayidx2.1 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1
  br label %if.then

return:                                           ; preds = %for.inc.9, %if.then
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !10
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %for.inc.1.if.then_crit_edge, label %for.inc.2

for.inc.1.if.then_crit_edge:                      ; preds = %for.inc.1
  %arrayidx2.2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2
  br label %if.then

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !10
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %for.inc.2.if.then_crit_edge, label %for.inc.3

for.inc.2.if.then_crit_edge:                      ; preds = %for.inc.2
  %arrayidx2.3 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3
  br label %if.then

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !10
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %for.inc.3.if.then_crit_edge, label %for.inc.4

for.inc.3.if.then_crit_edge:                      ; preds = %for.inc.3
  %arrayidx2.4 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4
  br label %if.then

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !10
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %for.inc.4.if.then_crit_edge, label %for.inc.5

for.inc.4.if.then_crit_edge:                      ; preds = %for.inc.4
  %arrayidx2.5 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5
  br label %if.then

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !10
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %for.inc.5.if.then_crit_edge, label %for.inc.6

for.inc.5.if.then_crit_edge:                      ; preds = %for.inc.5
  %arrayidx2.6 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6
  br label %if.then

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !10
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %for.inc.6.if.then_crit_edge, label %for.inc.7

for.inc.6.if.then_crit_edge:                      ; preds = %for.inc.6
  %arrayidx2.7 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7
  br label %if.then

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !10
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %for.inc.7.if.then_crit_edge, label %for.inc.8

for.inc.7.if.then_crit_edge:                      ; preds = %for.inc.7
  %arrayidx2.8 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8
  br label %if.then

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !10
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %for.inc.8.if.then_crit_edge, label %for.inc.9

for.inc.8.if.then_crit_edge:                      ; preds = %for.inc.8
  %arrayidx2.9 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9
  br label %if.then

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #15
  br label %return
}

; Function Attrs: nounwind mustprogress
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #14
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !10
  ret i8* (i8*, i32)* %0
}

declare void @halide_print(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i32 0, i32 0)) #14
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp11 = icmp sgt i32 %size, 0
  br i1 %cmp11, label %for.body, label %cleanup1

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %cleanup1, !llvm.loop !16

for.body:                                         ; preds = %entry, %for.cond
  %x.012 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.012, i8* %closure) #15
  %tobool.not = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.012, 1
  br i1 %tobool.not, label %for.cond, label %cleanup1

cleanup1:                                         ; preds = %for.body, %for.cond, %entry
  %spec.select = phi i32 [ 0, %entry ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %spec.select
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i32 0, i32 0)) #14
  ret i32 -1
}

declare void @halide_error(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.2, i32 0, i32 0)) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i32 0, i32 0)) #14
  ret i1 false
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i32 0, i32 0)) #14
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i32 0, i32 0)) #14
  ret %struct.halide_thread* null
}

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i32 0, i32 0)) #14
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #2 {
entry:
  ret %struct.halide_mutex_array* @_ZN6Halide7Runtime8Internal23halide_fake_mutex_arrayE
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i32 %n, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.6, i32 0, i32 0)) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 4, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 4, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 4, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #14
  ret i1 %call
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !20

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0)) #14
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !18
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !22
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !22
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !22
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i32 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i32 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !22
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %entry.for.body_crit_edge, label %for.cond.cleanup

entry.for.body_crit_edge:                         ; preds = %entry
  %inc.1 = add nuw nsw i32 0, 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry.for.body_crit_edge, %for.body.for.body_crit_edge
  %arg.addr.017 = phi i64 [ %div, %for.body.for.body_crit_edge ], [ %arg, %entry.for.body_crit_edge ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body.for.body_crit_edge ], [ %add.ptr, %entry.for.body_crit_edge ]
  %inc.phi = phi i32 [ %inc.0, %for.body.for.body_crit_edge ], [ %inc.1, %entry.for.body_crit_edge ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %cmp = icmp slt i32 %inc.phi, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body.for.body_crit_edge, label %for.cond.cleanup, !llvm.loop !23

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.0 = add nuw nsw i32 %inc.phi, 1
  br label %for.body
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !22
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #15
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !24
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !26
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #14
  %2 = load i64, i64* %bits, align 8, !tbaa !26
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.9, i32 0, i32 0)) #15
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.10, i32 0, i32 0)) #15
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.11, i32 0, i32 0)) #15
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.12, i32 0, i32 0)) #15
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.13, i32 0, i32 0)) #15
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.14, i32 0, i32 0)) #15
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.15, i32 0, i32 0)) #15
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.16, i32 0, i32 0)) #15
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)) #15
  %4 = load double, double* %arg.addr, align 8, !tbaa !24
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !24
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !24
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.condthread-pre-split.while.body_crit_edge, label %while.cond40thread-pre-split

while.condthread-pre-split.while.body_crit_edge:  ; preds = %while.condthread-pre-split
  %dec.1 = add nsw i32 0, -1
  br label %while.body

while.body:                                       ; preds = %while.condthread-pre-split.while.body_crit_edge, %while.body.while.body_crit_edge
  %dec.phi = phi i32 [ %dec.0, %while.body.while.body_crit_edge ], [ %dec.1, %while.condthread-pre-split.while.body_crit_edge ]
  %5 = phi double [ %mul, %while.body.while.body_crit_edge ], [ %.pr, %while.condthread-pre-split.while.body_crit_edge ]
  %mul = fmul double %5, 1.000000e+01
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body.while.body_crit_edge, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !28

while.body.while.body_crit_edge:                  ; preds = %while.body
  %dec.0 = add nsw i32 %dec.phi, -1
  br label %while.body

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !24
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr260 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec.phi, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr260, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr260, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !29

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !24
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr260, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #15
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #15
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #15
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #15
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59261 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59261, i32 2) #15
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #15
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  br i1 %cmp72, label %if.end83, label %if.else75

if.else75:                                        ; preds = %if.then71
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %sub81 = sub i64 %add67, %shl80
  br label %if.end83

if.end83:                                         ; preds = %if.else75, %if.then71
  %integer_part.0 = phi i64 [ %shr77, %if.else75 ], [ 0, %if.then71 ]
  %f.0.in = phi i64 [ %sub81, %if.else75 ], [ %add67, %if.then71 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv84257 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84257, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond258 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond258 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select259 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.end83, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.end83 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.end83 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select259, %if.end83 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #15
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %9 = add nsw i32 %integer_exponent.0, -1
  %xtraiter = and i32 %integer_exponent.0, 3
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -4
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.3, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.3, %if.end137.3 ]
  %add.ptr112 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i32 -1
  %cmp113.not263 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not263, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.3, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.3, %if.end137.3 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil
  %int_part_ptr.0268.epil = phi i8* [ %int_part_ptr.1.epil, %if.end137.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end137.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.ptr112.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.epil, i32 -1
  %cmp113.not263.epil = icmp eq i8* %call108, %int_part_ptr.0268.epil
  br i1 %cmp113.not263.epil, label %if.end137.epil, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0265.pn.epil = phi i8* [ %p.0265.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0264.epil = phi i8 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0265.epil = getelementptr inbounds i8, i8* %p.0265.pn.epil, i32 -1
  %11 = load i8, i8* %p.0265.epil, align 1, !tbaa !22
  %sub117.epil = shl i8 %11, 1
  %mul120.epil = add i8 %sub117.epil, -96
  %add121.epil = or i8 %mul120.epil, %carry.0264.epil
  %cmp124.epil = icmp sgt i8 %add121.epil, 9
  %sub127.epil = add i8 %add121.epil, -10
  %carry.1.epil = zext i1 %cmp124.epil to i8
  %new_digit.0.epil = select i1 %cmp124.epil, i8 %sub127.epil, i8 %add121.epil
  %add132.epil = add i8 %new_digit.0.epil, 48
  store i8 %add132.epil, i8* %p.0265.epil, align 1, !tbaa !22
  %cmp113.not.epil = icmp eq i8* %p.0265.epil, %int_part_ptr.0268.epil
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !30

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %if.end137.epil

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  store i8 49, i8* %add.ptr112.epil, align 1, !tbaa !22
  br label %if.end137.epil

if.end137.epil:                                   ; preds = %if.then135.epil, %for.cond.cleanup114.epil, %for.cond111.preheader.epil
  %int_part_ptr.1.epil = phi i8* [ %add.ptr112.epil, %if.then135.epil ], [ %int_part_ptr.0268.epil, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.cond111.preheader.epil, !llvm.loop !31

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %if.end137.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %int_part_ptr.1.epil, %if.end137.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #15
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #15
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0265.pn = phi i8* [ %p.0265, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0264 = phi i8 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0265 = getelementptr inbounds i8, i8* %p.0265.pn, i32 -1
  %12 = load i8, i8* %p.0265, align 1, !tbaa !22
  %sub117 = shl i8 %12, 1
  %mul120 = add i8 %sub117, -96
  %add121 = or i8 %mul120, %carry.0264
  %cmp124 = icmp sgt i8 %add121, 9
  %sub127 = add i8 %add121, -10
  %carry.1 = zext i1 %cmp124 to i8
  %new_digit.0 = select i1 %cmp124, i8 %sub127, i8 %add121
  %add132 = add i8 %new_digit.0, 48
  store i8 %add132, i8* %p.0265, align 1, !tbaa !22
  %cmp113.not = icmp eq i8* %p.0265, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !30

if.then135:                                       ; preds = %for.cond.cleanup114
  store i8 49, i8* %add.ptr112, align 1, !tbaa !22
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr112, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %add.ptr112.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i32 -1
  %cmp113.not263.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not263.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0265.pn.1 = phi i8* [ %p.0265.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0264.1 = phi i8 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0265.1 = getelementptr inbounds i8, i8* %p.0265.pn.1, i32 -1
  %13 = load i8, i8* %p.0265.1, align 1, !tbaa !22
  %sub117.1 = shl i8 %13, 1
  %mul120.1 = add i8 %sub117.1, -96
  %add121.1 = or i8 %mul120.1, %carry.0264.1
  %cmp124.1 = icmp sgt i8 %add121.1, 9
  %sub127.1 = add i8 %add121.1, -10
  %carry.1.1 = zext i1 %cmp124.1 to i8
  %new_digit.0.1 = select i1 %cmp124.1, i8 %sub127.1, i8 %add121.1
  %add132.1 = add i8 %new_digit.0.1, 48
  store i8 %add132.1, i8* %p.0265.1, align 1, !tbaa !22
  %cmp113.not.1 = icmp eq i8* %p.0265.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !30

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  store i8 49, i8* %add.ptr112.1, align 1, !tbaa !22
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %add.ptr112.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %add.ptr112.2 = getelementptr inbounds i8, i8* %int_part_ptr.1.1, i32 -1
  %cmp113.not263.2 = icmp eq i8* %call108, %int_part_ptr.1.1
  br i1 %cmp113.not263.2, label %if.end137.2, label %for.body115.2

for.body115.2:                                    ; preds = %if.end137.1, %for.body115.2
  %p.0265.pn.2 = phi i8* [ %p.0265.2, %for.body115.2 ], [ %call108, %if.end137.1 ]
  %carry.0264.2 = phi i8 [ %carry.1.2, %for.body115.2 ], [ 0, %if.end137.1 ]
  %p.0265.2 = getelementptr inbounds i8, i8* %p.0265.pn.2, i32 -1
  %14 = load i8, i8* %p.0265.2, align 1, !tbaa !22
  %sub117.2 = shl i8 %14, 1
  %mul120.2 = add i8 %sub117.2, -96
  %add121.2 = or i8 %mul120.2, %carry.0264.2
  %cmp124.2 = icmp sgt i8 %add121.2, 9
  %sub127.2 = add i8 %add121.2, -10
  %carry.1.2 = zext i1 %cmp124.2 to i8
  %new_digit.0.2 = select i1 %cmp124.2, i8 %sub127.2, i8 %add121.2
  %add132.2 = add i8 %new_digit.0.2, 48
  store i8 %add132.2, i8* %p.0265.2, align 1, !tbaa !22
  %cmp113.not.2 = icmp eq i8* %p.0265.2, %int_part_ptr.1.1
  br i1 %cmp113.not.2, label %for.cond.cleanup114.2, label %for.body115.2, !llvm.loop !30

for.cond.cleanup114.2:                            ; preds = %for.body115.2
  br i1 %cmp124.2, label %if.then135.2, label %if.end137.2

if.then135.2:                                     ; preds = %for.cond.cleanup114.2
  store i8 49, i8* %add.ptr112.2, align 1, !tbaa !22
  br label %if.end137.2

if.end137.2:                                      ; preds = %if.then135.2, %for.cond.cleanup114.2, %if.end137.1
  %int_part_ptr.1.2 = phi i8* [ %add.ptr112.2, %if.then135.2 ], [ %int_part_ptr.1.1, %for.cond.cleanup114.2 ], [ %call108, %if.end137.1 ]
  %add.ptr112.3 = getelementptr inbounds i8, i8* %int_part_ptr.1.2, i32 -1
  %cmp113.not263.3 = icmp eq i8* %call108, %int_part_ptr.1.2
  br i1 %cmp113.not263.3, label %if.end137.3, label %for.body115.3

for.body115.3:                                    ; preds = %if.end137.2, %for.body115.3
  %p.0265.pn.3 = phi i8* [ %p.0265.3, %for.body115.3 ], [ %call108, %if.end137.2 ]
  %carry.0264.3 = phi i8 [ %carry.1.3, %for.body115.3 ], [ 0, %if.end137.2 ]
  %p.0265.3 = getelementptr inbounds i8, i8* %p.0265.pn.3, i32 -1
  %15 = load i8, i8* %p.0265.3, align 1, !tbaa !22
  %sub117.3 = shl i8 %15, 1
  %mul120.3 = add i8 %sub117.3, -96
  %add121.3 = or i8 %mul120.3, %carry.0264.3
  %cmp124.3 = icmp sgt i8 %add121.3, 9
  %sub127.3 = add i8 %add121.3, -10
  %carry.1.3 = zext i1 %cmp124.3 to i8
  %new_digit.0.3 = select i1 %cmp124.3, i8 %sub127.3, i8 %add121.3
  %add132.3 = add i8 %new_digit.0.3, 48
  store i8 %add132.3, i8* %p.0265.3, align 1, !tbaa !22
  %cmp113.not.3 = icmp eq i8* %p.0265.3, %int_part_ptr.1.2
  br i1 %cmp113.not.3, label %for.cond.cleanup114.3, label %for.body115.3, !llvm.loop !30

for.cond.cleanup114.3:                            ; preds = %for.body115.3
  br i1 %cmp124.3, label %if.then135.3, label %if.end137.3

if.then135.3:                                     ; preds = %for.cond.cleanup114.3
  store i8 49, i8* %add.ptr112.3, align 1, !tbaa !22
  br label %if.end137.3

if.end137.3:                                      ; preds = %if.then135.3, %for.cond.cleanup114.3, %if.end137.2
  %int_part_ptr.1.3 = phi i8* [ %add.ptr112.3, %if.then135.3 ], [ %int_part_ptr.1.2, %for.cond.cleanup114.3 ], [ %call108, %if.end137.2 ]
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !33
}

declare i8* @memcpy(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %idxprom = and i32 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !22
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !22
  %3 = lshr i32 %1, 4
  %tobool.not = icmp eq i32 %3, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %idxprom.1 = and i32 %3, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.1
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !22
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 16
  store i8 %4, i8* %incdec.ptr, align 1, !tbaa !22
  %5 = lshr i32 %1, 8
  %tobool.not.1 = icmp eq i32 %5, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i32 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !22
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !22
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %idxprom.2 = and i32 %5, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.2
  %6 = load i8, i8* %arrayidx.2, align 1, !tbaa !22
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 15
  store i8 %6, i8* %incdec.ptr.1, align 1, !tbaa !22
  %7 = lshr i32 %1, 12
  %tobool.not.2 = icmp eq i32 %7, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %idxprom.3 = and i32 %7, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.3
  %8 = load i8, i8* %arrayidx.3, align 1, !tbaa !22
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 14
  store i8 %8, i8* %incdec.ptr.2, align 1, !tbaa !22
  %9 = lshr i32 %1, 16
  %tobool.not.3 = icmp eq i32 %9, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %idxprom.4 = and i32 %9, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.4
  %10 = load i8, i8* %arrayidx.4, align 1, !tbaa !22
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 13
  store i8 %10, i8* %incdec.ptr.3, align 1, !tbaa !22
  %11 = lshr i32 %1, 20
  %tobool.not.4 = icmp eq i32 %11, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %idxprom.5 = and i32 %11, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.5
  %12 = load i8, i8* %arrayidx.5, align 1, !tbaa !22
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 12
  store i8 %12, i8* %incdec.ptr.4, align 1, !tbaa !22
  %13 = lshr i32 %1, 24
  %tobool.not.5 = icmp eq i32 %13, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %idxprom.6 = and i32 %13, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %idxprom.6
  %14 = load i8, i8* %arrayidx.6, align 1, !tbaa !22
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 11
  store i8 %14, i8* %incdec.ptr.5, align 1, !tbaa !22
  %15 = lshr i32 %1, 28
  %tobool.not.6 = icmp eq i32 %15, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx.7, align 1, !tbaa !22
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 10
  store i8 %16, i8* %incdec.ptr.6, align 1, !tbaa !22
  br label %cleanup
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !34
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #15
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !38
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #15
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !39
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)) #15
  %5 = load i16, i16* %lanes, align 2, !tbaa !39
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #15
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)) #15
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #15
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !42
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #15
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !43
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #15
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !44
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #15
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #15
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp1177 = icmp sgt i32 %5, 0
  br i1 %cmp1177, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #15
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.079 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.078 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.078, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0)) #15
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.079, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !47
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #15
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.079, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !49
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #15
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #15
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.079, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !50
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #15
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0)) #15
  %inc = add nuw nsw i32 %i.079, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !51

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 128
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 4, !tbaa !52
  %call = tail call i32 %0(i8* %user_context) #14
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i32 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !54

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !18, !range !21
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind willreturn
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #7 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i32 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 4, !tbaa !55
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 4, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #14
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %d, -1
  br i1 %cmp39, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.040 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.040
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.040, -1
  %cmp = icmp sgt i32 %d.addr.040, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !56

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.040, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %1 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp835.not = icmp eq i64 %1, 0
  br i1 %cmp835.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.0.lcssa
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.0.lcssa
  %inc.0 = add nuw i64 0, 1
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !57
  %add = add i64 %2, %src_off
  %conv = trunc i64 %add to i32
  %3 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !59
  %add3 = add i64 %4, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %5 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !60
  %conv5 = trunc i64 %6 to i32
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i32 %conv5) #14
  br label %if.end

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc.phi = phi i64 [ %inc.0, %for.body.lr.ph ], [ %inc.1, %for.body.for.body_crit_edge ]
  %src_off.addr.037 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body.for.body_crit_edge ]
  %dst_off.addr.036 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body.for.body_crit_edge ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.037, i64 %dst_off.addr.036) #15
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !26
  %add10 = add i64 %7, %src_off.addr.037
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %add12 = add i64 %8, %dst_off.addr.036
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !26
  %cmp8 = icmp ult i64 %inc.phi, %9
  br i1 %cmp8, label %for.body.for.body_crit_edge, label %if.end, !llvm.loop !61

for.body.for.body_crit_edge:                      ; preds = %for.body
  %inc.1 = add nuw i64 %inc.phi, 1
  br label %for.body

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !57
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !59
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !62
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = load i8*, i8** %host, align 4, !tbaa !43
  %2 = ptrtoint i8* %1 to i32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !57
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = load i8*, i8** %host5, align 4, !tbaa !43
  %6 = ptrtoint i8* %5 to i32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !40
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !59
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 4, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !38
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !60
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !26
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !26
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !26
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !26
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !26
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !26
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !26
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !26
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !26
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !26
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !26
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !26
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !26
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !26
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !26
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !26
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !26
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !26
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !26
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !26
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !26
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !26
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !26
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !26
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !26
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !26
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !26
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !26
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !26
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !26
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !26
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !26
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !26
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !26
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !26
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !26
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !26
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !26
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !26
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !26
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !26
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !26
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !26
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !26
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !26
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %10 = load i32, i32* %dimensions, align 4, !tbaa !45
  %cmp15248 = icmp sgt i32 %10, 0
  br i1 %cmp15248, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !46
  %dim20 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim20, align 8, !tbaa !46
  %13 = add i32 %10, -1
  %xtraiter = and i32 %10, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17.lr.ph.new

for.body17.lr.ph.new:                             ; preds = %for.body17.lr.ph
  %unroll_iter = and i32 %10, -8
  br label %for.body17

for.cond.cleanup16.loopexit.unr-lcssa:            ; preds = %for.body17, %for.body17.lr.ph
  %add.lcssa.ph = phi i64 [ undef, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %.unr = phi i64 [ 0, %for.body17.lr.ph ], [ %add.7, %for.body17 ]
  %i13.0249.unr = phi i32 [ 0, %for.body17.lr.ph ], [ %inc28.7, %for.body17 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup16, label %for.body17.epil

for.body17.epil:                                  ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil
  %15 = phi i64 [ %add.epil, %for.body17.epil ], [ %.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %i13.0249.epil = phi i32 [ %inc28.epil, %for.body17.epil ], [ %i13.0249.unr, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body17.epil ], [ %xtraiter, %for.cond.cleanup16.loopexit.unr-lcssa ]
  %stride.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 2
  %16 = load i32, i32* %stride.epil, align 4, !tbaa !50
  %conv19.epil = sext i32 %16 to i64
  %min.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249.epil, i32 0
  %17 = load i32, i32* %min.epil, align 4, !tbaa !47
  %min24.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249.epil, i32 0
  %18 = load i32, i32* %min24.epil, align 4, !tbaa !47
  %sub.epil = sub nsw i32 %17, %18
  %conv25.epil = sext i32 %sub.epil to i64
  %mul.epil = mul nsw i64 %conv25.epil, %conv19.epil
  %add.epil = add i64 %mul.epil, %15
  %inc28.epil = add nuw nsw i32 %i13.0249.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup16, label %for.body17.epil, !llvm.loop !63

for.cond.cleanup16:                               ; preds = %for.cond.cleanup16.loopexit.unr-lcssa, %for.body17.epil, %cond.end8
  %19 = phi i64 [ 0, %cond.end8 ], [ %add.lcssa.ph, %for.cond.cleanup16.loopexit.unr-lcssa ], [ %add.epil, %for.body17.epil ]
  %mul32 = mul i64 %19, %conv
  store i64 %mul32, i64* %src_begin, align 8, !tbaa !62
  %dimensions34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %20 = load i32, i32* %dimensions34, align 4, !tbaa !45
  %cmp35.not = icmp eq i32 %10, %20
  br i1 %cmp35.not, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph.new
  %21 = phi i64 [ 0, %for.body17.lr.ph.new ], [ %add.7, %for.body17 ]
  %i13.0249 = phi i32 [ 0, %for.body17.lr.ph.new ], [ %inc28.7, %for.body17 ]
  %niter = phi i32 [ %unroll_iter, %for.body17.lr.ph.new ], [ %niter.nsub.7, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 2
  %22 = load i32, i32* %stride, align 4, !tbaa !50
  %conv19 = sext i32 %22 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0249, i32 0
  %23 = load i32, i32* %min, align 4, !tbaa !47
  %min24 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %i13.0249, i32 0
  %24 = load i32, i32* %min24, align 4, !tbaa !47
  %sub = sub nsw i32 %23, %24
  %conv25 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv25, %conv19
  %add = add i64 %mul, %21
  %inc28 = or i32 %i13.0249, 1
  %stride.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 2
  %25 = load i32, i32* %stride.1, align 4, !tbaa !50
  %conv19.1 = sext i32 %25 to i64
  %min.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28, i32 0
  %26 = load i32, i32* %min.1, align 4, !tbaa !47
  %min24.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28, i32 0
  %27 = load i32, i32* %min24.1, align 4, !tbaa !47
  %sub.1 = sub nsw i32 %26, %27
  %conv25.1 = sext i32 %sub.1 to i64
  %mul.1 = mul nsw i64 %conv25.1, %conv19.1
  %add.1 = add i64 %mul.1, %add
  %inc28.1 = or i32 %i13.0249, 2
  %stride.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 2
  %28 = load i32, i32* %stride.2, align 4, !tbaa !50
  %conv19.2 = sext i32 %28 to i64
  %min.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.1, i32 0
  %29 = load i32, i32* %min.2, align 4, !tbaa !47
  %min24.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.1, i32 0
  %30 = load i32, i32* %min24.2, align 4, !tbaa !47
  %sub.2 = sub nsw i32 %29, %30
  %conv25.2 = sext i32 %sub.2 to i64
  %mul.2 = mul nsw i64 %conv25.2, %conv19.2
  %add.2 = add i64 %mul.2, %add.1
  %inc28.2 = or i32 %i13.0249, 3
  %stride.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 2
  %31 = load i32, i32* %stride.3, align 4, !tbaa !50
  %conv19.3 = sext i32 %31 to i64
  %min.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.2, i32 0
  %32 = load i32, i32* %min.3, align 4, !tbaa !47
  %min24.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.2, i32 0
  %33 = load i32, i32* %min24.3, align 4, !tbaa !47
  %sub.3 = sub nsw i32 %32, %33
  %conv25.3 = sext i32 %sub.3 to i64
  %mul.3 = mul nsw i64 %conv25.3, %conv19.3
  %add.3 = add i64 %mul.3, %add.2
  %inc28.3 = or i32 %i13.0249, 4
  %stride.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 2
  %34 = load i32, i32* %stride.4, align 4, !tbaa !50
  %conv19.4 = sext i32 %34 to i64
  %min.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.3, i32 0
  %35 = load i32, i32* %min.4, align 4, !tbaa !47
  %min24.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.3, i32 0
  %36 = load i32, i32* %min24.4, align 4, !tbaa !47
  %sub.4 = sub nsw i32 %35, %36
  %conv25.4 = sext i32 %sub.4 to i64
  %mul.4 = mul nsw i64 %conv25.4, %conv19.4
  %add.4 = add i64 %mul.4, %add.3
  %inc28.4 = or i32 %i13.0249, 5
  %stride.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 2
  %37 = load i32, i32* %stride.5, align 4, !tbaa !50
  %conv19.5 = sext i32 %37 to i64
  %min.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.4, i32 0
  %38 = load i32, i32* %min.5, align 4, !tbaa !47
  %min24.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.4, i32 0
  %39 = load i32, i32* %min24.5, align 4, !tbaa !47
  %sub.5 = sub nsw i32 %38, %39
  %conv25.5 = sext i32 %sub.5 to i64
  %mul.5 = mul nsw i64 %conv25.5, %conv19.5
  %add.5 = add i64 %mul.5, %add.4
  %inc28.5 = or i32 %i13.0249, 6
  %stride.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 2
  %40 = load i32, i32* %stride.6, align 4, !tbaa !50
  %conv19.6 = sext i32 %40 to i64
  %min.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.5, i32 0
  %41 = load i32, i32* %min.6, align 4, !tbaa !47
  %min24.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.5, i32 0
  %42 = load i32, i32* %min24.6, align 4, !tbaa !47
  %sub.6 = sub nsw i32 %41, %42
  %conv25.6 = sext i32 %sub.6 to i64
  %mul.6 = mul nsw i64 %conv25.6, %conv19.6
  %add.6 = add i64 %mul.6, %add.5
  %inc28.6 = or i32 %i13.0249, 7
  %stride.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 2
  %43 = load i32, i32* %stride.7, align 4, !tbaa !50
  %conv19.7 = sext i32 %43 to i64
  %min.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %inc28.6, i32 0
  %44 = load i32, i32* %min.7, align 4, !tbaa !47
  %min24.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i32 %inc28.6, i32 0
  %45 = load i32, i32* %min24.7, align 4, !tbaa !47
  %sub.7 = sub nsw i32 %44, %45
  %conv25.7 = sext i32 %sub.7 to i64
  %mul.7 = mul nsw i64 %conv25.7, %conv19.7
  %add.7 = add i64 %mul.7, %add.6
  %inc28.7 = add nuw nsw i32 %i13.0249, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup16.loopexit.unr-lcssa, label %for.body17, !llvm.loop !64

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 4, i32 1
  %46 = load i8, i8* %bits.i229, align 1, !tbaa !38
  %conv.i230 = zext i8 %46 to i32
  %add.i231 = add nuw nsw i32 %conv.i230, 7
  %div.i232 = lshr i32 %add.i231, 3
  %cmp40.not = icmp ne i32 %div.i, %div.i232
  %cmp43 = icmp sgt i32 %10, 16
  %or.cond237 = or i1 %cmp43, %cmp40.not
  br i1 %or.cond237, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %47 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %47, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp45 = icmp eq i32 %div.i, 0
  br i1 %cmp45, label %if.then46, label %for.cond49.preheader

for.cond49.preheader:                             ; preds = %if.end
  br i1 %cmp15248, label %for.body53.lr.ph, label %while.end

for.body53.lr.ph:                                 ; preds = %for.cond49.preheader
  %dim55 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 6
  %48 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim55, align 8, !tbaa !46
  %dim64 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 6
  %49 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim64, align 8, !tbaa !46
  br label %for.body53

if.then46:                                        ; preds = %if.end
  %50 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %50, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup86
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !60
  %.pre253 = load i64, i64* %arrayidx11, align 8, !tbaa !26
  %cmp121239 = icmp eq i64 %.pre, %.pre253
  br i1 %cmp121239, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre254 = load i64, i64* %arrayidx12, align 8, !tbaa !26
  br label %land.rhs

for.body53:                                       ; preds = %for.cond.cleanup86, %for.body53.lr.ph
  %i48.0246 = phi i32 [ 0, %for.body53.lr.ph ], [ %inc116, %for.cond.cleanup86 ]
  %stride57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 2
  %51 = load i32, i32* %stride57, align 4, !tbaa !50
  %conv58 = sext i32 %51 to i64
  %mul62 = mul nsw i64 %conv58, %conv
  %stride66 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %49, i32 %i48.0246, i32 2
  %52 = load i32, i32* %stride66, align 4, !tbaa !50
  %conv67 = sext i32 %52 to i64
  %mul71 = mul nsw i64 %conv67, %conv
  %cmp73240.not = icmp eq i32 %i48.0246, 0
  br i1 %cmp73240.not, label %for.end83, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.body53
  %cmp78.not = icmp eq i64 %mul62, 0
  br i1 %cmp78.not, label %for.end83, label %for.body74.us

for.body74.us:                                    ; preds = %for.body74.lr.ph, %for.inc81.us
  %insert.0241.us = phi i32 [ %inc82.us, %for.inc81.us ], [ 0, %for.body74.lr.ph ]
  %arrayidx76.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0241.us
  %53 = load i64, i64* %arrayidx76.us, align 8, !tbaa !26
  %cmp77.us = icmp ult i64 %mul62, %53
  br i1 %cmp77.us, label %for.end83, label %for.inc81.us

for.inc81.us:                                     ; preds = %for.body74.us
  %inc82.us = add nuw nsw i32 %insert.0241.us, 1
  %exitcond2.not = icmp eq i32 %inc82.us, %i48.0246
  br i1 %exitcond2.not, label %for.end83, label %for.body74.us, !llvm.loop !65

for.end83:                                        ; preds = %for.inc81.us, %for.body74.us, %for.body74.lr.ph, %for.body53
  %insert.0.lcssa = phi i32 [ 0, %for.body53 ], [ %i48.0246, %for.body74.lr.ph ], [ %i48.0246, %for.inc81.us ], [ %insert.0241.us, %for.body74.us ]
  %cmp85243 = icmp ugt i32 %i48.0246, %insert.0.lcssa
  br i1 %cmp85243, label %for.body87.preheader, label %for.cond.cleanup86

for.body87.preheader:                             ; preds = %for.end83
  %54 = sub i32 %i48.0246, %insert.0.lcssa
  %55 = xor i32 %insert.0.lcssa, -1
  %56 = add i32 %i48.0246, %55
  %xtraiter5 = and i32 %54, 7
  %lcmp.mod6.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod6.not, label %for.body87.prol.loopexit, label %for.body87.prol

for.body87.prol:                                  ; preds = %for.body87.preheader, %for.body87.prol
  %j.0244.prol = phi i32 [ %sub89.prol, %for.body87.prol ], [ %i48.0246, %for.body87.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body87.prol ], [ %xtraiter5, %for.body87.preheader ]
  %sub89.prol = add nsw i32 %j.0244.prol, -1
  %arrayidx90.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.prol
  %57 = load i64, i64* %arrayidx90.prol, align 8, !tbaa !26
  %arrayidx92.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244.prol
  store i64 %57, i64* %arrayidx92.prol, align 8, !tbaa !26
  %arrayidx95.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.prol
  %58 = load i64, i64* %arrayidx95.prol, align 8, !tbaa !26
  %arrayidx97.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244.prol
  store i64 %58, i64* %arrayidx97.prol, align 8, !tbaa !26
  %arrayidx100.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.prol
  %59 = load i64, i64* %arrayidx100.prol, align 8, !tbaa !26
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244.prol
  store i64 %59, i64* %arrayidx102.prol, align 8, !tbaa !26
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body87.prol.loopexit, label %for.body87.prol, !llvm.loop !66

for.body87.prol.loopexit:                         ; preds = %for.body87.prol, %for.body87.preheader
  %j.0244.unr = phi i32 [ %i48.0246, %for.body87.preheader ], [ %sub89.prol, %for.body87.prol ]
  %60 = icmp ult i32 %56, 7
  br i1 %60, label %for.cond.cleanup86, label %for.body87

for.cond.cleanup86:                               ; preds = %for.body87.prol.loopexit, %for.body87, %for.end83
  %extent107 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %48, i32 %i48.0246, i32 1
  %61 = load i32, i32* %extent107, align 4, !tbaa !49
  %conv108 = sext i32 %61 to i64
  %arrayidx110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv108, i64* %arrayidx110, align 8, !tbaa !26
  %arrayidx112 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %mul62, i64* %arrayidx112, align 8, !tbaa !26
  %arrayidx114 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %mul71, i64* %arrayidx114, align 8, !tbaa !26
  %inc116 = add nuw nsw i32 %i48.0246, 1
  %exitcond3.not = icmp eq i32 %inc116, %10
  br i1 %exitcond3.not, label %while.cond.preheader, label %for.body53, !llvm.loop !67

for.body87:                                       ; preds = %for.body87.prol.loopexit, %for.body87
  %j.0244 = phi i32 [ %sub89.7, %for.body87 ], [ %j.0244.unr, %for.body87.prol.loopexit ]
  %sub89 = add nsw i32 %j.0244, -1
  %arrayidx90 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  %62 = load i64, i64* %arrayidx90, align 8, !tbaa !26
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0244
  store i64 %62, i64* %arrayidx92, align 8, !tbaa !26
  %arrayidx95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  %63 = load i64, i64* %arrayidx95, align 8, !tbaa !26
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0244
  store i64 %63, i64* %arrayidx97, align 8, !tbaa !26
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  %64 = load i64, i64* %arrayidx100, align 8, !tbaa !26
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0244
  store i64 %64, i64* %arrayidx102, align 8, !tbaa !26
  %sub89.1 = add nsw i32 %j.0244, -2
  %arrayidx90.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  %65 = load i64, i64* %arrayidx90.1, align 8, !tbaa !26
  %arrayidx92.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89
  store i64 %65, i64* %arrayidx92.1, align 8, !tbaa !26
  %arrayidx95.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  %66 = load i64, i64* %arrayidx95.1, align 8, !tbaa !26
  %arrayidx97.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89
  store i64 %66, i64* %arrayidx97.1, align 8, !tbaa !26
  %arrayidx100.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  %67 = load i64, i64* %arrayidx100.1, align 8, !tbaa !26
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89
  store i64 %67, i64* %arrayidx102.1, align 8, !tbaa !26
  %sub89.2 = add nsw i32 %j.0244, -3
  %arrayidx90.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  %68 = load i64, i64* %arrayidx90.2, align 8, !tbaa !26
  %arrayidx92.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.1
  store i64 %68, i64* %arrayidx92.2, align 8, !tbaa !26
  %arrayidx95.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  %69 = load i64, i64* %arrayidx95.2, align 8, !tbaa !26
  %arrayidx97.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.1
  store i64 %69, i64* %arrayidx97.2, align 8, !tbaa !26
  %arrayidx100.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  %70 = load i64, i64* %arrayidx100.2, align 8, !tbaa !26
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.1
  store i64 %70, i64* %arrayidx102.2, align 8, !tbaa !26
  %sub89.3 = add nsw i32 %j.0244, -4
  %arrayidx90.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  %71 = load i64, i64* %arrayidx90.3, align 8, !tbaa !26
  %arrayidx92.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.2
  store i64 %71, i64* %arrayidx92.3, align 8, !tbaa !26
  %arrayidx95.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  %72 = load i64, i64* %arrayidx95.3, align 8, !tbaa !26
  %arrayidx97.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.2
  store i64 %72, i64* %arrayidx97.3, align 8, !tbaa !26
  %arrayidx100.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  %73 = load i64, i64* %arrayidx100.3, align 8, !tbaa !26
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.2
  store i64 %73, i64* %arrayidx102.3, align 8, !tbaa !26
  %sub89.4 = add nsw i32 %j.0244, -5
  %arrayidx90.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  %74 = load i64, i64* %arrayidx90.4, align 8, !tbaa !26
  %arrayidx92.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.3
  store i64 %74, i64* %arrayidx92.4, align 8, !tbaa !26
  %arrayidx95.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  %75 = load i64, i64* %arrayidx95.4, align 8, !tbaa !26
  %arrayidx97.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.3
  store i64 %75, i64* %arrayidx97.4, align 8, !tbaa !26
  %arrayidx100.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  %76 = load i64, i64* %arrayidx100.4, align 8, !tbaa !26
  %arrayidx102.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.3
  store i64 %76, i64* %arrayidx102.4, align 8, !tbaa !26
  %sub89.5 = add nsw i32 %j.0244, -6
  %arrayidx90.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  %77 = load i64, i64* %arrayidx90.5, align 8, !tbaa !26
  %arrayidx92.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.4
  store i64 %77, i64* %arrayidx92.5, align 8, !tbaa !26
  %arrayidx95.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  %78 = load i64, i64* %arrayidx95.5, align 8, !tbaa !26
  %arrayidx97.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.4
  store i64 %78, i64* %arrayidx97.5, align 8, !tbaa !26
  %arrayidx100.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  %79 = load i64, i64* %arrayidx100.5, align 8, !tbaa !26
  %arrayidx102.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.4
  store i64 %79, i64* %arrayidx102.5, align 8, !tbaa !26
  %sub89.6 = add nsw i32 %j.0244, -7
  %arrayidx90.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  %80 = load i64, i64* %arrayidx90.6, align 8, !tbaa !26
  %arrayidx92.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.5
  store i64 %80, i64* %arrayidx92.6, align 8, !tbaa !26
  %arrayidx95.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  %81 = load i64, i64* %arrayidx95.6, align 8, !tbaa !26
  %arrayidx97.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.5
  store i64 %81, i64* %arrayidx97.6, align 8, !tbaa !26
  %arrayidx100.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  %82 = load i64, i64* %arrayidx100.6, align 8, !tbaa !26
  %arrayidx102.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.5
  store i64 %82, i64* %arrayidx102.6, align 8, !tbaa !26
  %sub89.7 = add nsw i32 %j.0244, -8
  %arrayidx90.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.7
  %83 = load i64, i64* %arrayidx90.7, align 8, !tbaa !26
  %arrayidx92.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub89.6
  store i64 %83, i64* %arrayidx92.7, align 8, !tbaa !26
  %arrayidx95.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.7
  %84 = load i64, i64* %arrayidx95.7, align 8, !tbaa !26
  %arrayidx97.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub89.6
  store i64 %84, i64* %arrayidx97.7, align 8, !tbaa !26
  %arrayidx100.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.7
  %85 = load i64, i64* %arrayidx100.7, align 8, !tbaa !26
  %arrayidx102.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub89.6
  store i64 %85, i64* %arrayidx102.7, align 8, !tbaa !26
  %cmp85.7 = icmp sgt i32 %sub89.7, %insert.0.lcssa
  br i1 %cmp85.7, label %for.body87, label %for.cond.cleanup86, !llvm.loop !68

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %86 = phi i64 [ %.pre254, %land.rhs.lr.ph ], [ %91, %while.body ]
  %87 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul129, %while.body ]
  %cmp125 = icmp eq i64 %87, %86
  br i1 %cmp125, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %88 = load i64, i64* %arrayidx, align 8, !tbaa !26
  %mul129 = mul i64 %88, %86
  store i64 %mul129, i64* %chunk_size, align 8, !tbaa !60
  %89 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  store i64 %89, i64* %arrayidx, align 8, !tbaa !26
  %90 = load i64, i64* %arrayidx11.1, align 8, !tbaa !26
  store i64 %90, i64* %arrayidx11, align 8, !tbaa !26
  %91 = load i64, i64* %arrayidx12.1, align 8, !tbaa !26
  store i64 %91, i64* %arrayidx12, align 8, !tbaa !26
  %92 = load i64, i64* %arrayidx.2, align 8, !tbaa !26
  store i64 %92, i64* %arrayidx.1, align 8, !tbaa !26
  %93 = load i64, i64* %arrayidx11.2, align 8, !tbaa !26
  store i64 %93, i64* %arrayidx11.1, align 8, !tbaa !26
  %94 = load i64, i64* %arrayidx12.2, align 8, !tbaa !26
  store i64 %94, i64* %arrayidx12.1, align 8, !tbaa !26
  %95 = load i64, i64* %arrayidx.3, align 8, !tbaa !26
  store i64 %95, i64* %arrayidx.2, align 8, !tbaa !26
  %96 = load i64, i64* %arrayidx11.3, align 8, !tbaa !26
  store i64 %96, i64* %arrayidx11.2, align 8, !tbaa !26
  %97 = load i64, i64* %arrayidx12.3, align 8, !tbaa !26
  store i64 %97, i64* %arrayidx12.2, align 8, !tbaa !26
  %98 = load i64, i64* %arrayidx.4, align 8, !tbaa !26
  store i64 %98, i64* %arrayidx.3, align 8, !tbaa !26
  %99 = load i64, i64* %arrayidx11.4, align 8, !tbaa !26
  store i64 %99, i64* %arrayidx11.3, align 8, !tbaa !26
  %100 = load i64, i64* %arrayidx12.4, align 8, !tbaa !26
  store i64 %100, i64* %arrayidx12.3, align 8, !tbaa !26
  %101 = load i64, i64* %arrayidx.5, align 8, !tbaa !26
  store i64 %101, i64* %arrayidx.4, align 8, !tbaa !26
  %102 = load i64, i64* %arrayidx11.5, align 8, !tbaa !26
  store i64 %102, i64* %arrayidx11.4, align 8, !tbaa !26
  %103 = load i64, i64* %arrayidx12.5, align 8, !tbaa !26
  store i64 %103, i64* %arrayidx12.4, align 8, !tbaa !26
  %104 = load i64, i64* %arrayidx.6, align 8, !tbaa !26
  store i64 %104, i64* %arrayidx.5, align 8, !tbaa !26
  %105 = load i64, i64* %arrayidx11.6, align 8, !tbaa !26
  store i64 %105, i64* %arrayidx11.5, align 8, !tbaa !26
  %106 = load i64, i64* %arrayidx12.6, align 8, !tbaa !26
  store i64 %106, i64* %arrayidx12.5, align 8, !tbaa !26
  %107 = load i64, i64* %arrayidx.7, align 8, !tbaa !26
  store i64 %107, i64* %arrayidx.6, align 8, !tbaa !26
  %108 = load i64, i64* %arrayidx11.7, align 8, !tbaa !26
  store i64 %108, i64* %arrayidx11.6, align 8, !tbaa !26
  %109 = load i64, i64* %arrayidx12.7, align 8, !tbaa !26
  store i64 %109, i64* %arrayidx12.6, align 8, !tbaa !26
  %110 = load i64, i64* %arrayidx.8, align 8, !tbaa !26
  store i64 %110, i64* %arrayidx.7, align 8, !tbaa !26
  %111 = load i64, i64* %arrayidx11.8, align 8, !tbaa !26
  store i64 %111, i64* %arrayidx11.7, align 8, !tbaa !26
  %112 = load i64, i64* %arrayidx12.8, align 8, !tbaa !26
  store i64 %112, i64* %arrayidx12.7, align 8, !tbaa !26
  %113 = load i64, i64* %arrayidx.9, align 8, !tbaa !26
  store i64 %113, i64* %arrayidx.8, align 8, !tbaa !26
  %114 = load i64, i64* %arrayidx11.9, align 8, !tbaa !26
  store i64 %114, i64* %arrayidx11.8, align 8, !tbaa !26
  %115 = load i64, i64* %arrayidx12.9, align 8, !tbaa !26
  store i64 %115, i64* %arrayidx12.8, align 8, !tbaa !26
  %116 = load i64, i64* %arrayidx.10, align 8, !tbaa !26
  store i64 %116, i64* %arrayidx.9, align 8, !tbaa !26
  %117 = load i64, i64* %arrayidx11.10, align 8, !tbaa !26
  store i64 %117, i64* %arrayidx11.9, align 8, !tbaa !26
  %118 = load i64, i64* %arrayidx12.10, align 8, !tbaa !26
  store i64 %118, i64* %arrayidx12.9, align 8, !tbaa !26
  %119 = load i64, i64* %arrayidx.11, align 8, !tbaa !26
  store i64 %119, i64* %arrayidx.10, align 8, !tbaa !26
  %120 = load i64, i64* %arrayidx11.11, align 8, !tbaa !26
  store i64 %120, i64* %arrayidx11.10, align 8, !tbaa !26
  %121 = load i64, i64* %arrayidx12.11, align 8, !tbaa !26
  store i64 %121, i64* %arrayidx12.10, align 8, !tbaa !26
  %122 = load i64, i64* %arrayidx.12, align 8, !tbaa !26
  store i64 %122, i64* %arrayidx.11, align 8, !tbaa !26
  %123 = load i64, i64* %arrayidx11.12, align 8, !tbaa !26
  store i64 %123, i64* %arrayidx11.11, align 8, !tbaa !26
  %124 = load i64, i64* %arrayidx12.12, align 8, !tbaa !26
  store i64 %124, i64* %arrayidx12.11, align 8, !tbaa !26
  %125 = load i64, i64* %arrayidx.13, align 8, !tbaa !26
  store i64 %125, i64* %arrayidx.12, align 8, !tbaa !26
  %126 = load i64, i64* %arrayidx11.13, align 8, !tbaa !26
  store i64 %126, i64* %arrayidx11.12, align 8, !tbaa !26
  %127 = load i64, i64* %arrayidx12.13, align 8, !tbaa !26
  store i64 %127, i64* %arrayidx12.12, align 8, !tbaa !26
  %128 = load i64, i64* %arrayidx.14, align 8, !tbaa !26
  store i64 %128, i64* %arrayidx.13, align 8, !tbaa !26
  %129 = load i64, i64* %arrayidx11.14, align 8, !tbaa !26
  store i64 %129, i64* %arrayidx11.13, align 8, !tbaa !26
  %130 = load i64, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 %130, i64* %arrayidx12.13, align 8, !tbaa !26
  %131 = load i64, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 %131, i64* %arrayidx.14, align 8, !tbaa !26
  %132 = load i64, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 %132, i64* %arrayidx11.14, align 8, !tbaa !26
  %133 = load i64, i64* %arrayidx12.15, align 8, !tbaa !26
  store i64 %133, i64* %arrayidx12.14, align 8, !tbaa !26
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !26
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !26
  %cmp121 = icmp eq i64 %mul129, %90
  br i1 %cmp121, label %land.rhs, label %while.end, !llvm.loop !69

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond49.preheader
  %134 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* nonnull align 8 dereferenceable(416) %134, i8* nonnull align 8 dereferenceable(416) %0, i32 416, i1 false), !tbaa.struct !70
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then46, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !73
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !44
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !75
  %call = tail call i32 %1(i8* %user_context) #14
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.17, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.18, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !42
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !42
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.19, i32 0, i32 0)) #14
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #15
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !76
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !44
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.20, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.21, i32 0, i32 0)) #14
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !78
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #15
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.22, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !80
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.23, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !81
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.22.24, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.25, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.26, i32 0, i32 0)) #14
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !82
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #14
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !83
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.28, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %12 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !45
  %cmp16.i.i = icmp sgt i32 %4, 0
  br i1 %cmp16.i.i, label %for.body.lr.ph.i.i, label %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %if.end
  %sub.i.0 = sub nsw i32 1, 0
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !46
  %6 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = and i32 %4, -8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i.new
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i = phi i32 [ 0, %for.body.lr.ph.i.i.new ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %niter = phi i32 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.7, %if.end.i.i.7 ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 2
  %8 = load i32, i32* %stride2.i.i, align 4, !tbaa !50
  %cmp3.i.i = icmp sgt i32 %8, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !49
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = or i32 %i.017.i.i, 1
  %stride2.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 2
  %10 = load i32, i32* %stride2.i.i.1, align 4, !tbaa !50
  %cmp3.i.i.1 = icmp sgt i32 %10, 0
  br i1 %cmp3.i.i.1, label %if.then.i.i.1, label %if.end.i.i.1

for.body.i11.i.preheader.unr-lcssa:               ; preds = %if.end.i.i.7, %for.body.lr.ph.i.i
  %index.1.i.i.lcssa.ph = phi i32 [ undef, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %index.019.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i.7, %if.end.i.i.7 ]
  %i.017.i.i.unr = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i.7, %if.end.i.i.7 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %for.body.i11.i.preheader.unr-lcssa, %if.end.i.i.epil
  %index.019.i.i.epil = phi i32 [ %index.1.i.i.epil, %if.end.i.i.epil ], [ %index.019.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %i.017.i.i.epil = phi i32 [ %inc.i.i.epil, %if.end.i.i.epil ], [ %i.017.i.i.unr, %for.body.i11.i.preheader.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.sub, %if.end.i.i.epil ], [ %xtraiter, %for.body.i11.i.preheader.unr-lcssa ]
  %stride2.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 2
  %11 = load i32, i32* %stride2.i.i.epil, align 4, !tbaa !50
  %cmp3.i.i.epil = icmp sgt i32 %11, 0
  br i1 %cmp3.i.i.epil, label %if.then.i.i.epil, label %if.end.i.i.epil

if.then.i.i.epil:                                 ; preds = %for.body.i.i.epil
  %extent.i.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.017.i.i.epil, i32 1
  %12 = load i32, i32* %extent.i.i.epil, align 4, !tbaa !49
  %sub.i.i.epil = add nsw i32 %12, -1
  %mul.i.i.epil = mul nsw i32 %sub.i.i.epil, %11
  %add.i.i.epil = add nsw i32 %mul.i.i.epil, %index.019.i.i.epil
  br label %if.end.i.i.epil

if.end.i.i.epil:                                  ; preds = %if.then.i.i.epil, %for.body.i.i.epil
  %index.1.i.i.epil = phi i32 [ %add.i.i.epil, %if.then.i.i.epil ], [ %index.019.i.i.epil, %for.body.i.i.epil ]
  %inc.i.i.epil = add nuw nsw i32 %i.017.i.i.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.body.i11.i.preheader, label %for.body.i.i.epil, !llvm.loop !84

for.body.i11.i.preheader:                         ; preds = %if.end.i.i.epil, %for.body.i11.i.preheader.unr-lcssa
  %index.1.i.i.lcssa = phi i32 [ %index.1.i.i.lcssa.ph, %for.body.i11.i.preheader.unr-lcssa ], [ %index.1.i.i.epil, %if.end.i.i.epil ]
  %13 = add i32 %4, -1
  %xtraiter5 = and i32 %4, 7
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i.preheader.new

for.body.i11.i.preheader.new:                     ; preds = %for.body.i11.i.preheader
  %unroll_iter9 = and i32 %4, -8
  br label %for.body.i11.i

for.body.i11.i:                                   ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader.new
  %index.017.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i = phi i32 [ 0, %for.body.i11.i.preheader.new ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %niter10 = phi i32 [ %unroll_iter9, %for.body.i11.i.preheader.new ], [ %niter10.nsub.7, %if.end.i20.i.7 ]
  %stride2.i9.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 2
  %15 = load i32, i32* %stride2.i9.i, align 4, !tbaa !50
  %cmp3.i10.i = icmp slt i32 %15, 0
  br i1 %cmp3.i10.i, label %if.then.i16.i, label %if.end.i20.i

if.then.i16.i:                                    ; preds = %for.body.i11.i
  %extent.i12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i, i32 1
  %16 = load i32, i32* %extent.i12.i, align 4, !tbaa !49
  %sub.i13.i = add nsw i32 %16, -1
  %mul.i14.i = mul nsw i32 %sub.i13.i, %15
  %add.i15.i = add nsw i32 %mul.i14.i, %index.017.i.i
  br label %if.end.i20.i

if.end.i20.i:                                     ; preds = %if.then.i16.i, %for.body.i11.i
  %index.1.i17.i = phi i32 [ %add.i15.i, %if.then.i16.i ], [ %index.017.i.i, %for.body.i11.i ]
  %inc.i18.i = or i32 %i.015.i.i, 1
  %stride2.i9.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 2
  %17 = load i32, i32* %stride2.i9.i.1, align 4, !tbaa !50
  %cmp3.i10.i.1 = icmp slt i32 %17, 0
  br i1 %cmp3.i10.i.1, label %if.then.i16.i.1, label %if.end.i20.i.1

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa: ; preds = %if.end.i20.i.7, %for.body.i11.i.preheader
  %index.1.i17.i.lcssa.ph = phi i32 [ undef, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %index.017.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %index.1.i17.i.7, %if.end.i20.i.7 ]
  %i.015.i.i.unr = phi i32 [ 0, %for.body.i11.i.preheader ], [ %inc.i18.i.7, %if.end.i20.i.7 ]
  %lcmp.mod7.not = icmp eq i32 %xtraiter5, 0
  br i1 %lcmp.mod7.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil

for.body.i11.i.epil:                              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, %if.end.i20.i.epil
  %index.017.i.i.epil = phi i32 [ %index.1.i17.i.epil, %if.end.i20.i.epil ], [ %index.017.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %i.015.i.i.epil = phi i32 [ %inc.i18.i.epil, %if.end.i20.i.epil ], [ %i.015.i.i.unr, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %epil.iter6 = phi i32 [ %epil.iter6.sub, %if.end.i20.i.epil ], [ %xtraiter5, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ]
  %stride2.i9.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 2
  %18 = load i32, i32* %stride2.i9.i.epil, align 4, !tbaa !50
  %cmp3.i10.i.epil = icmp slt i32 %18, 0
  br i1 %cmp3.i10.i.epil, label %if.then.i16.i.epil, label %if.end.i20.i.epil

if.then.i16.i.epil:                               ; preds = %for.body.i11.i.epil
  %extent.i12.i.epil = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.015.i.i.epil, i32 1
  %19 = load i32, i32* %extent.i12.i.epil, align 4, !tbaa !49
  %sub.i13.i.epil = add nsw i32 %19, -1
  %mul.i14.i.epil = mul nsw i32 %sub.i13.i.epil, %18
  %add.i15.i.epil = add nsw i32 %mul.i14.i.epil, %index.017.i.i.epil
  br label %if.end.i20.i.epil

if.end.i20.i.epil:                                ; preds = %if.then.i16.i.epil, %for.body.i11.i.epil
  %index.1.i17.i.epil = phi i32 [ %add.i15.i.epil, %if.then.i16.i.epil ], [ %index.017.i.i.epil, %for.body.i11.i.epil ]
  %inc.i18.i.epil = add nuw nsw i32 %i.015.i.i.epil, 1
  %epil.iter6.sub = add i32 %epil.iter6, -1
  %epil.iter6.cmp.not = icmp eq i32 %epil.iter6.sub, 0
  br i1 %epil.iter6.cmp.not, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i11.i.epil, !llvm.loop !85

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i20.i.epil, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
  %index.1.i17.i.lcssa = phi i32 [ %index.1.i17.i.lcssa.ph, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa ], [ %index.1.i17.i.epil, %if.end.i20.i.epil ]
  %add6.i.i = add nsw i32 %index.1.i.i.lcssa, 1
  %sub.i.1 = sub nsw i32 %add6.i.i, %index.1.i17.i.lcssa
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.phi = phi i32 [ %sub.i.0, %if.end._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !38
  %conv.i.i = zext i8 %20 to i32
  %add.i4.i = add nuw nsw i32 %conv.i.i, 7
  %div.i.i = lshr i32 %add.i4.i, 3
  %mul.i = mul i32 %div.i.i, %sub.i.phi
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %mul.i) #14
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !43
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #15
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %21 = load i8*, i8** %host, align 4, !tbaa !43
  tail call void @halide_free(i8* %user_context, i8* %21) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1

if.then.i.i.1:                                    ; preds = %if.end.i.i
  %extent.i.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i, i32 1
  %22 = load i32, i32* %extent.i.i.1, align 4, !tbaa !49
  %sub.i.i.1 = add nsw i32 %22, -1
  %mul.i.i.1 = mul nsw i32 %sub.i.i.1, %10
  %add.i.i.1 = add nsw i32 %mul.i.i.1, %index.1.i.i
  br label %if.end.i.i.1

if.end.i.i.1:                                     ; preds = %if.then.i.i.1, %if.end.i.i
  %index.1.i.i.1 = phi i32 [ %add.i.i.1, %if.then.i.i.1 ], [ %index.1.i.i, %if.end.i.i ]
  %inc.i.i.1 = or i32 %i.017.i.i, 2
  %stride2.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 2
  %23 = load i32, i32* %stride2.i.i.2, align 4, !tbaa !50
  %cmp3.i.i.2 = icmp sgt i32 %23, 0
  br i1 %cmp3.i.i.2, label %if.then.i.i.2, label %if.end.i.i.2

if.then.i.i.2:                                    ; preds = %if.end.i.i.1
  %extent.i.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.1, i32 1
  %24 = load i32, i32* %extent.i.i.2, align 4, !tbaa !49
  %sub.i.i.2 = add nsw i32 %24, -1
  %mul.i.i.2 = mul nsw i32 %sub.i.i.2, %23
  %add.i.i.2 = add nsw i32 %mul.i.i.2, %index.1.i.i.1
  br label %if.end.i.i.2

if.end.i.i.2:                                     ; preds = %if.then.i.i.2, %if.end.i.i.1
  %index.1.i.i.2 = phi i32 [ %add.i.i.2, %if.then.i.i.2 ], [ %index.1.i.i.1, %if.end.i.i.1 ]
  %inc.i.i.2 = or i32 %i.017.i.i, 3
  %stride2.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 2
  %25 = load i32, i32* %stride2.i.i.3, align 4, !tbaa !50
  %cmp3.i.i.3 = icmp sgt i32 %25, 0
  br i1 %cmp3.i.i.3, label %if.then.i.i.3, label %if.end.i.i.3

if.then.i.i.3:                                    ; preds = %if.end.i.i.2
  %extent.i.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.2, i32 1
  %26 = load i32, i32* %extent.i.i.3, align 4, !tbaa !49
  %sub.i.i.3 = add nsw i32 %26, -1
  %mul.i.i.3 = mul nsw i32 %sub.i.i.3, %25
  %add.i.i.3 = add nsw i32 %mul.i.i.3, %index.1.i.i.2
  br label %if.end.i.i.3

if.end.i.i.3:                                     ; preds = %if.then.i.i.3, %if.end.i.i.2
  %index.1.i.i.3 = phi i32 [ %add.i.i.3, %if.then.i.i.3 ], [ %index.1.i.i.2, %if.end.i.i.2 ]
  %inc.i.i.3 = or i32 %i.017.i.i, 4
  %stride2.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 2
  %27 = load i32, i32* %stride2.i.i.4, align 4, !tbaa !50
  %cmp3.i.i.4 = icmp sgt i32 %27, 0
  br i1 %cmp3.i.i.4, label %if.then.i.i.4, label %if.end.i.i.4

if.then.i.i.4:                                    ; preds = %if.end.i.i.3
  %extent.i.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.3, i32 1
  %28 = load i32, i32* %extent.i.i.4, align 4, !tbaa !49
  %sub.i.i.4 = add nsw i32 %28, -1
  %mul.i.i.4 = mul nsw i32 %sub.i.i.4, %27
  %add.i.i.4 = add nsw i32 %mul.i.i.4, %index.1.i.i.3
  br label %if.end.i.i.4

if.end.i.i.4:                                     ; preds = %if.then.i.i.4, %if.end.i.i.3
  %index.1.i.i.4 = phi i32 [ %add.i.i.4, %if.then.i.i.4 ], [ %index.1.i.i.3, %if.end.i.i.3 ]
  %inc.i.i.4 = or i32 %i.017.i.i, 5
  %stride2.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 2
  %29 = load i32, i32* %stride2.i.i.5, align 4, !tbaa !50
  %cmp3.i.i.5 = icmp sgt i32 %29, 0
  br i1 %cmp3.i.i.5, label %if.then.i.i.5, label %if.end.i.i.5

if.then.i.i.5:                                    ; preds = %if.end.i.i.4
  %extent.i.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.4, i32 1
  %30 = load i32, i32* %extent.i.i.5, align 4, !tbaa !49
  %sub.i.i.5 = add nsw i32 %30, -1
  %mul.i.i.5 = mul nsw i32 %sub.i.i.5, %29
  %add.i.i.5 = add nsw i32 %mul.i.i.5, %index.1.i.i.4
  br label %if.end.i.i.5

if.end.i.i.5:                                     ; preds = %if.then.i.i.5, %if.end.i.i.4
  %index.1.i.i.5 = phi i32 [ %add.i.i.5, %if.then.i.i.5 ], [ %index.1.i.i.4, %if.end.i.i.4 ]
  %inc.i.i.5 = or i32 %i.017.i.i, 6
  %stride2.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 2
  %31 = load i32, i32* %stride2.i.i.6, align 4, !tbaa !50
  %cmp3.i.i.6 = icmp sgt i32 %31, 0
  br i1 %cmp3.i.i.6, label %if.then.i.i.6, label %if.end.i.i.6

if.then.i.i.6:                                    ; preds = %if.end.i.i.5
  %extent.i.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.5, i32 1
  %32 = load i32, i32* %extent.i.i.6, align 4, !tbaa !49
  %sub.i.i.6 = add nsw i32 %32, -1
  %mul.i.i.6 = mul nsw i32 %sub.i.i.6, %31
  %add.i.i.6 = add nsw i32 %mul.i.i.6, %index.1.i.i.5
  br label %if.end.i.i.6

if.end.i.i.6:                                     ; preds = %if.then.i.i.6, %if.end.i.i.5
  %index.1.i.i.6 = phi i32 [ %add.i.i.6, %if.then.i.i.6 ], [ %index.1.i.i.5, %if.end.i.i.5 ]
  %inc.i.i.6 = or i32 %i.017.i.i, 7
  %stride2.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 2
  %33 = load i32, i32* %stride2.i.i.7, align 4, !tbaa !50
  %cmp3.i.i.7 = icmp sgt i32 %33, 0
  br i1 %cmp3.i.i.7, label %if.then.i.i.7, label %if.end.i.i.7

if.then.i.i.7:                                    ; preds = %if.end.i.i.6
  %extent.i.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i.i.6, i32 1
  %34 = load i32, i32* %extent.i.i.7, align 4, !tbaa !49
  %sub.i.i.7 = add nsw i32 %34, -1
  %mul.i.i.7 = mul nsw i32 %sub.i.i.7, %33
  %add.i.i.7 = add nsw i32 %mul.i.i.7, %index.1.i.i.6
  br label %if.end.i.i.7

if.end.i.i.7:                                     ; preds = %if.then.i.i.7, %if.end.i.i.6
  %index.1.i.i.7 = phi i32 [ %add.i.i.7, %if.then.i.i.7 ], [ %index.1.i.i.6, %if.end.i.i.6 ]
  %inc.i.i.7 = add nuw nsw i32 %i.017.i.i, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.body.i11.i.preheader.unr-lcssa, label %for.body.i.i, !llvm.loop !86

if.then.i16.i.1:                                  ; preds = %if.end.i20.i
  %extent.i12.i.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i, i32 1
  %35 = load i32, i32* %extent.i12.i.1, align 4, !tbaa !49
  %sub.i13.i.1 = add nsw i32 %35, -1
  %mul.i14.i.1 = mul nsw i32 %sub.i13.i.1, %17
  %add.i15.i.1 = add nsw i32 %mul.i14.i.1, %index.1.i17.i
  br label %if.end.i20.i.1

if.end.i20.i.1:                                   ; preds = %if.then.i16.i.1, %if.end.i20.i
  %index.1.i17.i.1 = phi i32 [ %add.i15.i.1, %if.then.i16.i.1 ], [ %index.1.i17.i, %if.end.i20.i ]
  %inc.i18.i.1 = or i32 %i.015.i.i, 2
  %stride2.i9.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 2
  %36 = load i32, i32* %stride2.i9.i.2, align 4, !tbaa !50
  %cmp3.i10.i.2 = icmp slt i32 %36, 0
  br i1 %cmp3.i10.i.2, label %if.then.i16.i.2, label %if.end.i20.i.2

if.then.i16.i.2:                                  ; preds = %if.end.i20.i.1
  %extent.i12.i.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.1, i32 1
  %37 = load i32, i32* %extent.i12.i.2, align 4, !tbaa !49
  %sub.i13.i.2 = add nsw i32 %37, -1
  %mul.i14.i.2 = mul nsw i32 %sub.i13.i.2, %36
  %add.i15.i.2 = add nsw i32 %mul.i14.i.2, %index.1.i17.i.1
  br label %if.end.i20.i.2

if.end.i20.i.2:                                   ; preds = %if.then.i16.i.2, %if.end.i20.i.1
  %index.1.i17.i.2 = phi i32 [ %add.i15.i.2, %if.then.i16.i.2 ], [ %index.1.i17.i.1, %if.end.i20.i.1 ]
  %inc.i18.i.2 = or i32 %i.015.i.i, 3
  %stride2.i9.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 2
  %38 = load i32, i32* %stride2.i9.i.3, align 4, !tbaa !50
  %cmp3.i10.i.3 = icmp slt i32 %38, 0
  br i1 %cmp3.i10.i.3, label %if.then.i16.i.3, label %if.end.i20.i.3

if.then.i16.i.3:                                  ; preds = %if.end.i20.i.2
  %extent.i12.i.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.2, i32 1
  %39 = load i32, i32* %extent.i12.i.3, align 4, !tbaa !49
  %sub.i13.i.3 = add nsw i32 %39, -1
  %mul.i14.i.3 = mul nsw i32 %sub.i13.i.3, %38
  %add.i15.i.3 = add nsw i32 %mul.i14.i.3, %index.1.i17.i.2
  br label %if.end.i20.i.3

if.end.i20.i.3:                                   ; preds = %if.then.i16.i.3, %if.end.i20.i.2
  %index.1.i17.i.3 = phi i32 [ %add.i15.i.3, %if.then.i16.i.3 ], [ %index.1.i17.i.2, %if.end.i20.i.2 ]
  %inc.i18.i.3 = or i32 %i.015.i.i, 4
  %stride2.i9.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 2
  %40 = load i32, i32* %stride2.i9.i.4, align 4, !tbaa !50
  %cmp3.i10.i.4 = icmp slt i32 %40, 0
  br i1 %cmp3.i10.i.4, label %if.then.i16.i.4, label %if.end.i20.i.4

if.then.i16.i.4:                                  ; preds = %if.end.i20.i.3
  %extent.i12.i.4 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.3, i32 1
  %41 = load i32, i32* %extent.i12.i.4, align 4, !tbaa !49
  %sub.i13.i.4 = add nsw i32 %41, -1
  %mul.i14.i.4 = mul nsw i32 %sub.i13.i.4, %40
  %add.i15.i.4 = add nsw i32 %mul.i14.i.4, %index.1.i17.i.3
  br label %if.end.i20.i.4

if.end.i20.i.4:                                   ; preds = %if.then.i16.i.4, %if.end.i20.i.3
  %index.1.i17.i.4 = phi i32 [ %add.i15.i.4, %if.then.i16.i.4 ], [ %index.1.i17.i.3, %if.end.i20.i.3 ]
  %inc.i18.i.4 = or i32 %i.015.i.i, 5
  %stride2.i9.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 2
  %42 = load i32, i32* %stride2.i9.i.5, align 4, !tbaa !50
  %cmp3.i10.i.5 = icmp slt i32 %42, 0
  br i1 %cmp3.i10.i.5, label %if.then.i16.i.5, label %if.end.i20.i.5

if.then.i16.i.5:                                  ; preds = %if.end.i20.i.4
  %extent.i12.i.5 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.4, i32 1
  %43 = load i32, i32* %extent.i12.i.5, align 4, !tbaa !49
  %sub.i13.i.5 = add nsw i32 %43, -1
  %mul.i14.i.5 = mul nsw i32 %sub.i13.i.5, %42
  %add.i15.i.5 = add nsw i32 %mul.i14.i.5, %index.1.i17.i.4
  br label %if.end.i20.i.5

if.end.i20.i.5:                                   ; preds = %if.then.i16.i.5, %if.end.i20.i.4
  %index.1.i17.i.5 = phi i32 [ %add.i15.i.5, %if.then.i16.i.5 ], [ %index.1.i17.i.4, %if.end.i20.i.4 ]
  %inc.i18.i.5 = or i32 %i.015.i.i, 6
  %stride2.i9.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 2
  %44 = load i32, i32* %stride2.i9.i.6, align 4, !tbaa !50
  %cmp3.i10.i.6 = icmp slt i32 %44, 0
  br i1 %cmp3.i10.i.6, label %if.then.i16.i.6, label %if.end.i20.i.6

if.then.i16.i.6:                                  ; preds = %if.end.i20.i.5
  %extent.i12.i.6 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.5, i32 1
  %45 = load i32, i32* %extent.i12.i.6, align 4, !tbaa !49
  %sub.i13.i.6 = add nsw i32 %45, -1
  %mul.i14.i.6 = mul nsw i32 %sub.i13.i.6, %44
  %add.i15.i.6 = add nsw i32 %mul.i14.i.6, %index.1.i17.i.5
  br label %if.end.i20.i.6

if.end.i20.i.6:                                   ; preds = %if.then.i16.i.6, %if.end.i20.i.5
  %index.1.i17.i.6 = phi i32 [ %add.i15.i.6, %if.then.i16.i.6 ], [ %index.1.i17.i.5, %if.end.i20.i.5 ]
  %inc.i18.i.6 = or i32 %i.015.i.i, 7
  %stride2.i9.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 2
  %46 = load i32, i32* %stride2.i9.i.7, align 4, !tbaa !50
  %cmp3.i10.i.7 = icmp slt i32 %46, 0
  br i1 %cmp3.i10.i.7, label %if.then.i16.i.7, label %if.end.i20.i.7

if.then.i16.i.7:                                  ; preds = %if.end.i20.i.6
  %extent.i12.i.7 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %inc.i18.i.6, i32 1
  %47 = load i32, i32* %extent.i12.i.7, align 4, !tbaa !49
  %sub.i13.i.7 = add nsw i32 %47, -1
  %mul.i14.i.7 = mul nsw i32 %sub.i13.i.7, %46
  %add.i15.i.7 = add nsw i32 %mul.i14.i.7, %index.1.i17.i.6
  br label %if.end.i20.i.7

if.end.i20.i.7:                                   ; preds = %if.then.i16.i.7, %if.end.i20.i.6
  %index.1.i17.i.7 = phi i32 [ %add.i15.i.7, %if.then.i16.i.7 ], [ %index.1.i17.i.6, %if.end.i20.i.6 ]
  %inc.i18.i.7 = add nuw nsw i32 %i.015.i.i, 8
  %niter10.nsub.7 = add i32 %niter10, -8
  %niter10.ncmp.7 = icmp eq i32 %niter10.nsub.7, 0
  br i1 %niter10.ncmp.7, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa, label %for.body.i11.i, !llvm.loop !87
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #15
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #15
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %4 = load i8*, i8** %host, align 4, !tbaa !43
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #14
  store i8* null, i8** %host, align 4, !tbaa !43
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !44
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #14
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !42
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !88
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !89
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %10() #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !40
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.34, i32 0, i32 0)) #14
  tail call void @abort() #14
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %3() #14
  store i64 %handle, i64* %device, align 8, !tbaa !40
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0)) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !42
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !40
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !44
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #14
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !40
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %7() #14
  store i64 0, i64* %device, align 8, !tbaa !40
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #15
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i32 0, i32 0)) #14
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !40
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #15
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !40
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !43
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !44
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !44
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !42
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !43
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !90
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #15
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #15
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !42
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i32 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 4, !tbaa !71
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i32 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 4, !tbaa !90
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #15
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !42
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i32 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 4, !tbaa !71
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i32 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 4, !tbaa !90
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #14
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !44
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !44
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #15
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #15
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 4, !tbaa !71
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i32 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 4, !tbaa !90
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #14
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !44
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !44
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %1() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !71
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !77
  tail call void %4() #14
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #15
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %6() #14
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !71
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !79
  tail call void %9() #14
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #14
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !91
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !40
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #14
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !45
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !45
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !77
  tail call void %6() #14
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !71
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !92
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #14
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !40
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !93
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #14
  store i64 0, i64* %device, align 8, !tbaa !40
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !71
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !79
  tail call void %5() #14
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !42
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #14
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !94
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #15
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.37, i32 0, i32 0)) #14
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.39, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.40, i32 0, i32 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.41, i32 0, i32 0)) #14
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #14
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #14
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.43, i32 0, i32 0)) #14
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #14
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #14
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !14
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !14
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !34
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !38
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !39
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !34
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !38
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !39
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i32 4) #14
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i32 4) #14
  %call.i = call i8* @malloc(i32 1024) #14
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.45, i32 0, i32 0)) #14
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #14
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.46, i32 0, i32 0)) #14
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #14
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.47, i32 0, i32 0)) #14
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.48, i32 0, i32 0)) #14
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.49, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #14
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.51, i32 0, i32 0)) #14
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #14
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #14
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i32 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !22
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.50, i32 0, i32 0)) #14
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.53, i32 0, i32 0)) #14
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #14
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.52, i32 0, i32 0)) #14
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #14
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i101

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end17.sink.split

if.else.i101:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i32
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i32
  %sub.ptr.sub.i.i97 = sub i32 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i32 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %conv.i.i99 = sext i32 %add.i.i98 to i64
  %call.i.i100 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %conv.i.i99) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #14
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i101, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i101 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #14
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.54, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.57, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.58, i32 0, i32 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.59, i32 0, i32 0)) #14
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.60, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.56, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.61, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.62, i32 0, i32 0)) #14
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #14
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #14
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.64, i32 0, i32 0)) #14
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #14
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #14
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.63, i32 0, i32 0)) #14
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.65, i32 0, i32 0)) #14
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #14
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.42, i32 0, i32 0)) #14
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #14
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.67, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.69, i32 0, i32 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.44, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.71, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.70, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.55, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.72, i32 0, i32 0)) #14
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0)) #14
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #14
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0)) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0)) #14
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #14
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0)) #14
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i32 0, i32 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #14
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0)) #14
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #14
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #14
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #14
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #14
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #14
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #14
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #14
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0)) #14
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #14
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #14
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.74, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i32 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !22
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #14
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #14
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #14
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #14
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0)) #14
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #14
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0)) #14
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.75, i32 0, i32 0)) #14
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.76, i32 0, i32 0)) #14
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #14
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.66, i32 0, i32 0)) #14
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i168

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %if.end

if.else.i168:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i32
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i32
  %sub.ptr.sub.i.i164 = sub i32 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i32 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %conv.i.i166 = sext i32 %add.i.i165 to i64
  %call.i.i167 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %conv.i.i166) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #14
  br label %if.end

if.end:                                           ; preds = %if.else.i168, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i168 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #14
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.77, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #14
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #14
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #14
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #14
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i32 0, i32 0)) #14
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #14
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.68, i32 0, i32 0)) #14
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #14
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #14
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)) #14
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #14
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i32 0, i32 0)) #14
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #14
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #14
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0)) #14
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #14
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0)) #14
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #14
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0)) #14
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #14
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.78, i32 0, i32 0)) #14
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #14
  ret i32 -41
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_lock(i32 1) #14
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i17 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i19 = icmp eq i8* %call.i17, null
  br i1 %tobool.not.i19, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i30 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i17, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i17, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.91, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i17 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i17, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i17) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i17) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #14
  %cmp.not = icmp eq i32 %call, 0
  br i1 %cmp.not, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i13 = tail call i8* @malloc(i32 1024) #14
  %tobool.not.i15 = icmp eq i8* %call.i13, null
  br i1 %tobool.not.i15, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call.i26 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #14
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7.92, i32 0, i32 0)) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i13, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !22
  %call.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i13, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.93, i32 0, i32 0)) #14
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i13 to i32
  %sub.ptr.sub.i.i = sub i32 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i32 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %conv.i.i = sext i32 %add.i.i to i64
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i13, i64 %conv.i.i) #14
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i13) #14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i13) #14
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, %entry
  %retval.0 = phi i32 [ -1, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8* %0) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #15
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32>, <32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32>, i32) #9

; Function Attrs: nounwind mustprogress
define weak i8* @halide_vtcm_malloc(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @HAP_request_VTCM(i32 %size, i32 1) #14
  ret i8* %call
}

declare i8* @HAP_request_VTCM(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_vtcm_free(i8* %user_context, i8* %addr) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @HAP_release_VTCM(i8* %addr) #14
  ret void
}

declare i32 @HAP_release_VTCM(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18, !range !21
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #14
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i32 32) #14
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #14
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.94, i32 0, i32 0)) #14
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !26
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 0), align 8, !tbaa !26
  %and = and i64 %3, %2
  %cmp5.not = icmp eq i64 %and, 0
  br i1 %cmp5.not, label %for.inc.critedge, label %if.then6

if.then6:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 2), align 8, !tbaa !26
  %and8 = and i64 %4, %and
  %cmp9.not = icmp eq i64 %and8, %and
  br i1 %cmp9.not, label %for.inc.critedge, label %cleanup13

for.inc.critedge:                                 ; preds = %if.then6, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i32 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !26
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 1), align 8, !tbaa !26
  %and.1 = and i64 %6, %5
  %cmp5.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp5.not.1, label %for.inc.critedge.1, label %if.then6.1

cleanup13:                                        ; preds = %for.inc.critedge.1, %if.then6.1, %if.then6
  %cmp3.lcssa = phi i32 [ 0, %if.then6 ], [ 0, %if.then6.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then6.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i32 0, i32 3), align 8, !tbaa !26
  %and8.1 = and i64 %7, %and.1
  %cmp9.not.1 = icmp eq i64 %and8.1, %and.1
  br i1 %cmp9.not.1, label %for.inc.critedge.1, label %cleanup13

for.inc.critedge.1:                               ; preds = %if.then6.1, %for.inc.critedge
  br label %cleanup13
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #14
  ret i32 %call
}

; Function Attrs: nounwind willreturn
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #7 {
entry:
  %arrayidx.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 0
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !26
  %arrayidx2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 0
  store i64 0, i64* %arrayidx2.i, align 8, !tbaa !26
  %arrayidx.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 0, i32 1
  store i64 0, i64* %arrayidx.1.i, align 8, !tbaa !26
  %arrayidx2.1.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i32 0, i32 1, i32 1
  store i64 0, i64* %arrayidx2.1.i, align 8, !tbaa !26
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32>, <64 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32>, <32 x i32>) #9

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a93, i32 %a88, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c615 = alloca [512 x i32], align 128
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep578 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep578, align 4
  %.fca.1.gep579 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep579, align 4
  %.fca.2.gep580 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep580, align 4
  %sum_filter617 = alloca [128 x i32], align 128
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 4
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 0
  store i8* null, i8** %.fca.0.gep, align 4
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 1
  store i32 0, i32* %.fca.1.gep, align 4
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i32 0, i32 2
  store i32 0, i32* %.fca.2.gep, align 4
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null) #11
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !43
  %host.i674 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 2
  %1 = load i8*, i8** %host.i674, align 4, !tbaa !43
  %dim.i675 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i32 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i675, align 8, !tbaa !46
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !49
  %extent.i683 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 1
  %4 = load i32, i32* %extent.i683, align 4, !tbaa !49
  %stride.i685 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 1, i32 2
  %5 = load i32, i32* %stride.i685, align 4, !tbaa !50
  %extent.i689 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 1
  %6 = load i32, i32* %extent.i689, align 4, !tbaa !49
  %stride.i691 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i32 2, i32 2
  %7 = load i32, i32* %stride.i691, align 4, !tbaa !50
  %host.i692 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %8 = load i8*, i8** %host.i692, align 4, !tbaa !43
  %dim.i693 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i693, align 8, !tbaa !46
  %min.i698 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 0
  %10 = load i32, i32* %min.i698, align 4, !tbaa !47
  %stride.i700 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 1, i32 2
  %11 = load i32, i32* %stride.i700, align 4, !tbaa !50
  %min.i702 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 0
  %12 = load i32, i32* %min.i702, align 4, !tbaa !47
  %stride.i704 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 2, i32 2
  %13 = load i32, i32* %stride.i704, align 4, !tbaa !50
  %min.i706 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 0
  %14 = load i32, i32* %min.i706, align 4, !tbaa !47
  %extent.i708 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 1
  %15 = load i32, i32* %extent.i708, align 4, !tbaa !49
  %stride.i710 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %9, i32 3, i32 2
  %16 = load i32, i32* %stride.i710, align 4, !tbaa !50
  %host.i711 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %17 = load i8*, i8** %host.i711, align 4, !tbaa !43
  %dim.i712 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 6
  %18 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i712, align 8, !tbaa !46
  %min.i719 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 0
  %19 = load i32, i32* %min.i719, align 4, !tbaa !47
  %extent.i721 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 1
  %20 = load i32, i32* %extent.i721, align 4, !tbaa !49
  %stride.i723 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 1, i32 2
  %21 = load i32, i32* %stride.i723, align 4, !tbaa !50
  %min.i725 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 0
  %22 = load i32, i32* %min.i725, align 4, !tbaa !47
  %extent.i727 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 1
  %23 = load i32, i32* %extent.i727, align 4, !tbaa !49
  %stride.i729 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 2, i32 2
  %24 = load i32, i32* %stride.i729, align 4, !tbaa !50
  %stride.i735 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %18, i32 3, i32 2
  %25 = load i32, i32* %stride.i735, align 4, !tbaa !50
  %26 = icmp sgt i32 %20, 7
  %27 = and i32 %20, 1
  %28 = icmp eq i32 %27, 0
  %29 = or i1 %26, %28
  %30 = icmp sgt i32 %23, 7
  %31 = and i32 %23, 1
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %30, %32
  %34 = and i1 %29, %33
  %35 = icmp sgt i32 %3, 127
  %36 = and i1 %35, %34
  br i1 %36, label %then_bb, label %next_bb

after_bb.loopexit5223:                            ; preds = %"end for output.s0.b.rebased61"
  store i32 %2447, i32* %.fca.1.gep, align 4, !tbaa !95
  store i32 %2446, i32* %.fca.2.gep, align 4
  br label %after_bb

after_bb:                                         ; preds = %"end for output.s0.b.rebased", %after_bb.loopexit5223
  %.01397 = phi i8* [ %.4, %after_bb.loopexit5223 ], [ %.2, %"end for output.s0.b.rebased" ]
  %.0 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %tobool.not.i.not = icmp eq i8* %.01397, null
  br i1 %tobool.not.i.not, label %if.then.i737, label %if.then.i

if.then.i.loopexit:                               ; preds = %"end for output.s0.y.yo559"
  %37 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i

if.then.i:                                        ; preds = %if.then.i.loopexit, %after_bb
  %.01409 = phi i8* [ %.0, %after_bb ], [ %3783, %if.then.i.loopexit ]
  %.013971408 = phi i8* [ %.01397, %after_bb ], [ %37, %if.then.i.loopexit ]
  %ptr1.i = bitcast i8* %.013971408 to i8**
  %38 = load i8*, i8** %ptr1.i, align 4, !tbaa !97
  %tobool.not.i1335 = icmp eq i8* %38, null
  br i1 %tobool.not.i1335, label %pseudostack_free.exit, label %land.lhs.true.i1338

land.lhs.true.i1338:                              ; preds = %if.then.i
  %cumulative_size.i1336 = getelementptr inbounds i8, i8* %.013971408, i32 8
  %39 = bitcast i8* %cumulative_size.i1336 to i32*
  %40 = load i32, i32* %39, align 4, !tbaa !98
  %cmp.i1337 = icmp ugt i32 %40, 16384
  br i1 %cmp.i1337, label %if.then.i1339, label %pseudostack_free.exit

if.then.i1339:                                    ; preds = %land.lhs.true.i1338
  call void @halide_free(i8* null, i8* nonnull %38) #14
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i, %land.lhs.true.i1338, %if.then.i1339
  store i8* null, i8** %ptr1.i, align 4, !tbaa !97
  %size.i1340 = getelementptr inbounds i8, i8* %.013971408, i32 4
  %41 = bitcast i8* %size.i1340 to i32*
  store i32 0, i32* %41, align 4, !tbaa !95
  %cumulative_size4.i = getelementptr inbounds i8, i8* %.013971408, i32 8
  %42 = bitcast i8* %cumulative_size4.i to i32*
  store i32 0, i32* %42, align 4, !tbaa !98
  br label %if.then.i737

if.then.i737:                                     ; preds = %pseudostack_free.exit, %after_bb, %after_bb148
  %.014021412 = phi i8* [ %3783, %after_bb148 ], [ %.01409, %pseudostack_free.exit ], [ %.0, %after_bb ]
  %ptr1.i1342 = bitcast i8* %.014021412 to i8**
  %43 = load i8*, i8** %ptr1.i1342, align 4, !tbaa !97
  %tobool.not.i1343 = icmp eq i8* %43, null
  br i1 %tobool.not.i1343, label %pseudostack_free.exit1351, label %land.lhs.true.i1346

land.lhs.true.i1346:                              ; preds = %if.then.i737
  %cumulative_size.i1344 = getelementptr inbounds i8, i8* %.014021412, i32 8
  %44 = bitcast i8* %cumulative_size.i1344 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !98
  %cmp.i1345 = icmp ugt i32 %45, 16384
  br i1 %cmp.i1345, label %if.then.i1347, label %pseudostack_free.exit1351

if.then.i1347:                                    ; preds = %land.lhs.true.i1346
  call void @halide_free(i8* null, i8* nonnull %43) #14
  br label %pseudostack_free.exit1351

pseudostack_free.exit1351:                        ; preds = %if.then.i737, %land.lhs.true.i1346, %if.then.i1347
  store i8* null, i8** %ptr1.i1342, align 4, !tbaa !97
  %size.i1348 = getelementptr inbounds i8, i8* %.014021412, i32 4
  %46 = bitcast i8* %size.i1348 to i32*
  store i32 0, i32* %46, align 4, !tbaa !95
  %cumulative_size4.i1349 = getelementptr inbounds i8, i8* %.014021412, i32 8
  %47 = bitcast i8* %cumulative_size4.i1349 to i32*
  store i32 0, i32* %47, align 4, !tbaa !98
  br label %call_destructor.exit741

call_destructor.exit741:                          ; preds = %next_bb32, %pseudostack_free.exit1351
  call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #14
  ret i32 0

then_bb:                                          ; preds = %entry
  %t2201 = icmp slt i32 %a93, 0
  %t2203 = icmp slt i32 %stride_x, 0
  %48 = add nsw i32 %4, -1
  %49 = mul nsw i32 %48, %a93
  %t2207 = select i1 %t2201, i32 %49, i32 0
  %50 = add nsw i32 %20, -1
  %51 = icmp slt i32 %20, 2
  %52 = select i1 %51, i32 %20, i32 2
  %53 = add nsw i32 %52, -2
  %t2208.s = select i1 %t2203, i32 %50, i32 %53
  %t2209 = icmp slt i32 %a88, 0
  %t2211 = icmp slt i32 %stride_y, 0
  %54 = add nsw i32 %6, -1
  %55 = mul nsw i32 %54, %a88
  %t2215 = select i1 %t2209, i32 %55, i32 0
  %56 = add nsw i32 %23, -1
  %57 = icmp slt i32 %23, 2
  %58 = select i1 %57, i32 %23, i32 2
  %59 = add nsw i32 %58, -2
  %t2216.s = select i1 %t2211, i32 %56, i32 %59
  %60 = icmp eq i32 %4, 3
  %61 = icmp eq i32 %6, 3
  %t2217 = and i1 %60, %61
  %t2194 = icmp eq i32 %depth_multiplier, 1
  %a88.op652 = shl i32 %a88, 1
  %62 = select i1 %t2209, i32 %a88.op652, i32 0
  %63 = select i1 %t2217, i32 %62, i32 %t2215
  %64 = add nsw i32 %t2216.s, %22
  %65 = mul nsw i32 %64, %stride_y
  %b16 = add nsw i32 %65, %63
  %a93.op653 = shl i32 %a93, 1
  %66 = select i1 %t2201, i32 %a93.op653, i32 0
  %67 = select i1 %t2217, i32 %66, i32 %t2207
  %68 = add nsw i32 %t2208.s, %19
  %69 = mul nsw i32 %68, %stride_x
  %b15 = add nsw i32 %69, %67
  %70 = select i1 %t2209, i32 0, i32 %55
  %71 = select i1 %t2211, i32 %59, i32 %56
  %72 = add nsw i32 %71, %22
  %73 = mul nsw i32 %72, %stride_y
  %b23 = add nsw i32 %73, %70
  %74 = select i1 %t2201, i32 0, i32 %49
  %75 = select i1 %t2203, i32 %53, i32 %50
  %76 = add nsw i32 %75, %19
  %77 = mul nsw i32 %76, %stride_x
  %b17 = add nsw i32 %77, %74
  %78 = mul nsw i32 %13, %12
  %79 = mul nsw i32 %16, %14
  %80 = mul nsw i32 %11, %10
  %81 = add i32 %78, %80
  %t2195 = add i32 %81, %79
  %82 = add nuw nsw i32 %3, 127
  %83 = ashr i32 %82, 7
  %b10 = add nsw i32 %3, -128
  %84 = icmp sgt i32 %4, 0
  %85 = icmp sgt i32 %6, 0
  %86 = select i1 %85, i32 %6, i32 0
  %.op5362 = shl i32 %4, 8
  %87 = select i1 %84, i32 %.op5362, i32 0
  %88 = mul i32 %87, %86
  %89 = or i32 %88, 134
  %90 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %91 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %92 = shufflevector <64 x i8> %91, <64 x i8> undef, <64 x i32> zeroinitializer
  %93 = zext <64 x i8> %92 to <64 x i16>
  %94 = bitcast i8* %0 to i32*
  %95 = zext i8 %input_zero to i32
  %96 = insertelement <128 x i32> undef, i32 %95, i32 0
  %97 = shufflevector <128 x i32> %96, <128 x i32> undef, <32 x i32> zeroinitializer
  %98 = bitcast [128 x i32]* %sum_filter617 to <32 x i32>*
  %99 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 32
  %100 = bitcast i32* %99 to <32 x i32>*
  %101 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 64
  %102 = bitcast i32* %101 to <32 x i32>*
  %103 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 96
  %104 = bitcast i32* %103 to <32 x i32>*
  %a13 = add nsw i32 %69, %t2207
  %105 = icmp slt i32 %t2207, %67
  %t2225 = select i1 %105, i32 %a13, i32 %b15
  %a14 = add nsw i32 %65, %t2215
  %106 = icmp slt i32 %t2215, %63
  %t2223 = select i1 %106, i32 %a14, i32 %b16
  %107 = icmp sgt i32 %a93, 0
  %108 = select i1 %107, i32 %a93, i32 0
  %109 = shl nuw nsw i32 %108, 1
  %110 = select i1 %t2217, i32 %109, i32 %74
  %a15 = add nsw i32 %77, %110
  %111 = icmp sgt i32 %110, %74
  %112 = select i1 %111, i32 %a15, i32 %b17
  %a29 = sub nsw i32 %112, %t2225
  %113 = icmp sgt i32 %a88, 0
  %114 = select i1 %113, i32 %a88, i32 0
  %115 = shl nuw nsw i32 %114, 1
  %116 = select i1 %t2217, i32 %115, i32 %70
  %a21 = add nsw i32 %73, %116
  %117 = icmp sgt i32 %116, %70
  %118 = select i1 %117, i32 %a21, i32 %b23
  %a30 = sub nsw i32 %118, %t2223
  %t2228 = sub nsw i32 %b17, %a13
  %t2227 = sub nsw i32 %b23, %a14
  %119 = icmp sgt i32 %15, 0
  %120 = icmp sgt i32 %a29, -1
  %t2529 = select i1 %120, i32 %a29, i32 -1
  %121 = icmp sgt i32 %a30, -1
  %t2530 = select i1 %121, i32 %a30, i32 -1
  %122 = add nsw i32 %t2530, 1
  %123 = shl i32 %t2529, 7
  %t2531 = add i32 %123, 128
  %124 = mul i32 %t2531, %122
  %125 = add i32 %124, 131
  %126 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %127 = icmp sgt i32 %t2227, -1
  %128 = sub i32 %a14, %t2223
  %129 = add nsw i32 %a29, 1
  %130 = sub i32 %a13, %t2225
  %131 = icmp sgt i32 %t2228, -1
  %132 = icmp eq i32 %depth_multiplier, 0
  %t2534 = select i1 %132, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit665 = ashr i32 %depth_multiplier, 31
  %133 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %134 = shufflevector <128 x i32> %133, <128 x i32> undef, <128 x i32> zeroinitializer
  %135 = sub nsw <128 x i32> %134, %t2534
  %136 = xor i32 %depth_multiplier.lobit665, -1
  %137 = sub nsw i32 %136, %depth_multiplier.lobit665
  %138 = insertelement <128 x i32> undef, i32 %137, i32 0
  %139 = shufflevector <128 x i32> %138, <128 x i32> undef, <128 x i32> zeroinitializer
  %140 = xor <128 x i32> %t2534, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg5214 = mul i32 %24, %22
  %.neg5215 = mul i32 %21, %19
  %.neg5216 = mul i32 %25, %14
  %reass.add5218 = add i32 %.neg5214, %.neg5215
  %reass.add5219 = add i32 %reass.add5218, %.neg5216
  %141 = add nuw nsw i32 %23, 1
  %142 = ashr i32 %141, 1
  %143 = icmp sgt i32 %23, 0
  %b33 = add nsw i32 %23, -2
  %144 = sub nsw i32 %a88.op652, %t2223
  %145 = sub nsw i32 %a88, %t2223
  %146 = add nuw nsw i32 %20, 1
  %147 = ashr i32 %146, 1
  %148 = icmp sgt i32 %20, 0
  %b34 = add nsw i32 %20, -2
  %149 = bitcast [512 x i32]* %offset_c615 to <32 x i32>*
  %150 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 32
  %151 = bitcast i32* %150 to <32 x i32>*
  %152 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 64
  %153 = bitcast i32* %152 to <32 x i32>*
  %154 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 96
  %155 = bitcast i32* %154 to <32 x i32>*
  %156 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 128
  %157 = bitcast i32* %156 to <32 x i32>*
  %158 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 160
  %159 = bitcast i32* %158 to <32 x i32>*
  %160 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 192
  %161 = bitcast i32* %160 to <32 x i32>*
  %162 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 224
  %163 = bitcast i32* %162 to <32 x i32>*
  %164 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 256
  %165 = bitcast i32* %164 to <32 x i32>*
  %166 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 288
  %167 = bitcast i32* %166 to <32 x i32>*
  %168 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 320
  %169 = bitcast i32* %168 to <32 x i32>*
  %170 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 352
  %171 = bitcast i32* %170 to <32 x i32>*
  %172 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 384
  %173 = bitcast i32* %172 to <32 x i32>*
  %174 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 416
  %175 = bitcast i32* %174 to <32 x i32>*
  %176 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 448
  %177 = bitcast i32* %176 to <32 x i32>*
  %178 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 480
  %179 = bitcast i32* %178 to <32 x i32>*
  %180 = sub nsw i32 %a93, %t2225
  %181 = sub nsw i32 %a93.op653, %t2225
  %182 = insertelement <128 x i32> undef, i32 %output_multiplier, i32 0
  %183 = shufflevector <128 x i32> %182, <128 x i32> undef, <128 x i32> zeroinitializer
  %184 = sext <128 x i32> %183 to <128 x i64>
  %.not659 = icmp eq i32 %output_shift, 0
  %185 = select i1 %.not659, <128 x i32> zeroinitializer, <128 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %186 = add i32 %output_shift, -1
  %187 = zext i8 %output_zero to i16
  %188 = insertelement <128 x i16> undef, i16 %187, i32 0
  %189 = shufflevector <128 x i16> %188, <128 x i16> undef, <128 x i32> zeroinitializer
  %190 = bitcast <128 x i16> %189 to <64 x i32>
  %191 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %192 = shufflevector <128 x i8> %191, <128 x i8> undef, <128 x i32> zeroinitializer
  %193 = bitcast <128 x i8> %192 to <32 x i32>
  %194 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %195 = shufflevector <128 x i8> %194, <128 x i8> undef, <128 x i32> zeroinitializer
  %196 = bitcast <128 x i8> %195 to <32 x i32>
  %197 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %198 = add i32 %4, -1
  %xtraiter5651 = and i32 %4, 3
  %199 = icmp ult i32 %198, 3
  %unroll_iter5654 = and i32 %4, -4
  %lcmp.mod5653.not = icmp eq i32 %xtraiter5651, 0
  %xtraiter5656 = and i32 %4, 3
  %200 = icmp ult i32 %198, 3
  %unroll_iter5663 = and i32 %4, -4
  %lcmp.mod5658.not = icmp eq i32 %xtraiter5656, 0
  %201 = or i32 %t2227, %t2228
  %202 = icmp slt i32 %201, 0
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %35, label %then_bb31, label %next_bb32

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.1 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %482, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 7
  %203 = icmp slt i32 %a8, %b10
  %output.s0.c.c.base = select i1 %203, i32 %a8, i32 %b10
  %204 = load i32, i32* %.fca.1.gep, align 4, !tbaa !95
  %cmp.i = icmp ult i32 %204, %89
  %205 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !97
  br i1 %cmp.i, label %if.then.i742, label %pseudostack_alloc.exit, !prof !99

if.then.i742:                                     ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %205, null
  %206 = load i32, i32* %.fca.2.gep, align 4
  %cmp2.i = icmp ugt i32 %206, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i742
  call void @halide_free(i8* null, i8* nonnull %205) #14
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i742
  %add.i = add i32 %206, %89
  store i32 %add.i, i32* %.fca.2.gep, align 4, !tbaa !98
  %cmp7.i = icmp ugt i32 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i32 %89) #14
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 4, !tbaa !97
  store i32 %89, i32* %.fca.1.gep, align 4, !tbaa !95
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %207 = phi i8* [ %storemerge.i, %if.end11.i ], [ %205, %"for output.s0.c.co" ]
  %208 = bitcast i8* %207 to i16*
  %.not654 = icmp eq i8* %207, null
  br i1 %.not654, label %then_bb2, label %"produce filter_zeroed", !prof !100

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %209 = alloca i8*, i32 %89, align 128
  %210 = bitcast i8** %209 to i16*
  store i8** %209, i8*** %90, align 4
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %210, %then_bb2 ], [ %208, %pseudostack_alloc.exit ]
  br i1 %85, label %"for filter_zeroed.s0.y.preheader", label %"consume sum_filter", !prof !101

"for filter_zeroed.s0.y.preheader":               ; preds = %"produce filter_zeroed"
  br i1 %84, label %"for filter_zeroed.s0.y.us", label %"for sum_filter.s1.r19$y.preheader", !prof !101

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %filter_zeroed.s0.y.us = phi i32 [ %309, %"end for filter_zeroed.s0.x.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y.preheader" ]
  %211 = mul nsw i32 %filter_zeroed.s0.y.us, %7
  %212 = add nsw i32 %211, %output.s0.c.c.base
  %213 = mul nsw i32 %filter_zeroed.s0.y.us, %4
  br i1 %199, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %filter_zeroed.s0.x.us = phi i32 [ %289, %"for filter_zeroed.s0.x.us" ], [ 0, %"for filter_zeroed.s0.y.us" ]
  %niter5655 = phi i32 [ %niter5655.nsub.3, %"for filter_zeroed.s0.x.us" ], [ %unroll_iter5654, %"for filter_zeroed.s0.y.us" ]
  %214 = mul nsw i32 %filter_zeroed.s0.x.us, %5
  %215 = add nsw i32 %212, %214
  %216 = getelementptr inbounds i8, i8* %1, i32 %215
  %217 = bitcast i8* %216 to <64 x i8>*
  %218 = load <64 x i8>, <64 x i8>* %217, align 1, !tbaa !102
  %219 = zext <64 x i8> %218 to <64 x i16>
  %220 = sub nsw <64 x i16> %219, %93
  %221 = add nsw i32 %filter_zeroed.s0.x.us, %213
  %222 = shl nsw i32 %221, 7
  %223 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %222
  %224 = bitcast i16* %223 to <64 x i16>*
  store <64 x i16> %220, <64 x i16>* %224, align 128, !tbaa !105
  %225 = getelementptr inbounds i8, i8* %216, i32 64
  %226 = bitcast i8* %225 to <64 x i8>*
  %227 = load <64 x i8>, <64 x i8>* %226, align 1, !tbaa !102
  %228 = zext <64 x i8> %227 to <64 x i16>
  %229 = sub nsw <64 x i16> %228, %93
  %230 = getelementptr inbounds i16, i16* %223, i32 64
  %231 = bitcast i16* %230 to <64 x i16>*
  store <64 x i16> %229, <64 x i16>* %231, align 128, !tbaa !105
  %232 = or i32 %filter_zeroed.s0.x.us, 1
  %233 = mul nsw i32 %232, %5
  %234 = add nsw i32 %212, %233
  %235 = getelementptr inbounds i8, i8* %1, i32 %234
  %236 = bitcast i8* %235 to <64 x i8>*
  %237 = load <64 x i8>, <64 x i8>* %236, align 1, !tbaa !102
  %238 = zext <64 x i8> %237 to <64 x i16>
  %239 = sub nsw <64 x i16> %238, %93
  %240 = add nsw i32 %232, %213
  %241 = shl nsw i32 %240, 7
  %242 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %241
  %243 = bitcast i16* %242 to <64 x i16>*
  store <64 x i16> %239, <64 x i16>* %243, align 128, !tbaa !105
  %244 = getelementptr inbounds i8, i8* %235, i32 64
  %245 = bitcast i8* %244 to <64 x i8>*
  %246 = load <64 x i8>, <64 x i8>* %245, align 1, !tbaa !102
  %247 = zext <64 x i8> %246 to <64 x i16>
  %248 = sub nsw <64 x i16> %247, %93
  %249 = getelementptr inbounds i16, i16* %242, i32 64
  %250 = bitcast i16* %249 to <64 x i16>*
  store <64 x i16> %248, <64 x i16>* %250, align 128, !tbaa !105
  %251 = or i32 %filter_zeroed.s0.x.us, 2
  %252 = mul nsw i32 %251, %5
  %253 = add nsw i32 %212, %252
  %254 = getelementptr inbounds i8, i8* %1, i32 %253
  %255 = bitcast i8* %254 to <64 x i8>*
  %256 = load <64 x i8>, <64 x i8>* %255, align 1, !tbaa !102
  %257 = zext <64 x i8> %256 to <64 x i16>
  %258 = sub nsw <64 x i16> %257, %93
  %259 = add nsw i32 %251, %213
  %260 = shl nsw i32 %259, 7
  %261 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %260
  %262 = bitcast i16* %261 to <64 x i16>*
  store <64 x i16> %258, <64 x i16>* %262, align 128, !tbaa !105
  %263 = getelementptr inbounds i8, i8* %254, i32 64
  %264 = bitcast i8* %263 to <64 x i8>*
  %265 = load <64 x i8>, <64 x i8>* %264, align 1, !tbaa !102
  %266 = zext <64 x i8> %265 to <64 x i16>
  %267 = sub nsw <64 x i16> %266, %93
  %268 = getelementptr inbounds i16, i16* %261, i32 64
  %269 = bitcast i16* %268 to <64 x i16>*
  store <64 x i16> %267, <64 x i16>* %269, align 128, !tbaa !105
  %270 = or i32 %filter_zeroed.s0.x.us, 3
  %271 = mul nsw i32 %270, %5
  %272 = add nsw i32 %212, %271
  %273 = getelementptr inbounds i8, i8* %1, i32 %272
  %274 = bitcast i8* %273 to <64 x i8>*
  %275 = load <64 x i8>, <64 x i8>* %274, align 1, !tbaa !102
  %276 = zext <64 x i8> %275 to <64 x i16>
  %277 = sub nsw <64 x i16> %276, %93
  %278 = add nsw i32 %270, %213
  %279 = shl nsw i32 %278, 7
  %280 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %279
  %281 = bitcast i16* %280 to <64 x i16>*
  store <64 x i16> %277, <64 x i16>* %281, align 128, !tbaa !105
  %282 = getelementptr inbounds i8, i8* %273, i32 64
  %283 = bitcast i8* %282 to <64 x i8>*
  %284 = load <64 x i8>, <64 x i8>* %283, align 1, !tbaa !102
  %285 = zext <64 x i8> %284 to <64 x i16>
  %286 = sub nsw <64 x i16> %285, %93
  %287 = getelementptr inbounds i16, i16* %280, i32 64
  %288 = bitcast i16* %287 to <64 x i16>*
  store <64 x i16> %286, <64 x i16>* %288, align 128, !tbaa !105
  %289 = add nuw nsw i32 %filter_zeroed.s0.x.us, 4
  %niter5655.nsub.3 = add i32 %niter5655, -4
  %niter5655.ncmp.3 = icmp eq i32 %niter5655.nsub.3, 0
  br i1 %niter5655.ncmp.3, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x.us", %"for filter_zeroed.s0.y.us"
  %filter_zeroed.s0.x.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y.us" ], [ %289, %"for filter_zeroed.s0.x.us" ]
  br i1 %lcmp.mod5653.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil"

"for filter_zeroed.s0.x.us.epil":                 ; preds = %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x.us.epil"
  %filter_zeroed.s0.x.us.epil = phi i32 [ %308, %"for filter_zeroed.s0.x.us.epil" ], [ %filter_zeroed.s0.x.us.unr, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %epil.iter5652 = phi i32 [ %epil.iter5652.sub, %"for filter_zeroed.s0.x.us.epil" ], [ %xtraiter5651, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %290 = mul nsw i32 %filter_zeroed.s0.x.us.epil, %5
  %291 = add nsw i32 %212, %290
  %292 = getelementptr inbounds i8, i8* %1, i32 %291
  %293 = bitcast i8* %292 to <64 x i8>*
  %294 = load <64 x i8>, <64 x i8>* %293, align 1, !tbaa !102
  %295 = zext <64 x i8> %294 to <64 x i16>
  %296 = sub nsw <64 x i16> %295, %93
  %297 = add nsw i32 %filter_zeroed.s0.x.us.epil, %213
  %298 = shl nsw i32 %297, 7
  %299 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %298
  %300 = bitcast i16* %299 to <64 x i16>*
  store <64 x i16> %296, <64 x i16>* %300, align 128, !tbaa !105
  %301 = getelementptr inbounds i8, i8* %292, i32 64
  %302 = bitcast i8* %301 to <64 x i8>*
  %303 = load <64 x i8>, <64 x i8>* %302, align 1, !tbaa !102
  %304 = zext <64 x i8> %303 to <64 x i16>
  %305 = sub nsw <64 x i16> %304, %93
  %306 = getelementptr inbounds i16, i16* %299, i32 64
  %307 = bitcast i16* %306 to <64 x i16>*
  store <64 x i16> %305, <64 x i16>* %307, align 128, !tbaa !105
  %308 = add nuw nsw i32 %filter_zeroed.s0.x.us.epil, 1
  %epil.iter5652.sub = add i32 %epil.iter5652, -1
  %epil.iter5652.cmp.not = icmp eq i32 %epil.iter5652.sub, 0
  br i1 %epil.iter5652.cmp.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil", !llvm.loop !107

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us.epil", %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa"
  %309 = add nuw nsw i32 %filter_zeroed.s0.y.us, 1
  %.not671.us = icmp eq i32 %309, %6
  br i1 %.not671.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us", %"for filter_zeroed.s0.y.preheader"
  br label %"for sum_filter.s1.r19$y"

"for sum_filter.s1.r19$y":                        ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x"
  %convolved616.sroa.84.0 = phi <32 x i32> [ %convolved616.sroa.84.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved616.sroa.56.0 = phi <32 x i32> [ %convolved616.sroa.56.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved616.sroa.28.0 = phi <32 x i32> [ %convolved616.sroa.28.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved616.sroa.0.0 = phi <32 x i32> [ %convolved616.sroa.0.2, %"end for sum_filter.s1.r19$x" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %"sum_filter.s1.r19$y" = phi i32 [ %411, %"end for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  br i1 %84, label %"for sum_filter.s1.r19$x.preheader", label %"end for sum_filter.s1.r19$x", !prof !101

"for sum_filter.s1.r19$x.preheader":              ; preds = %"for sum_filter.s1.r19$y"
  %310 = mul nsw i32 %"sum_filter.s1.r19$y", %4
  br i1 %200, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"for sum_filter.s1.r19$x":                        ; preds = %"for sum_filter.s1.r19$x.preheader", %"for sum_filter.s1.r19$x"
  %convolved616.sroa.84.1 = phi <32 x i32> [ %389, %"for sum_filter.s1.r19$x" ], [ %convolved616.sroa.84.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved616.sroa.56.1 = phi <32 x i32> [ %388, %"for sum_filter.s1.r19$x" ], [ %convolved616.sroa.56.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved616.sroa.28.1 = phi <32 x i32> [ %387, %"for sum_filter.s1.r19$x" ], [ %convolved616.sroa.28.0, %"for sum_filter.s1.r19$x.preheader" ]
  %convolved616.sroa.0.1 = phi <32 x i32> [ %386, %"for sum_filter.s1.r19$x" ], [ %convolved616.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ]
  %"sum_filter.s1.r19$x" = phi i32 [ %390, %"for sum_filter.s1.r19$x" ], [ 0, %"for sum_filter.s1.r19$x.preheader" ]
  %niter5664 = phi i32 [ %niter5664.nsub.3, %"for sum_filter.s1.r19$x" ], [ %unroll_iter5663, %"for sum_filter.s1.r19$x.preheader" ]
  %311 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.28.1, <32 x i32> %convolved616.sroa.0.1)
  %312 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.84.1, <32 x i32> %convolved616.sroa.56.1)
  %313 = shufflevector <64 x i32> %311, <64 x i32> %312, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %314 = add nsw i32 %"sum_filter.s1.r19$x", %310
  %315 = shl nsw i32 %314, 7
  %316 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %315
  %317 = bitcast i16* %316 to <32 x i32>*
  %318 = load <32 x i32>, <32 x i32>* %317, align 128, !tbaa !105
  %319 = getelementptr inbounds i16, i16* %316, i32 64
  %320 = bitcast i16* %319 to <32 x i32>*
  %321 = load <32 x i32>, <32 x i32>* %320, align 128, !tbaa !105
  %322 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %321, <32 x i32> %318)
  %323 = bitcast <64 x i32> %322 to <128 x i16>
  %324 = sext <128 x i16> %323 to <128 x i32>
  %325 = add nsw <128 x i32> %313, %324
  %326 = shufflevector <128 x i32> %325, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %327 = shufflevector <128 x i32> %325, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %328 = shufflevector <128 x i32> %325, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %329 = shufflevector <128 x i32> %325, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %330 = or i32 %"sum_filter.s1.r19$x", 1
  %331 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %327, <32 x i32> %326)
  %332 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %329, <32 x i32> %328)
  %333 = shufflevector <64 x i32> %331, <64 x i32> %332, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %334 = add nsw i32 %330, %310
  %335 = shl nsw i32 %334, 7
  %336 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %335
  %337 = bitcast i16* %336 to <32 x i32>*
  %338 = load <32 x i32>, <32 x i32>* %337, align 128, !tbaa !105
  %339 = getelementptr inbounds i16, i16* %336, i32 64
  %340 = bitcast i16* %339 to <32 x i32>*
  %341 = load <32 x i32>, <32 x i32>* %340, align 128, !tbaa !105
  %342 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %341, <32 x i32> %338)
  %343 = bitcast <64 x i32> %342 to <128 x i16>
  %344 = sext <128 x i16> %343 to <128 x i32>
  %345 = add nsw <128 x i32> %333, %344
  %346 = shufflevector <128 x i32> %345, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %347 = shufflevector <128 x i32> %345, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %348 = shufflevector <128 x i32> %345, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %349 = shufflevector <128 x i32> %345, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %350 = or i32 %"sum_filter.s1.r19$x", 2
  %351 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %347, <32 x i32> %346)
  %352 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %349, <32 x i32> %348)
  %353 = shufflevector <64 x i32> %351, <64 x i32> %352, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %354 = add nsw i32 %350, %310
  %355 = shl nsw i32 %354, 7
  %356 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %355
  %357 = bitcast i16* %356 to <32 x i32>*
  %358 = load <32 x i32>, <32 x i32>* %357, align 128, !tbaa !105
  %359 = getelementptr inbounds i16, i16* %356, i32 64
  %360 = bitcast i16* %359 to <32 x i32>*
  %361 = load <32 x i32>, <32 x i32>* %360, align 128, !tbaa !105
  %362 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %361, <32 x i32> %358)
  %363 = bitcast <64 x i32> %362 to <128 x i16>
  %364 = sext <128 x i16> %363 to <128 x i32>
  %365 = add nsw <128 x i32> %353, %364
  %366 = shufflevector <128 x i32> %365, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %367 = shufflevector <128 x i32> %365, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %368 = shufflevector <128 x i32> %365, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %369 = shufflevector <128 x i32> %365, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %370 = or i32 %"sum_filter.s1.r19$x", 3
  %371 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %367, <32 x i32> %366)
  %372 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %369, <32 x i32> %368)
  %373 = shufflevector <64 x i32> %371, <64 x i32> %372, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %374 = add nsw i32 %370, %310
  %375 = shl nsw i32 %374, 7
  %376 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %375
  %377 = bitcast i16* %376 to <32 x i32>*
  %378 = load <32 x i32>, <32 x i32>* %377, align 128, !tbaa !105
  %379 = getelementptr inbounds i16, i16* %376, i32 64
  %380 = bitcast i16* %379 to <32 x i32>*
  %381 = load <32 x i32>, <32 x i32>* %380, align 128, !tbaa !105
  %382 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %381, <32 x i32> %378)
  %383 = bitcast <64 x i32> %382 to <128 x i16>
  %384 = sext <128 x i16> %383 to <128 x i32>
  %385 = add nsw <128 x i32> %373, %384
  %386 = shufflevector <128 x i32> %385, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %387 = shufflevector <128 x i32> %385, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %388 = shufflevector <128 x i32> %385, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %389 = shufflevector <128 x i32> %385, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %390 = add nuw nsw i32 %"sum_filter.s1.r19$x", 4
  %niter5664.nsub.3 = add i32 %niter5664, -4
  %niter5664.ncmp.3 = icmp eq i32 %niter5664.nsub.3, 0
  br i1 %niter5664.ncmp.3, label %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", label %"for sum_filter.s1.r19$x"

"end for sum_filter.s1.r19$x.loopexit.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x", %"for sum_filter.s1.r19$x.preheader"
  %.lcssa5558.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %386, %"for sum_filter.s1.r19$x" ]
  %.lcssa5557.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %387, %"for sum_filter.s1.r19$x" ]
  %.lcssa5556.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %388, %"for sum_filter.s1.r19$x" ]
  %.lcssa.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$x.preheader" ], [ %389, %"for sum_filter.s1.r19$x" ]
  %convolved616.sroa.84.1.unr = phi <32 x i32> [ %convolved616.sroa.84.0, %"for sum_filter.s1.r19$x.preheader" ], [ %389, %"for sum_filter.s1.r19$x" ]
  %convolved616.sroa.56.1.unr = phi <32 x i32> [ %convolved616.sroa.56.0, %"for sum_filter.s1.r19$x.preheader" ], [ %388, %"for sum_filter.s1.r19$x" ]
  %convolved616.sroa.28.1.unr = phi <32 x i32> [ %convolved616.sroa.28.0, %"for sum_filter.s1.r19$x.preheader" ], [ %387, %"for sum_filter.s1.r19$x" ]
  %convolved616.sroa.0.1.unr = phi <32 x i32> [ %convolved616.sroa.0.0, %"for sum_filter.s1.r19$x.preheader" ], [ %386, %"for sum_filter.s1.r19$x" ]
  %"sum_filter.s1.r19$x.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$x.preheader" ], [ %390, %"for sum_filter.s1.r19$x" ]
  br i1 %lcmp.mod5658.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil"

"for sum_filter.s1.r19$x.epil":                   ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil"
  %convolved616.sroa.84.1.epil = phi <32 x i32> [ %409, %"for sum_filter.s1.r19$x.epil" ], [ %convolved616.sroa.84.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved616.sroa.56.1.epil = phi <32 x i32> [ %408, %"for sum_filter.s1.r19$x.epil" ], [ %convolved616.sroa.56.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved616.sroa.28.1.epil = phi <32 x i32> [ %407, %"for sum_filter.s1.r19$x.epil" ], [ %convolved616.sroa.28.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %convolved616.sroa.0.1.epil = phi <32 x i32> [ %406, %"for sum_filter.s1.r19$x.epil" ], [ %convolved616.sroa.0.1.unr, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %"sum_filter.s1.r19$x.epil" = phi i32 [ %410, %"for sum_filter.s1.r19$x.epil" ], [ %"sum_filter.s1.r19$x.unr", %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %epil.iter5657 = phi i32 [ %epil.iter5657.sub, %"for sum_filter.s1.r19$x.epil" ], [ %xtraiter5656, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ]
  %391 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.28.1.epil, <32 x i32> %convolved616.sroa.0.1.epil)
  %392 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.84.1.epil, <32 x i32> %convolved616.sroa.56.1.epil)
  %393 = shufflevector <64 x i32> %391, <64 x i32> %392, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %394 = add nsw i32 %"sum_filter.s1.r19$x.epil", %310
  %395 = shl nsw i32 %394, 7
  %396 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %395
  %397 = bitcast i16* %396 to <32 x i32>*
  %398 = load <32 x i32>, <32 x i32>* %397, align 128, !tbaa !105
  %399 = getelementptr inbounds i16, i16* %396, i32 64
  %400 = bitcast i16* %399 to <32 x i32>*
  %401 = load <32 x i32>, <32 x i32>* %400, align 128, !tbaa !105
  %402 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %401, <32 x i32> %398)
  %403 = bitcast <64 x i32> %402 to <128 x i16>
  %404 = sext <128 x i16> %403 to <128 x i32>
  %405 = add nsw <128 x i32> %393, %404
  %406 = shufflevector <128 x i32> %405, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %407 = shufflevector <128 x i32> %405, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %408 = shufflevector <128 x i32> %405, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %409 = shufflevector <128 x i32> %405, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %410 = add nuw nsw i32 %"sum_filter.s1.r19$x.epil", 1
  %epil.iter5657.sub = add i32 %epil.iter5657, -1
  %epil.iter5657.cmp.not = icmp eq i32 %epil.iter5657.sub, 0
  br i1 %epil.iter5657.cmp.not, label %"end for sum_filter.s1.r19$x", label %"for sum_filter.s1.r19$x.epil", !llvm.loop !108

"end for sum_filter.s1.r19$x":                    ; preds = %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa", %"for sum_filter.s1.r19$x.epil", %"for sum_filter.s1.r19$y"
  %convolved616.sroa.84.2 = phi <32 x i32> [ %convolved616.sroa.84.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %409, %"for sum_filter.s1.r19$x.epil" ]
  %convolved616.sroa.56.2 = phi <32 x i32> [ %convolved616.sroa.56.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5556.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %408, %"for sum_filter.s1.r19$x.epil" ]
  %convolved616.sroa.28.2 = phi <32 x i32> [ %convolved616.sroa.28.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5557.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %407, %"for sum_filter.s1.r19$x.epil" ]
  %convolved616.sroa.0.2 = phi <32 x i32> [ %convolved616.sroa.0.0, %"for sum_filter.s1.r19$y" ], [ %.lcssa5558.ph, %"end for sum_filter.s1.r19$x.loopexit.unr-lcssa" ], [ %406, %"for sum_filter.s1.r19$x.epil" ]
  %411 = add nuw nsw i32 %"sum_filter.s1.r19$y", 1
  %.not669 = icmp eq i32 %411, %6
  br i1 %.not669, label %"consume sum_filter", label %"for sum_filter.s1.r19$y"

"consume sum_filter":                             ; preds = %"end for sum_filter.s1.r19$x", %"produce filter_zeroed"
  %convolved616.sroa.84.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved616.sroa.84.2, %"end for sum_filter.s1.r19$x" ]
  %convolved616.sroa.56.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved616.sroa.56.2, %"end for sum_filter.s1.r19$x" ]
  %convolved616.sroa.28.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved616.sroa.28.2, %"end for sum_filter.s1.r19$x" ]
  %convolved616.sroa.0.3 = phi <32 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ %convolved616.sroa.0.2, %"end for sum_filter.s1.r19$x" ]
  %412 = getelementptr inbounds i32, i32* %94, i32 %output.s0.c.c.base
  %413 = bitcast i32* %412 to <32 x i32>*
  %414 = load <32 x i32>, <32 x i32>* %413, align 4, !tbaa !109
  %415 = getelementptr inbounds i32, i32* %412, i32 32
  %416 = bitcast i32* %415 to <32 x i32>*
  %417 = load <32 x i32>, <32 x i32>* %416, align 4, !tbaa !109
  %418 = getelementptr inbounds i32, i32* %412, i32 64
  %419 = bitcast i32* %418 to <32 x i32>*
  %420 = load <32 x i32>, <32 x i32>* %419, align 4, !tbaa !109
  %421 = getelementptr inbounds i32, i32* %412, i32 96
  %422 = bitcast i32* %421 to <32 x i32>*
  %423 = load <32 x i32>, <32 x i32>* %422, align 4, !tbaa !109
  %424 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %417, <32 x i32> %414)
  %425 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %423, <32 x i32> %420)
  %ab1.i = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %convolved616.sroa.0.3, <32 x i32> %97) #11
  %ab.i = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i, <32 x i32> %convolved616.sroa.0.3, <32 x i32> %97) #11
  %ab1.i743 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %convolved616.sroa.28.3, <32 x i32> %97) #11
  %ab.i744 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i743, <32 x i32> %convolved616.sroa.28.3, <32 x i32> %97) #11
  %ab1.i745 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %convolved616.sroa.56.3, <32 x i32> %97) #11
  %ab.i746 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i745, <32 x i32> %convolved616.sroa.56.3, <32 x i32> %97) #11
  %ab1.i747 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %convolved616.sroa.84.3, <32 x i32> %97) #11
  %ab.i748 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i747, <32 x i32> %convolved616.sroa.84.3, <32 x i32> %97) #11
  %426 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i744, <32 x i32> %ab.i)
  %427 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i748, <32 x i32> %ab.i746)
  %428 = sub nsw <64 x i32> %424, %426
  %429 = sub nsw <64 x i32> %425, %427
  %430 = shufflevector <64 x i32> %429, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %431 = shufflevector <64 x i32> %428, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <32 x i32> %431, <32 x i32>* %98, align 128, !tbaa !111
  %432 = shufflevector <64 x i32> %428, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  store <32 x i32> %432, <32 x i32>* %100, align 128, !tbaa !119
  %433 = shufflevector <64 x i32> %429, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <32 x i32> %433, <32 x i32>* %102, align 128, !tbaa !121
  %434 = shufflevector <128 x i32> %430, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  store <32 x i32> %434, <32 x i32>* %104, align 128, !tbaa !124
  br i1 %119, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !101

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %435 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base, i32 0
  %436 = shufflevector <128 x i32> %435, <128 x i32> undef, <128 x i32> zeroinitializer
  %437 = add nsw <128 x i32> %436, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit664 = ashr <128 x i32> %437, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %438 = sub nsw <128 x i32> %437, %.lobit664
  %439 = and <128 x i32> %.lobit664, %139
  %440 = sub i32 %output.s0.c.c.base, %t2195
  %441 = sub i32 %output.s0.c.c.base, %reass.add5219
  %442 = bitcast i16* %filter_zeroed to <32 x i32>*
  %443 = getelementptr inbounds i16, i16* %filter_zeroed, i32 64
  %444 = bitcast i16* %443 to <32 x i32>*
  %445 = getelementptr inbounds i16, i16* %filter_zeroed, i32 128
  %446 = bitcast i16* %445 to <32 x i32>*
  %447 = getelementptr inbounds i16, i16* %filter_zeroed, i32 192
  %448 = bitcast i16* %447 to <32 x i32>*
  %449 = getelementptr inbounds i16, i16* %filter_zeroed, i32 256
  %450 = bitcast i16* %449 to <32 x i32>*
  %451 = getelementptr inbounds i16, i16* %filter_zeroed, i32 320
  %452 = bitcast i16* %451 to <32 x i32>*
  %453 = getelementptr inbounds i16, i16* %filter_zeroed, i32 384
  %454 = bitcast i16* %453 to <32 x i32>*
  %455 = getelementptr inbounds i16, i16* %filter_zeroed, i32 448
  %456 = bitcast i16* %455 to <32 x i32>*
  %457 = getelementptr inbounds i16, i16* %filter_zeroed, i32 512
  %458 = bitcast i16* %457 to <32 x i32>*
  %459 = getelementptr inbounds i16, i16* %filter_zeroed, i32 576
  %460 = bitcast i16* %459 to <32 x i32>*
  %461 = getelementptr inbounds i16, i16* %filter_zeroed, i32 640
  %462 = bitcast i16* %461 to <32 x i32>*
  %463 = getelementptr inbounds i16, i16* %filter_zeroed, i32 704
  %464 = bitcast i16* %463 to <32 x i32>*
  %465 = getelementptr inbounds i16, i16* %filter_zeroed, i32 768
  %466 = bitcast i16* %465 to <32 x i32>*
  %467 = getelementptr inbounds i16, i16* %filter_zeroed, i32 832
  %468 = bitcast i16* %467 to <32 x i32>*
  %469 = getelementptr inbounds i16, i16* %filter_zeroed, i32 896
  %470 = bitcast i16* %469 to <32 x i32>*
  %471 = getelementptr inbounds i16, i16* %filter_zeroed, i32 960
  %472 = bitcast i16* %471 to <32 x i32>*
  %473 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1024
  %474 = bitcast i16* %473 to <32 x i32>*
  %475 = getelementptr inbounds i16, i16* %filter_zeroed, i32 1088
  %476 = bitcast i16* %475 to <32 x i32>*
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %output.s0.b.rebased = phi i32 [ %1079, %"end for output.s0.y.yo" ], [ 0, %"for output.s0.b.rebased.preheader" ]
  %477 = load i32, i32* %.fca.1.gep579, align 4, !tbaa !95
  %cmp.i750 = icmp ult i32 %477, %125
  %478 = load i8*, i8** %.fca.0.gep578, align 4, !tbaa !97
  br i1 %cmp.i750, label %if.then.i753, label %pseudostack_alloc.exit766, !prof !99

if.then.i753:                                     ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i752 = icmp ne i8* %478, null
  %479 = load i32, i32* %.fca.2.gep580, align 4
  %cmp2.i755 = icmp ugt i32 %479, 16384
  %or.cond5136 = and i1 %tobool1.not.i752, %cmp2.i755
  br i1 %or.cond5136, label %if.then3.i757, label %if.end.i761

if.then3.i757:                                    ; preds = %if.then.i753
  call void @halide_free(i8* null, i8* nonnull %478) #14
  %.pre5429 = load i32, i32* %.fca.2.gep580, align 4, !tbaa !98
  br label %if.end.i761

if.end.i761:                                      ; preds = %if.then3.i757, %if.then.i753
  %480 = phi i32 [ %.pre5429, %if.then3.i757 ], [ %479, %if.then.i753 ]
  %add.i759 = add i32 %480, %125
  store i32 %add.i759, i32* %.fca.2.gep580, align 4, !tbaa !98
  %cmp7.i760 = icmp ugt i32 %add.i759, 16384
  br i1 %cmp7.i760, label %if.then8.i763, label %if.end11.i765

if.then8.i763:                                    ; preds = %if.end.i761
  %call.i762 = call i8* @halide_malloc(i8* null, i32 %125) #14
  br label %if.end11.i765

if.end11.i765:                                    ; preds = %if.then8.i763, %if.end.i761
  %storemerge.i764 = phi i8* [ %call.i762, %if.then8.i763 ], [ null, %if.end.i761 ]
  store i8* %storemerge.i764, i8** %.fca.0.gep578, align 4, !tbaa !97
  store i32 %125, i32* %.fca.1.gep579, align 4, !tbaa !95
  br label %pseudostack_alloc.exit766

pseudostack_alloc.exit766:                        ; preds = %"for output.s0.b.rebased", %if.end11.i765
  %481 = phi i8* [ %storemerge.i764, %if.end11.i765 ], [ %478, %"for output.s0.b.rebased" ]
  %.not656 = icmp eq i8* %481, null
  br i1 %.not656, label %then_bb5, label %"produce resampled_input", !prof !100

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.1, %"consume sum_filter" ], [ %197, %"end for output.s0.y.yo" ]
  %482 = add nuw nsw i32 %output.s0.c.co, 1
  %.not655 = icmp eq i32 %482, %83
  br i1 %.not655, label %after_bb, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit766
  %483 = alloca i8*, i32 %125, align 128
  %484 = bitcast i8** %483 to i8*
  store i8** %483, i8*** %126, align 4
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit766, %then_bb5
  %resampled_input = phi i8* [ %484, %then_bb5 ], [ %481, %pseudostack_alloc.exit766 ]
  %485 = add nsw i32 %output.s0.b.rebased, %14
  br i1 %t2194, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %486 = mul nsw i32 %485, %16
  %t2239 = add nsw i32 %440, %486
  br i1 %202, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us", !prof !126

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %resampled_input.s0.y.rebased.us = phi i32 [ %503, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %487 = add nsw i32 %128, %resampled_input.s0.y.rebased.us
  %488 = mul nsw i32 %487, %129
  %t2243.us = add nsw i32 %130, %488
  %489 = add nsw i32 %resampled_input.s0.y.rebased.us, %a14
  %490 = mul nsw i32 %489, %13
  %491 = add nsw i32 %t2239, %490
  br label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %resampled_input.s0.x.rebased.us = phi i32 [ %502, %"for resampled_input.s0.x.rebased.us" ], [ 0, %"for resampled_input.s0.y.rebased.us" ]
  %492 = add nsw i32 %resampled_input.s0.x.rebased.us, %a13
  %493 = mul nsw i32 %492, %11
  %494 = add nsw i32 %491, %493
  %495 = getelementptr inbounds i8, i8* %8, i32 %494
  %496 = bitcast i8* %495 to <128 x i8>*
  %497 = load <128 x i8>, <128 x i8>* %496, align 1, !tbaa !127
  %498 = add nsw i32 %t2243.us, %resampled_input.s0.x.rebased.us
  %499 = shl nsw i32 %498, 7
  %500 = getelementptr inbounds i8, i8* %resampled_input, i32 %499
  %501 = bitcast i8* %500 to <128 x i8>*
  store <128 x i8> %497, <128 x i8>* %501, align 128, !tbaa !129
  %502 = add nuw nsw i32 %resampled_input.s0.x.rebased.us, 1
  %.not668.us = icmp eq i32 %resampled_input.s0.x.rebased.us, %t2228
  br i1 %.not668.us, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us"
  %503 = add nuw nsw i32 %resampled_input.s0.y.rebased.us, 1
  %.not667.us = icmp eq i32 %resampled_input.s0.y.rebased.us, %t2227
  br i1 %.not667.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  br i1 %127, label %"for resampled_input.s0.y.rebased9.preheader", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader":    ; preds = %next_bb8
  %504 = mul nsw i32 %485, %16
  %505 = sub i32 %504, %t2195
  br i1 %131, label %"for resampled_input.s0.y.rebased9.preheader.split.us", label %"consume resampled_input", !prof !101

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased9.preheader"
  %506 = sdiv <128 x i32> %438, %135
  %507 = add nsw <128 x i32> %506, %439
  %508 = and <128 x i32> %507, %140
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %resampled_input.s0.y.rebased11.us = phi i32 [ %1036, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %509 = add nsw i32 %128, %resampled_input.s0.y.rebased11.us
  %510 = mul nsw i32 %509, %129
  %t2248.us = add nsw i32 %130, %510
  %511 = add nsw i32 %resampled_input.s0.y.rebased11.us, %a14
  %512 = mul nsw i32 %511, %13
  %t2247.us = add nsw i32 %505, %512
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %resampled_input.s0.x.rebased14.us = phi i32 [ %1035, %"for resampled_input.s0.x.rebased12.us" ], [ 0, %"for resampled_input.s0.y.rebased9.us" ]
  %513 = add nsw i32 %resampled_input.s0.x.rebased14.us, %a13
  %514 = mul nsw i32 %513, %11
  %515 = add nsw i32 %t2247.us, %514
  %516 = insertelement <128 x i32> undef, i32 %515, i32 0
  %517 = shufflevector <128 x i32> %516, <128 x i32> undef, <128 x i32> zeroinitializer
  %518 = add nsw <128 x i32> %517, %508
  %519 = extractelement <128 x i32> %518, i32 0
  %520 = getelementptr inbounds i8, i8* %8, i32 %519
  %521 = load i8, i8* %520, align 1, !tbaa !127
  %522 = insertelement <128 x i8> undef, i8 %521, i32 0
  %523 = extractelement <128 x i32> %518, i32 1
  %524 = getelementptr inbounds i8, i8* %8, i32 %523
  %525 = load i8, i8* %524, align 1, !tbaa !127
  %526 = insertelement <128 x i8> %522, i8 %525, i32 1
  %527 = extractelement <128 x i32> %518, i32 2
  %528 = getelementptr inbounds i8, i8* %8, i32 %527
  %529 = load i8, i8* %528, align 1, !tbaa !127
  %530 = insertelement <128 x i8> %526, i8 %529, i32 2
  %531 = extractelement <128 x i32> %518, i32 3
  %532 = getelementptr inbounds i8, i8* %8, i32 %531
  %533 = load i8, i8* %532, align 1, !tbaa !127
  %534 = insertelement <128 x i8> %530, i8 %533, i32 3
  %535 = extractelement <128 x i32> %518, i32 4
  %536 = getelementptr inbounds i8, i8* %8, i32 %535
  %537 = load i8, i8* %536, align 1, !tbaa !127
  %538 = insertelement <128 x i8> %534, i8 %537, i32 4
  %539 = extractelement <128 x i32> %518, i32 5
  %540 = getelementptr inbounds i8, i8* %8, i32 %539
  %541 = load i8, i8* %540, align 1, !tbaa !127
  %542 = insertelement <128 x i8> %538, i8 %541, i32 5
  %543 = extractelement <128 x i32> %518, i32 6
  %544 = getelementptr inbounds i8, i8* %8, i32 %543
  %545 = load i8, i8* %544, align 1, !tbaa !127
  %546 = insertelement <128 x i8> %542, i8 %545, i32 6
  %547 = extractelement <128 x i32> %518, i32 7
  %548 = getelementptr inbounds i8, i8* %8, i32 %547
  %549 = load i8, i8* %548, align 1, !tbaa !127
  %550 = insertelement <128 x i8> %546, i8 %549, i32 7
  %551 = extractelement <128 x i32> %518, i32 8
  %552 = getelementptr inbounds i8, i8* %8, i32 %551
  %553 = load i8, i8* %552, align 1, !tbaa !127
  %554 = insertelement <128 x i8> %550, i8 %553, i32 8
  %555 = extractelement <128 x i32> %518, i32 9
  %556 = getelementptr inbounds i8, i8* %8, i32 %555
  %557 = load i8, i8* %556, align 1, !tbaa !127
  %558 = insertelement <128 x i8> %554, i8 %557, i32 9
  %559 = extractelement <128 x i32> %518, i32 10
  %560 = getelementptr inbounds i8, i8* %8, i32 %559
  %561 = load i8, i8* %560, align 1, !tbaa !127
  %562 = insertelement <128 x i8> %558, i8 %561, i32 10
  %563 = extractelement <128 x i32> %518, i32 11
  %564 = getelementptr inbounds i8, i8* %8, i32 %563
  %565 = load i8, i8* %564, align 1, !tbaa !127
  %566 = insertelement <128 x i8> %562, i8 %565, i32 11
  %567 = extractelement <128 x i32> %518, i32 12
  %568 = getelementptr inbounds i8, i8* %8, i32 %567
  %569 = load i8, i8* %568, align 1, !tbaa !127
  %570 = insertelement <128 x i8> %566, i8 %569, i32 12
  %571 = extractelement <128 x i32> %518, i32 13
  %572 = getelementptr inbounds i8, i8* %8, i32 %571
  %573 = load i8, i8* %572, align 1, !tbaa !127
  %574 = insertelement <128 x i8> %570, i8 %573, i32 13
  %575 = extractelement <128 x i32> %518, i32 14
  %576 = getelementptr inbounds i8, i8* %8, i32 %575
  %577 = load i8, i8* %576, align 1, !tbaa !127
  %578 = insertelement <128 x i8> %574, i8 %577, i32 14
  %579 = extractelement <128 x i32> %518, i32 15
  %580 = getelementptr inbounds i8, i8* %8, i32 %579
  %581 = load i8, i8* %580, align 1, !tbaa !127
  %582 = insertelement <128 x i8> %578, i8 %581, i32 15
  %583 = extractelement <128 x i32> %518, i32 16
  %584 = getelementptr inbounds i8, i8* %8, i32 %583
  %585 = load i8, i8* %584, align 1, !tbaa !127
  %586 = insertelement <128 x i8> %582, i8 %585, i32 16
  %587 = extractelement <128 x i32> %518, i32 17
  %588 = getelementptr inbounds i8, i8* %8, i32 %587
  %589 = load i8, i8* %588, align 1, !tbaa !127
  %590 = insertelement <128 x i8> %586, i8 %589, i32 17
  %591 = extractelement <128 x i32> %518, i32 18
  %592 = getelementptr inbounds i8, i8* %8, i32 %591
  %593 = load i8, i8* %592, align 1, !tbaa !127
  %594 = insertelement <128 x i8> %590, i8 %593, i32 18
  %595 = extractelement <128 x i32> %518, i32 19
  %596 = getelementptr inbounds i8, i8* %8, i32 %595
  %597 = load i8, i8* %596, align 1, !tbaa !127
  %598 = insertelement <128 x i8> %594, i8 %597, i32 19
  %599 = extractelement <128 x i32> %518, i32 20
  %600 = getelementptr inbounds i8, i8* %8, i32 %599
  %601 = load i8, i8* %600, align 1, !tbaa !127
  %602 = insertelement <128 x i8> %598, i8 %601, i32 20
  %603 = extractelement <128 x i32> %518, i32 21
  %604 = getelementptr inbounds i8, i8* %8, i32 %603
  %605 = load i8, i8* %604, align 1, !tbaa !127
  %606 = insertelement <128 x i8> %602, i8 %605, i32 21
  %607 = extractelement <128 x i32> %518, i32 22
  %608 = getelementptr inbounds i8, i8* %8, i32 %607
  %609 = load i8, i8* %608, align 1, !tbaa !127
  %610 = insertelement <128 x i8> %606, i8 %609, i32 22
  %611 = extractelement <128 x i32> %518, i32 23
  %612 = getelementptr inbounds i8, i8* %8, i32 %611
  %613 = load i8, i8* %612, align 1, !tbaa !127
  %614 = insertelement <128 x i8> %610, i8 %613, i32 23
  %615 = extractelement <128 x i32> %518, i32 24
  %616 = getelementptr inbounds i8, i8* %8, i32 %615
  %617 = load i8, i8* %616, align 1, !tbaa !127
  %618 = insertelement <128 x i8> %614, i8 %617, i32 24
  %619 = extractelement <128 x i32> %518, i32 25
  %620 = getelementptr inbounds i8, i8* %8, i32 %619
  %621 = load i8, i8* %620, align 1, !tbaa !127
  %622 = insertelement <128 x i8> %618, i8 %621, i32 25
  %623 = extractelement <128 x i32> %518, i32 26
  %624 = getelementptr inbounds i8, i8* %8, i32 %623
  %625 = load i8, i8* %624, align 1, !tbaa !127
  %626 = insertelement <128 x i8> %622, i8 %625, i32 26
  %627 = extractelement <128 x i32> %518, i32 27
  %628 = getelementptr inbounds i8, i8* %8, i32 %627
  %629 = load i8, i8* %628, align 1, !tbaa !127
  %630 = insertelement <128 x i8> %626, i8 %629, i32 27
  %631 = extractelement <128 x i32> %518, i32 28
  %632 = getelementptr inbounds i8, i8* %8, i32 %631
  %633 = load i8, i8* %632, align 1, !tbaa !127
  %634 = insertelement <128 x i8> %630, i8 %633, i32 28
  %635 = extractelement <128 x i32> %518, i32 29
  %636 = getelementptr inbounds i8, i8* %8, i32 %635
  %637 = load i8, i8* %636, align 1, !tbaa !127
  %638 = insertelement <128 x i8> %634, i8 %637, i32 29
  %639 = extractelement <128 x i32> %518, i32 30
  %640 = getelementptr inbounds i8, i8* %8, i32 %639
  %641 = load i8, i8* %640, align 1, !tbaa !127
  %642 = insertelement <128 x i8> %638, i8 %641, i32 30
  %643 = extractelement <128 x i32> %518, i32 31
  %644 = getelementptr inbounds i8, i8* %8, i32 %643
  %645 = load i8, i8* %644, align 1, !tbaa !127
  %646 = insertelement <128 x i8> %642, i8 %645, i32 31
  %647 = extractelement <128 x i32> %518, i32 32
  %648 = getelementptr inbounds i8, i8* %8, i32 %647
  %649 = load i8, i8* %648, align 1, !tbaa !127
  %650 = insertelement <128 x i8> %646, i8 %649, i32 32
  %651 = extractelement <128 x i32> %518, i32 33
  %652 = getelementptr inbounds i8, i8* %8, i32 %651
  %653 = load i8, i8* %652, align 1, !tbaa !127
  %654 = insertelement <128 x i8> %650, i8 %653, i32 33
  %655 = extractelement <128 x i32> %518, i32 34
  %656 = getelementptr inbounds i8, i8* %8, i32 %655
  %657 = load i8, i8* %656, align 1, !tbaa !127
  %658 = insertelement <128 x i8> %654, i8 %657, i32 34
  %659 = extractelement <128 x i32> %518, i32 35
  %660 = getelementptr inbounds i8, i8* %8, i32 %659
  %661 = load i8, i8* %660, align 1, !tbaa !127
  %662 = insertelement <128 x i8> %658, i8 %661, i32 35
  %663 = extractelement <128 x i32> %518, i32 36
  %664 = getelementptr inbounds i8, i8* %8, i32 %663
  %665 = load i8, i8* %664, align 1, !tbaa !127
  %666 = insertelement <128 x i8> %662, i8 %665, i32 36
  %667 = extractelement <128 x i32> %518, i32 37
  %668 = getelementptr inbounds i8, i8* %8, i32 %667
  %669 = load i8, i8* %668, align 1, !tbaa !127
  %670 = insertelement <128 x i8> %666, i8 %669, i32 37
  %671 = extractelement <128 x i32> %518, i32 38
  %672 = getelementptr inbounds i8, i8* %8, i32 %671
  %673 = load i8, i8* %672, align 1, !tbaa !127
  %674 = insertelement <128 x i8> %670, i8 %673, i32 38
  %675 = extractelement <128 x i32> %518, i32 39
  %676 = getelementptr inbounds i8, i8* %8, i32 %675
  %677 = load i8, i8* %676, align 1, !tbaa !127
  %678 = insertelement <128 x i8> %674, i8 %677, i32 39
  %679 = extractelement <128 x i32> %518, i32 40
  %680 = getelementptr inbounds i8, i8* %8, i32 %679
  %681 = load i8, i8* %680, align 1, !tbaa !127
  %682 = insertelement <128 x i8> %678, i8 %681, i32 40
  %683 = extractelement <128 x i32> %518, i32 41
  %684 = getelementptr inbounds i8, i8* %8, i32 %683
  %685 = load i8, i8* %684, align 1, !tbaa !127
  %686 = insertelement <128 x i8> %682, i8 %685, i32 41
  %687 = extractelement <128 x i32> %518, i32 42
  %688 = getelementptr inbounds i8, i8* %8, i32 %687
  %689 = load i8, i8* %688, align 1, !tbaa !127
  %690 = insertelement <128 x i8> %686, i8 %689, i32 42
  %691 = extractelement <128 x i32> %518, i32 43
  %692 = getelementptr inbounds i8, i8* %8, i32 %691
  %693 = load i8, i8* %692, align 1, !tbaa !127
  %694 = insertelement <128 x i8> %690, i8 %693, i32 43
  %695 = extractelement <128 x i32> %518, i32 44
  %696 = getelementptr inbounds i8, i8* %8, i32 %695
  %697 = load i8, i8* %696, align 1, !tbaa !127
  %698 = insertelement <128 x i8> %694, i8 %697, i32 44
  %699 = extractelement <128 x i32> %518, i32 45
  %700 = getelementptr inbounds i8, i8* %8, i32 %699
  %701 = load i8, i8* %700, align 1, !tbaa !127
  %702 = insertelement <128 x i8> %698, i8 %701, i32 45
  %703 = extractelement <128 x i32> %518, i32 46
  %704 = getelementptr inbounds i8, i8* %8, i32 %703
  %705 = load i8, i8* %704, align 1, !tbaa !127
  %706 = insertelement <128 x i8> %702, i8 %705, i32 46
  %707 = extractelement <128 x i32> %518, i32 47
  %708 = getelementptr inbounds i8, i8* %8, i32 %707
  %709 = load i8, i8* %708, align 1, !tbaa !127
  %710 = insertelement <128 x i8> %706, i8 %709, i32 47
  %711 = extractelement <128 x i32> %518, i32 48
  %712 = getelementptr inbounds i8, i8* %8, i32 %711
  %713 = load i8, i8* %712, align 1, !tbaa !127
  %714 = insertelement <128 x i8> %710, i8 %713, i32 48
  %715 = extractelement <128 x i32> %518, i32 49
  %716 = getelementptr inbounds i8, i8* %8, i32 %715
  %717 = load i8, i8* %716, align 1, !tbaa !127
  %718 = insertelement <128 x i8> %714, i8 %717, i32 49
  %719 = extractelement <128 x i32> %518, i32 50
  %720 = getelementptr inbounds i8, i8* %8, i32 %719
  %721 = load i8, i8* %720, align 1, !tbaa !127
  %722 = insertelement <128 x i8> %718, i8 %721, i32 50
  %723 = extractelement <128 x i32> %518, i32 51
  %724 = getelementptr inbounds i8, i8* %8, i32 %723
  %725 = load i8, i8* %724, align 1, !tbaa !127
  %726 = insertelement <128 x i8> %722, i8 %725, i32 51
  %727 = extractelement <128 x i32> %518, i32 52
  %728 = getelementptr inbounds i8, i8* %8, i32 %727
  %729 = load i8, i8* %728, align 1, !tbaa !127
  %730 = insertelement <128 x i8> %726, i8 %729, i32 52
  %731 = extractelement <128 x i32> %518, i32 53
  %732 = getelementptr inbounds i8, i8* %8, i32 %731
  %733 = load i8, i8* %732, align 1, !tbaa !127
  %734 = insertelement <128 x i8> %730, i8 %733, i32 53
  %735 = extractelement <128 x i32> %518, i32 54
  %736 = getelementptr inbounds i8, i8* %8, i32 %735
  %737 = load i8, i8* %736, align 1, !tbaa !127
  %738 = insertelement <128 x i8> %734, i8 %737, i32 54
  %739 = extractelement <128 x i32> %518, i32 55
  %740 = getelementptr inbounds i8, i8* %8, i32 %739
  %741 = load i8, i8* %740, align 1, !tbaa !127
  %742 = insertelement <128 x i8> %738, i8 %741, i32 55
  %743 = extractelement <128 x i32> %518, i32 56
  %744 = getelementptr inbounds i8, i8* %8, i32 %743
  %745 = load i8, i8* %744, align 1, !tbaa !127
  %746 = insertelement <128 x i8> %742, i8 %745, i32 56
  %747 = extractelement <128 x i32> %518, i32 57
  %748 = getelementptr inbounds i8, i8* %8, i32 %747
  %749 = load i8, i8* %748, align 1, !tbaa !127
  %750 = insertelement <128 x i8> %746, i8 %749, i32 57
  %751 = extractelement <128 x i32> %518, i32 58
  %752 = getelementptr inbounds i8, i8* %8, i32 %751
  %753 = load i8, i8* %752, align 1, !tbaa !127
  %754 = insertelement <128 x i8> %750, i8 %753, i32 58
  %755 = extractelement <128 x i32> %518, i32 59
  %756 = getelementptr inbounds i8, i8* %8, i32 %755
  %757 = load i8, i8* %756, align 1, !tbaa !127
  %758 = insertelement <128 x i8> %754, i8 %757, i32 59
  %759 = extractelement <128 x i32> %518, i32 60
  %760 = getelementptr inbounds i8, i8* %8, i32 %759
  %761 = load i8, i8* %760, align 1, !tbaa !127
  %762 = insertelement <128 x i8> %758, i8 %761, i32 60
  %763 = extractelement <128 x i32> %518, i32 61
  %764 = getelementptr inbounds i8, i8* %8, i32 %763
  %765 = load i8, i8* %764, align 1, !tbaa !127
  %766 = insertelement <128 x i8> %762, i8 %765, i32 61
  %767 = extractelement <128 x i32> %518, i32 62
  %768 = getelementptr inbounds i8, i8* %8, i32 %767
  %769 = load i8, i8* %768, align 1, !tbaa !127
  %770 = insertelement <128 x i8> %766, i8 %769, i32 62
  %771 = extractelement <128 x i32> %518, i32 63
  %772 = getelementptr inbounds i8, i8* %8, i32 %771
  %773 = load i8, i8* %772, align 1, !tbaa !127
  %774 = insertelement <128 x i8> %770, i8 %773, i32 63
  %775 = extractelement <128 x i32> %518, i32 64
  %776 = getelementptr inbounds i8, i8* %8, i32 %775
  %777 = load i8, i8* %776, align 1, !tbaa !127
  %778 = insertelement <128 x i8> %774, i8 %777, i32 64
  %779 = extractelement <128 x i32> %518, i32 65
  %780 = getelementptr inbounds i8, i8* %8, i32 %779
  %781 = load i8, i8* %780, align 1, !tbaa !127
  %782 = insertelement <128 x i8> %778, i8 %781, i32 65
  %783 = extractelement <128 x i32> %518, i32 66
  %784 = getelementptr inbounds i8, i8* %8, i32 %783
  %785 = load i8, i8* %784, align 1, !tbaa !127
  %786 = insertelement <128 x i8> %782, i8 %785, i32 66
  %787 = extractelement <128 x i32> %518, i32 67
  %788 = getelementptr inbounds i8, i8* %8, i32 %787
  %789 = load i8, i8* %788, align 1, !tbaa !127
  %790 = insertelement <128 x i8> %786, i8 %789, i32 67
  %791 = extractelement <128 x i32> %518, i32 68
  %792 = getelementptr inbounds i8, i8* %8, i32 %791
  %793 = load i8, i8* %792, align 1, !tbaa !127
  %794 = insertelement <128 x i8> %790, i8 %793, i32 68
  %795 = extractelement <128 x i32> %518, i32 69
  %796 = getelementptr inbounds i8, i8* %8, i32 %795
  %797 = load i8, i8* %796, align 1, !tbaa !127
  %798 = insertelement <128 x i8> %794, i8 %797, i32 69
  %799 = extractelement <128 x i32> %518, i32 70
  %800 = getelementptr inbounds i8, i8* %8, i32 %799
  %801 = load i8, i8* %800, align 1, !tbaa !127
  %802 = insertelement <128 x i8> %798, i8 %801, i32 70
  %803 = extractelement <128 x i32> %518, i32 71
  %804 = getelementptr inbounds i8, i8* %8, i32 %803
  %805 = load i8, i8* %804, align 1, !tbaa !127
  %806 = insertelement <128 x i8> %802, i8 %805, i32 71
  %807 = extractelement <128 x i32> %518, i32 72
  %808 = getelementptr inbounds i8, i8* %8, i32 %807
  %809 = load i8, i8* %808, align 1, !tbaa !127
  %810 = insertelement <128 x i8> %806, i8 %809, i32 72
  %811 = extractelement <128 x i32> %518, i32 73
  %812 = getelementptr inbounds i8, i8* %8, i32 %811
  %813 = load i8, i8* %812, align 1, !tbaa !127
  %814 = insertelement <128 x i8> %810, i8 %813, i32 73
  %815 = extractelement <128 x i32> %518, i32 74
  %816 = getelementptr inbounds i8, i8* %8, i32 %815
  %817 = load i8, i8* %816, align 1, !tbaa !127
  %818 = insertelement <128 x i8> %814, i8 %817, i32 74
  %819 = extractelement <128 x i32> %518, i32 75
  %820 = getelementptr inbounds i8, i8* %8, i32 %819
  %821 = load i8, i8* %820, align 1, !tbaa !127
  %822 = insertelement <128 x i8> %818, i8 %821, i32 75
  %823 = extractelement <128 x i32> %518, i32 76
  %824 = getelementptr inbounds i8, i8* %8, i32 %823
  %825 = load i8, i8* %824, align 1, !tbaa !127
  %826 = insertelement <128 x i8> %822, i8 %825, i32 76
  %827 = extractelement <128 x i32> %518, i32 77
  %828 = getelementptr inbounds i8, i8* %8, i32 %827
  %829 = load i8, i8* %828, align 1, !tbaa !127
  %830 = insertelement <128 x i8> %826, i8 %829, i32 77
  %831 = extractelement <128 x i32> %518, i32 78
  %832 = getelementptr inbounds i8, i8* %8, i32 %831
  %833 = load i8, i8* %832, align 1, !tbaa !127
  %834 = insertelement <128 x i8> %830, i8 %833, i32 78
  %835 = extractelement <128 x i32> %518, i32 79
  %836 = getelementptr inbounds i8, i8* %8, i32 %835
  %837 = load i8, i8* %836, align 1, !tbaa !127
  %838 = insertelement <128 x i8> %834, i8 %837, i32 79
  %839 = extractelement <128 x i32> %518, i32 80
  %840 = getelementptr inbounds i8, i8* %8, i32 %839
  %841 = load i8, i8* %840, align 1, !tbaa !127
  %842 = insertelement <128 x i8> %838, i8 %841, i32 80
  %843 = extractelement <128 x i32> %518, i32 81
  %844 = getelementptr inbounds i8, i8* %8, i32 %843
  %845 = load i8, i8* %844, align 1, !tbaa !127
  %846 = insertelement <128 x i8> %842, i8 %845, i32 81
  %847 = extractelement <128 x i32> %518, i32 82
  %848 = getelementptr inbounds i8, i8* %8, i32 %847
  %849 = load i8, i8* %848, align 1, !tbaa !127
  %850 = insertelement <128 x i8> %846, i8 %849, i32 82
  %851 = extractelement <128 x i32> %518, i32 83
  %852 = getelementptr inbounds i8, i8* %8, i32 %851
  %853 = load i8, i8* %852, align 1, !tbaa !127
  %854 = insertelement <128 x i8> %850, i8 %853, i32 83
  %855 = extractelement <128 x i32> %518, i32 84
  %856 = getelementptr inbounds i8, i8* %8, i32 %855
  %857 = load i8, i8* %856, align 1, !tbaa !127
  %858 = insertelement <128 x i8> %854, i8 %857, i32 84
  %859 = extractelement <128 x i32> %518, i32 85
  %860 = getelementptr inbounds i8, i8* %8, i32 %859
  %861 = load i8, i8* %860, align 1, !tbaa !127
  %862 = insertelement <128 x i8> %858, i8 %861, i32 85
  %863 = extractelement <128 x i32> %518, i32 86
  %864 = getelementptr inbounds i8, i8* %8, i32 %863
  %865 = load i8, i8* %864, align 1, !tbaa !127
  %866 = insertelement <128 x i8> %862, i8 %865, i32 86
  %867 = extractelement <128 x i32> %518, i32 87
  %868 = getelementptr inbounds i8, i8* %8, i32 %867
  %869 = load i8, i8* %868, align 1, !tbaa !127
  %870 = insertelement <128 x i8> %866, i8 %869, i32 87
  %871 = extractelement <128 x i32> %518, i32 88
  %872 = getelementptr inbounds i8, i8* %8, i32 %871
  %873 = load i8, i8* %872, align 1, !tbaa !127
  %874 = insertelement <128 x i8> %870, i8 %873, i32 88
  %875 = extractelement <128 x i32> %518, i32 89
  %876 = getelementptr inbounds i8, i8* %8, i32 %875
  %877 = load i8, i8* %876, align 1, !tbaa !127
  %878 = insertelement <128 x i8> %874, i8 %877, i32 89
  %879 = extractelement <128 x i32> %518, i32 90
  %880 = getelementptr inbounds i8, i8* %8, i32 %879
  %881 = load i8, i8* %880, align 1, !tbaa !127
  %882 = insertelement <128 x i8> %878, i8 %881, i32 90
  %883 = extractelement <128 x i32> %518, i32 91
  %884 = getelementptr inbounds i8, i8* %8, i32 %883
  %885 = load i8, i8* %884, align 1, !tbaa !127
  %886 = insertelement <128 x i8> %882, i8 %885, i32 91
  %887 = extractelement <128 x i32> %518, i32 92
  %888 = getelementptr inbounds i8, i8* %8, i32 %887
  %889 = load i8, i8* %888, align 1, !tbaa !127
  %890 = insertelement <128 x i8> %886, i8 %889, i32 92
  %891 = extractelement <128 x i32> %518, i32 93
  %892 = getelementptr inbounds i8, i8* %8, i32 %891
  %893 = load i8, i8* %892, align 1, !tbaa !127
  %894 = insertelement <128 x i8> %890, i8 %893, i32 93
  %895 = extractelement <128 x i32> %518, i32 94
  %896 = getelementptr inbounds i8, i8* %8, i32 %895
  %897 = load i8, i8* %896, align 1, !tbaa !127
  %898 = insertelement <128 x i8> %894, i8 %897, i32 94
  %899 = extractelement <128 x i32> %518, i32 95
  %900 = getelementptr inbounds i8, i8* %8, i32 %899
  %901 = load i8, i8* %900, align 1, !tbaa !127
  %902 = insertelement <128 x i8> %898, i8 %901, i32 95
  %903 = extractelement <128 x i32> %518, i32 96
  %904 = getelementptr inbounds i8, i8* %8, i32 %903
  %905 = load i8, i8* %904, align 1, !tbaa !127
  %906 = insertelement <128 x i8> %902, i8 %905, i32 96
  %907 = extractelement <128 x i32> %518, i32 97
  %908 = getelementptr inbounds i8, i8* %8, i32 %907
  %909 = load i8, i8* %908, align 1, !tbaa !127
  %910 = insertelement <128 x i8> %906, i8 %909, i32 97
  %911 = extractelement <128 x i32> %518, i32 98
  %912 = getelementptr inbounds i8, i8* %8, i32 %911
  %913 = load i8, i8* %912, align 1, !tbaa !127
  %914 = insertelement <128 x i8> %910, i8 %913, i32 98
  %915 = extractelement <128 x i32> %518, i32 99
  %916 = getelementptr inbounds i8, i8* %8, i32 %915
  %917 = load i8, i8* %916, align 1, !tbaa !127
  %918 = insertelement <128 x i8> %914, i8 %917, i32 99
  %919 = extractelement <128 x i32> %518, i32 100
  %920 = getelementptr inbounds i8, i8* %8, i32 %919
  %921 = load i8, i8* %920, align 1, !tbaa !127
  %922 = insertelement <128 x i8> %918, i8 %921, i32 100
  %923 = extractelement <128 x i32> %518, i32 101
  %924 = getelementptr inbounds i8, i8* %8, i32 %923
  %925 = load i8, i8* %924, align 1, !tbaa !127
  %926 = insertelement <128 x i8> %922, i8 %925, i32 101
  %927 = extractelement <128 x i32> %518, i32 102
  %928 = getelementptr inbounds i8, i8* %8, i32 %927
  %929 = load i8, i8* %928, align 1, !tbaa !127
  %930 = insertelement <128 x i8> %926, i8 %929, i32 102
  %931 = extractelement <128 x i32> %518, i32 103
  %932 = getelementptr inbounds i8, i8* %8, i32 %931
  %933 = load i8, i8* %932, align 1, !tbaa !127
  %934 = insertelement <128 x i8> %930, i8 %933, i32 103
  %935 = extractelement <128 x i32> %518, i32 104
  %936 = getelementptr inbounds i8, i8* %8, i32 %935
  %937 = load i8, i8* %936, align 1, !tbaa !127
  %938 = insertelement <128 x i8> %934, i8 %937, i32 104
  %939 = extractelement <128 x i32> %518, i32 105
  %940 = getelementptr inbounds i8, i8* %8, i32 %939
  %941 = load i8, i8* %940, align 1, !tbaa !127
  %942 = insertelement <128 x i8> %938, i8 %941, i32 105
  %943 = extractelement <128 x i32> %518, i32 106
  %944 = getelementptr inbounds i8, i8* %8, i32 %943
  %945 = load i8, i8* %944, align 1, !tbaa !127
  %946 = insertelement <128 x i8> %942, i8 %945, i32 106
  %947 = extractelement <128 x i32> %518, i32 107
  %948 = getelementptr inbounds i8, i8* %8, i32 %947
  %949 = load i8, i8* %948, align 1, !tbaa !127
  %950 = insertelement <128 x i8> %946, i8 %949, i32 107
  %951 = extractelement <128 x i32> %518, i32 108
  %952 = getelementptr inbounds i8, i8* %8, i32 %951
  %953 = load i8, i8* %952, align 1, !tbaa !127
  %954 = insertelement <128 x i8> %950, i8 %953, i32 108
  %955 = extractelement <128 x i32> %518, i32 109
  %956 = getelementptr inbounds i8, i8* %8, i32 %955
  %957 = load i8, i8* %956, align 1, !tbaa !127
  %958 = insertelement <128 x i8> %954, i8 %957, i32 109
  %959 = extractelement <128 x i32> %518, i32 110
  %960 = getelementptr inbounds i8, i8* %8, i32 %959
  %961 = load i8, i8* %960, align 1, !tbaa !127
  %962 = insertelement <128 x i8> %958, i8 %961, i32 110
  %963 = extractelement <128 x i32> %518, i32 111
  %964 = getelementptr inbounds i8, i8* %8, i32 %963
  %965 = load i8, i8* %964, align 1, !tbaa !127
  %966 = insertelement <128 x i8> %962, i8 %965, i32 111
  %967 = extractelement <128 x i32> %518, i32 112
  %968 = getelementptr inbounds i8, i8* %8, i32 %967
  %969 = load i8, i8* %968, align 1, !tbaa !127
  %970 = insertelement <128 x i8> %966, i8 %969, i32 112
  %971 = extractelement <128 x i32> %518, i32 113
  %972 = getelementptr inbounds i8, i8* %8, i32 %971
  %973 = load i8, i8* %972, align 1, !tbaa !127
  %974 = insertelement <128 x i8> %970, i8 %973, i32 113
  %975 = extractelement <128 x i32> %518, i32 114
  %976 = getelementptr inbounds i8, i8* %8, i32 %975
  %977 = load i8, i8* %976, align 1, !tbaa !127
  %978 = insertelement <128 x i8> %974, i8 %977, i32 114
  %979 = extractelement <128 x i32> %518, i32 115
  %980 = getelementptr inbounds i8, i8* %8, i32 %979
  %981 = load i8, i8* %980, align 1, !tbaa !127
  %982 = insertelement <128 x i8> %978, i8 %981, i32 115
  %983 = extractelement <128 x i32> %518, i32 116
  %984 = getelementptr inbounds i8, i8* %8, i32 %983
  %985 = load i8, i8* %984, align 1, !tbaa !127
  %986 = insertelement <128 x i8> %982, i8 %985, i32 116
  %987 = extractelement <128 x i32> %518, i32 117
  %988 = getelementptr inbounds i8, i8* %8, i32 %987
  %989 = load i8, i8* %988, align 1, !tbaa !127
  %990 = insertelement <128 x i8> %986, i8 %989, i32 117
  %991 = extractelement <128 x i32> %518, i32 118
  %992 = getelementptr inbounds i8, i8* %8, i32 %991
  %993 = load i8, i8* %992, align 1, !tbaa !127
  %994 = insertelement <128 x i8> %990, i8 %993, i32 118
  %995 = extractelement <128 x i32> %518, i32 119
  %996 = getelementptr inbounds i8, i8* %8, i32 %995
  %997 = load i8, i8* %996, align 1, !tbaa !127
  %998 = insertelement <128 x i8> %994, i8 %997, i32 119
  %999 = extractelement <128 x i32> %518, i32 120
  %1000 = getelementptr inbounds i8, i8* %8, i32 %999
  %1001 = load i8, i8* %1000, align 1, !tbaa !127
  %1002 = insertelement <128 x i8> %998, i8 %1001, i32 120
  %1003 = extractelement <128 x i32> %518, i32 121
  %1004 = getelementptr inbounds i8, i8* %8, i32 %1003
  %1005 = load i8, i8* %1004, align 1, !tbaa !127
  %1006 = insertelement <128 x i8> %1002, i8 %1005, i32 121
  %1007 = extractelement <128 x i32> %518, i32 122
  %1008 = getelementptr inbounds i8, i8* %8, i32 %1007
  %1009 = load i8, i8* %1008, align 1, !tbaa !127
  %1010 = insertelement <128 x i8> %1006, i8 %1009, i32 122
  %1011 = extractelement <128 x i32> %518, i32 123
  %1012 = getelementptr inbounds i8, i8* %8, i32 %1011
  %1013 = load i8, i8* %1012, align 1, !tbaa !127
  %1014 = insertelement <128 x i8> %1010, i8 %1013, i32 123
  %1015 = extractelement <128 x i32> %518, i32 124
  %1016 = getelementptr inbounds i8, i8* %8, i32 %1015
  %1017 = load i8, i8* %1016, align 1, !tbaa !127
  %1018 = insertelement <128 x i8> %1014, i8 %1017, i32 124
  %1019 = extractelement <128 x i32> %518, i32 125
  %1020 = getelementptr inbounds i8, i8* %8, i32 %1019
  %1021 = load i8, i8* %1020, align 1, !tbaa !127
  %1022 = insertelement <128 x i8> %1018, i8 %1021, i32 125
  %1023 = extractelement <128 x i32> %518, i32 126
  %1024 = getelementptr inbounds i8, i8* %8, i32 %1023
  %1025 = load i8, i8* %1024, align 1, !tbaa !127
  %1026 = insertelement <128 x i8> %1022, i8 %1025, i32 126
  %1027 = extractelement <128 x i32> %518, i32 127
  %1028 = getelementptr inbounds i8, i8* %8, i32 %1027
  %1029 = load i8, i8* %1028, align 1, !tbaa !127
  %1030 = insertelement <128 x i8> %1026, i8 %1029, i32 127
  %1031 = add nsw i32 %t2248.us, %resampled_input.s0.x.rebased14.us
  %1032 = shl nsw i32 %1031, 7
  %1033 = getelementptr inbounds i8, i8* %resampled_input, i32 %1032
  %1034 = bitcast i8* %1033 to <128 x i8>*
  store <128 x i8> %1030, <128 x i8>* %1034, align 128, !tbaa !129
  %1035 = add nuw nsw i32 %resampled_input.s0.x.rebased14.us, 1
  %.not666.us = icmp eq i32 %resampled_input.s0.x.rebased14.us, %t2228
  br i1 %.not666.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %1036 = add nuw nsw i32 %resampled_input.s0.y.rebased11.us, 1
  %.not663.us = icmp eq i32 %resampled_input.s0.y.rebased11.us, %t2227
  br i1 %.not663.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7, %"for resampled_input.s0.y.rebased9.preheader"
  %1037 = mul nsw i32 %485, %25
  %t2255 = add i32 %441, %1037
  br i1 %143, label %"for output.s0.y.yo.preheader", label %"end for output.s0.y.yo", !prof !101

"for output.s0.y.yo.preheader":                   ; preds = %"consume resampled_input"
  %1038 = load <32 x i32>, <32 x i32>* %98, align 128
  %1039 = load <32 x i32>, <32 x i32>* %100, align 128
  %1040 = load <32 x i32>, <32 x i32>* %102, align 128
  %1041 = load <32 x i32>, <32 x i32>* %104, align 128
  br label %"for output.s0.y.yo"

"for output.s0.y.yo":                             ; preds = %"for output.s0.y.yo.preheader", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %1081, %"end for output.s0.x.xo" ], [ 0, %"for output.s0.y.yo.preheader" ]
  %a31 = shl nuw nsw i32 %output.s0.y.yo, 1
  %1042 = icmp slt i32 %a31, %b33
  %output.s0.y.y.base.s = select i1 %1042, i32 %a31, i32 %b33
  %1043 = add nsw i32 %output.s0.y.y.base.s, %22
  %1044 = mul nsw i32 %1043, %stride_y
  %1045 = add nsw i32 %1044, %144
  %t2283 = mul nsw i32 %1045, %129
  %1046 = add nsw i32 %1044, %145
  %t2286 = mul nsw i32 %1046, %129
  %1047 = add nsw i32 %1043, 1
  %1048 = mul nsw i32 %1047, %stride_y
  %1049 = add nsw i32 %1048, %144
  %t2288 = mul nsw i32 %1049, %129
  %1050 = add nsw i32 %1048, %145
  %t2289 = mul nsw i32 %1050, %129
  %1051 = sub nsw i32 %1044, %t2223
  %t2291 = mul nsw i32 %1051, %129
  %1052 = sub nsw i32 %1048, %t2223
  %t2293 = mul nsw i32 %1052, %129
  br i1 %148, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !101

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %1053 = sub nsw i32 %t2291, %t2225
  %1054 = sub nsw i32 %t2293, %t2225
  %1055 = add nsw i32 %t2291, %180
  %1056 = add nsw i32 %t2293, %180
  %1057 = add nsw i32 %t2291, %181
  %1058 = add nsw i32 %t2293, %181
  %1059 = sub nsw i32 %t2286, %t2225
  %1060 = sub nsw i32 %t2289, %t2225
  %1061 = add nsw i32 %t2286, %180
  %1062 = add nsw i32 %t2289, %180
  %1063 = add nsw i32 %t2286, %181
  %1064 = add nsw i32 %t2289, %181
  %1065 = sub nsw i32 %t2283, %t2225
  %1066 = sub nsw i32 %t2288, %t2225
  %1067 = add nsw i32 %t2283, %180
  %1068 = add nsw i32 %t2288, %180
  %1069 = add nsw i32 %t2283, %181
  %1070 = add nsw i32 %t2288, %181
  %1071 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %1072 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %1073 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  %1074 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %1075 = mul nsw i32 %1043, %24
  %1076 = add nsw i32 %1075, %t2255
  %1077 = mul nsw i32 %1047, %24
  %1078 = add nsw i32 %1077, %t2255
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %1079 = add nuw nsw i32 %output.s0.b.rebased, 1
  %.not657 = icmp eq i32 %1079, %15
  br i1 %.not657, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %2313, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a32 = shl nuw nsw i32 %output.s0.x.xo, 1
  %1080 = icmp slt i32 %a32, %b34
  %output.s0.x.x.base.s = select i1 %1080, i32 %a32, i32 %b34
  br i1 %t2217, label %then_bb17, label %next_bb18

"end for output.s0.x.xo.loopexit":                ; preds = %"consume convolved"
  store <32 x i32> %2054, <32 x i32>* %149, align 128, !tbaa !131
  store <32 x i32> %2053, <32 x i32>* %151, align 128, !tbaa !139
  store <32 x i32> %2052, <32 x i32>* %153, align 128, !tbaa !141
  store <32 x i32> %2051, <32 x i32>* %155, align 128, !tbaa !144
  store <32 x i32> %2050, <32 x i32>* %157, align 128, !tbaa !146
  store <32 x i32> %2049, <32 x i32>* %159, align 128, !tbaa !150
  store <32 x i32> %2048, <32 x i32>* %161, align 128, !tbaa !152
  store <32 x i32> %2047, <32 x i32>* %163, align 128, !tbaa !155
  store <32 x i32> %.lcssa5461.lcssa5492, <32 x i32>* %165, align 128, !tbaa !157
  store <32 x i32> %.lcssa5460.lcssa5493, <32 x i32>* %167, align 128, !tbaa !162
  store <32 x i32> %.lcssa5459.lcssa5494, <32 x i32>* %169, align 128, !tbaa !164
  store <32 x i32> %.lcssa5458.lcssa5495, <32 x i32>* %171, align 128, !tbaa !167
  store <32 x i32> %.lcssa5457.lcssa5496, <32 x i32>* %173, align 128, !tbaa !169
  store <32 x i32> %.lcssa5456.lcssa5497, <32 x i32>* %175, align 128, !tbaa !173
  store <32 x i32> %.lcssa5455.lcssa5498, <32 x i32>* %177, align 128, !tbaa !175
  store <32 x i32> %.lcssa5454.lcssa5499, <32 x i32>* %179, align 128, !tbaa !178
  br label %"end for output.s0.x.xo"

"end for output.s0.x.xo":                         ; preds = %"end for output.s0.x.xo.loopexit", %"for output.s0.y.yo"
  %1081 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not658 = icmp eq i32 %1081, %142
  br i1 %.not658, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb17:                                        ; preds = %"for output.s0.x.xo"
  %1082 = load <32 x i32>, <32 x i32>* %442, align 128, !tbaa !180
  %1083 = load <32 x i32>, <32 x i32>* %444, align 128, !tbaa !186
  %1084 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1083, <32 x i32> %1082)
  %1085 = bitcast <64 x i32> %1084 to <128 x i16>
  %1086 = sext <128 x i16> %1085 to <128 x i32>
  %1087 = add nsw i32 %output.s0.x.x.base.s, %19
  %1088 = mul nsw i32 %1087, %stride_x
  %1089 = add nsw i32 %1088, %1053
  %1090 = shl nsw i32 %1089, 7
  %1091 = getelementptr inbounds i8, i8* %resampled_input, i32 %1090
  %1092 = bitcast i8* %1091 to <128 x i8>*
  %1093 = load <128 x i8>, <128 x i8>* %1092, align 128, !tbaa !129
  %1094 = zext <128 x i8> %1093 to <128 x i32>
  %1095 = shufflevector <128 x i32> %1086, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1096 = shufflevector <128 x i32> %1094, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i767 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1095, <32 x i32> %1096) #11
  %ab.i768 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i767, <32 x i32> %1095, <32 x i32> %1096) #11
  %1097 = shufflevector <128 x i32> %1086, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1098 = shufflevector <128 x i32> %1094, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i769 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1097, <32 x i32> %1098) #11
  %ab.i770 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i769, <32 x i32> %1097, <32 x i32> %1098) #11
  %1099 = shufflevector <128 x i32> %1086, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1100 = shufflevector <128 x i32> %1094, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i771 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1099, <32 x i32> %1100) #11
  %ab.i772 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i771, <32 x i32> %1099, <32 x i32> %1100) #11
  %1101 = shufflevector <128 x i32> %1086, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1102 = shufflevector <128 x i32> %1094, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i773 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1101, <32 x i32> %1102) #11
  %ab.i774 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i773, <32 x i32> %1101, <32 x i32> %1102) #11
  %1103 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i770, <32 x i32> %ab.i768)
  %1104 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i774, <32 x i32> %ab.i772)
  %1105 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1039, <32 x i32> %1038)
  %1106 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1041, <32 x i32> %1040)
  %1107 = add nsw <64 x i32> %1105, %1103
  %1108 = add nsw <64 x i32> %1106, %1104
  %1109 = shufflevector <64 x i32> %1108, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1110 = shufflevector <64 x i32> %1107, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1111 = shufflevector <64 x i32> %1107, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1112 = shufflevector <64 x i32> %1108, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1113 = shufflevector <128 x i32> %1109, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1114 = add nsw i32 %1087, 1
  %1115 = mul nsw i32 %1114, %stride_x
  %1116 = add nsw i32 %1115, %1053
  %1117 = shl nsw i32 %1116, 7
  %1118 = getelementptr inbounds i8, i8* %resampled_input, i32 %1117
  %1119 = bitcast i8* %1118 to <128 x i8>*
  %1120 = load <128 x i8>, <128 x i8>* %1119, align 128, !tbaa !129
  %1121 = zext <128 x i8> %1120 to <128 x i32>
  %1122 = shufflevector <128 x i32> %1121, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i775 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1095, <32 x i32> %1122) #11
  %ab.i776 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i775, <32 x i32> %1095, <32 x i32> %1122) #11
  %1123 = shufflevector <128 x i32> %1121, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i777 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1097, <32 x i32> %1123) #11
  %ab.i778 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i777, <32 x i32> %1097, <32 x i32> %1123) #11
  %1124 = shufflevector <128 x i32> %1121, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i779 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1099, <32 x i32> %1124) #11
  %ab.i780 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i779, <32 x i32> %1099, <32 x i32> %1124) #11
  %1125 = shufflevector <128 x i32> %1121, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i781 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1101, <32 x i32> %1125) #11
  %ab.i782 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i781, <32 x i32> %1101, <32 x i32> %1125) #11
  %1126 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i778, <32 x i32> %ab.i776)
  %1127 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i782, <32 x i32> %ab.i780)
  %1128 = add nsw <64 x i32> %1126, %1105
  %1129 = add nsw <64 x i32> %1127, %1106
  %1130 = shufflevector <64 x i32> %1129, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1131 = shufflevector <64 x i32> %1128, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1132 = shufflevector <64 x i32> %1128, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1133 = shufflevector <64 x i32> %1129, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1134 = shufflevector <128 x i32> %1130, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1135 = add nsw i32 %1088, %1054
  %1136 = shl nsw i32 %1135, 7
  %1137 = getelementptr inbounds i8, i8* %resampled_input, i32 %1136
  %1138 = bitcast i8* %1137 to <128 x i8>*
  %1139 = load <128 x i8>, <128 x i8>* %1138, align 128, !tbaa !129
  %1140 = zext <128 x i8> %1139 to <128 x i32>
  %1141 = shufflevector <128 x i32> %1140, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i783 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1095, <32 x i32> %1141) #11
  %ab.i784 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i783, <32 x i32> %1095, <32 x i32> %1141) #11
  %1142 = shufflevector <128 x i32> %1140, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i785 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1097, <32 x i32> %1142) #11
  %ab.i786 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i785, <32 x i32> %1097, <32 x i32> %1142) #11
  %1143 = shufflevector <128 x i32> %1140, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i787 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1099, <32 x i32> %1143) #11
  %ab.i788 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i787, <32 x i32> %1099, <32 x i32> %1143) #11
  %1144 = shufflevector <128 x i32> %1140, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i789 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1101, <32 x i32> %1144) #11
  %ab.i790 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i789, <32 x i32> %1101, <32 x i32> %1144) #11
  %1145 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i786, <32 x i32> %ab.i784)
  %1146 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i790, <32 x i32> %ab.i788)
  %1147 = add nsw <64 x i32> %1145, %1105
  %1148 = add nsw <64 x i32> %1146, %1106
  %1149 = shufflevector <64 x i32> %1148, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1150 = shufflevector <64 x i32> %1147, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1151 = shufflevector <64 x i32> %1147, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1152 = shufflevector <64 x i32> %1148, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1153 = shufflevector <128 x i32> %1149, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1154 = add nsw i32 %1115, %1054
  %1155 = shl nsw i32 %1154, 7
  %1156 = getelementptr inbounds i8, i8* %resampled_input, i32 %1155
  %1157 = bitcast i8* %1156 to <128 x i8>*
  %1158 = load <128 x i8>, <128 x i8>* %1157, align 128, !tbaa !129
  %1159 = zext <128 x i8> %1158 to <128 x i32>
  %1160 = shufflevector <128 x i32> %1159, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i791 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1095, <32 x i32> %1160) #11
  %ab.i792 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i791, <32 x i32> %1095, <32 x i32> %1160) #11
  %1161 = shufflevector <128 x i32> %1159, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i793 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1097, <32 x i32> %1161) #11
  %ab.i794 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i793, <32 x i32> %1097, <32 x i32> %1161) #11
  %1162 = shufflevector <128 x i32> %1159, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i795 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1099, <32 x i32> %1162) #11
  %ab.i796 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i795, <32 x i32> %1099, <32 x i32> %1162) #11
  %1163 = shufflevector <128 x i32> %1159, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i797 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1101, <32 x i32> %1163) #11
  %ab.i798 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i797, <32 x i32> %1101, <32 x i32> %1163) #11
  %1164 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i794, <32 x i32> %ab.i792)
  %1165 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i798, <32 x i32> %ab.i796)
  %1166 = add nsw <64 x i32> %1164, %1105
  %1167 = add nsw <64 x i32> %1165, %1106
  %1168 = shufflevector <64 x i32> %1167, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1169 = shufflevector <64 x i32> %1166, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1170 = shufflevector <64 x i32> %1166, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1171 = shufflevector <64 x i32> %1167, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1172 = shufflevector <128 x i32> %1168, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1173 = load <32 x i32>, <32 x i32>* %446, align 128, !tbaa !188
  %1174 = load <32 x i32>, <32 x i32>* %448, align 128, !tbaa !191
  %1175 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1174, <32 x i32> %1173)
  %1176 = bitcast <64 x i32> %1175 to <128 x i16>
  %1177 = sext <128 x i16> %1176 to <128 x i32>
  %1178 = add nsw i32 %1088, %1055
  %1179 = shl nsw i32 %1178, 7
  %1180 = getelementptr inbounds i8, i8* %resampled_input, i32 %1179
  %1181 = bitcast i8* %1180 to <128 x i8>*
  %1182 = load <128 x i8>, <128 x i8>* %1181, align 128, !tbaa !129
  %1183 = zext <128 x i8> %1182 to <128 x i32>
  %1184 = shufflevector <128 x i32> %1177, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1185 = shufflevector <128 x i32> %1183, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i799 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1184, <32 x i32> %1185) #11
  %ab.i800 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i799, <32 x i32> %1184, <32 x i32> %1185) #11
  %1186 = shufflevector <128 x i32> %1177, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1187 = shufflevector <128 x i32> %1183, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i801 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1186, <32 x i32> %1187) #11
  %ab.i802 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i801, <32 x i32> %1186, <32 x i32> %1187) #11
  %1188 = shufflevector <128 x i32> %1177, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1189 = shufflevector <128 x i32> %1183, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i803 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1188, <32 x i32> %1189) #11
  %ab.i804 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i803, <32 x i32> %1188, <32 x i32> %1189) #11
  %1190 = shufflevector <128 x i32> %1177, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1191 = shufflevector <128 x i32> %1183, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i805 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1190, <32 x i32> %1191) #11
  %ab.i806 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i805, <32 x i32> %1190, <32 x i32> %1191) #11
  %1192 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i802, <32 x i32> %ab.i800)
  %1193 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i806, <32 x i32> %ab.i804)
  %1194 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1111, <32 x i32> %1110)
  %1195 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1113, <32 x i32> %1112)
  %1196 = add nsw <64 x i32> %1194, %1192
  %1197 = add nsw <64 x i32> %1195, %1193
  %1198 = shufflevector <64 x i32> %1197, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1199 = shufflevector <64 x i32> %1196, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1200 = shufflevector <64 x i32> %1196, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1201 = shufflevector <64 x i32> %1197, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1202 = shufflevector <128 x i32> %1198, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1203 = add nsw i32 %1115, %1055
  %1204 = shl nsw i32 %1203, 7
  %1205 = getelementptr inbounds i8, i8* %resampled_input, i32 %1204
  %1206 = bitcast i8* %1205 to <128 x i8>*
  %1207 = load <128 x i8>, <128 x i8>* %1206, align 128, !tbaa !129
  %1208 = zext <128 x i8> %1207 to <128 x i32>
  %1209 = shufflevector <128 x i32> %1208, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i807 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1184, <32 x i32> %1209) #11
  %ab.i808 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i807, <32 x i32> %1184, <32 x i32> %1209) #11
  %1210 = shufflevector <128 x i32> %1208, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i809 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1186, <32 x i32> %1210) #11
  %ab.i810 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i809, <32 x i32> %1186, <32 x i32> %1210) #11
  %1211 = shufflevector <128 x i32> %1208, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i811 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1188, <32 x i32> %1211) #11
  %ab.i812 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i811, <32 x i32> %1188, <32 x i32> %1211) #11
  %1212 = shufflevector <128 x i32> %1208, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i813 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1190, <32 x i32> %1212) #11
  %ab.i814 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i813, <32 x i32> %1190, <32 x i32> %1212) #11
  %1213 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i810, <32 x i32> %ab.i808)
  %1214 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i814, <32 x i32> %ab.i812)
  %1215 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1132, <32 x i32> %1131)
  %1216 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1134, <32 x i32> %1133)
  %1217 = add nsw <64 x i32> %1215, %1213
  %1218 = add nsw <64 x i32> %1216, %1214
  %1219 = shufflevector <64 x i32> %1218, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1220 = shufflevector <64 x i32> %1217, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1221 = shufflevector <64 x i32> %1217, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1222 = shufflevector <64 x i32> %1218, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1223 = shufflevector <128 x i32> %1219, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1224 = add nsw i32 %1088, %1056
  %1225 = shl nsw i32 %1224, 7
  %1226 = getelementptr inbounds i8, i8* %resampled_input, i32 %1225
  %1227 = bitcast i8* %1226 to <128 x i8>*
  %1228 = load <128 x i8>, <128 x i8>* %1227, align 128, !tbaa !129
  %1229 = zext <128 x i8> %1228 to <128 x i32>
  %1230 = shufflevector <128 x i32> %1229, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i815 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1184, <32 x i32> %1230) #11
  %ab.i816 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i815, <32 x i32> %1184, <32 x i32> %1230) #11
  %1231 = shufflevector <128 x i32> %1229, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i817 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1186, <32 x i32> %1231) #11
  %ab.i818 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i817, <32 x i32> %1186, <32 x i32> %1231) #11
  %1232 = shufflevector <128 x i32> %1229, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i819 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1188, <32 x i32> %1232) #11
  %ab.i820 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i819, <32 x i32> %1188, <32 x i32> %1232) #11
  %1233 = shufflevector <128 x i32> %1229, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i821 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1190, <32 x i32> %1233) #11
  %ab.i822 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i821, <32 x i32> %1190, <32 x i32> %1233) #11
  %1234 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i818, <32 x i32> %ab.i816)
  %1235 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i822, <32 x i32> %ab.i820)
  %1236 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1151, <32 x i32> %1150)
  %1237 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1153, <32 x i32> %1152)
  %1238 = add nsw <64 x i32> %1236, %1234
  %1239 = add nsw <64 x i32> %1237, %1235
  %1240 = shufflevector <64 x i32> %1239, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1241 = shufflevector <64 x i32> %1238, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1242 = shufflevector <64 x i32> %1238, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1243 = shufflevector <64 x i32> %1239, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1244 = shufflevector <128 x i32> %1240, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1245 = add nsw i32 %1115, %1056
  %1246 = shl nsw i32 %1245, 7
  %1247 = getelementptr inbounds i8, i8* %resampled_input, i32 %1246
  %1248 = bitcast i8* %1247 to <128 x i8>*
  %1249 = load <128 x i8>, <128 x i8>* %1248, align 128, !tbaa !129
  %1250 = zext <128 x i8> %1249 to <128 x i32>
  %1251 = shufflevector <128 x i32> %1250, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i823 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1184, <32 x i32> %1251) #11
  %ab.i824 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i823, <32 x i32> %1184, <32 x i32> %1251) #11
  %1252 = shufflevector <128 x i32> %1250, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i825 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1186, <32 x i32> %1252) #11
  %ab.i826 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i825, <32 x i32> %1186, <32 x i32> %1252) #11
  %1253 = shufflevector <128 x i32> %1250, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i827 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1188, <32 x i32> %1253) #11
  %ab.i828 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i827, <32 x i32> %1188, <32 x i32> %1253) #11
  %1254 = shufflevector <128 x i32> %1250, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i829 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1190, <32 x i32> %1254) #11
  %ab.i830 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i829, <32 x i32> %1190, <32 x i32> %1254) #11
  %1255 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i826, <32 x i32> %ab.i824)
  %1256 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i830, <32 x i32> %ab.i828)
  %1257 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1170, <32 x i32> %1169)
  %1258 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1172, <32 x i32> %1171)
  %1259 = add nsw <64 x i32> %1257, %1255
  %1260 = add nsw <64 x i32> %1258, %1256
  %1261 = shufflevector <64 x i32> %1260, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1262 = shufflevector <64 x i32> %1259, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1263 = shufflevector <64 x i32> %1259, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1264 = shufflevector <64 x i32> %1260, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1265 = shufflevector <128 x i32> %1261, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1266 = load <32 x i32>, <32 x i32>* %450, align 128, !tbaa !193
  %1267 = load <32 x i32>, <32 x i32>* %452, align 128, !tbaa !197
  %1268 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1267, <32 x i32> %1266)
  %1269 = bitcast <64 x i32> %1268 to <128 x i16>
  %1270 = sext <128 x i16> %1269 to <128 x i32>
  %1271 = add nsw i32 %1088, %1057
  %1272 = shl nsw i32 %1271, 7
  %1273 = getelementptr inbounds i8, i8* %resampled_input, i32 %1272
  %1274 = bitcast i8* %1273 to <128 x i8>*
  %1275 = load <128 x i8>, <128 x i8>* %1274, align 128, !tbaa !129
  %1276 = zext <128 x i8> %1275 to <128 x i32>
  %1277 = shufflevector <128 x i32> %1270, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1278 = shufflevector <128 x i32> %1276, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i831 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1277, <32 x i32> %1278) #11
  %ab.i832 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i831, <32 x i32> %1277, <32 x i32> %1278) #11
  %1279 = shufflevector <128 x i32> %1270, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1280 = shufflevector <128 x i32> %1276, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i833 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1279, <32 x i32> %1280) #11
  %ab.i834 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i833, <32 x i32> %1279, <32 x i32> %1280) #11
  %1281 = shufflevector <128 x i32> %1270, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1282 = shufflevector <128 x i32> %1276, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i835 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1281, <32 x i32> %1282) #11
  %ab.i836 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i835, <32 x i32> %1281, <32 x i32> %1282) #11
  %1283 = shufflevector <128 x i32> %1270, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1284 = shufflevector <128 x i32> %1276, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i837 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1283, <32 x i32> %1284) #11
  %ab.i838 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i837, <32 x i32> %1283, <32 x i32> %1284) #11
  %1285 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i834, <32 x i32> %ab.i832)
  %1286 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i838, <32 x i32> %ab.i836)
  %1287 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1200, <32 x i32> %1199)
  %1288 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1202, <32 x i32> %1201)
  %1289 = add nsw <64 x i32> %1287, %1285
  %1290 = add nsw <64 x i32> %1288, %1286
  %1291 = shufflevector <64 x i32> %1290, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1292 = shufflevector <64 x i32> %1289, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1293 = shufflevector <64 x i32> %1289, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1294 = shufflevector <64 x i32> %1290, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1295 = shufflevector <128 x i32> %1291, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1296 = add nsw i32 %1115, %1057
  %1297 = shl nsw i32 %1296, 7
  %1298 = getelementptr inbounds i8, i8* %resampled_input, i32 %1297
  %1299 = bitcast i8* %1298 to <128 x i8>*
  %1300 = load <128 x i8>, <128 x i8>* %1299, align 128, !tbaa !129
  %1301 = zext <128 x i8> %1300 to <128 x i32>
  %1302 = shufflevector <128 x i32> %1301, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i839 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1277, <32 x i32> %1302) #11
  %ab.i840 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i839, <32 x i32> %1277, <32 x i32> %1302) #11
  %1303 = shufflevector <128 x i32> %1301, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i841 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1279, <32 x i32> %1303) #11
  %ab.i842 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i841, <32 x i32> %1279, <32 x i32> %1303) #11
  %1304 = shufflevector <128 x i32> %1301, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i843 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1281, <32 x i32> %1304) #11
  %ab.i844 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i843, <32 x i32> %1281, <32 x i32> %1304) #11
  %1305 = shufflevector <128 x i32> %1301, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i845 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1283, <32 x i32> %1305) #11
  %ab.i846 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i845, <32 x i32> %1283, <32 x i32> %1305) #11
  %1306 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i842, <32 x i32> %ab.i840)
  %1307 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i846, <32 x i32> %ab.i844)
  %1308 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1221, <32 x i32> %1220)
  %1309 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1223, <32 x i32> %1222)
  %1310 = add nsw <64 x i32> %1308, %1306
  %1311 = add nsw <64 x i32> %1309, %1307
  %1312 = shufflevector <64 x i32> %1311, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1313 = shufflevector <64 x i32> %1310, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1314 = shufflevector <64 x i32> %1310, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1315 = shufflevector <64 x i32> %1311, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1316 = shufflevector <128 x i32> %1312, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1317 = add nsw i32 %1088, %1058
  %1318 = shl nsw i32 %1317, 7
  %1319 = getelementptr inbounds i8, i8* %resampled_input, i32 %1318
  %1320 = bitcast i8* %1319 to <128 x i8>*
  %1321 = load <128 x i8>, <128 x i8>* %1320, align 128, !tbaa !129
  %1322 = zext <128 x i8> %1321 to <128 x i32>
  %1323 = shufflevector <128 x i32> %1322, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i847 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1277, <32 x i32> %1323) #11
  %ab.i848 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i847, <32 x i32> %1277, <32 x i32> %1323) #11
  %1324 = shufflevector <128 x i32> %1322, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i849 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1279, <32 x i32> %1324) #11
  %ab.i850 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i849, <32 x i32> %1279, <32 x i32> %1324) #11
  %1325 = shufflevector <128 x i32> %1322, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i851 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1281, <32 x i32> %1325) #11
  %ab.i852 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i851, <32 x i32> %1281, <32 x i32> %1325) #11
  %1326 = shufflevector <128 x i32> %1322, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i853 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1283, <32 x i32> %1326) #11
  %ab.i854 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i853, <32 x i32> %1283, <32 x i32> %1326) #11
  %1327 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i850, <32 x i32> %ab.i848)
  %1328 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i854, <32 x i32> %ab.i852)
  %1329 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1242, <32 x i32> %1241)
  %1330 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1244, <32 x i32> %1243)
  %1331 = add nsw <64 x i32> %1329, %1327
  %1332 = add nsw <64 x i32> %1330, %1328
  %1333 = shufflevector <64 x i32> %1332, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1334 = shufflevector <64 x i32> %1331, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1335 = shufflevector <64 x i32> %1331, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1336 = shufflevector <64 x i32> %1332, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1337 = shufflevector <128 x i32> %1333, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1338 = add nsw i32 %1115, %1058
  %1339 = shl nsw i32 %1338, 7
  %1340 = getelementptr inbounds i8, i8* %resampled_input, i32 %1339
  %1341 = bitcast i8* %1340 to <128 x i8>*
  %1342 = load <128 x i8>, <128 x i8>* %1341, align 128, !tbaa !129
  %1343 = zext <128 x i8> %1342 to <128 x i32>
  %1344 = shufflevector <128 x i32> %1343, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i855 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1277, <32 x i32> %1344) #11
  %ab.i856 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i855, <32 x i32> %1277, <32 x i32> %1344) #11
  %1345 = shufflevector <128 x i32> %1343, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i857 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1279, <32 x i32> %1345) #11
  %ab.i858 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i857, <32 x i32> %1279, <32 x i32> %1345) #11
  %1346 = shufflevector <128 x i32> %1343, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i859 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1281, <32 x i32> %1346) #11
  %ab.i860 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i859, <32 x i32> %1281, <32 x i32> %1346) #11
  %1347 = shufflevector <128 x i32> %1343, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i861 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1283, <32 x i32> %1347) #11
  %ab.i862 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i861, <32 x i32> %1283, <32 x i32> %1347) #11
  %1348 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i858, <32 x i32> %ab.i856)
  %1349 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i862, <32 x i32> %ab.i860)
  %1350 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1263, <32 x i32> %1262)
  %1351 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1265, <32 x i32> %1264)
  %1352 = add nsw <64 x i32> %1350, %1348
  %1353 = add nsw <64 x i32> %1351, %1349
  %1354 = shufflevector <64 x i32> %1353, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1355 = shufflevector <64 x i32> %1352, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1356 = shufflevector <64 x i32> %1352, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1357 = shufflevector <64 x i32> %1353, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1358 = shufflevector <128 x i32> %1354, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1359 = load <32 x i32>, <32 x i32>* %454, align 128, !tbaa !105
  %1360 = load <32 x i32>, <32 x i32>* %456, align 128, !tbaa !105
  %1361 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1360, <32 x i32> %1359)
  %1362 = bitcast <64 x i32> %1361 to <128 x i16>
  %1363 = sext <128 x i16> %1362 to <128 x i32>
  %1364 = add nsw i32 %1088, %1059
  %1365 = shl nsw i32 %1364, 7
  %1366 = getelementptr inbounds i8, i8* %resampled_input, i32 %1365
  %1367 = bitcast i8* %1366 to <128 x i8>*
  %1368 = load <128 x i8>, <128 x i8>* %1367, align 128, !tbaa !129
  %1369 = zext <128 x i8> %1368 to <128 x i32>
  %1370 = shufflevector <128 x i32> %1363, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1371 = shufflevector <128 x i32> %1369, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i863 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1371) #11
  %ab.i864 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i863, <32 x i32> %1370, <32 x i32> %1371) #11
  %1372 = shufflevector <128 x i32> %1363, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1373 = shufflevector <128 x i32> %1369, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i865 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1372, <32 x i32> %1373) #11
  %ab.i866 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i865, <32 x i32> %1372, <32 x i32> %1373) #11
  %1374 = shufflevector <128 x i32> %1363, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1375 = shufflevector <128 x i32> %1369, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i867 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1374, <32 x i32> %1375) #11
  %ab.i868 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i867, <32 x i32> %1374, <32 x i32> %1375) #11
  %1376 = shufflevector <128 x i32> %1363, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1377 = shufflevector <128 x i32> %1369, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i869 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %1377) #11
  %ab.i870 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i869, <32 x i32> %1376, <32 x i32> %1377) #11
  %1378 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i866, <32 x i32> %ab.i864)
  %1379 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i870, <32 x i32> %ab.i868)
  %1380 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1293, <32 x i32> %1292)
  %1381 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1295, <32 x i32> %1294)
  %1382 = add nsw <64 x i32> %1380, %1378
  %1383 = add nsw <64 x i32> %1381, %1379
  %1384 = shufflevector <64 x i32> %1383, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1385 = shufflevector <64 x i32> %1382, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1386 = shufflevector <64 x i32> %1382, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1387 = shufflevector <64 x i32> %1383, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1388 = shufflevector <128 x i32> %1384, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1389 = add nsw i32 %1115, %1059
  %1390 = shl nsw i32 %1389, 7
  %1391 = getelementptr inbounds i8, i8* %resampled_input, i32 %1390
  %1392 = bitcast i8* %1391 to <128 x i8>*
  %1393 = load <128 x i8>, <128 x i8>* %1392, align 128, !tbaa !129
  %1394 = zext <128 x i8> %1393 to <128 x i32>
  %1395 = shufflevector <128 x i32> %1394, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i871 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1395) #11
  %ab.i872 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i871, <32 x i32> %1370, <32 x i32> %1395) #11
  %1396 = shufflevector <128 x i32> %1394, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i873 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1372, <32 x i32> %1396) #11
  %ab.i874 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i873, <32 x i32> %1372, <32 x i32> %1396) #11
  %1397 = shufflevector <128 x i32> %1394, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i875 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1374, <32 x i32> %1397) #11
  %ab.i876 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i875, <32 x i32> %1374, <32 x i32> %1397) #11
  %1398 = shufflevector <128 x i32> %1394, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i877 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %1398) #11
  %ab.i878 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i877, <32 x i32> %1376, <32 x i32> %1398) #11
  %1399 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i874, <32 x i32> %ab.i872)
  %1400 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i878, <32 x i32> %ab.i876)
  %1401 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1314, <32 x i32> %1313)
  %1402 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1316, <32 x i32> %1315)
  %1403 = add nsw <64 x i32> %1401, %1399
  %1404 = add nsw <64 x i32> %1402, %1400
  %1405 = shufflevector <64 x i32> %1404, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1406 = shufflevector <64 x i32> %1403, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1407 = shufflevector <64 x i32> %1403, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1408 = shufflevector <64 x i32> %1404, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1409 = shufflevector <128 x i32> %1405, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1410 = add nsw i32 %1088, %1060
  %1411 = shl nsw i32 %1410, 7
  %1412 = getelementptr inbounds i8, i8* %resampled_input, i32 %1411
  %1413 = bitcast i8* %1412 to <128 x i8>*
  %1414 = load <128 x i8>, <128 x i8>* %1413, align 128, !tbaa !129
  %1415 = zext <128 x i8> %1414 to <128 x i32>
  %1416 = shufflevector <128 x i32> %1415, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i879 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1416) #11
  %ab.i880 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i879, <32 x i32> %1370, <32 x i32> %1416) #11
  %1417 = shufflevector <128 x i32> %1415, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i881 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1372, <32 x i32> %1417) #11
  %ab.i882 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i881, <32 x i32> %1372, <32 x i32> %1417) #11
  %1418 = shufflevector <128 x i32> %1415, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i883 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1374, <32 x i32> %1418) #11
  %ab.i884 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i883, <32 x i32> %1374, <32 x i32> %1418) #11
  %1419 = shufflevector <128 x i32> %1415, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i885 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %1419) #11
  %ab.i886 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i885, <32 x i32> %1376, <32 x i32> %1419) #11
  %1420 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i882, <32 x i32> %ab.i880)
  %1421 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i886, <32 x i32> %ab.i884)
  %1422 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1335, <32 x i32> %1334)
  %1423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1337, <32 x i32> %1336)
  %1424 = add nsw <64 x i32> %1422, %1420
  %1425 = add nsw <64 x i32> %1423, %1421
  %1426 = shufflevector <64 x i32> %1425, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1427 = shufflevector <64 x i32> %1424, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1428 = shufflevector <64 x i32> %1424, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1429 = shufflevector <64 x i32> %1425, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1430 = shufflevector <128 x i32> %1426, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1431 = add nsw i32 %1115, %1060
  %1432 = shl nsw i32 %1431, 7
  %1433 = getelementptr inbounds i8, i8* %resampled_input, i32 %1432
  %1434 = bitcast i8* %1433 to <128 x i8>*
  %1435 = load <128 x i8>, <128 x i8>* %1434, align 128, !tbaa !129
  %1436 = zext <128 x i8> %1435 to <128 x i32>
  %1437 = shufflevector <128 x i32> %1436, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i887 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1370, <32 x i32> %1437) #11
  %ab.i888 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i887, <32 x i32> %1370, <32 x i32> %1437) #11
  %1438 = shufflevector <128 x i32> %1436, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i889 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1372, <32 x i32> %1438) #11
  %ab.i890 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i889, <32 x i32> %1372, <32 x i32> %1438) #11
  %1439 = shufflevector <128 x i32> %1436, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i891 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1374, <32 x i32> %1439) #11
  %ab.i892 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i891, <32 x i32> %1374, <32 x i32> %1439) #11
  %1440 = shufflevector <128 x i32> %1436, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i893 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1376, <32 x i32> %1440) #11
  %ab.i894 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i893, <32 x i32> %1376, <32 x i32> %1440) #11
  %1441 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i890, <32 x i32> %ab.i888)
  %1442 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i894, <32 x i32> %ab.i892)
  %1443 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1356, <32 x i32> %1355)
  %1444 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1358, <32 x i32> %1357)
  %1445 = add nsw <64 x i32> %1443, %1441
  %1446 = add nsw <64 x i32> %1444, %1442
  %1447 = shufflevector <64 x i32> %1446, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1448 = shufflevector <64 x i32> %1445, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1449 = shufflevector <64 x i32> %1445, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1450 = shufflevector <64 x i32> %1446, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1451 = shufflevector <128 x i32> %1447, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1452 = load <32 x i32>, <32 x i32>* %458, align 128, !tbaa !105
  %1453 = load <32 x i32>, <32 x i32>* %460, align 128, !tbaa !105
  %1454 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1453, <32 x i32> %1452)
  %1455 = bitcast <64 x i32> %1454 to <128 x i16>
  %1456 = sext <128 x i16> %1455 to <128 x i32>
  %1457 = add nsw i32 %1088, %1061
  %1458 = shl nsw i32 %1457, 7
  %1459 = getelementptr inbounds i8, i8* %resampled_input, i32 %1458
  %1460 = bitcast i8* %1459 to <128 x i8>*
  %1461 = load <128 x i8>, <128 x i8>* %1460, align 128, !tbaa !129
  %1462 = zext <128 x i8> %1461 to <128 x i32>
  %1463 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1464 = shufflevector <128 x i32> %1462, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i895 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1463, <32 x i32> %1464) #11
  %ab.i896 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i895, <32 x i32> %1463, <32 x i32> %1464) #11
  %1465 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1466 = shufflevector <128 x i32> %1462, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i897 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1465, <32 x i32> %1466) #11
  %ab.i898 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i897, <32 x i32> %1465, <32 x i32> %1466) #11
  %1467 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1468 = shufflevector <128 x i32> %1462, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i899 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1467, <32 x i32> %1468) #11
  %ab.i900 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i899, <32 x i32> %1467, <32 x i32> %1468) #11
  %1469 = shufflevector <128 x i32> %1456, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1470 = shufflevector <128 x i32> %1462, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i901 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1469, <32 x i32> %1470) #11
  %ab.i902 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i901, <32 x i32> %1469, <32 x i32> %1470) #11
  %1471 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i898, <32 x i32> %ab.i896)
  %1472 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i902, <32 x i32> %ab.i900)
  %1473 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1386, <32 x i32> %1385)
  %1474 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1388, <32 x i32> %1387)
  %1475 = add nsw <64 x i32> %1473, %1471
  %1476 = add nsw <64 x i32> %1474, %1472
  %1477 = shufflevector <64 x i32> %1476, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1478 = shufflevector <64 x i32> %1475, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1479 = shufflevector <64 x i32> %1475, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1480 = shufflevector <64 x i32> %1476, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1481 = shufflevector <128 x i32> %1477, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1482 = add nsw i32 %1115, %1061
  %1483 = shl nsw i32 %1482, 7
  %1484 = getelementptr inbounds i8, i8* %resampled_input, i32 %1483
  %1485 = bitcast i8* %1484 to <128 x i8>*
  %1486 = load <128 x i8>, <128 x i8>* %1485, align 128, !tbaa !129
  %1487 = zext <128 x i8> %1486 to <128 x i32>
  %1488 = shufflevector <128 x i32> %1487, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i903 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1463, <32 x i32> %1488) #11
  %ab.i904 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i903, <32 x i32> %1463, <32 x i32> %1488) #11
  %1489 = shufflevector <128 x i32> %1487, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i905 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1465, <32 x i32> %1489) #11
  %ab.i906 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i905, <32 x i32> %1465, <32 x i32> %1489) #11
  %1490 = shufflevector <128 x i32> %1487, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i907 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1467, <32 x i32> %1490) #11
  %ab.i908 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i907, <32 x i32> %1467, <32 x i32> %1490) #11
  %1491 = shufflevector <128 x i32> %1487, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i909 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1469, <32 x i32> %1491) #11
  %ab.i910 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i909, <32 x i32> %1469, <32 x i32> %1491) #11
  %1492 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i906, <32 x i32> %ab.i904)
  %1493 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i910, <32 x i32> %ab.i908)
  %1494 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1407, <32 x i32> %1406)
  %1495 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1409, <32 x i32> %1408)
  %1496 = add nsw <64 x i32> %1494, %1492
  %1497 = add nsw <64 x i32> %1495, %1493
  %1498 = shufflevector <64 x i32> %1497, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1499 = shufflevector <64 x i32> %1496, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1500 = shufflevector <64 x i32> %1496, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1501 = shufflevector <64 x i32> %1497, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1502 = shufflevector <128 x i32> %1498, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1503 = add nsw i32 %1088, %1062
  %1504 = shl nsw i32 %1503, 7
  %1505 = getelementptr inbounds i8, i8* %resampled_input, i32 %1504
  %1506 = bitcast i8* %1505 to <128 x i8>*
  %1507 = load <128 x i8>, <128 x i8>* %1506, align 128, !tbaa !129
  %1508 = zext <128 x i8> %1507 to <128 x i32>
  %1509 = shufflevector <128 x i32> %1508, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i911 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1463, <32 x i32> %1509) #11
  %ab.i912 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i911, <32 x i32> %1463, <32 x i32> %1509) #11
  %1510 = shufflevector <128 x i32> %1508, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i913 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1465, <32 x i32> %1510) #11
  %ab.i914 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i913, <32 x i32> %1465, <32 x i32> %1510) #11
  %1511 = shufflevector <128 x i32> %1508, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i915 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1467, <32 x i32> %1511) #11
  %ab.i916 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i915, <32 x i32> %1467, <32 x i32> %1511) #11
  %1512 = shufflevector <128 x i32> %1508, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i917 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1469, <32 x i32> %1512) #11
  %ab.i918 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i917, <32 x i32> %1469, <32 x i32> %1512) #11
  %1513 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i914, <32 x i32> %ab.i912)
  %1514 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i918, <32 x i32> %ab.i916)
  %1515 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1428, <32 x i32> %1427)
  %1516 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1430, <32 x i32> %1429)
  %1517 = add nsw <64 x i32> %1515, %1513
  %1518 = add nsw <64 x i32> %1516, %1514
  %1519 = shufflevector <64 x i32> %1518, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1520 = shufflevector <64 x i32> %1517, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1521 = shufflevector <64 x i32> %1517, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1522 = shufflevector <64 x i32> %1518, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1523 = shufflevector <128 x i32> %1519, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1524 = add nsw i32 %1115, %1062
  %1525 = shl nsw i32 %1524, 7
  %1526 = getelementptr inbounds i8, i8* %resampled_input, i32 %1525
  %1527 = bitcast i8* %1526 to <128 x i8>*
  %1528 = load <128 x i8>, <128 x i8>* %1527, align 128, !tbaa !129
  %1529 = zext <128 x i8> %1528 to <128 x i32>
  %1530 = shufflevector <128 x i32> %1529, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i919 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1463, <32 x i32> %1530) #11
  %ab.i920 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i919, <32 x i32> %1463, <32 x i32> %1530) #11
  %1531 = shufflevector <128 x i32> %1529, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i921 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1465, <32 x i32> %1531) #11
  %ab.i922 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i921, <32 x i32> %1465, <32 x i32> %1531) #11
  %1532 = shufflevector <128 x i32> %1529, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i923 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1467, <32 x i32> %1532) #11
  %ab.i924 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i923, <32 x i32> %1467, <32 x i32> %1532) #11
  %1533 = shufflevector <128 x i32> %1529, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i925 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1469, <32 x i32> %1533) #11
  %ab.i926 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i925, <32 x i32> %1469, <32 x i32> %1533) #11
  %1534 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i922, <32 x i32> %ab.i920)
  %1535 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i926, <32 x i32> %ab.i924)
  %1536 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1449, <32 x i32> %1448)
  %1537 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1451, <32 x i32> %1450)
  %1538 = add nsw <64 x i32> %1536, %1534
  %1539 = add nsw <64 x i32> %1537, %1535
  %1540 = shufflevector <64 x i32> %1539, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1541 = shufflevector <64 x i32> %1538, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1542 = shufflevector <64 x i32> %1538, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1543 = shufflevector <64 x i32> %1539, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1544 = shufflevector <128 x i32> %1540, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1545 = load <32 x i32>, <32 x i32>* %462, align 128, !tbaa !105
  %1546 = load <32 x i32>, <32 x i32>* %464, align 128, !tbaa !105
  %1547 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1546, <32 x i32> %1545)
  %1548 = bitcast <64 x i32> %1547 to <128 x i16>
  %1549 = sext <128 x i16> %1548 to <128 x i32>
  %1550 = add nsw i32 %1088, %1063
  %1551 = shl nsw i32 %1550, 7
  %1552 = getelementptr inbounds i8, i8* %resampled_input, i32 %1551
  %1553 = bitcast i8* %1552 to <128 x i8>*
  %1554 = load <128 x i8>, <128 x i8>* %1553, align 128, !tbaa !129
  %1555 = zext <128 x i8> %1554 to <128 x i32>
  %1556 = shufflevector <128 x i32> %1549, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1557 = shufflevector <128 x i32> %1555, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i927 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1556, <32 x i32> %1557) #11
  %ab.i928 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i927, <32 x i32> %1556, <32 x i32> %1557) #11
  %1558 = shufflevector <128 x i32> %1549, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1559 = shufflevector <128 x i32> %1555, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i929 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1558, <32 x i32> %1559) #11
  %ab.i930 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i929, <32 x i32> %1558, <32 x i32> %1559) #11
  %1560 = shufflevector <128 x i32> %1549, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1561 = shufflevector <128 x i32> %1555, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i931 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1560, <32 x i32> %1561) #11
  %ab.i932 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i931, <32 x i32> %1560, <32 x i32> %1561) #11
  %1562 = shufflevector <128 x i32> %1549, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1563 = shufflevector <128 x i32> %1555, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i933 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1562, <32 x i32> %1563) #11
  %ab.i934 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i933, <32 x i32> %1562, <32 x i32> %1563) #11
  %1564 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i930, <32 x i32> %ab.i928)
  %1565 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i934, <32 x i32> %ab.i932)
  %1566 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1479, <32 x i32> %1478)
  %1567 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1481, <32 x i32> %1480)
  %1568 = add nsw <64 x i32> %1566, %1564
  %1569 = add nsw <64 x i32> %1567, %1565
  %1570 = shufflevector <64 x i32> %1569, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1571 = shufflevector <64 x i32> %1568, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1572 = shufflevector <64 x i32> %1568, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1573 = shufflevector <64 x i32> %1569, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1574 = shufflevector <128 x i32> %1570, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1575 = add nsw i32 %1115, %1063
  %1576 = shl nsw i32 %1575, 7
  %1577 = getelementptr inbounds i8, i8* %resampled_input, i32 %1576
  %1578 = bitcast i8* %1577 to <128 x i8>*
  %1579 = load <128 x i8>, <128 x i8>* %1578, align 128, !tbaa !129
  %1580 = zext <128 x i8> %1579 to <128 x i32>
  %1581 = shufflevector <128 x i32> %1580, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i935 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1556, <32 x i32> %1581) #11
  %ab.i936 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i935, <32 x i32> %1556, <32 x i32> %1581) #11
  %1582 = shufflevector <128 x i32> %1580, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i937 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1558, <32 x i32> %1582) #11
  %ab.i938 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i937, <32 x i32> %1558, <32 x i32> %1582) #11
  %1583 = shufflevector <128 x i32> %1580, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i939 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1560, <32 x i32> %1583) #11
  %ab.i940 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i939, <32 x i32> %1560, <32 x i32> %1583) #11
  %1584 = shufflevector <128 x i32> %1580, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i941 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1562, <32 x i32> %1584) #11
  %ab.i942 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i941, <32 x i32> %1562, <32 x i32> %1584) #11
  %1585 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i938, <32 x i32> %ab.i936)
  %1586 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i942, <32 x i32> %ab.i940)
  %1587 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1500, <32 x i32> %1499)
  %1588 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1502, <32 x i32> %1501)
  %1589 = add nsw <64 x i32> %1587, %1585
  %1590 = add nsw <64 x i32> %1588, %1586
  %1591 = shufflevector <64 x i32> %1590, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1592 = shufflevector <64 x i32> %1589, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1593 = shufflevector <64 x i32> %1589, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1594 = shufflevector <64 x i32> %1590, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1595 = shufflevector <128 x i32> %1591, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1596 = add nsw i32 %1088, %1064
  %1597 = shl nsw i32 %1596, 7
  %1598 = getelementptr inbounds i8, i8* %resampled_input, i32 %1597
  %1599 = bitcast i8* %1598 to <128 x i8>*
  %1600 = load <128 x i8>, <128 x i8>* %1599, align 128, !tbaa !129
  %1601 = zext <128 x i8> %1600 to <128 x i32>
  %1602 = shufflevector <128 x i32> %1601, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i943 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1556, <32 x i32> %1602) #11
  %ab.i944 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i943, <32 x i32> %1556, <32 x i32> %1602) #11
  %1603 = shufflevector <128 x i32> %1601, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i945 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1558, <32 x i32> %1603) #11
  %ab.i946 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i945, <32 x i32> %1558, <32 x i32> %1603) #11
  %1604 = shufflevector <128 x i32> %1601, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i947 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1560, <32 x i32> %1604) #11
  %ab.i948 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i947, <32 x i32> %1560, <32 x i32> %1604) #11
  %1605 = shufflevector <128 x i32> %1601, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i949 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1562, <32 x i32> %1605) #11
  %ab.i950 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i949, <32 x i32> %1562, <32 x i32> %1605) #11
  %1606 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i946, <32 x i32> %ab.i944)
  %1607 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i950, <32 x i32> %ab.i948)
  %1608 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1521, <32 x i32> %1520)
  %1609 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1523, <32 x i32> %1522)
  %1610 = add nsw <64 x i32> %1608, %1606
  %1611 = add nsw <64 x i32> %1609, %1607
  %1612 = shufflevector <64 x i32> %1611, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1613 = shufflevector <64 x i32> %1610, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1614 = shufflevector <64 x i32> %1610, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1615 = shufflevector <64 x i32> %1611, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1616 = shufflevector <128 x i32> %1612, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1617 = add nsw i32 %1115, %1064
  %1618 = shl nsw i32 %1617, 7
  %1619 = getelementptr inbounds i8, i8* %resampled_input, i32 %1618
  %1620 = bitcast i8* %1619 to <128 x i8>*
  %1621 = load <128 x i8>, <128 x i8>* %1620, align 128, !tbaa !129
  %1622 = zext <128 x i8> %1621 to <128 x i32>
  %1623 = shufflevector <128 x i32> %1622, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i951 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1556, <32 x i32> %1623) #11
  %ab.i952 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i951, <32 x i32> %1556, <32 x i32> %1623) #11
  %1624 = shufflevector <128 x i32> %1622, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i953 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1558, <32 x i32> %1624) #11
  %ab.i954 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i953, <32 x i32> %1558, <32 x i32> %1624) #11
  %1625 = shufflevector <128 x i32> %1622, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i955 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1560, <32 x i32> %1625) #11
  %ab.i956 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i955, <32 x i32> %1560, <32 x i32> %1625) #11
  %1626 = shufflevector <128 x i32> %1622, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i957 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1562, <32 x i32> %1626) #11
  %ab.i958 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i957, <32 x i32> %1562, <32 x i32> %1626) #11
  %1627 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i954, <32 x i32> %ab.i952)
  %1628 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i958, <32 x i32> %ab.i956)
  %1629 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1542, <32 x i32> %1541)
  %1630 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1544, <32 x i32> %1543)
  %1631 = add nsw <64 x i32> %1629, %1627
  %1632 = add nsw <64 x i32> %1630, %1628
  %1633 = shufflevector <64 x i32> %1632, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1634 = shufflevector <64 x i32> %1631, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1635 = shufflevector <64 x i32> %1631, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1636 = shufflevector <64 x i32> %1632, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1637 = shufflevector <128 x i32> %1633, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1638 = load <32 x i32>, <32 x i32>* %466, align 128, !tbaa !105
  %1639 = load <32 x i32>, <32 x i32>* %468, align 128, !tbaa !105
  %1640 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1639, <32 x i32> %1638)
  %1641 = bitcast <64 x i32> %1640 to <128 x i16>
  %1642 = sext <128 x i16> %1641 to <128 x i32>
  %1643 = add nsw i32 %1088, %1065
  %1644 = shl nsw i32 %1643, 7
  %1645 = getelementptr inbounds i8, i8* %resampled_input, i32 %1644
  %1646 = bitcast i8* %1645 to <128 x i8>*
  %1647 = load <128 x i8>, <128 x i8>* %1646, align 128, !tbaa !129
  %1648 = zext <128 x i8> %1647 to <128 x i32>
  %1649 = shufflevector <128 x i32> %1642, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1650 = shufflevector <128 x i32> %1648, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i959 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1649, <32 x i32> %1650) #11
  %ab.i960 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i959, <32 x i32> %1649, <32 x i32> %1650) #11
  %1651 = shufflevector <128 x i32> %1642, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1652 = shufflevector <128 x i32> %1648, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i961 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1651, <32 x i32> %1652) #11
  %ab.i962 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i961, <32 x i32> %1651, <32 x i32> %1652) #11
  %1653 = shufflevector <128 x i32> %1642, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1654 = shufflevector <128 x i32> %1648, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i963 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1653, <32 x i32> %1654) #11
  %ab.i964 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i963, <32 x i32> %1653, <32 x i32> %1654) #11
  %1655 = shufflevector <128 x i32> %1642, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1656 = shufflevector <128 x i32> %1648, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i965 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1655, <32 x i32> %1656) #11
  %ab.i966 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i965, <32 x i32> %1655, <32 x i32> %1656) #11
  %1657 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i962, <32 x i32> %ab.i960)
  %1658 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i966, <32 x i32> %ab.i964)
  %1659 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1572, <32 x i32> %1571)
  %1660 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1574, <32 x i32> %1573)
  %1661 = add nsw <64 x i32> %1659, %1657
  %1662 = add nsw <64 x i32> %1660, %1658
  %1663 = shufflevector <64 x i32> %1662, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1664 = shufflevector <64 x i32> %1661, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1665 = shufflevector <64 x i32> %1661, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1666 = shufflevector <64 x i32> %1662, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1667 = shufflevector <128 x i32> %1663, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1668 = add nsw i32 %1115, %1065
  %1669 = shl nsw i32 %1668, 7
  %1670 = getelementptr inbounds i8, i8* %resampled_input, i32 %1669
  %1671 = bitcast i8* %1670 to <128 x i8>*
  %1672 = load <128 x i8>, <128 x i8>* %1671, align 128, !tbaa !129
  %1673 = zext <128 x i8> %1672 to <128 x i32>
  %1674 = shufflevector <128 x i32> %1673, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i967 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1649, <32 x i32> %1674) #11
  %ab.i968 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i967, <32 x i32> %1649, <32 x i32> %1674) #11
  %1675 = shufflevector <128 x i32> %1673, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i969 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1651, <32 x i32> %1675) #11
  %ab.i970 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i969, <32 x i32> %1651, <32 x i32> %1675) #11
  %1676 = shufflevector <128 x i32> %1673, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i971 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1653, <32 x i32> %1676) #11
  %ab.i972 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i971, <32 x i32> %1653, <32 x i32> %1676) #11
  %1677 = shufflevector <128 x i32> %1673, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i973 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1655, <32 x i32> %1677) #11
  %ab.i974 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i973, <32 x i32> %1655, <32 x i32> %1677) #11
  %1678 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i970, <32 x i32> %ab.i968)
  %1679 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i974, <32 x i32> %ab.i972)
  %1680 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1593, <32 x i32> %1592)
  %1681 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1595, <32 x i32> %1594)
  %1682 = add nsw <64 x i32> %1680, %1678
  %1683 = add nsw <64 x i32> %1681, %1679
  %1684 = shufflevector <64 x i32> %1683, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1685 = shufflevector <64 x i32> %1682, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1686 = shufflevector <64 x i32> %1682, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1687 = shufflevector <64 x i32> %1683, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1688 = shufflevector <128 x i32> %1684, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1689 = add nsw i32 %1088, %1066
  %1690 = shl nsw i32 %1689, 7
  %1691 = getelementptr inbounds i8, i8* %resampled_input, i32 %1690
  %1692 = bitcast i8* %1691 to <128 x i8>*
  %1693 = load <128 x i8>, <128 x i8>* %1692, align 128, !tbaa !129
  %1694 = zext <128 x i8> %1693 to <128 x i32>
  %1695 = shufflevector <128 x i32> %1694, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i975 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1649, <32 x i32> %1695) #11
  %ab.i976 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i975, <32 x i32> %1649, <32 x i32> %1695) #11
  %1696 = shufflevector <128 x i32> %1694, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i977 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1651, <32 x i32> %1696) #11
  %ab.i978 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i977, <32 x i32> %1651, <32 x i32> %1696) #11
  %1697 = shufflevector <128 x i32> %1694, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i979 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1653, <32 x i32> %1697) #11
  %ab.i980 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i979, <32 x i32> %1653, <32 x i32> %1697) #11
  %1698 = shufflevector <128 x i32> %1694, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i981 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1655, <32 x i32> %1698) #11
  %ab.i982 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i981, <32 x i32> %1655, <32 x i32> %1698) #11
  %1699 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i978, <32 x i32> %ab.i976)
  %1700 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i982, <32 x i32> %ab.i980)
  %1701 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1614, <32 x i32> %1613)
  %1702 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1616, <32 x i32> %1615)
  %1703 = add nsw <64 x i32> %1701, %1699
  %1704 = add nsw <64 x i32> %1702, %1700
  %1705 = shufflevector <64 x i32> %1704, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1706 = shufflevector <64 x i32> %1703, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1707 = shufflevector <64 x i32> %1703, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1708 = shufflevector <64 x i32> %1704, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1709 = shufflevector <128 x i32> %1705, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1710 = add nsw i32 %1115, %1066
  %1711 = shl nsw i32 %1710, 7
  %1712 = getelementptr inbounds i8, i8* %resampled_input, i32 %1711
  %1713 = bitcast i8* %1712 to <128 x i8>*
  %1714 = load <128 x i8>, <128 x i8>* %1713, align 128, !tbaa !129
  %1715 = zext <128 x i8> %1714 to <128 x i32>
  %1716 = shufflevector <128 x i32> %1715, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i983 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1649, <32 x i32> %1716) #11
  %ab.i984 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i983, <32 x i32> %1649, <32 x i32> %1716) #11
  %1717 = shufflevector <128 x i32> %1715, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i985 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1651, <32 x i32> %1717) #11
  %ab.i986 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i985, <32 x i32> %1651, <32 x i32> %1717) #11
  %1718 = shufflevector <128 x i32> %1715, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i987 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1653, <32 x i32> %1718) #11
  %ab.i988 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i987, <32 x i32> %1653, <32 x i32> %1718) #11
  %1719 = shufflevector <128 x i32> %1715, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i989 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1655, <32 x i32> %1719) #11
  %ab.i990 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i989, <32 x i32> %1655, <32 x i32> %1719) #11
  %1720 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i986, <32 x i32> %ab.i984)
  %1721 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i990, <32 x i32> %ab.i988)
  %1722 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1635, <32 x i32> %1634)
  %1723 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1637, <32 x i32> %1636)
  %1724 = add nsw <64 x i32> %1722, %1720
  %1725 = add nsw <64 x i32> %1723, %1721
  %1726 = shufflevector <64 x i32> %1725, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1727 = shufflevector <64 x i32> %1724, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1728 = shufflevector <64 x i32> %1724, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1729 = shufflevector <64 x i32> %1725, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1730 = shufflevector <128 x i32> %1726, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1731 = load <32 x i32>, <32 x i32>* %470, align 128, !tbaa !105
  %1732 = load <32 x i32>, <32 x i32>* %472, align 128, !tbaa !105
  %1733 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1732, <32 x i32> %1731)
  %1734 = bitcast <64 x i32> %1733 to <128 x i16>
  %1735 = sext <128 x i16> %1734 to <128 x i32>
  %1736 = add nsw i32 %1088, %1067
  %1737 = shl nsw i32 %1736, 7
  %1738 = getelementptr inbounds i8, i8* %resampled_input, i32 %1737
  %1739 = bitcast i8* %1738 to <128 x i8>*
  %1740 = load <128 x i8>, <128 x i8>* %1739, align 128, !tbaa !129
  %1741 = zext <128 x i8> %1740 to <128 x i32>
  %1742 = shufflevector <128 x i32> %1735, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1743 = shufflevector <128 x i32> %1741, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i991 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1742, <32 x i32> %1743) #11
  %ab.i992 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i991, <32 x i32> %1742, <32 x i32> %1743) #11
  %1744 = shufflevector <128 x i32> %1735, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1745 = shufflevector <128 x i32> %1741, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i993 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1744, <32 x i32> %1745) #11
  %ab.i994 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i993, <32 x i32> %1744, <32 x i32> %1745) #11
  %1746 = shufflevector <128 x i32> %1735, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1747 = shufflevector <128 x i32> %1741, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i995 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1746, <32 x i32> %1747) #11
  %ab.i996 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i995, <32 x i32> %1746, <32 x i32> %1747) #11
  %1748 = shufflevector <128 x i32> %1735, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1749 = shufflevector <128 x i32> %1741, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i997 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1748, <32 x i32> %1749) #11
  %ab.i998 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i997, <32 x i32> %1748, <32 x i32> %1749) #11
  %1750 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i994, <32 x i32> %ab.i992)
  %1751 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i998, <32 x i32> %ab.i996)
  %1752 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1665, <32 x i32> %1664)
  %1753 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1667, <32 x i32> %1666)
  %1754 = add nsw <64 x i32> %1752, %1750
  %1755 = add nsw <64 x i32> %1753, %1751
  %1756 = shufflevector <64 x i32> %1755, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1757 = shufflevector <64 x i32> %1754, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1758 = shufflevector <64 x i32> %1754, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1759 = shufflevector <64 x i32> %1755, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1760 = shufflevector <128 x i32> %1756, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1761 = add nsw i32 %1115, %1067
  %1762 = shl nsw i32 %1761, 7
  %1763 = getelementptr inbounds i8, i8* %resampled_input, i32 %1762
  %1764 = bitcast i8* %1763 to <128 x i8>*
  %1765 = load <128 x i8>, <128 x i8>* %1764, align 128, !tbaa !129
  %1766 = zext <128 x i8> %1765 to <128 x i32>
  %1767 = shufflevector <128 x i32> %1766, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i999 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1742, <32 x i32> %1767) #11
  %ab.i1000 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i999, <32 x i32> %1742, <32 x i32> %1767) #11
  %1768 = shufflevector <128 x i32> %1766, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1001 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1744, <32 x i32> %1768) #11
  %ab.i1002 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1001, <32 x i32> %1744, <32 x i32> %1768) #11
  %1769 = shufflevector <128 x i32> %1766, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1003 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1746, <32 x i32> %1769) #11
  %ab.i1004 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1003, <32 x i32> %1746, <32 x i32> %1769) #11
  %1770 = shufflevector <128 x i32> %1766, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1005 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1748, <32 x i32> %1770) #11
  %ab.i1006 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1005, <32 x i32> %1748, <32 x i32> %1770) #11
  %1771 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1002, <32 x i32> %ab.i1000)
  %1772 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1006, <32 x i32> %ab.i1004)
  %1773 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1686, <32 x i32> %1685)
  %1774 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1688, <32 x i32> %1687)
  %1775 = add nsw <64 x i32> %1773, %1771
  %1776 = add nsw <64 x i32> %1774, %1772
  %1777 = shufflevector <64 x i32> %1776, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1778 = shufflevector <64 x i32> %1775, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1779 = shufflevector <64 x i32> %1775, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1780 = shufflevector <64 x i32> %1776, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1781 = shufflevector <128 x i32> %1777, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1782 = add nsw i32 %1088, %1068
  %1783 = shl nsw i32 %1782, 7
  %1784 = getelementptr inbounds i8, i8* %resampled_input, i32 %1783
  %1785 = bitcast i8* %1784 to <128 x i8>*
  %1786 = load <128 x i8>, <128 x i8>* %1785, align 128, !tbaa !129
  %1787 = zext <128 x i8> %1786 to <128 x i32>
  %1788 = shufflevector <128 x i32> %1787, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1007 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1742, <32 x i32> %1788) #11
  %ab.i1008 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1007, <32 x i32> %1742, <32 x i32> %1788) #11
  %1789 = shufflevector <128 x i32> %1787, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1009 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1744, <32 x i32> %1789) #11
  %ab.i1010 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1009, <32 x i32> %1744, <32 x i32> %1789) #11
  %1790 = shufflevector <128 x i32> %1787, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1011 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1746, <32 x i32> %1790) #11
  %ab.i1012 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1011, <32 x i32> %1746, <32 x i32> %1790) #11
  %1791 = shufflevector <128 x i32> %1787, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1013 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1748, <32 x i32> %1791) #11
  %ab.i1014 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1013, <32 x i32> %1748, <32 x i32> %1791) #11
  %1792 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1010, <32 x i32> %ab.i1008)
  %1793 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1014, <32 x i32> %ab.i1012)
  %1794 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1707, <32 x i32> %1706)
  %1795 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1709, <32 x i32> %1708)
  %1796 = add nsw <64 x i32> %1794, %1792
  %1797 = add nsw <64 x i32> %1795, %1793
  %1798 = shufflevector <64 x i32> %1797, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1799 = shufflevector <64 x i32> %1796, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1800 = shufflevector <64 x i32> %1796, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1801 = shufflevector <64 x i32> %1797, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1802 = shufflevector <128 x i32> %1798, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1803 = add nsw i32 %1115, %1068
  %1804 = shl nsw i32 %1803, 7
  %1805 = getelementptr inbounds i8, i8* %resampled_input, i32 %1804
  %1806 = bitcast i8* %1805 to <128 x i8>*
  %1807 = load <128 x i8>, <128 x i8>* %1806, align 128, !tbaa !129
  %1808 = zext <128 x i8> %1807 to <128 x i32>
  %1809 = shufflevector <128 x i32> %1808, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1015 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1742, <32 x i32> %1809) #11
  %ab.i1016 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1015, <32 x i32> %1742, <32 x i32> %1809) #11
  %1810 = shufflevector <128 x i32> %1808, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1017 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1744, <32 x i32> %1810) #11
  %ab.i1018 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1017, <32 x i32> %1744, <32 x i32> %1810) #11
  %1811 = shufflevector <128 x i32> %1808, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1019 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1746, <32 x i32> %1811) #11
  %ab.i1020 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1019, <32 x i32> %1746, <32 x i32> %1811) #11
  %1812 = shufflevector <128 x i32> %1808, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1021 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1748, <32 x i32> %1812) #11
  %ab.i1022 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1021, <32 x i32> %1748, <32 x i32> %1812) #11
  %1813 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1018, <32 x i32> %ab.i1016)
  %1814 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1022, <32 x i32> %ab.i1020)
  %1815 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1728, <32 x i32> %1727)
  %1816 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1730, <32 x i32> %1729)
  %1817 = add nsw <64 x i32> %1815, %1813
  %1818 = add nsw <64 x i32> %1816, %1814
  %1819 = shufflevector <64 x i32> %1818, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1820 = shufflevector <64 x i32> %1817, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1821 = shufflevector <64 x i32> %1817, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1822 = shufflevector <64 x i32> %1818, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1823 = shufflevector <128 x i32> %1819, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1824 = load <32 x i32>, <32 x i32>* %474, align 128, !tbaa !105
  %1825 = load <32 x i32>, <32 x i32>* %476, align 128, !tbaa !105
  %1826 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1825, <32 x i32> %1824)
  %1827 = bitcast <64 x i32> %1826 to <128 x i16>
  %1828 = sext <128 x i16> %1827 to <128 x i32>
  %1829 = add nsw i32 %1088, %1069
  %1830 = shl nsw i32 %1829, 7
  %1831 = getelementptr inbounds i8, i8* %resampled_input, i32 %1830
  %1832 = bitcast i8* %1831 to <128 x i8>*
  %1833 = load <128 x i8>, <128 x i8>* %1832, align 128, !tbaa !129
  %1834 = zext <128 x i8> %1833 to <128 x i32>
  %1835 = shufflevector <128 x i32> %1828, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1836 = shufflevector <128 x i32> %1834, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1023 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1835, <32 x i32> %1836) #11
  %ab.i1024 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1023, <32 x i32> %1835, <32 x i32> %1836) #11
  %1837 = shufflevector <128 x i32> %1828, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1838 = shufflevector <128 x i32> %1834, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1025 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1837, <32 x i32> %1838) #11
  %ab.i1026 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1025, <32 x i32> %1837, <32 x i32> %1838) #11
  %1839 = shufflevector <128 x i32> %1828, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1840 = shufflevector <128 x i32> %1834, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1027 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1839, <32 x i32> %1840) #11
  %ab.i1028 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1027, <32 x i32> %1839, <32 x i32> %1840) #11
  %1841 = shufflevector <128 x i32> %1828, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1842 = shufflevector <128 x i32> %1834, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1029 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1841, <32 x i32> %1842) #11
  %ab.i1030 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1029, <32 x i32> %1841, <32 x i32> %1842) #11
  %1843 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1026, <32 x i32> %ab.i1024)
  %1844 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1030, <32 x i32> %ab.i1028)
  %1845 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1758, <32 x i32> %1757)
  %1846 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1760, <32 x i32> %1759)
  %1847 = add nsw <64 x i32> %1845, %1843
  %1848 = add nsw <64 x i32> %1846, %1844
  %1849 = shufflevector <64 x i32> %1848, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1850 = shufflevector <64 x i32> %1847, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1851 = shufflevector <64 x i32> %1847, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1852 = shufflevector <64 x i32> %1848, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1853 = shufflevector <128 x i32> %1849, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1854 = add nsw i32 %1115, %1069
  %1855 = shl nsw i32 %1854, 7
  %1856 = getelementptr inbounds i8, i8* %resampled_input, i32 %1855
  %1857 = bitcast i8* %1856 to <128 x i8>*
  %1858 = load <128 x i8>, <128 x i8>* %1857, align 128, !tbaa !129
  %1859 = zext <128 x i8> %1858 to <128 x i32>
  %1860 = shufflevector <128 x i32> %1859, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1031 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1835, <32 x i32> %1860) #11
  %ab.i1032 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1031, <32 x i32> %1835, <32 x i32> %1860) #11
  %1861 = shufflevector <128 x i32> %1859, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1033 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1837, <32 x i32> %1861) #11
  %ab.i1034 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1033, <32 x i32> %1837, <32 x i32> %1861) #11
  %1862 = shufflevector <128 x i32> %1859, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1035 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1839, <32 x i32> %1862) #11
  %ab.i1036 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1035, <32 x i32> %1839, <32 x i32> %1862) #11
  %1863 = shufflevector <128 x i32> %1859, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1037 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1841, <32 x i32> %1863) #11
  %ab.i1038 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1037, <32 x i32> %1841, <32 x i32> %1863) #11
  %1864 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1034, <32 x i32> %ab.i1032)
  %1865 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1038, <32 x i32> %ab.i1036)
  %1866 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1779, <32 x i32> %1778)
  %1867 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1781, <32 x i32> %1780)
  %1868 = add nsw <64 x i32> %1866, %1864
  %1869 = add nsw <64 x i32> %1867, %1865
  %1870 = shufflevector <64 x i32> %1869, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1871 = shufflevector <64 x i32> %1868, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1872 = shufflevector <64 x i32> %1868, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1873 = shufflevector <64 x i32> %1869, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1874 = shufflevector <128 x i32> %1870, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1875 = add nsw i32 %1088, %1070
  %1876 = shl nsw i32 %1875, 7
  %1877 = getelementptr inbounds i8, i8* %resampled_input, i32 %1876
  %1878 = bitcast i8* %1877 to <128 x i8>*
  %1879 = load <128 x i8>, <128 x i8>* %1878, align 128, !tbaa !129
  %1880 = zext <128 x i8> %1879 to <128 x i32>
  %1881 = shufflevector <128 x i32> %1880, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1039 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1835, <32 x i32> %1881) #11
  %ab.i1040 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1039, <32 x i32> %1835, <32 x i32> %1881) #11
  %1882 = shufflevector <128 x i32> %1880, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1041 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1837, <32 x i32> %1882) #11
  %ab.i1042 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1041, <32 x i32> %1837, <32 x i32> %1882) #11
  %1883 = shufflevector <128 x i32> %1880, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1043 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1839, <32 x i32> %1883) #11
  %ab.i1044 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1043, <32 x i32> %1839, <32 x i32> %1883) #11
  %1884 = shufflevector <128 x i32> %1880, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1045 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1841, <32 x i32> %1884) #11
  %ab.i1046 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1045, <32 x i32> %1841, <32 x i32> %1884) #11
  %1885 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1042, <32 x i32> %ab.i1040)
  %1886 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1046, <32 x i32> %ab.i1044)
  %1887 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1800, <32 x i32> %1799)
  %1888 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1802, <32 x i32> %1801)
  %1889 = add nsw <64 x i32> %1887, %1885
  %1890 = add nsw <64 x i32> %1888, %1886
  %1891 = shufflevector <64 x i32> %1890, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1892 = shufflevector <64 x i32> %1889, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1893 = shufflevector <64 x i32> %1889, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1894 = shufflevector <64 x i32> %1890, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1895 = shufflevector <128 x i32> %1891, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1896 = add nsw i32 %1115, %1070
  %1897 = shl nsw i32 %1896, 7
  %1898 = getelementptr inbounds i8, i8* %resampled_input, i32 %1897
  %1899 = bitcast i8* %1898 to <128 x i8>*
  %1900 = load <128 x i8>, <128 x i8>* %1899, align 128, !tbaa !129
  %1901 = zext <128 x i8> %1900 to <128 x i32>
  %1902 = shufflevector <128 x i32> %1901, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1047 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1835, <32 x i32> %1902) #11
  %ab.i1048 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1047, <32 x i32> %1835, <32 x i32> %1902) #11
  %1903 = shufflevector <128 x i32> %1901, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1049 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1837, <32 x i32> %1903) #11
  %ab.i1050 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1049, <32 x i32> %1837, <32 x i32> %1903) #11
  %1904 = shufflevector <128 x i32> %1901, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1051 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1839, <32 x i32> %1904) #11
  %ab.i1052 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1051, <32 x i32> %1839, <32 x i32> %1904) #11
  %1905 = shufflevector <128 x i32> %1901, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1053 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1841, <32 x i32> %1905) #11
  %ab.i1054 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1053, <32 x i32> %1841, <32 x i32> %1905) #11
  %1906 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1050, <32 x i32> %ab.i1048)
  %1907 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1054, <32 x i32> %ab.i1052)
  %1908 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1821, <32 x i32> %1820)
  %1909 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1823, <32 x i32> %1822)
  %1910 = add nsw <64 x i32> %1908, %1906
  %1911 = add nsw <64 x i32> %1909, %1907
  %1912 = shufflevector <64 x i32> %1911, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1913 = shufflevector <64 x i32> %1910, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1914 = shufflevector <64 x i32> %1910, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1915 = shufflevector <64 x i32> %1911, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1916 = shufflevector <128 x i32> %1912, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br label %"consume convolved"

next_bb18:                                        ; preds = %"for output.s0.x.xo"
  %1917 = add nsw i32 %output.s0.x.x.base.s, %19
  br i1 %85, label %"for convolved.s1.r19$y.preheader", label %"next_bb18.consume convolved_crit_edge", !prof !101

"next_bb18.consume convolved_crit_edge":          ; preds = %next_bb18
  %.pre5437 = add nsw i32 %1917, 1
  br label %"consume convolved"

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb18
  %1918 = mul nsw i32 %1917, %stride_x
  %1919 = sub nsw i32 %1918, %t2225
  %1920 = add nsw i32 %1917, 1
  %1921 = mul nsw i32 %1920, %stride_x
  %1922 = sub nsw i32 %1921, %t2225
  br i1 %84, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !101

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %.lcssa5328.us5360 = phi <32 x i32> [ %2044, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1041, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5326.us5358 = phi <32 x i32> [ %2043, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1040, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5324.us5356 = phi <32 x i32> [ %2042, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1039, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5322.us5354 = phi <32 x i32> [ %2041, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1038, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5320.us5352 = phi <32 x i32> [ %2023, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1041, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5318.us5350 = phi <32 x i32> [ %2022, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1040, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5316.us5348 = phi <32 x i32> [ %2021, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1039, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5314.us5346 = phi <32 x i32> [ %2020, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1038, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5312.us5344 = phi <32 x i32> [ %2001, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1041, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5310.us5342 = phi <32 x i32> [ %2000, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1040, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5308.us5340 = phi <32 x i32> [ %1999, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1039, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5306.us5338 = phi <32 x i32> [ %1998, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1038, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5304.us5336 = phi <32 x i32> [ %1980, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1041, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5302.us5334 = phi <32 x i32> [ %1979, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1040, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5300.us5332 = phi <32 x i32> [ %1978, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1039, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa5298.us5330 = phi <32 x i32> [ %1977, %"end for convolved.s1.r19$x.loopexit.us" ], [ %1038, %"for convolved.s1.r19$y.preheader" ]
  %"convolved.s1.r19$y.us" = phi i32 [ %2046, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %1923 = mul nsw i32 %"convolved.s1.r19$y.us", %a88
  %1924 = add nsw i32 %1923, %1051
  %t2303.us = mul nsw i32 %1924, %129
  %1925 = add nsw i32 %1923, %1052
  %t2304.us = mul nsw i32 %1925, %129
  %1926 = mul nsw i32 %"convolved.s1.r19$y.us", %4
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %1927 = phi <32 x i32> [ %2044, %"for convolved.s1.r19$x.us" ], [ %.lcssa5328.us5360, %"for convolved.s1.r19$y.us" ]
  %1928 = phi <32 x i32> [ %2043, %"for convolved.s1.r19$x.us" ], [ %.lcssa5326.us5358, %"for convolved.s1.r19$y.us" ]
  %1929 = phi <32 x i32> [ %2042, %"for convolved.s1.r19$x.us" ], [ %.lcssa5324.us5356, %"for convolved.s1.r19$y.us" ]
  %1930 = phi <32 x i32> [ %2041, %"for convolved.s1.r19$x.us" ], [ %.lcssa5322.us5354, %"for convolved.s1.r19$y.us" ]
  %1931 = phi <32 x i32> [ %2023, %"for convolved.s1.r19$x.us" ], [ %.lcssa5320.us5352, %"for convolved.s1.r19$y.us" ]
  %1932 = phi <32 x i32> [ %2022, %"for convolved.s1.r19$x.us" ], [ %.lcssa5318.us5350, %"for convolved.s1.r19$y.us" ]
  %1933 = phi <32 x i32> [ %2021, %"for convolved.s1.r19$x.us" ], [ %.lcssa5316.us5348, %"for convolved.s1.r19$y.us" ]
  %1934 = phi <32 x i32> [ %2020, %"for convolved.s1.r19$x.us" ], [ %.lcssa5314.us5346, %"for convolved.s1.r19$y.us" ]
  %1935 = phi <32 x i32> [ %2001, %"for convolved.s1.r19$x.us" ], [ %.lcssa5312.us5344, %"for convolved.s1.r19$y.us" ]
  %1936 = phi <32 x i32> [ %2000, %"for convolved.s1.r19$x.us" ], [ %.lcssa5310.us5342, %"for convolved.s1.r19$y.us" ]
  %1937 = phi <32 x i32> [ %1999, %"for convolved.s1.r19$x.us" ], [ %.lcssa5308.us5340, %"for convolved.s1.r19$y.us" ]
  %1938 = phi <32 x i32> [ %1998, %"for convolved.s1.r19$x.us" ], [ %.lcssa5306.us5338, %"for convolved.s1.r19$y.us" ]
  %1939 = phi <32 x i32> [ %1980, %"for convolved.s1.r19$x.us" ], [ %.lcssa5304.us5336, %"for convolved.s1.r19$y.us" ]
  %1940 = phi <32 x i32> [ %1979, %"for convolved.s1.r19$x.us" ], [ %.lcssa5302.us5334, %"for convolved.s1.r19$y.us" ]
  %1941 = phi <32 x i32> [ %1978, %"for convolved.s1.r19$x.us" ], [ %.lcssa5300.us5332, %"for convolved.s1.r19$y.us" ]
  %1942 = phi <32 x i32> [ %1977, %"for convolved.s1.r19$x.us" ], [ %.lcssa5298.us5330, %"for convolved.s1.r19$y.us" ]
  %"convolved.s1.r19$x.us" = phi i32 [ %2045, %"for convolved.s1.r19$x.us" ], [ 0, %"for convolved.s1.r19$y.us" ]
  %1943 = add nsw i32 %"convolved.s1.r19$x.us", %1926
  %1944 = shl nsw i32 %1943, 7
  %1945 = getelementptr inbounds i16, i16* %filter_zeroed, i32 %1944
  %1946 = bitcast i16* %1945 to <32 x i32>*
  %1947 = load <32 x i32>, <32 x i32>* %1946, align 128, !tbaa !105
  %1948 = getelementptr inbounds i16, i16* %1945, i32 64
  %1949 = bitcast i16* %1948 to <32 x i32>*
  %1950 = load <32 x i32>, <32 x i32>* %1949, align 128, !tbaa !105
  %1951 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1950, <32 x i32> %1947)
  %1952 = bitcast <64 x i32> %1951 to <128 x i16>
  %1953 = sext <128 x i16> %1952 to <128 x i32>
  %1954 = mul nsw i32 %"convolved.s1.r19$x.us", %a93
  %1955 = add i32 %1954, %t2303.us
  %1956 = add i32 %1955, %1919
  %1957 = shl nsw i32 %1956, 7
  %1958 = getelementptr inbounds i8, i8* %resampled_input, i32 %1957
  %1959 = bitcast i8* %1958 to <128 x i8>*
  %1960 = load <128 x i8>, <128 x i8>* %1959, align 128, !tbaa !129
  %1961 = zext <128 x i8> %1960 to <128 x i32>
  %1962 = shufflevector <128 x i32> %1953, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1963 = shufflevector <128 x i32> %1961, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1055.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1962, <32 x i32> %1963) #11
  %ab.i1056.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1055.us, <32 x i32> %1962, <32 x i32> %1963) #11
  %1964 = shufflevector <128 x i32> %1953, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1965 = shufflevector <128 x i32> %1961, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1057.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1964, <32 x i32> %1965) #11
  %ab.i1058.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1057.us, <32 x i32> %1964, <32 x i32> %1965) #11
  %1966 = shufflevector <128 x i32> %1953, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1967 = shufflevector <128 x i32> %1961, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1059.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1966, <32 x i32> %1967) #11
  %ab.i1060.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1059.us, <32 x i32> %1966, <32 x i32> %1967) #11
  %1968 = shufflevector <128 x i32> %1953, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1969 = shufflevector <128 x i32> %1961, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1061.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1968, <32 x i32> %1969) #11
  %ab.i1062.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1061.us, <32 x i32> %1968, <32 x i32> %1969) #11
  %1970 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1058.us, <32 x i32> %ab.i1056.us)
  %1971 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1062.us, <32 x i32> %ab.i1060.us)
  %1972 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1941, <32 x i32> %1942)
  %1973 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1939, <32 x i32> %1940)
  %1974 = add nsw <64 x i32> %1972, %1970
  %1975 = add nsw <64 x i32> %1973, %1971
  %1976 = shufflevector <64 x i32> %1975, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1977 = shufflevector <64 x i32> %1974, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1978 = shufflevector <64 x i32> %1974, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1979 = shufflevector <64 x i32> %1975, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1980 = shufflevector <128 x i32> %1976, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1981 = add i32 %1955, %1922
  %1982 = shl nsw i32 %1981, 7
  %1983 = getelementptr inbounds i8, i8* %resampled_input, i32 %1982
  %1984 = bitcast i8* %1983 to <128 x i8>*
  %1985 = load <128 x i8>, <128 x i8>* %1984, align 128, !tbaa !129
  %1986 = zext <128 x i8> %1985 to <128 x i32>
  %1987 = shufflevector <128 x i32> %1986, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1063.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1962, <32 x i32> %1987) #11
  %ab.i1064.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1063.us, <32 x i32> %1962, <32 x i32> %1987) #11
  %1988 = shufflevector <128 x i32> %1986, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1065.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1964, <32 x i32> %1988) #11
  %ab.i1066.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1065.us, <32 x i32> %1964, <32 x i32> %1988) #11
  %1989 = shufflevector <128 x i32> %1986, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1067.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1966, <32 x i32> %1989) #11
  %ab.i1068.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1067.us, <32 x i32> %1966, <32 x i32> %1989) #11
  %1990 = shufflevector <128 x i32> %1986, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1069.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1968, <32 x i32> %1990) #11
  %ab.i1070.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1069.us, <32 x i32> %1968, <32 x i32> %1990) #11
  %1991 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1066.us, <32 x i32> %ab.i1064.us)
  %1992 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1070.us, <32 x i32> %ab.i1068.us)
  %1993 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1937, <32 x i32> %1938)
  %1994 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1935, <32 x i32> %1936)
  %1995 = add nsw <64 x i32> %1993, %1991
  %1996 = add nsw <64 x i32> %1994, %1992
  %1997 = shufflevector <64 x i32> %1996, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1998 = shufflevector <64 x i32> %1995, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1999 = shufflevector <64 x i32> %1995, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2000 = shufflevector <64 x i32> %1996, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2001 = shufflevector <128 x i32> %1997, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2002 = add i32 %1954, %t2304.us
  %2003 = add i32 %2002, %1919
  %2004 = shl nsw i32 %2003, 7
  %2005 = getelementptr inbounds i8, i8* %resampled_input, i32 %2004
  %2006 = bitcast i8* %2005 to <128 x i8>*
  %2007 = load <128 x i8>, <128 x i8>* %2006, align 128, !tbaa !129
  %2008 = zext <128 x i8> %2007 to <128 x i32>
  %2009 = shufflevector <128 x i32> %2008, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1071.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1962, <32 x i32> %2009) #11
  %ab.i1072.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1071.us, <32 x i32> %1962, <32 x i32> %2009) #11
  %2010 = shufflevector <128 x i32> %2008, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1073.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1964, <32 x i32> %2010) #11
  %ab.i1074.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1073.us, <32 x i32> %1964, <32 x i32> %2010) #11
  %2011 = shufflevector <128 x i32> %2008, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1075.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1966, <32 x i32> %2011) #11
  %ab.i1076.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1075.us, <32 x i32> %1966, <32 x i32> %2011) #11
  %2012 = shufflevector <128 x i32> %2008, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1077.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1968, <32 x i32> %2012) #11
  %ab.i1078.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1077.us, <32 x i32> %1968, <32 x i32> %2012) #11
  %2013 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1074.us, <32 x i32> %ab.i1072.us)
  %2014 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1078.us, <32 x i32> %ab.i1076.us)
  %2015 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1933, <32 x i32> %1934)
  %2016 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1931, <32 x i32> %1932)
  %2017 = add nsw <64 x i32> %2015, %2013
  %2018 = add nsw <64 x i32> %2016, %2014
  %2019 = shufflevector <64 x i32> %2018, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2020 = shufflevector <64 x i32> %2017, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2021 = shufflevector <64 x i32> %2017, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2022 = shufflevector <64 x i32> %2018, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2023 = shufflevector <128 x i32> %2019, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2024 = add i32 %2002, %1922
  %2025 = shl nsw i32 %2024, 7
  %2026 = getelementptr inbounds i8, i8* %resampled_input, i32 %2025
  %2027 = bitcast i8* %2026 to <128 x i8>*
  %2028 = load <128 x i8>, <128 x i8>* %2027, align 128, !tbaa !129
  %2029 = zext <128 x i8> %2028 to <128 x i32>
  %2030 = shufflevector <128 x i32> %2029, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1079.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1962, <32 x i32> %2030) #11
  %ab.i1080.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1079.us, <32 x i32> %1962, <32 x i32> %2030) #11
  %2031 = shufflevector <128 x i32> %2029, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1081.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1964, <32 x i32> %2031) #11
  %ab.i1082.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1081.us, <32 x i32> %1964, <32 x i32> %2031) #11
  %2032 = shufflevector <128 x i32> %2029, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1083.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1966, <32 x i32> %2032) #11
  %ab.i1084.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1083.us, <32 x i32> %1966, <32 x i32> %2032) #11
  %2033 = shufflevector <128 x i32> %2029, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1085.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %1968, <32 x i32> %2033) #11
  %ab.i1086.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1085.us, <32 x i32> %1968, <32 x i32> %2033) #11
  %2034 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1082.us, <32 x i32> %ab.i1080.us)
  %2035 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1086.us, <32 x i32> %ab.i1084.us)
  %2036 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1929, <32 x i32> %1930)
  %2037 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1927, <32 x i32> %1928)
  %2038 = add nsw <64 x i32> %2036, %2034
  %2039 = add nsw <64 x i32> %2037, %2035
  %2040 = shufflevector <64 x i32> %2039, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2041 = shufflevector <64 x i32> %2038, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2042 = shufflevector <64 x i32> %2038, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2043 = shufflevector <64 x i32> %2039, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2044 = shufflevector <128 x i32> %2040, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2045 = add nuw nsw i32 %"convolved.s1.r19$x.us", 1
  %.not662.us = icmp eq i32 %2045, %4
  br i1 %.not662.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %2046 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not661.us = icmp eq i32 %2046, %6
  br i1 %.not661.us, label %"consume convolved", label %"for convolved.s1.r19$y.us"

"consume convolved":                              ; preds = %"end for convolved.s1.r19$x.loopexit.us", %"for convolved.s1.r19$y.preheader", %"next_bb18.consume convolved_crit_edge", %then_bb17
  %.lcssa5454.lcssa5499 = phi <32 x i32> [ %1041, %"next_bb18.consume convolved_crit_edge" ], [ %1916, %then_bb17 ], [ %1041, %"for convolved.s1.r19$y.preheader" ], [ %2044, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa5455.lcssa5498 = phi <32 x i32> [ %1040, %"next_bb18.consume convolved_crit_edge" ], [ %1915, %then_bb17 ], [ %1040, %"for convolved.s1.r19$y.preheader" ], [ %2043, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa5456.lcssa5497 = phi <32 x i32> [ %1039, %"next_bb18.consume convolved_crit_edge" ], [ %1914, %then_bb17 ], [ %1039, %"for convolved.s1.r19$y.preheader" ], [ %2042, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa5457.lcssa5496 = phi <32 x i32> [ %1038, %"next_bb18.consume convolved_crit_edge" ], [ %1913, %then_bb17 ], [ %1038, %"for convolved.s1.r19$y.preheader" ], [ %2041, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa5458.lcssa5495 = phi <32 x i32> [ %1041, %"next_bb18.consume convolved_crit_edge" ], [ %1895, %then_bb17 ], [ %1041, %"for convolved.s1.r19$y.preheader" ], [ %2023, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa5459.lcssa5494 = phi <32 x i32> [ %1040, %"next_bb18.consume convolved_crit_edge" ], [ %1894, %then_bb17 ], [ %1040, %"for convolved.s1.r19$y.preheader" ], [ %2022, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa5460.lcssa5493 = phi <32 x i32> [ %1039, %"next_bb18.consume convolved_crit_edge" ], [ %1893, %then_bb17 ], [ %1039, %"for convolved.s1.r19$y.preheader" ], [ %2021, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.lcssa5461.lcssa5492 = phi <32 x i32> [ %1038, %"next_bb18.consume convolved_crit_edge" ], [ %1892, %then_bb17 ], [ %1038, %"for convolved.s1.r19$y.preheader" ], [ %2020, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.pre-phi5438 = phi i32 [ %.pre5437, %"next_bb18.consume convolved_crit_edge" ], [ %1114, %then_bb17 ], [ %1920, %"for convolved.s1.r19$y.preheader" ], [ %1920, %"end for convolved.s1.r19$x.loopexit.us" ]
  %.pre-phi5436 = phi i32 [ %1917, %"next_bb18.consume convolved_crit_edge" ], [ %1087, %then_bb17 ], [ %1917, %"for convolved.s1.r19$y.preheader" ], [ %1917, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2047 = phi <32 x i32> [ %1041, %"next_bb18.consume convolved_crit_edge" ], [ %1874, %then_bb17 ], [ %1041, %"for convolved.s1.r19$y.preheader" ], [ %2001, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2048 = phi <32 x i32> [ %1040, %"next_bb18.consume convolved_crit_edge" ], [ %1873, %then_bb17 ], [ %1040, %"for convolved.s1.r19$y.preheader" ], [ %2000, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2049 = phi <32 x i32> [ %1039, %"next_bb18.consume convolved_crit_edge" ], [ %1872, %then_bb17 ], [ %1039, %"for convolved.s1.r19$y.preheader" ], [ %1999, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2050 = phi <32 x i32> [ %1038, %"next_bb18.consume convolved_crit_edge" ], [ %1871, %then_bb17 ], [ %1038, %"for convolved.s1.r19$y.preheader" ], [ %1998, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2051 = phi <32 x i32> [ %1041, %"next_bb18.consume convolved_crit_edge" ], [ %1853, %then_bb17 ], [ %1041, %"for convolved.s1.r19$y.preheader" ], [ %1980, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2052 = phi <32 x i32> [ %1040, %"next_bb18.consume convolved_crit_edge" ], [ %1852, %then_bb17 ], [ %1040, %"for convolved.s1.r19$y.preheader" ], [ %1979, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2053 = phi <32 x i32> [ %1039, %"next_bb18.consume convolved_crit_edge" ], [ %1851, %then_bb17 ], [ %1039, %"for convolved.s1.r19$y.preheader" ], [ %1978, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2054 = phi <32 x i32> [ %1038, %"next_bb18.consume convolved_crit_edge" ], [ %1850, %then_bb17 ], [ %1038, %"for convolved.s1.r19$y.preheader" ], [ %1977, %"end for convolved.s1.r19$x.loopexit.us" ]
  %2055 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2053, <32 x i32> %2054)
  %2056 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2051, <32 x i32> %2052)
  %2057 = shufflevector <64 x i32> %2055, <64 x i32> %2056, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2058 = sext <128 x i32> %2057 to <128 x i64>
  %2059 = mul nsw <128 x i64> %2058, %184
  %2060 = ashr <128 x i64> %2059, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2061 = add nsw <128 x i64> %2060, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a34 = ashr <128 x i64> %2061, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2062 = icmp slt <128 x i64> %a34, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a33 = select <128 x i1> %2062, <128 x i64> %a34, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2063 = icmp sgt <128 x i64> %a33, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2064 = select <128 x i1> %2063, <128 x i64> %a33, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2065 = trunc <128 x i64> %2064 to <128 x i32>
  %2066 = shufflevector <128 x i32> %2065, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2067 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2066, i32 %output_shift) #11
  %2068 = shufflevector <128 x i32> %2065, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2069 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2068, i32 %output_shift) #11
  %2070 = shufflevector <128 x i32> %2065, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2071 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2070, i32 %output_shift) #11
  %2072 = shufflevector <128 x i32> %2065, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2073 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2072, i32 %output_shift) #11
  %2074 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2069, <32 x i32> %2067)
  %2075 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2073, <32 x i32> %2071)
  %2076 = shufflevector <64 x i32> %2074, <64 x i32> %2075, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2077 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2066, i32 %186) #11
  %2078 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2068, i32 %186) #11
  %2079 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2070, i32 %186) #11
  %2080 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2072, i32 %186) #11
  %2081 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2078, <32 x i32> %2077)
  %2082 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2080, <32 x i32> %2079)
  %2083 = shufflevector <64 x i32> %2081, <64 x i32> %2082, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2084 = and <128 x i32> %2083, %185
  %2085 = add nsw <128 x i32> %2084, %2076
  %2086 = shufflevector <128 x i32> %2085, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2087 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2086, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2088 = shufflevector <128 x i32> %2085, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2089 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2088, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2090 = shufflevector <128 x i32> %2085, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2091 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2090, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2092 = shufflevector <128 x i32> %2085, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2093 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2092, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2094 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2087, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2095 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2089, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2096 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2091, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2097 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2093, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2098 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2095, <32 x i32> %2094)
  %2099 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2097, <32 x i32> %2096)
  %2100 = shufflevector <64 x i32> %2098, <64 x i32> %2099, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2101 = trunc <128 x i32> %2100 to <128 x i16>
  %2102 = bitcast <128 x i16> %2101 to <64 x i32>
  %2103 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2102, <64 x i32> %190) #11
  %2104 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2103)
  %2105 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2103)
  %2106 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2105, <32 x i32> %1072) #11
  %2107 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2104, <32 x i32> %1071) #11
  %2108 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2106, <32 x i32> %1074) #11
  %2109 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2107, <32 x i32> %1073) #11
  %2110 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2109, <32 x i32> %2108)
  %2111 = bitcast <64 x i32> %2110 to <128 x i16>
  %2112 = trunc <128 x i16> %2111 to <128 x i8>
  %2113 = bitcast <128 x i8> %2112 to <32 x i32>
  %2114 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2113, <32 x i32> %193) #11
  %2115 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2114, <32 x i32> %196) #11
  %2116 = mul nsw i32 %.pre-phi5436, %21
  %2117 = add nsw i32 %2116, %1076
  %2118 = getelementptr inbounds i8, i8* %17, i32 %2117
  %2119 = bitcast i8* %2118 to <32 x i32>*
  store <32 x i32> %2115, <32 x i32>* %2119, align 1, !tbaa !199
  %2120 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2049, <32 x i32> %2050)
  %2121 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2047, <32 x i32> %2048)
  %2122 = shufflevector <64 x i32> %2120, <64 x i32> %2121, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2123 = sext <128 x i32> %2122 to <128 x i64>
  %2124 = mul nsw <128 x i64> %2123, %184
  %2125 = ashr <128 x i64> %2124, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2126 = add nsw <128 x i64> %2125, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a38 = ashr <128 x i64> %2126, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2127 = icmp slt <128 x i64> %a38, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a37 = select <128 x i1> %2127, <128 x i64> %a38, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2128 = icmp sgt <128 x i64> %a37, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2129 = select <128 x i1> %2128, <128 x i64> %a37, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2130 = trunc <128 x i64> %2129 to <128 x i32>
  %2131 = shufflevector <128 x i32> %2130, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2132 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2131, i32 %output_shift) #11
  %2133 = shufflevector <128 x i32> %2130, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2134 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2133, i32 %output_shift) #11
  %2135 = shufflevector <128 x i32> %2130, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2136 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2135, i32 %output_shift) #11
  %2137 = shufflevector <128 x i32> %2130, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2138 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2137, i32 %output_shift) #11
  %2139 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2134, <32 x i32> %2132)
  %2140 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2138, <32 x i32> %2136)
  %2141 = shufflevector <64 x i32> %2139, <64 x i32> %2140, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2142 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2131, i32 %186) #11
  %2143 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2133, i32 %186) #11
  %2144 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2135, i32 %186) #11
  %2145 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2137, i32 %186) #11
  %2146 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2143, <32 x i32> %2142)
  %2147 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2145, <32 x i32> %2144)
  %2148 = shufflevector <64 x i32> %2146, <64 x i32> %2147, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2149 = and <128 x i32> %2148, %185
  %2150 = add nsw <128 x i32> %2149, %2141
  %2151 = shufflevector <128 x i32> %2150, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2152 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2151, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2153 = shufflevector <128 x i32> %2150, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2154 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2153, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2155 = shufflevector <128 x i32> %2150, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2156 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2155, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2157 = shufflevector <128 x i32> %2150, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2158 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2157, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2159 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2152, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2160 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2154, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2161 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2156, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2162 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2158, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2163 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2160, <32 x i32> %2159)
  %2164 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2162, <32 x i32> %2161)
  %2165 = shufflevector <64 x i32> %2163, <64 x i32> %2164, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2166 = trunc <128 x i32> %2165 to <128 x i16>
  %2167 = bitcast <128 x i16> %2166 to <64 x i32>
  %2168 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2167, <64 x i32> %190) #11
  %2169 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2168)
  %2170 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2168)
  %2171 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2170, <32 x i32> %1072) #11
  %2172 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2169, <32 x i32> %1071) #11
  %2173 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2171, <32 x i32> %1074) #11
  %2174 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2172, <32 x i32> %1073) #11
  %2175 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2174, <32 x i32> %2173)
  %2176 = bitcast <64 x i32> %2175 to <128 x i16>
  %2177 = trunc <128 x i16> %2176 to <128 x i8>
  %2178 = bitcast <128 x i8> %2177 to <32 x i32>
  %2179 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2178, <32 x i32> %193) #11
  %2180 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2179, <32 x i32> %196) #11
  %2181 = mul nsw i32 %.pre-phi5438, %21
  %2182 = add nsw i32 %2181, %1076
  %2183 = getelementptr inbounds i8, i8* %17, i32 %2182
  %2184 = bitcast i8* %2183 to <32 x i32>*
  store <32 x i32> %2180, <32 x i32>* %2184, align 1, !tbaa !199
  %2185 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.lcssa5460.lcssa5493, <32 x i32> %.lcssa5461.lcssa5492)
  %2186 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.lcssa5458.lcssa5495, <32 x i32> %.lcssa5459.lcssa5494)
  %2187 = shufflevector <64 x i32> %2185, <64 x i32> %2186, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2188 = sext <128 x i32> %2187 to <128 x i64>
  %2189 = mul nsw <128 x i64> %2188, %184
  %2190 = ashr <128 x i64> %2189, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2191 = add nsw <128 x i64> %2190, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a42 = ashr <128 x i64> %2191, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2192 = icmp slt <128 x i64> %a42, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a41 = select <128 x i1> %2192, <128 x i64> %a42, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2193 = icmp sgt <128 x i64> %a41, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2194 = select <128 x i1> %2193, <128 x i64> %a41, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2195 = trunc <128 x i64> %2194 to <128 x i32>
  %2196 = shufflevector <128 x i32> %2195, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2197 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2196, i32 %output_shift) #11
  %2198 = shufflevector <128 x i32> %2195, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2199 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2198, i32 %output_shift) #11
  %2200 = shufflevector <128 x i32> %2195, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2201 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2200, i32 %output_shift) #11
  %2202 = shufflevector <128 x i32> %2195, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2203 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2202, i32 %output_shift) #11
  %2204 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2199, <32 x i32> %2197)
  %2205 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2203, <32 x i32> %2201)
  %2206 = shufflevector <64 x i32> %2204, <64 x i32> %2205, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2207 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2196, i32 %186) #11
  %2208 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2198, i32 %186) #11
  %2209 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2200, i32 %186) #11
  %2210 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2202, i32 %186) #11
  %2211 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2208, <32 x i32> %2207)
  %2212 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2210, <32 x i32> %2209)
  %2213 = shufflevector <64 x i32> %2211, <64 x i32> %2212, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2214 = and <128 x i32> %2213, %185
  %2215 = add nsw <128 x i32> %2214, %2206
  %2216 = shufflevector <128 x i32> %2215, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2217 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2216, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2218 = shufflevector <128 x i32> %2215, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2219 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2218, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2220 = shufflevector <128 x i32> %2215, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2221 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2220, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2222 = shufflevector <128 x i32> %2215, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2223 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2222, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2224 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2217, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2225 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2219, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2226 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2221, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2227 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2223, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2228 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2225, <32 x i32> %2224)
  %2229 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2227, <32 x i32> %2226)
  %2230 = shufflevector <64 x i32> %2228, <64 x i32> %2229, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2231 = trunc <128 x i32> %2230 to <128 x i16>
  %2232 = bitcast <128 x i16> %2231 to <64 x i32>
  %2233 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2232, <64 x i32> %190) #11
  %2234 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2233)
  %2235 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2233)
  %2236 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2235, <32 x i32> %1072) #11
  %2237 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2234, <32 x i32> %1071) #11
  %2238 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2236, <32 x i32> %1074) #11
  %2239 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2237, <32 x i32> %1073) #11
  %2240 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2239, <32 x i32> %2238)
  %2241 = bitcast <64 x i32> %2240 to <128 x i16>
  %2242 = trunc <128 x i16> %2241 to <128 x i8>
  %2243 = bitcast <128 x i8> %2242 to <32 x i32>
  %2244 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2243, <32 x i32> %193) #11
  %2245 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2244, <32 x i32> %196) #11
  %2246 = add nsw i32 %2116, %1078
  %2247 = getelementptr inbounds i8, i8* %17, i32 %2246
  %2248 = bitcast i8* %2247 to <32 x i32>*
  store <32 x i32> %2245, <32 x i32>* %2248, align 1, !tbaa !199
  %2249 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.lcssa5456.lcssa5497, <32 x i32> %.lcssa5457.lcssa5496)
  %2250 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.lcssa5454.lcssa5499, <32 x i32> %.lcssa5455.lcssa5498)
  %2251 = shufflevector <64 x i32> %2249, <64 x i32> %2250, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2252 = sext <128 x i32> %2251 to <128 x i64>
  %2253 = mul nsw <128 x i64> %2252, %184
  %2254 = ashr <128 x i64> %2253, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2255 = add nsw <128 x i64> %2254, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a46 = ashr <128 x i64> %2255, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2256 = icmp slt <128 x i64> %a46, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a45 = select <128 x i1> %2256, <128 x i64> %a46, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2257 = icmp sgt <128 x i64> %a45, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2258 = select <128 x i1> %2257, <128 x i64> %a45, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2259 = trunc <128 x i64> %2258 to <128 x i32>
  %2260 = shufflevector <128 x i32> %2259, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2261 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2260, i32 %output_shift) #11
  %2262 = shufflevector <128 x i32> %2259, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2263 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2262, i32 %output_shift) #11
  %2264 = shufflevector <128 x i32> %2259, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2265 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2264, i32 %output_shift) #11
  %2266 = shufflevector <128 x i32> %2259, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2267 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2266, i32 %output_shift) #11
  %2268 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2263, <32 x i32> %2261)
  %2269 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2267, <32 x i32> %2265)
  %2270 = shufflevector <64 x i32> %2268, <64 x i32> %2269, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2271 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2260, i32 %186) #11
  %2272 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2262, i32 %186) #11
  %2273 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2264, i32 %186) #11
  %2274 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2266, i32 %186) #11
  %2275 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2272, <32 x i32> %2271)
  %2276 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2274, <32 x i32> %2273)
  %2277 = shufflevector <64 x i32> %2275, <64 x i32> %2276, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2278 = and <128 x i32> %2277, %185
  %2279 = add nsw <128 x i32> %2278, %2270
  %2280 = shufflevector <128 x i32> %2279, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2281 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2280, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2282 = shufflevector <128 x i32> %2279, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2283 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2282, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2284 = shufflevector <128 x i32> %2279, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2285 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2284, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2286 = shufflevector <128 x i32> %2279, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2287 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %2286, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %2288 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2281, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2289 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2283, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2290 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2285, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2291 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %2287, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %2292 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2289, <32 x i32> %2288)
  %2293 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2291, <32 x i32> %2290)
  %2294 = shufflevector <64 x i32> %2292, <64 x i32> %2293, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2295 = trunc <128 x i32> %2294 to <128 x i16>
  %2296 = bitcast <128 x i16> %2295 to <64 x i32>
  %2297 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %2296, <64 x i32> %190) #11
  %2298 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2297)
  %2299 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2297)
  %2300 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2299, <32 x i32> %1072) #11
  %2301 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %2298, <32 x i32> %1071) #11
  %2302 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2300, <32 x i32> %1074) #11
  %2303 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %2301, <32 x i32> %1073) #11
  %2304 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2303, <32 x i32> %2302)
  %2305 = bitcast <64 x i32> %2304 to <128 x i16>
  %2306 = trunc <128 x i16> %2305 to <128 x i8>
  %2307 = bitcast <128 x i8> %2306 to <32 x i32>
  %2308 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %2307, <32 x i32> %193) #11
  %2309 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %2308, <32 x i32> %196) #11
  %2310 = add nsw i32 %2181, %1078
  %2311 = getelementptr inbounds i8, i8* %17, i32 %2310
  %2312 = bitcast i8* %2311 to <32 x i32>*
  store <32 x i32> %2309, <32 x i32>* %2312, align 1, !tbaa !199
  %2313 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not660 = icmp eq i32 %2313, %147
  br i1 %.not660, label %"end for output.s0.x.xo.loopexit", label %"for output.s0.x.xo"

then_bb31:                                        ; preds = %next_bb
  %t2330 = icmp slt i32 %a93, 0
  %t2332 = icmp slt i32 %stride_x, 0
  %2314 = add nsw i32 %4, -1
  %2315 = mul nsw i32 %2314, %a93
  %t2333 = select i1 %t2330, i32 %2315, i32 0
  %t2334.s = select i1 %t2332, i32 %20, i32 1
  %t2335 = icmp slt i32 %a88, 0
  %t2337 = icmp slt i32 %stride_y, 0
  %2316 = add nsw i32 %6, -1
  %2317 = mul nsw i32 %2316, %a88
  %t2338 = select i1 %t2335, i32 %2317, i32 0
  %t2339.s = select i1 %t2337, i32 %23, i32 1
  %2318 = icmp eq i32 %4, 3
  %2319 = icmp eq i32 %6, 3
  %t2340 = and i1 %2318, %2319
  %t2325 = icmp eq i32 %depth_multiplier, 1
  %a88.op633 = shl i32 %a88, 1
  %2320 = select i1 %t2335, i32 %a88.op633, i32 0
  %2321 = select i1 %t2340, i32 %2320, i32 %t2338
  %2322 = add i32 %22, -1
  %2323 = add i32 %2322, %t2339.s
  %2324 = mul nsw i32 %2323, %stride_y
  %b61 = add nsw i32 %2324, %2321
  %a93.op634 = shl i32 %a93, 1
  %2325 = select i1 %t2330, i32 %a93.op634, i32 0
  %2326 = select i1 %t2340, i32 %2325, i32 %t2333
  %2327 = add i32 %19, -1
  %2328 = add i32 %2327, %t2334.s
  %2329 = mul nsw i32 %2328, %stride_x
  %b60 = add nsw i32 %2329, %2326
  %2330 = select i1 %t2335, i32 0, i32 %2317
  %2331 = add nsw i32 %23, -1
  %2332 = select i1 %t2337, i32 0, i32 %2331
  %2333 = add nsw i32 %2332, %22
  %2334 = mul nsw i32 %2333, %stride_y
  %b66 = add nsw i32 %2334, %2330
  %2335 = select i1 %t2330, i32 0, i32 %2315
  %2336 = add nsw i32 %20, -1
  %2337 = select i1 %t2332, i32 0, i32 %2336
  %2338 = add nsw i32 %2337, %19
  %2339 = mul nsw i32 %2338, %stride_x
  %b62 = add nsw i32 %2339, %2335
  %2340 = mul nsw i32 %13, %12
  %2341 = mul nsw i32 %16, %14
  %2342 = mul nsw i32 %11, %10
  %2343 = add i32 %2340, %2342
  %t2326 = add i32 %2343, %2341
  %2344 = add nuw nsw i32 %3, 127
  %2345 = ashr i32 %2344, 7
  %b55 = add nsw i32 %3, -128
  %2346 = icmp sgt i32 %4, 0
  %2347 = icmp sgt i32 %6, 0
  %2348 = select i1 %2347, i32 %6, i32 0
  %.op5361 = shl i32 %4, 8
  %2349 = select i1 %2346, i32 %.op5361, i32 0
  %2350 = mul i32 %2349, %2348
  %2351 = or i32 %2350, 134
  %2352 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %2353 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %2354 = shufflevector <64 x i8> %2353, <64 x i8> undef, <64 x i32> zeroinitializer
  %2355 = zext <64 x i8> %2354 to <64 x i16>
  %2356 = bitcast [512 x i32]* %offset_c615 to <32 x i32>*
  %2357 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 32
  %2358 = bitcast i32* %2357 to <32 x i32>*
  %2359 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 64
  %2360 = bitcast i32* %2359 to <32 x i32>*
  %2361 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 96
  %2362 = bitcast i32* %2361 to <32 x i32>*
  %2363 = bitcast i8* %0 to i32*
  %2364 = zext i8 %input_zero to i32
  %2365 = insertelement <128 x i32> undef, i32 %2364, i32 0
  %2366 = shufflevector <128 x i32> %2365, <128 x i32> undef, <32 x i32> zeroinitializer
  %a58 = add nsw i32 %2329, %t2333
  %2367 = icmp slt i32 %t2333, %2326
  %t2348 = select i1 %2367, i32 %a58, i32 %b60
  %a59 = add nsw i32 %2324, %t2338
  %2368 = icmp slt i32 %t2338, %2321
  %t2346 = select i1 %2368, i32 %a59, i32 %b61
  %2369 = icmp sgt i32 %a93, 0
  %2370 = select i1 %2369, i32 %a93, i32 0
  %2371 = shl nuw nsw i32 %2370, 1
  %2372 = select i1 %t2340, i32 %2371, i32 %2335
  %a60 = add nsw i32 %2339, %2372
  %2373 = icmp sgt i32 %2372, %2335
  %2374 = select i1 %2373, i32 %a60, i32 %b62
  %a70 = sub nsw i32 %2374, %t2348
  %2375 = icmp sgt i32 %a88, 0
  %2376 = select i1 %2375, i32 %a88, i32 0
  %2377 = shl nuw nsw i32 %2376, 1
  %2378 = select i1 %t2340, i32 %2377, i32 %2330
  %a64 = add nsw i32 %2334, %2378
  %2379 = icmp sgt i32 %2378, %2330
  %2380 = select i1 %2379, i32 %a64, i32 %b66
  %a71 = sub nsw i32 %2380, %t2346
  %t2351 = sub nsw i32 %b62, %a58
  %t2350 = sub nsw i32 %b66, %a59
  %2381 = icmp sgt i32 %15, 0
  %2382 = icmp sgt i32 %a70, -1
  %t2538 = select i1 %2382, i32 %a70, i32 -1
  %2383 = icmp sgt i32 %a71, -1
  %t2539 = select i1 %2383, i32 %a71, i32 -1
  %2384 = add nsw i32 %t2539, 1
  %2385 = shl i32 %t2538, 7
  %t2540 = add i32 %2385, 128
  %2386 = mul i32 %t2540, %2384
  %2387 = add i32 %2386, 131
  %2388 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %2389 = icmp sgt i32 %t2350, -1
  %2390 = sub i32 %a59, %t2346
  %2391 = add nsw i32 %a70, 1
  %2392 = sub i32 %a58, %t2348
  %2393 = icmp sgt i32 %t2351, -1
  %2394 = icmp eq i32 %depth_multiplier, 0
  %t2543 = select i1 %2394, <128 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <128 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %2395 = insertelement <128 x i32> undef, i32 %depth_multiplier, i32 0
  %2396 = shufflevector <128 x i32> %2395, <128 x i32> undef, <128 x i32> zeroinitializer
  %2397 = sub nsw <128 x i32> %2396, %t2543
  %2398 = xor i32 %depth_multiplier.lobit, -1
  %2399 = sub nsw i32 %2398, %depth_multiplier.lobit
  %2400 = insertelement <128 x i32> undef, i32 %2399, i32 0
  %2401 = shufflevector <128 x i32> %2400, <128 x i32> undef, <128 x i32> zeroinitializer
  %2402 = xor <128 x i32> %t2543, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %.neg5207 = mul i32 %24, %22
  %.neg5208 = mul i32 %21, %19
  %.neg5209 = mul i32 %25, %14
  %2403 = icmp sgt i32 %23, 0
  %2404 = sub i32 %a88.op633, %t2346
  %2405 = sub i32 %a88, %t2346
  %2406 = icmp sgt i32 %20, 0
  %2407 = bitcast [128 x i32]* %sum_filter617 to <32 x i32>*
  %2408 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 32
  %2409 = bitcast i32* %2408 to <32 x i32>*
  %2410 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 64
  %2411 = bitcast i32* %2410 to <32 x i32>*
  %2412 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 96
  %2413 = bitcast i32* %2412 to <32 x i32>*
  %2414 = sub nsw i32 %a93, %t2348
  %2415 = sub nsw i32 %a93.op634, %t2348
  %2416 = insertelement <128 x i32> undef, i32 %output_multiplier, i32 0
  %2417 = shufflevector <128 x i32> %2416, <128 x i32> undef, <128 x i32> zeroinitializer
  %2418 = sext <128 x i32> %2417 to <128 x i64>
  %.not640 = icmp eq i32 %output_shift, 0
  %2419 = select i1 %.not640, <128 x i32> zeroinitializer, <128 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2420 = add i32 %output_shift, -1
  %2421 = zext i8 %output_zero to i16
  %2422 = insertelement <128 x i16> undef, i16 %2421, i32 0
  %2423 = shufflevector <128 x i16> %2422, <128 x i16> undef, <128 x i32> zeroinitializer
  %2424 = bitcast <128 x i16> %2423 to <64 x i32>
  %2425 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %2426 = shufflevector <128 x i8> %2425, <128 x i8> undef, <128 x i32> zeroinitializer
  %2427 = bitcast <128 x i8> %2426 to <32 x i32>
  %2428 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %2429 = shufflevector <128 x i8> %2428, <128 x i8> undef, <128 x i32> zeroinitializer
  %2430 = bitcast <128 x i8> %2429 to <32 x i32>
  %reass.add5211 = add i32 %.neg5207, %.neg5208
  %reass.add5212 = add i32 %reass.add5211, %.neg5209
  %2431 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %.fca.1.gep.promoted = load i32, i32* %.fca.1.gep, align 4, !tbaa !95
  %.fca.2.gep.promoted = load i32, i32* %.fca.2.gep, align 4
  %2432 = bitcast [512 x i32]* %offset_c615 to i8*
  %2433 = bitcast [512 x i32]* %offset_c615 to i8*
  %2434 = bitcast [512 x i32]* %offset_c615 to i8*
  %2435 = add i32 %4, -1
  %xtraiter5626 = and i32 %4, 3
  %2436 = icmp ult i32 %2435, 3
  %unroll_iter5629 = and i32 %4, -4
  %lcmp.mod5628.not = icmp eq i32 %xtraiter5626, 0
  %xtraiter5631 = and i32 %4, 3
  %2437 = icmp ult i32 %2435, 3
  %unroll_iter5641 = and i32 %4, -4
  %lcmp.mod5636.not = icmp eq i32 %xtraiter5631, 0
  %2438 = or i32 %t2350, %t2351
  %2439 = icmp slt i32 %2438, 0
  %xtraiter5643 = and i32 %4, 1
  %2440 = icmp eq i32 %2435, 0
  %unroll_iter5649 = and i32 %4, -2
  %lcmp.mod5648.not = icmp eq i32 %xtraiter5643, 0
  br label %"for output.s0.c.co33"

next_bb32:                                        ; preds = %next_bb
  %2441 = icmp sgt i32 %3, 0
  br i1 %2441, label %if.end.i1223, label %call_destructor.exit741

"for output.s0.c.co33":                           ; preds = %then_bb31, %"end for output.s0.b.rebased61"
  %2442 = phi i32 [ %.fca.2.gep.promoted, %then_bb31 ], [ %2446, %"end for output.s0.b.rebased61" ]
  %2443 = phi i32 [ %.fca.1.gep.promoted, %then_bb31 ], [ %2447, %"end for output.s0.b.rebased61" ]
  %.3 = phi i8* [ null, %then_bb31 ], [ %.4, %"end for output.s0.b.rebased61" ]
  %output.s0.c.co35 = phi i32 [ 0, %then_bb31 ], [ %2735, %"end for output.s0.b.rebased61" ]
  %a53 = shl nsw i32 %output.s0.c.co35, 7
  %2444 = icmp slt i32 %a53, %b55
  %output.s0.c.c.base36 = select i1 %2444, i32 %a53, i32 %b55
  %cmp.i1088 = icmp ult i32 %2443, %2351
  %2445 = load i8*, i8** %.fca.0.gep, align 4, !tbaa !97
  br i1 %cmp.i1088, label %if.then.i1091, label %pseudostack_alloc.exit1104, !prof !99

if.then.i1091:                                    ; preds = %"for output.s0.c.co33"
  %tobool1.not.i1090 = icmp ne i8* %2445, null
  %cmp2.i1093 = icmp ugt i32 %2442, 16384
  %or.cond5137 = and i1 %tobool1.not.i1090, %cmp2.i1093
  br i1 %or.cond5137, label %if.then3.i1095, label %if.end.i1099

if.then3.i1095:                                   ; preds = %if.then.i1091
  call void @halide_free(i8* null, i8* nonnull %2445) #14
  br label %if.end.i1099

if.end.i1099:                                     ; preds = %if.then3.i1095, %if.then.i1091
  %add.i1097 = add i32 %2442, %2351
  %cmp7.i1098 = icmp ugt i32 %add.i1097, 16384
  br i1 %cmp7.i1098, label %if.then8.i1101, label %if.end11.i1103

if.then8.i1101:                                   ; preds = %if.end.i1099
  %call.i1100 = call i8* @halide_malloc(i8* null, i32 %2351) #14
  br label %if.end11.i1103

if.end11.i1103:                                   ; preds = %if.then8.i1101, %if.end.i1099
  %storemerge.i1102 = phi i8* [ %call.i1100, %if.then8.i1101 ], [ null, %if.end.i1099 ]
  store i8* %storemerge.i1102, i8** %.fca.0.gep, align 4, !tbaa !97
  br label %pseudostack_alloc.exit1104

pseudostack_alloc.exit1104:                       ; preds = %"for output.s0.c.co33", %if.end11.i1103
  %2446 = phi i32 [ %add.i1097, %if.end11.i1103 ], [ %2442, %"for output.s0.c.co33" ]
  %2447 = phi i32 [ %2351, %if.end11.i1103 ], [ %2443, %"for output.s0.c.co33" ]
  %2448 = phi i8* [ %storemerge.i1102, %if.end11.i1103 ], [ %2445, %"for output.s0.c.co33" ]
  %2449 = bitcast i8* %2448 to i16*
  %.not635 = icmp eq i8* %2448, null
  br i1 %.not635, label %then_bb38, label %"produce filter_zeroed40", !prof !100

then_bb38:                                        ; preds = %pseudostack_alloc.exit1104
  %2450 = alloca i8*, i32 %2351, align 128
  %2451 = bitcast i8** %2450 to i16*
  store i8** %2450, i8*** %2352, align 4
  br label %"produce filter_zeroed40"

"produce filter_zeroed40":                        ; preds = %pseudostack_alloc.exit1104, %then_bb38
  %filter_zeroed39 = phi i16* [ %2451, %then_bb38 ], [ %2449, %pseudostack_alloc.exit1104 ]
  br i1 %2347, label %"for filter_zeroed.s0.y41.preheader", label %"consume sum_filter57.critedge", !prof !101

"for filter_zeroed.s0.y41.preheader":             ; preds = %"produce filter_zeroed40"
  br i1 %2346, label %"for filter_zeroed.s0.y41.us", label %"for sum_filter.s1.r19$y51.preheader.thread", !prof !101

"for sum_filter.s1.r19$y51.preheader.thread":     ; preds = %"for filter_zeroed.s0.y41.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2433, i8 0, i64 512, i1 false)
  br label %"consume sum_filter57"

"for filter_zeroed.s0.y41.us":                    ; preds = %"for filter_zeroed.s0.y41.preheader", %"end for filter_zeroed.s0.x45.loopexit.us"
  %filter_zeroed.s0.y43.us = phi i32 [ %2550, %"end for filter_zeroed.s0.x45.loopexit.us" ], [ 0, %"for filter_zeroed.s0.y41.preheader" ]
  %2452 = mul nsw i32 %filter_zeroed.s0.y43.us, %7
  %2453 = add nsw i32 %2452, %output.s0.c.c.base36
  %2454 = mul nsw i32 %filter_zeroed.s0.y43.us, %4
  br i1 %2436, label %"end for filter_zeroed.s0.x45.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x44.us"

"for filter_zeroed.s0.x44.us":                    ; preds = %"for filter_zeroed.s0.y41.us", %"for filter_zeroed.s0.x44.us"
  %filter_zeroed.s0.x46.us = phi i32 [ %2530, %"for filter_zeroed.s0.x44.us" ], [ 0, %"for filter_zeroed.s0.y41.us" ]
  %niter5630 = phi i32 [ %niter5630.nsub.3, %"for filter_zeroed.s0.x44.us" ], [ %unroll_iter5629, %"for filter_zeroed.s0.y41.us" ]
  %2455 = mul nsw i32 %filter_zeroed.s0.x46.us, %5
  %2456 = add nsw i32 %2453, %2455
  %2457 = getelementptr inbounds i8, i8* %1, i32 %2456
  %2458 = bitcast i8* %2457 to <64 x i8>*
  %2459 = load <64 x i8>, <64 x i8>* %2458, align 1, !tbaa !102
  %2460 = zext <64 x i8> %2459 to <64 x i16>
  %2461 = sub nsw <64 x i16> %2460, %2355
  %2462 = add nsw i32 %filter_zeroed.s0.x46.us, %2454
  %2463 = shl nsw i32 %2462, 7
  %2464 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2463
  %2465 = bitcast i16* %2464 to <64 x i16>*
  store <64 x i16> %2461, <64 x i16>* %2465, align 128, !tbaa !105
  %2466 = getelementptr inbounds i8, i8* %2457, i32 64
  %2467 = bitcast i8* %2466 to <64 x i8>*
  %2468 = load <64 x i8>, <64 x i8>* %2467, align 1, !tbaa !102
  %2469 = zext <64 x i8> %2468 to <64 x i16>
  %2470 = sub nsw <64 x i16> %2469, %2355
  %2471 = getelementptr inbounds i16, i16* %2464, i32 64
  %2472 = bitcast i16* %2471 to <64 x i16>*
  store <64 x i16> %2470, <64 x i16>* %2472, align 128, !tbaa !105
  %2473 = or i32 %filter_zeroed.s0.x46.us, 1
  %2474 = mul nsw i32 %2473, %5
  %2475 = add nsw i32 %2453, %2474
  %2476 = getelementptr inbounds i8, i8* %1, i32 %2475
  %2477 = bitcast i8* %2476 to <64 x i8>*
  %2478 = load <64 x i8>, <64 x i8>* %2477, align 1, !tbaa !102
  %2479 = zext <64 x i8> %2478 to <64 x i16>
  %2480 = sub nsw <64 x i16> %2479, %2355
  %2481 = add nsw i32 %2473, %2454
  %2482 = shl nsw i32 %2481, 7
  %2483 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2482
  %2484 = bitcast i16* %2483 to <64 x i16>*
  store <64 x i16> %2480, <64 x i16>* %2484, align 128, !tbaa !105
  %2485 = getelementptr inbounds i8, i8* %2476, i32 64
  %2486 = bitcast i8* %2485 to <64 x i8>*
  %2487 = load <64 x i8>, <64 x i8>* %2486, align 1, !tbaa !102
  %2488 = zext <64 x i8> %2487 to <64 x i16>
  %2489 = sub nsw <64 x i16> %2488, %2355
  %2490 = getelementptr inbounds i16, i16* %2483, i32 64
  %2491 = bitcast i16* %2490 to <64 x i16>*
  store <64 x i16> %2489, <64 x i16>* %2491, align 128, !tbaa !105
  %2492 = or i32 %filter_zeroed.s0.x46.us, 2
  %2493 = mul nsw i32 %2492, %5
  %2494 = add nsw i32 %2453, %2493
  %2495 = getelementptr inbounds i8, i8* %1, i32 %2494
  %2496 = bitcast i8* %2495 to <64 x i8>*
  %2497 = load <64 x i8>, <64 x i8>* %2496, align 1, !tbaa !102
  %2498 = zext <64 x i8> %2497 to <64 x i16>
  %2499 = sub nsw <64 x i16> %2498, %2355
  %2500 = add nsw i32 %2492, %2454
  %2501 = shl nsw i32 %2500, 7
  %2502 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2501
  %2503 = bitcast i16* %2502 to <64 x i16>*
  store <64 x i16> %2499, <64 x i16>* %2503, align 128, !tbaa !105
  %2504 = getelementptr inbounds i8, i8* %2495, i32 64
  %2505 = bitcast i8* %2504 to <64 x i8>*
  %2506 = load <64 x i8>, <64 x i8>* %2505, align 1, !tbaa !102
  %2507 = zext <64 x i8> %2506 to <64 x i16>
  %2508 = sub nsw <64 x i16> %2507, %2355
  %2509 = getelementptr inbounds i16, i16* %2502, i32 64
  %2510 = bitcast i16* %2509 to <64 x i16>*
  store <64 x i16> %2508, <64 x i16>* %2510, align 128, !tbaa !105
  %2511 = or i32 %filter_zeroed.s0.x46.us, 3
  %2512 = mul nsw i32 %2511, %5
  %2513 = add nsw i32 %2453, %2512
  %2514 = getelementptr inbounds i8, i8* %1, i32 %2513
  %2515 = bitcast i8* %2514 to <64 x i8>*
  %2516 = load <64 x i8>, <64 x i8>* %2515, align 1, !tbaa !102
  %2517 = zext <64 x i8> %2516 to <64 x i16>
  %2518 = sub nsw <64 x i16> %2517, %2355
  %2519 = add nsw i32 %2511, %2454
  %2520 = shl nsw i32 %2519, 7
  %2521 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2520
  %2522 = bitcast i16* %2521 to <64 x i16>*
  store <64 x i16> %2518, <64 x i16>* %2522, align 128, !tbaa !105
  %2523 = getelementptr inbounds i8, i8* %2514, i32 64
  %2524 = bitcast i8* %2523 to <64 x i8>*
  %2525 = load <64 x i8>, <64 x i8>* %2524, align 1, !tbaa !102
  %2526 = zext <64 x i8> %2525 to <64 x i16>
  %2527 = sub nsw <64 x i16> %2526, %2355
  %2528 = getelementptr inbounds i16, i16* %2521, i32 64
  %2529 = bitcast i16* %2528 to <64 x i16>*
  store <64 x i16> %2527, <64 x i16>* %2529, align 128, !tbaa !105
  %2530 = add nuw nsw i32 %filter_zeroed.s0.x46.us, 4
  %niter5630.nsub.3 = add i32 %niter5630, -4
  %niter5630.ncmp.3 = icmp eq i32 %niter5630.nsub.3, 0
  br i1 %niter5630.ncmp.3, label %"end for filter_zeroed.s0.x45.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x44.us"

"end for filter_zeroed.s0.x45.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x44.us", %"for filter_zeroed.s0.y41.us"
  %filter_zeroed.s0.x46.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y41.us" ], [ %2530, %"for filter_zeroed.s0.x44.us" ]
  br i1 %lcmp.mod5628.not, label %"end for filter_zeroed.s0.x45.loopexit.us", label %"for filter_zeroed.s0.x44.us.epil"

"for filter_zeroed.s0.x44.us.epil":               ; preds = %"end for filter_zeroed.s0.x45.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x44.us.epil"
  %filter_zeroed.s0.x46.us.epil = phi i32 [ %2549, %"for filter_zeroed.s0.x44.us.epil" ], [ %filter_zeroed.s0.x46.us.unr, %"end for filter_zeroed.s0.x45.loopexit.us.unr-lcssa" ]
  %epil.iter5627 = phi i32 [ %epil.iter5627.sub, %"for filter_zeroed.s0.x44.us.epil" ], [ %xtraiter5626, %"end for filter_zeroed.s0.x45.loopexit.us.unr-lcssa" ]
  %2531 = mul nsw i32 %filter_zeroed.s0.x46.us.epil, %5
  %2532 = add nsw i32 %2453, %2531
  %2533 = getelementptr inbounds i8, i8* %1, i32 %2532
  %2534 = bitcast i8* %2533 to <64 x i8>*
  %2535 = load <64 x i8>, <64 x i8>* %2534, align 1, !tbaa !102
  %2536 = zext <64 x i8> %2535 to <64 x i16>
  %2537 = sub nsw <64 x i16> %2536, %2355
  %2538 = add nsw i32 %filter_zeroed.s0.x46.us.epil, %2454
  %2539 = shl nsw i32 %2538, 7
  %2540 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2539
  %2541 = bitcast i16* %2540 to <64 x i16>*
  store <64 x i16> %2537, <64 x i16>* %2541, align 128, !tbaa !105
  %2542 = getelementptr inbounds i8, i8* %2533, i32 64
  %2543 = bitcast i8* %2542 to <64 x i8>*
  %2544 = load <64 x i8>, <64 x i8>* %2543, align 1, !tbaa !102
  %2545 = zext <64 x i8> %2544 to <64 x i16>
  %2546 = sub nsw <64 x i16> %2545, %2355
  %2547 = getelementptr inbounds i16, i16* %2540, i32 64
  %2548 = bitcast i16* %2547 to <64 x i16>*
  store <64 x i16> %2546, <64 x i16>* %2548, align 128, !tbaa !105
  %2549 = add nuw nsw i32 %filter_zeroed.s0.x46.us.epil, 1
  %epil.iter5627.sub = add i32 %epil.iter5627, -1
  %epil.iter5627.cmp.not = icmp eq i32 %epil.iter5627.sub, 0
  br i1 %epil.iter5627.cmp.not, label %"end for filter_zeroed.s0.x45.loopexit.us", label %"for filter_zeroed.s0.x44.us.epil", !llvm.loop !201

"end for filter_zeroed.s0.x45.loopexit.us":       ; preds = %"for filter_zeroed.s0.x44.us.epil", %"end for filter_zeroed.s0.x45.loopexit.us.unr-lcssa"
  %2550 = add nuw nsw i32 %filter_zeroed.s0.y43.us, 1
  %.not650.us = icmp eq i32 %2550, %6
  br i1 %.not650.us, label %"for sum_filter.s1.r19$y51.preheader", label %"for filter_zeroed.s0.y41.us"

"for sum_filter.s1.r19$y51.preheader":            ; preds = %"end for filter_zeroed.s0.x45.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2434, i8 0, i64 512, i1 false)
  br i1 %2346, label %"for sum_filter.s1.r19$y51.us", label %"consume sum_filter57", !prof !101

"for sum_filter.s1.r19$y51.us":                   ; preds = %"for sum_filter.s1.r19$y51.preheader", %"end for sum_filter.s1.r19$x55.loopexit.us"
  %.lcssa5259.us5266 = phi <32 x i32> [ %.lcssa5584, %"end for sum_filter.s1.r19$x55.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %.lcssa5257.us5264 = phi <32 x i32> [ %.lcssa5585, %"end for sum_filter.s1.r19$x55.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %.lcssa5255.us5262 = phi <32 x i32> [ %.lcssa5586, %"end for sum_filter.s1.r19$x55.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %.lcssa5253.us5260 = phi <32 x i32> [ %.lcssa5587, %"end for sum_filter.s1.r19$x55.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %"sum_filter.s1.r19$y53.us" = phi i32 [ %2660, %"end for sum_filter.s1.r19$x55.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y51.preheader" ]
  %2551 = mul nsw i32 %"sum_filter.s1.r19$y53.us", %4
  br i1 %2437, label %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x54.us"

"for sum_filter.s1.r19$x54.us":                   ; preds = %"for sum_filter.s1.r19$y51.us", %"for sum_filter.s1.r19$x54.us"
  %2552 = phi <32 x i32> [ %2634, %"for sum_filter.s1.r19$x54.us" ], [ %.lcssa5259.us5266, %"for sum_filter.s1.r19$y51.us" ]
  %2553 = phi <32 x i32> [ %2633, %"for sum_filter.s1.r19$x54.us" ], [ %.lcssa5257.us5264, %"for sum_filter.s1.r19$y51.us" ]
  %2554 = phi <32 x i32> [ %2632, %"for sum_filter.s1.r19$x54.us" ], [ %.lcssa5255.us5262, %"for sum_filter.s1.r19$y51.us" ]
  %2555 = phi <32 x i32> [ %2631, %"for sum_filter.s1.r19$x54.us" ], [ %.lcssa5253.us5260, %"for sum_filter.s1.r19$y51.us" ]
  %"sum_filter.s1.r19$x56.us" = phi i32 [ %2635, %"for sum_filter.s1.r19$x54.us" ], [ 0, %"for sum_filter.s1.r19$y51.us" ]
  %niter5642 = phi i32 [ %niter5642.nsub.3, %"for sum_filter.s1.r19$x54.us" ], [ %unroll_iter5641, %"for sum_filter.s1.r19$y51.us" ]
  %2556 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2554, <32 x i32> %2555)
  %2557 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2552, <32 x i32> %2553)
  %2558 = shufflevector <64 x i32> %2556, <64 x i32> %2557, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2559 = add nsw i32 %"sum_filter.s1.r19$x56.us", %2551
  %2560 = shl nsw i32 %2559, 7
  %2561 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2560
  %2562 = bitcast i16* %2561 to <32 x i32>*
  %2563 = load <32 x i32>, <32 x i32>* %2562, align 128, !tbaa !105
  %2564 = getelementptr inbounds i16, i16* %2561, i32 64
  %2565 = bitcast i16* %2564 to <32 x i32>*
  %2566 = load <32 x i32>, <32 x i32>* %2565, align 128, !tbaa !105
  %2567 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2566, <32 x i32> %2563)
  %2568 = bitcast <64 x i32> %2567 to <128 x i16>
  %2569 = sext <128 x i16> %2568 to <128 x i32>
  %2570 = add nsw <128 x i32> %2558, %2569
  %2571 = shufflevector <128 x i32> %2570, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2572 = shufflevector <128 x i32> %2570, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2573 = shufflevector <128 x i32> %2570, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2574 = shufflevector <128 x i32> %2570, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2575 = or i32 %"sum_filter.s1.r19$x56.us", 1
  %2576 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2572, <32 x i32> %2571)
  %2577 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2574, <32 x i32> %2573)
  %2578 = shufflevector <64 x i32> %2576, <64 x i32> %2577, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2579 = add nsw i32 %2575, %2551
  %2580 = shl nsw i32 %2579, 7
  %2581 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2580
  %2582 = bitcast i16* %2581 to <32 x i32>*
  %2583 = load <32 x i32>, <32 x i32>* %2582, align 128, !tbaa !105
  %2584 = getelementptr inbounds i16, i16* %2581, i32 64
  %2585 = bitcast i16* %2584 to <32 x i32>*
  %2586 = load <32 x i32>, <32 x i32>* %2585, align 128, !tbaa !105
  %2587 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2586, <32 x i32> %2583)
  %2588 = bitcast <64 x i32> %2587 to <128 x i16>
  %2589 = sext <128 x i16> %2588 to <128 x i32>
  %2590 = add nsw <128 x i32> %2578, %2589
  %2591 = shufflevector <128 x i32> %2590, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2592 = shufflevector <128 x i32> %2590, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2593 = shufflevector <128 x i32> %2590, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2594 = shufflevector <128 x i32> %2590, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2595 = or i32 %"sum_filter.s1.r19$x56.us", 2
  %2596 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2592, <32 x i32> %2591)
  %2597 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2594, <32 x i32> %2593)
  %2598 = shufflevector <64 x i32> %2596, <64 x i32> %2597, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2599 = add nsw i32 %2595, %2551
  %2600 = shl nsw i32 %2599, 7
  %2601 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2600
  %2602 = bitcast i16* %2601 to <32 x i32>*
  %2603 = load <32 x i32>, <32 x i32>* %2602, align 128, !tbaa !105
  %2604 = getelementptr inbounds i16, i16* %2601, i32 64
  %2605 = bitcast i16* %2604 to <32 x i32>*
  %2606 = load <32 x i32>, <32 x i32>* %2605, align 128, !tbaa !105
  %2607 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2606, <32 x i32> %2603)
  %2608 = bitcast <64 x i32> %2607 to <128 x i16>
  %2609 = sext <128 x i16> %2608 to <128 x i32>
  %2610 = add nsw <128 x i32> %2598, %2609
  %2611 = shufflevector <128 x i32> %2610, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2612 = shufflevector <128 x i32> %2610, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2613 = shufflevector <128 x i32> %2610, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2614 = shufflevector <128 x i32> %2610, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2615 = or i32 %"sum_filter.s1.r19$x56.us", 3
  %2616 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2612, <32 x i32> %2611)
  %2617 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2614, <32 x i32> %2613)
  %2618 = shufflevector <64 x i32> %2616, <64 x i32> %2617, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2619 = add nsw i32 %2615, %2551
  %2620 = shl nsw i32 %2619, 7
  %2621 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2620
  %2622 = bitcast i16* %2621 to <32 x i32>*
  %2623 = load <32 x i32>, <32 x i32>* %2622, align 128, !tbaa !105
  %2624 = getelementptr inbounds i16, i16* %2621, i32 64
  %2625 = bitcast i16* %2624 to <32 x i32>*
  %2626 = load <32 x i32>, <32 x i32>* %2625, align 128, !tbaa !105
  %2627 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2626, <32 x i32> %2623)
  %2628 = bitcast <64 x i32> %2627 to <128 x i16>
  %2629 = sext <128 x i16> %2628 to <128 x i32>
  %2630 = add nsw <128 x i32> %2618, %2629
  %2631 = shufflevector <128 x i32> %2630, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2632 = shufflevector <128 x i32> %2630, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2633 = shufflevector <128 x i32> %2630, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2634 = shufflevector <128 x i32> %2630, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2635 = add nuw nsw i32 %"sum_filter.s1.r19$x56.us", 4
  %niter5642.nsub.3 = add i32 %niter5642, -4
  %niter5642.ncmp.3 = icmp eq i32 %niter5642.nsub.3, 0
  br i1 %niter5642.ncmp.3, label %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x54.us"

"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x54.us", %"for sum_filter.s1.r19$y51.us"
  %.lcssa5587.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y51.us" ], [ %2631, %"for sum_filter.s1.r19$x54.us" ]
  %.lcssa5586.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y51.us" ], [ %2632, %"for sum_filter.s1.r19$x54.us" ]
  %.lcssa5585.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y51.us" ], [ %2633, %"for sum_filter.s1.r19$x54.us" ]
  %.lcssa5584.ph = phi <32 x i32> [ undef, %"for sum_filter.s1.r19$y51.us" ], [ %2634, %"for sum_filter.s1.r19$x54.us" ]
  %.unr = phi <32 x i32> [ %.lcssa5259.us5266, %"for sum_filter.s1.r19$y51.us" ], [ %2634, %"for sum_filter.s1.r19$x54.us" ]
  %.unr5633 = phi <32 x i32> [ %.lcssa5257.us5264, %"for sum_filter.s1.r19$y51.us" ], [ %2633, %"for sum_filter.s1.r19$x54.us" ]
  %.unr5634 = phi <32 x i32> [ %.lcssa5255.us5262, %"for sum_filter.s1.r19$y51.us" ], [ %2632, %"for sum_filter.s1.r19$x54.us" ]
  %.unr5635 = phi <32 x i32> [ %.lcssa5253.us5260, %"for sum_filter.s1.r19$y51.us" ], [ %2631, %"for sum_filter.s1.r19$x54.us" ]
  %"sum_filter.s1.r19$x56.us.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y51.us" ], [ %2635, %"for sum_filter.s1.r19$x54.us" ]
  br i1 %lcmp.mod5636.not, label %"end for sum_filter.s1.r19$x55.loopexit.us", label %"for sum_filter.s1.r19$x54.us.epil"

"for sum_filter.s1.r19$x54.us.epil":              ; preds = %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x54.us.epil"
  %2636 = phi <32 x i32> [ %2658, %"for sum_filter.s1.r19$x54.us.epil" ], [ %.unr, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ]
  %2637 = phi <32 x i32> [ %2657, %"for sum_filter.s1.r19$x54.us.epil" ], [ %.unr5633, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ]
  %2638 = phi <32 x i32> [ %2656, %"for sum_filter.s1.r19$x54.us.epil" ], [ %.unr5634, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ]
  %2639 = phi <32 x i32> [ %2655, %"for sum_filter.s1.r19$x54.us.epil" ], [ %.unr5635, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ]
  %"sum_filter.s1.r19$x56.us.epil" = phi i32 [ %2659, %"for sum_filter.s1.r19$x54.us.epil" ], [ %"sum_filter.s1.r19$x56.us.unr", %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ]
  %epil.iter5632 = phi i32 [ %epil.iter5632.sub, %"for sum_filter.s1.r19$x54.us.epil" ], [ %xtraiter5631, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ]
  %2640 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2638, <32 x i32> %2639)
  %2641 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2636, <32 x i32> %2637)
  %2642 = shufflevector <64 x i32> %2640, <64 x i32> %2641, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2643 = add nsw i32 %"sum_filter.s1.r19$x56.us.epil", %2551
  %2644 = shl nsw i32 %2643, 7
  %2645 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %2644
  %2646 = bitcast i16* %2645 to <32 x i32>*
  %2647 = load <32 x i32>, <32 x i32>* %2646, align 128, !tbaa !105
  %2648 = getelementptr inbounds i16, i16* %2645, i32 64
  %2649 = bitcast i16* %2648 to <32 x i32>*
  %2650 = load <32 x i32>, <32 x i32>* %2649, align 128, !tbaa !105
  %2651 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2650, <32 x i32> %2647)
  %2652 = bitcast <64 x i32> %2651 to <128 x i16>
  %2653 = sext <128 x i16> %2652 to <128 x i32>
  %2654 = add nsw <128 x i32> %2642, %2653
  %2655 = shufflevector <128 x i32> %2654, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2656 = shufflevector <128 x i32> %2654, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2657 = shufflevector <128 x i32> %2654, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2658 = shufflevector <128 x i32> %2654, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2659 = add nuw nsw i32 %"sum_filter.s1.r19$x56.us.epil", 1
  %epil.iter5632.sub = add i32 %epil.iter5632, -1
  %epil.iter5632.cmp.not = icmp eq i32 %epil.iter5632.sub, 0
  br i1 %epil.iter5632.cmp.not, label %"end for sum_filter.s1.r19$x55.loopexit.us", label %"for sum_filter.s1.r19$x54.us.epil", !llvm.loop !202

"end for sum_filter.s1.r19$x55.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x54.us.epil", %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa"
  %.lcssa5587 = phi <32 x i32> [ %.lcssa5587.ph, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ], [ %2655, %"for sum_filter.s1.r19$x54.us.epil" ]
  %.lcssa5586 = phi <32 x i32> [ %.lcssa5586.ph, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ], [ %2656, %"for sum_filter.s1.r19$x54.us.epil" ]
  %.lcssa5585 = phi <32 x i32> [ %.lcssa5585.ph, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ], [ %2657, %"for sum_filter.s1.r19$x54.us.epil" ]
  %.lcssa5584 = phi <32 x i32> [ %.lcssa5584.ph, %"end for sum_filter.s1.r19$x55.loopexit.us.unr-lcssa" ], [ %2658, %"for sum_filter.s1.r19$x54.us.epil" ]
  %2660 = add nuw nsw i32 %"sum_filter.s1.r19$y53.us", 1
  %.not648.us = icmp eq i32 %2660, %6
  br i1 %.not648.us, label %"consume sum_filter57.loopexit.split.us", label %"for sum_filter.s1.r19$y51.us"

"consume sum_filter57.loopexit.split.us":         ; preds = %"end for sum_filter.s1.r19$x55.loopexit.us"
  store <32 x i32> %.lcssa5587, <32 x i32>* %2356, align 128, !tbaa !131
  store <32 x i32> %.lcssa5586, <32 x i32>* %2358, align 128, !tbaa !139
  store <32 x i32> %.lcssa5585, <32 x i32>* %2360, align 128, !tbaa !141
  store <32 x i32> %.lcssa5584, <32 x i32>* %2362, align 128, !tbaa !144
  br label %"consume sum_filter57"

"consume sum_filter57.critedge":                  ; preds = %"produce filter_zeroed40"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 dereferenceable(512) %2432, i8 0, i64 512, i1 false)
  br label %"consume sum_filter57"

"consume sum_filter57":                           ; preds = %"for sum_filter.s1.r19$y51.preheader", %"for sum_filter.s1.r19$y51.preheader.thread", %"consume sum_filter57.loopexit.split.us", %"consume sum_filter57.critedge"
  %2661 = phi <32 x i32> [ %.lcssa5584, %"consume sum_filter57.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter57.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %2662 = phi <32 x i32> [ %.lcssa5585, %"consume sum_filter57.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter57.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %2663 = phi <32 x i32> [ %.lcssa5586, %"consume sum_filter57.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter57.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %2664 = phi <32 x i32> [ %.lcssa5587, %"consume sum_filter57.loopexit.split.us" ], [ zeroinitializer, %"consume sum_filter57.critedge" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y51.preheader" ]
  %2665 = getelementptr inbounds i32, i32* %2363, i32 %output.s0.c.c.base36
  %2666 = bitcast i32* %2665 to <32 x i32>*
  %2667 = load <32 x i32>, <32 x i32>* %2666, align 4, !tbaa !109
  %2668 = getelementptr inbounds i32, i32* %2665, i32 32
  %2669 = bitcast i32* %2668 to <32 x i32>*
  %2670 = load <32 x i32>, <32 x i32>* %2669, align 4, !tbaa !109
  %2671 = getelementptr inbounds i32, i32* %2665, i32 64
  %2672 = bitcast i32* %2671 to <32 x i32>*
  %2673 = load <32 x i32>, <32 x i32>* %2672, align 4, !tbaa !109
  %2674 = getelementptr inbounds i32, i32* %2665, i32 96
  %2675 = bitcast i32* %2674 to <32 x i32>*
  %2676 = load <32 x i32>, <32 x i32>* %2675, align 4, !tbaa !109
  %2677 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2670, <32 x i32> %2667)
  %2678 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2676, <32 x i32> %2673)
  %ab1.i1105 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2664, <32 x i32> %2366) #11
  %ab.i1106 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1105, <32 x i32> %2664, <32 x i32> %2366) #11
  %ab1.i1107 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2663, <32 x i32> %2366) #11
  %ab.i1108 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1107, <32 x i32> %2663, <32 x i32> %2366) #11
  %ab1.i1109 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2662, <32 x i32> %2366) #11
  %ab.i1110 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1109, <32 x i32> %2662, <32 x i32> %2366) #11
  %ab1.i1111 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %2661, <32 x i32> %2366) #11
  %ab.i1112 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1111, <32 x i32> %2661, <32 x i32> %2366) #11
  %2679 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1108, <32 x i32> %ab.i1106)
  %2680 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1112, <32 x i32> %ab.i1110)
  %2681 = sub nsw <64 x i32> %2677, %2679
  %2682 = sub nsw <64 x i32> %2678, %2680
  %2683 = shufflevector <64 x i32> %2682, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2684 = shufflevector <64 x i32> %2681, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2685 = shufflevector <64 x i32> %2681, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2686 = shufflevector <64 x i32> %2682, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2687 = shufflevector <128 x i32> %2683, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br i1 %2381, label %"for output.s0.b.rebased60.preheader", label %"end for output.s0.b.rebased61", !prof !101

"for output.s0.b.rebased60.preheader":            ; preds = %"consume sum_filter57"
  %2688 = insertelement <128 x i32> undef, i32 %output.s0.c.c.base36, i32 0
  %2689 = shufflevector <128 x i32> %2688, <128 x i32> undef, <128 x i32> zeroinitializer
  %2690 = add nsw <128 x i32> %2689, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.lobit = ashr <128 x i32> %2690, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %2691 = sub nsw <128 x i32> %2690, %.lobit
  %2692 = and <128 x i32> %.lobit, %2401
  %2693 = sub i32 %output.s0.c.c.base36, %t2326
  %2694 = bitcast i16* %filter_zeroed39 to <32 x i32>*
  %2695 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 64
  %2696 = bitcast i16* %2695 to <32 x i32>*
  %2697 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 128
  %2698 = bitcast i16* %2697 to <32 x i32>*
  %2699 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 192
  %2700 = bitcast i16* %2699 to <32 x i32>*
  %2701 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 256
  %2702 = bitcast i16* %2701 to <32 x i32>*
  %2703 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 320
  %2704 = bitcast i16* %2703 to <32 x i32>*
  %2705 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 384
  %2706 = bitcast i16* %2705 to <32 x i32>*
  %2707 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 448
  %2708 = bitcast i16* %2707 to <32 x i32>*
  %2709 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 512
  %2710 = bitcast i16* %2709 to <32 x i32>*
  %2711 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 576
  %2712 = bitcast i16* %2711 to <32 x i32>*
  %2713 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 640
  %2714 = bitcast i16* %2713 to <32 x i32>*
  %2715 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 704
  %2716 = bitcast i16* %2715 to <32 x i32>*
  %2717 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 768
  %2718 = bitcast i16* %2717 to <32 x i32>*
  %2719 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 832
  %2720 = bitcast i16* %2719 to <32 x i32>*
  %2721 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 896
  %2722 = bitcast i16* %2721 to <32 x i32>*
  %2723 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 960
  %2724 = bitcast i16* %2723 to <32 x i32>*
  %2725 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 1024
  %2726 = bitcast i16* %2725 to <32 x i32>*
  %2727 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 1088
  %2728 = bitcast i16* %2727 to <32 x i32>*
  %2729 = sub i32 %output.s0.c.c.base36, %reass.add5212
  br label %"for output.s0.b.rebased60"

"for output.s0.b.rebased60":                      ; preds = %"for output.s0.b.rebased60.preheader", %"end for output.s0.y.yo87"
  %output.s0.b.rebased62 = phi i32 [ %3304, %"end for output.s0.y.yo87" ], [ 0, %"for output.s0.b.rebased60.preheader" ]
  %2730 = load i32, i32* %.fca.1.gep579, align 4, !tbaa !95
  %cmp.i1114 = icmp ult i32 %2730, %2387
  %2731 = load i8*, i8** %.fca.0.gep578, align 4, !tbaa !97
  br i1 %cmp.i1114, label %if.then.i1117, label %pseudostack_alloc.exit1130, !prof !99

if.then.i1117:                                    ; preds = %"for output.s0.b.rebased60"
  %tobool1.not.i1116 = icmp ne i8* %2731, null
  %2732 = load i32, i32* %.fca.2.gep580, align 4
  %cmp2.i1119 = icmp ugt i32 %2732, 16384
  %or.cond5138 = and i1 %tobool1.not.i1116, %cmp2.i1119
  br i1 %or.cond5138, label %if.then3.i1121, label %if.end.i1125

if.then3.i1121:                                   ; preds = %if.then.i1117
  call void @halide_free(i8* null, i8* nonnull %2731) #14
  %.pre5428 = load i32, i32* %.fca.2.gep580, align 4, !tbaa !98
  br label %if.end.i1125

if.end.i1125:                                     ; preds = %if.then3.i1121, %if.then.i1117
  %2733 = phi i32 [ %.pre5428, %if.then3.i1121 ], [ %2732, %if.then.i1117 ]
  %add.i1123 = add i32 %2733, %2387
  store i32 %add.i1123, i32* %.fca.2.gep580, align 4, !tbaa !98
  %cmp7.i1124 = icmp ugt i32 %add.i1123, 16384
  br i1 %cmp7.i1124, label %if.then8.i1127, label %if.end11.i1129

if.then8.i1127:                                   ; preds = %if.end.i1125
  %call.i1126 = call i8* @halide_malloc(i8* null, i32 %2387) #14
  br label %if.end11.i1129

if.end11.i1129:                                   ; preds = %if.then8.i1127, %if.end.i1125
  %storemerge.i1128 = phi i8* [ %call.i1126, %if.then8.i1127 ], [ null, %if.end.i1125 ]
  store i8* %storemerge.i1128, i8** %.fca.0.gep578, align 4, !tbaa !97
  store i32 %2387, i32* %.fca.1.gep579, align 4, !tbaa !95
  br label %pseudostack_alloc.exit1130

pseudostack_alloc.exit1130:                       ; preds = %"for output.s0.b.rebased60", %if.end11.i1129
  %2734 = phi i8* [ %storemerge.i1128, %if.end11.i1129 ], [ %2731, %"for output.s0.b.rebased60" ]
  %.not637 = icmp eq i8* %2734, null
  br i1 %.not637, label %then_bb64, label %"produce resampled_input66", !prof !100

"end for output.s0.b.rebased61":                  ; preds = %"end for output.s0.y.yo87", %"consume sum_filter57"
  %.4 = phi i8* [ %.3, %"consume sum_filter57" ], [ %2431, %"end for output.s0.y.yo87" ]
  %2735 = add nuw nsw i32 %output.s0.c.co35, 1
  %.not636 = icmp eq i32 %2735, %2345
  br i1 %.not636, label %after_bb.loopexit5223, label %"for output.s0.c.co33"

then_bb64:                                        ; preds = %pseudostack_alloc.exit1130
  %2736 = alloca i8*, i32 %2387, align 128
  %2737 = bitcast i8** %2736 to i8*
  store i8** %2736, i8*** %2388, align 4
  br label %"produce resampled_input66"

"produce resampled_input66":                      ; preds = %pseudostack_alloc.exit1130, %then_bb64
  %resampled_input65 = phi i8* [ %2737, %then_bb64 ], [ %2734, %pseudostack_alloc.exit1130 ]
  br i1 %t2325, label %then_bb68, label %next_bb69

then_bb68:                                        ; preds = %"produce resampled_input66"
  %2738 = add nsw i32 %output.s0.b.rebased62, %14
  %2739 = mul nsw i32 %2738, %16
  %t2358 = add nsw i32 %2693, %2739
  br i1 %2439, label %"consume resampled_input85", label %"for resampled_input.s0.y.rebased70.us", !prof !126

"for resampled_input.s0.y.rebased70.us":          ; preds = %then_bb68, %"end for resampled_input.s0.x.rebased74.loopexit.us"
  %resampled_input.s0.y.rebased72.us = phi i32 [ %2756, %"end for resampled_input.s0.x.rebased74.loopexit.us" ], [ 0, %then_bb68 ]
  %2740 = add nsw i32 %2390, %resampled_input.s0.y.rebased72.us
  %2741 = mul nsw i32 %2740, %2391
  %t2362.us = add nsw i32 %2392, %2741
  %2742 = add nsw i32 %resampled_input.s0.y.rebased72.us, %a59
  %2743 = mul nsw i32 %2742, %13
  %2744 = add nsw i32 %t2358, %2743
  br label %"for resampled_input.s0.x.rebased73.us"

"for resampled_input.s0.x.rebased73.us":          ; preds = %"for resampled_input.s0.y.rebased70.us", %"for resampled_input.s0.x.rebased73.us"
  %resampled_input.s0.x.rebased75.us = phi i32 [ %2755, %"for resampled_input.s0.x.rebased73.us" ], [ 0, %"for resampled_input.s0.y.rebased70.us" ]
  %2745 = add nsw i32 %resampled_input.s0.x.rebased75.us, %a58
  %2746 = mul nsw i32 %2745, %11
  %2747 = add nsw i32 %2744, %2746
  %2748 = getelementptr inbounds i8, i8* %8, i32 %2747
  %2749 = bitcast i8* %2748 to <128 x i8>*
  %2750 = load <128 x i8>, <128 x i8>* %2749, align 1, !tbaa !127
  %2751 = add nsw i32 %t2362.us, %resampled_input.s0.x.rebased75.us
  %2752 = shl nsw i32 %2751, 7
  %2753 = getelementptr inbounds i8, i8* %resampled_input65, i32 %2752
  %2754 = bitcast i8* %2753 to <128 x i8>*
  store <128 x i8> %2750, <128 x i8>* %2754, align 128, !tbaa !129
  %2755 = add nuw nsw i32 %resampled_input.s0.x.rebased75.us, 1
  %.not647.us = icmp eq i32 %resampled_input.s0.x.rebased75.us, %t2351
  br i1 %.not647.us, label %"end for resampled_input.s0.x.rebased74.loopexit.us", label %"for resampled_input.s0.x.rebased73.us"

"end for resampled_input.s0.x.rebased74.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased73.us"
  %2756 = add nuw nsw i32 %resampled_input.s0.y.rebased72.us, 1
  %.not646.us = icmp eq i32 %resampled_input.s0.y.rebased72.us, %t2350
  br i1 %.not646.us, label %"consume resampled_input85", label %"for resampled_input.s0.y.rebased70.us"

next_bb69:                                        ; preds = %"produce resampled_input66"
  br i1 %2389, label %"for resampled_input.s0.y.rebased76.preheader", label %"consume resampled_input85", !prof !101

"for resampled_input.s0.y.rebased76.preheader":   ; preds = %next_bb69
  %2757 = add nsw i32 %output.s0.b.rebased62, %14
  %2758 = mul nsw i32 %2757, %16
  %2759 = sub i32 %2758, %t2326
  br i1 %2393, label %"for resampled_input.s0.y.rebased76.preheader.split.us", label %"consume resampled_input85", !prof !101

"for resampled_input.s0.y.rebased76.preheader.split.us": ; preds = %"for resampled_input.s0.y.rebased76.preheader"
  %2760 = sdiv <128 x i32> %2691, %2397
  %2761 = add nsw <128 x i32> %2760, %2692
  %2762 = and <128 x i32> %2761, %2402
  br label %"for resampled_input.s0.y.rebased76.us"

"for resampled_input.s0.y.rebased76.us":          ; preds = %"end for resampled_input.s0.x.rebased80.loopexit.us", %"for resampled_input.s0.y.rebased76.preheader.split.us"
  %resampled_input.s0.y.rebased78.us = phi i32 [ %3290, %"end for resampled_input.s0.x.rebased80.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased76.preheader.split.us" ]
  %2763 = add nsw i32 %2390, %resampled_input.s0.y.rebased78.us
  %2764 = mul nsw i32 %2763, %2391
  %t2367.us = add nsw i32 %2392, %2764
  %2765 = add nsw i32 %resampled_input.s0.y.rebased78.us, %a59
  %2766 = mul nsw i32 %2765, %13
  %t2366.us = add nsw i32 %2759, %2766
  br label %"for resampled_input.s0.x.rebased79.us"

"for resampled_input.s0.x.rebased79.us":          ; preds = %"for resampled_input.s0.y.rebased76.us", %"for resampled_input.s0.x.rebased79.us"
  %resampled_input.s0.x.rebased81.us = phi i32 [ %3289, %"for resampled_input.s0.x.rebased79.us" ], [ 0, %"for resampled_input.s0.y.rebased76.us" ]
  %2767 = add nsw i32 %resampled_input.s0.x.rebased81.us, %a58
  %2768 = mul nsw i32 %2767, %11
  %2769 = add nsw i32 %t2366.us, %2768
  %2770 = insertelement <128 x i32> undef, i32 %2769, i32 0
  %2771 = shufflevector <128 x i32> %2770, <128 x i32> undef, <128 x i32> zeroinitializer
  %2772 = add nsw <128 x i32> %2771, %2762
  %2773 = extractelement <128 x i32> %2772, i32 0
  %2774 = getelementptr inbounds i8, i8* %8, i32 %2773
  %2775 = load i8, i8* %2774, align 1, !tbaa !127
  %2776 = insertelement <128 x i8> undef, i8 %2775, i32 0
  %2777 = extractelement <128 x i32> %2772, i32 1
  %2778 = getelementptr inbounds i8, i8* %8, i32 %2777
  %2779 = load i8, i8* %2778, align 1, !tbaa !127
  %2780 = insertelement <128 x i8> %2776, i8 %2779, i32 1
  %2781 = extractelement <128 x i32> %2772, i32 2
  %2782 = getelementptr inbounds i8, i8* %8, i32 %2781
  %2783 = load i8, i8* %2782, align 1, !tbaa !127
  %2784 = insertelement <128 x i8> %2780, i8 %2783, i32 2
  %2785 = extractelement <128 x i32> %2772, i32 3
  %2786 = getelementptr inbounds i8, i8* %8, i32 %2785
  %2787 = load i8, i8* %2786, align 1, !tbaa !127
  %2788 = insertelement <128 x i8> %2784, i8 %2787, i32 3
  %2789 = extractelement <128 x i32> %2772, i32 4
  %2790 = getelementptr inbounds i8, i8* %8, i32 %2789
  %2791 = load i8, i8* %2790, align 1, !tbaa !127
  %2792 = insertelement <128 x i8> %2788, i8 %2791, i32 4
  %2793 = extractelement <128 x i32> %2772, i32 5
  %2794 = getelementptr inbounds i8, i8* %8, i32 %2793
  %2795 = load i8, i8* %2794, align 1, !tbaa !127
  %2796 = insertelement <128 x i8> %2792, i8 %2795, i32 5
  %2797 = extractelement <128 x i32> %2772, i32 6
  %2798 = getelementptr inbounds i8, i8* %8, i32 %2797
  %2799 = load i8, i8* %2798, align 1, !tbaa !127
  %2800 = insertelement <128 x i8> %2796, i8 %2799, i32 6
  %2801 = extractelement <128 x i32> %2772, i32 7
  %2802 = getelementptr inbounds i8, i8* %8, i32 %2801
  %2803 = load i8, i8* %2802, align 1, !tbaa !127
  %2804 = insertelement <128 x i8> %2800, i8 %2803, i32 7
  %2805 = extractelement <128 x i32> %2772, i32 8
  %2806 = getelementptr inbounds i8, i8* %8, i32 %2805
  %2807 = load i8, i8* %2806, align 1, !tbaa !127
  %2808 = insertelement <128 x i8> %2804, i8 %2807, i32 8
  %2809 = extractelement <128 x i32> %2772, i32 9
  %2810 = getelementptr inbounds i8, i8* %8, i32 %2809
  %2811 = load i8, i8* %2810, align 1, !tbaa !127
  %2812 = insertelement <128 x i8> %2808, i8 %2811, i32 9
  %2813 = extractelement <128 x i32> %2772, i32 10
  %2814 = getelementptr inbounds i8, i8* %8, i32 %2813
  %2815 = load i8, i8* %2814, align 1, !tbaa !127
  %2816 = insertelement <128 x i8> %2812, i8 %2815, i32 10
  %2817 = extractelement <128 x i32> %2772, i32 11
  %2818 = getelementptr inbounds i8, i8* %8, i32 %2817
  %2819 = load i8, i8* %2818, align 1, !tbaa !127
  %2820 = insertelement <128 x i8> %2816, i8 %2819, i32 11
  %2821 = extractelement <128 x i32> %2772, i32 12
  %2822 = getelementptr inbounds i8, i8* %8, i32 %2821
  %2823 = load i8, i8* %2822, align 1, !tbaa !127
  %2824 = insertelement <128 x i8> %2820, i8 %2823, i32 12
  %2825 = extractelement <128 x i32> %2772, i32 13
  %2826 = getelementptr inbounds i8, i8* %8, i32 %2825
  %2827 = load i8, i8* %2826, align 1, !tbaa !127
  %2828 = insertelement <128 x i8> %2824, i8 %2827, i32 13
  %2829 = extractelement <128 x i32> %2772, i32 14
  %2830 = getelementptr inbounds i8, i8* %8, i32 %2829
  %2831 = load i8, i8* %2830, align 1, !tbaa !127
  %2832 = insertelement <128 x i8> %2828, i8 %2831, i32 14
  %2833 = extractelement <128 x i32> %2772, i32 15
  %2834 = getelementptr inbounds i8, i8* %8, i32 %2833
  %2835 = load i8, i8* %2834, align 1, !tbaa !127
  %2836 = insertelement <128 x i8> %2832, i8 %2835, i32 15
  %2837 = extractelement <128 x i32> %2772, i32 16
  %2838 = getelementptr inbounds i8, i8* %8, i32 %2837
  %2839 = load i8, i8* %2838, align 1, !tbaa !127
  %2840 = insertelement <128 x i8> %2836, i8 %2839, i32 16
  %2841 = extractelement <128 x i32> %2772, i32 17
  %2842 = getelementptr inbounds i8, i8* %8, i32 %2841
  %2843 = load i8, i8* %2842, align 1, !tbaa !127
  %2844 = insertelement <128 x i8> %2840, i8 %2843, i32 17
  %2845 = extractelement <128 x i32> %2772, i32 18
  %2846 = getelementptr inbounds i8, i8* %8, i32 %2845
  %2847 = load i8, i8* %2846, align 1, !tbaa !127
  %2848 = insertelement <128 x i8> %2844, i8 %2847, i32 18
  %2849 = extractelement <128 x i32> %2772, i32 19
  %2850 = getelementptr inbounds i8, i8* %8, i32 %2849
  %2851 = load i8, i8* %2850, align 1, !tbaa !127
  %2852 = insertelement <128 x i8> %2848, i8 %2851, i32 19
  %2853 = extractelement <128 x i32> %2772, i32 20
  %2854 = getelementptr inbounds i8, i8* %8, i32 %2853
  %2855 = load i8, i8* %2854, align 1, !tbaa !127
  %2856 = insertelement <128 x i8> %2852, i8 %2855, i32 20
  %2857 = extractelement <128 x i32> %2772, i32 21
  %2858 = getelementptr inbounds i8, i8* %8, i32 %2857
  %2859 = load i8, i8* %2858, align 1, !tbaa !127
  %2860 = insertelement <128 x i8> %2856, i8 %2859, i32 21
  %2861 = extractelement <128 x i32> %2772, i32 22
  %2862 = getelementptr inbounds i8, i8* %8, i32 %2861
  %2863 = load i8, i8* %2862, align 1, !tbaa !127
  %2864 = insertelement <128 x i8> %2860, i8 %2863, i32 22
  %2865 = extractelement <128 x i32> %2772, i32 23
  %2866 = getelementptr inbounds i8, i8* %8, i32 %2865
  %2867 = load i8, i8* %2866, align 1, !tbaa !127
  %2868 = insertelement <128 x i8> %2864, i8 %2867, i32 23
  %2869 = extractelement <128 x i32> %2772, i32 24
  %2870 = getelementptr inbounds i8, i8* %8, i32 %2869
  %2871 = load i8, i8* %2870, align 1, !tbaa !127
  %2872 = insertelement <128 x i8> %2868, i8 %2871, i32 24
  %2873 = extractelement <128 x i32> %2772, i32 25
  %2874 = getelementptr inbounds i8, i8* %8, i32 %2873
  %2875 = load i8, i8* %2874, align 1, !tbaa !127
  %2876 = insertelement <128 x i8> %2872, i8 %2875, i32 25
  %2877 = extractelement <128 x i32> %2772, i32 26
  %2878 = getelementptr inbounds i8, i8* %8, i32 %2877
  %2879 = load i8, i8* %2878, align 1, !tbaa !127
  %2880 = insertelement <128 x i8> %2876, i8 %2879, i32 26
  %2881 = extractelement <128 x i32> %2772, i32 27
  %2882 = getelementptr inbounds i8, i8* %8, i32 %2881
  %2883 = load i8, i8* %2882, align 1, !tbaa !127
  %2884 = insertelement <128 x i8> %2880, i8 %2883, i32 27
  %2885 = extractelement <128 x i32> %2772, i32 28
  %2886 = getelementptr inbounds i8, i8* %8, i32 %2885
  %2887 = load i8, i8* %2886, align 1, !tbaa !127
  %2888 = insertelement <128 x i8> %2884, i8 %2887, i32 28
  %2889 = extractelement <128 x i32> %2772, i32 29
  %2890 = getelementptr inbounds i8, i8* %8, i32 %2889
  %2891 = load i8, i8* %2890, align 1, !tbaa !127
  %2892 = insertelement <128 x i8> %2888, i8 %2891, i32 29
  %2893 = extractelement <128 x i32> %2772, i32 30
  %2894 = getelementptr inbounds i8, i8* %8, i32 %2893
  %2895 = load i8, i8* %2894, align 1, !tbaa !127
  %2896 = insertelement <128 x i8> %2892, i8 %2895, i32 30
  %2897 = extractelement <128 x i32> %2772, i32 31
  %2898 = getelementptr inbounds i8, i8* %8, i32 %2897
  %2899 = load i8, i8* %2898, align 1, !tbaa !127
  %2900 = insertelement <128 x i8> %2896, i8 %2899, i32 31
  %2901 = extractelement <128 x i32> %2772, i32 32
  %2902 = getelementptr inbounds i8, i8* %8, i32 %2901
  %2903 = load i8, i8* %2902, align 1, !tbaa !127
  %2904 = insertelement <128 x i8> %2900, i8 %2903, i32 32
  %2905 = extractelement <128 x i32> %2772, i32 33
  %2906 = getelementptr inbounds i8, i8* %8, i32 %2905
  %2907 = load i8, i8* %2906, align 1, !tbaa !127
  %2908 = insertelement <128 x i8> %2904, i8 %2907, i32 33
  %2909 = extractelement <128 x i32> %2772, i32 34
  %2910 = getelementptr inbounds i8, i8* %8, i32 %2909
  %2911 = load i8, i8* %2910, align 1, !tbaa !127
  %2912 = insertelement <128 x i8> %2908, i8 %2911, i32 34
  %2913 = extractelement <128 x i32> %2772, i32 35
  %2914 = getelementptr inbounds i8, i8* %8, i32 %2913
  %2915 = load i8, i8* %2914, align 1, !tbaa !127
  %2916 = insertelement <128 x i8> %2912, i8 %2915, i32 35
  %2917 = extractelement <128 x i32> %2772, i32 36
  %2918 = getelementptr inbounds i8, i8* %8, i32 %2917
  %2919 = load i8, i8* %2918, align 1, !tbaa !127
  %2920 = insertelement <128 x i8> %2916, i8 %2919, i32 36
  %2921 = extractelement <128 x i32> %2772, i32 37
  %2922 = getelementptr inbounds i8, i8* %8, i32 %2921
  %2923 = load i8, i8* %2922, align 1, !tbaa !127
  %2924 = insertelement <128 x i8> %2920, i8 %2923, i32 37
  %2925 = extractelement <128 x i32> %2772, i32 38
  %2926 = getelementptr inbounds i8, i8* %8, i32 %2925
  %2927 = load i8, i8* %2926, align 1, !tbaa !127
  %2928 = insertelement <128 x i8> %2924, i8 %2927, i32 38
  %2929 = extractelement <128 x i32> %2772, i32 39
  %2930 = getelementptr inbounds i8, i8* %8, i32 %2929
  %2931 = load i8, i8* %2930, align 1, !tbaa !127
  %2932 = insertelement <128 x i8> %2928, i8 %2931, i32 39
  %2933 = extractelement <128 x i32> %2772, i32 40
  %2934 = getelementptr inbounds i8, i8* %8, i32 %2933
  %2935 = load i8, i8* %2934, align 1, !tbaa !127
  %2936 = insertelement <128 x i8> %2932, i8 %2935, i32 40
  %2937 = extractelement <128 x i32> %2772, i32 41
  %2938 = getelementptr inbounds i8, i8* %8, i32 %2937
  %2939 = load i8, i8* %2938, align 1, !tbaa !127
  %2940 = insertelement <128 x i8> %2936, i8 %2939, i32 41
  %2941 = extractelement <128 x i32> %2772, i32 42
  %2942 = getelementptr inbounds i8, i8* %8, i32 %2941
  %2943 = load i8, i8* %2942, align 1, !tbaa !127
  %2944 = insertelement <128 x i8> %2940, i8 %2943, i32 42
  %2945 = extractelement <128 x i32> %2772, i32 43
  %2946 = getelementptr inbounds i8, i8* %8, i32 %2945
  %2947 = load i8, i8* %2946, align 1, !tbaa !127
  %2948 = insertelement <128 x i8> %2944, i8 %2947, i32 43
  %2949 = extractelement <128 x i32> %2772, i32 44
  %2950 = getelementptr inbounds i8, i8* %8, i32 %2949
  %2951 = load i8, i8* %2950, align 1, !tbaa !127
  %2952 = insertelement <128 x i8> %2948, i8 %2951, i32 44
  %2953 = extractelement <128 x i32> %2772, i32 45
  %2954 = getelementptr inbounds i8, i8* %8, i32 %2953
  %2955 = load i8, i8* %2954, align 1, !tbaa !127
  %2956 = insertelement <128 x i8> %2952, i8 %2955, i32 45
  %2957 = extractelement <128 x i32> %2772, i32 46
  %2958 = getelementptr inbounds i8, i8* %8, i32 %2957
  %2959 = load i8, i8* %2958, align 1, !tbaa !127
  %2960 = insertelement <128 x i8> %2956, i8 %2959, i32 46
  %2961 = extractelement <128 x i32> %2772, i32 47
  %2962 = getelementptr inbounds i8, i8* %8, i32 %2961
  %2963 = load i8, i8* %2962, align 1, !tbaa !127
  %2964 = insertelement <128 x i8> %2960, i8 %2963, i32 47
  %2965 = extractelement <128 x i32> %2772, i32 48
  %2966 = getelementptr inbounds i8, i8* %8, i32 %2965
  %2967 = load i8, i8* %2966, align 1, !tbaa !127
  %2968 = insertelement <128 x i8> %2964, i8 %2967, i32 48
  %2969 = extractelement <128 x i32> %2772, i32 49
  %2970 = getelementptr inbounds i8, i8* %8, i32 %2969
  %2971 = load i8, i8* %2970, align 1, !tbaa !127
  %2972 = insertelement <128 x i8> %2968, i8 %2971, i32 49
  %2973 = extractelement <128 x i32> %2772, i32 50
  %2974 = getelementptr inbounds i8, i8* %8, i32 %2973
  %2975 = load i8, i8* %2974, align 1, !tbaa !127
  %2976 = insertelement <128 x i8> %2972, i8 %2975, i32 50
  %2977 = extractelement <128 x i32> %2772, i32 51
  %2978 = getelementptr inbounds i8, i8* %8, i32 %2977
  %2979 = load i8, i8* %2978, align 1, !tbaa !127
  %2980 = insertelement <128 x i8> %2976, i8 %2979, i32 51
  %2981 = extractelement <128 x i32> %2772, i32 52
  %2982 = getelementptr inbounds i8, i8* %8, i32 %2981
  %2983 = load i8, i8* %2982, align 1, !tbaa !127
  %2984 = insertelement <128 x i8> %2980, i8 %2983, i32 52
  %2985 = extractelement <128 x i32> %2772, i32 53
  %2986 = getelementptr inbounds i8, i8* %8, i32 %2985
  %2987 = load i8, i8* %2986, align 1, !tbaa !127
  %2988 = insertelement <128 x i8> %2984, i8 %2987, i32 53
  %2989 = extractelement <128 x i32> %2772, i32 54
  %2990 = getelementptr inbounds i8, i8* %8, i32 %2989
  %2991 = load i8, i8* %2990, align 1, !tbaa !127
  %2992 = insertelement <128 x i8> %2988, i8 %2991, i32 54
  %2993 = extractelement <128 x i32> %2772, i32 55
  %2994 = getelementptr inbounds i8, i8* %8, i32 %2993
  %2995 = load i8, i8* %2994, align 1, !tbaa !127
  %2996 = insertelement <128 x i8> %2992, i8 %2995, i32 55
  %2997 = extractelement <128 x i32> %2772, i32 56
  %2998 = getelementptr inbounds i8, i8* %8, i32 %2997
  %2999 = load i8, i8* %2998, align 1, !tbaa !127
  %3000 = insertelement <128 x i8> %2996, i8 %2999, i32 56
  %3001 = extractelement <128 x i32> %2772, i32 57
  %3002 = getelementptr inbounds i8, i8* %8, i32 %3001
  %3003 = load i8, i8* %3002, align 1, !tbaa !127
  %3004 = insertelement <128 x i8> %3000, i8 %3003, i32 57
  %3005 = extractelement <128 x i32> %2772, i32 58
  %3006 = getelementptr inbounds i8, i8* %8, i32 %3005
  %3007 = load i8, i8* %3006, align 1, !tbaa !127
  %3008 = insertelement <128 x i8> %3004, i8 %3007, i32 58
  %3009 = extractelement <128 x i32> %2772, i32 59
  %3010 = getelementptr inbounds i8, i8* %8, i32 %3009
  %3011 = load i8, i8* %3010, align 1, !tbaa !127
  %3012 = insertelement <128 x i8> %3008, i8 %3011, i32 59
  %3013 = extractelement <128 x i32> %2772, i32 60
  %3014 = getelementptr inbounds i8, i8* %8, i32 %3013
  %3015 = load i8, i8* %3014, align 1, !tbaa !127
  %3016 = insertelement <128 x i8> %3012, i8 %3015, i32 60
  %3017 = extractelement <128 x i32> %2772, i32 61
  %3018 = getelementptr inbounds i8, i8* %8, i32 %3017
  %3019 = load i8, i8* %3018, align 1, !tbaa !127
  %3020 = insertelement <128 x i8> %3016, i8 %3019, i32 61
  %3021 = extractelement <128 x i32> %2772, i32 62
  %3022 = getelementptr inbounds i8, i8* %8, i32 %3021
  %3023 = load i8, i8* %3022, align 1, !tbaa !127
  %3024 = insertelement <128 x i8> %3020, i8 %3023, i32 62
  %3025 = extractelement <128 x i32> %2772, i32 63
  %3026 = getelementptr inbounds i8, i8* %8, i32 %3025
  %3027 = load i8, i8* %3026, align 1, !tbaa !127
  %3028 = insertelement <128 x i8> %3024, i8 %3027, i32 63
  %3029 = extractelement <128 x i32> %2772, i32 64
  %3030 = getelementptr inbounds i8, i8* %8, i32 %3029
  %3031 = load i8, i8* %3030, align 1, !tbaa !127
  %3032 = insertelement <128 x i8> %3028, i8 %3031, i32 64
  %3033 = extractelement <128 x i32> %2772, i32 65
  %3034 = getelementptr inbounds i8, i8* %8, i32 %3033
  %3035 = load i8, i8* %3034, align 1, !tbaa !127
  %3036 = insertelement <128 x i8> %3032, i8 %3035, i32 65
  %3037 = extractelement <128 x i32> %2772, i32 66
  %3038 = getelementptr inbounds i8, i8* %8, i32 %3037
  %3039 = load i8, i8* %3038, align 1, !tbaa !127
  %3040 = insertelement <128 x i8> %3036, i8 %3039, i32 66
  %3041 = extractelement <128 x i32> %2772, i32 67
  %3042 = getelementptr inbounds i8, i8* %8, i32 %3041
  %3043 = load i8, i8* %3042, align 1, !tbaa !127
  %3044 = insertelement <128 x i8> %3040, i8 %3043, i32 67
  %3045 = extractelement <128 x i32> %2772, i32 68
  %3046 = getelementptr inbounds i8, i8* %8, i32 %3045
  %3047 = load i8, i8* %3046, align 1, !tbaa !127
  %3048 = insertelement <128 x i8> %3044, i8 %3047, i32 68
  %3049 = extractelement <128 x i32> %2772, i32 69
  %3050 = getelementptr inbounds i8, i8* %8, i32 %3049
  %3051 = load i8, i8* %3050, align 1, !tbaa !127
  %3052 = insertelement <128 x i8> %3048, i8 %3051, i32 69
  %3053 = extractelement <128 x i32> %2772, i32 70
  %3054 = getelementptr inbounds i8, i8* %8, i32 %3053
  %3055 = load i8, i8* %3054, align 1, !tbaa !127
  %3056 = insertelement <128 x i8> %3052, i8 %3055, i32 70
  %3057 = extractelement <128 x i32> %2772, i32 71
  %3058 = getelementptr inbounds i8, i8* %8, i32 %3057
  %3059 = load i8, i8* %3058, align 1, !tbaa !127
  %3060 = insertelement <128 x i8> %3056, i8 %3059, i32 71
  %3061 = extractelement <128 x i32> %2772, i32 72
  %3062 = getelementptr inbounds i8, i8* %8, i32 %3061
  %3063 = load i8, i8* %3062, align 1, !tbaa !127
  %3064 = insertelement <128 x i8> %3060, i8 %3063, i32 72
  %3065 = extractelement <128 x i32> %2772, i32 73
  %3066 = getelementptr inbounds i8, i8* %8, i32 %3065
  %3067 = load i8, i8* %3066, align 1, !tbaa !127
  %3068 = insertelement <128 x i8> %3064, i8 %3067, i32 73
  %3069 = extractelement <128 x i32> %2772, i32 74
  %3070 = getelementptr inbounds i8, i8* %8, i32 %3069
  %3071 = load i8, i8* %3070, align 1, !tbaa !127
  %3072 = insertelement <128 x i8> %3068, i8 %3071, i32 74
  %3073 = extractelement <128 x i32> %2772, i32 75
  %3074 = getelementptr inbounds i8, i8* %8, i32 %3073
  %3075 = load i8, i8* %3074, align 1, !tbaa !127
  %3076 = insertelement <128 x i8> %3072, i8 %3075, i32 75
  %3077 = extractelement <128 x i32> %2772, i32 76
  %3078 = getelementptr inbounds i8, i8* %8, i32 %3077
  %3079 = load i8, i8* %3078, align 1, !tbaa !127
  %3080 = insertelement <128 x i8> %3076, i8 %3079, i32 76
  %3081 = extractelement <128 x i32> %2772, i32 77
  %3082 = getelementptr inbounds i8, i8* %8, i32 %3081
  %3083 = load i8, i8* %3082, align 1, !tbaa !127
  %3084 = insertelement <128 x i8> %3080, i8 %3083, i32 77
  %3085 = extractelement <128 x i32> %2772, i32 78
  %3086 = getelementptr inbounds i8, i8* %8, i32 %3085
  %3087 = load i8, i8* %3086, align 1, !tbaa !127
  %3088 = insertelement <128 x i8> %3084, i8 %3087, i32 78
  %3089 = extractelement <128 x i32> %2772, i32 79
  %3090 = getelementptr inbounds i8, i8* %8, i32 %3089
  %3091 = load i8, i8* %3090, align 1, !tbaa !127
  %3092 = insertelement <128 x i8> %3088, i8 %3091, i32 79
  %3093 = extractelement <128 x i32> %2772, i32 80
  %3094 = getelementptr inbounds i8, i8* %8, i32 %3093
  %3095 = load i8, i8* %3094, align 1, !tbaa !127
  %3096 = insertelement <128 x i8> %3092, i8 %3095, i32 80
  %3097 = extractelement <128 x i32> %2772, i32 81
  %3098 = getelementptr inbounds i8, i8* %8, i32 %3097
  %3099 = load i8, i8* %3098, align 1, !tbaa !127
  %3100 = insertelement <128 x i8> %3096, i8 %3099, i32 81
  %3101 = extractelement <128 x i32> %2772, i32 82
  %3102 = getelementptr inbounds i8, i8* %8, i32 %3101
  %3103 = load i8, i8* %3102, align 1, !tbaa !127
  %3104 = insertelement <128 x i8> %3100, i8 %3103, i32 82
  %3105 = extractelement <128 x i32> %2772, i32 83
  %3106 = getelementptr inbounds i8, i8* %8, i32 %3105
  %3107 = load i8, i8* %3106, align 1, !tbaa !127
  %3108 = insertelement <128 x i8> %3104, i8 %3107, i32 83
  %3109 = extractelement <128 x i32> %2772, i32 84
  %3110 = getelementptr inbounds i8, i8* %8, i32 %3109
  %3111 = load i8, i8* %3110, align 1, !tbaa !127
  %3112 = insertelement <128 x i8> %3108, i8 %3111, i32 84
  %3113 = extractelement <128 x i32> %2772, i32 85
  %3114 = getelementptr inbounds i8, i8* %8, i32 %3113
  %3115 = load i8, i8* %3114, align 1, !tbaa !127
  %3116 = insertelement <128 x i8> %3112, i8 %3115, i32 85
  %3117 = extractelement <128 x i32> %2772, i32 86
  %3118 = getelementptr inbounds i8, i8* %8, i32 %3117
  %3119 = load i8, i8* %3118, align 1, !tbaa !127
  %3120 = insertelement <128 x i8> %3116, i8 %3119, i32 86
  %3121 = extractelement <128 x i32> %2772, i32 87
  %3122 = getelementptr inbounds i8, i8* %8, i32 %3121
  %3123 = load i8, i8* %3122, align 1, !tbaa !127
  %3124 = insertelement <128 x i8> %3120, i8 %3123, i32 87
  %3125 = extractelement <128 x i32> %2772, i32 88
  %3126 = getelementptr inbounds i8, i8* %8, i32 %3125
  %3127 = load i8, i8* %3126, align 1, !tbaa !127
  %3128 = insertelement <128 x i8> %3124, i8 %3127, i32 88
  %3129 = extractelement <128 x i32> %2772, i32 89
  %3130 = getelementptr inbounds i8, i8* %8, i32 %3129
  %3131 = load i8, i8* %3130, align 1, !tbaa !127
  %3132 = insertelement <128 x i8> %3128, i8 %3131, i32 89
  %3133 = extractelement <128 x i32> %2772, i32 90
  %3134 = getelementptr inbounds i8, i8* %8, i32 %3133
  %3135 = load i8, i8* %3134, align 1, !tbaa !127
  %3136 = insertelement <128 x i8> %3132, i8 %3135, i32 90
  %3137 = extractelement <128 x i32> %2772, i32 91
  %3138 = getelementptr inbounds i8, i8* %8, i32 %3137
  %3139 = load i8, i8* %3138, align 1, !tbaa !127
  %3140 = insertelement <128 x i8> %3136, i8 %3139, i32 91
  %3141 = extractelement <128 x i32> %2772, i32 92
  %3142 = getelementptr inbounds i8, i8* %8, i32 %3141
  %3143 = load i8, i8* %3142, align 1, !tbaa !127
  %3144 = insertelement <128 x i8> %3140, i8 %3143, i32 92
  %3145 = extractelement <128 x i32> %2772, i32 93
  %3146 = getelementptr inbounds i8, i8* %8, i32 %3145
  %3147 = load i8, i8* %3146, align 1, !tbaa !127
  %3148 = insertelement <128 x i8> %3144, i8 %3147, i32 93
  %3149 = extractelement <128 x i32> %2772, i32 94
  %3150 = getelementptr inbounds i8, i8* %8, i32 %3149
  %3151 = load i8, i8* %3150, align 1, !tbaa !127
  %3152 = insertelement <128 x i8> %3148, i8 %3151, i32 94
  %3153 = extractelement <128 x i32> %2772, i32 95
  %3154 = getelementptr inbounds i8, i8* %8, i32 %3153
  %3155 = load i8, i8* %3154, align 1, !tbaa !127
  %3156 = insertelement <128 x i8> %3152, i8 %3155, i32 95
  %3157 = extractelement <128 x i32> %2772, i32 96
  %3158 = getelementptr inbounds i8, i8* %8, i32 %3157
  %3159 = load i8, i8* %3158, align 1, !tbaa !127
  %3160 = insertelement <128 x i8> %3156, i8 %3159, i32 96
  %3161 = extractelement <128 x i32> %2772, i32 97
  %3162 = getelementptr inbounds i8, i8* %8, i32 %3161
  %3163 = load i8, i8* %3162, align 1, !tbaa !127
  %3164 = insertelement <128 x i8> %3160, i8 %3163, i32 97
  %3165 = extractelement <128 x i32> %2772, i32 98
  %3166 = getelementptr inbounds i8, i8* %8, i32 %3165
  %3167 = load i8, i8* %3166, align 1, !tbaa !127
  %3168 = insertelement <128 x i8> %3164, i8 %3167, i32 98
  %3169 = extractelement <128 x i32> %2772, i32 99
  %3170 = getelementptr inbounds i8, i8* %8, i32 %3169
  %3171 = load i8, i8* %3170, align 1, !tbaa !127
  %3172 = insertelement <128 x i8> %3168, i8 %3171, i32 99
  %3173 = extractelement <128 x i32> %2772, i32 100
  %3174 = getelementptr inbounds i8, i8* %8, i32 %3173
  %3175 = load i8, i8* %3174, align 1, !tbaa !127
  %3176 = insertelement <128 x i8> %3172, i8 %3175, i32 100
  %3177 = extractelement <128 x i32> %2772, i32 101
  %3178 = getelementptr inbounds i8, i8* %8, i32 %3177
  %3179 = load i8, i8* %3178, align 1, !tbaa !127
  %3180 = insertelement <128 x i8> %3176, i8 %3179, i32 101
  %3181 = extractelement <128 x i32> %2772, i32 102
  %3182 = getelementptr inbounds i8, i8* %8, i32 %3181
  %3183 = load i8, i8* %3182, align 1, !tbaa !127
  %3184 = insertelement <128 x i8> %3180, i8 %3183, i32 102
  %3185 = extractelement <128 x i32> %2772, i32 103
  %3186 = getelementptr inbounds i8, i8* %8, i32 %3185
  %3187 = load i8, i8* %3186, align 1, !tbaa !127
  %3188 = insertelement <128 x i8> %3184, i8 %3187, i32 103
  %3189 = extractelement <128 x i32> %2772, i32 104
  %3190 = getelementptr inbounds i8, i8* %8, i32 %3189
  %3191 = load i8, i8* %3190, align 1, !tbaa !127
  %3192 = insertelement <128 x i8> %3188, i8 %3191, i32 104
  %3193 = extractelement <128 x i32> %2772, i32 105
  %3194 = getelementptr inbounds i8, i8* %8, i32 %3193
  %3195 = load i8, i8* %3194, align 1, !tbaa !127
  %3196 = insertelement <128 x i8> %3192, i8 %3195, i32 105
  %3197 = extractelement <128 x i32> %2772, i32 106
  %3198 = getelementptr inbounds i8, i8* %8, i32 %3197
  %3199 = load i8, i8* %3198, align 1, !tbaa !127
  %3200 = insertelement <128 x i8> %3196, i8 %3199, i32 106
  %3201 = extractelement <128 x i32> %2772, i32 107
  %3202 = getelementptr inbounds i8, i8* %8, i32 %3201
  %3203 = load i8, i8* %3202, align 1, !tbaa !127
  %3204 = insertelement <128 x i8> %3200, i8 %3203, i32 107
  %3205 = extractelement <128 x i32> %2772, i32 108
  %3206 = getelementptr inbounds i8, i8* %8, i32 %3205
  %3207 = load i8, i8* %3206, align 1, !tbaa !127
  %3208 = insertelement <128 x i8> %3204, i8 %3207, i32 108
  %3209 = extractelement <128 x i32> %2772, i32 109
  %3210 = getelementptr inbounds i8, i8* %8, i32 %3209
  %3211 = load i8, i8* %3210, align 1, !tbaa !127
  %3212 = insertelement <128 x i8> %3208, i8 %3211, i32 109
  %3213 = extractelement <128 x i32> %2772, i32 110
  %3214 = getelementptr inbounds i8, i8* %8, i32 %3213
  %3215 = load i8, i8* %3214, align 1, !tbaa !127
  %3216 = insertelement <128 x i8> %3212, i8 %3215, i32 110
  %3217 = extractelement <128 x i32> %2772, i32 111
  %3218 = getelementptr inbounds i8, i8* %8, i32 %3217
  %3219 = load i8, i8* %3218, align 1, !tbaa !127
  %3220 = insertelement <128 x i8> %3216, i8 %3219, i32 111
  %3221 = extractelement <128 x i32> %2772, i32 112
  %3222 = getelementptr inbounds i8, i8* %8, i32 %3221
  %3223 = load i8, i8* %3222, align 1, !tbaa !127
  %3224 = insertelement <128 x i8> %3220, i8 %3223, i32 112
  %3225 = extractelement <128 x i32> %2772, i32 113
  %3226 = getelementptr inbounds i8, i8* %8, i32 %3225
  %3227 = load i8, i8* %3226, align 1, !tbaa !127
  %3228 = insertelement <128 x i8> %3224, i8 %3227, i32 113
  %3229 = extractelement <128 x i32> %2772, i32 114
  %3230 = getelementptr inbounds i8, i8* %8, i32 %3229
  %3231 = load i8, i8* %3230, align 1, !tbaa !127
  %3232 = insertelement <128 x i8> %3228, i8 %3231, i32 114
  %3233 = extractelement <128 x i32> %2772, i32 115
  %3234 = getelementptr inbounds i8, i8* %8, i32 %3233
  %3235 = load i8, i8* %3234, align 1, !tbaa !127
  %3236 = insertelement <128 x i8> %3232, i8 %3235, i32 115
  %3237 = extractelement <128 x i32> %2772, i32 116
  %3238 = getelementptr inbounds i8, i8* %8, i32 %3237
  %3239 = load i8, i8* %3238, align 1, !tbaa !127
  %3240 = insertelement <128 x i8> %3236, i8 %3239, i32 116
  %3241 = extractelement <128 x i32> %2772, i32 117
  %3242 = getelementptr inbounds i8, i8* %8, i32 %3241
  %3243 = load i8, i8* %3242, align 1, !tbaa !127
  %3244 = insertelement <128 x i8> %3240, i8 %3243, i32 117
  %3245 = extractelement <128 x i32> %2772, i32 118
  %3246 = getelementptr inbounds i8, i8* %8, i32 %3245
  %3247 = load i8, i8* %3246, align 1, !tbaa !127
  %3248 = insertelement <128 x i8> %3244, i8 %3247, i32 118
  %3249 = extractelement <128 x i32> %2772, i32 119
  %3250 = getelementptr inbounds i8, i8* %8, i32 %3249
  %3251 = load i8, i8* %3250, align 1, !tbaa !127
  %3252 = insertelement <128 x i8> %3248, i8 %3251, i32 119
  %3253 = extractelement <128 x i32> %2772, i32 120
  %3254 = getelementptr inbounds i8, i8* %8, i32 %3253
  %3255 = load i8, i8* %3254, align 1, !tbaa !127
  %3256 = insertelement <128 x i8> %3252, i8 %3255, i32 120
  %3257 = extractelement <128 x i32> %2772, i32 121
  %3258 = getelementptr inbounds i8, i8* %8, i32 %3257
  %3259 = load i8, i8* %3258, align 1, !tbaa !127
  %3260 = insertelement <128 x i8> %3256, i8 %3259, i32 121
  %3261 = extractelement <128 x i32> %2772, i32 122
  %3262 = getelementptr inbounds i8, i8* %8, i32 %3261
  %3263 = load i8, i8* %3262, align 1, !tbaa !127
  %3264 = insertelement <128 x i8> %3260, i8 %3263, i32 122
  %3265 = extractelement <128 x i32> %2772, i32 123
  %3266 = getelementptr inbounds i8, i8* %8, i32 %3265
  %3267 = load i8, i8* %3266, align 1, !tbaa !127
  %3268 = insertelement <128 x i8> %3264, i8 %3267, i32 123
  %3269 = extractelement <128 x i32> %2772, i32 124
  %3270 = getelementptr inbounds i8, i8* %8, i32 %3269
  %3271 = load i8, i8* %3270, align 1, !tbaa !127
  %3272 = insertelement <128 x i8> %3268, i8 %3271, i32 124
  %3273 = extractelement <128 x i32> %2772, i32 125
  %3274 = getelementptr inbounds i8, i8* %8, i32 %3273
  %3275 = load i8, i8* %3274, align 1, !tbaa !127
  %3276 = insertelement <128 x i8> %3272, i8 %3275, i32 125
  %3277 = extractelement <128 x i32> %2772, i32 126
  %3278 = getelementptr inbounds i8, i8* %8, i32 %3277
  %3279 = load i8, i8* %3278, align 1, !tbaa !127
  %3280 = insertelement <128 x i8> %3276, i8 %3279, i32 126
  %3281 = extractelement <128 x i32> %2772, i32 127
  %3282 = getelementptr inbounds i8, i8* %8, i32 %3281
  %3283 = load i8, i8* %3282, align 1, !tbaa !127
  %3284 = insertelement <128 x i8> %3280, i8 %3283, i32 127
  %3285 = add nsw i32 %t2367.us, %resampled_input.s0.x.rebased81.us
  %3286 = shl nsw i32 %3285, 7
  %3287 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3286
  %3288 = bitcast i8* %3287 to <128 x i8>*
  store <128 x i8> %3284, <128 x i8>* %3288, align 128, !tbaa !129
  %3289 = add nuw nsw i32 %resampled_input.s0.x.rebased81.us, 1
  %.not645.us = icmp eq i32 %resampled_input.s0.x.rebased81.us, %t2351
  br i1 %.not645.us, label %"end for resampled_input.s0.x.rebased80.loopexit.us", label %"for resampled_input.s0.x.rebased79.us"

"end for resampled_input.s0.x.rebased80.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased79.us"
  %3290 = add nuw nsw i32 %resampled_input.s0.y.rebased78.us, 1
  %.not644.us = icmp eq i32 %resampled_input.s0.y.rebased78.us, %t2350
  br i1 %.not644.us, label %"consume resampled_input85", label %"for resampled_input.s0.y.rebased76.us"

"consume resampled_input85":                      ; preds = %"end for resampled_input.s0.x.rebased80.loopexit.us", %"end for resampled_input.s0.x.rebased74.loopexit.us", %then_bb68, %"for resampled_input.s0.y.rebased76.preheader", %next_bb69
  br i1 %2403, label %"for output.s0.y.yo86.preheader", label %"end for output.s0.y.yo87", !prof !101

"for output.s0.y.yo86.preheader":                 ; preds = %"consume resampled_input85"
  %3291 = add nsw i32 %output.s0.b.rebased62, %14
  %3292 = mul nsw i32 %3291, %25
  %t2374 = add i32 %2729, %3292
  br label %"for output.s0.y.yo86"

"for output.s0.y.yo86":                           ; preds = %"for output.s0.y.yo86.preheader", %"end for output.s0.x.xo90"
  %output.s0.y.yo88 = phi i32 [ %3305, %"end for output.s0.x.xo90" ], [ 0, %"for output.s0.y.yo86.preheader" ]
  %3293 = add nsw i32 %output.s0.y.yo88, %22
  %3294 = mul nsw i32 %3293, %stride_y
  %3295 = add nsw i32 %2404, %3294
  %t2390 = mul nsw i32 %3295, %2391
  %3296 = add nsw i32 %2405, %3294
  %t2392 = mul nsw i32 %3296, %2391
  %3297 = sub nsw i32 %3294, %t2346
  %t2394 = mul nsw i32 %3297, %2391
  br i1 %2406, label %"for output.s0.x.xo89.preheader", label %"end for output.s0.x.xo90", !prof !101

"for output.s0.x.xo89.preheader":                 ; preds = %"for output.s0.y.yo86"
  %3298 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %3299 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %3300 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  %3301 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %3302 = mul nsw i32 %3293, %24
  %3303 = add i32 %t2374, %3302
  br label %"for output.s0.x.xo89"

"end for output.s0.y.yo87":                       ; preds = %"end for output.s0.x.xo90", %"consume resampled_input85"
  %3304 = add nuw nsw i32 %output.s0.b.rebased62, 1
  %.not638 = icmp eq i32 %3304, %15
  br i1 %.not638, label %"end for output.s0.b.rebased61", label %"for output.s0.b.rebased60"

"for output.s0.x.xo89":                           ; preds = %"for output.s0.x.xo89.preheader", %"consume convolved102"
  %output.s0.x.xo91 = phi i32 [ %3773, %"consume convolved102" ], [ 0, %"for output.s0.x.xo89.preheader" ]
  br i1 %t2340, label %then_bb94, label %next_bb95

"end for output.s0.x.xo90.loopexit":              ; preds = %"consume convolved102"
  store <32 x i32> %.lcssa5268.us.lcssa5284, <32 x i32>* %2407, align 128, !tbaa !111
  store <32 x i32> %.lcssa5270.us.lcssa5287, <32 x i32>* %2409, align 128, !tbaa !119
  store <32 x i32> %.lcssa5272.us.lcssa5290, <32 x i32>* %2411, align 128, !tbaa !121
  store <32 x i32> %.lcssa5274.us.lcssa5293, <32 x i32>* %2413, align 128, !tbaa !124
  br label %"end for output.s0.x.xo90"

"end for output.s0.x.xo90":                       ; preds = %"end for output.s0.x.xo90.loopexit", %"for output.s0.y.yo86"
  %3305 = add nuw nsw i32 %output.s0.y.yo88, 1
  %.not639 = icmp eq i32 %3305, %23
  br i1 %.not639, label %"end for output.s0.y.yo87", label %"for output.s0.y.yo86"

then_bb94:                                        ; preds = %"for output.s0.x.xo89"
  %3306 = load <32 x i32>, <32 x i32>* %2694, align 128, !tbaa !180
  %3307 = load <32 x i32>, <32 x i32>* %2696, align 128, !tbaa !186
  %3308 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3307, <32 x i32> %3306)
  %3309 = bitcast <64 x i32> %3308 to <128 x i16>
  %3310 = sext <128 x i16> %3309 to <128 x i32>
  %3311 = add nsw i32 %output.s0.x.xo91, %19
  %3312 = mul nsw i32 %3311, %stride_x
  %3313 = add i32 %3312, %t2394
  %3314 = sub i32 %3313, %t2348
  %3315 = shl nsw i32 %3314, 7
  %3316 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3315
  %3317 = bitcast i8* %3316 to <128 x i8>*
  %3318 = load <128 x i8>, <128 x i8>* %3317, align 128, !tbaa !129
  %3319 = zext <128 x i8> %3318 to <128 x i32>
  %3320 = shufflevector <128 x i32> %3310, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3321 = shufflevector <128 x i32> %3319, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1131 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3320, <32 x i32> %3321) #11
  %ab.i1132 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1131, <32 x i32> %3320, <32 x i32> %3321) #11
  %3322 = shufflevector <128 x i32> %3310, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3323 = shufflevector <128 x i32> %3319, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1133 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3322, <32 x i32> %3323) #11
  %ab.i1134 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1133, <32 x i32> %3322, <32 x i32> %3323) #11
  %3324 = shufflevector <128 x i32> %3310, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3325 = shufflevector <128 x i32> %3319, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1135 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3324, <32 x i32> %3325) #11
  %ab.i1136 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1135, <32 x i32> %3324, <32 x i32> %3325) #11
  %3326 = shufflevector <128 x i32> %3310, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3327 = shufflevector <128 x i32> %3319, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1137 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3326, <32 x i32> %3327) #11
  %ab.i1138 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1137, <32 x i32> %3326, <32 x i32> %3327) #11
  %3328 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1134, <32 x i32> %ab.i1132)
  %3329 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1138, <32 x i32> %ab.i1136)
  %3330 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2685, <32 x i32> %2684)
  %3331 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2687, <32 x i32> %2686)
  %3332 = add nsw <64 x i32> %3330, %3328
  %3333 = add nsw <64 x i32> %3331, %3329
  %3334 = shufflevector <64 x i32> %3333, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3335 = shufflevector <64 x i32> %3332, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3336 = shufflevector <64 x i32> %3332, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3337 = shufflevector <64 x i32> %3333, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3338 = shufflevector <128 x i32> %3334, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3339 = load <32 x i32>, <32 x i32>* %2698, align 128, !tbaa !188
  %3340 = load <32 x i32>, <32 x i32>* %2700, align 128, !tbaa !191
  %3341 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3340, <32 x i32> %3339)
  %3342 = bitcast <64 x i32> %3341 to <128 x i16>
  %3343 = sext <128 x i16> %3342 to <128 x i32>
  %3344 = add i32 %3312, %2414
  %3345 = add i32 %3344, %t2394
  %3346 = shl nsw i32 %3345, 7
  %3347 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3346
  %3348 = bitcast i8* %3347 to <128 x i8>*
  %3349 = load <128 x i8>, <128 x i8>* %3348, align 128, !tbaa !129
  %3350 = zext <128 x i8> %3349 to <128 x i32>
  %3351 = shufflevector <128 x i32> %3343, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3352 = shufflevector <128 x i32> %3350, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1139 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3351, <32 x i32> %3352) #11
  %ab.i1140 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1139, <32 x i32> %3351, <32 x i32> %3352) #11
  %3353 = shufflevector <128 x i32> %3343, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3354 = shufflevector <128 x i32> %3350, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1141 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3353, <32 x i32> %3354) #11
  %ab.i1142 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1141, <32 x i32> %3353, <32 x i32> %3354) #11
  %3355 = shufflevector <128 x i32> %3343, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3356 = shufflevector <128 x i32> %3350, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1143 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3355, <32 x i32> %3356) #11
  %ab.i1144 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1143, <32 x i32> %3355, <32 x i32> %3356) #11
  %3357 = shufflevector <128 x i32> %3343, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3358 = shufflevector <128 x i32> %3350, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1145 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3357, <32 x i32> %3358) #11
  %ab.i1146 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1145, <32 x i32> %3357, <32 x i32> %3358) #11
  %3359 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1142, <32 x i32> %ab.i1140)
  %3360 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1146, <32 x i32> %ab.i1144)
  %3361 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3336, <32 x i32> %3335)
  %3362 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3338, <32 x i32> %3337)
  %3363 = add nsw <64 x i32> %3361, %3359
  %3364 = add nsw <64 x i32> %3362, %3360
  %3365 = shufflevector <64 x i32> %3364, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3366 = shufflevector <64 x i32> %3363, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3367 = shufflevector <64 x i32> %3363, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3368 = shufflevector <64 x i32> %3364, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3369 = shufflevector <128 x i32> %3365, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3370 = load <32 x i32>, <32 x i32>* %2702, align 128, !tbaa !193
  %3371 = load <32 x i32>, <32 x i32>* %2704, align 128, !tbaa !197
  %3372 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3371, <32 x i32> %3370)
  %3373 = bitcast <64 x i32> %3372 to <128 x i16>
  %3374 = sext <128 x i16> %3373 to <128 x i32>
  %3375 = add i32 %3312, %2415
  %3376 = add i32 %3375, %t2394
  %3377 = shl nsw i32 %3376, 7
  %3378 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3377
  %3379 = bitcast i8* %3378 to <128 x i8>*
  %3380 = load <128 x i8>, <128 x i8>* %3379, align 128, !tbaa !129
  %3381 = zext <128 x i8> %3380 to <128 x i32>
  %3382 = shufflevector <128 x i32> %3374, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3383 = shufflevector <128 x i32> %3381, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1147 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3382, <32 x i32> %3383) #11
  %ab.i1148 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1147, <32 x i32> %3382, <32 x i32> %3383) #11
  %3384 = shufflevector <128 x i32> %3374, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3385 = shufflevector <128 x i32> %3381, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1149 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3384, <32 x i32> %3385) #11
  %ab.i1150 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1149, <32 x i32> %3384, <32 x i32> %3385) #11
  %3386 = shufflevector <128 x i32> %3374, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3387 = shufflevector <128 x i32> %3381, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1151 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3386, <32 x i32> %3387) #11
  %ab.i1152 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1151, <32 x i32> %3386, <32 x i32> %3387) #11
  %3388 = shufflevector <128 x i32> %3374, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3389 = shufflevector <128 x i32> %3381, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1153 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3388, <32 x i32> %3389) #11
  %ab.i1154 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1153, <32 x i32> %3388, <32 x i32> %3389) #11
  %3390 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1150, <32 x i32> %ab.i1148)
  %3391 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1154, <32 x i32> %ab.i1152)
  %3392 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3367, <32 x i32> %3366)
  %3393 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3369, <32 x i32> %3368)
  %3394 = add nsw <64 x i32> %3392, %3390
  %3395 = add nsw <64 x i32> %3393, %3391
  %3396 = shufflevector <64 x i32> %3395, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3397 = shufflevector <64 x i32> %3394, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3398 = shufflevector <64 x i32> %3394, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3399 = shufflevector <64 x i32> %3395, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3400 = shufflevector <128 x i32> %3396, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3401 = load <32 x i32>, <32 x i32>* %2706, align 128, !tbaa !105
  %3402 = load <32 x i32>, <32 x i32>* %2708, align 128, !tbaa !105
  %3403 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3402, <32 x i32> %3401)
  %3404 = bitcast <64 x i32> %3403 to <128 x i16>
  %3405 = sext <128 x i16> %3404 to <128 x i32>
  %3406 = add i32 %3312, %t2392
  %3407 = sub i32 %3406, %t2348
  %3408 = shl nsw i32 %3407, 7
  %3409 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3408
  %3410 = bitcast i8* %3409 to <128 x i8>*
  %3411 = load <128 x i8>, <128 x i8>* %3410, align 128, !tbaa !129
  %3412 = zext <128 x i8> %3411 to <128 x i32>
  %3413 = shufflevector <128 x i32> %3405, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3414 = shufflevector <128 x i32> %3412, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1155 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3413, <32 x i32> %3414) #11
  %ab.i1156 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1155, <32 x i32> %3413, <32 x i32> %3414) #11
  %3415 = shufflevector <128 x i32> %3405, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3416 = shufflevector <128 x i32> %3412, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1157 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3415, <32 x i32> %3416) #11
  %ab.i1158 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1157, <32 x i32> %3415, <32 x i32> %3416) #11
  %3417 = shufflevector <128 x i32> %3405, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3418 = shufflevector <128 x i32> %3412, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1159 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3417, <32 x i32> %3418) #11
  %ab.i1160 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1159, <32 x i32> %3417, <32 x i32> %3418) #11
  %3419 = shufflevector <128 x i32> %3405, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3420 = shufflevector <128 x i32> %3412, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1161 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3419, <32 x i32> %3420) #11
  %ab.i1162 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1161, <32 x i32> %3419, <32 x i32> %3420) #11
  %3421 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1158, <32 x i32> %ab.i1156)
  %3422 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1162, <32 x i32> %ab.i1160)
  %3423 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3398, <32 x i32> %3397)
  %3424 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3400, <32 x i32> %3399)
  %3425 = add nsw <64 x i32> %3423, %3421
  %3426 = add nsw <64 x i32> %3424, %3422
  %3427 = shufflevector <64 x i32> %3426, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3428 = shufflevector <64 x i32> %3425, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3429 = shufflevector <64 x i32> %3425, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3430 = shufflevector <64 x i32> %3426, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3431 = shufflevector <128 x i32> %3427, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3432 = load <32 x i32>, <32 x i32>* %2710, align 128, !tbaa !105
  %3433 = load <32 x i32>, <32 x i32>* %2712, align 128, !tbaa !105
  %3434 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3433, <32 x i32> %3432)
  %3435 = bitcast <64 x i32> %3434 to <128 x i16>
  %3436 = sext <128 x i16> %3435 to <128 x i32>
  %3437 = add i32 %3344, %t2392
  %3438 = shl nsw i32 %3437, 7
  %3439 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3438
  %3440 = bitcast i8* %3439 to <128 x i8>*
  %3441 = load <128 x i8>, <128 x i8>* %3440, align 128, !tbaa !129
  %3442 = zext <128 x i8> %3441 to <128 x i32>
  %3443 = shufflevector <128 x i32> %3436, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3444 = shufflevector <128 x i32> %3442, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1163 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3443, <32 x i32> %3444) #11
  %ab.i1164 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1163, <32 x i32> %3443, <32 x i32> %3444) #11
  %3445 = shufflevector <128 x i32> %3436, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3446 = shufflevector <128 x i32> %3442, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1165 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3445, <32 x i32> %3446) #11
  %ab.i1166 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1165, <32 x i32> %3445, <32 x i32> %3446) #11
  %3447 = shufflevector <128 x i32> %3436, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3448 = shufflevector <128 x i32> %3442, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1167 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3447, <32 x i32> %3448) #11
  %ab.i1168 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1167, <32 x i32> %3447, <32 x i32> %3448) #11
  %3449 = shufflevector <128 x i32> %3436, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3450 = shufflevector <128 x i32> %3442, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1169 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3449, <32 x i32> %3450) #11
  %ab.i1170 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1169, <32 x i32> %3449, <32 x i32> %3450) #11
  %3451 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1166, <32 x i32> %ab.i1164)
  %3452 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1170, <32 x i32> %ab.i1168)
  %3453 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3429, <32 x i32> %3428)
  %3454 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3431, <32 x i32> %3430)
  %3455 = add nsw <64 x i32> %3453, %3451
  %3456 = add nsw <64 x i32> %3454, %3452
  %3457 = shufflevector <64 x i32> %3456, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3458 = shufflevector <64 x i32> %3455, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3459 = shufflevector <64 x i32> %3455, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3460 = shufflevector <64 x i32> %3456, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3461 = shufflevector <128 x i32> %3457, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3462 = load <32 x i32>, <32 x i32>* %2714, align 128, !tbaa !105
  %3463 = load <32 x i32>, <32 x i32>* %2716, align 128, !tbaa !105
  %3464 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3463, <32 x i32> %3462)
  %3465 = bitcast <64 x i32> %3464 to <128 x i16>
  %3466 = sext <128 x i16> %3465 to <128 x i32>
  %3467 = add i32 %3375, %t2392
  %3468 = shl nsw i32 %3467, 7
  %3469 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3468
  %3470 = bitcast i8* %3469 to <128 x i8>*
  %3471 = load <128 x i8>, <128 x i8>* %3470, align 128, !tbaa !129
  %3472 = zext <128 x i8> %3471 to <128 x i32>
  %3473 = shufflevector <128 x i32> %3466, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3474 = shufflevector <128 x i32> %3472, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1171 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3473, <32 x i32> %3474) #11
  %ab.i1172 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1171, <32 x i32> %3473, <32 x i32> %3474) #11
  %3475 = shufflevector <128 x i32> %3466, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3476 = shufflevector <128 x i32> %3472, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1173 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3475, <32 x i32> %3476) #11
  %ab.i1174 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1173, <32 x i32> %3475, <32 x i32> %3476) #11
  %3477 = shufflevector <128 x i32> %3466, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3478 = shufflevector <128 x i32> %3472, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1175 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3477, <32 x i32> %3478) #11
  %ab.i1176 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1175, <32 x i32> %3477, <32 x i32> %3478) #11
  %3479 = shufflevector <128 x i32> %3466, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3480 = shufflevector <128 x i32> %3472, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1177 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3479, <32 x i32> %3480) #11
  %ab.i1178 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1177, <32 x i32> %3479, <32 x i32> %3480) #11
  %3481 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1174, <32 x i32> %ab.i1172)
  %3482 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1178, <32 x i32> %ab.i1176)
  %3483 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3459, <32 x i32> %3458)
  %3484 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3461, <32 x i32> %3460)
  %3485 = add nsw <64 x i32> %3483, %3481
  %3486 = add nsw <64 x i32> %3484, %3482
  %3487 = shufflevector <64 x i32> %3486, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3488 = shufflevector <64 x i32> %3485, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3489 = shufflevector <64 x i32> %3485, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3490 = shufflevector <64 x i32> %3486, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3491 = shufflevector <128 x i32> %3487, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3492 = load <32 x i32>, <32 x i32>* %2718, align 128, !tbaa !105
  %3493 = load <32 x i32>, <32 x i32>* %2720, align 128, !tbaa !105
  %3494 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3493, <32 x i32> %3492)
  %3495 = bitcast <64 x i32> %3494 to <128 x i16>
  %3496 = sext <128 x i16> %3495 to <128 x i32>
  %3497 = add i32 %3312, %t2390
  %3498 = sub i32 %3497, %t2348
  %3499 = shl nsw i32 %3498, 7
  %3500 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3499
  %3501 = bitcast i8* %3500 to <128 x i8>*
  %3502 = load <128 x i8>, <128 x i8>* %3501, align 128, !tbaa !129
  %3503 = zext <128 x i8> %3502 to <128 x i32>
  %3504 = shufflevector <128 x i32> %3496, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3505 = shufflevector <128 x i32> %3503, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1179 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3504, <32 x i32> %3505) #11
  %ab.i1180 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1179, <32 x i32> %3504, <32 x i32> %3505) #11
  %3506 = shufflevector <128 x i32> %3496, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3507 = shufflevector <128 x i32> %3503, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1181 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3506, <32 x i32> %3507) #11
  %ab.i1182 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1181, <32 x i32> %3506, <32 x i32> %3507) #11
  %3508 = shufflevector <128 x i32> %3496, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3509 = shufflevector <128 x i32> %3503, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1183 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3508, <32 x i32> %3509) #11
  %ab.i1184 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1183, <32 x i32> %3508, <32 x i32> %3509) #11
  %3510 = shufflevector <128 x i32> %3496, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3511 = shufflevector <128 x i32> %3503, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1185 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3510, <32 x i32> %3511) #11
  %ab.i1186 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1185, <32 x i32> %3510, <32 x i32> %3511) #11
  %3512 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1182, <32 x i32> %ab.i1180)
  %3513 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1186, <32 x i32> %ab.i1184)
  %3514 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3489, <32 x i32> %3488)
  %3515 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3491, <32 x i32> %3490)
  %3516 = add nsw <64 x i32> %3514, %3512
  %3517 = add nsw <64 x i32> %3515, %3513
  %3518 = shufflevector <64 x i32> %3517, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3519 = shufflevector <64 x i32> %3516, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3520 = shufflevector <64 x i32> %3516, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3521 = shufflevector <64 x i32> %3517, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3522 = shufflevector <128 x i32> %3518, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3523 = load <32 x i32>, <32 x i32>* %2722, align 128, !tbaa !105
  %3524 = load <32 x i32>, <32 x i32>* %2724, align 128, !tbaa !105
  %3525 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3524, <32 x i32> %3523)
  %3526 = bitcast <64 x i32> %3525 to <128 x i16>
  %3527 = sext <128 x i16> %3526 to <128 x i32>
  %3528 = add i32 %3344, %t2390
  %3529 = shl nsw i32 %3528, 7
  %3530 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3529
  %3531 = bitcast i8* %3530 to <128 x i8>*
  %3532 = load <128 x i8>, <128 x i8>* %3531, align 128, !tbaa !129
  %3533 = zext <128 x i8> %3532 to <128 x i32>
  %3534 = shufflevector <128 x i32> %3527, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3535 = shufflevector <128 x i32> %3533, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1187 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3534, <32 x i32> %3535) #11
  %ab.i1188 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1187, <32 x i32> %3534, <32 x i32> %3535) #11
  %3536 = shufflevector <128 x i32> %3527, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3537 = shufflevector <128 x i32> %3533, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1189 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3536, <32 x i32> %3537) #11
  %ab.i1190 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1189, <32 x i32> %3536, <32 x i32> %3537) #11
  %3538 = shufflevector <128 x i32> %3527, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3539 = shufflevector <128 x i32> %3533, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1191 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3538, <32 x i32> %3539) #11
  %ab.i1192 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1191, <32 x i32> %3538, <32 x i32> %3539) #11
  %3540 = shufflevector <128 x i32> %3527, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3541 = shufflevector <128 x i32> %3533, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1193 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3540, <32 x i32> %3541) #11
  %ab.i1194 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1193, <32 x i32> %3540, <32 x i32> %3541) #11
  %3542 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1190, <32 x i32> %ab.i1188)
  %3543 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1194, <32 x i32> %ab.i1192)
  %3544 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3520, <32 x i32> %3519)
  %3545 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3522, <32 x i32> %3521)
  %3546 = add nsw <64 x i32> %3544, %3542
  %3547 = add nsw <64 x i32> %3545, %3543
  %3548 = shufflevector <64 x i32> %3547, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3549 = shufflevector <64 x i32> %3546, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3550 = shufflevector <64 x i32> %3546, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3551 = shufflevector <64 x i32> %3547, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3552 = shufflevector <128 x i32> %3548, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3553 = load <32 x i32>, <32 x i32>* %2726, align 128, !tbaa !105
  %3554 = load <32 x i32>, <32 x i32>* %2728, align 128, !tbaa !105
  %3555 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3554, <32 x i32> %3553)
  %3556 = bitcast <64 x i32> %3555 to <128 x i16>
  %3557 = sext <128 x i16> %3556 to <128 x i32>
  %3558 = add i32 %3375, %t2390
  %3559 = shl nsw i32 %3558, 7
  %3560 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3559
  %3561 = bitcast i8* %3560 to <128 x i8>*
  %3562 = load <128 x i8>, <128 x i8>* %3561, align 128, !tbaa !129
  %3563 = zext <128 x i8> %3562 to <128 x i32>
  %3564 = shufflevector <128 x i32> %3557, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3565 = shufflevector <128 x i32> %3563, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1195 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3564, <32 x i32> %3565) #11
  %ab.i1196 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1195, <32 x i32> %3564, <32 x i32> %3565) #11
  %3566 = shufflevector <128 x i32> %3557, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3567 = shufflevector <128 x i32> %3563, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1197 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3566, <32 x i32> %3567) #11
  %ab.i1198 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1197, <32 x i32> %3566, <32 x i32> %3567) #11
  %3568 = shufflevector <128 x i32> %3557, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3569 = shufflevector <128 x i32> %3563, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1199 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3568, <32 x i32> %3569) #11
  %ab.i1200 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1199, <32 x i32> %3568, <32 x i32> %3569) #11
  %3570 = shufflevector <128 x i32> %3557, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3571 = shufflevector <128 x i32> %3563, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1201 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3570, <32 x i32> %3571) #11
  %ab.i1202 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1201, <32 x i32> %3570, <32 x i32> %3571) #11
  %3572 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1198, <32 x i32> %ab.i1196)
  %3573 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1202, <32 x i32> %ab.i1200)
  %3574 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3550, <32 x i32> %3549)
  %3575 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3552, <32 x i32> %3551)
  %3576 = add nsw <64 x i32> %3574, %3572
  %3577 = add nsw <64 x i32> %3575, %3573
  %3578 = shufflevector <64 x i32> %3577, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3579 = shufflevector <64 x i32> %3576, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3580 = shufflevector <64 x i32> %3576, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3581 = shufflevector <64 x i32> %3577, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3582 = shufflevector <128 x i32> %3578, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br label %"consume convolved102"

next_bb95:                                        ; preds = %"for output.s0.x.xo89"
  %3583 = add nsw i32 %output.s0.x.xo91, %19
  br i1 %2347, label %"for convolved.s1.r19$y96.preheader", label %"consume convolved102", !prof !101

"for convolved.s1.r19$y96.preheader":             ; preds = %next_bb95
  %3584 = mul nsw i32 %3583, %stride_x
  %3585 = sub i32 %3584, %t2348
  br i1 %2346, label %"for convolved.s1.r19$y96.us", label %"consume convolved102", !prof !101

"for convolved.s1.r19$y96.us":                    ; preds = %"for convolved.s1.r19$y96.preheader", %"end for convolved.s1.r19$x100.loopexit.us"
  %.lcssa5274.us5282 = phi <32 x i32> [ %.lcssa5588, %"end for convolved.s1.r19$x100.loopexit.us" ], [ %2687, %"for convolved.s1.r19$y96.preheader" ]
  %.lcssa5272.us5280 = phi <32 x i32> [ %.lcssa5589, %"end for convolved.s1.r19$x100.loopexit.us" ], [ %2686, %"for convolved.s1.r19$y96.preheader" ]
  %.lcssa5270.us5278 = phi <32 x i32> [ %.lcssa5590, %"end for convolved.s1.r19$x100.loopexit.us" ], [ %2685, %"for convolved.s1.r19$y96.preheader" ]
  %.lcssa5268.us5276 = phi <32 x i32> [ %.lcssa5591, %"end for convolved.s1.r19$x100.loopexit.us" ], [ %2684, %"for convolved.s1.r19$y96.preheader" ]
  %"convolved.s1.r19$y98.us" = phi i32 [ %3707, %"end for convolved.s1.r19$x100.loopexit.us" ], [ 0, %"for convolved.s1.r19$y96.preheader" ]
  %3586 = mul nsw i32 %"convolved.s1.r19$y98.us", %a88
  %3587 = add nsw i32 %3586, %3297
  %3588 = mul nsw i32 %3587, %2391
  %t2397.us = add nsw i32 %3585, %3588
  %3589 = mul nsw i32 %"convolved.s1.r19$y98.us", %4
  br i1 %2440, label %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x99.us"

"for convolved.s1.r19$x99.us":                    ; preds = %"for convolved.s1.r19$y96.us", %"for convolved.s1.r19$x99.us"
  %3590 = phi <32 x i32> [ %3668, %"for convolved.s1.r19$x99.us" ], [ %.lcssa5274.us5282, %"for convolved.s1.r19$y96.us" ]
  %3591 = phi <32 x i32> [ %3667, %"for convolved.s1.r19$x99.us" ], [ %.lcssa5272.us5280, %"for convolved.s1.r19$y96.us" ]
  %3592 = phi <32 x i32> [ %3666, %"for convolved.s1.r19$x99.us" ], [ %.lcssa5270.us5278, %"for convolved.s1.r19$y96.us" ]
  %3593 = phi <32 x i32> [ %3665, %"for convolved.s1.r19$x99.us" ], [ %.lcssa5268.us5276, %"for convolved.s1.r19$y96.us" ]
  %"convolved.s1.r19$x101.us" = phi i32 [ %3669, %"for convolved.s1.r19$x99.us" ], [ 0, %"for convolved.s1.r19$y96.us" ]
  %niter5650 = phi i32 [ %niter5650.nsub.1, %"for convolved.s1.r19$x99.us" ], [ %unroll_iter5649, %"for convolved.s1.r19$y96.us" ]
  %3594 = add nsw i32 %"convolved.s1.r19$x101.us", %3589
  %3595 = shl nsw i32 %3594, 7
  %3596 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %3595
  %3597 = bitcast i16* %3596 to <32 x i32>*
  %3598 = load <32 x i32>, <32 x i32>* %3597, align 128, !tbaa !105
  %3599 = getelementptr inbounds i16, i16* %3596, i32 64
  %3600 = bitcast i16* %3599 to <32 x i32>*
  %3601 = load <32 x i32>, <32 x i32>* %3600, align 128, !tbaa !105
  %3602 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3601, <32 x i32> %3598)
  %3603 = bitcast <64 x i32> %3602 to <128 x i16>
  %3604 = sext <128 x i16> %3603 to <128 x i32>
  %3605 = mul nsw i32 %"convolved.s1.r19$x101.us", %a93
  %3606 = add nsw i32 %t2397.us, %3605
  %3607 = shl nsw i32 %3606, 7
  %3608 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3607
  %3609 = bitcast i8* %3608 to <128 x i8>*
  %3610 = load <128 x i8>, <128 x i8>* %3609, align 128, !tbaa !129
  %3611 = zext <128 x i8> %3610 to <128 x i32>
  %3612 = shufflevector <128 x i32> %3604, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3613 = shufflevector <128 x i32> %3611, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1203.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3612, <32 x i32> %3613) #11
  %ab.i1204.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1203.us, <32 x i32> %3612, <32 x i32> %3613) #11
  %3614 = shufflevector <128 x i32> %3604, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3615 = shufflevector <128 x i32> %3611, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1205.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3614, <32 x i32> %3615) #11
  %ab.i1206.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1205.us, <32 x i32> %3614, <32 x i32> %3615) #11
  %3616 = shufflevector <128 x i32> %3604, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3617 = shufflevector <128 x i32> %3611, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1207.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3616, <32 x i32> %3617) #11
  %ab.i1208.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1207.us, <32 x i32> %3616, <32 x i32> %3617) #11
  %3618 = shufflevector <128 x i32> %3604, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3619 = shufflevector <128 x i32> %3611, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1209.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3618, <32 x i32> %3619) #11
  %ab.i1210.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1209.us, <32 x i32> %3618, <32 x i32> %3619) #11
  %3620 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1206.us, <32 x i32> %ab.i1204.us)
  %3621 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1210.us, <32 x i32> %ab.i1208.us)
  %3622 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3592, <32 x i32> %3593)
  %3623 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3590, <32 x i32> %3591)
  %3624 = add nsw <64 x i32> %3622, %3620
  %3625 = add nsw <64 x i32> %3623, %3621
  %3626 = shufflevector <64 x i32> %3625, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3627 = shufflevector <64 x i32> %3624, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3628 = shufflevector <64 x i32> %3624, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3629 = shufflevector <64 x i32> %3625, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3630 = shufflevector <128 x i32> %3626, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3631 = or i32 %"convolved.s1.r19$x101.us", 1
  %3632 = add nsw i32 %3631, %3589
  %3633 = shl nsw i32 %3632, 7
  %3634 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %3633
  %3635 = bitcast i16* %3634 to <32 x i32>*
  %3636 = load <32 x i32>, <32 x i32>* %3635, align 128, !tbaa !105
  %3637 = getelementptr inbounds i16, i16* %3634, i32 64
  %3638 = bitcast i16* %3637 to <32 x i32>*
  %3639 = load <32 x i32>, <32 x i32>* %3638, align 128, !tbaa !105
  %3640 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3639, <32 x i32> %3636)
  %3641 = bitcast <64 x i32> %3640 to <128 x i16>
  %3642 = sext <128 x i16> %3641 to <128 x i32>
  %3643 = mul nsw i32 %3631, %a93
  %3644 = add nsw i32 %t2397.us, %3643
  %3645 = shl nsw i32 %3644, 7
  %3646 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3645
  %3647 = bitcast i8* %3646 to <128 x i8>*
  %3648 = load <128 x i8>, <128 x i8>* %3647, align 128, !tbaa !129
  %3649 = zext <128 x i8> %3648 to <128 x i32>
  %3650 = shufflevector <128 x i32> %3642, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3651 = shufflevector <128 x i32> %3649, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1203.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3650, <32 x i32> %3651) #11
  %ab.i1204.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1203.us.1, <32 x i32> %3650, <32 x i32> %3651) #11
  %3652 = shufflevector <128 x i32> %3642, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3653 = shufflevector <128 x i32> %3649, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1205.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3652, <32 x i32> %3653) #11
  %ab.i1206.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1205.us.1, <32 x i32> %3652, <32 x i32> %3653) #11
  %3654 = shufflevector <128 x i32> %3642, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3655 = shufflevector <128 x i32> %3649, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1207.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3654, <32 x i32> %3655) #11
  %ab.i1208.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1207.us.1, <32 x i32> %3654, <32 x i32> %3655) #11
  %3656 = shufflevector <128 x i32> %3642, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3657 = shufflevector <128 x i32> %3649, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1209.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3656, <32 x i32> %3657) #11
  %ab.i1210.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1209.us.1, <32 x i32> %3656, <32 x i32> %3657) #11
  %3658 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1206.us.1, <32 x i32> %ab.i1204.us.1)
  %3659 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1210.us.1, <32 x i32> %ab.i1208.us.1)
  %3660 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3628, <32 x i32> %3627)
  %3661 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3630, <32 x i32> %3629)
  %3662 = add nsw <64 x i32> %3660, %3658
  %3663 = add nsw <64 x i32> %3661, %3659
  %3664 = shufflevector <64 x i32> %3663, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3665 = shufflevector <64 x i32> %3662, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3666 = shufflevector <64 x i32> %3662, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3667 = shufflevector <64 x i32> %3663, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3668 = shufflevector <128 x i32> %3664, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3669 = add nuw nsw i32 %"convolved.s1.r19$x101.us", 2
  %niter5650.nsub.1 = add i32 %niter5650, -2
  %niter5650.ncmp.1 = icmp eq i32 %niter5650.nsub.1, 0
  br i1 %niter5650.ncmp.1, label %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x99.us"

"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x99.us", %"for convolved.s1.r19$y96.us"
  %.lcssa5591.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y96.us" ], [ %3665, %"for convolved.s1.r19$x99.us" ]
  %.lcssa5590.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y96.us" ], [ %3666, %"for convolved.s1.r19$x99.us" ]
  %.lcssa5589.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y96.us" ], [ %3667, %"for convolved.s1.r19$x99.us" ]
  %.lcssa5588.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y96.us" ], [ %3668, %"for convolved.s1.r19$x99.us" ]
  %.unr5644 = phi <32 x i32> [ %.lcssa5274.us5282, %"for convolved.s1.r19$y96.us" ], [ %3668, %"for convolved.s1.r19$x99.us" ]
  %.unr5645 = phi <32 x i32> [ %.lcssa5272.us5280, %"for convolved.s1.r19$y96.us" ], [ %3667, %"for convolved.s1.r19$x99.us" ]
  %.unr5646 = phi <32 x i32> [ %.lcssa5270.us5278, %"for convolved.s1.r19$y96.us" ], [ %3666, %"for convolved.s1.r19$x99.us" ]
  %.unr5647 = phi <32 x i32> [ %.lcssa5268.us5276, %"for convolved.s1.r19$y96.us" ], [ %3665, %"for convolved.s1.r19$x99.us" ]
  %"convolved.s1.r19$x101.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y96.us" ], [ %3669, %"for convolved.s1.r19$x99.us" ]
  br i1 %lcmp.mod5648.not, label %"end for convolved.s1.r19$x100.loopexit.us", label %"for convolved.s1.r19$x99.us.epil"

"for convolved.s1.r19$x99.us.epil":               ; preds = %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa"
  %3670 = add nsw i32 %"convolved.s1.r19$x101.us.unr", %3589
  %3671 = shl nsw i32 %3670, 7
  %3672 = getelementptr inbounds i16, i16* %filter_zeroed39, i32 %3671
  %3673 = bitcast i16* %3672 to <32 x i32>*
  %3674 = load <32 x i32>, <32 x i32>* %3673, align 128, !tbaa !105
  %3675 = getelementptr inbounds i16, i16* %3672, i32 64
  %3676 = bitcast i16* %3675 to <32 x i32>*
  %3677 = load <32 x i32>, <32 x i32>* %3676, align 128, !tbaa !105
  %3678 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3677, <32 x i32> %3674)
  %3679 = bitcast <64 x i32> %3678 to <128 x i16>
  %3680 = sext <128 x i16> %3679 to <128 x i32>
  %3681 = mul nsw i32 %"convolved.s1.r19$x101.us.unr", %a93
  %3682 = add nsw i32 %t2397.us, %3681
  %3683 = shl nsw i32 %3682, 7
  %3684 = getelementptr inbounds i8, i8* %resampled_input65, i32 %3683
  %3685 = bitcast i8* %3684 to <128 x i8>*
  %3686 = load <128 x i8>, <128 x i8>* %3685, align 128, !tbaa !129
  %3687 = zext <128 x i8> %3686 to <128 x i32>
  %3688 = shufflevector <128 x i32> %3680, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3689 = shufflevector <128 x i32> %3687, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1203.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3688, <32 x i32> %3689) #11
  %ab.i1204.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1203.us.epil, <32 x i32> %3688, <32 x i32> %3689) #11
  %3690 = shufflevector <128 x i32> %3680, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3691 = shufflevector <128 x i32> %3687, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1205.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3690, <32 x i32> %3691) #11
  %ab.i1206.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1205.us.epil, <32 x i32> %3690, <32 x i32> %3691) #11
  %3692 = shufflevector <128 x i32> %3680, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3693 = shufflevector <128 x i32> %3687, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1207.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3692, <32 x i32> %3693) #11
  %ab.i1208.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1207.us.epil, <32 x i32> %3692, <32 x i32> %3693) #11
  %3694 = shufflevector <128 x i32> %3680, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3695 = shufflevector <128 x i32> %3687, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1209.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %3694, <32 x i32> %3695) #11
  %ab.i1210.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1209.us.epil, <32 x i32> %3694, <32 x i32> %3695) #11
  %3696 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1206.us.epil, <32 x i32> %ab.i1204.us.epil)
  %3697 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1210.us.epil, <32 x i32> %ab.i1208.us.epil)
  %3698 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr5646, <32 x i32> %.unr5647)
  %3699 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.unr5644, <32 x i32> %.unr5645)
  %3700 = add nsw <64 x i32> %3698, %3696
  %3701 = add nsw <64 x i32> %3699, %3697
  %3702 = shufflevector <64 x i32> %3701, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3703 = shufflevector <128 x i32> %3702, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3704 = shufflevector <64 x i32> %3701, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3705 = shufflevector <64 x i32> %3700, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3706 = shufflevector <64 x i32> %3700, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %"end for convolved.s1.r19$x100.loopexit.us"

"end for convolved.s1.r19$x100.loopexit.us":      ; preds = %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x99.us.epil"
  %.lcssa5591 = phi <32 x i32> [ %.lcssa5591.ph, %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa" ], [ %3706, %"for convolved.s1.r19$x99.us.epil" ]
  %.lcssa5590 = phi <32 x i32> [ %.lcssa5590.ph, %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa" ], [ %3705, %"for convolved.s1.r19$x99.us.epil" ]
  %.lcssa5589 = phi <32 x i32> [ %.lcssa5589.ph, %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa" ], [ %3704, %"for convolved.s1.r19$x99.us.epil" ]
  %.lcssa5588 = phi <32 x i32> [ %.lcssa5588.ph, %"end for convolved.s1.r19$x100.loopexit.us.unr-lcssa" ], [ %3703, %"for convolved.s1.r19$x99.us.epil" ]
  %3707 = add nuw nsw i32 %"convolved.s1.r19$y98.us", 1
  %.not642.us = icmp eq i32 %3707, %6
  br i1 %.not642.us, label %"consume convolved102", label %"for convolved.s1.r19$y96.us"

"consume convolved102":                           ; preds = %"end for convolved.s1.r19$x100.loopexit.us", %next_bb95, %"for convolved.s1.r19$y96.preheader", %then_bb94
  %.pre-phi5440 = phi i32 [ %3311, %then_bb94 ], [ %3583, %"for convolved.s1.r19$y96.preheader" ], [ %3583, %next_bb95 ], [ %3583, %"end for convolved.s1.r19$x100.loopexit.us" ]
  %.lcssa5274.us.lcssa5293 = phi <32 x i32> [ %3582, %then_bb94 ], [ %2687, %"for convolved.s1.r19$y96.preheader" ], [ %2687, %next_bb95 ], [ %.lcssa5588, %"end for convolved.s1.r19$x100.loopexit.us" ]
  %.lcssa5272.us.lcssa5290 = phi <32 x i32> [ %3581, %then_bb94 ], [ %2686, %"for convolved.s1.r19$y96.preheader" ], [ %2686, %next_bb95 ], [ %.lcssa5589, %"end for convolved.s1.r19$x100.loopexit.us" ]
  %.lcssa5270.us.lcssa5287 = phi <32 x i32> [ %3580, %then_bb94 ], [ %2685, %"for convolved.s1.r19$y96.preheader" ], [ %2685, %next_bb95 ], [ %.lcssa5590, %"end for convolved.s1.r19$x100.loopexit.us" ]
  %.lcssa5268.us.lcssa5284 = phi <32 x i32> [ %3579, %then_bb94 ], [ %2684, %"for convolved.s1.r19$y96.preheader" ], [ %2684, %next_bb95 ], [ %.lcssa5591, %"end for convolved.s1.r19$x100.loopexit.us" ]
  %3708 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.lcssa5270.us.lcssa5287, <32 x i32> %.lcssa5268.us.lcssa5284)
  %3709 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %.lcssa5274.us.lcssa5293, <32 x i32> %.lcssa5272.us.lcssa5290)
  %3710 = shufflevector <64 x i32> %3708, <64 x i32> %3709, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3711 = sext <128 x i32> %3710 to <128 x i64>
  %3712 = mul nsw <128 x i64> %3711, %2418
  %3713 = ashr <128 x i64> %3712, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3714 = add nsw <128 x i64> %3713, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a73 = ashr <128 x i64> %3714, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3715 = icmp slt <128 x i64> %a73, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a72 = select <128 x i1> %3715, <128 x i64> %a73, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3716 = icmp sgt <128 x i64> %a72, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3717 = select <128 x i1> %3716, <128 x i64> %a72, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3718 = trunc <128 x i64> %3717 to <128 x i32>
  %3719 = shufflevector <128 x i32> %3718, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3720 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3719, i32 %output_shift) #11
  %3721 = shufflevector <128 x i32> %3718, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3722 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3721, i32 %output_shift) #11
  %3723 = shufflevector <128 x i32> %3718, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3724 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3723, i32 %output_shift) #11
  %3725 = shufflevector <128 x i32> %3718, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3726 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3725, i32 %output_shift) #11
  %3727 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3722, <32 x i32> %3720)
  %3728 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3726, <32 x i32> %3724)
  %3729 = shufflevector <64 x i32> %3727, <64 x i32> %3728, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3730 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3719, i32 %2420) #11
  %3731 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3721, i32 %2420) #11
  %3732 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3723, i32 %2420) #11
  %3733 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %3725, i32 %2420) #11
  %3734 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3731, <32 x i32> %3730)
  %3735 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3733, <32 x i32> %3732)
  %3736 = shufflevector <64 x i32> %3734, <64 x i32> %3735, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3737 = and <128 x i32> %3736, %2419
  %3738 = add nsw <128 x i32> %3737, %3729
  %3739 = shufflevector <128 x i32> %3738, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3740 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3739, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3741 = shufflevector <128 x i32> %3738, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3742 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3741, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3743 = shufflevector <128 x i32> %3738, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %3744 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3743, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3745 = shufflevector <128 x i32> %3738, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3746 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %3745, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %3747 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3740, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3748 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3742, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3749 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3744, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3750 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %3746, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %3751 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3748, <32 x i32> %3747)
  %3752 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3750, <32 x i32> %3749)
  %3753 = shufflevector <64 x i32> %3751, <64 x i32> %3752, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3754 = trunc <128 x i32> %3753 to <128 x i16>
  %3755 = bitcast <128 x i16> %3754 to <64 x i32>
  %3756 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %3755, <64 x i32> %2424) #11
  %3757 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %3756)
  %3758 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %3756)
  %3759 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3758, <32 x i32> %3299) #11
  %3760 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %3757, <32 x i32> %3298) #11
  %3761 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3759, <32 x i32> %3301) #11
  %3762 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %3760, <32 x i32> %3300) #11
  %3763 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %3762, <32 x i32> %3761)
  %3764 = bitcast <64 x i32> %3763 to <128 x i16>
  %3765 = trunc <128 x i16> %3764 to <128 x i8>
  %3766 = bitcast <128 x i8> %3765 to <32 x i32>
  %3767 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %3766, <32 x i32> %2427) #11
  %3768 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %3767, <32 x i32> %2430) #11
  %3769 = mul nsw i32 %.pre-phi5440, %21
  %3770 = add i32 %3303, %3769
  %3771 = getelementptr inbounds i8, i8* %17, i32 %3770
  %3772 = bitcast i8* %3771 to <32 x i32>*
  store <32 x i32> %3768, <32 x i32>* %3772, align 1, !tbaa !199
  %3773 = add nuw nsw i32 %output.s0.x.xo91, 1
  %.not641 = icmp eq i32 %3773, %20
  br i1 %.not641, label %"end for output.s0.x.xo90.loopexit", label %"for output.s0.x.xo89"

if.end.i1223:                                     ; preds = %next_bb32
  %3774 = icmp eq i32 %4, 3
  %3775 = icmp eq i32 %6, 3
  %3776 = and i1 %3774, %3775
  %3777 = icmp sgt i32 %4, 0
  %3778 = icmp sgt i32 %6, 0
  %3779 = select i1 %3778, i32 %6, i32 0
  %.op = shl i32 %4, 8
  %3780 = select i1 %3777, i32 %.op, i32 0
  %3781 = mul i32 %3780, %3779
  %3782 = or i32 %3781, 134
  %3783 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i32 %3782, i32* %.fca.2.gep, align 4, !tbaa !98
  %cmp7.i1222 = icmp ugt i32 %3782, 16384
  br i1 %cmp7.i1222, label %pseudostack_alloc.exit1228, label %pseudostack_alloc.exit1228.thread

pseudostack_alloc.exit1228.thread:                ; preds = %if.end.i1223
  store i32 %3782, i32* %.fca.1.gep, align 4, !tbaa !95
  br label %then_bb109

pseudostack_alloc.exit1228:                       ; preds = %if.end.i1223
  %call.i1224 = tail call i8* @halide_malloc(i8* null, i32 %3782) #14
  store i8* %call.i1224, i8** %.fca.0.gep, align 4, !tbaa !97
  store i32 %3782, i32* %.fca.1.gep, align 4, !tbaa !95
  %3784 = bitcast i8* %call.i1224 to i16*
  %.not = icmp eq i8* %call.i1224, null
  br i1 %.not, label %then_bb109, label %"produce filter_zeroed111", !prof !100

then_bb109:                                       ; preds = %pseudostack_alloc.exit1228.thread, %pseudostack_alloc.exit1228
  %3785 = alloca i8*, i32 %3782, align 128
  %3786 = bitcast i8** %3785 to i16*
  %3787 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %3785, i8*** %3787, align 4
  br label %"produce filter_zeroed111"

"produce filter_zeroed111":                       ; preds = %pseudostack_alloc.exit1228, %then_bb109
  %filter_zeroed110 = phi i16* [ %3786, %then_bb109 ], [ %3784, %pseudostack_alloc.exit1228 ]
  %t2399 = icmp sgt i32 %3, 64
  %t2398 = icmp sgt i32 %3, 63
  br i1 %3778, label %"for filter_zeroed.s0.y112.preheader", label %"produce sum_filter129", !prof !101

"for filter_zeroed.s0.y112.preheader":            ; preds = %"produce filter_zeroed111"
  %3788 = insertelement <64 x i32> undef, i32 %3, i32 0
  %3789 = shufflevector <64 x i32> %3788, <64 x i32> undef, <64 x i32> zeroinitializer
  %3790 = icmp sgt <64 x i32> %3789, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3791 = insertelement <64 x i8> undef, i8 %filter_zero, i32 0
  %3792 = shufflevector <64 x i8> %3791, <64 x i8> undef, <64 x i32> zeroinitializer
  %3793 = zext <64 x i8> %3792 to <64 x i16>
  %3794 = icmp sgt <64 x i32> %3789, <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br i1 %3777, label %"for filter_zeroed.s0.y112.preheader.split.us", label %"produce sum_filter129", !prof !101

"for filter_zeroed.s0.y112.preheader.split.us":   ; preds = %"for filter_zeroed.s0.y112.preheader"
  br i1 %t2398, label %"for filter_zeroed.s0.y112.preheader.split.us.split.us", label %"for filter_zeroed.s0.y112.us.preheader"

"for filter_zeroed.s0.y112.us.preheader":         ; preds = %"for filter_zeroed.s0.y112.preheader.split.us"
  %3795 = add i32 %4, -1
  %xtraiter = and i32 %4, 7
  %3796 = icmp ult i32 %3795, 7
  %unroll_iter = and i32 %4, -8
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %"for filter_zeroed.s0.y112.us"

"for filter_zeroed.s0.y112.preheader.split.us.split.us": ; preds = %"for filter_zeroed.s0.y112.preheader.split.us"
  br i1 %t2399, label %"for filter_zeroed.s0.y112.us.us.us.preheader", label %"for filter_zeroed.s0.y112.us.us.preheader"

"for filter_zeroed.s0.y112.us.us.preheader":      ; preds = %"for filter_zeroed.s0.y112.preheader.split.us.split.us"
  %3797 = add i32 %4, -1
  %xtraiter5602 = and i32 %4, 7
  %3798 = icmp ult i32 %3797, 7
  %unroll_iter5605 = and i32 %4, -8
  %lcmp.mod5604.not = icmp eq i32 %xtraiter5602, 0
  br label %"for filter_zeroed.s0.y112.us.us"

"for filter_zeroed.s0.y112.us.us.us.preheader":   ; preds = %"for filter_zeroed.s0.y112.preheader.split.us.split.us"
  %3799 = add i32 %4, -1
  %xtraiter5607 = and i32 %4, 3
  %3800 = icmp ult i32 %3799, 3
  %unroll_iter5610 = and i32 %4, -4
  %lcmp.mod5609.not = icmp eq i32 %xtraiter5607, 0
  br label %"for filter_zeroed.s0.y112.us.us.us"

"for filter_zeroed.s0.y112.us.us.us":             ; preds = %"for filter_zeroed.s0.y112.us.us.us.preheader", %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us"
  %filter_zeroed.s0.y114.us.us.us = phi i32 [ %3898, %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y112.us.us.us.preheader" ]
  %3801 = mul nsw i32 %filter_zeroed.s0.y114.us.us.us, %7
  %3802 = mul nsw i32 %filter_zeroed.s0.y114.us.us.us, %4
  br i1 %3800, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x115.us.us.us.us.us"

"for filter_zeroed.s0.x115.us.us.us.us.us":       ; preds = %"for filter_zeroed.s0.y112.us.us.us", %"for filter_zeroed.s0.x115.us.us.us.us.us"
  %filter_zeroed.s0.x117.us.us.us.us.us = phi i32 [ %3878, %"for filter_zeroed.s0.x115.us.us.us.us.us" ], [ 0, %"for filter_zeroed.s0.y112.us.us.us" ]
  %niter5611 = phi i32 [ %niter5611.nsub.3, %"for filter_zeroed.s0.x115.us.us.us.us.us" ], [ %unroll_iter5610, %"for filter_zeroed.s0.y112.us.us.us" ]
  %3803 = mul nsw i32 %filter_zeroed.s0.x117.us.us.us.us.us, %5
  %3804 = add nsw i32 %3803, %3801
  %3805 = getelementptr inbounds i8, i8* %1, i32 %3804
  %3806 = bitcast i8* %3805 to <64 x i8>*
  %3807 = load <64 x i8>, <64 x i8>* %3806, align 1, !tbaa !102
  %3808 = zext <64 x i8> %3807 to <64 x i16>
  %3809 = sub nsw <64 x i16> %3808, %3793
  %3810 = add nsw i32 %filter_zeroed.s0.x117.us.us.us.us.us, %3802
  %3811 = shl nsw i32 %3810, 7
  %3812 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3811
  %3813 = bitcast i16* %3812 to <64 x i16>*
  store <64 x i16> %3809, <64 x i16>* %3813, align 128, !tbaa !105
  %3814 = getelementptr inbounds i8, i8* %3805, i32 64
  %3815 = bitcast i8* %3814 to <64 x i8>*
  %3816 = load <64 x i8>, <64 x i8>* %3815, align 1, !tbaa !102
  %3817 = zext <64 x i8> %3816 to <64 x i16>
  %3818 = sub nsw <64 x i16> %3817, %3793
  %3819 = getelementptr inbounds i16, i16* %3812, i32 64
  %3820 = bitcast i16* %3819 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3818, <64 x i16>* nonnull %3820, i32 128, <64 x i1> %3794), !tbaa !105
  %3821 = or i32 %filter_zeroed.s0.x117.us.us.us.us.us, 1
  %3822 = mul nsw i32 %3821, %5
  %3823 = add nsw i32 %3822, %3801
  %3824 = getelementptr inbounds i8, i8* %1, i32 %3823
  %3825 = bitcast i8* %3824 to <64 x i8>*
  %3826 = load <64 x i8>, <64 x i8>* %3825, align 1, !tbaa !102
  %3827 = zext <64 x i8> %3826 to <64 x i16>
  %3828 = sub nsw <64 x i16> %3827, %3793
  %3829 = add nsw i32 %3821, %3802
  %3830 = shl nsw i32 %3829, 7
  %3831 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3830
  %3832 = bitcast i16* %3831 to <64 x i16>*
  store <64 x i16> %3828, <64 x i16>* %3832, align 128, !tbaa !105
  %3833 = getelementptr inbounds i8, i8* %3824, i32 64
  %3834 = bitcast i8* %3833 to <64 x i8>*
  %3835 = load <64 x i8>, <64 x i8>* %3834, align 1, !tbaa !102
  %3836 = zext <64 x i8> %3835 to <64 x i16>
  %3837 = sub nsw <64 x i16> %3836, %3793
  %3838 = getelementptr inbounds i16, i16* %3831, i32 64
  %3839 = bitcast i16* %3838 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3837, <64 x i16>* nonnull %3839, i32 128, <64 x i1> %3794), !tbaa !105
  %3840 = or i32 %filter_zeroed.s0.x117.us.us.us.us.us, 2
  %3841 = mul nsw i32 %3840, %5
  %3842 = add nsw i32 %3841, %3801
  %3843 = getelementptr inbounds i8, i8* %1, i32 %3842
  %3844 = bitcast i8* %3843 to <64 x i8>*
  %3845 = load <64 x i8>, <64 x i8>* %3844, align 1, !tbaa !102
  %3846 = zext <64 x i8> %3845 to <64 x i16>
  %3847 = sub nsw <64 x i16> %3846, %3793
  %3848 = add nsw i32 %3840, %3802
  %3849 = shl nsw i32 %3848, 7
  %3850 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3849
  %3851 = bitcast i16* %3850 to <64 x i16>*
  store <64 x i16> %3847, <64 x i16>* %3851, align 128, !tbaa !105
  %3852 = getelementptr inbounds i8, i8* %3843, i32 64
  %3853 = bitcast i8* %3852 to <64 x i8>*
  %3854 = load <64 x i8>, <64 x i8>* %3853, align 1, !tbaa !102
  %3855 = zext <64 x i8> %3854 to <64 x i16>
  %3856 = sub nsw <64 x i16> %3855, %3793
  %3857 = getelementptr inbounds i16, i16* %3850, i32 64
  %3858 = bitcast i16* %3857 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3856, <64 x i16>* nonnull %3858, i32 128, <64 x i1> %3794), !tbaa !105
  %3859 = or i32 %filter_zeroed.s0.x117.us.us.us.us.us, 3
  %3860 = mul nsw i32 %3859, %5
  %3861 = add nsw i32 %3860, %3801
  %3862 = getelementptr inbounds i8, i8* %1, i32 %3861
  %3863 = bitcast i8* %3862 to <64 x i8>*
  %3864 = load <64 x i8>, <64 x i8>* %3863, align 1, !tbaa !102
  %3865 = zext <64 x i8> %3864 to <64 x i16>
  %3866 = sub nsw <64 x i16> %3865, %3793
  %3867 = add nsw i32 %3859, %3802
  %3868 = shl nsw i32 %3867, 7
  %3869 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3868
  %3870 = bitcast i16* %3869 to <64 x i16>*
  store <64 x i16> %3866, <64 x i16>* %3870, align 128, !tbaa !105
  %3871 = getelementptr inbounds i8, i8* %3862, i32 64
  %3872 = bitcast i8* %3871 to <64 x i8>*
  %3873 = load <64 x i8>, <64 x i8>* %3872, align 1, !tbaa !102
  %3874 = zext <64 x i8> %3873 to <64 x i16>
  %3875 = sub nsw <64 x i16> %3874, %3793
  %3876 = getelementptr inbounds i16, i16* %3869, i32 64
  %3877 = bitcast i16* %3876 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3875, <64 x i16>* nonnull %3877, i32 128, <64 x i1> %3794), !tbaa !105
  %3878 = add nuw nsw i32 %filter_zeroed.s0.x117.us.us.us.us.us, 4
  %niter5611.nsub.3 = add i32 %niter5611, -4
  %niter5611.ncmp.3 = icmp eq i32 %niter5611.nsub.3, 0
  br i1 %niter5611.ncmp.3, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us.unr-lcssa", label %"for filter_zeroed.s0.x115.us.us.us.us.us"

"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x115.us.us.us.us.us", %"for filter_zeroed.s0.y112.us.us.us"
  %filter_zeroed.s0.x117.us.us.us.us.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y112.us.us.us" ], [ %3878, %"for filter_zeroed.s0.x115.us.us.us.us.us" ]
  br i1 %lcmp.mod5609.not, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x115.us.us.us.us.us.epil"

"for filter_zeroed.s0.x115.us.us.us.us.us.epil":  ; preds = %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us.unr-lcssa", %"for filter_zeroed.s0.x115.us.us.us.us.us.epil"
  %filter_zeroed.s0.x117.us.us.us.us.us.epil = phi i32 [ %3897, %"for filter_zeroed.s0.x115.us.us.us.us.us.epil" ], [ %filter_zeroed.s0.x117.us.us.us.us.us.unr, %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %epil.iter5608 = phi i32 [ %epil.iter5608.sub, %"for filter_zeroed.s0.x115.us.us.us.us.us.epil" ], [ %xtraiter5607, %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us.unr-lcssa" ]
  %3879 = mul nsw i32 %filter_zeroed.s0.x117.us.us.us.us.us.epil, %5
  %3880 = add nsw i32 %3879, %3801
  %3881 = getelementptr inbounds i8, i8* %1, i32 %3880
  %3882 = bitcast i8* %3881 to <64 x i8>*
  %3883 = load <64 x i8>, <64 x i8>* %3882, align 1, !tbaa !102
  %3884 = zext <64 x i8> %3883 to <64 x i16>
  %3885 = sub nsw <64 x i16> %3884, %3793
  %3886 = add nsw i32 %filter_zeroed.s0.x117.us.us.us.us.us.epil, %3802
  %3887 = shl nsw i32 %3886, 7
  %3888 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3887
  %3889 = bitcast i16* %3888 to <64 x i16>*
  store <64 x i16> %3885, <64 x i16>* %3889, align 128, !tbaa !105
  %3890 = getelementptr inbounds i8, i8* %3881, i32 64
  %3891 = bitcast i8* %3890 to <64 x i8>*
  %3892 = load <64 x i8>, <64 x i8>* %3891, align 1, !tbaa !102
  %3893 = zext <64 x i8> %3892 to <64 x i16>
  %3894 = sub nsw <64 x i16> %3893, %3793
  %3895 = getelementptr inbounds i16, i16* %3888, i32 64
  %3896 = bitcast i16* %3895 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %3894, <64 x i16>* nonnull %3896, i32 128, <64 x i1> %3794), !tbaa !105
  %3897 = add nuw nsw i32 %filter_zeroed.s0.x117.us.us.us.us.us.epil, 1
  %epil.iter5608.sub = add i32 %epil.iter5608, -1
  %epil.iter5608.cmp.not = icmp eq i32 %epil.iter5608.sub, 0
  br i1 %epil.iter5608.cmp.not, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us", label %"for filter_zeroed.s0.x115.us.us.us.us.us.epil", !llvm.loop !203

"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us": ; preds = %"for filter_zeroed.s0.x115.us.us.us.us.us.epil", %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us.unr-lcssa"
  %3898 = add nuw nsw i32 %filter_zeroed.s0.y114.us.us.us, 1
  %.not631.us.us.us = icmp eq i32 %3898, %6
  br i1 %.not631.us.us.us, label %"produce sum_filter129", label %"for filter_zeroed.s0.y112.us.us.us"

"for filter_zeroed.s0.y112.us.us":                ; preds = %"for filter_zeroed.s0.y112.us.us.preheader", %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us"
  %filter_zeroed.s0.y114.us.us = phi i32 [ %4009, %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us" ], [ 0, %"for filter_zeroed.s0.y112.us.us.preheader" ]
  %3899 = mul nsw i32 %filter_zeroed.s0.y114.us.us, %7
  %3900 = mul nsw i32 %filter_zeroed.s0.y114.us.us, %4
  br i1 %3798, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us.unr-lcssa", label %"for filter_zeroed.s0.x115.us.us5240.us"

"for filter_zeroed.s0.x115.us.us5240.us":         ; preds = %"for filter_zeroed.s0.y112.us.us", %"for filter_zeroed.s0.x115.us.us5240.us"
  %filter_zeroed.s0.x117.us.us5241.us = phi i32 [ %3996, %"for filter_zeroed.s0.x115.us.us5240.us" ], [ 0, %"for filter_zeroed.s0.y112.us.us" ]
  %niter5606 = phi i32 [ %niter5606.nsub.7, %"for filter_zeroed.s0.x115.us.us5240.us" ], [ %unroll_iter5605, %"for filter_zeroed.s0.y112.us.us" ]
  %3901 = mul nsw i32 %filter_zeroed.s0.x117.us.us5241.us, %5
  %3902 = add nsw i32 %3901, %3899
  %3903 = getelementptr inbounds i8, i8* %1, i32 %3902
  %3904 = bitcast i8* %3903 to <64 x i8>*
  %3905 = load <64 x i8>, <64 x i8>* %3904, align 1, !tbaa !102
  %3906 = zext <64 x i8> %3905 to <64 x i16>
  %3907 = sub nsw <64 x i16> %3906, %3793
  %3908 = add nsw i32 %filter_zeroed.s0.x117.us.us5241.us, %3900
  %3909 = shl nsw i32 %3908, 7
  %3910 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3909
  %3911 = bitcast i16* %3910 to <64 x i16>*
  store <64 x i16> %3907, <64 x i16>* %3911, align 128, !tbaa !105
  %3912 = or i32 %filter_zeroed.s0.x117.us.us5241.us, 1
  %3913 = mul nsw i32 %3912, %5
  %3914 = add nsw i32 %3913, %3899
  %3915 = getelementptr inbounds i8, i8* %1, i32 %3914
  %3916 = bitcast i8* %3915 to <64 x i8>*
  %3917 = load <64 x i8>, <64 x i8>* %3916, align 1, !tbaa !102
  %3918 = zext <64 x i8> %3917 to <64 x i16>
  %3919 = sub nsw <64 x i16> %3918, %3793
  %3920 = add nsw i32 %3912, %3900
  %3921 = shl nsw i32 %3920, 7
  %3922 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3921
  %3923 = bitcast i16* %3922 to <64 x i16>*
  store <64 x i16> %3919, <64 x i16>* %3923, align 128, !tbaa !105
  %3924 = or i32 %filter_zeroed.s0.x117.us.us5241.us, 2
  %3925 = mul nsw i32 %3924, %5
  %3926 = add nsw i32 %3925, %3899
  %3927 = getelementptr inbounds i8, i8* %1, i32 %3926
  %3928 = bitcast i8* %3927 to <64 x i8>*
  %3929 = load <64 x i8>, <64 x i8>* %3928, align 1, !tbaa !102
  %3930 = zext <64 x i8> %3929 to <64 x i16>
  %3931 = sub nsw <64 x i16> %3930, %3793
  %3932 = add nsw i32 %3924, %3900
  %3933 = shl nsw i32 %3932, 7
  %3934 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3933
  %3935 = bitcast i16* %3934 to <64 x i16>*
  store <64 x i16> %3931, <64 x i16>* %3935, align 128, !tbaa !105
  %3936 = or i32 %filter_zeroed.s0.x117.us.us5241.us, 3
  %3937 = mul nsw i32 %3936, %5
  %3938 = add nsw i32 %3937, %3899
  %3939 = getelementptr inbounds i8, i8* %1, i32 %3938
  %3940 = bitcast i8* %3939 to <64 x i8>*
  %3941 = load <64 x i8>, <64 x i8>* %3940, align 1, !tbaa !102
  %3942 = zext <64 x i8> %3941 to <64 x i16>
  %3943 = sub nsw <64 x i16> %3942, %3793
  %3944 = add nsw i32 %3936, %3900
  %3945 = shl nsw i32 %3944, 7
  %3946 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3945
  %3947 = bitcast i16* %3946 to <64 x i16>*
  store <64 x i16> %3943, <64 x i16>* %3947, align 128, !tbaa !105
  %3948 = or i32 %filter_zeroed.s0.x117.us.us5241.us, 4
  %3949 = mul nsw i32 %3948, %5
  %3950 = add nsw i32 %3949, %3899
  %3951 = getelementptr inbounds i8, i8* %1, i32 %3950
  %3952 = bitcast i8* %3951 to <64 x i8>*
  %3953 = load <64 x i8>, <64 x i8>* %3952, align 1, !tbaa !102
  %3954 = zext <64 x i8> %3953 to <64 x i16>
  %3955 = sub nsw <64 x i16> %3954, %3793
  %3956 = add nsw i32 %3948, %3900
  %3957 = shl nsw i32 %3956, 7
  %3958 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3957
  %3959 = bitcast i16* %3958 to <64 x i16>*
  store <64 x i16> %3955, <64 x i16>* %3959, align 128, !tbaa !105
  %3960 = or i32 %filter_zeroed.s0.x117.us.us5241.us, 5
  %3961 = mul nsw i32 %3960, %5
  %3962 = add nsw i32 %3961, %3899
  %3963 = getelementptr inbounds i8, i8* %1, i32 %3962
  %3964 = bitcast i8* %3963 to <64 x i8>*
  %3965 = load <64 x i8>, <64 x i8>* %3964, align 1, !tbaa !102
  %3966 = zext <64 x i8> %3965 to <64 x i16>
  %3967 = sub nsw <64 x i16> %3966, %3793
  %3968 = add nsw i32 %3960, %3900
  %3969 = shl nsw i32 %3968, 7
  %3970 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3969
  %3971 = bitcast i16* %3970 to <64 x i16>*
  store <64 x i16> %3967, <64 x i16>* %3971, align 128, !tbaa !105
  %3972 = or i32 %filter_zeroed.s0.x117.us.us5241.us, 6
  %3973 = mul nsw i32 %3972, %5
  %3974 = add nsw i32 %3973, %3899
  %3975 = getelementptr inbounds i8, i8* %1, i32 %3974
  %3976 = bitcast i8* %3975 to <64 x i8>*
  %3977 = load <64 x i8>, <64 x i8>* %3976, align 1, !tbaa !102
  %3978 = zext <64 x i8> %3977 to <64 x i16>
  %3979 = sub nsw <64 x i16> %3978, %3793
  %3980 = add nsw i32 %3972, %3900
  %3981 = shl nsw i32 %3980, 7
  %3982 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3981
  %3983 = bitcast i16* %3982 to <64 x i16>*
  store <64 x i16> %3979, <64 x i16>* %3983, align 128, !tbaa !105
  %3984 = or i32 %filter_zeroed.s0.x117.us.us5241.us, 7
  %3985 = mul nsw i32 %3984, %5
  %3986 = add nsw i32 %3985, %3899
  %3987 = getelementptr inbounds i8, i8* %1, i32 %3986
  %3988 = bitcast i8* %3987 to <64 x i8>*
  %3989 = load <64 x i8>, <64 x i8>* %3988, align 1, !tbaa !102
  %3990 = zext <64 x i8> %3989 to <64 x i16>
  %3991 = sub nsw <64 x i16> %3990, %3793
  %3992 = add nsw i32 %3984, %3900
  %3993 = shl nsw i32 %3992, 7
  %3994 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %3993
  %3995 = bitcast i16* %3994 to <64 x i16>*
  store <64 x i16> %3991, <64 x i16>* %3995, align 128, !tbaa !105
  %3996 = add nuw nsw i32 %filter_zeroed.s0.x117.us.us5241.us, 8
  %niter5606.nsub.7 = add i32 %niter5606, -8
  %niter5606.ncmp.7 = icmp eq i32 %niter5606.nsub.7, 0
  br i1 %niter5606.ncmp.7, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us.unr-lcssa", label %"for filter_zeroed.s0.x115.us.us5240.us"

"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x115.us.us5240.us", %"for filter_zeroed.s0.y112.us.us"
  %filter_zeroed.s0.x117.us.us5241.us.unr = phi i32 [ 0, %"for filter_zeroed.s0.y112.us.us" ], [ %3996, %"for filter_zeroed.s0.x115.us.us5240.us" ]
  br i1 %lcmp.mod5604.not, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us", label %"for filter_zeroed.s0.x115.us.us5240.us.epil"

"for filter_zeroed.s0.x115.us.us5240.us.epil":    ; preds = %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us.unr-lcssa", %"for filter_zeroed.s0.x115.us.us5240.us.epil"
  %filter_zeroed.s0.x117.us.us5241.us.epil = phi i32 [ %4008, %"for filter_zeroed.s0.x115.us.us5240.us.epil" ], [ %filter_zeroed.s0.x117.us.us5241.us.unr, %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us.unr-lcssa" ]
  %epil.iter5603 = phi i32 [ %epil.iter5603.sub, %"for filter_zeroed.s0.x115.us.us5240.us.epil" ], [ %xtraiter5602, %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us.unr-lcssa" ]
  %3997 = mul nsw i32 %filter_zeroed.s0.x117.us.us5241.us.epil, %5
  %3998 = add nsw i32 %3997, %3899
  %3999 = getelementptr inbounds i8, i8* %1, i32 %3998
  %4000 = bitcast i8* %3999 to <64 x i8>*
  %4001 = load <64 x i8>, <64 x i8>* %4000, align 1, !tbaa !102
  %4002 = zext <64 x i8> %4001 to <64 x i16>
  %4003 = sub nsw <64 x i16> %4002, %3793
  %4004 = add nsw i32 %filter_zeroed.s0.x117.us.us5241.us.epil, %3900
  %4005 = shl nsw i32 %4004, 7
  %4006 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4005
  %4007 = bitcast i16* %4006 to <64 x i16>*
  store <64 x i16> %4003, <64 x i16>* %4007, align 128, !tbaa !105
  %4008 = add nuw nsw i32 %filter_zeroed.s0.x117.us.us5241.us.epil, 1
  %epil.iter5603.sub = add i32 %epil.iter5603, -1
  %epil.iter5603.cmp.not = icmp eq i32 %epil.iter5603.sub, 0
  br i1 %epil.iter5603.cmp.not, label %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us", label %"for filter_zeroed.s0.x115.us.us5240.us.epil", !llvm.loop !204

"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us": ; preds = %"for filter_zeroed.s0.x115.us.us5240.us.epil", %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us.unr-lcssa"
  %4009 = add nuw nsw i32 %filter_zeroed.s0.y114.us.us, 1
  %.not631.us.us = icmp eq i32 %4009, %6
  br i1 %.not631.us.us, label %"produce sum_filter129", label %"for filter_zeroed.s0.y112.us.us"

"for filter_zeroed.s0.y112.us":                   ; preds = %"for filter_zeroed.s0.y112.us.preheader", %"end for filter_zeroed.s0.x116.loopexit.split.us5238"
  %filter_zeroed.s0.y114.us = phi i32 [ %4120, %"end for filter_zeroed.s0.x116.loopexit.split.us5238" ], [ 0, %"for filter_zeroed.s0.y112.us.preheader" ]
  %4010 = mul nsw i32 %filter_zeroed.s0.y114.us, %7
  %4011 = mul nsw i32 %filter_zeroed.s0.y114.us, %4
  br i1 %3796, label %"end for filter_zeroed.s0.x116.loopexit.split.us5238.unr-lcssa", label %"for filter_zeroed.s0.x115.us5235"

"for filter_zeroed.s0.x115.us5235":               ; preds = %"for filter_zeroed.s0.y112.us", %"for filter_zeroed.s0.x115.us5235"
  %filter_zeroed.s0.x117.us5236 = phi i32 [ %4107, %"for filter_zeroed.s0.x115.us5235" ], [ 0, %"for filter_zeroed.s0.y112.us" ]
  %niter = phi i32 [ %niter.nsub.7, %"for filter_zeroed.s0.x115.us5235" ], [ %unroll_iter, %"for filter_zeroed.s0.y112.us" ]
  %4012 = mul nsw i32 %filter_zeroed.s0.x117.us5236, %5
  %4013 = add nsw i32 %4012, %4010
  %4014 = getelementptr inbounds i8, i8* %1, i32 %4013
  %4015 = bitcast i8* %4014 to <64 x i8>*
  %4016 = load <64 x i8>, <64 x i8>* %4015, align 1, !tbaa !102
  %4017 = zext <64 x i8> %4016 to <64 x i16>
  %4018 = sub nsw <64 x i16> %4017, %3793
  %4019 = add nsw i32 %filter_zeroed.s0.x117.us5236, %4011
  %4020 = shl nsw i32 %4019, 7
  %4021 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4020
  %4022 = bitcast i16* %4021 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4018, <64 x i16>* %4022, i32 128, <64 x i1> %3790), !tbaa !105
  %4023 = or i32 %filter_zeroed.s0.x117.us5236, 1
  %4024 = mul nsw i32 %4023, %5
  %4025 = add nsw i32 %4024, %4010
  %4026 = getelementptr inbounds i8, i8* %1, i32 %4025
  %4027 = bitcast i8* %4026 to <64 x i8>*
  %4028 = load <64 x i8>, <64 x i8>* %4027, align 1, !tbaa !102
  %4029 = zext <64 x i8> %4028 to <64 x i16>
  %4030 = sub nsw <64 x i16> %4029, %3793
  %4031 = add nsw i32 %4023, %4011
  %4032 = shl nsw i32 %4031, 7
  %4033 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4032
  %4034 = bitcast i16* %4033 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4030, <64 x i16>* %4034, i32 128, <64 x i1> %3790), !tbaa !105
  %4035 = or i32 %filter_zeroed.s0.x117.us5236, 2
  %4036 = mul nsw i32 %4035, %5
  %4037 = add nsw i32 %4036, %4010
  %4038 = getelementptr inbounds i8, i8* %1, i32 %4037
  %4039 = bitcast i8* %4038 to <64 x i8>*
  %4040 = load <64 x i8>, <64 x i8>* %4039, align 1, !tbaa !102
  %4041 = zext <64 x i8> %4040 to <64 x i16>
  %4042 = sub nsw <64 x i16> %4041, %3793
  %4043 = add nsw i32 %4035, %4011
  %4044 = shl nsw i32 %4043, 7
  %4045 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4044
  %4046 = bitcast i16* %4045 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4042, <64 x i16>* %4046, i32 128, <64 x i1> %3790), !tbaa !105
  %4047 = or i32 %filter_zeroed.s0.x117.us5236, 3
  %4048 = mul nsw i32 %4047, %5
  %4049 = add nsw i32 %4048, %4010
  %4050 = getelementptr inbounds i8, i8* %1, i32 %4049
  %4051 = bitcast i8* %4050 to <64 x i8>*
  %4052 = load <64 x i8>, <64 x i8>* %4051, align 1, !tbaa !102
  %4053 = zext <64 x i8> %4052 to <64 x i16>
  %4054 = sub nsw <64 x i16> %4053, %3793
  %4055 = add nsw i32 %4047, %4011
  %4056 = shl nsw i32 %4055, 7
  %4057 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4056
  %4058 = bitcast i16* %4057 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4054, <64 x i16>* %4058, i32 128, <64 x i1> %3790), !tbaa !105
  %4059 = or i32 %filter_zeroed.s0.x117.us5236, 4
  %4060 = mul nsw i32 %4059, %5
  %4061 = add nsw i32 %4060, %4010
  %4062 = getelementptr inbounds i8, i8* %1, i32 %4061
  %4063 = bitcast i8* %4062 to <64 x i8>*
  %4064 = load <64 x i8>, <64 x i8>* %4063, align 1, !tbaa !102
  %4065 = zext <64 x i8> %4064 to <64 x i16>
  %4066 = sub nsw <64 x i16> %4065, %3793
  %4067 = add nsw i32 %4059, %4011
  %4068 = shl nsw i32 %4067, 7
  %4069 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4068
  %4070 = bitcast i16* %4069 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4066, <64 x i16>* %4070, i32 128, <64 x i1> %3790), !tbaa !105
  %4071 = or i32 %filter_zeroed.s0.x117.us5236, 5
  %4072 = mul nsw i32 %4071, %5
  %4073 = add nsw i32 %4072, %4010
  %4074 = getelementptr inbounds i8, i8* %1, i32 %4073
  %4075 = bitcast i8* %4074 to <64 x i8>*
  %4076 = load <64 x i8>, <64 x i8>* %4075, align 1, !tbaa !102
  %4077 = zext <64 x i8> %4076 to <64 x i16>
  %4078 = sub nsw <64 x i16> %4077, %3793
  %4079 = add nsw i32 %4071, %4011
  %4080 = shl nsw i32 %4079, 7
  %4081 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4080
  %4082 = bitcast i16* %4081 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4078, <64 x i16>* %4082, i32 128, <64 x i1> %3790), !tbaa !105
  %4083 = or i32 %filter_zeroed.s0.x117.us5236, 6
  %4084 = mul nsw i32 %4083, %5
  %4085 = add nsw i32 %4084, %4010
  %4086 = getelementptr inbounds i8, i8* %1, i32 %4085
  %4087 = bitcast i8* %4086 to <64 x i8>*
  %4088 = load <64 x i8>, <64 x i8>* %4087, align 1, !tbaa !102
  %4089 = zext <64 x i8> %4088 to <64 x i16>
  %4090 = sub nsw <64 x i16> %4089, %3793
  %4091 = add nsw i32 %4083, %4011
  %4092 = shl nsw i32 %4091, 7
  %4093 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4092
  %4094 = bitcast i16* %4093 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4090, <64 x i16>* %4094, i32 128, <64 x i1> %3790), !tbaa !105
  %4095 = or i32 %filter_zeroed.s0.x117.us5236, 7
  %4096 = mul nsw i32 %4095, %5
  %4097 = add nsw i32 %4096, %4010
  %4098 = getelementptr inbounds i8, i8* %1, i32 %4097
  %4099 = bitcast i8* %4098 to <64 x i8>*
  %4100 = load <64 x i8>, <64 x i8>* %4099, align 1, !tbaa !102
  %4101 = zext <64 x i8> %4100 to <64 x i16>
  %4102 = sub nsw <64 x i16> %4101, %3793
  %4103 = add nsw i32 %4095, %4011
  %4104 = shl nsw i32 %4103, 7
  %4105 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4104
  %4106 = bitcast i16* %4105 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4102, <64 x i16>* %4106, i32 128, <64 x i1> %3790), !tbaa !105
  %4107 = add nuw nsw i32 %filter_zeroed.s0.x117.us5236, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %"end for filter_zeroed.s0.x116.loopexit.split.us5238.unr-lcssa", label %"for filter_zeroed.s0.x115.us5235"

"end for filter_zeroed.s0.x116.loopexit.split.us5238.unr-lcssa": ; preds = %"for filter_zeroed.s0.x115.us5235", %"for filter_zeroed.s0.y112.us"
  %filter_zeroed.s0.x117.us5236.unr = phi i32 [ 0, %"for filter_zeroed.s0.y112.us" ], [ %4107, %"for filter_zeroed.s0.x115.us5235" ]
  br i1 %lcmp.mod.not, label %"end for filter_zeroed.s0.x116.loopexit.split.us5238", label %"for filter_zeroed.s0.x115.us5235.epil"

"for filter_zeroed.s0.x115.us5235.epil":          ; preds = %"end for filter_zeroed.s0.x116.loopexit.split.us5238.unr-lcssa", %"for filter_zeroed.s0.x115.us5235.epil"
  %filter_zeroed.s0.x117.us5236.epil = phi i32 [ %4119, %"for filter_zeroed.s0.x115.us5235.epil" ], [ %filter_zeroed.s0.x117.us5236.unr, %"end for filter_zeroed.s0.x116.loopexit.split.us5238.unr-lcssa" ]
  %epil.iter = phi i32 [ %epil.iter.sub, %"for filter_zeroed.s0.x115.us5235.epil" ], [ %xtraiter, %"end for filter_zeroed.s0.x116.loopexit.split.us5238.unr-lcssa" ]
  %4108 = mul nsw i32 %filter_zeroed.s0.x117.us5236.epil, %5
  %4109 = add nsw i32 %4108, %4010
  %4110 = getelementptr inbounds i8, i8* %1, i32 %4109
  %4111 = bitcast i8* %4110 to <64 x i8>*
  %4112 = load <64 x i8>, <64 x i8>* %4111, align 1, !tbaa !102
  %4113 = zext <64 x i8> %4112 to <64 x i16>
  %4114 = sub nsw <64 x i16> %4113, %3793
  %4115 = add nsw i32 %filter_zeroed.s0.x117.us5236.epil, %4011
  %4116 = shl nsw i32 %4115, 7
  %4117 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4116
  %4118 = bitcast i16* %4117 to <64 x i16>*
  call void @llvm.masked.store.v64i16.p0v64i16(<64 x i16> %4114, <64 x i16>* %4118, i32 128, <64 x i1> %3790), !tbaa !105
  %4119 = add nuw nsw i32 %filter_zeroed.s0.x117.us5236.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for filter_zeroed.s0.x116.loopexit.split.us5238", label %"for filter_zeroed.s0.x115.us5235.epil", !llvm.loop !205

"end for filter_zeroed.s0.x116.loopexit.split.us5238": ; preds = %"for filter_zeroed.s0.x115.us5235.epil", %"end for filter_zeroed.s0.x116.loopexit.split.us5238.unr-lcssa"
  %4120 = add nuw nsw i32 %filter_zeroed.s0.y114.us, 1
  %.not631.us = icmp eq i32 %4120, %6
  br i1 %.not631.us, label %"produce sum_filter129", label %"for filter_zeroed.s0.y112.us"

"produce sum_filter129":                          ; preds = %"end for filter_zeroed.s0.x116.loopexit.split.us5238", %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us5243.us", %"end for filter_zeroed.s0.x116.loopexit.split.us.split.us.us.us.us", %"for filter_zeroed.s0.y112.preheader", %"produce filter_zeroed111"
  %4121 = insertelement <128 x i32> undef, i32 %3, i32 0
  %4122 = shufflevector <128 x i32> %4121, <128 x i32> undef, <128 x i32> zeroinitializer
  %4123 = icmp sgt <128 x i32> %4122, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4124 = bitcast [128 x i32]* %sum_filter617 to <32 x i32>*
  %4125 = shufflevector <128 x i1> %4123, <128 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  %4126 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 32
  %4127 = bitcast i32* %4126 to <32 x i32>*
  %4128 = shufflevector <128 x i1> %4123, <128 x i1> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  %4129 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 64
  %4130 = bitcast i32* %4129 to <32 x i32>*
  %4131 = shufflevector <128 x i1> %4123, <128 x i1> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  %4132 = getelementptr inbounds [128 x i32], [128 x i32]* %sum_filter617, i32 0, i32 96
  %4133 = bitcast i32* %4132 to <32 x i32>*
  %4134 = shufflevector <128 x i1> %4123, <128 x i1> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %brmerge5507.demorgan = and i1 %3778, %3777
  br i1 %brmerge5507.demorgan, label %"for sum_filter.s1.r19$y130.preheader.split.us", label %"consume sum_filter142", !prof !206

"for sum_filter.s1.r19$y130.preheader.split.us":  ; preds = %"produce sum_filter129"
  %4135 = zext <128 x i1> %4123 to <128 x i8>
  %4136 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %4135) #9
  %4137 = and i8 %4136, 1
  %t2486.not.us = icmp eq i8 %4137, 0
  br i1 %t2486.not.us, label %"for sum_filter.s1.r19$y130.us.us.preheader", label %"for sum_filter.s1.r19$y130.us.preheader"

"for sum_filter.s1.r19$y130.us.preheader":        ; preds = %"for sum_filter.s1.r19$y130.preheader.split.us"
  %4138 = add i32 %4, -1
  %xtraiter5612 = and i32 %4, 3
  %4139 = icmp ult i32 %4138, 3
  %unroll_iter5615 = and i32 %4, -4
  %lcmp.mod5614.not = icmp eq i32 %xtraiter5612, 0
  br label %"for sum_filter.s1.r19$y130.us"

"for sum_filter.s1.r19$y130.us.us.preheader":     ; preds = %"for sum_filter.s1.r19$y130.preheader.split.us"
  %4140 = add i32 %4, -1
  %xtraiter5617 = and i32 %4, 7
  %4141 = icmp ult i32 %4140, 7
  %unroll_iter5620 = and i32 %4, -8
  %lcmp.mod5619.not = icmp eq i32 %xtraiter5617, 0
  br label %"for sum_filter.s1.r19$y130.us.us"

"for sum_filter.s1.r19$y130.us.us":               ; preds = %"for sum_filter.s1.r19$y130.us.us.preheader", %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us"
  %"sum_filter.s1.r19$y132.us.us" = phi i32 [ %4142, %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us" ], [ 0, %"for sum_filter.s1.r19$y130.us.us.preheader" ]
  br i1 %4141, label %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x133.us.us.us"

"for sum_filter.s1.r19$x133.us.us.us":            ; preds = %"for sum_filter.s1.r19$y130.us.us", %"for sum_filter.s1.r19$x133.us.us.us"
  %niter5621 = phi i32 [ %niter5621.nsub.7, %"for sum_filter.s1.r19$x133.us.us.us" ], [ %unroll_iter5620, %"for sum_filter.s1.r19$y130.us.us" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %niter5621.nsub.7 = add i32 %niter5621, -8
  %niter5621.ncmp.7 = icmp eq i32 %niter5621.nsub.7, 0
  br i1 %niter5621.ncmp.7, label %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us.unr-lcssa", label %"for sum_filter.s1.r19$x133.us.us.us"

"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x133.us.us.us", %"for sum_filter.s1.r19$y130.us.us"
  br i1 %lcmp.mod5619.not, label %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x133.us.us.us.epil"

"for sum_filter.s1.r19$x133.us.us.us.epil":       ; preds = %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us.unr-lcssa", %"for sum_filter.s1.r19$x133.us.us.us.epil"
  %epil.iter5618 = phi i32 [ %epil.iter5618.sub, %"for sum_filter.s1.r19$x133.us.us.us.epil" ], [ %xtraiter5617, %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us.unr-lcssa" ]
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> zeroinitializer, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %epil.iter5618.sub = add i32 %epil.iter5618, -1
  %epil.iter5618.cmp.not = icmp eq i32 %epil.iter5618.sub, 0
  br i1 %epil.iter5618.cmp.not, label %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us", label %"for sum_filter.s1.r19$x133.us.us.us.epil", !llvm.loop !207

"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us": ; preds = %"for sum_filter.s1.r19$x133.us.us.us.epil", %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us.unr-lcssa"
  %4142 = add nuw nsw i32 %"sum_filter.s1.r19$y132.us.us", 1
  %.not629.us.us = icmp eq i32 %4142, %6
  br i1 %.not629.us.us, label %"consume sum_filter142", label %"for sum_filter.s1.r19$y130.us.us"

"for sum_filter.s1.r19$y130.us":                  ; preds = %"for sum_filter.s1.r19$y130.us.preheader", %"end for sum_filter.s1.r19$x134.loopexit.split.us5248"
  %"sum_filter.s1.r19$y132.us" = phi i32 [ %4264, %"end for sum_filter.s1.r19$x134.loopexit.split.us5248" ], [ 0, %"for sum_filter.s1.r19$y130.us.preheader" ]
  %4143 = mul nsw i32 %"sum_filter.s1.r19$y132.us", %4
  br i1 %4139, label %"end for sum_filter.s1.r19$x134.loopexit.split.us5248.unr-lcssa", label %"for sum_filter.s1.r19$x133.us5245"

"for sum_filter.s1.r19$x133.us5245":              ; preds = %"for sum_filter.s1.r19$y130.us", %"for sum_filter.s1.r19$x133.us5245"
  %"sum_filter.s1.r19$x135.us5246" = phi i32 [ %4239, %"for sum_filter.s1.r19$x133.us5245" ], [ 0, %"for sum_filter.s1.r19$y130.us" ]
  %niter5616 = phi i32 [ %niter5616.nsub.3, %"for sum_filter.s1.r19$x133.us5245" ], [ %unroll_iter5615, %"for sum_filter.s1.r19$y130.us" ]
  %4144 = load <32 x i32>, <32 x i32>* %4124, align 128, !tbaa !111
  %4145 = load <32 x i32>, <32 x i32>* %4127, align 128, !tbaa !119
  %4146 = load <32 x i32>, <32 x i32>* %4130, align 128, !tbaa !121
  %4147 = load <32 x i32>, <32 x i32>* %4133, align 128, !tbaa !124
  %4148 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4145, <32 x i32> %4144)
  %4149 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4147, <32 x i32> %4146)
  %4150 = shufflevector <64 x i32> %4148, <64 x i32> %4149, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4151 = add nsw i32 %"sum_filter.s1.r19$x135.us5246", %4143
  %4152 = shl nsw i32 %4151, 7
  %4153 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4152
  %4154 = bitcast i16* %4153 to <32 x i32>*
  %4155 = load <32 x i32>, <32 x i32>* %4154, align 128, !tbaa !105
  %4156 = getelementptr inbounds i16, i16* %4153, i32 64
  %4157 = bitcast i16* %4156 to <32 x i32>*
  %4158 = load <32 x i32>, <32 x i32>* %4157, align 128, !tbaa !105
  %4159 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4158, <32 x i32> %4155)
  %4160 = bitcast <64 x i32> %4159 to <128 x i16>
  %4161 = sext <128 x i16> %4160 to <128 x i32>
  %4162 = add nsw <128 x i32> %4150, %4161
  %4163 = shufflevector <128 x i32> %4162, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4163, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  %4164 = shufflevector <128 x i32> %4162, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4164, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  %4165 = shufflevector <128 x i32> %4162, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4165, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  %4166 = shufflevector <128 x i32> %4162, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4166, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %4167 = or i32 %"sum_filter.s1.r19$x135.us5246", 1
  %4168 = load <32 x i32>, <32 x i32>* %4124, align 128, !tbaa !111
  %4169 = load <32 x i32>, <32 x i32>* %4127, align 128, !tbaa !119
  %4170 = load <32 x i32>, <32 x i32>* %4130, align 128, !tbaa !121
  %4171 = load <32 x i32>, <32 x i32>* %4133, align 128, !tbaa !124
  %4172 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4169, <32 x i32> %4168)
  %4173 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4171, <32 x i32> %4170)
  %4174 = shufflevector <64 x i32> %4172, <64 x i32> %4173, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4175 = add nsw i32 %4167, %4143
  %4176 = shl nsw i32 %4175, 7
  %4177 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4176
  %4178 = bitcast i16* %4177 to <32 x i32>*
  %4179 = load <32 x i32>, <32 x i32>* %4178, align 128, !tbaa !105
  %4180 = getelementptr inbounds i16, i16* %4177, i32 64
  %4181 = bitcast i16* %4180 to <32 x i32>*
  %4182 = load <32 x i32>, <32 x i32>* %4181, align 128, !tbaa !105
  %4183 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4182, <32 x i32> %4179)
  %4184 = bitcast <64 x i32> %4183 to <128 x i16>
  %4185 = sext <128 x i16> %4184 to <128 x i32>
  %4186 = add nsw <128 x i32> %4174, %4185
  %4187 = shufflevector <128 x i32> %4186, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4187, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  %4188 = shufflevector <128 x i32> %4186, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4188, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  %4189 = shufflevector <128 x i32> %4186, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4189, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  %4190 = shufflevector <128 x i32> %4186, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4190, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %4191 = or i32 %"sum_filter.s1.r19$x135.us5246", 2
  %4192 = load <32 x i32>, <32 x i32>* %4124, align 128, !tbaa !111
  %4193 = load <32 x i32>, <32 x i32>* %4127, align 128, !tbaa !119
  %4194 = load <32 x i32>, <32 x i32>* %4130, align 128, !tbaa !121
  %4195 = load <32 x i32>, <32 x i32>* %4133, align 128, !tbaa !124
  %4196 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4193, <32 x i32> %4192)
  %4197 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4195, <32 x i32> %4194)
  %4198 = shufflevector <64 x i32> %4196, <64 x i32> %4197, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4199 = add nsw i32 %4191, %4143
  %4200 = shl nsw i32 %4199, 7
  %4201 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4200
  %4202 = bitcast i16* %4201 to <32 x i32>*
  %4203 = load <32 x i32>, <32 x i32>* %4202, align 128, !tbaa !105
  %4204 = getelementptr inbounds i16, i16* %4201, i32 64
  %4205 = bitcast i16* %4204 to <32 x i32>*
  %4206 = load <32 x i32>, <32 x i32>* %4205, align 128, !tbaa !105
  %4207 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4206, <32 x i32> %4203)
  %4208 = bitcast <64 x i32> %4207 to <128 x i16>
  %4209 = sext <128 x i16> %4208 to <128 x i32>
  %4210 = add nsw <128 x i32> %4198, %4209
  %4211 = shufflevector <128 x i32> %4210, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4211, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  %4212 = shufflevector <128 x i32> %4210, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4212, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  %4213 = shufflevector <128 x i32> %4210, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4213, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  %4214 = shufflevector <128 x i32> %4210, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4214, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %4215 = or i32 %"sum_filter.s1.r19$x135.us5246", 3
  %4216 = load <32 x i32>, <32 x i32>* %4124, align 128, !tbaa !111
  %4217 = load <32 x i32>, <32 x i32>* %4127, align 128, !tbaa !119
  %4218 = load <32 x i32>, <32 x i32>* %4130, align 128, !tbaa !121
  %4219 = load <32 x i32>, <32 x i32>* %4133, align 128, !tbaa !124
  %4220 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4217, <32 x i32> %4216)
  %4221 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4219, <32 x i32> %4218)
  %4222 = shufflevector <64 x i32> %4220, <64 x i32> %4221, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4223 = add nsw i32 %4215, %4143
  %4224 = shl nsw i32 %4223, 7
  %4225 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4224
  %4226 = bitcast i16* %4225 to <32 x i32>*
  %4227 = load <32 x i32>, <32 x i32>* %4226, align 128, !tbaa !105
  %4228 = getelementptr inbounds i16, i16* %4225, i32 64
  %4229 = bitcast i16* %4228 to <32 x i32>*
  %4230 = load <32 x i32>, <32 x i32>* %4229, align 128, !tbaa !105
  %4231 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4230, <32 x i32> %4227)
  %4232 = bitcast <64 x i32> %4231 to <128 x i16>
  %4233 = sext <128 x i16> %4232 to <128 x i32>
  %4234 = add nsw <128 x i32> %4222, %4233
  %4235 = shufflevector <128 x i32> %4234, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4235, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  %4236 = shufflevector <128 x i32> %4234, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4236, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  %4237 = shufflevector <128 x i32> %4234, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4237, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  %4238 = shufflevector <128 x i32> %4234, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4238, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %4239 = add nuw nsw i32 %"sum_filter.s1.r19$x135.us5246", 4
  %niter5616.nsub.3 = add i32 %niter5616, -4
  %niter5616.ncmp.3 = icmp eq i32 %niter5616.nsub.3, 0
  br i1 %niter5616.ncmp.3, label %"end for sum_filter.s1.r19$x134.loopexit.split.us5248.unr-lcssa", label %"for sum_filter.s1.r19$x133.us5245"

"end for sum_filter.s1.r19$x134.loopexit.split.us5248.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x133.us5245", %"for sum_filter.s1.r19$y130.us"
  %"sum_filter.s1.r19$x135.us5246.unr" = phi i32 [ 0, %"for sum_filter.s1.r19$y130.us" ], [ %4239, %"for sum_filter.s1.r19$x133.us5245" ]
  br i1 %lcmp.mod5614.not, label %"end for sum_filter.s1.r19$x134.loopexit.split.us5248", label %"for sum_filter.s1.r19$x133.us5245.epil"

"for sum_filter.s1.r19$x133.us5245.epil":         ; preds = %"end for sum_filter.s1.r19$x134.loopexit.split.us5248.unr-lcssa", %"for sum_filter.s1.r19$x133.us5245.epil"
  %"sum_filter.s1.r19$x135.us5246.epil" = phi i32 [ %4263, %"for sum_filter.s1.r19$x133.us5245.epil" ], [ %"sum_filter.s1.r19$x135.us5246.unr", %"end for sum_filter.s1.r19$x134.loopexit.split.us5248.unr-lcssa" ]
  %epil.iter5613 = phi i32 [ %epil.iter5613.sub, %"for sum_filter.s1.r19$x133.us5245.epil" ], [ %xtraiter5612, %"end for sum_filter.s1.r19$x134.loopexit.split.us5248.unr-lcssa" ]
  %4240 = load <32 x i32>, <32 x i32>* %4124, align 128, !tbaa !111
  %4241 = load <32 x i32>, <32 x i32>* %4127, align 128, !tbaa !119
  %4242 = load <32 x i32>, <32 x i32>* %4130, align 128, !tbaa !121
  %4243 = load <32 x i32>, <32 x i32>* %4133, align 128, !tbaa !124
  %4244 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4241, <32 x i32> %4240)
  %4245 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4243, <32 x i32> %4242)
  %4246 = shufflevector <64 x i32> %4244, <64 x i32> %4245, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4247 = add nsw i32 %"sum_filter.s1.r19$x135.us5246.epil", %4143
  %4248 = shl nsw i32 %4247, 7
  %4249 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %4248
  %4250 = bitcast i16* %4249 to <32 x i32>*
  %4251 = load <32 x i32>, <32 x i32>* %4250, align 128, !tbaa !105
  %4252 = getelementptr inbounds i16, i16* %4249, i32 64
  %4253 = bitcast i16* %4252 to <32 x i32>*
  %4254 = load <32 x i32>, <32 x i32>* %4253, align 128, !tbaa !105
  %4255 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4254, <32 x i32> %4251)
  %4256 = bitcast <64 x i32> %4255 to <128 x i16>
  %4257 = sext <128 x i16> %4256 to <128 x i32>
  %4258 = add nsw <128 x i32> %4246, %4257
  %4259 = shufflevector <128 x i32> %4258, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4259, <32 x i32>* nonnull %4124, i32 128, <32 x i1> %4125), !tbaa !111
  %4260 = shufflevector <128 x i32> %4258, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4260, <32 x i32>* nonnull %4127, i32 128, <32 x i1> %4128), !tbaa !119
  %4261 = shufflevector <128 x i32> %4258, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4261, <32 x i32>* nonnull %4130, i32 128, <32 x i1> %4131), !tbaa !121
  %4262 = shufflevector <128 x i32> %4258, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4262, <32 x i32>* nonnull %4133, i32 128, <32 x i1> %4134), !tbaa !124
  %4263 = add nuw nsw i32 %"sum_filter.s1.r19$x135.us5246.epil", 1
  %epil.iter5613.sub = add i32 %epil.iter5613, -1
  %epil.iter5613.cmp.not = icmp eq i32 %epil.iter5613.sub, 0
  br i1 %epil.iter5613.cmp.not, label %"end for sum_filter.s1.r19$x134.loopexit.split.us5248", label %"for sum_filter.s1.r19$x133.us5245.epil", !llvm.loop !208

"end for sum_filter.s1.r19$x134.loopexit.split.us5248": ; preds = %"for sum_filter.s1.r19$x133.us5245.epil", %"end for sum_filter.s1.r19$x134.loopexit.split.us5248.unr-lcssa"
  %4264 = add nuw nsw i32 %"sum_filter.s1.r19$y132.us", 1
  %.not629.us = icmp eq i32 %4264, %6
  br i1 %.not629.us, label %"consume sum_filter142", label %"for sum_filter.s1.r19$y130.us"

"consume sum_filter142":                          ; preds = %"end for sum_filter.s1.r19$x134.loopexit.split.us5248", %"end for sum_filter.s1.r19$x134.loopexit.split.us.us.us", %"produce sum_filter129"
  %4265 = zext <128 x i1> %4123 to <128 x i8>
  %4266 = call i8 @llvm.vector.reduce.umax.v128i8(<128 x i8> %4265) #9
  %4267 = and i8 %4266, 1
  %t2487.not = icmp eq i8 %4267, 0
  br i1 %t2487.not, label %after_bb148, label %true_bb146

true_bb146:                                       ; preds = %"consume sum_filter142"
  %4268 = bitcast i8* %0 to <32 x i32>*
  %4269 = load <32 x i32>, <32 x i32>* %4268, align 4, !tbaa !209
  %4270 = getelementptr inbounds i8, i8* %0, i32 128
  %4271 = bitcast i8* %4270 to <32 x i32>*
  %4272 = load <32 x i32>, <32 x i32>* %4271, align 4, !tbaa !216
  %4273 = getelementptr inbounds i8, i8* %0, i32 256
  %4274 = bitcast i8* %4273 to <32 x i32>*
  %4275 = load <32 x i32>, <32 x i32>* %4274, align 4, !tbaa !218
  %4276 = getelementptr inbounds i8, i8* %0, i32 384
  %4277 = bitcast i8* %4276 to <32 x i32>*
  %4278 = load <32 x i32>, <32 x i32>* %4277, align 4, !tbaa !221
  %4279 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4272, <32 x i32> %4269)
  %4280 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4278, <32 x i32> %4275)
  %4281 = shufflevector <64 x i32> %4279, <64 x i32> %4280, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4282 = load <32 x i32>, <32 x i32>* %4124, align 128, !tbaa !111
  %4283 = load <32 x i32>, <32 x i32>* %4127, align 128, !tbaa !119
  %4284 = load <32 x i32>, <32 x i32>* %4130, align 128, !tbaa !121
  %4285 = load <32 x i32>, <32 x i32>* %4133, align 128, !tbaa !124
  %4286 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4283, <32 x i32> %4282)
  %4287 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %4285, <32 x i32> %4284)
  %4288 = shufflevector <64 x i32> %4286, <64 x i32> %4287, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br label %after_bb148

after_bb148:                                      ; preds = %"consume sum_filter142", %true_bb146
  %4289 = phi <128 x i32> [ %4281, %true_bb146 ], [ zeroinitializer, %"consume sum_filter142" ]
  %4290 = phi <128 x i32> [ %4288, %true_bb146 ], [ zeroinitializer, %"consume sum_filter142" ]
  %4291 = zext i8 %input_zero to i32
  %4292 = insertelement <128 x i32> undef, i32 %4291, i32 0
  %4293 = shufflevector <128 x i32> %4290, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4294 = shufflevector <128 x i32> %4292, <128 x i32> undef, <32 x i32> zeroinitializer
  %ab1.i1229 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4293, <32 x i32> %4294) #11
  %ab.i1230 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1229, <32 x i32> %4293, <32 x i32> %4294) #11
  %4295 = shufflevector <128 x i32> %4290, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1231 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4295, <32 x i32> %4294) #11
  %ab.i1232 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1231, <32 x i32> %4295, <32 x i32> %4294) #11
  %4296 = shufflevector <128 x i32> %4290, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1233 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4296, <32 x i32> %4294) #11
  %ab.i1234 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1233, <32 x i32> %4296, <32 x i32> %4294) #11
  %4297 = shufflevector <128 x i32> %4290, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1235 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %4297, <32 x i32> %4294) #11
  %ab.i1236 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1235, <32 x i32> %4297, <32 x i32> %4294) #11
  %4298 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1232, <32 x i32> %ab.i1230)
  %4299 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1236, <32 x i32> %ab.i1234)
  %4300 = shufflevector <64 x i32> %4298, <64 x i32> %4299, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4301 = sub nsw <128 x i32> %4289, %4300
  %4302 = shufflevector <128 x i32> %4301, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4303 = bitcast [512 x i32]* %offset_c615 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4302, <32 x i32>* nonnull %4303, i32 128, <32 x i1> %4125), !tbaa !131
  %4304 = shufflevector <128 x i32> %4301, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %4305 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 32
  %4306 = bitcast i32* %4305 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4304, <32 x i32>* nonnull %4306, i32 128, <32 x i1> %4128), !tbaa !139
  %4307 = shufflevector <128 x i32> %4301, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %4308 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 64
  %4309 = bitcast i32* %4308 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4307, <32 x i32>* nonnull %4309, i32 128, <32 x i1> %4131), !tbaa !141
  %4310 = shufflevector <128 x i32> %4301, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %4311 = getelementptr inbounds [512 x i32], [512 x i32]* %offset_c615, i32 0, i32 96
  %4312 = bitcast i32* %4311 to <32 x i32>*
  call void @llvm.masked.store.v32i32.p0v32i32(<32 x i32> %4310, <32 x i32>* nonnull %4312, i32 128, <32 x i1> %4134), !tbaa !144
  %t2427 = icmp slt i32 %a93, 0
  %t2429 = icmp slt i32 %stride_x, 0
  %4313 = add nsw i32 %4, -1
  %4314 = mul nsw i32 %4313, %a93
  %t2430 = select i1 %t2427, i32 %4314, i32 0
  %t2431.s = select i1 %t2429, i32 %20, i32 1
  %t2432 = icmp slt i32 %a88, 0
  %t2434 = icmp slt i32 %stride_y, 0
  %4315 = add nsw i32 %6, -1
  %4316 = mul nsw i32 %4315, %a88
  %t2435 = select i1 %t2432, i32 %4316, i32 0
  %t2436.s = select i1 %t2434, i32 %23, i32 1
  %t2420 = icmp eq i32 %depth_multiplier, 1
  %a88.op = shl i32 %a88, 1
  %4317 = select i1 %t2432, i32 %a88.op, i32 0
  %4318 = select i1 %3776, i32 %4317, i32 %t2435
  %4319 = add i32 %22, -1
  %4320 = add i32 %4319, %t2436.s
  %4321 = mul nsw i32 %4320, %stride_y
  %a93.op = shl i32 %a93, 1
  %4322 = select i1 %t2427, i32 %a93.op, i32 0
  %4323 = select i1 %3776, i32 %4322, i32 %t2430
  %4324 = add i32 %19, -1
  %4325 = add i32 %4324, %t2431.s
  %4326 = mul nsw i32 %4325, %stride_x
  %4327 = select i1 %t2432, i32 0, i32 %4316
  %4328 = add nsw i32 %23, -1
  %4329 = select i1 %t2434, i32 0, i32 %4328
  %4330 = add nsw i32 %4329, %22
  %4331 = mul nsw i32 %4330, %stride_y
  %b87 = add nsw i32 %4331, %4327
  %4332 = select i1 %t2427, i32 0, i32 %4314
  %4333 = add nsw i32 %20, -1
  %4334 = select i1 %t2429, i32 0, i32 %4333
  %4335 = add nsw i32 %4334, %19
  %4336 = mul nsw i32 %4335, %stride_x
  %b92 = add nsw i32 %4336, %4332
  %4337 = mul nsw i32 %13, %12
  %4338 = mul nsw i32 %16, %14
  %4339 = mul nsw i32 %11, %10
  %4340 = add i32 %4337, %4339
  %t2421 = add i32 %4340, %4338
  %4341 = icmp sgt i32 %15, 0
  br i1 %4341, label %"for output.s0.b.rebased151.preheader", label %if.then.i737, !prof !101

"for output.s0.b.rebased151.preheader":           ; preds = %after_bb148
  %b91 = add nsw i32 %4326, %4323
  %b86 = add nsw i32 %4321, %4318
  %a84 = add nsw i32 %4321, %t2435
  %4342 = icmp slt i32 %t2435, %4318
  %resampled_input.y.min_realized = select i1 %4342, i32 %a84, i32 %b86
  %4343 = icmp sgt i32 %a88, 0
  %4344 = select i1 %4343, i32 %a88, i32 0
  %4345 = shl nuw nsw i32 %4344, 1
  %4346 = select i1 %3776, i32 %4345, i32 %4327
  %a85 = add nsw i32 %4331, %4346
  %4347 = icmp sgt i32 %4346, %4327
  %4348 = select i1 %4347, i32 %a85, i32 %b87
  %a97 = sub nsw i32 %4348, %resampled_input.y.min_realized
  %a89 = add nsw i32 %4326, %t2430
  %4349 = icmp slt i32 %t2430, %4323
  %resampled_input.x.min_realized = select i1 %4349, i32 %a89, i32 %b91
  %4350 = icmp sgt i32 %a93, 0
  %4351 = select i1 %4350, i32 %a93, i32 0
  %4352 = shl nuw nsw i32 %4351, 1
  %4353 = select i1 %3776, i32 %4352, i32 %4332
  %a90 = add nsw i32 %4336, %4353
  %4354 = icmp sgt i32 %4353, %4332
  %4355 = select i1 %4354, i32 %a90, i32 %b92
  %a96 = sub nsw i32 %4355, %resampled_input.x.min_realized
  %4356 = icmp sgt i32 %a96, -1
  %t2547 = select i1 %4356, i32 %a96, i32 -1
  %4357 = icmp sgt i32 %a97, -1
  %t2548 = select i1 %4357, i32 %a97, i32 -1
  %4358 = add nsw i32 %t2548, 1
  %4359 = shl i32 %t2547, 7
  %t2549 = add i32 %4359, 128
  %4360 = mul i32 %t2549, %4358
  %4361 = add i32 %4360, 131
  %4362 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2448 = sub nsw i32 %b92, %a89
  %t2447 = sub nsw i32 %b87, %a84
  %4363 = icmp sgt i32 %t2447, -1
  %4364 = sub i32 %a84, %resampled_input.y.min_realized
  %4365 = add nsw i32 %a96, 1
  %4366 = sub i32 %a89, %resampled_input.x.min_realized
  %4367 = icmp sgt i32 %t2448, -1
  %4368 = icmp sgt i32 %3, 1
  %4369 = icmp eq i32 %depth_multiplier, 0
  %t2551 = sext i1 %4369 to i32
  %4370 = sub nsw i32 %depth_multiplier, %t2551
  %4371 = add i32 %4370, 1
  %4372 = icmp ult i32 %4371, 3
  %4373 = select i1 %4372, i32 %4370, i32 0
  %4374 = xor i32 %t2551, -1
  %4375 = and i32 %4373, %4374
  %.not5172 = icmp eq i32 %3, 2
  %4376 = icmp sgt i32 %3, 3
  %.not5173 = icmp eq i32 %3, 4
  %4377 = icmp sgt i32 %3, 5
  %.not5174 = icmp eq i32 %3, 6
  %4378 = icmp sgt i32 %3, 7
  %.not5175 = icmp eq i32 %3, 8
  %4379 = icmp sgt i32 %3, 9
  %.not5176 = icmp eq i32 %3, 10
  %4380 = icmp sgt i32 %3, 11
  %.not5177 = icmp eq i32 %3, 12
  %4381 = icmp sgt i32 %3, 13
  %.not5178 = icmp eq i32 %3, 14
  %4382 = icmp sgt i32 %3, 15
  %.not5179 = icmp eq i32 %3, 16
  %4383 = icmp sgt i32 %3, 17
  %.not5180 = icmp eq i32 %3, 18
  %4384 = icmp sgt i32 %3, 19
  %.not5181 = icmp eq i32 %3, 20
  %4385 = icmp sgt i32 %3, 21
  %.not5182 = icmp eq i32 %3, 22
  %4386 = icmp sgt i32 %3, 23
  %.not5183 = icmp eq i32 %3, 24
  %4387 = icmp sgt i32 %3, 25
  %.not5184 = icmp eq i32 %3, 26
  %4388 = icmp sgt i32 %3, 27
  %.not5185 = icmp eq i32 %3, 28
  %4389 = icmp sgt i32 %3, 29
  %.not5186 = icmp eq i32 %3, 30
  %4390 = icmp sgt i32 %3, 31
  %.not5187 = icmp eq i32 %3, 32
  %4391 = icmp sgt i32 %3, 33
  %.not5188 = icmp eq i32 %3, 34
  %4392 = icmp sgt i32 %3, 35
  %.not5189 = icmp eq i32 %3, 36
  %4393 = icmp sgt i32 %3, 37
  %.not5190 = icmp eq i32 %3, 38
  %4394 = icmp sgt i32 %3, 39
  %.not5191 = icmp eq i32 %3, 40
  %4395 = icmp sgt i32 %3, 41
  %.not5192 = icmp eq i32 %3, 42
  %4396 = icmp sgt i32 %3, 43
  %.not5193 = icmp eq i32 %3, 44
  %4397 = icmp sgt i32 %3, 45
  %.not5194 = icmp eq i32 %3, 46
  %4398 = icmp sgt i32 %3, 47
  %.not5195 = icmp eq i32 %3, 48
  %4399 = icmp sgt i32 %3, 49
  %.not5196 = icmp eq i32 %3, 50
  %4400 = icmp sgt i32 %3, 51
  %.not5197 = icmp eq i32 %3, 52
  %4401 = icmp sgt i32 %3, 53
  %.not5198 = icmp eq i32 %3, 54
  %4402 = icmp sgt i32 %3, 55
  %.not5199 = icmp eq i32 %3, 56
  %4403 = icmp sgt i32 %3, 57
  %.not5200 = icmp eq i32 %3, 58
  %4404 = icmp sgt i32 %3, 59
  %.not5201 = icmp eq i32 %3, 60
  %4405 = icmp sgt i32 %3, 61
  %.not5202 = icmp eq i32 %3, 62
  %.not5141 = icmp eq i32 %3, 65
  %4406 = icmp sgt i32 %3, 66
  %.not5142 = icmp eq i32 %3, 67
  %4407 = icmp sgt i32 %3, 68
  %.not5143 = icmp eq i32 %3, 69
  %4408 = icmp sgt i32 %3, 70
  %.not5144 = icmp eq i32 %3, 71
  %4409 = icmp sgt i32 %3, 72
  %.not5145 = icmp eq i32 %3, 73
  %4410 = icmp sgt i32 %3, 74
  %.not5146 = icmp eq i32 %3, 75
  %4411 = icmp sgt i32 %3, 76
  %.not5147 = icmp eq i32 %3, 77
  %4412 = icmp sgt i32 %3, 78
  %.not5148 = icmp eq i32 %3, 79
  %4413 = icmp sgt i32 %3, 80
  %.not5149 = icmp eq i32 %3, 81
  %4414 = icmp sgt i32 %3, 82
  %.not5150 = icmp eq i32 %3, 83
  %4415 = icmp sgt i32 %3, 84
  %.not5151 = icmp eq i32 %3, 85
  %4416 = icmp sgt i32 %3, 86
  %.not5152 = icmp eq i32 %3, 87
  %4417 = icmp sgt i32 %3, 88
  %.not5153 = icmp eq i32 %3, 89
  %4418 = icmp sgt i32 %3, 90
  %.not5154 = icmp eq i32 %3, 91
  %4419 = icmp sgt i32 %3, 92
  %.not5155 = icmp eq i32 %3, 93
  %4420 = icmp sgt i32 %3, 94
  %.not5156 = icmp eq i32 %3, 95
  %4421 = icmp sgt i32 %3, 96
  %.not5157 = icmp eq i32 %3, 97
  %4422 = icmp sgt i32 %3, 98
  %.not5158 = icmp eq i32 %3, 99
  %4423 = icmp sgt i32 %3, 100
  %.not5159 = icmp eq i32 %3, 101
  %4424 = icmp sgt i32 %3, 102
  %.not5160 = icmp eq i32 %3, 103
  %4425 = icmp sgt i32 %3, 104
  %.not5161 = icmp eq i32 %3, 105
  %4426 = icmp sgt i32 %3, 106
  %.not5162 = icmp eq i32 %3, 107
  %4427 = icmp sgt i32 %3, 108
  %.not5163 = icmp eq i32 %3, 109
  %4428 = icmp sgt i32 %3, 110
  %.not5164 = icmp eq i32 %3, 111
  %4429 = icmp sgt i32 %3, 112
  %.not5165 = icmp eq i32 %3, 113
  %4430 = icmp sgt i32 %3, 114
  %.not5166 = icmp eq i32 %3, 115
  %4431 = icmp sgt i32 %3, 116
  %.not5167 = icmp eq i32 %3, 117
  %4432 = icmp sgt i32 %3, 118
  %.not5168 = icmp eq i32 %3, 119
  %4433 = icmp sgt i32 %3, 120
  %.not5169 = icmp eq i32 %3, 121
  %4434 = icmp sgt i32 %3, 122
  %.not5170 = icmp eq i32 %3, 123
  %4435 = icmp sgt i32 %3, 124
  %.not5171 = icmp eq i32 %3, 125
  %4436 = icmp sgt i32 %3, 126
  %4437 = icmp sgt i32 %23, 0
  %4438 = sub i32 %a88.op, %resampled_input.y.min_realized
  %4439 = sub i32 %a88, %resampled_input.y.min_realized
  %.neg = mul i32 %24, %22
  %.neg5203 = mul i32 %21, %19
  %.neg5204 = mul i32 %25, %14
  %4440 = icmp sgt i32 %20, 0
  %4441 = bitcast i16* %filter_zeroed110 to <32 x i32>*
  %4442 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 64
  %4443 = bitcast i16* %4442 to <32 x i32>*
  %4444 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 128
  %4445 = bitcast i16* %4444 to <32 x i32>*
  %4446 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 192
  %4447 = bitcast i16* %4446 to <32 x i32>*
  %4448 = sub nsw i32 %a93, %resampled_input.x.min_realized
  %4449 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 256
  %4450 = bitcast i16* %4449 to <32 x i32>*
  %4451 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 320
  %4452 = bitcast i16* %4451 to <32 x i32>*
  %4453 = sub nsw i32 %a93.op, %resampled_input.x.min_realized
  %4454 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 384
  %4455 = bitcast i16* %4454 to <32 x i32>*
  %4456 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 448
  %4457 = bitcast i16* %4456 to <32 x i32>*
  %4458 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 512
  %4459 = bitcast i16* %4458 to <32 x i32>*
  %4460 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 576
  %4461 = bitcast i16* %4460 to <32 x i32>*
  %4462 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 640
  %4463 = bitcast i16* %4462 to <32 x i32>*
  %4464 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 704
  %4465 = bitcast i16* %4464 to <32 x i32>*
  %4466 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 768
  %4467 = bitcast i16* %4466 to <32 x i32>*
  %4468 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 832
  %4469 = bitcast i16* %4468 to <32 x i32>*
  %4470 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 896
  %4471 = bitcast i16* %4470 to <32 x i32>*
  %4472 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 960
  %4473 = bitcast i16* %4472 to <32 x i32>*
  %4474 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 1024
  %4475 = bitcast i16* %4474 to <32 x i32>*
  %4476 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 1088
  %4477 = bitcast i16* %4476 to <32 x i32>*
  %4478 = insertelement <128 x i32> undef, i32 %output_multiplier, i32 0
  %4479 = shufflevector <128 x i32> %4478, <128 x i32> undef, <128 x i32> zeroinitializer
  %4480 = sext <128 x i32> %4479 to <128 x i64>
  %.not621 = icmp eq i32 %output_shift, 0
  %4481 = select i1 %.not621, <128 x i32> zeroinitializer, <128 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4482 = add i32 %output_shift, -1
  %4483 = zext i8 %output_zero to i16
  %4484 = insertelement <128 x i16> undef, i16 %4483, i32 0
  %4485 = shufflevector <128 x i16> %4484, <128 x i16> undef, <128 x i32> zeroinitializer
  %4486 = bitcast <128 x i16> %4485 to <64 x i32>
  %4487 = insertelement <128 x i8> undef, i8 %output_max, i32 0
  %4488 = shufflevector <128 x i8> %4487, <128 x i8> undef, <128 x i32> zeroinitializer
  %4489 = bitcast <128 x i8> %4488 to <32 x i32>
  %4490 = insertelement <128 x i8> undef, i8 %output_min, i32 0
  %4491 = shufflevector <128 x i8> %4490, <128 x i8> undef, <128 x i32> zeroinitializer
  %4492 = bitcast <128 x i8> %4491 to <32 x i32>
  %reass.add = add i32 %.neg, %.neg5203
  %reass.add5206 = add i32 %reass.add, %.neg5204
  %xtraiter5622 = and i32 %4, 1
  %4493 = icmp eq i32 %4, 1
  %unroll_iter5624 = and i32 %4, -2
  %lcmp.mod5623.not = icmp eq i32 %xtraiter5622, 0
  br label %"for output.s0.b.rebased151"

"for output.s0.b.rebased151":                     ; preds = %"for output.s0.b.rebased151.preheader", %"end for output.s0.y.yo559"
  %output.s0.b.rebased153 = phi i32 [ %5436, %"end for output.s0.y.yo559" ], [ 0, %"for output.s0.b.rebased151.preheader" ]
  %4494 = load i32, i32* %.fca.1.gep579, align 4, !tbaa !95
  %cmp.i1238 = icmp ult i32 %4494, %4361
  %4495 = load i8*, i8** %.fca.0.gep578, align 4, !tbaa !97
  br i1 %cmp.i1238, label %if.then.i1241, label %pseudostack_alloc.exit1254, !prof !99

if.then.i1241:                                    ; preds = %"for output.s0.b.rebased151"
  %tobool1.not.i1240 = icmp ne i8* %4495, null
  %4496 = load i32, i32* %.fca.2.gep580, align 4
  %cmp2.i1243 = icmp ugt i32 %4496, 16384
  %or.cond5140 = and i1 %tobool1.not.i1240, %cmp2.i1243
  br i1 %or.cond5140, label %if.then3.i1245, label %if.end.i1249

if.then3.i1245:                                   ; preds = %if.then.i1241
  call void @halide_free(i8* null, i8* nonnull %4495) #14
  %.pre = load i32, i32* %.fca.2.gep580, align 4, !tbaa !98
  br label %if.end.i1249

if.end.i1249:                                     ; preds = %if.then3.i1245, %if.then.i1241
  %4497 = phi i32 [ %.pre, %if.then3.i1245 ], [ %4496, %if.then.i1241 ]
  %add.i1247 = add i32 %4497, %4361
  store i32 %add.i1247, i32* %.fca.2.gep580, align 4, !tbaa !98
  %cmp7.i1248 = icmp ugt i32 %add.i1247, 16384
  br i1 %cmp7.i1248, label %if.then8.i1251, label %if.end11.i1253

if.then8.i1251:                                   ; preds = %if.end.i1249
  %call.i1250 = call i8* @halide_malloc(i8* null, i32 %4361) #14
  br label %if.end11.i1253

if.end11.i1253:                                   ; preds = %if.then8.i1251, %if.end.i1249
  %storemerge.i1252 = phi i8* [ %call.i1250, %if.then8.i1251 ], [ null, %if.end.i1249 ]
  store i8* %storemerge.i1252, i8** %.fca.0.gep578, align 4, !tbaa !97
  store i32 %4361, i32* %.fca.1.gep579, align 4, !tbaa !95
  br label %pseudostack_alloc.exit1254

pseudostack_alloc.exit1254:                       ; preds = %"for output.s0.b.rebased151", %if.end11.i1253
  %4498 = phi i8* [ %storemerge.i1252, %if.end11.i1253 ], [ %4495, %"for output.s0.b.rebased151" ]
  %.not618 = icmp eq i8* %4498, null
  br i1 %.not618, label %then_bb155, label %"produce resampled_input157", !prof !100

then_bb155:                                       ; preds = %pseudostack_alloc.exit1254
  %4499 = alloca i8*, i32 %4361, align 128
  %4500 = bitcast i8** %4499 to i8*
  store i8** %4499, i8*** %4362, align 4
  br label %"produce resampled_input157"

"produce resampled_input157":                     ; preds = %pseudostack_alloc.exit1254, %then_bb155
  %resampled_input156 = phi i8* [ %4500, %then_bb155 ], [ %4498, %pseudostack_alloc.exit1254 ]
  br i1 %t2420, label %then_bb159, label %next_bb160

then_bb159:                                       ; preds = %"produce resampled_input157"
  br i1 %4363, label %"for resampled_input.s0.y.rebased161.preheader", label %"consume resampled_input557", !prof !101

"for resampled_input.s0.y.rebased161.preheader":  ; preds = %then_bb159
  %4501 = add nsw i32 %output.s0.b.rebased153, %14
  %4502 = mul nsw i32 %4501, %16
  %4503 = sub i32 %4502, %t2421
  br i1 %4367, label %"for resampled_input.s0.y.rebased161.us", label %"consume resampled_input557", !prof !101

"for resampled_input.s0.y.rebased161.us":         ; preds = %"for resampled_input.s0.y.rebased161.preheader", %"end for resampled_input.s0.x.rebased165.loopexit.us"
  %resampled_input.s0.y.rebased163.us = phi i32 [ %4519, %"end for resampled_input.s0.x.rebased165.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased161.preheader" ]
  %4504 = add nsw i32 %4364, %resampled_input.s0.y.rebased163.us
  %4505 = mul nsw i32 %4504, %4365
  %t2446.us = add nsw i32 %4366, %4505
  %4506 = add nsw i32 %resampled_input.s0.y.rebased163.us, %a84
  %4507 = mul nsw i32 %4506, %13
  %t2445.us = add nsw i32 %4503, %4507
  br label %"for resampled_input.s0.x.rebased164.us"

"for resampled_input.s0.x.rebased164.us":         ; preds = %"for resampled_input.s0.y.rebased161.us", %"for resampled_input.s0.x.rebased164.us"
  %resampled_input.s0.x.rebased166.us = phi i32 [ %4518, %"for resampled_input.s0.x.rebased164.us" ], [ 0, %"for resampled_input.s0.y.rebased161.us" ]
  %4508 = add nsw i32 %resampled_input.s0.x.rebased166.us, %a89
  %4509 = mul nsw i32 %4508, %11
  %4510 = add nsw i32 %t2445.us, %4509
  %4511 = getelementptr inbounds i8, i8* %8, i32 %4510
  %4512 = bitcast i8* %4511 to <128 x i8>*
  %4513 = load <128 x i8>, <128 x i8>* %4512, align 1, !tbaa !127
  %4514 = add nsw i32 %t2446.us, %resampled_input.s0.x.rebased166.us
  %4515 = shl nsw i32 %4514, 7
  %4516 = getelementptr inbounds i8, i8* %resampled_input156, i32 %4515
  %4517 = bitcast i8* %4516 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %4513, <128 x i8>* %4517, i32 128, <128 x i1> %4123), !tbaa !129
  %4518 = add nuw nsw i32 %resampled_input.s0.x.rebased166.us, 1
  %.not628.us = icmp eq i32 %resampled_input.s0.x.rebased166.us, %t2448
  br i1 %.not628.us, label %"end for resampled_input.s0.x.rebased165.loopexit.us", label %"for resampled_input.s0.x.rebased164.us"

"end for resampled_input.s0.x.rebased165.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased164.us"
  %4519 = add nuw nsw i32 %resampled_input.s0.y.rebased163.us, 1
  %.not627.us = icmp eq i32 %resampled_input.s0.y.rebased163.us, %t2447
  br i1 %.not627.us, label %"consume resampled_input557", label %"for resampled_input.s0.y.rebased161.us"

next_bb160:                                       ; preds = %"produce resampled_input157"
  br i1 %4363, label %"for resampled_input.s0.y.rebased167.preheader", label %"consume resampled_input557", !prof !101

"for resampled_input.s0.y.rebased167.preheader":  ; preds = %next_bb160
  %4520 = add nsw i32 %output.s0.b.rebased153, %14
  %4521 = mul nsw i32 %4520, %16
  %4522 = sub i32 %4521, %t2421
  br i1 %4367, label %"for resampled_input.s0.y.rebased167.us", label %"consume resampled_input557", !prof !101

"for resampled_input.s0.y.rebased167.us":         ; preds = %"for resampled_input.s0.y.rebased167.preheader", %"end for resampled_input.s0.x.rebased171.loopexit.us"
  %resampled_input.s0.y.rebased169.us = phi i32 [ %5418, %"end for resampled_input.s0.x.rebased171.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased167.preheader" ]
  %4523 = add nsw i32 %4364, %resampled_input.s0.y.rebased169.us
  %4524 = mul nsw i32 %4523, %4365
  %t2453.us = add nsw i32 %4366, %4524
  %4525 = add nsw i32 %resampled_input.s0.y.rebased169.us, %a84
  %4526 = mul nsw i32 %4525, %13
  %t2452.us = add nsw i32 %4522, %4526
  br label %"for resampled_input.s0.x.rebased170.us"

"for resampled_input.s0.x.rebased170.us":         ; preds = %"for resampled_input.s0.y.rebased167.us", %after_bb556.us
  %resampled_input.s0.x.rebased172.us = phi i32 [ %5417, %after_bb556.us ], [ 0, %"for resampled_input.s0.y.rebased167.us" ]
  %4527 = add nsw i32 %resampled_input.s0.x.rebased172.us, %a89
  %4528 = mul nsw i32 %4527, %11
  %4529 = add nsw i32 %t2452.us, %4528
  %4530 = getelementptr inbounds i8, i8* %8, i32 %4529
  %4531 = load i8, i8* %4530, align 1, !tbaa !127
  br i1 %4368, label %after_bb178.us, label %after_bb361.us

after_bb178.us:                                   ; preds = %"for resampled_input.s0.x.rebased170.us"
  %4532 = add nsw i32 %4529, %4375
  %4533 = getelementptr inbounds i8, i8* %8, i32 %4532
  %4534 = load i8, i8* %4533, align 1, !tbaa !127
  br i1 %.not5172, label %after_bb361.us, label %after_bb181.us

after_bb181.us:                                   ; preds = %after_bb178.us
  %4535 = sdiv i32 2, %4370
  %4536 = and i32 %4535, %4374
  %4537 = add nsw i32 %4536, %4529
  %4538 = getelementptr inbounds i8, i8* %8, i32 %4537
  %4539 = load i8, i8* %4538, align 1, !tbaa !127
  br i1 %4376, label %after_bb184.us, label %after_bb361.us

after_bb184.us:                                   ; preds = %after_bb181.us
  %4540 = sdiv i32 3, %4370
  %4541 = and i32 %4540, %4374
  %4542 = add nsw i32 %4541, %4529
  %4543 = getelementptr inbounds i8, i8* %8, i32 %4542
  %4544 = load i8, i8* %4543, align 1, !tbaa !127
  br i1 %.not5173, label %after_bb361.us, label %after_bb187.us

after_bb187.us:                                   ; preds = %after_bb184.us
  %4545 = sdiv i32 4, %4370
  %4546 = and i32 %4545, %4374
  %4547 = add nsw i32 %4546, %4529
  %4548 = getelementptr inbounds i8, i8* %8, i32 %4547
  %4549 = load i8, i8* %4548, align 1, !tbaa !127
  br i1 %4377, label %after_bb190.us, label %after_bb361.us

after_bb190.us:                                   ; preds = %after_bb187.us
  %4550 = sdiv i32 5, %4370
  %4551 = and i32 %4550, %4374
  %4552 = add nsw i32 %4551, %4529
  %4553 = getelementptr inbounds i8, i8* %8, i32 %4552
  %4554 = load i8, i8* %4553, align 1, !tbaa !127
  br i1 %.not5174, label %after_bb361.us, label %after_bb193.us

after_bb193.us:                                   ; preds = %after_bb190.us
  %4555 = sdiv i32 6, %4370
  %4556 = and i32 %4555, %4374
  %4557 = add nsw i32 %4556, %4529
  %4558 = getelementptr inbounds i8, i8* %8, i32 %4557
  %4559 = load i8, i8* %4558, align 1, !tbaa !127
  br i1 %4378, label %after_bb196.us, label %after_bb361.us

after_bb196.us:                                   ; preds = %after_bb193.us
  %4560 = sdiv i32 7, %4370
  %4561 = and i32 %4560, %4374
  %4562 = add nsw i32 %4561, %4529
  %4563 = getelementptr inbounds i8, i8* %8, i32 %4562
  %4564 = load i8, i8* %4563, align 1, !tbaa !127
  br i1 %.not5175, label %after_bb361.us, label %after_bb199.us

after_bb199.us:                                   ; preds = %after_bb196.us
  %4565 = sdiv i32 8, %4370
  %4566 = and i32 %4565, %4374
  %4567 = add nsw i32 %4566, %4529
  %4568 = getelementptr inbounds i8, i8* %8, i32 %4567
  %4569 = load i8, i8* %4568, align 1, !tbaa !127
  br i1 %4379, label %after_bb202.us, label %after_bb361.us

after_bb202.us:                                   ; preds = %after_bb199.us
  %4570 = sdiv i32 9, %4370
  %4571 = and i32 %4570, %4374
  %4572 = add nsw i32 %4571, %4529
  %4573 = getelementptr inbounds i8, i8* %8, i32 %4572
  %4574 = load i8, i8* %4573, align 1, !tbaa !127
  br i1 %.not5176, label %after_bb361.us, label %after_bb205.us

after_bb205.us:                                   ; preds = %after_bb202.us
  %4575 = sdiv i32 10, %4370
  %4576 = and i32 %4575, %4374
  %4577 = add nsw i32 %4576, %4529
  %4578 = getelementptr inbounds i8, i8* %8, i32 %4577
  %4579 = load i8, i8* %4578, align 1, !tbaa !127
  br i1 %4380, label %after_bb208.us, label %after_bb361.us

after_bb208.us:                                   ; preds = %after_bb205.us
  %4580 = sdiv i32 11, %4370
  %4581 = and i32 %4580, %4374
  %4582 = add nsw i32 %4581, %4529
  %4583 = getelementptr inbounds i8, i8* %8, i32 %4582
  %4584 = load i8, i8* %4583, align 1, !tbaa !127
  br i1 %.not5177, label %after_bb361.us, label %after_bb211.us

after_bb211.us:                                   ; preds = %after_bb208.us
  %4585 = sdiv i32 12, %4370
  %4586 = and i32 %4585, %4374
  %4587 = add nsw i32 %4586, %4529
  %4588 = getelementptr inbounds i8, i8* %8, i32 %4587
  %4589 = load i8, i8* %4588, align 1, !tbaa !127
  br i1 %4381, label %after_bb214.us, label %after_bb361.us

after_bb214.us:                                   ; preds = %after_bb211.us
  %4590 = sdiv i32 13, %4370
  %4591 = and i32 %4590, %4374
  %4592 = add nsw i32 %4591, %4529
  %4593 = getelementptr inbounds i8, i8* %8, i32 %4592
  %4594 = load i8, i8* %4593, align 1, !tbaa !127
  br i1 %.not5178, label %after_bb361.us, label %after_bb217.us

after_bb217.us:                                   ; preds = %after_bb214.us
  %4595 = sdiv i32 14, %4370
  %4596 = and i32 %4595, %4374
  %4597 = add nsw i32 %4596, %4529
  %4598 = getelementptr inbounds i8, i8* %8, i32 %4597
  %4599 = load i8, i8* %4598, align 1, !tbaa !127
  br i1 %4382, label %after_bb220.us, label %after_bb361.us

after_bb220.us:                                   ; preds = %after_bb217.us
  %4600 = sdiv i32 15, %4370
  %4601 = and i32 %4600, %4374
  %4602 = add nsw i32 %4601, %4529
  %4603 = getelementptr inbounds i8, i8* %8, i32 %4602
  %4604 = load i8, i8* %4603, align 1, !tbaa !127
  br i1 %.not5179, label %after_bb361.us, label %after_bb223.us

after_bb223.us:                                   ; preds = %after_bb220.us
  %4605 = sdiv i32 16, %4370
  %4606 = and i32 %4605, %4374
  %4607 = add nsw i32 %4606, %4529
  %4608 = getelementptr inbounds i8, i8* %8, i32 %4607
  %4609 = load i8, i8* %4608, align 1, !tbaa !127
  br i1 %4383, label %after_bb226.us, label %after_bb361.us

after_bb226.us:                                   ; preds = %after_bb223.us
  %4610 = sdiv i32 17, %4370
  %4611 = and i32 %4610, %4374
  %4612 = add nsw i32 %4611, %4529
  %4613 = getelementptr inbounds i8, i8* %8, i32 %4612
  %4614 = load i8, i8* %4613, align 1, !tbaa !127
  br i1 %.not5180, label %after_bb361.us, label %after_bb229.us

after_bb229.us:                                   ; preds = %after_bb226.us
  %4615 = sdiv i32 18, %4370
  %4616 = and i32 %4615, %4374
  %4617 = add nsw i32 %4616, %4529
  %4618 = getelementptr inbounds i8, i8* %8, i32 %4617
  %4619 = load i8, i8* %4618, align 1, !tbaa !127
  br i1 %4384, label %after_bb232.us, label %after_bb361.us

after_bb232.us:                                   ; preds = %after_bb229.us
  %4620 = sdiv i32 19, %4370
  %4621 = and i32 %4620, %4374
  %4622 = add nsw i32 %4621, %4529
  %4623 = getelementptr inbounds i8, i8* %8, i32 %4622
  %4624 = load i8, i8* %4623, align 1, !tbaa !127
  br i1 %.not5181, label %after_bb361.us, label %after_bb235.us

after_bb235.us:                                   ; preds = %after_bb232.us
  %4625 = sdiv i32 20, %4370
  %4626 = and i32 %4625, %4374
  %4627 = add nsw i32 %4626, %4529
  %4628 = getelementptr inbounds i8, i8* %8, i32 %4627
  %4629 = load i8, i8* %4628, align 1, !tbaa !127
  br i1 %4385, label %after_bb238.us, label %after_bb361.us

after_bb238.us:                                   ; preds = %after_bb235.us
  %4630 = sdiv i32 21, %4370
  %4631 = and i32 %4630, %4374
  %4632 = add nsw i32 %4631, %4529
  %4633 = getelementptr inbounds i8, i8* %8, i32 %4632
  %4634 = load i8, i8* %4633, align 1, !tbaa !127
  br i1 %.not5182, label %after_bb361.us, label %after_bb241.us

after_bb241.us:                                   ; preds = %after_bb238.us
  %4635 = sdiv i32 22, %4370
  %4636 = and i32 %4635, %4374
  %4637 = add nsw i32 %4636, %4529
  %4638 = getelementptr inbounds i8, i8* %8, i32 %4637
  %4639 = load i8, i8* %4638, align 1, !tbaa !127
  br i1 %4386, label %after_bb244.us, label %after_bb361.us

after_bb244.us:                                   ; preds = %after_bb241.us
  %4640 = sdiv i32 23, %4370
  %4641 = and i32 %4640, %4374
  %4642 = add nsw i32 %4641, %4529
  %4643 = getelementptr inbounds i8, i8* %8, i32 %4642
  %4644 = load i8, i8* %4643, align 1, !tbaa !127
  br i1 %.not5183, label %after_bb361.us, label %after_bb247.us

after_bb247.us:                                   ; preds = %after_bb244.us
  %4645 = sdiv i32 24, %4370
  %4646 = and i32 %4645, %4374
  %4647 = add nsw i32 %4646, %4529
  %4648 = getelementptr inbounds i8, i8* %8, i32 %4647
  %4649 = load i8, i8* %4648, align 1, !tbaa !127
  br i1 %4387, label %after_bb250.us, label %after_bb361.us

after_bb250.us:                                   ; preds = %after_bb247.us
  %4650 = sdiv i32 25, %4370
  %4651 = and i32 %4650, %4374
  %4652 = add nsw i32 %4651, %4529
  %4653 = getelementptr inbounds i8, i8* %8, i32 %4652
  %4654 = load i8, i8* %4653, align 1, !tbaa !127
  br i1 %.not5184, label %after_bb361.us, label %after_bb253.us

after_bb253.us:                                   ; preds = %after_bb250.us
  %4655 = sdiv i32 26, %4370
  %4656 = and i32 %4655, %4374
  %4657 = add nsw i32 %4656, %4529
  %4658 = getelementptr inbounds i8, i8* %8, i32 %4657
  %4659 = load i8, i8* %4658, align 1, !tbaa !127
  br i1 %4388, label %after_bb256.us, label %after_bb361.us

after_bb256.us:                                   ; preds = %after_bb253.us
  %4660 = sdiv i32 27, %4370
  %4661 = and i32 %4660, %4374
  %4662 = add nsw i32 %4661, %4529
  %4663 = getelementptr inbounds i8, i8* %8, i32 %4662
  %4664 = load i8, i8* %4663, align 1, !tbaa !127
  br i1 %.not5185, label %after_bb361.us, label %after_bb259.us

after_bb259.us:                                   ; preds = %after_bb256.us
  %4665 = sdiv i32 28, %4370
  %4666 = and i32 %4665, %4374
  %4667 = add nsw i32 %4666, %4529
  %4668 = getelementptr inbounds i8, i8* %8, i32 %4667
  %4669 = load i8, i8* %4668, align 1, !tbaa !127
  br i1 %4389, label %after_bb262.us, label %after_bb361.us

after_bb262.us:                                   ; preds = %after_bb259.us
  %4670 = sdiv i32 29, %4370
  %4671 = and i32 %4670, %4374
  %4672 = add nsw i32 %4671, %4529
  %4673 = getelementptr inbounds i8, i8* %8, i32 %4672
  %4674 = load i8, i8* %4673, align 1, !tbaa !127
  br i1 %.not5186, label %after_bb361.us, label %after_bb265.us

after_bb265.us:                                   ; preds = %after_bb262.us
  %4675 = sdiv i32 30, %4370
  %4676 = and i32 %4675, %4374
  %4677 = add nsw i32 %4676, %4529
  %4678 = getelementptr inbounds i8, i8* %8, i32 %4677
  %4679 = load i8, i8* %4678, align 1, !tbaa !127
  br i1 %4390, label %after_bb268.us, label %after_bb361.us

after_bb268.us:                                   ; preds = %after_bb265.us
  %4680 = sdiv i32 31, %4370
  %4681 = and i32 %4680, %4374
  %4682 = add nsw i32 %4681, %4529
  %4683 = getelementptr inbounds i8, i8* %8, i32 %4682
  %4684 = load i8, i8* %4683, align 1, !tbaa !127
  br i1 %.not5187, label %after_bb361.us, label %after_bb271.us

after_bb271.us:                                   ; preds = %after_bb268.us
  %4685 = sdiv i32 32, %4370
  %4686 = and i32 %4685, %4374
  %4687 = add nsw i32 %4686, %4529
  %4688 = getelementptr inbounds i8, i8* %8, i32 %4687
  %4689 = load i8, i8* %4688, align 1, !tbaa !127
  br i1 %4391, label %after_bb274.us, label %after_bb361.us

after_bb274.us:                                   ; preds = %after_bb271.us
  %4690 = sdiv i32 33, %4370
  %4691 = and i32 %4690, %4374
  %4692 = add nsw i32 %4691, %4529
  %4693 = getelementptr inbounds i8, i8* %8, i32 %4692
  %4694 = load i8, i8* %4693, align 1, !tbaa !127
  br i1 %.not5188, label %after_bb361.us, label %after_bb277.us

after_bb277.us:                                   ; preds = %after_bb274.us
  %4695 = sdiv i32 34, %4370
  %4696 = and i32 %4695, %4374
  %4697 = add nsw i32 %4696, %4529
  %4698 = getelementptr inbounds i8, i8* %8, i32 %4697
  %4699 = load i8, i8* %4698, align 1, !tbaa !127
  br i1 %4392, label %after_bb280.us, label %after_bb361.us

after_bb280.us:                                   ; preds = %after_bb277.us
  %4700 = sdiv i32 35, %4370
  %4701 = and i32 %4700, %4374
  %4702 = add nsw i32 %4701, %4529
  %4703 = getelementptr inbounds i8, i8* %8, i32 %4702
  %4704 = load i8, i8* %4703, align 1, !tbaa !127
  br i1 %.not5189, label %after_bb361.us, label %after_bb283.us

after_bb283.us:                                   ; preds = %after_bb280.us
  %4705 = sdiv i32 36, %4370
  %4706 = and i32 %4705, %4374
  %4707 = add nsw i32 %4706, %4529
  %4708 = getelementptr inbounds i8, i8* %8, i32 %4707
  %4709 = load i8, i8* %4708, align 1, !tbaa !127
  br i1 %4393, label %after_bb286.us, label %after_bb361.us

after_bb286.us:                                   ; preds = %after_bb283.us
  %4710 = sdiv i32 37, %4370
  %4711 = and i32 %4710, %4374
  %4712 = add nsw i32 %4711, %4529
  %4713 = getelementptr inbounds i8, i8* %8, i32 %4712
  %4714 = load i8, i8* %4713, align 1, !tbaa !127
  br i1 %.not5190, label %after_bb361.us, label %after_bb289.us

after_bb289.us:                                   ; preds = %after_bb286.us
  %4715 = sdiv i32 38, %4370
  %4716 = and i32 %4715, %4374
  %4717 = add nsw i32 %4716, %4529
  %4718 = getelementptr inbounds i8, i8* %8, i32 %4717
  %4719 = load i8, i8* %4718, align 1, !tbaa !127
  br i1 %4394, label %after_bb292.us, label %after_bb361.us

after_bb292.us:                                   ; preds = %after_bb289.us
  %4720 = sdiv i32 39, %4370
  %4721 = and i32 %4720, %4374
  %4722 = add nsw i32 %4721, %4529
  %4723 = getelementptr inbounds i8, i8* %8, i32 %4722
  %4724 = load i8, i8* %4723, align 1, !tbaa !127
  br i1 %.not5191, label %after_bb361.us, label %after_bb295.us

after_bb295.us:                                   ; preds = %after_bb292.us
  %4725 = sdiv i32 40, %4370
  %4726 = and i32 %4725, %4374
  %4727 = add nsw i32 %4726, %4529
  %4728 = getelementptr inbounds i8, i8* %8, i32 %4727
  %4729 = load i8, i8* %4728, align 1, !tbaa !127
  br i1 %4395, label %after_bb298.us, label %after_bb361.us

after_bb298.us:                                   ; preds = %after_bb295.us
  %4730 = sdiv i32 41, %4370
  %4731 = and i32 %4730, %4374
  %4732 = add nsw i32 %4731, %4529
  %4733 = getelementptr inbounds i8, i8* %8, i32 %4732
  %4734 = load i8, i8* %4733, align 1, !tbaa !127
  br i1 %.not5192, label %after_bb361.us, label %after_bb301.us

after_bb301.us:                                   ; preds = %after_bb298.us
  %4735 = sdiv i32 42, %4370
  %4736 = and i32 %4735, %4374
  %4737 = add nsw i32 %4736, %4529
  %4738 = getelementptr inbounds i8, i8* %8, i32 %4737
  %4739 = load i8, i8* %4738, align 1, !tbaa !127
  br i1 %4396, label %after_bb304.us, label %after_bb361.us

after_bb304.us:                                   ; preds = %after_bb301.us
  %4740 = sdiv i32 43, %4370
  %4741 = and i32 %4740, %4374
  %4742 = add nsw i32 %4741, %4529
  %4743 = getelementptr inbounds i8, i8* %8, i32 %4742
  %4744 = load i8, i8* %4743, align 1, !tbaa !127
  br i1 %.not5193, label %after_bb361.us, label %after_bb307.us

after_bb307.us:                                   ; preds = %after_bb304.us
  %4745 = sdiv i32 44, %4370
  %4746 = and i32 %4745, %4374
  %4747 = add nsw i32 %4746, %4529
  %4748 = getelementptr inbounds i8, i8* %8, i32 %4747
  %4749 = load i8, i8* %4748, align 1, !tbaa !127
  br i1 %4397, label %after_bb310.us, label %after_bb361.us

after_bb310.us:                                   ; preds = %after_bb307.us
  %4750 = sdiv i32 45, %4370
  %4751 = and i32 %4750, %4374
  %4752 = add nsw i32 %4751, %4529
  %4753 = getelementptr inbounds i8, i8* %8, i32 %4752
  %4754 = load i8, i8* %4753, align 1, !tbaa !127
  br i1 %.not5194, label %after_bb361.us, label %after_bb313.us

after_bb313.us:                                   ; preds = %after_bb310.us
  %4755 = sdiv i32 46, %4370
  %4756 = and i32 %4755, %4374
  %4757 = add nsw i32 %4756, %4529
  %4758 = getelementptr inbounds i8, i8* %8, i32 %4757
  %4759 = load i8, i8* %4758, align 1, !tbaa !127
  br i1 %4398, label %after_bb316.us, label %after_bb361.us

after_bb316.us:                                   ; preds = %after_bb313.us
  %4760 = sdiv i32 47, %4370
  %4761 = and i32 %4760, %4374
  %4762 = add nsw i32 %4761, %4529
  %4763 = getelementptr inbounds i8, i8* %8, i32 %4762
  %4764 = load i8, i8* %4763, align 1, !tbaa !127
  br i1 %.not5195, label %after_bb361.us, label %after_bb319.us

after_bb319.us:                                   ; preds = %after_bb316.us
  %4765 = sdiv i32 48, %4370
  %4766 = and i32 %4765, %4374
  %4767 = add nsw i32 %4766, %4529
  %4768 = getelementptr inbounds i8, i8* %8, i32 %4767
  %4769 = load i8, i8* %4768, align 1, !tbaa !127
  br i1 %4399, label %after_bb322.us, label %after_bb361.us

after_bb322.us:                                   ; preds = %after_bb319.us
  %4770 = sdiv i32 49, %4370
  %4771 = and i32 %4770, %4374
  %4772 = add nsw i32 %4771, %4529
  %4773 = getelementptr inbounds i8, i8* %8, i32 %4772
  %4774 = load i8, i8* %4773, align 1, !tbaa !127
  br i1 %.not5196, label %after_bb361.us, label %after_bb325.us

after_bb325.us:                                   ; preds = %after_bb322.us
  %4775 = sdiv i32 50, %4370
  %4776 = and i32 %4775, %4374
  %4777 = add nsw i32 %4776, %4529
  %4778 = getelementptr inbounds i8, i8* %8, i32 %4777
  %4779 = load i8, i8* %4778, align 1, !tbaa !127
  br i1 %4400, label %after_bb328.us, label %after_bb361.us

after_bb328.us:                                   ; preds = %after_bb325.us
  %4780 = sdiv i32 51, %4370
  %4781 = and i32 %4780, %4374
  %4782 = add nsw i32 %4781, %4529
  %4783 = getelementptr inbounds i8, i8* %8, i32 %4782
  %4784 = load i8, i8* %4783, align 1, !tbaa !127
  br i1 %.not5197, label %after_bb361.us, label %after_bb331.us

after_bb331.us:                                   ; preds = %after_bb328.us
  %4785 = sdiv i32 52, %4370
  %4786 = and i32 %4785, %4374
  %4787 = add nsw i32 %4786, %4529
  %4788 = getelementptr inbounds i8, i8* %8, i32 %4787
  %4789 = load i8, i8* %4788, align 1, !tbaa !127
  br i1 %4401, label %after_bb334.us, label %after_bb361.us

after_bb334.us:                                   ; preds = %after_bb331.us
  %4790 = sdiv i32 53, %4370
  %4791 = and i32 %4790, %4374
  %4792 = add nsw i32 %4791, %4529
  %4793 = getelementptr inbounds i8, i8* %8, i32 %4792
  %4794 = load i8, i8* %4793, align 1, !tbaa !127
  br i1 %.not5198, label %after_bb361.us, label %after_bb337.us

after_bb337.us:                                   ; preds = %after_bb334.us
  %4795 = sdiv i32 54, %4370
  %4796 = and i32 %4795, %4374
  %4797 = add nsw i32 %4796, %4529
  %4798 = getelementptr inbounds i8, i8* %8, i32 %4797
  %4799 = load i8, i8* %4798, align 1, !tbaa !127
  br i1 %4402, label %after_bb340.us, label %after_bb361.us

after_bb340.us:                                   ; preds = %after_bb337.us
  %4800 = sdiv i32 55, %4370
  %4801 = and i32 %4800, %4374
  %4802 = add nsw i32 %4801, %4529
  %4803 = getelementptr inbounds i8, i8* %8, i32 %4802
  %4804 = load i8, i8* %4803, align 1, !tbaa !127
  br i1 %.not5199, label %after_bb361.us, label %after_bb343.us

after_bb343.us:                                   ; preds = %after_bb340.us
  %4805 = sdiv i32 56, %4370
  %4806 = and i32 %4805, %4374
  %4807 = add nsw i32 %4806, %4529
  %4808 = getelementptr inbounds i8, i8* %8, i32 %4807
  %4809 = load i8, i8* %4808, align 1, !tbaa !127
  br i1 %4403, label %after_bb346.us, label %after_bb361.us

after_bb346.us:                                   ; preds = %after_bb343.us
  %4810 = sdiv i32 57, %4370
  %4811 = and i32 %4810, %4374
  %4812 = add nsw i32 %4811, %4529
  %4813 = getelementptr inbounds i8, i8* %8, i32 %4812
  %4814 = load i8, i8* %4813, align 1, !tbaa !127
  br i1 %.not5200, label %after_bb361.us, label %after_bb349.us

after_bb349.us:                                   ; preds = %after_bb346.us
  %4815 = sdiv i32 58, %4370
  %4816 = and i32 %4815, %4374
  %4817 = add nsw i32 %4816, %4529
  %4818 = getelementptr inbounds i8, i8* %8, i32 %4817
  %4819 = load i8, i8* %4818, align 1, !tbaa !127
  br i1 %4404, label %after_bb352.us, label %after_bb361.us

after_bb352.us:                                   ; preds = %after_bb349.us
  %4820 = sdiv i32 59, %4370
  %4821 = and i32 %4820, %4374
  %4822 = add nsw i32 %4821, %4529
  %4823 = getelementptr inbounds i8, i8* %8, i32 %4822
  %4824 = load i8, i8* %4823, align 1, !tbaa !127
  br i1 %.not5201, label %after_bb361.us, label %after_bb355.us

after_bb355.us:                                   ; preds = %after_bb352.us
  %4825 = sdiv i32 60, %4370
  %4826 = and i32 %4825, %4374
  %4827 = add nsw i32 %4826, %4529
  %4828 = getelementptr inbounds i8, i8* %8, i32 %4827
  %4829 = load i8, i8* %4828, align 1, !tbaa !127
  br i1 %4405, label %after_bb358.us, label %after_bb361.us

after_bb358.us:                                   ; preds = %after_bb355.us
  %4830 = sdiv i32 61, %4370
  %4831 = and i32 %4830, %4374
  %4832 = add nsw i32 %4831, %4529
  %4833 = getelementptr inbounds i8, i8* %8, i32 %4832
  %4834 = load i8, i8* %4833, align 1, !tbaa !127
  br i1 %.not5202, label %after_bb361.us, label %true_bb359.us

true_bb359.us:                                    ; preds = %after_bb358.us
  %4835 = sdiv i32 62, %4370
  %4836 = and i32 %4835, %4374
  %4837 = add nsw i32 %4836, %4529
  %4838 = getelementptr inbounds i8, i8* %8, i32 %4837
  %4839 = load i8, i8* %4838, align 1, !tbaa !127
  br label %after_bb361.us

after_bb361.us:                                   ; preds = %true_bb359.us, %after_bb358.us, %after_bb355.us, %after_bb352.us, %after_bb349.us, %after_bb346.us, %after_bb343.us, %after_bb340.us, %after_bb337.us, %after_bb334.us, %after_bb331.us, %after_bb328.us, %after_bb325.us, %after_bb322.us, %after_bb319.us, %after_bb316.us, %after_bb313.us, %after_bb310.us, %after_bb307.us, %after_bb304.us, %after_bb301.us, %after_bb298.us, %after_bb295.us, %after_bb292.us, %after_bb289.us, %after_bb286.us, %after_bb283.us, %after_bb280.us, %after_bb277.us, %after_bb274.us, %after_bb271.us, %after_bb268.us, %after_bb265.us, %after_bb262.us, %after_bb259.us, %after_bb256.us, %after_bb253.us, %after_bb250.us, %after_bb247.us, %after_bb244.us, %after_bb241.us, %after_bb238.us, %after_bb235.us, %after_bb232.us, %after_bb229.us, %after_bb226.us, %after_bb223.us, %after_bb220.us, %after_bb217.us, %after_bb214.us, %after_bb211.us, %after_bb208.us, %after_bb205.us, %after_bb202.us, %after_bb199.us, %after_bb196.us, %after_bb193.us, %after_bb190.us, %after_bb187.us, %after_bb184.us, %after_bb181.us, %after_bb178.us, %"for resampled_input.s0.x.rebased170.us"
  %4840 = phi i8 [ %4834, %true_bb359.us ], [ %4834, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4841 = phi i8 [ %4824, %true_bb359.us ], [ %4824, %after_bb358.us ], [ %4824, %after_bb355.us ], [ %4824, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4842 = phi i8 [ %4814, %true_bb359.us ], [ %4814, %after_bb358.us ], [ %4814, %after_bb355.us ], [ %4814, %after_bb352.us ], [ %4814, %after_bb349.us ], [ %4814, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4843 = phi i8 [ %4804, %true_bb359.us ], [ %4804, %after_bb358.us ], [ %4804, %after_bb355.us ], [ %4804, %after_bb352.us ], [ %4804, %after_bb349.us ], [ %4804, %after_bb346.us ], [ %4804, %after_bb343.us ], [ %4804, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4844 = phi i8 [ %4794, %true_bb359.us ], [ %4794, %after_bb358.us ], [ %4794, %after_bb355.us ], [ %4794, %after_bb352.us ], [ %4794, %after_bb349.us ], [ %4794, %after_bb346.us ], [ %4794, %after_bb343.us ], [ %4794, %after_bb340.us ], [ %4794, %after_bb337.us ], [ %4794, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4845 = phi i8 [ %4784, %true_bb359.us ], [ %4784, %after_bb358.us ], [ %4784, %after_bb355.us ], [ %4784, %after_bb352.us ], [ %4784, %after_bb349.us ], [ %4784, %after_bb346.us ], [ %4784, %after_bb343.us ], [ %4784, %after_bb340.us ], [ %4784, %after_bb337.us ], [ %4784, %after_bb334.us ], [ %4784, %after_bb331.us ], [ %4784, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4846 = phi i8 [ %4774, %true_bb359.us ], [ %4774, %after_bb358.us ], [ %4774, %after_bb355.us ], [ %4774, %after_bb352.us ], [ %4774, %after_bb349.us ], [ %4774, %after_bb346.us ], [ %4774, %after_bb343.us ], [ %4774, %after_bb340.us ], [ %4774, %after_bb337.us ], [ %4774, %after_bb334.us ], [ %4774, %after_bb331.us ], [ %4774, %after_bb328.us ], [ %4774, %after_bb325.us ], [ %4774, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4847 = phi i8 [ %4764, %true_bb359.us ], [ %4764, %after_bb358.us ], [ %4764, %after_bb355.us ], [ %4764, %after_bb352.us ], [ %4764, %after_bb349.us ], [ %4764, %after_bb346.us ], [ %4764, %after_bb343.us ], [ %4764, %after_bb340.us ], [ %4764, %after_bb337.us ], [ %4764, %after_bb334.us ], [ %4764, %after_bb331.us ], [ %4764, %after_bb328.us ], [ %4764, %after_bb325.us ], [ %4764, %after_bb322.us ], [ %4764, %after_bb319.us ], [ %4764, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4848 = phi i8 [ %4754, %true_bb359.us ], [ %4754, %after_bb358.us ], [ %4754, %after_bb355.us ], [ %4754, %after_bb352.us ], [ %4754, %after_bb349.us ], [ %4754, %after_bb346.us ], [ %4754, %after_bb343.us ], [ %4754, %after_bb340.us ], [ %4754, %after_bb337.us ], [ %4754, %after_bb334.us ], [ %4754, %after_bb331.us ], [ %4754, %after_bb328.us ], [ %4754, %after_bb325.us ], [ %4754, %after_bb322.us ], [ %4754, %after_bb319.us ], [ %4754, %after_bb316.us ], [ %4754, %after_bb313.us ], [ %4754, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4849 = phi i8 [ %4744, %true_bb359.us ], [ %4744, %after_bb358.us ], [ %4744, %after_bb355.us ], [ %4744, %after_bb352.us ], [ %4744, %after_bb349.us ], [ %4744, %after_bb346.us ], [ %4744, %after_bb343.us ], [ %4744, %after_bb340.us ], [ %4744, %after_bb337.us ], [ %4744, %after_bb334.us ], [ %4744, %after_bb331.us ], [ %4744, %after_bb328.us ], [ %4744, %after_bb325.us ], [ %4744, %after_bb322.us ], [ %4744, %after_bb319.us ], [ %4744, %after_bb316.us ], [ %4744, %after_bb313.us ], [ %4744, %after_bb310.us ], [ %4744, %after_bb307.us ], [ %4744, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4850 = phi i8 [ %4734, %true_bb359.us ], [ %4734, %after_bb358.us ], [ %4734, %after_bb355.us ], [ %4734, %after_bb352.us ], [ %4734, %after_bb349.us ], [ %4734, %after_bb346.us ], [ %4734, %after_bb343.us ], [ %4734, %after_bb340.us ], [ %4734, %after_bb337.us ], [ %4734, %after_bb334.us ], [ %4734, %after_bb331.us ], [ %4734, %after_bb328.us ], [ %4734, %after_bb325.us ], [ %4734, %after_bb322.us ], [ %4734, %after_bb319.us ], [ %4734, %after_bb316.us ], [ %4734, %after_bb313.us ], [ %4734, %after_bb310.us ], [ %4734, %after_bb307.us ], [ %4734, %after_bb304.us ], [ %4734, %after_bb301.us ], [ %4734, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4851 = phi i8 [ %4724, %true_bb359.us ], [ %4724, %after_bb358.us ], [ %4724, %after_bb355.us ], [ %4724, %after_bb352.us ], [ %4724, %after_bb349.us ], [ %4724, %after_bb346.us ], [ %4724, %after_bb343.us ], [ %4724, %after_bb340.us ], [ %4724, %after_bb337.us ], [ %4724, %after_bb334.us ], [ %4724, %after_bb331.us ], [ %4724, %after_bb328.us ], [ %4724, %after_bb325.us ], [ %4724, %after_bb322.us ], [ %4724, %after_bb319.us ], [ %4724, %after_bb316.us ], [ %4724, %after_bb313.us ], [ %4724, %after_bb310.us ], [ %4724, %after_bb307.us ], [ %4724, %after_bb304.us ], [ %4724, %after_bb301.us ], [ %4724, %after_bb298.us ], [ %4724, %after_bb295.us ], [ %4724, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4852 = phi i8 [ %4714, %true_bb359.us ], [ %4714, %after_bb358.us ], [ %4714, %after_bb355.us ], [ %4714, %after_bb352.us ], [ %4714, %after_bb349.us ], [ %4714, %after_bb346.us ], [ %4714, %after_bb343.us ], [ %4714, %after_bb340.us ], [ %4714, %after_bb337.us ], [ %4714, %after_bb334.us ], [ %4714, %after_bb331.us ], [ %4714, %after_bb328.us ], [ %4714, %after_bb325.us ], [ %4714, %after_bb322.us ], [ %4714, %after_bb319.us ], [ %4714, %after_bb316.us ], [ %4714, %after_bb313.us ], [ %4714, %after_bb310.us ], [ %4714, %after_bb307.us ], [ %4714, %after_bb304.us ], [ %4714, %after_bb301.us ], [ %4714, %after_bb298.us ], [ %4714, %after_bb295.us ], [ %4714, %after_bb292.us ], [ %4714, %after_bb289.us ], [ %4714, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4853 = phi i8 [ %4704, %true_bb359.us ], [ %4704, %after_bb358.us ], [ %4704, %after_bb355.us ], [ %4704, %after_bb352.us ], [ %4704, %after_bb349.us ], [ %4704, %after_bb346.us ], [ %4704, %after_bb343.us ], [ %4704, %after_bb340.us ], [ %4704, %after_bb337.us ], [ %4704, %after_bb334.us ], [ %4704, %after_bb331.us ], [ %4704, %after_bb328.us ], [ %4704, %after_bb325.us ], [ %4704, %after_bb322.us ], [ %4704, %after_bb319.us ], [ %4704, %after_bb316.us ], [ %4704, %after_bb313.us ], [ %4704, %after_bb310.us ], [ %4704, %after_bb307.us ], [ %4704, %after_bb304.us ], [ %4704, %after_bb301.us ], [ %4704, %after_bb298.us ], [ %4704, %after_bb295.us ], [ %4704, %after_bb292.us ], [ %4704, %after_bb289.us ], [ %4704, %after_bb286.us ], [ %4704, %after_bb283.us ], [ %4704, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4854 = phi i8 [ %4694, %true_bb359.us ], [ %4694, %after_bb358.us ], [ %4694, %after_bb355.us ], [ %4694, %after_bb352.us ], [ %4694, %after_bb349.us ], [ %4694, %after_bb346.us ], [ %4694, %after_bb343.us ], [ %4694, %after_bb340.us ], [ %4694, %after_bb337.us ], [ %4694, %after_bb334.us ], [ %4694, %after_bb331.us ], [ %4694, %after_bb328.us ], [ %4694, %after_bb325.us ], [ %4694, %after_bb322.us ], [ %4694, %after_bb319.us ], [ %4694, %after_bb316.us ], [ %4694, %after_bb313.us ], [ %4694, %after_bb310.us ], [ %4694, %after_bb307.us ], [ %4694, %after_bb304.us ], [ %4694, %after_bb301.us ], [ %4694, %after_bb298.us ], [ %4694, %after_bb295.us ], [ %4694, %after_bb292.us ], [ %4694, %after_bb289.us ], [ %4694, %after_bb286.us ], [ %4694, %after_bb283.us ], [ %4694, %after_bb280.us ], [ %4694, %after_bb277.us ], [ %4694, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4855 = phi i8 [ %4684, %true_bb359.us ], [ %4684, %after_bb358.us ], [ %4684, %after_bb355.us ], [ %4684, %after_bb352.us ], [ %4684, %after_bb349.us ], [ %4684, %after_bb346.us ], [ %4684, %after_bb343.us ], [ %4684, %after_bb340.us ], [ %4684, %after_bb337.us ], [ %4684, %after_bb334.us ], [ %4684, %after_bb331.us ], [ %4684, %after_bb328.us ], [ %4684, %after_bb325.us ], [ %4684, %after_bb322.us ], [ %4684, %after_bb319.us ], [ %4684, %after_bb316.us ], [ %4684, %after_bb313.us ], [ %4684, %after_bb310.us ], [ %4684, %after_bb307.us ], [ %4684, %after_bb304.us ], [ %4684, %after_bb301.us ], [ %4684, %after_bb298.us ], [ %4684, %after_bb295.us ], [ %4684, %after_bb292.us ], [ %4684, %after_bb289.us ], [ %4684, %after_bb286.us ], [ %4684, %after_bb283.us ], [ %4684, %after_bb280.us ], [ %4684, %after_bb277.us ], [ %4684, %after_bb274.us ], [ %4684, %after_bb271.us ], [ %4684, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4856 = phi i8 [ %4674, %true_bb359.us ], [ %4674, %after_bb358.us ], [ %4674, %after_bb355.us ], [ %4674, %after_bb352.us ], [ %4674, %after_bb349.us ], [ %4674, %after_bb346.us ], [ %4674, %after_bb343.us ], [ %4674, %after_bb340.us ], [ %4674, %after_bb337.us ], [ %4674, %after_bb334.us ], [ %4674, %after_bb331.us ], [ %4674, %after_bb328.us ], [ %4674, %after_bb325.us ], [ %4674, %after_bb322.us ], [ %4674, %after_bb319.us ], [ %4674, %after_bb316.us ], [ %4674, %after_bb313.us ], [ %4674, %after_bb310.us ], [ %4674, %after_bb307.us ], [ %4674, %after_bb304.us ], [ %4674, %after_bb301.us ], [ %4674, %after_bb298.us ], [ %4674, %after_bb295.us ], [ %4674, %after_bb292.us ], [ %4674, %after_bb289.us ], [ %4674, %after_bb286.us ], [ %4674, %after_bb283.us ], [ %4674, %after_bb280.us ], [ %4674, %after_bb277.us ], [ %4674, %after_bb274.us ], [ %4674, %after_bb271.us ], [ %4674, %after_bb268.us ], [ %4674, %after_bb265.us ], [ %4674, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4857 = phi i8 [ %4664, %true_bb359.us ], [ %4664, %after_bb358.us ], [ %4664, %after_bb355.us ], [ %4664, %after_bb352.us ], [ %4664, %after_bb349.us ], [ %4664, %after_bb346.us ], [ %4664, %after_bb343.us ], [ %4664, %after_bb340.us ], [ %4664, %after_bb337.us ], [ %4664, %after_bb334.us ], [ %4664, %after_bb331.us ], [ %4664, %after_bb328.us ], [ %4664, %after_bb325.us ], [ %4664, %after_bb322.us ], [ %4664, %after_bb319.us ], [ %4664, %after_bb316.us ], [ %4664, %after_bb313.us ], [ %4664, %after_bb310.us ], [ %4664, %after_bb307.us ], [ %4664, %after_bb304.us ], [ %4664, %after_bb301.us ], [ %4664, %after_bb298.us ], [ %4664, %after_bb295.us ], [ %4664, %after_bb292.us ], [ %4664, %after_bb289.us ], [ %4664, %after_bb286.us ], [ %4664, %after_bb283.us ], [ %4664, %after_bb280.us ], [ %4664, %after_bb277.us ], [ %4664, %after_bb274.us ], [ %4664, %after_bb271.us ], [ %4664, %after_bb268.us ], [ %4664, %after_bb265.us ], [ %4664, %after_bb262.us ], [ %4664, %after_bb259.us ], [ %4664, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4858 = phi i8 [ %4654, %true_bb359.us ], [ %4654, %after_bb358.us ], [ %4654, %after_bb355.us ], [ %4654, %after_bb352.us ], [ %4654, %after_bb349.us ], [ %4654, %after_bb346.us ], [ %4654, %after_bb343.us ], [ %4654, %after_bb340.us ], [ %4654, %after_bb337.us ], [ %4654, %after_bb334.us ], [ %4654, %after_bb331.us ], [ %4654, %after_bb328.us ], [ %4654, %after_bb325.us ], [ %4654, %after_bb322.us ], [ %4654, %after_bb319.us ], [ %4654, %after_bb316.us ], [ %4654, %after_bb313.us ], [ %4654, %after_bb310.us ], [ %4654, %after_bb307.us ], [ %4654, %after_bb304.us ], [ %4654, %after_bb301.us ], [ %4654, %after_bb298.us ], [ %4654, %after_bb295.us ], [ %4654, %after_bb292.us ], [ %4654, %after_bb289.us ], [ %4654, %after_bb286.us ], [ %4654, %after_bb283.us ], [ %4654, %after_bb280.us ], [ %4654, %after_bb277.us ], [ %4654, %after_bb274.us ], [ %4654, %after_bb271.us ], [ %4654, %after_bb268.us ], [ %4654, %after_bb265.us ], [ %4654, %after_bb262.us ], [ %4654, %after_bb259.us ], [ %4654, %after_bb256.us ], [ %4654, %after_bb253.us ], [ %4654, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4859 = phi i8 [ %4644, %true_bb359.us ], [ %4644, %after_bb358.us ], [ %4644, %after_bb355.us ], [ %4644, %after_bb352.us ], [ %4644, %after_bb349.us ], [ %4644, %after_bb346.us ], [ %4644, %after_bb343.us ], [ %4644, %after_bb340.us ], [ %4644, %after_bb337.us ], [ %4644, %after_bb334.us ], [ %4644, %after_bb331.us ], [ %4644, %after_bb328.us ], [ %4644, %after_bb325.us ], [ %4644, %after_bb322.us ], [ %4644, %after_bb319.us ], [ %4644, %after_bb316.us ], [ %4644, %after_bb313.us ], [ %4644, %after_bb310.us ], [ %4644, %after_bb307.us ], [ %4644, %after_bb304.us ], [ %4644, %after_bb301.us ], [ %4644, %after_bb298.us ], [ %4644, %after_bb295.us ], [ %4644, %after_bb292.us ], [ %4644, %after_bb289.us ], [ %4644, %after_bb286.us ], [ %4644, %after_bb283.us ], [ %4644, %after_bb280.us ], [ %4644, %after_bb277.us ], [ %4644, %after_bb274.us ], [ %4644, %after_bb271.us ], [ %4644, %after_bb268.us ], [ %4644, %after_bb265.us ], [ %4644, %after_bb262.us ], [ %4644, %after_bb259.us ], [ %4644, %after_bb256.us ], [ %4644, %after_bb253.us ], [ %4644, %after_bb250.us ], [ %4644, %after_bb247.us ], [ %4644, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4860 = phi i8 [ %4634, %true_bb359.us ], [ %4634, %after_bb358.us ], [ %4634, %after_bb355.us ], [ %4634, %after_bb352.us ], [ %4634, %after_bb349.us ], [ %4634, %after_bb346.us ], [ %4634, %after_bb343.us ], [ %4634, %after_bb340.us ], [ %4634, %after_bb337.us ], [ %4634, %after_bb334.us ], [ %4634, %after_bb331.us ], [ %4634, %after_bb328.us ], [ %4634, %after_bb325.us ], [ %4634, %after_bb322.us ], [ %4634, %after_bb319.us ], [ %4634, %after_bb316.us ], [ %4634, %after_bb313.us ], [ %4634, %after_bb310.us ], [ %4634, %after_bb307.us ], [ %4634, %after_bb304.us ], [ %4634, %after_bb301.us ], [ %4634, %after_bb298.us ], [ %4634, %after_bb295.us ], [ %4634, %after_bb292.us ], [ %4634, %after_bb289.us ], [ %4634, %after_bb286.us ], [ %4634, %after_bb283.us ], [ %4634, %after_bb280.us ], [ %4634, %after_bb277.us ], [ %4634, %after_bb274.us ], [ %4634, %after_bb271.us ], [ %4634, %after_bb268.us ], [ %4634, %after_bb265.us ], [ %4634, %after_bb262.us ], [ %4634, %after_bb259.us ], [ %4634, %after_bb256.us ], [ %4634, %after_bb253.us ], [ %4634, %after_bb250.us ], [ %4634, %after_bb247.us ], [ %4634, %after_bb244.us ], [ %4634, %after_bb241.us ], [ %4634, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4861 = phi i8 [ %4624, %true_bb359.us ], [ %4624, %after_bb358.us ], [ %4624, %after_bb355.us ], [ %4624, %after_bb352.us ], [ %4624, %after_bb349.us ], [ %4624, %after_bb346.us ], [ %4624, %after_bb343.us ], [ %4624, %after_bb340.us ], [ %4624, %after_bb337.us ], [ %4624, %after_bb334.us ], [ %4624, %after_bb331.us ], [ %4624, %after_bb328.us ], [ %4624, %after_bb325.us ], [ %4624, %after_bb322.us ], [ %4624, %after_bb319.us ], [ %4624, %after_bb316.us ], [ %4624, %after_bb313.us ], [ %4624, %after_bb310.us ], [ %4624, %after_bb307.us ], [ %4624, %after_bb304.us ], [ %4624, %after_bb301.us ], [ %4624, %after_bb298.us ], [ %4624, %after_bb295.us ], [ %4624, %after_bb292.us ], [ %4624, %after_bb289.us ], [ %4624, %after_bb286.us ], [ %4624, %after_bb283.us ], [ %4624, %after_bb280.us ], [ %4624, %after_bb277.us ], [ %4624, %after_bb274.us ], [ %4624, %after_bb271.us ], [ %4624, %after_bb268.us ], [ %4624, %after_bb265.us ], [ %4624, %after_bb262.us ], [ %4624, %after_bb259.us ], [ %4624, %after_bb256.us ], [ %4624, %after_bb253.us ], [ %4624, %after_bb250.us ], [ %4624, %after_bb247.us ], [ %4624, %after_bb244.us ], [ %4624, %after_bb241.us ], [ %4624, %after_bb238.us ], [ %4624, %after_bb235.us ], [ %4624, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4862 = phi i8 [ %4614, %true_bb359.us ], [ %4614, %after_bb358.us ], [ %4614, %after_bb355.us ], [ %4614, %after_bb352.us ], [ %4614, %after_bb349.us ], [ %4614, %after_bb346.us ], [ %4614, %after_bb343.us ], [ %4614, %after_bb340.us ], [ %4614, %after_bb337.us ], [ %4614, %after_bb334.us ], [ %4614, %after_bb331.us ], [ %4614, %after_bb328.us ], [ %4614, %after_bb325.us ], [ %4614, %after_bb322.us ], [ %4614, %after_bb319.us ], [ %4614, %after_bb316.us ], [ %4614, %after_bb313.us ], [ %4614, %after_bb310.us ], [ %4614, %after_bb307.us ], [ %4614, %after_bb304.us ], [ %4614, %after_bb301.us ], [ %4614, %after_bb298.us ], [ %4614, %after_bb295.us ], [ %4614, %after_bb292.us ], [ %4614, %after_bb289.us ], [ %4614, %after_bb286.us ], [ %4614, %after_bb283.us ], [ %4614, %after_bb280.us ], [ %4614, %after_bb277.us ], [ %4614, %after_bb274.us ], [ %4614, %after_bb271.us ], [ %4614, %after_bb268.us ], [ %4614, %after_bb265.us ], [ %4614, %after_bb262.us ], [ %4614, %after_bb259.us ], [ %4614, %after_bb256.us ], [ %4614, %after_bb253.us ], [ %4614, %after_bb250.us ], [ %4614, %after_bb247.us ], [ %4614, %after_bb244.us ], [ %4614, %after_bb241.us ], [ %4614, %after_bb238.us ], [ %4614, %after_bb235.us ], [ %4614, %after_bb232.us ], [ %4614, %after_bb229.us ], [ %4614, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4863 = phi i8 [ %4604, %true_bb359.us ], [ %4604, %after_bb358.us ], [ %4604, %after_bb355.us ], [ %4604, %after_bb352.us ], [ %4604, %after_bb349.us ], [ %4604, %after_bb346.us ], [ %4604, %after_bb343.us ], [ %4604, %after_bb340.us ], [ %4604, %after_bb337.us ], [ %4604, %after_bb334.us ], [ %4604, %after_bb331.us ], [ %4604, %after_bb328.us ], [ %4604, %after_bb325.us ], [ %4604, %after_bb322.us ], [ %4604, %after_bb319.us ], [ %4604, %after_bb316.us ], [ %4604, %after_bb313.us ], [ %4604, %after_bb310.us ], [ %4604, %after_bb307.us ], [ %4604, %after_bb304.us ], [ %4604, %after_bb301.us ], [ %4604, %after_bb298.us ], [ %4604, %after_bb295.us ], [ %4604, %after_bb292.us ], [ %4604, %after_bb289.us ], [ %4604, %after_bb286.us ], [ %4604, %after_bb283.us ], [ %4604, %after_bb280.us ], [ %4604, %after_bb277.us ], [ %4604, %after_bb274.us ], [ %4604, %after_bb271.us ], [ %4604, %after_bb268.us ], [ %4604, %after_bb265.us ], [ %4604, %after_bb262.us ], [ %4604, %after_bb259.us ], [ %4604, %after_bb256.us ], [ %4604, %after_bb253.us ], [ %4604, %after_bb250.us ], [ %4604, %after_bb247.us ], [ %4604, %after_bb244.us ], [ %4604, %after_bb241.us ], [ %4604, %after_bb238.us ], [ %4604, %after_bb235.us ], [ %4604, %after_bb232.us ], [ %4604, %after_bb229.us ], [ %4604, %after_bb226.us ], [ %4604, %after_bb223.us ], [ %4604, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4864 = phi i8 [ %4594, %true_bb359.us ], [ %4594, %after_bb358.us ], [ %4594, %after_bb355.us ], [ %4594, %after_bb352.us ], [ %4594, %after_bb349.us ], [ %4594, %after_bb346.us ], [ %4594, %after_bb343.us ], [ %4594, %after_bb340.us ], [ %4594, %after_bb337.us ], [ %4594, %after_bb334.us ], [ %4594, %after_bb331.us ], [ %4594, %after_bb328.us ], [ %4594, %after_bb325.us ], [ %4594, %after_bb322.us ], [ %4594, %after_bb319.us ], [ %4594, %after_bb316.us ], [ %4594, %after_bb313.us ], [ %4594, %after_bb310.us ], [ %4594, %after_bb307.us ], [ %4594, %after_bb304.us ], [ %4594, %after_bb301.us ], [ %4594, %after_bb298.us ], [ %4594, %after_bb295.us ], [ %4594, %after_bb292.us ], [ %4594, %after_bb289.us ], [ %4594, %after_bb286.us ], [ %4594, %after_bb283.us ], [ %4594, %after_bb280.us ], [ %4594, %after_bb277.us ], [ %4594, %after_bb274.us ], [ %4594, %after_bb271.us ], [ %4594, %after_bb268.us ], [ %4594, %after_bb265.us ], [ %4594, %after_bb262.us ], [ %4594, %after_bb259.us ], [ %4594, %after_bb256.us ], [ %4594, %after_bb253.us ], [ %4594, %after_bb250.us ], [ %4594, %after_bb247.us ], [ %4594, %after_bb244.us ], [ %4594, %after_bb241.us ], [ %4594, %after_bb238.us ], [ %4594, %after_bb235.us ], [ %4594, %after_bb232.us ], [ %4594, %after_bb229.us ], [ %4594, %after_bb226.us ], [ %4594, %after_bb223.us ], [ %4594, %after_bb220.us ], [ %4594, %after_bb217.us ], [ %4594, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4865 = phi i8 [ %4584, %true_bb359.us ], [ %4584, %after_bb358.us ], [ %4584, %after_bb355.us ], [ %4584, %after_bb352.us ], [ %4584, %after_bb349.us ], [ %4584, %after_bb346.us ], [ %4584, %after_bb343.us ], [ %4584, %after_bb340.us ], [ %4584, %after_bb337.us ], [ %4584, %after_bb334.us ], [ %4584, %after_bb331.us ], [ %4584, %after_bb328.us ], [ %4584, %after_bb325.us ], [ %4584, %after_bb322.us ], [ %4584, %after_bb319.us ], [ %4584, %after_bb316.us ], [ %4584, %after_bb313.us ], [ %4584, %after_bb310.us ], [ %4584, %after_bb307.us ], [ %4584, %after_bb304.us ], [ %4584, %after_bb301.us ], [ %4584, %after_bb298.us ], [ %4584, %after_bb295.us ], [ %4584, %after_bb292.us ], [ %4584, %after_bb289.us ], [ %4584, %after_bb286.us ], [ %4584, %after_bb283.us ], [ %4584, %after_bb280.us ], [ %4584, %after_bb277.us ], [ %4584, %after_bb274.us ], [ %4584, %after_bb271.us ], [ %4584, %after_bb268.us ], [ %4584, %after_bb265.us ], [ %4584, %after_bb262.us ], [ %4584, %after_bb259.us ], [ %4584, %after_bb256.us ], [ %4584, %after_bb253.us ], [ %4584, %after_bb250.us ], [ %4584, %after_bb247.us ], [ %4584, %after_bb244.us ], [ %4584, %after_bb241.us ], [ %4584, %after_bb238.us ], [ %4584, %after_bb235.us ], [ %4584, %after_bb232.us ], [ %4584, %after_bb229.us ], [ %4584, %after_bb226.us ], [ %4584, %after_bb223.us ], [ %4584, %after_bb220.us ], [ %4584, %after_bb217.us ], [ %4584, %after_bb214.us ], [ %4584, %after_bb211.us ], [ %4584, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4866 = phi i8 [ %4574, %true_bb359.us ], [ %4574, %after_bb358.us ], [ %4574, %after_bb355.us ], [ %4574, %after_bb352.us ], [ %4574, %after_bb349.us ], [ %4574, %after_bb346.us ], [ %4574, %after_bb343.us ], [ %4574, %after_bb340.us ], [ %4574, %after_bb337.us ], [ %4574, %after_bb334.us ], [ %4574, %after_bb331.us ], [ %4574, %after_bb328.us ], [ %4574, %after_bb325.us ], [ %4574, %after_bb322.us ], [ %4574, %after_bb319.us ], [ %4574, %after_bb316.us ], [ %4574, %after_bb313.us ], [ %4574, %after_bb310.us ], [ %4574, %after_bb307.us ], [ %4574, %after_bb304.us ], [ %4574, %after_bb301.us ], [ %4574, %after_bb298.us ], [ %4574, %after_bb295.us ], [ %4574, %after_bb292.us ], [ %4574, %after_bb289.us ], [ %4574, %after_bb286.us ], [ %4574, %after_bb283.us ], [ %4574, %after_bb280.us ], [ %4574, %after_bb277.us ], [ %4574, %after_bb274.us ], [ %4574, %after_bb271.us ], [ %4574, %after_bb268.us ], [ %4574, %after_bb265.us ], [ %4574, %after_bb262.us ], [ %4574, %after_bb259.us ], [ %4574, %after_bb256.us ], [ %4574, %after_bb253.us ], [ %4574, %after_bb250.us ], [ %4574, %after_bb247.us ], [ %4574, %after_bb244.us ], [ %4574, %after_bb241.us ], [ %4574, %after_bb238.us ], [ %4574, %after_bb235.us ], [ %4574, %after_bb232.us ], [ %4574, %after_bb229.us ], [ %4574, %after_bb226.us ], [ %4574, %after_bb223.us ], [ %4574, %after_bb220.us ], [ %4574, %after_bb217.us ], [ %4574, %after_bb214.us ], [ %4574, %after_bb211.us ], [ %4574, %after_bb208.us ], [ %4574, %after_bb205.us ], [ %4574, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4867 = phi i8 [ %4564, %true_bb359.us ], [ %4564, %after_bb358.us ], [ %4564, %after_bb355.us ], [ %4564, %after_bb352.us ], [ %4564, %after_bb349.us ], [ %4564, %after_bb346.us ], [ %4564, %after_bb343.us ], [ %4564, %after_bb340.us ], [ %4564, %after_bb337.us ], [ %4564, %after_bb334.us ], [ %4564, %after_bb331.us ], [ %4564, %after_bb328.us ], [ %4564, %after_bb325.us ], [ %4564, %after_bb322.us ], [ %4564, %after_bb319.us ], [ %4564, %after_bb316.us ], [ %4564, %after_bb313.us ], [ %4564, %after_bb310.us ], [ %4564, %after_bb307.us ], [ %4564, %after_bb304.us ], [ %4564, %after_bb301.us ], [ %4564, %after_bb298.us ], [ %4564, %after_bb295.us ], [ %4564, %after_bb292.us ], [ %4564, %after_bb289.us ], [ %4564, %after_bb286.us ], [ %4564, %after_bb283.us ], [ %4564, %after_bb280.us ], [ %4564, %after_bb277.us ], [ %4564, %after_bb274.us ], [ %4564, %after_bb271.us ], [ %4564, %after_bb268.us ], [ %4564, %after_bb265.us ], [ %4564, %after_bb262.us ], [ %4564, %after_bb259.us ], [ %4564, %after_bb256.us ], [ %4564, %after_bb253.us ], [ %4564, %after_bb250.us ], [ %4564, %after_bb247.us ], [ %4564, %after_bb244.us ], [ %4564, %after_bb241.us ], [ %4564, %after_bb238.us ], [ %4564, %after_bb235.us ], [ %4564, %after_bb232.us ], [ %4564, %after_bb229.us ], [ %4564, %after_bb226.us ], [ %4564, %after_bb223.us ], [ %4564, %after_bb220.us ], [ %4564, %after_bb217.us ], [ %4564, %after_bb214.us ], [ %4564, %after_bb211.us ], [ %4564, %after_bb208.us ], [ %4564, %after_bb205.us ], [ %4564, %after_bb202.us ], [ %4564, %after_bb199.us ], [ %4564, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4868 = phi i8 [ %4554, %true_bb359.us ], [ %4554, %after_bb358.us ], [ %4554, %after_bb355.us ], [ %4554, %after_bb352.us ], [ %4554, %after_bb349.us ], [ %4554, %after_bb346.us ], [ %4554, %after_bb343.us ], [ %4554, %after_bb340.us ], [ %4554, %after_bb337.us ], [ %4554, %after_bb334.us ], [ %4554, %after_bb331.us ], [ %4554, %after_bb328.us ], [ %4554, %after_bb325.us ], [ %4554, %after_bb322.us ], [ %4554, %after_bb319.us ], [ %4554, %after_bb316.us ], [ %4554, %after_bb313.us ], [ %4554, %after_bb310.us ], [ %4554, %after_bb307.us ], [ %4554, %after_bb304.us ], [ %4554, %after_bb301.us ], [ %4554, %after_bb298.us ], [ %4554, %after_bb295.us ], [ %4554, %after_bb292.us ], [ %4554, %after_bb289.us ], [ %4554, %after_bb286.us ], [ %4554, %after_bb283.us ], [ %4554, %after_bb280.us ], [ %4554, %after_bb277.us ], [ %4554, %after_bb274.us ], [ %4554, %after_bb271.us ], [ %4554, %after_bb268.us ], [ %4554, %after_bb265.us ], [ %4554, %after_bb262.us ], [ %4554, %after_bb259.us ], [ %4554, %after_bb256.us ], [ %4554, %after_bb253.us ], [ %4554, %after_bb250.us ], [ %4554, %after_bb247.us ], [ %4554, %after_bb244.us ], [ %4554, %after_bb241.us ], [ %4554, %after_bb238.us ], [ %4554, %after_bb235.us ], [ %4554, %after_bb232.us ], [ %4554, %after_bb229.us ], [ %4554, %after_bb226.us ], [ %4554, %after_bb223.us ], [ %4554, %after_bb220.us ], [ %4554, %after_bb217.us ], [ %4554, %after_bb214.us ], [ %4554, %after_bb211.us ], [ %4554, %after_bb208.us ], [ %4554, %after_bb205.us ], [ %4554, %after_bb202.us ], [ %4554, %after_bb199.us ], [ %4554, %after_bb196.us ], [ %4554, %after_bb193.us ], [ %4554, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4869 = phi i8 [ %4544, %true_bb359.us ], [ %4544, %after_bb358.us ], [ %4544, %after_bb355.us ], [ %4544, %after_bb352.us ], [ %4544, %after_bb349.us ], [ %4544, %after_bb346.us ], [ %4544, %after_bb343.us ], [ %4544, %after_bb340.us ], [ %4544, %after_bb337.us ], [ %4544, %after_bb334.us ], [ %4544, %after_bb331.us ], [ %4544, %after_bb328.us ], [ %4544, %after_bb325.us ], [ %4544, %after_bb322.us ], [ %4544, %after_bb319.us ], [ %4544, %after_bb316.us ], [ %4544, %after_bb313.us ], [ %4544, %after_bb310.us ], [ %4544, %after_bb307.us ], [ %4544, %after_bb304.us ], [ %4544, %after_bb301.us ], [ %4544, %after_bb298.us ], [ %4544, %after_bb295.us ], [ %4544, %after_bb292.us ], [ %4544, %after_bb289.us ], [ %4544, %after_bb286.us ], [ %4544, %after_bb283.us ], [ %4544, %after_bb280.us ], [ %4544, %after_bb277.us ], [ %4544, %after_bb274.us ], [ %4544, %after_bb271.us ], [ %4544, %after_bb268.us ], [ %4544, %after_bb265.us ], [ %4544, %after_bb262.us ], [ %4544, %after_bb259.us ], [ %4544, %after_bb256.us ], [ %4544, %after_bb253.us ], [ %4544, %after_bb250.us ], [ %4544, %after_bb247.us ], [ %4544, %after_bb244.us ], [ %4544, %after_bb241.us ], [ %4544, %after_bb238.us ], [ %4544, %after_bb235.us ], [ %4544, %after_bb232.us ], [ %4544, %after_bb229.us ], [ %4544, %after_bb226.us ], [ %4544, %after_bb223.us ], [ %4544, %after_bb220.us ], [ %4544, %after_bb217.us ], [ %4544, %after_bb214.us ], [ %4544, %after_bb211.us ], [ %4544, %after_bb208.us ], [ %4544, %after_bb205.us ], [ %4544, %after_bb202.us ], [ %4544, %after_bb199.us ], [ %4544, %after_bb196.us ], [ %4544, %after_bb193.us ], [ %4544, %after_bb190.us ], [ %4544, %after_bb187.us ], [ %4544, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4870 = phi i8 [ %4534, %true_bb359.us ], [ %4534, %after_bb358.us ], [ %4534, %after_bb355.us ], [ %4534, %after_bb352.us ], [ %4534, %after_bb349.us ], [ %4534, %after_bb346.us ], [ %4534, %after_bb343.us ], [ %4534, %after_bb340.us ], [ %4534, %after_bb337.us ], [ %4534, %after_bb334.us ], [ %4534, %after_bb331.us ], [ %4534, %after_bb328.us ], [ %4534, %after_bb325.us ], [ %4534, %after_bb322.us ], [ %4534, %after_bb319.us ], [ %4534, %after_bb316.us ], [ %4534, %after_bb313.us ], [ %4534, %after_bb310.us ], [ %4534, %after_bb307.us ], [ %4534, %after_bb304.us ], [ %4534, %after_bb301.us ], [ %4534, %after_bb298.us ], [ %4534, %after_bb295.us ], [ %4534, %after_bb292.us ], [ %4534, %after_bb289.us ], [ %4534, %after_bb286.us ], [ %4534, %after_bb283.us ], [ %4534, %after_bb280.us ], [ %4534, %after_bb277.us ], [ %4534, %after_bb274.us ], [ %4534, %after_bb271.us ], [ %4534, %after_bb268.us ], [ %4534, %after_bb265.us ], [ %4534, %after_bb262.us ], [ %4534, %after_bb259.us ], [ %4534, %after_bb256.us ], [ %4534, %after_bb253.us ], [ %4534, %after_bb250.us ], [ %4534, %after_bb247.us ], [ %4534, %after_bb244.us ], [ %4534, %after_bb241.us ], [ %4534, %after_bb238.us ], [ %4534, %after_bb235.us ], [ %4534, %after_bb232.us ], [ %4534, %after_bb229.us ], [ %4534, %after_bb226.us ], [ %4534, %after_bb223.us ], [ %4534, %after_bb220.us ], [ %4534, %after_bb217.us ], [ %4534, %after_bb214.us ], [ %4534, %after_bb211.us ], [ %4534, %after_bb208.us ], [ %4534, %after_bb205.us ], [ %4534, %after_bb202.us ], [ %4534, %after_bb199.us ], [ %4534, %after_bb196.us ], [ %4534, %after_bb193.us ], [ %4534, %after_bb190.us ], [ %4534, %after_bb187.us ], [ %4534, %after_bb184.us ], [ %4534, %after_bb181.us ], [ %4534, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4871 = phi i8 [ %4539, %true_bb359.us ], [ %4539, %after_bb358.us ], [ %4539, %after_bb355.us ], [ %4539, %after_bb352.us ], [ %4539, %after_bb349.us ], [ %4539, %after_bb346.us ], [ %4539, %after_bb343.us ], [ %4539, %after_bb340.us ], [ %4539, %after_bb337.us ], [ %4539, %after_bb334.us ], [ %4539, %after_bb331.us ], [ %4539, %after_bb328.us ], [ %4539, %after_bb325.us ], [ %4539, %after_bb322.us ], [ %4539, %after_bb319.us ], [ %4539, %after_bb316.us ], [ %4539, %after_bb313.us ], [ %4539, %after_bb310.us ], [ %4539, %after_bb307.us ], [ %4539, %after_bb304.us ], [ %4539, %after_bb301.us ], [ %4539, %after_bb298.us ], [ %4539, %after_bb295.us ], [ %4539, %after_bb292.us ], [ %4539, %after_bb289.us ], [ %4539, %after_bb286.us ], [ %4539, %after_bb283.us ], [ %4539, %after_bb280.us ], [ %4539, %after_bb277.us ], [ %4539, %after_bb274.us ], [ %4539, %after_bb271.us ], [ %4539, %after_bb268.us ], [ %4539, %after_bb265.us ], [ %4539, %after_bb262.us ], [ %4539, %after_bb259.us ], [ %4539, %after_bb256.us ], [ %4539, %after_bb253.us ], [ %4539, %after_bb250.us ], [ %4539, %after_bb247.us ], [ %4539, %after_bb244.us ], [ %4539, %after_bb241.us ], [ %4539, %after_bb238.us ], [ %4539, %after_bb235.us ], [ %4539, %after_bb232.us ], [ %4539, %after_bb229.us ], [ %4539, %after_bb226.us ], [ %4539, %after_bb223.us ], [ %4539, %after_bb220.us ], [ %4539, %after_bb217.us ], [ %4539, %after_bb214.us ], [ %4539, %after_bb211.us ], [ %4539, %after_bb208.us ], [ %4539, %after_bb205.us ], [ %4539, %after_bb202.us ], [ %4539, %after_bb199.us ], [ %4539, %after_bb196.us ], [ %4539, %after_bb193.us ], [ %4539, %after_bb190.us ], [ %4539, %after_bb187.us ], [ %4539, %after_bb184.us ], [ %4539, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4872 = phi i8 [ %4549, %true_bb359.us ], [ %4549, %after_bb358.us ], [ %4549, %after_bb355.us ], [ %4549, %after_bb352.us ], [ %4549, %after_bb349.us ], [ %4549, %after_bb346.us ], [ %4549, %after_bb343.us ], [ %4549, %after_bb340.us ], [ %4549, %after_bb337.us ], [ %4549, %after_bb334.us ], [ %4549, %after_bb331.us ], [ %4549, %after_bb328.us ], [ %4549, %after_bb325.us ], [ %4549, %after_bb322.us ], [ %4549, %after_bb319.us ], [ %4549, %after_bb316.us ], [ %4549, %after_bb313.us ], [ %4549, %after_bb310.us ], [ %4549, %after_bb307.us ], [ %4549, %after_bb304.us ], [ %4549, %after_bb301.us ], [ %4549, %after_bb298.us ], [ %4549, %after_bb295.us ], [ %4549, %after_bb292.us ], [ %4549, %after_bb289.us ], [ %4549, %after_bb286.us ], [ %4549, %after_bb283.us ], [ %4549, %after_bb280.us ], [ %4549, %after_bb277.us ], [ %4549, %after_bb274.us ], [ %4549, %after_bb271.us ], [ %4549, %after_bb268.us ], [ %4549, %after_bb265.us ], [ %4549, %after_bb262.us ], [ %4549, %after_bb259.us ], [ %4549, %after_bb256.us ], [ %4549, %after_bb253.us ], [ %4549, %after_bb250.us ], [ %4549, %after_bb247.us ], [ %4549, %after_bb244.us ], [ %4549, %after_bb241.us ], [ %4549, %after_bb238.us ], [ %4549, %after_bb235.us ], [ %4549, %after_bb232.us ], [ %4549, %after_bb229.us ], [ %4549, %after_bb226.us ], [ %4549, %after_bb223.us ], [ %4549, %after_bb220.us ], [ %4549, %after_bb217.us ], [ %4549, %after_bb214.us ], [ %4549, %after_bb211.us ], [ %4549, %after_bb208.us ], [ %4549, %after_bb205.us ], [ %4549, %after_bb202.us ], [ %4549, %after_bb199.us ], [ %4549, %after_bb196.us ], [ %4549, %after_bb193.us ], [ %4549, %after_bb190.us ], [ %4549, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4873 = phi i8 [ %4559, %true_bb359.us ], [ %4559, %after_bb358.us ], [ %4559, %after_bb355.us ], [ %4559, %after_bb352.us ], [ %4559, %after_bb349.us ], [ %4559, %after_bb346.us ], [ %4559, %after_bb343.us ], [ %4559, %after_bb340.us ], [ %4559, %after_bb337.us ], [ %4559, %after_bb334.us ], [ %4559, %after_bb331.us ], [ %4559, %after_bb328.us ], [ %4559, %after_bb325.us ], [ %4559, %after_bb322.us ], [ %4559, %after_bb319.us ], [ %4559, %after_bb316.us ], [ %4559, %after_bb313.us ], [ %4559, %after_bb310.us ], [ %4559, %after_bb307.us ], [ %4559, %after_bb304.us ], [ %4559, %after_bb301.us ], [ %4559, %after_bb298.us ], [ %4559, %after_bb295.us ], [ %4559, %after_bb292.us ], [ %4559, %after_bb289.us ], [ %4559, %after_bb286.us ], [ %4559, %after_bb283.us ], [ %4559, %after_bb280.us ], [ %4559, %after_bb277.us ], [ %4559, %after_bb274.us ], [ %4559, %after_bb271.us ], [ %4559, %after_bb268.us ], [ %4559, %after_bb265.us ], [ %4559, %after_bb262.us ], [ %4559, %after_bb259.us ], [ %4559, %after_bb256.us ], [ %4559, %after_bb253.us ], [ %4559, %after_bb250.us ], [ %4559, %after_bb247.us ], [ %4559, %after_bb244.us ], [ %4559, %after_bb241.us ], [ %4559, %after_bb238.us ], [ %4559, %after_bb235.us ], [ %4559, %after_bb232.us ], [ %4559, %after_bb229.us ], [ %4559, %after_bb226.us ], [ %4559, %after_bb223.us ], [ %4559, %after_bb220.us ], [ %4559, %after_bb217.us ], [ %4559, %after_bb214.us ], [ %4559, %after_bb211.us ], [ %4559, %after_bb208.us ], [ %4559, %after_bb205.us ], [ %4559, %after_bb202.us ], [ %4559, %after_bb199.us ], [ %4559, %after_bb196.us ], [ %4559, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4874 = phi i8 [ %4569, %true_bb359.us ], [ %4569, %after_bb358.us ], [ %4569, %after_bb355.us ], [ %4569, %after_bb352.us ], [ %4569, %after_bb349.us ], [ %4569, %after_bb346.us ], [ %4569, %after_bb343.us ], [ %4569, %after_bb340.us ], [ %4569, %after_bb337.us ], [ %4569, %after_bb334.us ], [ %4569, %after_bb331.us ], [ %4569, %after_bb328.us ], [ %4569, %after_bb325.us ], [ %4569, %after_bb322.us ], [ %4569, %after_bb319.us ], [ %4569, %after_bb316.us ], [ %4569, %after_bb313.us ], [ %4569, %after_bb310.us ], [ %4569, %after_bb307.us ], [ %4569, %after_bb304.us ], [ %4569, %after_bb301.us ], [ %4569, %after_bb298.us ], [ %4569, %after_bb295.us ], [ %4569, %after_bb292.us ], [ %4569, %after_bb289.us ], [ %4569, %after_bb286.us ], [ %4569, %after_bb283.us ], [ %4569, %after_bb280.us ], [ %4569, %after_bb277.us ], [ %4569, %after_bb274.us ], [ %4569, %after_bb271.us ], [ %4569, %after_bb268.us ], [ %4569, %after_bb265.us ], [ %4569, %after_bb262.us ], [ %4569, %after_bb259.us ], [ %4569, %after_bb256.us ], [ %4569, %after_bb253.us ], [ %4569, %after_bb250.us ], [ %4569, %after_bb247.us ], [ %4569, %after_bb244.us ], [ %4569, %after_bb241.us ], [ %4569, %after_bb238.us ], [ %4569, %after_bb235.us ], [ %4569, %after_bb232.us ], [ %4569, %after_bb229.us ], [ %4569, %after_bb226.us ], [ %4569, %after_bb223.us ], [ %4569, %after_bb220.us ], [ %4569, %after_bb217.us ], [ %4569, %after_bb214.us ], [ %4569, %after_bb211.us ], [ %4569, %after_bb208.us ], [ %4569, %after_bb205.us ], [ %4569, %after_bb202.us ], [ %4569, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4875 = phi i8 [ %4579, %true_bb359.us ], [ %4579, %after_bb358.us ], [ %4579, %after_bb355.us ], [ %4579, %after_bb352.us ], [ %4579, %after_bb349.us ], [ %4579, %after_bb346.us ], [ %4579, %after_bb343.us ], [ %4579, %after_bb340.us ], [ %4579, %after_bb337.us ], [ %4579, %after_bb334.us ], [ %4579, %after_bb331.us ], [ %4579, %after_bb328.us ], [ %4579, %after_bb325.us ], [ %4579, %after_bb322.us ], [ %4579, %after_bb319.us ], [ %4579, %after_bb316.us ], [ %4579, %after_bb313.us ], [ %4579, %after_bb310.us ], [ %4579, %after_bb307.us ], [ %4579, %after_bb304.us ], [ %4579, %after_bb301.us ], [ %4579, %after_bb298.us ], [ %4579, %after_bb295.us ], [ %4579, %after_bb292.us ], [ %4579, %after_bb289.us ], [ %4579, %after_bb286.us ], [ %4579, %after_bb283.us ], [ %4579, %after_bb280.us ], [ %4579, %after_bb277.us ], [ %4579, %after_bb274.us ], [ %4579, %after_bb271.us ], [ %4579, %after_bb268.us ], [ %4579, %after_bb265.us ], [ %4579, %after_bb262.us ], [ %4579, %after_bb259.us ], [ %4579, %after_bb256.us ], [ %4579, %after_bb253.us ], [ %4579, %after_bb250.us ], [ %4579, %after_bb247.us ], [ %4579, %after_bb244.us ], [ %4579, %after_bb241.us ], [ %4579, %after_bb238.us ], [ %4579, %after_bb235.us ], [ %4579, %after_bb232.us ], [ %4579, %after_bb229.us ], [ %4579, %after_bb226.us ], [ %4579, %after_bb223.us ], [ %4579, %after_bb220.us ], [ %4579, %after_bb217.us ], [ %4579, %after_bb214.us ], [ %4579, %after_bb211.us ], [ %4579, %after_bb208.us ], [ %4579, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4876 = phi i8 [ %4589, %true_bb359.us ], [ %4589, %after_bb358.us ], [ %4589, %after_bb355.us ], [ %4589, %after_bb352.us ], [ %4589, %after_bb349.us ], [ %4589, %after_bb346.us ], [ %4589, %after_bb343.us ], [ %4589, %after_bb340.us ], [ %4589, %after_bb337.us ], [ %4589, %after_bb334.us ], [ %4589, %after_bb331.us ], [ %4589, %after_bb328.us ], [ %4589, %after_bb325.us ], [ %4589, %after_bb322.us ], [ %4589, %after_bb319.us ], [ %4589, %after_bb316.us ], [ %4589, %after_bb313.us ], [ %4589, %after_bb310.us ], [ %4589, %after_bb307.us ], [ %4589, %after_bb304.us ], [ %4589, %after_bb301.us ], [ %4589, %after_bb298.us ], [ %4589, %after_bb295.us ], [ %4589, %after_bb292.us ], [ %4589, %after_bb289.us ], [ %4589, %after_bb286.us ], [ %4589, %after_bb283.us ], [ %4589, %after_bb280.us ], [ %4589, %after_bb277.us ], [ %4589, %after_bb274.us ], [ %4589, %after_bb271.us ], [ %4589, %after_bb268.us ], [ %4589, %after_bb265.us ], [ %4589, %after_bb262.us ], [ %4589, %after_bb259.us ], [ %4589, %after_bb256.us ], [ %4589, %after_bb253.us ], [ %4589, %after_bb250.us ], [ %4589, %after_bb247.us ], [ %4589, %after_bb244.us ], [ %4589, %after_bb241.us ], [ %4589, %after_bb238.us ], [ %4589, %after_bb235.us ], [ %4589, %after_bb232.us ], [ %4589, %after_bb229.us ], [ %4589, %after_bb226.us ], [ %4589, %after_bb223.us ], [ %4589, %after_bb220.us ], [ %4589, %after_bb217.us ], [ %4589, %after_bb214.us ], [ %4589, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4877 = phi i8 [ %4599, %true_bb359.us ], [ %4599, %after_bb358.us ], [ %4599, %after_bb355.us ], [ %4599, %after_bb352.us ], [ %4599, %after_bb349.us ], [ %4599, %after_bb346.us ], [ %4599, %after_bb343.us ], [ %4599, %after_bb340.us ], [ %4599, %after_bb337.us ], [ %4599, %after_bb334.us ], [ %4599, %after_bb331.us ], [ %4599, %after_bb328.us ], [ %4599, %after_bb325.us ], [ %4599, %after_bb322.us ], [ %4599, %after_bb319.us ], [ %4599, %after_bb316.us ], [ %4599, %after_bb313.us ], [ %4599, %after_bb310.us ], [ %4599, %after_bb307.us ], [ %4599, %after_bb304.us ], [ %4599, %after_bb301.us ], [ %4599, %after_bb298.us ], [ %4599, %after_bb295.us ], [ %4599, %after_bb292.us ], [ %4599, %after_bb289.us ], [ %4599, %after_bb286.us ], [ %4599, %after_bb283.us ], [ %4599, %after_bb280.us ], [ %4599, %after_bb277.us ], [ %4599, %after_bb274.us ], [ %4599, %after_bb271.us ], [ %4599, %after_bb268.us ], [ %4599, %after_bb265.us ], [ %4599, %after_bb262.us ], [ %4599, %after_bb259.us ], [ %4599, %after_bb256.us ], [ %4599, %after_bb253.us ], [ %4599, %after_bb250.us ], [ %4599, %after_bb247.us ], [ %4599, %after_bb244.us ], [ %4599, %after_bb241.us ], [ %4599, %after_bb238.us ], [ %4599, %after_bb235.us ], [ %4599, %after_bb232.us ], [ %4599, %after_bb229.us ], [ %4599, %after_bb226.us ], [ %4599, %after_bb223.us ], [ %4599, %after_bb220.us ], [ %4599, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4878 = phi i8 [ %4609, %true_bb359.us ], [ %4609, %after_bb358.us ], [ %4609, %after_bb355.us ], [ %4609, %after_bb352.us ], [ %4609, %after_bb349.us ], [ %4609, %after_bb346.us ], [ %4609, %after_bb343.us ], [ %4609, %after_bb340.us ], [ %4609, %after_bb337.us ], [ %4609, %after_bb334.us ], [ %4609, %after_bb331.us ], [ %4609, %after_bb328.us ], [ %4609, %after_bb325.us ], [ %4609, %after_bb322.us ], [ %4609, %after_bb319.us ], [ %4609, %after_bb316.us ], [ %4609, %after_bb313.us ], [ %4609, %after_bb310.us ], [ %4609, %after_bb307.us ], [ %4609, %after_bb304.us ], [ %4609, %after_bb301.us ], [ %4609, %after_bb298.us ], [ %4609, %after_bb295.us ], [ %4609, %after_bb292.us ], [ %4609, %after_bb289.us ], [ %4609, %after_bb286.us ], [ %4609, %after_bb283.us ], [ %4609, %after_bb280.us ], [ %4609, %after_bb277.us ], [ %4609, %after_bb274.us ], [ %4609, %after_bb271.us ], [ %4609, %after_bb268.us ], [ %4609, %after_bb265.us ], [ %4609, %after_bb262.us ], [ %4609, %after_bb259.us ], [ %4609, %after_bb256.us ], [ %4609, %after_bb253.us ], [ %4609, %after_bb250.us ], [ %4609, %after_bb247.us ], [ %4609, %after_bb244.us ], [ %4609, %after_bb241.us ], [ %4609, %after_bb238.us ], [ %4609, %after_bb235.us ], [ %4609, %after_bb232.us ], [ %4609, %after_bb229.us ], [ %4609, %after_bb226.us ], [ %4609, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4879 = phi i8 [ %4619, %true_bb359.us ], [ %4619, %after_bb358.us ], [ %4619, %after_bb355.us ], [ %4619, %after_bb352.us ], [ %4619, %after_bb349.us ], [ %4619, %after_bb346.us ], [ %4619, %after_bb343.us ], [ %4619, %after_bb340.us ], [ %4619, %after_bb337.us ], [ %4619, %after_bb334.us ], [ %4619, %after_bb331.us ], [ %4619, %after_bb328.us ], [ %4619, %after_bb325.us ], [ %4619, %after_bb322.us ], [ %4619, %after_bb319.us ], [ %4619, %after_bb316.us ], [ %4619, %after_bb313.us ], [ %4619, %after_bb310.us ], [ %4619, %after_bb307.us ], [ %4619, %after_bb304.us ], [ %4619, %after_bb301.us ], [ %4619, %after_bb298.us ], [ %4619, %after_bb295.us ], [ %4619, %after_bb292.us ], [ %4619, %after_bb289.us ], [ %4619, %after_bb286.us ], [ %4619, %after_bb283.us ], [ %4619, %after_bb280.us ], [ %4619, %after_bb277.us ], [ %4619, %after_bb274.us ], [ %4619, %after_bb271.us ], [ %4619, %after_bb268.us ], [ %4619, %after_bb265.us ], [ %4619, %after_bb262.us ], [ %4619, %after_bb259.us ], [ %4619, %after_bb256.us ], [ %4619, %after_bb253.us ], [ %4619, %after_bb250.us ], [ %4619, %after_bb247.us ], [ %4619, %after_bb244.us ], [ %4619, %after_bb241.us ], [ %4619, %after_bb238.us ], [ %4619, %after_bb235.us ], [ %4619, %after_bb232.us ], [ %4619, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4880 = phi i8 [ %4629, %true_bb359.us ], [ %4629, %after_bb358.us ], [ %4629, %after_bb355.us ], [ %4629, %after_bb352.us ], [ %4629, %after_bb349.us ], [ %4629, %after_bb346.us ], [ %4629, %after_bb343.us ], [ %4629, %after_bb340.us ], [ %4629, %after_bb337.us ], [ %4629, %after_bb334.us ], [ %4629, %after_bb331.us ], [ %4629, %after_bb328.us ], [ %4629, %after_bb325.us ], [ %4629, %after_bb322.us ], [ %4629, %after_bb319.us ], [ %4629, %after_bb316.us ], [ %4629, %after_bb313.us ], [ %4629, %after_bb310.us ], [ %4629, %after_bb307.us ], [ %4629, %after_bb304.us ], [ %4629, %after_bb301.us ], [ %4629, %after_bb298.us ], [ %4629, %after_bb295.us ], [ %4629, %after_bb292.us ], [ %4629, %after_bb289.us ], [ %4629, %after_bb286.us ], [ %4629, %after_bb283.us ], [ %4629, %after_bb280.us ], [ %4629, %after_bb277.us ], [ %4629, %after_bb274.us ], [ %4629, %after_bb271.us ], [ %4629, %after_bb268.us ], [ %4629, %after_bb265.us ], [ %4629, %after_bb262.us ], [ %4629, %after_bb259.us ], [ %4629, %after_bb256.us ], [ %4629, %after_bb253.us ], [ %4629, %after_bb250.us ], [ %4629, %after_bb247.us ], [ %4629, %after_bb244.us ], [ %4629, %after_bb241.us ], [ %4629, %after_bb238.us ], [ %4629, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4881 = phi i8 [ %4639, %true_bb359.us ], [ %4639, %after_bb358.us ], [ %4639, %after_bb355.us ], [ %4639, %after_bb352.us ], [ %4639, %after_bb349.us ], [ %4639, %after_bb346.us ], [ %4639, %after_bb343.us ], [ %4639, %after_bb340.us ], [ %4639, %after_bb337.us ], [ %4639, %after_bb334.us ], [ %4639, %after_bb331.us ], [ %4639, %after_bb328.us ], [ %4639, %after_bb325.us ], [ %4639, %after_bb322.us ], [ %4639, %after_bb319.us ], [ %4639, %after_bb316.us ], [ %4639, %after_bb313.us ], [ %4639, %after_bb310.us ], [ %4639, %after_bb307.us ], [ %4639, %after_bb304.us ], [ %4639, %after_bb301.us ], [ %4639, %after_bb298.us ], [ %4639, %after_bb295.us ], [ %4639, %after_bb292.us ], [ %4639, %after_bb289.us ], [ %4639, %after_bb286.us ], [ %4639, %after_bb283.us ], [ %4639, %after_bb280.us ], [ %4639, %after_bb277.us ], [ %4639, %after_bb274.us ], [ %4639, %after_bb271.us ], [ %4639, %after_bb268.us ], [ %4639, %after_bb265.us ], [ %4639, %after_bb262.us ], [ %4639, %after_bb259.us ], [ %4639, %after_bb256.us ], [ %4639, %after_bb253.us ], [ %4639, %after_bb250.us ], [ %4639, %after_bb247.us ], [ %4639, %after_bb244.us ], [ %4639, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4882 = phi i8 [ %4649, %true_bb359.us ], [ %4649, %after_bb358.us ], [ %4649, %after_bb355.us ], [ %4649, %after_bb352.us ], [ %4649, %after_bb349.us ], [ %4649, %after_bb346.us ], [ %4649, %after_bb343.us ], [ %4649, %after_bb340.us ], [ %4649, %after_bb337.us ], [ %4649, %after_bb334.us ], [ %4649, %after_bb331.us ], [ %4649, %after_bb328.us ], [ %4649, %after_bb325.us ], [ %4649, %after_bb322.us ], [ %4649, %after_bb319.us ], [ %4649, %after_bb316.us ], [ %4649, %after_bb313.us ], [ %4649, %after_bb310.us ], [ %4649, %after_bb307.us ], [ %4649, %after_bb304.us ], [ %4649, %after_bb301.us ], [ %4649, %after_bb298.us ], [ %4649, %after_bb295.us ], [ %4649, %after_bb292.us ], [ %4649, %after_bb289.us ], [ %4649, %after_bb286.us ], [ %4649, %after_bb283.us ], [ %4649, %after_bb280.us ], [ %4649, %after_bb277.us ], [ %4649, %after_bb274.us ], [ %4649, %after_bb271.us ], [ %4649, %after_bb268.us ], [ %4649, %after_bb265.us ], [ %4649, %after_bb262.us ], [ %4649, %after_bb259.us ], [ %4649, %after_bb256.us ], [ %4649, %after_bb253.us ], [ %4649, %after_bb250.us ], [ %4649, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4883 = phi i8 [ %4659, %true_bb359.us ], [ %4659, %after_bb358.us ], [ %4659, %after_bb355.us ], [ %4659, %after_bb352.us ], [ %4659, %after_bb349.us ], [ %4659, %after_bb346.us ], [ %4659, %after_bb343.us ], [ %4659, %after_bb340.us ], [ %4659, %after_bb337.us ], [ %4659, %after_bb334.us ], [ %4659, %after_bb331.us ], [ %4659, %after_bb328.us ], [ %4659, %after_bb325.us ], [ %4659, %after_bb322.us ], [ %4659, %after_bb319.us ], [ %4659, %after_bb316.us ], [ %4659, %after_bb313.us ], [ %4659, %after_bb310.us ], [ %4659, %after_bb307.us ], [ %4659, %after_bb304.us ], [ %4659, %after_bb301.us ], [ %4659, %after_bb298.us ], [ %4659, %after_bb295.us ], [ %4659, %after_bb292.us ], [ %4659, %after_bb289.us ], [ %4659, %after_bb286.us ], [ %4659, %after_bb283.us ], [ %4659, %after_bb280.us ], [ %4659, %after_bb277.us ], [ %4659, %after_bb274.us ], [ %4659, %after_bb271.us ], [ %4659, %after_bb268.us ], [ %4659, %after_bb265.us ], [ %4659, %after_bb262.us ], [ %4659, %after_bb259.us ], [ %4659, %after_bb256.us ], [ %4659, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4884 = phi i8 [ %4669, %true_bb359.us ], [ %4669, %after_bb358.us ], [ %4669, %after_bb355.us ], [ %4669, %after_bb352.us ], [ %4669, %after_bb349.us ], [ %4669, %after_bb346.us ], [ %4669, %after_bb343.us ], [ %4669, %after_bb340.us ], [ %4669, %after_bb337.us ], [ %4669, %after_bb334.us ], [ %4669, %after_bb331.us ], [ %4669, %after_bb328.us ], [ %4669, %after_bb325.us ], [ %4669, %after_bb322.us ], [ %4669, %after_bb319.us ], [ %4669, %after_bb316.us ], [ %4669, %after_bb313.us ], [ %4669, %after_bb310.us ], [ %4669, %after_bb307.us ], [ %4669, %after_bb304.us ], [ %4669, %after_bb301.us ], [ %4669, %after_bb298.us ], [ %4669, %after_bb295.us ], [ %4669, %after_bb292.us ], [ %4669, %after_bb289.us ], [ %4669, %after_bb286.us ], [ %4669, %after_bb283.us ], [ %4669, %after_bb280.us ], [ %4669, %after_bb277.us ], [ %4669, %after_bb274.us ], [ %4669, %after_bb271.us ], [ %4669, %after_bb268.us ], [ %4669, %after_bb265.us ], [ %4669, %after_bb262.us ], [ %4669, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4885 = phi i8 [ %4679, %true_bb359.us ], [ %4679, %after_bb358.us ], [ %4679, %after_bb355.us ], [ %4679, %after_bb352.us ], [ %4679, %after_bb349.us ], [ %4679, %after_bb346.us ], [ %4679, %after_bb343.us ], [ %4679, %after_bb340.us ], [ %4679, %after_bb337.us ], [ %4679, %after_bb334.us ], [ %4679, %after_bb331.us ], [ %4679, %after_bb328.us ], [ %4679, %after_bb325.us ], [ %4679, %after_bb322.us ], [ %4679, %after_bb319.us ], [ %4679, %after_bb316.us ], [ %4679, %after_bb313.us ], [ %4679, %after_bb310.us ], [ %4679, %after_bb307.us ], [ %4679, %after_bb304.us ], [ %4679, %after_bb301.us ], [ %4679, %after_bb298.us ], [ %4679, %after_bb295.us ], [ %4679, %after_bb292.us ], [ %4679, %after_bb289.us ], [ %4679, %after_bb286.us ], [ %4679, %after_bb283.us ], [ %4679, %after_bb280.us ], [ %4679, %after_bb277.us ], [ %4679, %after_bb274.us ], [ %4679, %after_bb271.us ], [ %4679, %after_bb268.us ], [ %4679, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4886 = phi i8 [ %4689, %true_bb359.us ], [ %4689, %after_bb358.us ], [ %4689, %after_bb355.us ], [ %4689, %after_bb352.us ], [ %4689, %after_bb349.us ], [ %4689, %after_bb346.us ], [ %4689, %after_bb343.us ], [ %4689, %after_bb340.us ], [ %4689, %after_bb337.us ], [ %4689, %after_bb334.us ], [ %4689, %after_bb331.us ], [ %4689, %after_bb328.us ], [ %4689, %after_bb325.us ], [ %4689, %after_bb322.us ], [ %4689, %after_bb319.us ], [ %4689, %after_bb316.us ], [ %4689, %after_bb313.us ], [ %4689, %after_bb310.us ], [ %4689, %after_bb307.us ], [ %4689, %after_bb304.us ], [ %4689, %after_bb301.us ], [ %4689, %after_bb298.us ], [ %4689, %after_bb295.us ], [ %4689, %after_bb292.us ], [ %4689, %after_bb289.us ], [ %4689, %after_bb286.us ], [ %4689, %after_bb283.us ], [ %4689, %after_bb280.us ], [ %4689, %after_bb277.us ], [ %4689, %after_bb274.us ], [ %4689, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4887 = phi i8 [ %4699, %true_bb359.us ], [ %4699, %after_bb358.us ], [ %4699, %after_bb355.us ], [ %4699, %after_bb352.us ], [ %4699, %after_bb349.us ], [ %4699, %after_bb346.us ], [ %4699, %after_bb343.us ], [ %4699, %after_bb340.us ], [ %4699, %after_bb337.us ], [ %4699, %after_bb334.us ], [ %4699, %after_bb331.us ], [ %4699, %after_bb328.us ], [ %4699, %after_bb325.us ], [ %4699, %after_bb322.us ], [ %4699, %after_bb319.us ], [ %4699, %after_bb316.us ], [ %4699, %after_bb313.us ], [ %4699, %after_bb310.us ], [ %4699, %after_bb307.us ], [ %4699, %after_bb304.us ], [ %4699, %after_bb301.us ], [ %4699, %after_bb298.us ], [ %4699, %after_bb295.us ], [ %4699, %after_bb292.us ], [ %4699, %after_bb289.us ], [ %4699, %after_bb286.us ], [ %4699, %after_bb283.us ], [ %4699, %after_bb280.us ], [ %4699, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4888 = phi i8 [ %4709, %true_bb359.us ], [ %4709, %after_bb358.us ], [ %4709, %after_bb355.us ], [ %4709, %after_bb352.us ], [ %4709, %after_bb349.us ], [ %4709, %after_bb346.us ], [ %4709, %after_bb343.us ], [ %4709, %after_bb340.us ], [ %4709, %after_bb337.us ], [ %4709, %after_bb334.us ], [ %4709, %after_bb331.us ], [ %4709, %after_bb328.us ], [ %4709, %after_bb325.us ], [ %4709, %after_bb322.us ], [ %4709, %after_bb319.us ], [ %4709, %after_bb316.us ], [ %4709, %after_bb313.us ], [ %4709, %after_bb310.us ], [ %4709, %after_bb307.us ], [ %4709, %after_bb304.us ], [ %4709, %after_bb301.us ], [ %4709, %after_bb298.us ], [ %4709, %after_bb295.us ], [ %4709, %after_bb292.us ], [ %4709, %after_bb289.us ], [ %4709, %after_bb286.us ], [ %4709, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4889 = phi i8 [ %4719, %true_bb359.us ], [ %4719, %after_bb358.us ], [ %4719, %after_bb355.us ], [ %4719, %after_bb352.us ], [ %4719, %after_bb349.us ], [ %4719, %after_bb346.us ], [ %4719, %after_bb343.us ], [ %4719, %after_bb340.us ], [ %4719, %after_bb337.us ], [ %4719, %after_bb334.us ], [ %4719, %after_bb331.us ], [ %4719, %after_bb328.us ], [ %4719, %after_bb325.us ], [ %4719, %after_bb322.us ], [ %4719, %after_bb319.us ], [ %4719, %after_bb316.us ], [ %4719, %after_bb313.us ], [ %4719, %after_bb310.us ], [ %4719, %after_bb307.us ], [ %4719, %after_bb304.us ], [ %4719, %after_bb301.us ], [ %4719, %after_bb298.us ], [ %4719, %after_bb295.us ], [ %4719, %after_bb292.us ], [ %4719, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4890 = phi i8 [ %4729, %true_bb359.us ], [ %4729, %after_bb358.us ], [ %4729, %after_bb355.us ], [ %4729, %after_bb352.us ], [ %4729, %after_bb349.us ], [ %4729, %after_bb346.us ], [ %4729, %after_bb343.us ], [ %4729, %after_bb340.us ], [ %4729, %after_bb337.us ], [ %4729, %after_bb334.us ], [ %4729, %after_bb331.us ], [ %4729, %after_bb328.us ], [ %4729, %after_bb325.us ], [ %4729, %after_bb322.us ], [ %4729, %after_bb319.us ], [ %4729, %after_bb316.us ], [ %4729, %after_bb313.us ], [ %4729, %after_bb310.us ], [ %4729, %after_bb307.us ], [ %4729, %after_bb304.us ], [ %4729, %after_bb301.us ], [ %4729, %after_bb298.us ], [ %4729, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4891 = phi i8 [ %4739, %true_bb359.us ], [ %4739, %after_bb358.us ], [ %4739, %after_bb355.us ], [ %4739, %after_bb352.us ], [ %4739, %after_bb349.us ], [ %4739, %after_bb346.us ], [ %4739, %after_bb343.us ], [ %4739, %after_bb340.us ], [ %4739, %after_bb337.us ], [ %4739, %after_bb334.us ], [ %4739, %after_bb331.us ], [ %4739, %after_bb328.us ], [ %4739, %after_bb325.us ], [ %4739, %after_bb322.us ], [ %4739, %after_bb319.us ], [ %4739, %after_bb316.us ], [ %4739, %after_bb313.us ], [ %4739, %after_bb310.us ], [ %4739, %after_bb307.us ], [ %4739, %after_bb304.us ], [ %4739, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4892 = phi i8 [ %4749, %true_bb359.us ], [ %4749, %after_bb358.us ], [ %4749, %after_bb355.us ], [ %4749, %after_bb352.us ], [ %4749, %after_bb349.us ], [ %4749, %after_bb346.us ], [ %4749, %after_bb343.us ], [ %4749, %after_bb340.us ], [ %4749, %after_bb337.us ], [ %4749, %after_bb334.us ], [ %4749, %after_bb331.us ], [ %4749, %after_bb328.us ], [ %4749, %after_bb325.us ], [ %4749, %after_bb322.us ], [ %4749, %after_bb319.us ], [ %4749, %after_bb316.us ], [ %4749, %after_bb313.us ], [ %4749, %after_bb310.us ], [ %4749, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4893 = phi i8 [ %4759, %true_bb359.us ], [ %4759, %after_bb358.us ], [ %4759, %after_bb355.us ], [ %4759, %after_bb352.us ], [ %4759, %after_bb349.us ], [ %4759, %after_bb346.us ], [ %4759, %after_bb343.us ], [ %4759, %after_bb340.us ], [ %4759, %after_bb337.us ], [ %4759, %after_bb334.us ], [ %4759, %after_bb331.us ], [ %4759, %after_bb328.us ], [ %4759, %after_bb325.us ], [ %4759, %after_bb322.us ], [ %4759, %after_bb319.us ], [ %4759, %after_bb316.us ], [ %4759, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4894 = phi i8 [ %4769, %true_bb359.us ], [ %4769, %after_bb358.us ], [ %4769, %after_bb355.us ], [ %4769, %after_bb352.us ], [ %4769, %after_bb349.us ], [ %4769, %after_bb346.us ], [ %4769, %after_bb343.us ], [ %4769, %after_bb340.us ], [ %4769, %after_bb337.us ], [ %4769, %after_bb334.us ], [ %4769, %after_bb331.us ], [ %4769, %after_bb328.us ], [ %4769, %after_bb325.us ], [ %4769, %after_bb322.us ], [ %4769, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4895 = phi i8 [ %4779, %true_bb359.us ], [ %4779, %after_bb358.us ], [ %4779, %after_bb355.us ], [ %4779, %after_bb352.us ], [ %4779, %after_bb349.us ], [ %4779, %after_bb346.us ], [ %4779, %after_bb343.us ], [ %4779, %after_bb340.us ], [ %4779, %after_bb337.us ], [ %4779, %after_bb334.us ], [ %4779, %after_bb331.us ], [ %4779, %after_bb328.us ], [ %4779, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4896 = phi i8 [ %4789, %true_bb359.us ], [ %4789, %after_bb358.us ], [ %4789, %after_bb355.us ], [ %4789, %after_bb352.us ], [ %4789, %after_bb349.us ], [ %4789, %after_bb346.us ], [ %4789, %after_bb343.us ], [ %4789, %after_bb340.us ], [ %4789, %after_bb337.us ], [ %4789, %after_bb334.us ], [ %4789, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4897 = phi i8 [ %4799, %true_bb359.us ], [ %4799, %after_bb358.us ], [ %4799, %after_bb355.us ], [ %4799, %after_bb352.us ], [ %4799, %after_bb349.us ], [ %4799, %after_bb346.us ], [ %4799, %after_bb343.us ], [ %4799, %after_bb340.us ], [ %4799, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4898 = phi i8 [ %4809, %true_bb359.us ], [ %4809, %after_bb358.us ], [ %4809, %after_bb355.us ], [ %4809, %after_bb352.us ], [ %4809, %after_bb349.us ], [ %4809, %after_bb346.us ], [ %4809, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4899 = phi i8 [ %4819, %true_bb359.us ], [ %4819, %after_bb358.us ], [ %4819, %after_bb355.us ], [ %4819, %after_bb352.us ], [ %4819, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4900 = phi i8 [ %4829, %true_bb359.us ], [ %4829, %after_bb358.us ], [ %4829, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  %4901 = phi i8 [ %4839, %true_bb359.us ], [ 0, %after_bb358.us ], [ 0, %after_bb355.us ], [ 0, %after_bb352.us ], [ 0, %after_bb349.us ], [ 0, %after_bb346.us ], [ 0, %after_bb343.us ], [ 0, %after_bb340.us ], [ 0, %after_bb337.us ], [ 0, %after_bb334.us ], [ 0, %after_bb331.us ], [ 0, %after_bb328.us ], [ 0, %after_bb325.us ], [ 0, %after_bb322.us ], [ 0, %after_bb319.us ], [ 0, %after_bb316.us ], [ 0, %after_bb313.us ], [ 0, %after_bb310.us ], [ 0, %after_bb307.us ], [ 0, %after_bb304.us ], [ 0, %after_bb301.us ], [ 0, %after_bb298.us ], [ 0, %after_bb295.us ], [ 0, %after_bb292.us ], [ 0, %after_bb289.us ], [ 0, %after_bb286.us ], [ 0, %after_bb283.us ], [ 0, %after_bb280.us ], [ 0, %after_bb277.us ], [ 0, %after_bb274.us ], [ 0, %after_bb271.us ], [ 0, %after_bb268.us ], [ 0, %after_bb265.us ], [ 0, %after_bb262.us ], [ 0, %after_bb259.us ], [ 0, %after_bb256.us ], [ 0, %after_bb253.us ], [ 0, %after_bb250.us ], [ 0, %after_bb247.us ], [ 0, %after_bb244.us ], [ 0, %after_bb241.us ], [ 0, %after_bb238.us ], [ 0, %after_bb235.us ], [ 0, %after_bb232.us ], [ 0, %after_bb229.us ], [ 0, %after_bb226.us ], [ 0, %after_bb223.us ], [ 0, %after_bb220.us ], [ 0, %after_bb217.us ], [ 0, %after_bb214.us ], [ 0, %after_bb211.us ], [ 0, %after_bb208.us ], [ 0, %after_bb205.us ], [ 0, %after_bb202.us ], [ 0, %after_bb199.us ], [ 0, %after_bb196.us ], [ 0, %after_bb193.us ], [ 0, %after_bb190.us ], [ 0, %after_bb187.us ], [ 0, %after_bb184.us ], [ 0, %after_bb181.us ], [ 0, %after_bb178.us ], [ 0, %"for resampled_input.s0.x.rebased170.us" ]
  br i1 %t2398, label %true_bb362.us, label %after_bb364.us

true_bb362.us:                                    ; preds = %after_bb361.us
  %4902 = sdiv i32 63, %4370
  %4903 = and i32 %4902, %4374
  %4904 = add nsw i32 %4903, %4529
  %4905 = getelementptr inbounds i8, i8* %8, i32 %4904
  %4906 = load i8, i8* %4905, align 1, !tbaa !127
  br label %after_bb364.us

after_bb364.us:                                   ; preds = %true_bb362.us, %after_bb361.us
  %4907 = phi i8 [ %4906, %true_bb362.us ], [ 0, %after_bb361.us ]
  br i1 %t2399, label %after_bb367.us, label %after_bb556.us

after_bb367.us:                                   ; preds = %after_bb364.us
  %4908 = sdiv i32 64, %4370
  %4909 = and i32 %4908, %4374
  %4910 = add nsw i32 %4909, %4529
  %4911 = getelementptr inbounds i8, i8* %8, i32 %4910
  %4912 = load i8, i8* %4911, align 1, !tbaa !127
  br i1 %.not5141, label %after_bb556.us, label %after_bb370.us

after_bb370.us:                                   ; preds = %after_bb367.us
  %4913 = sdiv i32 65, %4370
  %4914 = and i32 %4913, %4374
  %4915 = add nsw i32 %4914, %4529
  %4916 = getelementptr inbounds i8, i8* %8, i32 %4915
  %4917 = load i8, i8* %4916, align 1, !tbaa !127
  br i1 %4406, label %after_bb373.us, label %after_bb556.us

after_bb373.us:                                   ; preds = %after_bb370.us
  %4918 = sdiv i32 66, %4370
  %4919 = and i32 %4918, %4374
  %4920 = add nsw i32 %4919, %4529
  %4921 = getelementptr inbounds i8, i8* %8, i32 %4920
  %4922 = load i8, i8* %4921, align 1, !tbaa !127
  br i1 %.not5142, label %after_bb556.us, label %after_bb376.us

after_bb376.us:                                   ; preds = %after_bb373.us
  %4923 = sdiv i32 67, %4370
  %4924 = and i32 %4923, %4374
  %4925 = add nsw i32 %4924, %4529
  %4926 = getelementptr inbounds i8, i8* %8, i32 %4925
  %4927 = load i8, i8* %4926, align 1, !tbaa !127
  br i1 %4407, label %after_bb379.us, label %after_bb556.us

after_bb379.us:                                   ; preds = %after_bb376.us
  %4928 = sdiv i32 68, %4370
  %4929 = and i32 %4928, %4374
  %4930 = add nsw i32 %4929, %4529
  %4931 = getelementptr inbounds i8, i8* %8, i32 %4930
  %4932 = load i8, i8* %4931, align 1, !tbaa !127
  br i1 %.not5143, label %after_bb556.us, label %after_bb382.us

after_bb382.us:                                   ; preds = %after_bb379.us
  %4933 = sdiv i32 69, %4370
  %4934 = and i32 %4933, %4374
  %4935 = add nsw i32 %4934, %4529
  %4936 = getelementptr inbounds i8, i8* %8, i32 %4935
  %4937 = load i8, i8* %4936, align 1, !tbaa !127
  br i1 %4408, label %after_bb385.us, label %after_bb556.us

after_bb385.us:                                   ; preds = %after_bb382.us
  %4938 = sdiv i32 70, %4370
  %4939 = and i32 %4938, %4374
  %4940 = add nsw i32 %4939, %4529
  %4941 = getelementptr inbounds i8, i8* %8, i32 %4940
  %4942 = load i8, i8* %4941, align 1, !tbaa !127
  br i1 %.not5144, label %after_bb556.us, label %after_bb388.us

after_bb388.us:                                   ; preds = %after_bb385.us
  %4943 = sdiv i32 71, %4370
  %4944 = and i32 %4943, %4374
  %4945 = add nsw i32 %4944, %4529
  %4946 = getelementptr inbounds i8, i8* %8, i32 %4945
  %4947 = load i8, i8* %4946, align 1, !tbaa !127
  br i1 %4409, label %after_bb391.us, label %after_bb556.us

after_bb391.us:                                   ; preds = %after_bb388.us
  %4948 = sdiv i32 72, %4370
  %4949 = and i32 %4948, %4374
  %4950 = add nsw i32 %4949, %4529
  %4951 = getelementptr inbounds i8, i8* %8, i32 %4950
  %4952 = load i8, i8* %4951, align 1, !tbaa !127
  br i1 %.not5145, label %after_bb556.us, label %after_bb394.us

after_bb394.us:                                   ; preds = %after_bb391.us
  %4953 = sdiv i32 73, %4370
  %4954 = and i32 %4953, %4374
  %4955 = add nsw i32 %4954, %4529
  %4956 = getelementptr inbounds i8, i8* %8, i32 %4955
  %4957 = load i8, i8* %4956, align 1, !tbaa !127
  br i1 %4410, label %after_bb397.us, label %after_bb556.us

after_bb397.us:                                   ; preds = %after_bb394.us
  %4958 = sdiv i32 74, %4370
  %4959 = and i32 %4958, %4374
  %4960 = add nsw i32 %4959, %4529
  %4961 = getelementptr inbounds i8, i8* %8, i32 %4960
  %4962 = load i8, i8* %4961, align 1, !tbaa !127
  br i1 %.not5146, label %after_bb556.us, label %after_bb400.us

after_bb400.us:                                   ; preds = %after_bb397.us
  %4963 = sdiv i32 75, %4370
  %4964 = and i32 %4963, %4374
  %4965 = add nsw i32 %4964, %4529
  %4966 = getelementptr inbounds i8, i8* %8, i32 %4965
  %4967 = load i8, i8* %4966, align 1, !tbaa !127
  br i1 %4411, label %after_bb403.us, label %after_bb556.us

after_bb403.us:                                   ; preds = %after_bb400.us
  %4968 = sdiv i32 76, %4370
  %4969 = and i32 %4968, %4374
  %4970 = add nsw i32 %4969, %4529
  %4971 = getelementptr inbounds i8, i8* %8, i32 %4970
  %4972 = load i8, i8* %4971, align 1, !tbaa !127
  br i1 %.not5147, label %after_bb556.us, label %after_bb406.us

after_bb406.us:                                   ; preds = %after_bb403.us
  %4973 = sdiv i32 77, %4370
  %4974 = and i32 %4973, %4374
  %4975 = add nsw i32 %4974, %4529
  %4976 = getelementptr inbounds i8, i8* %8, i32 %4975
  %4977 = load i8, i8* %4976, align 1, !tbaa !127
  br i1 %4412, label %after_bb409.us, label %after_bb556.us

after_bb409.us:                                   ; preds = %after_bb406.us
  %4978 = sdiv i32 78, %4370
  %4979 = and i32 %4978, %4374
  %4980 = add nsw i32 %4979, %4529
  %4981 = getelementptr inbounds i8, i8* %8, i32 %4980
  %4982 = load i8, i8* %4981, align 1, !tbaa !127
  br i1 %.not5148, label %after_bb556.us, label %after_bb412.us

after_bb412.us:                                   ; preds = %after_bb409.us
  %4983 = sdiv i32 79, %4370
  %4984 = and i32 %4983, %4374
  %4985 = add nsw i32 %4984, %4529
  %4986 = getelementptr inbounds i8, i8* %8, i32 %4985
  %4987 = load i8, i8* %4986, align 1, !tbaa !127
  br i1 %4413, label %after_bb415.us, label %after_bb556.us

after_bb415.us:                                   ; preds = %after_bb412.us
  %4988 = sdiv i32 80, %4370
  %4989 = and i32 %4988, %4374
  %4990 = add nsw i32 %4989, %4529
  %4991 = getelementptr inbounds i8, i8* %8, i32 %4990
  %4992 = load i8, i8* %4991, align 1, !tbaa !127
  br i1 %.not5149, label %after_bb556.us, label %after_bb418.us

after_bb418.us:                                   ; preds = %after_bb415.us
  %4993 = sdiv i32 81, %4370
  %4994 = and i32 %4993, %4374
  %4995 = add nsw i32 %4994, %4529
  %4996 = getelementptr inbounds i8, i8* %8, i32 %4995
  %4997 = load i8, i8* %4996, align 1, !tbaa !127
  br i1 %4414, label %after_bb421.us, label %after_bb556.us

after_bb421.us:                                   ; preds = %after_bb418.us
  %4998 = sdiv i32 82, %4370
  %4999 = and i32 %4998, %4374
  %5000 = add nsw i32 %4999, %4529
  %5001 = getelementptr inbounds i8, i8* %8, i32 %5000
  %5002 = load i8, i8* %5001, align 1, !tbaa !127
  br i1 %.not5150, label %after_bb556.us, label %after_bb424.us

after_bb424.us:                                   ; preds = %after_bb421.us
  %5003 = sdiv i32 83, %4370
  %5004 = and i32 %5003, %4374
  %5005 = add nsw i32 %5004, %4529
  %5006 = getelementptr inbounds i8, i8* %8, i32 %5005
  %5007 = load i8, i8* %5006, align 1, !tbaa !127
  br i1 %4415, label %after_bb427.us, label %after_bb556.us

after_bb427.us:                                   ; preds = %after_bb424.us
  %5008 = sdiv i32 84, %4370
  %5009 = and i32 %5008, %4374
  %5010 = add nsw i32 %5009, %4529
  %5011 = getelementptr inbounds i8, i8* %8, i32 %5010
  %5012 = load i8, i8* %5011, align 1, !tbaa !127
  br i1 %.not5151, label %after_bb556.us, label %after_bb430.us

after_bb430.us:                                   ; preds = %after_bb427.us
  %5013 = sdiv i32 85, %4370
  %5014 = and i32 %5013, %4374
  %5015 = add nsw i32 %5014, %4529
  %5016 = getelementptr inbounds i8, i8* %8, i32 %5015
  %5017 = load i8, i8* %5016, align 1, !tbaa !127
  br i1 %4416, label %after_bb433.us, label %after_bb556.us

after_bb433.us:                                   ; preds = %after_bb430.us
  %5018 = sdiv i32 86, %4370
  %5019 = and i32 %5018, %4374
  %5020 = add nsw i32 %5019, %4529
  %5021 = getelementptr inbounds i8, i8* %8, i32 %5020
  %5022 = load i8, i8* %5021, align 1, !tbaa !127
  br i1 %.not5152, label %after_bb556.us, label %after_bb436.us

after_bb436.us:                                   ; preds = %after_bb433.us
  %5023 = sdiv i32 87, %4370
  %5024 = and i32 %5023, %4374
  %5025 = add nsw i32 %5024, %4529
  %5026 = getelementptr inbounds i8, i8* %8, i32 %5025
  %5027 = load i8, i8* %5026, align 1, !tbaa !127
  br i1 %4417, label %after_bb439.us, label %after_bb556.us

after_bb439.us:                                   ; preds = %after_bb436.us
  %5028 = sdiv i32 88, %4370
  %5029 = and i32 %5028, %4374
  %5030 = add nsw i32 %5029, %4529
  %5031 = getelementptr inbounds i8, i8* %8, i32 %5030
  %5032 = load i8, i8* %5031, align 1, !tbaa !127
  br i1 %.not5153, label %after_bb556.us, label %after_bb442.us

after_bb442.us:                                   ; preds = %after_bb439.us
  %5033 = sdiv i32 89, %4370
  %5034 = and i32 %5033, %4374
  %5035 = add nsw i32 %5034, %4529
  %5036 = getelementptr inbounds i8, i8* %8, i32 %5035
  %5037 = load i8, i8* %5036, align 1, !tbaa !127
  br i1 %4418, label %after_bb445.us, label %after_bb556.us

after_bb445.us:                                   ; preds = %after_bb442.us
  %5038 = sdiv i32 90, %4370
  %5039 = and i32 %5038, %4374
  %5040 = add nsw i32 %5039, %4529
  %5041 = getelementptr inbounds i8, i8* %8, i32 %5040
  %5042 = load i8, i8* %5041, align 1, !tbaa !127
  br i1 %.not5154, label %after_bb556.us, label %after_bb448.us

after_bb448.us:                                   ; preds = %after_bb445.us
  %5043 = sdiv i32 91, %4370
  %5044 = and i32 %5043, %4374
  %5045 = add nsw i32 %5044, %4529
  %5046 = getelementptr inbounds i8, i8* %8, i32 %5045
  %5047 = load i8, i8* %5046, align 1, !tbaa !127
  br i1 %4419, label %after_bb451.us, label %after_bb556.us

after_bb451.us:                                   ; preds = %after_bb448.us
  %5048 = sdiv i32 92, %4370
  %5049 = and i32 %5048, %4374
  %5050 = add nsw i32 %5049, %4529
  %5051 = getelementptr inbounds i8, i8* %8, i32 %5050
  %5052 = load i8, i8* %5051, align 1, !tbaa !127
  br i1 %.not5155, label %after_bb556.us, label %after_bb454.us

after_bb454.us:                                   ; preds = %after_bb451.us
  %5053 = sdiv i32 93, %4370
  %5054 = and i32 %5053, %4374
  %5055 = add nsw i32 %5054, %4529
  %5056 = getelementptr inbounds i8, i8* %8, i32 %5055
  %5057 = load i8, i8* %5056, align 1, !tbaa !127
  br i1 %4420, label %after_bb457.us, label %after_bb556.us

after_bb457.us:                                   ; preds = %after_bb454.us
  %5058 = sdiv i32 94, %4370
  %5059 = and i32 %5058, %4374
  %5060 = add nsw i32 %5059, %4529
  %5061 = getelementptr inbounds i8, i8* %8, i32 %5060
  %5062 = load i8, i8* %5061, align 1, !tbaa !127
  br i1 %.not5156, label %after_bb556.us, label %after_bb460.us

after_bb460.us:                                   ; preds = %after_bb457.us
  %5063 = sdiv i32 95, %4370
  %5064 = and i32 %5063, %4374
  %5065 = add nsw i32 %5064, %4529
  %5066 = getelementptr inbounds i8, i8* %8, i32 %5065
  %5067 = load i8, i8* %5066, align 1, !tbaa !127
  br i1 %4421, label %after_bb463.us, label %after_bb556.us

after_bb463.us:                                   ; preds = %after_bb460.us
  %5068 = sdiv i32 96, %4370
  %5069 = and i32 %5068, %4374
  %5070 = add nsw i32 %5069, %4529
  %5071 = getelementptr inbounds i8, i8* %8, i32 %5070
  %5072 = load i8, i8* %5071, align 1, !tbaa !127
  br i1 %.not5157, label %after_bb556.us, label %after_bb466.us

after_bb466.us:                                   ; preds = %after_bb463.us
  %5073 = sdiv i32 97, %4370
  %5074 = and i32 %5073, %4374
  %5075 = add nsw i32 %5074, %4529
  %5076 = getelementptr inbounds i8, i8* %8, i32 %5075
  %5077 = load i8, i8* %5076, align 1, !tbaa !127
  br i1 %4422, label %after_bb469.us, label %after_bb556.us

after_bb469.us:                                   ; preds = %after_bb466.us
  %5078 = sdiv i32 98, %4370
  %5079 = and i32 %5078, %4374
  %5080 = add nsw i32 %5079, %4529
  %5081 = getelementptr inbounds i8, i8* %8, i32 %5080
  %5082 = load i8, i8* %5081, align 1, !tbaa !127
  br i1 %.not5158, label %after_bb556.us, label %after_bb472.us

after_bb472.us:                                   ; preds = %after_bb469.us
  %5083 = sdiv i32 99, %4370
  %5084 = and i32 %5083, %4374
  %5085 = add nsw i32 %5084, %4529
  %5086 = getelementptr inbounds i8, i8* %8, i32 %5085
  %5087 = load i8, i8* %5086, align 1, !tbaa !127
  br i1 %4423, label %after_bb475.us, label %after_bb556.us

after_bb475.us:                                   ; preds = %after_bb472.us
  %5088 = sdiv i32 100, %4370
  %5089 = and i32 %5088, %4374
  %5090 = add nsw i32 %5089, %4529
  %5091 = getelementptr inbounds i8, i8* %8, i32 %5090
  %5092 = load i8, i8* %5091, align 1, !tbaa !127
  br i1 %.not5159, label %after_bb556.us, label %after_bb478.us

after_bb478.us:                                   ; preds = %after_bb475.us
  %5093 = sdiv i32 101, %4370
  %5094 = and i32 %5093, %4374
  %5095 = add nsw i32 %5094, %4529
  %5096 = getelementptr inbounds i8, i8* %8, i32 %5095
  %5097 = load i8, i8* %5096, align 1, !tbaa !127
  br i1 %4424, label %after_bb481.us, label %after_bb556.us

after_bb481.us:                                   ; preds = %after_bb478.us
  %5098 = sdiv i32 102, %4370
  %5099 = and i32 %5098, %4374
  %5100 = add nsw i32 %5099, %4529
  %5101 = getelementptr inbounds i8, i8* %8, i32 %5100
  %5102 = load i8, i8* %5101, align 1, !tbaa !127
  br i1 %.not5160, label %after_bb556.us, label %after_bb484.us

after_bb484.us:                                   ; preds = %after_bb481.us
  %5103 = sdiv i32 103, %4370
  %5104 = and i32 %5103, %4374
  %5105 = add nsw i32 %5104, %4529
  %5106 = getelementptr inbounds i8, i8* %8, i32 %5105
  %5107 = load i8, i8* %5106, align 1, !tbaa !127
  br i1 %4425, label %after_bb487.us, label %after_bb556.us

after_bb487.us:                                   ; preds = %after_bb484.us
  %5108 = sdiv i32 104, %4370
  %5109 = and i32 %5108, %4374
  %5110 = add nsw i32 %5109, %4529
  %5111 = getelementptr inbounds i8, i8* %8, i32 %5110
  %5112 = load i8, i8* %5111, align 1, !tbaa !127
  br i1 %.not5161, label %after_bb556.us, label %after_bb490.us

after_bb490.us:                                   ; preds = %after_bb487.us
  %5113 = sdiv i32 105, %4370
  %5114 = and i32 %5113, %4374
  %5115 = add nsw i32 %5114, %4529
  %5116 = getelementptr inbounds i8, i8* %8, i32 %5115
  %5117 = load i8, i8* %5116, align 1, !tbaa !127
  br i1 %4426, label %after_bb493.us, label %after_bb556.us

after_bb493.us:                                   ; preds = %after_bb490.us
  %5118 = sdiv i32 106, %4370
  %5119 = and i32 %5118, %4374
  %5120 = add nsw i32 %5119, %4529
  %5121 = getelementptr inbounds i8, i8* %8, i32 %5120
  %5122 = load i8, i8* %5121, align 1, !tbaa !127
  br i1 %.not5162, label %after_bb556.us, label %after_bb496.us

after_bb496.us:                                   ; preds = %after_bb493.us
  %5123 = sdiv i32 107, %4370
  %5124 = and i32 %5123, %4374
  %5125 = add nsw i32 %5124, %4529
  %5126 = getelementptr inbounds i8, i8* %8, i32 %5125
  %5127 = load i8, i8* %5126, align 1, !tbaa !127
  br i1 %4427, label %after_bb499.us, label %after_bb556.us

after_bb499.us:                                   ; preds = %after_bb496.us
  %5128 = sdiv i32 108, %4370
  %5129 = and i32 %5128, %4374
  %5130 = add nsw i32 %5129, %4529
  %5131 = getelementptr inbounds i8, i8* %8, i32 %5130
  %5132 = load i8, i8* %5131, align 1, !tbaa !127
  br i1 %.not5163, label %after_bb556.us, label %after_bb502.us

after_bb502.us:                                   ; preds = %after_bb499.us
  %5133 = sdiv i32 109, %4370
  %5134 = and i32 %5133, %4374
  %5135 = add nsw i32 %5134, %4529
  %5136 = getelementptr inbounds i8, i8* %8, i32 %5135
  %5137 = load i8, i8* %5136, align 1, !tbaa !127
  br i1 %4428, label %after_bb505.us, label %after_bb556.us

after_bb505.us:                                   ; preds = %after_bb502.us
  %5138 = sdiv i32 110, %4370
  %5139 = and i32 %5138, %4374
  %5140 = add nsw i32 %5139, %4529
  %5141 = getelementptr inbounds i8, i8* %8, i32 %5140
  %5142 = load i8, i8* %5141, align 1, !tbaa !127
  br i1 %.not5164, label %after_bb556.us, label %after_bb508.us

after_bb508.us:                                   ; preds = %after_bb505.us
  %5143 = sdiv i32 111, %4370
  %5144 = and i32 %5143, %4374
  %5145 = add nsw i32 %5144, %4529
  %5146 = getelementptr inbounds i8, i8* %8, i32 %5145
  %5147 = load i8, i8* %5146, align 1, !tbaa !127
  br i1 %4429, label %after_bb511.us, label %after_bb556.us

after_bb511.us:                                   ; preds = %after_bb508.us
  %5148 = sdiv i32 112, %4370
  %5149 = and i32 %5148, %4374
  %5150 = add nsw i32 %5149, %4529
  %5151 = getelementptr inbounds i8, i8* %8, i32 %5150
  %5152 = load i8, i8* %5151, align 1, !tbaa !127
  br i1 %.not5165, label %after_bb556.us, label %after_bb514.us

after_bb514.us:                                   ; preds = %after_bb511.us
  %5153 = sdiv i32 113, %4370
  %5154 = and i32 %5153, %4374
  %5155 = add nsw i32 %5154, %4529
  %5156 = getelementptr inbounds i8, i8* %8, i32 %5155
  %5157 = load i8, i8* %5156, align 1, !tbaa !127
  br i1 %4430, label %after_bb517.us, label %after_bb556.us

after_bb517.us:                                   ; preds = %after_bb514.us
  %5158 = sdiv i32 114, %4370
  %5159 = and i32 %5158, %4374
  %5160 = add nsw i32 %5159, %4529
  %5161 = getelementptr inbounds i8, i8* %8, i32 %5160
  %5162 = load i8, i8* %5161, align 1, !tbaa !127
  br i1 %.not5166, label %after_bb556.us, label %after_bb520.us

after_bb520.us:                                   ; preds = %after_bb517.us
  %5163 = sdiv i32 115, %4370
  %5164 = and i32 %5163, %4374
  %5165 = add nsw i32 %5164, %4529
  %5166 = getelementptr inbounds i8, i8* %8, i32 %5165
  %5167 = load i8, i8* %5166, align 1, !tbaa !127
  br i1 %4431, label %after_bb523.us, label %after_bb556.us

after_bb523.us:                                   ; preds = %after_bb520.us
  %5168 = sdiv i32 116, %4370
  %5169 = and i32 %5168, %4374
  %5170 = add nsw i32 %5169, %4529
  %5171 = getelementptr inbounds i8, i8* %8, i32 %5170
  %5172 = load i8, i8* %5171, align 1, !tbaa !127
  br i1 %.not5167, label %after_bb556.us, label %after_bb526.us

after_bb526.us:                                   ; preds = %after_bb523.us
  %5173 = sdiv i32 117, %4370
  %5174 = and i32 %5173, %4374
  %5175 = add nsw i32 %5174, %4529
  %5176 = getelementptr inbounds i8, i8* %8, i32 %5175
  %5177 = load i8, i8* %5176, align 1, !tbaa !127
  br i1 %4432, label %after_bb529.us, label %after_bb556.us

after_bb529.us:                                   ; preds = %after_bb526.us
  %5178 = sdiv i32 118, %4370
  %5179 = and i32 %5178, %4374
  %5180 = add nsw i32 %5179, %4529
  %5181 = getelementptr inbounds i8, i8* %8, i32 %5180
  %5182 = load i8, i8* %5181, align 1, !tbaa !127
  br i1 %.not5168, label %after_bb556.us, label %after_bb532.us

after_bb532.us:                                   ; preds = %after_bb529.us
  %5183 = sdiv i32 119, %4370
  %5184 = and i32 %5183, %4374
  %5185 = add nsw i32 %5184, %4529
  %5186 = getelementptr inbounds i8, i8* %8, i32 %5185
  %5187 = load i8, i8* %5186, align 1, !tbaa !127
  br i1 %4433, label %after_bb535.us, label %after_bb556.us

after_bb535.us:                                   ; preds = %after_bb532.us
  %5188 = sdiv i32 120, %4370
  %5189 = and i32 %5188, %4374
  %5190 = add nsw i32 %5189, %4529
  %5191 = getelementptr inbounds i8, i8* %8, i32 %5190
  %5192 = load i8, i8* %5191, align 1, !tbaa !127
  br i1 %.not5169, label %after_bb556.us, label %after_bb538.us

after_bb538.us:                                   ; preds = %after_bb535.us
  %5193 = sdiv i32 121, %4370
  %5194 = and i32 %5193, %4374
  %5195 = add nsw i32 %5194, %4529
  %5196 = getelementptr inbounds i8, i8* %8, i32 %5195
  %5197 = load i8, i8* %5196, align 1, !tbaa !127
  br i1 %4434, label %after_bb541.us, label %after_bb556.us

after_bb541.us:                                   ; preds = %after_bb538.us
  %5198 = sdiv i32 122, %4370
  %5199 = and i32 %5198, %4374
  %5200 = add nsw i32 %5199, %4529
  %5201 = getelementptr inbounds i8, i8* %8, i32 %5200
  %5202 = load i8, i8* %5201, align 1, !tbaa !127
  br i1 %.not5170, label %after_bb556.us, label %after_bb544.us

after_bb544.us:                                   ; preds = %after_bb541.us
  %5203 = sdiv i32 123, %4370
  %5204 = and i32 %5203, %4374
  %5205 = add nsw i32 %5204, %4529
  %5206 = getelementptr inbounds i8, i8* %8, i32 %5205
  %5207 = load i8, i8* %5206, align 1, !tbaa !127
  br i1 %4435, label %after_bb547.us, label %after_bb556.us

after_bb547.us:                                   ; preds = %after_bb544.us
  %5208 = sdiv i32 124, %4370
  %5209 = and i32 %5208, %4374
  %5210 = add nsw i32 %5209, %4529
  %5211 = getelementptr inbounds i8, i8* %8, i32 %5210
  %5212 = load i8, i8* %5211, align 1, !tbaa !127
  br i1 %.not5171, label %after_bb556.us, label %after_bb550.us

after_bb550.us:                                   ; preds = %after_bb547.us
  %5213 = sdiv i32 125, %4370
  %5214 = and i32 %5213, %4374
  %5215 = add nsw i32 %5214, %4529
  %5216 = getelementptr inbounds i8, i8* %8, i32 %5215
  %5217 = load i8, i8* %5216, align 1, !tbaa !127
  br i1 %4436, label %true_bb551.us, label %after_bb556.us

true_bb551.us:                                    ; preds = %after_bb550.us
  %5218 = sdiv i32 126, %4370
  %5219 = and i32 %5218, %4374
  %5220 = add nsw i32 %5219, %4529
  %5221 = getelementptr inbounds i8, i8* %8, i32 %5220
  %5222 = load i8, i8* %5221, align 1, !tbaa !127
  br label %after_bb556.us

after_bb556.us:                                   ; preds = %true_bb551.us, %after_bb550.us, %after_bb547.us, %after_bb544.us, %after_bb541.us, %after_bb538.us, %after_bb535.us, %after_bb532.us, %after_bb529.us, %after_bb526.us, %after_bb523.us, %after_bb520.us, %after_bb517.us, %after_bb514.us, %after_bb511.us, %after_bb508.us, %after_bb505.us, %after_bb502.us, %after_bb499.us, %after_bb496.us, %after_bb493.us, %after_bb490.us, %after_bb487.us, %after_bb484.us, %after_bb481.us, %after_bb478.us, %after_bb475.us, %after_bb472.us, %after_bb469.us, %after_bb466.us, %after_bb463.us, %after_bb460.us, %after_bb457.us, %after_bb454.us, %after_bb451.us, %after_bb448.us, %after_bb445.us, %after_bb442.us, %after_bb439.us, %after_bb436.us, %after_bb433.us, %after_bb430.us, %after_bb427.us, %after_bb424.us, %after_bb421.us, %after_bb418.us, %after_bb415.us, %after_bb412.us, %after_bb409.us, %after_bb406.us, %after_bb403.us, %after_bb400.us, %after_bb397.us, %after_bb394.us, %after_bb391.us, %after_bb388.us, %after_bb385.us, %after_bb382.us, %after_bb379.us, %after_bb376.us, %after_bb373.us, %after_bb370.us, %after_bb367.us, %after_bb364.us
  %5223 = phi i8 [ %5217, %true_bb551.us ], [ %5217, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5224 = phi i8 [ %5207, %true_bb551.us ], [ %5207, %after_bb550.us ], [ %5207, %after_bb547.us ], [ %5207, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5225 = phi i8 [ %5197, %true_bb551.us ], [ %5197, %after_bb550.us ], [ %5197, %after_bb547.us ], [ %5197, %after_bb544.us ], [ %5197, %after_bb541.us ], [ %5197, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5226 = phi i8 [ %5187, %true_bb551.us ], [ %5187, %after_bb550.us ], [ %5187, %after_bb547.us ], [ %5187, %after_bb544.us ], [ %5187, %after_bb541.us ], [ %5187, %after_bb538.us ], [ %5187, %after_bb535.us ], [ %5187, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5227 = phi i8 [ %5177, %true_bb551.us ], [ %5177, %after_bb550.us ], [ %5177, %after_bb547.us ], [ %5177, %after_bb544.us ], [ %5177, %after_bb541.us ], [ %5177, %after_bb538.us ], [ %5177, %after_bb535.us ], [ %5177, %after_bb532.us ], [ %5177, %after_bb529.us ], [ %5177, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5228 = phi i8 [ %5167, %true_bb551.us ], [ %5167, %after_bb550.us ], [ %5167, %after_bb547.us ], [ %5167, %after_bb544.us ], [ %5167, %after_bb541.us ], [ %5167, %after_bb538.us ], [ %5167, %after_bb535.us ], [ %5167, %after_bb532.us ], [ %5167, %after_bb529.us ], [ %5167, %after_bb526.us ], [ %5167, %after_bb523.us ], [ %5167, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5229 = phi i8 [ %5157, %true_bb551.us ], [ %5157, %after_bb550.us ], [ %5157, %after_bb547.us ], [ %5157, %after_bb544.us ], [ %5157, %after_bb541.us ], [ %5157, %after_bb538.us ], [ %5157, %after_bb535.us ], [ %5157, %after_bb532.us ], [ %5157, %after_bb529.us ], [ %5157, %after_bb526.us ], [ %5157, %after_bb523.us ], [ %5157, %after_bb520.us ], [ %5157, %after_bb517.us ], [ %5157, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5230 = phi i8 [ %5147, %true_bb551.us ], [ %5147, %after_bb550.us ], [ %5147, %after_bb547.us ], [ %5147, %after_bb544.us ], [ %5147, %after_bb541.us ], [ %5147, %after_bb538.us ], [ %5147, %after_bb535.us ], [ %5147, %after_bb532.us ], [ %5147, %after_bb529.us ], [ %5147, %after_bb526.us ], [ %5147, %after_bb523.us ], [ %5147, %after_bb520.us ], [ %5147, %after_bb517.us ], [ %5147, %after_bb514.us ], [ %5147, %after_bb511.us ], [ %5147, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5231 = phi i8 [ %5137, %true_bb551.us ], [ %5137, %after_bb550.us ], [ %5137, %after_bb547.us ], [ %5137, %after_bb544.us ], [ %5137, %after_bb541.us ], [ %5137, %after_bb538.us ], [ %5137, %after_bb535.us ], [ %5137, %after_bb532.us ], [ %5137, %after_bb529.us ], [ %5137, %after_bb526.us ], [ %5137, %after_bb523.us ], [ %5137, %after_bb520.us ], [ %5137, %after_bb517.us ], [ %5137, %after_bb514.us ], [ %5137, %after_bb511.us ], [ %5137, %after_bb508.us ], [ %5137, %after_bb505.us ], [ %5137, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5232 = phi i8 [ %5127, %true_bb551.us ], [ %5127, %after_bb550.us ], [ %5127, %after_bb547.us ], [ %5127, %after_bb544.us ], [ %5127, %after_bb541.us ], [ %5127, %after_bb538.us ], [ %5127, %after_bb535.us ], [ %5127, %after_bb532.us ], [ %5127, %after_bb529.us ], [ %5127, %after_bb526.us ], [ %5127, %after_bb523.us ], [ %5127, %after_bb520.us ], [ %5127, %after_bb517.us ], [ %5127, %after_bb514.us ], [ %5127, %after_bb511.us ], [ %5127, %after_bb508.us ], [ %5127, %after_bb505.us ], [ %5127, %after_bb502.us ], [ %5127, %after_bb499.us ], [ %5127, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5233 = phi i8 [ %5117, %true_bb551.us ], [ %5117, %after_bb550.us ], [ %5117, %after_bb547.us ], [ %5117, %after_bb544.us ], [ %5117, %after_bb541.us ], [ %5117, %after_bb538.us ], [ %5117, %after_bb535.us ], [ %5117, %after_bb532.us ], [ %5117, %after_bb529.us ], [ %5117, %after_bb526.us ], [ %5117, %after_bb523.us ], [ %5117, %after_bb520.us ], [ %5117, %after_bb517.us ], [ %5117, %after_bb514.us ], [ %5117, %after_bb511.us ], [ %5117, %after_bb508.us ], [ %5117, %after_bb505.us ], [ %5117, %after_bb502.us ], [ %5117, %after_bb499.us ], [ %5117, %after_bb496.us ], [ %5117, %after_bb493.us ], [ %5117, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5234 = phi i8 [ %5107, %true_bb551.us ], [ %5107, %after_bb550.us ], [ %5107, %after_bb547.us ], [ %5107, %after_bb544.us ], [ %5107, %after_bb541.us ], [ %5107, %after_bb538.us ], [ %5107, %after_bb535.us ], [ %5107, %after_bb532.us ], [ %5107, %after_bb529.us ], [ %5107, %after_bb526.us ], [ %5107, %after_bb523.us ], [ %5107, %after_bb520.us ], [ %5107, %after_bb517.us ], [ %5107, %after_bb514.us ], [ %5107, %after_bb511.us ], [ %5107, %after_bb508.us ], [ %5107, %after_bb505.us ], [ %5107, %after_bb502.us ], [ %5107, %after_bb499.us ], [ %5107, %after_bb496.us ], [ %5107, %after_bb493.us ], [ %5107, %after_bb490.us ], [ %5107, %after_bb487.us ], [ %5107, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5235 = phi i8 [ %5097, %true_bb551.us ], [ %5097, %after_bb550.us ], [ %5097, %after_bb547.us ], [ %5097, %after_bb544.us ], [ %5097, %after_bb541.us ], [ %5097, %after_bb538.us ], [ %5097, %after_bb535.us ], [ %5097, %after_bb532.us ], [ %5097, %after_bb529.us ], [ %5097, %after_bb526.us ], [ %5097, %after_bb523.us ], [ %5097, %after_bb520.us ], [ %5097, %after_bb517.us ], [ %5097, %after_bb514.us ], [ %5097, %after_bb511.us ], [ %5097, %after_bb508.us ], [ %5097, %after_bb505.us ], [ %5097, %after_bb502.us ], [ %5097, %after_bb499.us ], [ %5097, %after_bb496.us ], [ %5097, %after_bb493.us ], [ %5097, %after_bb490.us ], [ %5097, %after_bb487.us ], [ %5097, %after_bb484.us ], [ %5097, %after_bb481.us ], [ %5097, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5236 = phi i8 [ %5087, %true_bb551.us ], [ %5087, %after_bb550.us ], [ %5087, %after_bb547.us ], [ %5087, %after_bb544.us ], [ %5087, %after_bb541.us ], [ %5087, %after_bb538.us ], [ %5087, %after_bb535.us ], [ %5087, %after_bb532.us ], [ %5087, %after_bb529.us ], [ %5087, %after_bb526.us ], [ %5087, %after_bb523.us ], [ %5087, %after_bb520.us ], [ %5087, %after_bb517.us ], [ %5087, %after_bb514.us ], [ %5087, %after_bb511.us ], [ %5087, %after_bb508.us ], [ %5087, %after_bb505.us ], [ %5087, %after_bb502.us ], [ %5087, %after_bb499.us ], [ %5087, %after_bb496.us ], [ %5087, %after_bb493.us ], [ %5087, %after_bb490.us ], [ %5087, %after_bb487.us ], [ %5087, %after_bb484.us ], [ %5087, %after_bb481.us ], [ %5087, %after_bb478.us ], [ %5087, %after_bb475.us ], [ %5087, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5237 = phi i8 [ %5077, %true_bb551.us ], [ %5077, %after_bb550.us ], [ %5077, %after_bb547.us ], [ %5077, %after_bb544.us ], [ %5077, %after_bb541.us ], [ %5077, %after_bb538.us ], [ %5077, %after_bb535.us ], [ %5077, %after_bb532.us ], [ %5077, %after_bb529.us ], [ %5077, %after_bb526.us ], [ %5077, %after_bb523.us ], [ %5077, %after_bb520.us ], [ %5077, %after_bb517.us ], [ %5077, %after_bb514.us ], [ %5077, %after_bb511.us ], [ %5077, %after_bb508.us ], [ %5077, %after_bb505.us ], [ %5077, %after_bb502.us ], [ %5077, %after_bb499.us ], [ %5077, %after_bb496.us ], [ %5077, %after_bb493.us ], [ %5077, %after_bb490.us ], [ %5077, %after_bb487.us ], [ %5077, %after_bb484.us ], [ %5077, %after_bb481.us ], [ %5077, %after_bb478.us ], [ %5077, %after_bb475.us ], [ %5077, %after_bb472.us ], [ %5077, %after_bb469.us ], [ %5077, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5238 = phi i8 [ %5067, %true_bb551.us ], [ %5067, %after_bb550.us ], [ %5067, %after_bb547.us ], [ %5067, %after_bb544.us ], [ %5067, %after_bb541.us ], [ %5067, %after_bb538.us ], [ %5067, %after_bb535.us ], [ %5067, %after_bb532.us ], [ %5067, %after_bb529.us ], [ %5067, %after_bb526.us ], [ %5067, %after_bb523.us ], [ %5067, %after_bb520.us ], [ %5067, %after_bb517.us ], [ %5067, %after_bb514.us ], [ %5067, %after_bb511.us ], [ %5067, %after_bb508.us ], [ %5067, %after_bb505.us ], [ %5067, %after_bb502.us ], [ %5067, %after_bb499.us ], [ %5067, %after_bb496.us ], [ %5067, %after_bb493.us ], [ %5067, %after_bb490.us ], [ %5067, %after_bb487.us ], [ %5067, %after_bb484.us ], [ %5067, %after_bb481.us ], [ %5067, %after_bb478.us ], [ %5067, %after_bb475.us ], [ %5067, %after_bb472.us ], [ %5067, %after_bb469.us ], [ %5067, %after_bb466.us ], [ %5067, %after_bb463.us ], [ %5067, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5239 = phi i8 [ %5057, %true_bb551.us ], [ %5057, %after_bb550.us ], [ %5057, %after_bb547.us ], [ %5057, %after_bb544.us ], [ %5057, %after_bb541.us ], [ %5057, %after_bb538.us ], [ %5057, %after_bb535.us ], [ %5057, %after_bb532.us ], [ %5057, %after_bb529.us ], [ %5057, %after_bb526.us ], [ %5057, %after_bb523.us ], [ %5057, %after_bb520.us ], [ %5057, %after_bb517.us ], [ %5057, %after_bb514.us ], [ %5057, %after_bb511.us ], [ %5057, %after_bb508.us ], [ %5057, %after_bb505.us ], [ %5057, %after_bb502.us ], [ %5057, %after_bb499.us ], [ %5057, %after_bb496.us ], [ %5057, %after_bb493.us ], [ %5057, %after_bb490.us ], [ %5057, %after_bb487.us ], [ %5057, %after_bb484.us ], [ %5057, %after_bb481.us ], [ %5057, %after_bb478.us ], [ %5057, %after_bb475.us ], [ %5057, %after_bb472.us ], [ %5057, %after_bb469.us ], [ %5057, %after_bb466.us ], [ %5057, %after_bb463.us ], [ %5057, %after_bb460.us ], [ %5057, %after_bb457.us ], [ %5057, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5240 = phi i8 [ %5047, %true_bb551.us ], [ %5047, %after_bb550.us ], [ %5047, %after_bb547.us ], [ %5047, %after_bb544.us ], [ %5047, %after_bb541.us ], [ %5047, %after_bb538.us ], [ %5047, %after_bb535.us ], [ %5047, %after_bb532.us ], [ %5047, %after_bb529.us ], [ %5047, %after_bb526.us ], [ %5047, %after_bb523.us ], [ %5047, %after_bb520.us ], [ %5047, %after_bb517.us ], [ %5047, %after_bb514.us ], [ %5047, %after_bb511.us ], [ %5047, %after_bb508.us ], [ %5047, %after_bb505.us ], [ %5047, %after_bb502.us ], [ %5047, %after_bb499.us ], [ %5047, %after_bb496.us ], [ %5047, %after_bb493.us ], [ %5047, %after_bb490.us ], [ %5047, %after_bb487.us ], [ %5047, %after_bb484.us ], [ %5047, %after_bb481.us ], [ %5047, %after_bb478.us ], [ %5047, %after_bb475.us ], [ %5047, %after_bb472.us ], [ %5047, %after_bb469.us ], [ %5047, %after_bb466.us ], [ %5047, %after_bb463.us ], [ %5047, %after_bb460.us ], [ %5047, %after_bb457.us ], [ %5047, %after_bb454.us ], [ %5047, %after_bb451.us ], [ %5047, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5241 = phi i8 [ %5037, %true_bb551.us ], [ %5037, %after_bb550.us ], [ %5037, %after_bb547.us ], [ %5037, %after_bb544.us ], [ %5037, %after_bb541.us ], [ %5037, %after_bb538.us ], [ %5037, %after_bb535.us ], [ %5037, %after_bb532.us ], [ %5037, %after_bb529.us ], [ %5037, %after_bb526.us ], [ %5037, %after_bb523.us ], [ %5037, %after_bb520.us ], [ %5037, %after_bb517.us ], [ %5037, %after_bb514.us ], [ %5037, %after_bb511.us ], [ %5037, %after_bb508.us ], [ %5037, %after_bb505.us ], [ %5037, %after_bb502.us ], [ %5037, %after_bb499.us ], [ %5037, %after_bb496.us ], [ %5037, %after_bb493.us ], [ %5037, %after_bb490.us ], [ %5037, %after_bb487.us ], [ %5037, %after_bb484.us ], [ %5037, %after_bb481.us ], [ %5037, %after_bb478.us ], [ %5037, %after_bb475.us ], [ %5037, %after_bb472.us ], [ %5037, %after_bb469.us ], [ %5037, %after_bb466.us ], [ %5037, %after_bb463.us ], [ %5037, %after_bb460.us ], [ %5037, %after_bb457.us ], [ %5037, %after_bb454.us ], [ %5037, %after_bb451.us ], [ %5037, %after_bb448.us ], [ %5037, %after_bb445.us ], [ %5037, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5242 = phi i8 [ %5027, %true_bb551.us ], [ %5027, %after_bb550.us ], [ %5027, %after_bb547.us ], [ %5027, %after_bb544.us ], [ %5027, %after_bb541.us ], [ %5027, %after_bb538.us ], [ %5027, %after_bb535.us ], [ %5027, %after_bb532.us ], [ %5027, %after_bb529.us ], [ %5027, %after_bb526.us ], [ %5027, %after_bb523.us ], [ %5027, %after_bb520.us ], [ %5027, %after_bb517.us ], [ %5027, %after_bb514.us ], [ %5027, %after_bb511.us ], [ %5027, %after_bb508.us ], [ %5027, %after_bb505.us ], [ %5027, %after_bb502.us ], [ %5027, %after_bb499.us ], [ %5027, %after_bb496.us ], [ %5027, %after_bb493.us ], [ %5027, %after_bb490.us ], [ %5027, %after_bb487.us ], [ %5027, %after_bb484.us ], [ %5027, %after_bb481.us ], [ %5027, %after_bb478.us ], [ %5027, %after_bb475.us ], [ %5027, %after_bb472.us ], [ %5027, %after_bb469.us ], [ %5027, %after_bb466.us ], [ %5027, %after_bb463.us ], [ %5027, %after_bb460.us ], [ %5027, %after_bb457.us ], [ %5027, %after_bb454.us ], [ %5027, %after_bb451.us ], [ %5027, %after_bb448.us ], [ %5027, %after_bb445.us ], [ %5027, %after_bb442.us ], [ %5027, %after_bb439.us ], [ %5027, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5243 = phi i8 [ %5017, %true_bb551.us ], [ %5017, %after_bb550.us ], [ %5017, %after_bb547.us ], [ %5017, %after_bb544.us ], [ %5017, %after_bb541.us ], [ %5017, %after_bb538.us ], [ %5017, %after_bb535.us ], [ %5017, %after_bb532.us ], [ %5017, %after_bb529.us ], [ %5017, %after_bb526.us ], [ %5017, %after_bb523.us ], [ %5017, %after_bb520.us ], [ %5017, %after_bb517.us ], [ %5017, %after_bb514.us ], [ %5017, %after_bb511.us ], [ %5017, %after_bb508.us ], [ %5017, %after_bb505.us ], [ %5017, %after_bb502.us ], [ %5017, %after_bb499.us ], [ %5017, %after_bb496.us ], [ %5017, %after_bb493.us ], [ %5017, %after_bb490.us ], [ %5017, %after_bb487.us ], [ %5017, %after_bb484.us ], [ %5017, %after_bb481.us ], [ %5017, %after_bb478.us ], [ %5017, %after_bb475.us ], [ %5017, %after_bb472.us ], [ %5017, %after_bb469.us ], [ %5017, %after_bb466.us ], [ %5017, %after_bb463.us ], [ %5017, %after_bb460.us ], [ %5017, %after_bb457.us ], [ %5017, %after_bb454.us ], [ %5017, %after_bb451.us ], [ %5017, %after_bb448.us ], [ %5017, %after_bb445.us ], [ %5017, %after_bb442.us ], [ %5017, %after_bb439.us ], [ %5017, %after_bb436.us ], [ %5017, %after_bb433.us ], [ %5017, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5244 = phi i8 [ %5007, %true_bb551.us ], [ %5007, %after_bb550.us ], [ %5007, %after_bb547.us ], [ %5007, %after_bb544.us ], [ %5007, %after_bb541.us ], [ %5007, %after_bb538.us ], [ %5007, %after_bb535.us ], [ %5007, %after_bb532.us ], [ %5007, %after_bb529.us ], [ %5007, %after_bb526.us ], [ %5007, %after_bb523.us ], [ %5007, %after_bb520.us ], [ %5007, %after_bb517.us ], [ %5007, %after_bb514.us ], [ %5007, %after_bb511.us ], [ %5007, %after_bb508.us ], [ %5007, %after_bb505.us ], [ %5007, %after_bb502.us ], [ %5007, %after_bb499.us ], [ %5007, %after_bb496.us ], [ %5007, %after_bb493.us ], [ %5007, %after_bb490.us ], [ %5007, %after_bb487.us ], [ %5007, %after_bb484.us ], [ %5007, %after_bb481.us ], [ %5007, %after_bb478.us ], [ %5007, %after_bb475.us ], [ %5007, %after_bb472.us ], [ %5007, %after_bb469.us ], [ %5007, %after_bb466.us ], [ %5007, %after_bb463.us ], [ %5007, %after_bb460.us ], [ %5007, %after_bb457.us ], [ %5007, %after_bb454.us ], [ %5007, %after_bb451.us ], [ %5007, %after_bb448.us ], [ %5007, %after_bb445.us ], [ %5007, %after_bb442.us ], [ %5007, %after_bb439.us ], [ %5007, %after_bb436.us ], [ %5007, %after_bb433.us ], [ %5007, %after_bb430.us ], [ %5007, %after_bb427.us ], [ %5007, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5245 = phi i8 [ %4997, %true_bb551.us ], [ %4997, %after_bb550.us ], [ %4997, %after_bb547.us ], [ %4997, %after_bb544.us ], [ %4997, %after_bb541.us ], [ %4997, %after_bb538.us ], [ %4997, %after_bb535.us ], [ %4997, %after_bb532.us ], [ %4997, %after_bb529.us ], [ %4997, %after_bb526.us ], [ %4997, %after_bb523.us ], [ %4997, %after_bb520.us ], [ %4997, %after_bb517.us ], [ %4997, %after_bb514.us ], [ %4997, %after_bb511.us ], [ %4997, %after_bb508.us ], [ %4997, %after_bb505.us ], [ %4997, %after_bb502.us ], [ %4997, %after_bb499.us ], [ %4997, %after_bb496.us ], [ %4997, %after_bb493.us ], [ %4997, %after_bb490.us ], [ %4997, %after_bb487.us ], [ %4997, %after_bb484.us ], [ %4997, %after_bb481.us ], [ %4997, %after_bb478.us ], [ %4997, %after_bb475.us ], [ %4997, %after_bb472.us ], [ %4997, %after_bb469.us ], [ %4997, %after_bb466.us ], [ %4997, %after_bb463.us ], [ %4997, %after_bb460.us ], [ %4997, %after_bb457.us ], [ %4997, %after_bb454.us ], [ %4997, %after_bb451.us ], [ %4997, %after_bb448.us ], [ %4997, %after_bb445.us ], [ %4997, %after_bb442.us ], [ %4997, %after_bb439.us ], [ %4997, %after_bb436.us ], [ %4997, %after_bb433.us ], [ %4997, %after_bb430.us ], [ %4997, %after_bb427.us ], [ %4997, %after_bb424.us ], [ %4997, %after_bb421.us ], [ %4997, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5246 = phi i8 [ %4987, %true_bb551.us ], [ %4987, %after_bb550.us ], [ %4987, %after_bb547.us ], [ %4987, %after_bb544.us ], [ %4987, %after_bb541.us ], [ %4987, %after_bb538.us ], [ %4987, %after_bb535.us ], [ %4987, %after_bb532.us ], [ %4987, %after_bb529.us ], [ %4987, %after_bb526.us ], [ %4987, %after_bb523.us ], [ %4987, %after_bb520.us ], [ %4987, %after_bb517.us ], [ %4987, %after_bb514.us ], [ %4987, %after_bb511.us ], [ %4987, %after_bb508.us ], [ %4987, %after_bb505.us ], [ %4987, %after_bb502.us ], [ %4987, %after_bb499.us ], [ %4987, %after_bb496.us ], [ %4987, %after_bb493.us ], [ %4987, %after_bb490.us ], [ %4987, %after_bb487.us ], [ %4987, %after_bb484.us ], [ %4987, %after_bb481.us ], [ %4987, %after_bb478.us ], [ %4987, %after_bb475.us ], [ %4987, %after_bb472.us ], [ %4987, %after_bb469.us ], [ %4987, %after_bb466.us ], [ %4987, %after_bb463.us ], [ %4987, %after_bb460.us ], [ %4987, %after_bb457.us ], [ %4987, %after_bb454.us ], [ %4987, %after_bb451.us ], [ %4987, %after_bb448.us ], [ %4987, %after_bb445.us ], [ %4987, %after_bb442.us ], [ %4987, %after_bb439.us ], [ %4987, %after_bb436.us ], [ %4987, %after_bb433.us ], [ %4987, %after_bb430.us ], [ %4987, %after_bb427.us ], [ %4987, %after_bb424.us ], [ %4987, %after_bb421.us ], [ %4987, %after_bb418.us ], [ %4987, %after_bb415.us ], [ %4987, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5247 = phi i8 [ %4977, %true_bb551.us ], [ %4977, %after_bb550.us ], [ %4977, %after_bb547.us ], [ %4977, %after_bb544.us ], [ %4977, %after_bb541.us ], [ %4977, %after_bb538.us ], [ %4977, %after_bb535.us ], [ %4977, %after_bb532.us ], [ %4977, %after_bb529.us ], [ %4977, %after_bb526.us ], [ %4977, %after_bb523.us ], [ %4977, %after_bb520.us ], [ %4977, %after_bb517.us ], [ %4977, %after_bb514.us ], [ %4977, %after_bb511.us ], [ %4977, %after_bb508.us ], [ %4977, %after_bb505.us ], [ %4977, %after_bb502.us ], [ %4977, %after_bb499.us ], [ %4977, %after_bb496.us ], [ %4977, %after_bb493.us ], [ %4977, %after_bb490.us ], [ %4977, %after_bb487.us ], [ %4977, %after_bb484.us ], [ %4977, %after_bb481.us ], [ %4977, %after_bb478.us ], [ %4977, %after_bb475.us ], [ %4977, %after_bb472.us ], [ %4977, %after_bb469.us ], [ %4977, %after_bb466.us ], [ %4977, %after_bb463.us ], [ %4977, %after_bb460.us ], [ %4977, %after_bb457.us ], [ %4977, %after_bb454.us ], [ %4977, %after_bb451.us ], [ %4977, %after_bb448.us ], [ %4977, %after_bb445.us ], [ %4977, %after_bb442.us ], [ %4977, %after_bb439.us ], [ %4977, %after_bb436.us ], [ %4977, %after_bb433.us ], [ %4977, %after_bb430.us ], [ %4977, %after_bb427.us ], [ %4977, %after_bb424.us ], [ %4977, %after_bb421.us ], [ %4977, %after_bb418.us ], [ %4977, %after_bb415.us ], [ %4977, %after_bb412.us ], [ %4977, %after_bb409.us ], [ %4977, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5248 = phi i8 [ %4967, %true_bb551.us ], [ %4967, %after_bb550.us ], [ %4967, %after_bb547.us ], [ %4967, %after_bb544.us ], [ %4967, %after_bb541.us ], [ %4967, %after_bb538.us ], [ %4967, %after_bb535.us ], [ %4967, %after_bb532.us ], [ %4967, %after_bb529.us ], [ %4967, %after_bb526.us ], [ %4967, %after_bb523.us ], [ %4967, %after_bb520.us ], [ %4967, %after_bb517.us ], [ %4967, %after_bb514.us ], [ %4967, %after_bb511.us ], [ %4967, %after_bb508.us ], [ %4967, %after_bb505.us ], [ %4967, %after_bb502.us ], [ %4967, %after_bb499.us ], [ %4967, %after_bb496.us ], [ %4967, %after_bb493.us ], [ %4967, %after_bb490.us ], [ %4967, %after_bb487.us ], [ %4967, %after_bb484.us ], [ %4967, %after_bb481.us ], [ %4967, %after_bb478.us ], [ %4967, %after_bb475.us ], [ %4967, %after_bb472.us ], [ %4967, %after_bb469.us ], [ %4967, %after_bb466.us ], [ %4967, %after_bb463.us ], [ %4967, %after_bb460.us ], [ %4967, %after_bb457.us ], [ %4967, %after_bb454.us ], [ %4967, %after_bb451.us ], [ %4967, %after_bb448.us ], [ %4967, %after_bb445.us ], [ %4967, %after_bb442.us ], [ %4967, %after_bb439.us ], [ %4967, %after_bb436.us ], [ %4967, %after_bb433.us ], [ %4967, %after_bb430.us ], [ %4967, %after_bb427.us ], [ %4967, %after_bb424.us ], [ %4967, %after_bb421.us ], [ %4967, %after_bb418.us ], [ %4967, %after_bb415.us ], [ %4967, %after_bb412.us ], [ %4967, %after_bb409.us ], [ %4967, %after_bb406.us ], [ %4967, %after_bb403.us ], [ %4967, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5249 = phi i8 [ %4957, %true_bb551.us ], [ %4957, %after_bb550.us ], [ %4957, %after_bb547.us ], [ %4957, %after_bb544.us ], [ %4957, %after_bb541.us ], [ %4957, %after_bb538.us ], [ %4957, %after_bb535.us ], [ %4957, %after_bb532.us ], [ %4957, %after_bb529.us ], [ %4957, %after_bb526.us ], [ %4957, %after_bb523.us ], [ %4957, %after_bb520.us ], [ %4957, %after_bb517.us ], [ %4957, %after_bb514.us ], [ %4957, %after_bb511.us ], [ %4957, %after_bb508.us ], [ %4957, %after_bb505.us ], [ %4957, %after_bb502.us ], [ %4957, %after_bb499.us ], [ %4957, %after_bb496.us ], [ %4957, %after_bb493.us ], [ %4957, %after_bb490.us ], [ %4957, %after_bb487.us ], [ %4957, %after_bb484.us ], [ %4957, %after_bb481.us ], [ %4957, %after_bb478.us ], [ %4957, %after_bb475.us ], [ %4957, %after_bb472.us ], [ %4957, %after_bb469.us ], [ %4957, %after_bb466.us ], [ %4957, %after_bb463.us ], [ %4957, %after_bb460.us ], [ %4957, %after_bb457.us ], [ %4957, %after_bb454.us ], [ %4957, %after_bb451.us ], [ %4957, %after_bb448.us ], [ %4957, %after_bb445.us ], [ %4957, %after_bb442.us ], [ %4957, %after_bb439.us ], [ %4957, %after_bb436.us ], [ %4957, %after_bb433.us ], [ %4957, %after_bb430.us ], [ %4957, %after_bb427.us ], [ %4957, %after_bb424.us ], [ %4957, %after_bb421.us ], [ %4957, %after_bb418.us ], [ %4957, %after_bb415.us ], [ %4957, %after_bb412.us ], [ %4957, %after_bb409.us ], [ %4957, %after_bb406.us ], [ %4957, %after_bb403.us ], [ %4957, %after_bb400.us ], [ %4957, %after_bb397.us ], [ %4957, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5250 = phi i8 [ %4947, %true_bb551.us ], [ %4947, %after_bb550.us ], [ %4947, %after_bb547.us ], [ %4947, %after_bb544.us ], [ %4947, %after_bb541.us ], [ %4947, %after_bb538.us ], [ %4947, %after_bb535.us ], [ %4947, %after_bb532.us ], [ %4947, %after_bb529.us ], [ %4947, %after_bb526.us ], [ %4947, %after_bb523.us ], [ %4947, %after_bb520.us ], [ %4947, %after_bb517.us ], [ %4947, %after_bb514.us ], [ %4947, %after_bb511.us ], [ %4947, %after_bb508.us ], [ %4947, %after_bb505.us ], [ %4947, %after_bb502.us ], [ %4947, %after_bb499.us ], [ %4947, %after_bb496.us ], [ %4947, %after_bb493.us ], [ %4947, %after_bb490.us ], [ %4947, %after_bb487.us ], [ %4947, %after_bb484.us ], [ %4947, %after_bb481.us ], [ %4947, %after_bb478.us ], [ %4947, %after_bb475.us ], [ %4947, %after_bb472.us ], [ %4947, %after_bb469.us ], [ %4947, %after_bb466.us ], [ %4947, %after_bb463.us ], [ %4947, %after_bb460.us ], [ %4947, %after_bb457.us ], [ %4947, %after_bb454.us ], [ %4947, %after_bb451.us ], [ %4947, %after_bb448.us ], [ %4947, %after_bb445.us ], [ %4947, %after_bb442.us ], [ %4947, %after_bb439.us ], [ %4947, %after_bb436.us ], [ %4947, %after_bb433.us ], [ %4947, %after_bb430.us ], [ %4947, %after_bb427.us ], [ %4947, %after_bb424.us ], [ %4947, %after_bb421.us ], [ %4947, %after_bb418.us ], [ %4947, %after_bb415.us ], [ %4947, %after_bb412.us ], [ %4947, %after_bb409.us ], [ %4947, %after_bb406.us ], [ %4947, %after_bb403.us ], [ %4947, %after_bb400.us ], [ %4947, %after_bb397.us ], [ %4947, %after_bb394.us ], [ %4947, %after_bb391.us ], [ %4947, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5251 = phi i8 [ %4937, %true_bb551.us ], [ %4937, %after_bb550.us ], [ %4937, %after_bb547.us ], [ %4937, %after_bb544.us ], [ %4937, %after_bb541.us ], [ %4937, %after_bb538.us ], [ %4937, %after_bb535.us ], [ %4937, %after_bb532.us ], [ %4937, %after_bb529.us ], [ %4937, %after_bb526.us ], [ %4937, %after_bb523.us ], [ %4937, %after_bb520.us ], [ %4937, %after_bb517.us ], [ %4937, %after_bb514.us ], [ %4937, %after_bb511.us ], [ %4937, %after_bb508.us ], [ %4937, %after_bb505.us ], [ %4937, %after_bb502.us ], [ %4937, %after_bb499.us ], [ %4937, %after_bb496.us ], [ %4937, %after_bb493.us ], [ %4937, %after_bb490.us ], [ %4937, %after_bb487.us ], [ %4937, %after_bb484.us ], [ %4937, %after_bb481.us ], [ %4937, %after_bb478.us ], [ %4937, %after_bb475.us ], [ %4937, %after_bb472.us ], [ %4937, %after_bb469.us ], [ %4937, %after_bb466.us ], [ %4937, %after_bb463.us ], [ %4937, %after_bb460.us ], [ %4937, %after_bb457.us ], [ %4937, %after_bb454.us ], [ %4937, %after_bb451.us ], [ %4937, %after_bb448.us ], [ %4937, %after_bb445.us ], [ %4937, %after_bb442.us ], [ %4937, %after_bb439.us ], [ %4937, %after_bb436.us ], [ %4937, %after_bb433.us ], [ %4937, %after_bb430.us ], [ %4937, %after_bb427.us ], [ %4937, %after_bb424.us ], [ %4937, %after_bb421.us ], [ %4937, %after_bb418.us ], [ %4937, %after_bb415.us ], [ %4937, %after_bb412.us ], [ %4937, %after_bb409.us ], [ %4937, %after_bb406.us ], [ %4937, %after_bb403.us ], [ %4937, %after_bb400.us ], [ %4937, %after_bb397.us ], [ %4937, %after_bb394.us ], [ %4937, %after_bb391.us ], [ %4937, %after_bb388.us ], [ %4937, %after_bb385.us ], [ %4937, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5252 = phi i8 [ %4927, %true_bb551.us ], [ %4927, %after_bb550.us ], [ %4927, %after_bb547.us ], [ %4927, %after_bb544.us ], [ %4927, %after_bb541.us ], [ %4927, %after_bb538.us ], [ %4927, %after_bb535.us ], [ %4927, %after_bb532.us ], [ %4927, %after_bb529.us ], [ %4927, %after_bb526.us ], [ %4927, %after_bb523.us ], [ %4927, %after_bb520.us ], [ %4927, %after_bb517.us ], [ %4927, %after_bb514.us ], [ %4927, %after_bb511.us ], [ %4927, %after_bb508.us ], [ %4927, %after_bb505.us ], [ %4927, %after_bb502.us ], [ %4927, %after_bb499.us ], [ %4927, %after_bb496.us ], [ %4927, %after_bb493.us ], [ %4927, %after_bb490.us ], [ %4927, %after_bb487.us ], [ %4927, %after_bb484.us ], [ %4927, %after_bb481.us ], [ %4927, %after_bb478.us ], [ %4927, %after_bb475.us ], [ %4927, %after_bb472.us ], [ %4927, %after_bb469.us ], [ %4927, %after_bb466.us ], [ %4927, %after_bb463.us ], [ %4927, %after_bb460.us ], [ %4927, %after_bb457.us ], [ %4927, %after_bb454.us ], [ %4927, %after_bb451.us ], [ %4927, %after_bb448.us ], [ %4927, %after_bb445.us ], [ %4927, %after_bb442.us ], [ %4927, %after_bb439.us ], [ %4927, %after_bb436.us ], [ %4927, %after_bb433.us ], [ %4927, %after_bb430.us ], [ %4927, %after_bb427.us ], [ %4927, %after_bb424.us ], [ %4927, %after_bb421.us ], [ %4927, %after_bb418.us ], [ %4927, %after_bb415.us ], [ %4927, %after_bb412.us ], [ %4927, %after_bb409.us ], [ %4927, %after_bb406.us ], [ %4927, %after_bb403.us ], [ %4927, %after_bb400.us ], [ %4927, %after_bb397.us ], [ %4927, %after_bb394.us ], [ %4927, %after_bb391.us ], [ %4927, %after_bb388.us ], [ %4927, %after_bb385.us ], [ %4927, %after_bb382.us ], [ %4927, %after_bb379.us ], [ %4927, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5253 = phi i8 [ %4917, %true_bb551.us ], [ %4917, %after_bb550.us ], [ %4917, %after_bb547.us ], [ %4917, %after_bb544.us ], [ %4917, %after_bb541.us ], [ %4917, %after_bb538.us ], [ %4917, %after_bb535.us ], [ %4917, %after_bb532.us ], [ %4917, %after_bb529.us ], [ %4917, %after_bb526.us ], [ %4917, %after_bb523.us ], [ %4917, %after_bb520.us ], [ %4917, %after_bb517.us ], [ %4917, %after_bb514.us ], [ %4917, %after_bb511.us ], [ %4917, %after_bb508.us ], [ %4917, %after_bb505.us ], [ %4917, %after_bb502.us ], [ %4917, %after_bb499.us ], [ %4917, %after_bb496.us ], [ %4917, %after_bb493.us ], [ %4917, %after_bb490.us ], [ %4917, %after_bb487.us ], [ %4917, %after_bb484.us ], [ %4917, %after_bb481.us ], [ %4917, %after_bb478.us ], [ %4917, %after_bb475.us ], [ %4917, %after_bb472.us ], [ %4917, %after_bb469.us ], [ %4917, %after_bb466.us ], [ %4917, %after_bb463.us ], [ %4917, %after_bb460.us ], [ %4917, %after_bb457.us ], [ %4917, %after_bb454.us ], [ %4917, %after_bb451.us ], [ %4917, %after_bb448.us ], [ %4917, %after_bb445.us ], [ %4917, %after_bb442.us ], [ %4917, %after_bb439.us ], [ %4917, %after_bb436.us ], [ %4917, %after_bb433.us ], [ %4917, %after_bb430.us ], [ %4917, %after_bb427.us ], [ %4917, %after_bb424.us ], [ %4917, %after_bb421.us ], [ %4917, %after_bb418.us ], [ %4917, %after_bb415.us ], [ %4917, %after_bb412.us ], [ %4917, %after_bb409.us ], [ %4917, %after_bb406.us ], [ %4917, %after_bb403.us ], [ %4917, %after_bb400.us ], [ %4917, %after_bb397.us ], [ %4917, %after_bb394.us ], [ %4917, %after_bb391.us ], [ %4917, %after_bb388.us ], [ %4917, %after_bb385.us ], [ %4917, %after_bb382.us ], [ %4917, %after_bb379.us ], [ %4917, %after_bb376.us ], [ %4917, %after_bb373.us ], [ %4917, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5254 = phi i8 [ %4912, %true_bb551.us ], [ %4912, %after_bb550.us ], [ %4912, %after_bb547.us ], [ %4912, %after_bb544.us ], [ %4912, %after_bb541.us ], [ %4912, %after_bb538.us ], [ %4912, %after_bb535.us ], [ %4912, %after_bb532.us ], [ %4912, %after_bb529.us ], [ %4912, %after_bb526.us ], [ %4912, %after_bb523.us ], [ %4912, %after_bb520.us ], [ %4912, %after_bb517.us ], [ %4912, %after_bb514.us ], [ %4912, %after_bb511.us ], [ %4912, %after_bb508.us ], [ %4912, %after_bb505.us ], [ %4912, %after_bb502.us ], [ %4912, %after_bb499.us ], [ %4912, %after_bb496.us ], [ %4912, %after_bb493.us ], [ %4912, %after_bb490.us ], [ %4912, %after_bb487.us ], [ %4912, %after_bb484.us ], [ %4912, %after_bb481.us ], [ %4912, %after_bb478.us ], [ %4912, %after_bb475.us ], [ %4912, %after_bb472.us ], [ %4912, %after_bb469.us ], [ %4912, %after_bb466.us ], [ %4912, %after_bb463.us ], [ %4912, %after_bb460.us ], [ %4912, %after_bb457.us ], [ %4912, %after_bb454.us ], [ %4912, %after_bb451.us ], [ %4912, %after_bb448.us ], [ %4912, %after_bb445.us ], [ %4912, %after_bb442.us ], [ %4912, %after_bb439.us ], [ %4912, %after_bb436.us ], [ %4912, %after_bb433.us ], [ %4912, %after_bb430.us ], [ %4912, %after_bb427.us ], [ %4912, %after_bb424.us ], [ %4912, %after_bb421.us ], [ %4912, %after_bb418.us ], [ %4912, %after_bb415.us ], [ %4912, %after_bb412.us ], [ %4912, %after_bb409.us ], [ %4912, %after_bb406.us ], [ %4912, %after_bb403.us ], [ %4912, %after_bb400.us ], [ %4912, %after_bb397.us ], [ %4912, %after_bb394.us ], [ %4912, %after_bb391.us ], [ %4912, %after_bb388.us ], [ %4912, %after_bb385.us ], [ %4912, %after_bb382.us ], [ %4912, %after_bb379.us ], [ %4912, %after_bb376.us ], [ %4912, %after_bb373.us ], [ %4912, %after_bb370.us ], [ %4912, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5255 = phi i8 [ %4922, %true_bb551.us ], [ %4922, %after_bb550.us ], [ %4922, %after_bb547.us ], [ %4922, %after_bb544.us ], [ %4922, %after_bb541.us ], [ %4922, %after_bb538.us ], [ %4922, %after_bb535.us ], [ %4922, %after_bb532.us ], [ %4922, %after_bb529.us ], [ %4922, %after_bb526.us ], [ %4922, %after_bb523.us ], [ %4922, %after_bb520.us ], [ %4922, %after_bb517.us ], [ %4922, %after_bb514.us ], [ %4922, %after_bb511.us ], [ %4922, %after_bb508.us ], [ %4922, %after_bb505.us ], [ %4922, %after_bb502.us ], [ %4922, %after_bb499.us ], [ %4922, %after_bb496.us ], [ %4922, %after_bb493.us ], [ %4922, %after_bb490.us ], [ %4922, %after_bb487.us ], [ %4922, %after_bb484.us ], [ %4922, %after_bb481.us ], [ %4922, %after_bb478.us ], [ %4922, %after_bb475.us ], [ %4922, %after_bb472.us ], [ %4922, %after_bb469.us ], [ %4922, %after_bb466.us ], [ %4922, %after_bb463.us ], [ %4922, %after_bb460.us ], [ %4922, %after_bb457.us ], [ %4922, %after_bb454.us ], [ %4922, %after_bb451.us ], [ %4922, %after_bb448.us ], [ %4922, %after_bb445.us ], [ %4922, %after_bb442.us ], [ %4922, %after_bb439.us ], [ %4922, %after_bb436.us ], [ %4922, %after_bb433.us ], [ %4922, %after_bb430.us ], [ %4922, %after_bb427.us ], [ %4922, %after_bb424.us ], [ %4922, %after_bb421.us ], [ %4922, %after_bb418.us ], [ %4922, %after_bb415.us ], [ %4922, %after_bb412.us ], [ %4922, %after_bb409.us ], [ %4922, %after_bb406.us ], [ %4922, %after_bb403.us ], [ %4922, %after_bb400.us ], [ %4922, %after_bb397.us ], [ %4922, %after_bb394.us ], [ %4922, %after_bb391.us ], [ %4922, %after_bb388.us ], [ %4922, %after_bb385.us ], [ %4922, %after_bb382.us ], [ %4922, %after_bb379.us ], [ %4922, %after_bb376.us ], [ %4922, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5256 = phi i8 [ %4932, %true_bb551.us ], [ %4932, %after_bb550.us ], [ %4932, %after_bb547.us ], [ %4932, %after_bb544.us ], [ %4932, %after_bb541.us ], [ %4932, %after_bb538.us ], [ %4932, %after_bb535.us ], [ %4932, %after_bb532.us ], [ %4932, %after_bb529.us ], [ %4932, %after_bb526.us ], [ %4932, %after_bb523.us ], [ %4932, %after_bb520.us ], [ %4932, %after_bb517.us ], [ %4932, %after_bb514.us ], [ %4932, %after_bb511.us ], [ %4932, %after_bb508.us ], [ %4932, %after_bb505.us ], [ %4932, %after_bb502.us ], [ %4932, %after_bb499.us ], [ %4932, %after_bb496.us ], [ %4932, %after_bb493.us ], [ %4932, %after_bb490.us ], [ %4932, %after_bb487.us ], [ %4932, %after_bb484.us ], [ %4932, %after_bb481.us ], [ %4932, %after_bb478.us ], [ %4932, %after_bb475.us ], [ %4932, %after_bb472.us ], [ %4932, %after_bb469.us ], [ %4932, %after_bb466.us ], [ %4932, %after_bb463.us ], [ %4932, %after_bb460.us ], [ %4932, %after_bb457.us ], [ %4932, %after_bb454.us ], [ %4932, %after_bb451.us ], [ %4932, %after_bb448.us ], [ %4932, %after_bb445.us ], [ %4932, %after_bb442.us ], [ %4932, %after_bb439.us ], [ %4932, %after_bb436.us ], [ %4932, %after_bb433.us ], [ %4932, %after_bb430.us ], [ %4932, %after_bb427.us ], [ %4932, %after_bb424.us ], [ %4932, %after_bb421.us ], [ %4932, %after_bb418.us ], [ %4932, %after_bb415.us ], [ %4932, %after_bb412.us ], [ %4932, %after_bb409.us ], [ %4932, %after_bb406.us ], [ %4932, %after_bb403.us ], [ %4932, %after_bb400.us ], [ %4932, %after_bb397.us ], [ %4932, %after_bb394.us ], [ %4932, %after_bb391.us ], [ %4932, %after_bb388.us ], [ %4932, %after_bb385.us ], [ %4932, %after_bb382.us ], [ %4932, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5257 = phi i8 [ %4942, %true_bb551.us ], [ %4942, %after_bb550.us ], [ %4942, %after_bb547.us ], [ %4942, %after_bb544.us ], [ %4942, %after_bb541.us ], [ %4942, %after_bb538.us ], [ %4942, %after_bb535.us ], [ %4942, %after_bb532.us ], [ %4942, %after_bb529.us ], [ %4942, %after_bb526.us ], [ %4942, %after_bb523.us ], [ %4942, %after_bb520.us ], [ %4942, %after_bb517.us ], [ %4942, %after_bb514.us ], [ %4942, %after_bb511.us ], [ %4942, %after_bb508.us ], [ %4942, %after_bb505.us ], [ %4942, %after_bb502.us ], [ %4942, %after_bb499.us ], [ %4942, %after_bb496.us ], [ %4942, %after_bb493.us ], [ %4942, %after_bb490.us ], [ %4942, %after_bb487.us ], [ %4942, %after_bb484.us ], [ %4942, %after_bb481.us ], [ %4942, %after_bb478.us ], [ %4942, %after_bb475.us ], [ %4942, %after_bb472.us ], [ %4942, %after_bb469.us ], [ %4942, %after_bb466.us ], [ %4942, %after_bb463.us ], [ %4942, %after_bb460.us ], [ %4942, %after_bb457.us ], [ %4942, %after_bb454.us ], [ %4942, %after_bb451.us ], [ %4942, %after_bb448.us ], [ %4942, %after_bb445.us ], [ %4942, %after_bb442.us ], [ %4942, %after_bb439.us ], [ %4942, %after_bb436.us ], [ %4942, %after_bb433.us ], [ %4942, %after_bb430.us ], [ %4942, %after_bb427.us ], [ %4942, %after_bb424.us ], [ %4942, %after_bb421.us ], [ %4942, %after_bb418.us ], [ %4942, %after_bb415.us ], [ %4942, %after_bb412.us ], [ %4942, %after_bb409.us ], [ %4942, %after_bb406.us ], [ %4942, %after_bb403.us ], [ %4942, %after_bb400.us ], [ %4942, %after_bb397.us ], [ %4942, %after_bb394.us ], [ %4942, %after_bb391.us ], [ %4942, %after_bb388.us ], [ %4942, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5258 = phi i8 [ %4952, %true_bb551.us ], [ %4952, %after_bb550.us ], [ %4952, %after_bb547.us ], [ %4952, %after_bb544.us ], [ %4952, %after_bb541.us ], [ %4952, %after_bb538.us ], [ %4952, %after_bb535.us ], [ %4952, %after_bb532.us ], [ %4952, %after_bb529.us ], [ %4952, %after_bb526.us ], [ %4952, %after_bb523.us ], [ %4952, %after_bb520.us ], [ %4952, %after_bb517.us ], [ %4952, %after_bb514.us ], [ %4952, %after_bb511.us ], [ %4952, %after_bb508.us ], [ %4952, %after_bb505.us ], [ %4952, %after_bb502.us ], [ %4952, %after_bb499.us ], [ %4952, %after_bb496.us ], [ %4952, %after_bb493.us ], [ %4952, %after_bb490.us ], [ %4952, %after_bb487.us ], [ %4952, %after_bb484.us ], [ %4952, %after_bb481.us ], [ %4952, %after_bb478.us ], [ %4952, %after_bb475.us ], [ %4952, %after_bb472.us ], [ %4952, %after_bb469.us ], [ %4952, %after_bb466.us ], [ %4952, %after_bb463.us ], [ %4952, %after_bb460.us ], [ %4952, %after_bb457.us ], [ %4952, %after_bb454.us ], [ %4952, %after_bb451.us ], [ %4952, %after_bb448.us ], [ %4952, %after_bb445.us ], [ %4952, %after_bb442.us ], [ %4952, %after_bb439.us ], [ %4952, %after_bb436.us ], [ %4952, %after_bb433.us ], [ %4952, %after_bb430.us ], [ %4952, %after_bb427.us ], [ %4952, %after_bb424.us ], [ %4952, %after_bb421.us ], [ %4952, %after_bb418.us ], [ %4952, %after_bb415.us ], [ %4952, %after_bb412.us ], [ %4952, %after_bb409.us ], [ %4952, %after_bb406.us ], [ %4952, %after_bb403.us ], [ %4952, %after_bb400.us ], [ %4952, %after_bb397.us ], [ %4952, %after_bb394.us ], [ %4952, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5259 = phi i8 [ %4962, %true_bb551.us ], [ %4962, %after_bb550.us ], [ %4962, %after_bb547.us ], [ %4962, %after_bb544.us ], [ %4962, %after_bb541.us ], [ %4962, %after_bb538.us ], [ %4962, %after_bb535.us ], [ %4962, %after_bb532.us ], [ %4962, %after_bb529.us ], [ %4962, %after_bb526.us ], [ %4962, %after_bb523.us ], [ %4962, %after_bb520.us ], [ %4962, %after_bb517.us ], [ %4962, %after_bb514.us ], [ %4962, %after_bb511.us ], [ %4962, %after_bb508.us ], [ %4962, %after_bb505.us ], [ %4962, %after_bb502.us ], [ %4962, %after_bb499.us ], [ %4962, %after_bb496.us ], [ %4962, %after_bb493.us ], [ %4962, %after_bb490.us ], [ %4962, %after_bb487.us ], [ %4962, %after_bb484.us ], [ %4962, %after_bb481.us ], [ %4962, %after_bb478.us ], [ %4962, %after_bb475.us ], [ %4962, %after_bb472.us ], [ %4962, %after_bb469.us ], [ %4962, %after_bb466.us ], [ %4962, %after_bb463.us ], [ %4962, %after_bb460.us ], [ %4962, %after_bb457.us ], [ %4962, %after_bb454.us ], [ %4962, %after_bb451.us ], [ %4962, %after_bb448.us ], [ %4962, %after_bb445.us ], [ %4962, %after_bb442.us ], [ %4962, %after_bb439.us ], [ %4962, %after_bb436.us ], [ %4962, %after_bb433.us ], [ %4962, %after_bb430.us ], [ %4962, %after_bb427.us ], [ %4962, %after_bb424.us ], [ %4962, %after_bb421.us ], [ %4962, %after_bb418.us ], [ %4962, %after_bb415.us ], [ %4962, %after_bb412.us ], [ %4962, %after_bb409.us ], [ %4962, %after_bb406.us ], [ %4962, %after_bb403.us ], [ %4962, %after_bb400.us ], [ %4962, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5260 = phi i8 [ %4972, %true_bb551.us ], [ %4972, %after_bb550.us ], [ %4972, %after_bb547.us ], [ %4972, %after_bb544.us ], [ %4972, %after_bb541.us ], [ %4972, %after_bb538.us ], [ %4972, %after_bb535.us ], [ %4972, %after_bb532.us ], [ %4972, %after_bb529.us ], [ %4972, %after_bb526.us ], [ %4972, %after_bb523.us ], [ %4972, %after_bb520.us ], [ %4972, %after_bb517.us ], [ %4972, %after_bb514.us ], [ %4972, %after_bb511.us ], [ %4972, %after_bb508.us ], [ %4972, %after_bb505.us ], [ %4972, %after_bb502.us ], [ %4972, %after_bb499.us ], [ %4972, %after_bb496.us ], [ %4972, %after_bb493.us ], [ %4972, %after_bb490.us ], [ %4972, %after_bb487.us ], [ %4972, %after_bb484.us ], [ %4972, %after_bb481.us ], [ %4972, %after_bb478.us ], [ %4972, %after_bb475.us ], [ %4972, %after_bb472.us ], [ %4972, %after_bb469.us ], [ %4972, %after_bb466.us ], [ %4972, %after_bb463.us ], [ %4972, %after_bb460.us ], [ %4972, %after_bb457.us ], [ %4972, %after_bb454.us ], [ %4972, %after_bb451.us ], [ %4972, %after_bb448.us ], [ %4972, %after_bb445.us ], [ %4972, %after_bb442.us ], [ %4972, %after_bb439.us ], [ %4972, %after_bb436.us ], [ %4972, %after_bb433.us ], [ %4972, %after_bb430.us ], [ %4972, %after_bb427.us ], [ %4972, %after_bb424.us ], [ %4972, %after_bb421.us ], [ %4972, %after_bb418.us ], [ %4972, %after_bb415.us ], [ %4972, %after_bb412.us ], [ %4972, %after_bb409.us ], [ %4972, %after_bb406.us ], [ %4972, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5261 = phi i8 [ %4982, %true_bb551.us ], [ %4982, %after_bb550.us ], [ %4982, %after_bb547.us ], [ %4982, %after_bb544.us ], [ %4982, %after_bb541.us ], [ %4982, %after_bb538.us ], [ %4982, %after_bb535.us ], [ %4982, %after_bb532.us ], [ %4982, %after_bb529.us ], [ %4982, %after_bb526.us ], [ %4982, %after_bb523.us ], [ %4982, %after_bb520.us ], [ %4982, %after_bb517.us ], [ %4982, %after_bb514.us ], [ %4982, %after_bb511.us ], [ %4982, %after_bb508.us ], [ %4982, %after_bb505.us ], [ %4982, %after_bb502.us ], [ %4982, %after_bb499.us ], [ %4982, %after_bb496.us ], [ %4982, %after_bb493.us ], [ %4982, %after_bb490.us ], [ %4982, %after_bb487.us ], [ %4982, %after_bb484.us ], [ %4982, %after_bb481.us ], [ %4982, %after_bb478.us ], [ %4982, %after_bb475.us ], [ %4982, %after_bb472.us ], [ %4982, %after_bb469.us ], [ %4982, %after_bb466.us ], [ %4982, %after_bb463.us ], [ %4982, %after_bb460.us ], [ %4982, %after_bb457.us ], [ %4982, %after_bb454.us ], [ %4982, %after_bb451.us ], [ %4982, %after_bb448.us ], [ %4982, %after_bb445.us ], [ %4982, %after_bb442.us ], [ %4982, %after_bb439.us ], [ %4982, %after_bb436.us ], [ %4982, %after_bb433.us ], [ %4982, %after_bb430.us ], [ %4982, %after_bb427.us ], [ %4982, %after_bb424.us ], [ %4982, %after_bb421.us ], [ %4982, %after_bb418.us ], [ %4982, %after_bb415.us ], [ %4982, %after_bb412.us ], [ %4982, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5262 = phi i8 [ %4992, %true_bb551.us ], [ %4992, %after_bb550.us ], [ %4992, %after_bb547.us ], [ %4992, %after_bb544.us ], [ %4992, %after_bb541.us ], [ %4992, %after_bb538.us ], [ %4992, %after_bb535.us ], [ %4992, %after_bb532.us ], [ %4992, %after_bb529.us ], [ %4992, %after_bb526.us ], [ %4992, %after_bb523.us ], [ %4992, %after_bb520.us ], [ %4992, %after_bb517.us ], [ %4992, %after_bb514.us ], [ %4992, %after_bb511.us ], [ %4992, %after_bb508.us ], [ %4992, %after_bb505.us ], [ %4992, %after_bb502.us ], [ %4992, %after_bb499.us ], [ %4992, %after_bb496.us ], [ %4992, %after_bb493.us ], [ %4992, %after_bb490.us ], [ %4992, %after_bb487.us ], [ %4992, %after_bb484.us ], [ %4992, %after_bb481.us ], [ %4992, %after_bb478.us ], [ %4992, %after_bb475.us ], [ %4992, %after_bb472.us ], [ %4992, %after_bb469.us ], [ %4992, %after_bb466.us ], [ %4992, %after_bb463.us ], [ %4992, %after_bb460.us ], [ %4992, %after_bb457.us ], [ %4992, %after_bb454.us ], [ %4992, %after_bb451.us ], [ %4992, %after_bb448.us ], [ %4992, %after_bb445.us ], [ %4992, %after_bb442.us ], [ %4992, %after_bb439.us ], [ %4992, %after_bb436.us ], [ %4992, %after_bb433.us ], [ %4992, %after_bb430.us ], [ %4992, %after_bb427.us ], [ %4992, %after_bb424.us ], [ %4992, %after_bb421.us ], [ %4992, %after_bb418.us ], [ %4992, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5263 = phi i8 [ %5002, %true_bb551.us ], [ %5002, %after_bb550.us ], [ %5002, %after_bb547.us ], [ %5002, %after_bb544.us ], [ %5002, %after_bb541.us ], [ %5002, %after_bb538.us ], [ %5002, %after_bb535.us ], [ %5002, %after_bb532.us ], [ %5002, %after_bb529.us ], [ %5002, %after_bb526.us ], [ %5002, %after_bb523.us ], [ %5002, %after_bb520.us ], [ %5002, %after_bb517.us ], [ %5002, %after_bb514.us ], [ %5002, %after_bb511.us ], [ %5002, %after_bb508.us ], [ %5002, %after_bb505.us ], [ %5002, %after_bb502.us ], [ %5002, %after_bb499.us ], [ %5002, %after_bb496.us ], [ %5002, %after_bb493.us ], [ %5002, %after_bb490.us ], [ %5002, %after_bb487.us ], [ %5002, %after_bb484.us ], [ %5002, %after_bb481.us ], [ %5002, %after_bb478.us ], [ %5002, %after_bb475.us ], [ %5002, %after_bb472.us ], [ %5002, %after_bb469.us ], [ %5002, %after_bb466.us ], [ %5002, %after_bb463.us ], [ %5002, %after_bb460.us ], [ %5002, %after_bb457.us ], [ %5002, %after_bb454.us ], [ %5002, %after_bb451.us ], [ %5002, %after_bb448.us ], [ %5002, %after_bb445.us ], [ %5002, %after_bb442.us ], [ %5002, %after_bb439.us ], [ %5002, %after_bb436.us ], [ %5002, %after_bb433.us ], [ %5002, %after_bb430.us ], [ %5002, %after_bb427.us ], [ %5002, %after_bb424.us ], [ %5002, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5264 = phi i8 [ %5012, %true_bb551.us ], [ %5012, %after_bb550.us ], [ %5012, %after_bb547.us ], [ %5012, %after_bb544.us ], [ %5012, %after_bb541.us ], [ %5012, %after_bb538.us ], [ %5012, %after_bb535.us ], [ %5012, %after_bb532.us ], [ %5012, %after_bb529.us ], [ %5012, %after_bb526.us ], [ %5012, %after_bb523.us ], [ %5012, %after_bb520.us ], [ %5012, %after_bb517.us ], [ %5012, %after_bb514.us ], [ %5012, %after_bb511.us ], [ %5012, %after_bb508.us ], [ %5012, %after_bb505.us ], [ %5012, %after_bb502.us ], [ %5012, %after_bb499.us ], [ %5012, %after_bb496.us ], [ %5012, %after_bb493.us ], [ %5012, %after_bb490.us ], [ %5012, %after_bb487.us ], [ %5012, %after_bb484.us ], [ %5012, %after_bb481.us ], [ %5012, %after_bb478.us ], [ %5012, %after_bb475.us ], [ %5012, %after_bb472.us ], [ %5012, %after_bb469.us ], [ %5012, %after_bb466.us ], [ %5012, %after_bb463.us ], [ %5012, %after_bb460.us ], [ %5012, %after_bb457.us ], [ %5012, %after_bb454.us ], [ %5012, %after_bb451.us ], [ %5012, %after_bb448.us ], [ %5012, %after_bb445.us ], [ %5012, %after_bb442.us ], [ %5012, %after_bb439.us ], [ %5012, %after_bb436.us ], [ %5012, %after_bb433.us ], [ %5012, %after_bb430.us ], [ %5012, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5265 = phi i8 [ %5022, %true_bb551.us ], [ %5022, %after_bb550.us ], [ %5022, %after_bb547.us ], [ %5022, %after_bb544.us ], [ %5022, %after_bb541.us ], [ %5022, %after_bb538.us ], [ %5022, %after_bb535.us ], [ %5022, %after_bb532.us ], [ %5022, %after_bb529.us ], [ %5022, %after_bb526.us ], [ %5022, %after_bb523.us ], [ %5022, %after_bb520.us ], [ %5022, %after_bb517.us ], [ %5022, %after_bb514.us ], [ %5022, %after_bb511.us ], [ %5022, %after_bb508.us ], [ %5022, %after_bb505.us ], [ %5022, %after_bb502.us ], [ %5022, %after_bb499.us ], [ %5022, %after_bb496.us ], [ %5022, %after_bb493.us ], [ %5022, %after_bb490.us ], [ %5022, %after_bb487.us ], [ %5022, %after_bb484.us ], [ %5022, %after_bb481.us ], [ %5022, %after_bb478.us ], [ %5022, %after_bb475.us ], [ %5022, %after_bb472.us ], [ %5022, %after_bb469.us ], [ %5022, %after_bb466.us ], [ %5022, %after_bb463.us ], [ %5022, %after_bb460.us ], [ %5022, %after_bb457.us ], [ %5022, %after_bb454.us ], [ %5022, %after_bb451.us ], [ %5022, %after_bb448.us ], [ %5022, %after_bb445.us ], [ %5022, %after_bb442.us ], [ %5022, %after_bb439.us ], [ %5022, %after_bb436.us ], [ %5022, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5266 = phi i8 [ %5032, %true_bb551.us ], [ %5032, %after_bb550.us ], [ %5032, %after_bb547.us ], [ %5032, %after_bb544.us ], [ %5032, %after_bb541.us ], [ %5032, %after_bb538.us ], [ %5032, %after_bb535.us ], [ %5032, %after_bb532.us ], [ %5032, %after_bb529.us ], [ %5032, %after_bb526.us ], [ %5032, %after_bb523.us ], [ %5032, %after_bb520.us ], [ %5032, %after_bb517.us ], [ %5032, %after_bb514.us ], [ %5032, %after_bb511.us ], [ %5032, %after_bb508.us ], [ %5032, %after_bb505.us ], [ %5032, %after_bb502.us ], [ %5032, %after_bb499.us ], [ %5032, %after_bb496.us ], [ %5032, %after_bb493.us ], [ %5032, %after_bb490.us ], [ %5032, %after_bb487.us ], [ %5032, %after_bb484.us ], [ %5032, %after_bb481.us ], [ %5032, %after_bb478.us ], [ %5032, %after_bb475.us ], [ %5032, %after_bb472.us ], [ %5032, %after_bb469.us ], [ %5032, %after_bb466.us ], [ %5032, %after_bb463.us ], [ %5032, %after_bb460.us ], [ %5032, %after_bb457.us ], [ %5032, %after_bb454.us ], [ %5032, %after_bb451.us ], [ %5032, %after_bb448.us ], [ %5032, %after_bb445.us ], [ %5032, %after_bb442.us ], [ %5032, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5267 = phi i8 [ %5042, %true_bb551.us ], [ %5042, %after_bb550.us ], [ %5042, %after_bb547.us ], [ %5042, %after_bb544.us ], [ %5042, %after_bb541.us ], [ %5042, %after_bb538.us ], [ %5042, %after_bb535.us ], [ %5042, %after_bb532.us ], [ %5042, %after_bb529.us ], [ %5042, %after_bb526.us ], [ %5042, %after_bb523.us ], [ %5042, %after_bb520.us ], [ %5042, %after_bb517.us ], [ %5042, %after_bb514.us ], [ %5042, %after_bb511.us ], [ %5042, %after_bb508.us ], [ %5042, %after_bb505.us ], [ %5042, %after_bb502.us ], [ %5042, %after_bb499.us ], [ %5042, %after_bb496.us ], [ %5042, %after_bb493.us ], [ %5042, %after_bb490.us ], [ %5042, %after_bb487.us ], [ %5042, %after_bb484.us ], [ %5042, %after_bb481.us ], [ %5042, %after_bb478.us ], [ %5042, %after_bb475.us ], [ %5042, %after_bb472.us ], [ %5042, %after_bb469.us ], [ %5042, %after_bb466.us ], [ %5042, %after_bb463.us ], [ %5042, %after_bb460.us ], [ %5042, %after_bb457.us ], [ %5042, %after_bb454.us ], [ %5042, %after_bb451.us ], [ %5042, %after_bb448.us ], [ %5042, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5268 = phi i8 [ %5052, %true_bb551.us ], [ %5052, %after_bb550.us ], [ %5052, %after_bb547.us ], [ %5052, %after_bb544.us ], [ %5052, %after_bb541.us ], [ %5052, %after_bb538.us ], [ %5052, %after_bb535.us ], [ %5052, %after_bb532.us ], [ %5052, %after_bb529.us ], [ %5052, %after_bb526.us ], [ %5052, %after_bb523.us ], [ %5052, %after_bb520.us ], [ %5052, %after_bb517.us ], [ %5052, %after_bb514.us ], [ %5052, %after_bb511.us ], [ %5052, %after_bb508.us ], [ %5052, %after_bb505.us ], [ %5052, %after_bb502.us ], [ %5052, %after_bb499.us ], [ %5052, %after_bb496.us ], [ %5052, %after_bb493.us ], [ %5052, %after_bb490.us ], [ %5052, %after_bb487.us ], [ %5052, %after_bb484.us ], [ %5052, %after_bb481.us ], [ %5052, %after_bb478.us ], [ %5052, %after_bb475.us ], [ %5052, %after_bb472.us ], [ %5052, %after_bb469.us ], [ %5052, %after_bb466.us ], [ %5052, %after_bb463.us ], [ %5052, %after_bb460.us ], [ %5052, %after_bb457.us ], [ %5052, %after_bb454.us ], [ %5052, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5269 = phi i8 [ %5062, %true_bb551.us ], [ %5062, %after_bb550.us ], [ %5062, %after_bb547.us ], [ %5062, %after_bb544.us ], [ %5062, %after_bb541.us ], [ %5062, %after_bb538.us ], [ %5062, %after_bb535.us ], [ %5062, %after_bb532.us ], [ %5062, %after_bb529.us ], [ %5062, %after_bb526.us ], [ %5062, %after_bb523.us ], [ %5062, %after_bb520.us ], [ %5062, %after_bb517.us ], [ %5062, %after_bb514.us ], [ %5062, %after_bb511.us ], [ %5062, %after_bb508.us ], [ %5062, %after_bb505.us ], [ %5062, %after_bb502.us ], [ %5062, %after_bb499.us ], [ %5062, %after_bb496.us ], [ %5062, %after_bb493.us ], [ %5062, %after_bb490.us ], [ %5062, %after_bb487.us ], [ %5062, %after_bb484.us ], [ %5062, %after_bb481.us ], [ %5062, %after_bb478.us ], [ %5062, %after_bb475.us ], [ %5062, %after_bb472.us ], [ %5062, %after_bb469.us ], [ %5062, %after_bb466.us ], [ %5062, %after_bb463.us ], [ %5062, %after_bb460.us ], [ %5062, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5270 = phi i8 [ %5072, %true_bb551.us ], [ %5072, %after_bb550.us ], [ %5072, %after_bb547.us ], [ %5072, %after_bb544.us ], [ %5072, %after_bb541.us ], [ %5072, %after_bb538.us ], [ %5072, %after_bb535.us ], [ %5072, %after_bb532.us ], [ %5072, %after_bb529.us ], [ %5072, %after_bb526.us ], [ %5072, %after_bb523.us ], [ %5072, %after_bb520.us ], [ %5072, %after_bb517.us ], [ %5072, %after_bb514.us ], [ %5072, %after_bb511.us ], [ %5072, %after_bb508.us ], [ %5072, %after_bb505.us ], [ %5072, %after_bb502.us ], [ %5072, %after_bb499.us ], [ %5072, %after_bb496.us ], [ %5072, %after_bb493.us ], [ %5072, %after_bb490.us ], [ %5072, %after_bb487.us ], [ %5072, %after_bb484.us ], [ %5072, %after_bb481.us ], [ %5072, %after_bb478.us ], [ %5072, %after_bb475.us ], [ %5072, %after_bb472.us ], [ %5072, %after_bb469.us ], [ %5072, %after_bb466.us ], [ %5072, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5271 = phi i8 [ %5082, %true_bb551.us ], [ %5082, %after_bb550.us ], [ %5082, %after_bb547.us ], [ %5082, %after_bb544.us ], [ %5082, %after_bb541.us ], [ %5082, %after_bb538.us ], [ %5082, %after_bb535.us ], [ %5082, %after_bb532.us ], [ %5082, %after_bb529.us ], [ %5082, %after_bb526.us ], [ %5082, %after_bb523.us ], [ %5082, %after_bb520.us ], [ %5082, %after_bb517.us ], [ %5082, %after_bb514.us ], [ %5082, %after_bb511.us ], [ %5082, %after_bb508.us ], [ %5082, %after_bb505.us ], [ %5082, %after_bb502.us ], [ %5082, %after_bb499.us ], [ %5082, %after_bb496.us ], [ %5082, %after_bb493.us ], [ %5082, %after_bb490.us ], [ %5082, %after_bb487.us ], [ %5082, %after_bb484.us ], [ %5082, %after_bb481.us ], [ %5082, %after_bb478.us ], [ %5082, %after_bb475.us ], [ %5082, %after_bb472.us ], [ %5082, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5272 = phi i8 [ %5092, %true_bb551.us ], [ %5092, %after_bb550.us ], [ %5092, %after_bb547.us ], [ %5092, %after_bb544.us ], [ %5092, %after_bb541.us ], [ %5092, %after_bb538.us ], [ %5092, %after_bb535.us ], [ %5092, %after_bb532.us ], [ %5092, %after_bb529.us ], [ %5092, %after_bb526.us ], [ %5092, %after_bb523.us ], [ %5092, %after_bb520.us ], [ %5092, %after_bb517.us ], [ %5092, %after_bb514.us ], [ %5092, %after_bb511.us ], [ %5092, %after_bb508.us ], [ %5092, %after_bb505.us ], [ %5092, %after_bb502.us ], [ %5092, %after_bb499.us ], [ %5092, %after_bb496.us ], [ %5092, %after_bb493.us ], [ %5092, %after_bb490.us ], [ %5092, %after_bb487.us ], [ %5092, %after_bb484.us ], [ %5092, %after_bb481.us ], [ %5092, %after_bb478.us ], [ %5092, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5273 = phi i8 [ %5102, %true_bb551.us ], [ %5102, %after_bb550.us ], [ %5102, %after_bb547.us ], [ %5102, %after_bb544.us ], [ %5102, %after_bb541.us ], [ %5102, %after_bb538.us ], [ %5102, %after_bb535.us ], [ %5102, %after_bb532.us ], [ %5102, %after_bb529.us ], [ %5102, %after_bb526.us ], [ %5102, %after_bb523.us ], [ %5102, %after_bb520.us ], [ %5102, %after_bb517.us ], [ %5102, %after_bb514.us ], [ %5102, %after_bb511.us ], [ %5102, %after_bb508.us ], [ %5102, %after_bb505.us ], [ %5102, %after_bb502.us ], [ %5102, %after_bb499.us ], [ %5102, %after_bb496.us ], [ %5102, %after_bb493.us ], [ %5102, %after_bb490.us ], [ %5102, %after_bb487.us ], [ %5102, %after_bb484.us ], [ %5102, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5274 = phi i8 [ %5112, %true_bb551.us ], [ %5112, %after_bb550.us ], [ %5112, %after_bb547.us ], [ %5112, %after_bb544.us ], [ %5112, %after_bb541.us ], [ %5112, %after_bb538.us ], [ %5112, %after_bb535.us ], [ %5112, %after_bb532.us ], [ %5112, %after_bb529.us ], [ %5112, %after_bb526.us ], [ %5112, %after_bb523.us ], [ %5112, %after_bb520.us ], [ %5112, %after_bb517.us ], [ %5112, %after_bb514.us ], [ %5112, %after_bb511.us ], [ %5112, %after_bb508.us ], [ %5112, %after_bb505.us ], [ %5112, %after_bb502.us ], [ %5112, %after_bb499.us ], [ %5112, %after_bb496.us ], [ %5112, %after_bb493.us ], [ %5112, %after_bb490.us ], [ %5112, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5275 = phi i8 [ %5122, %true_bb551.us ], [ %5122, %after_bb550.us ], [ %5122, %after_bb547.us ], [ %5122, %after_bb544.us ], [ %5122, %after_bb541.us ], [ %5122, %after_bb538.us ], [ %5122, %after_bb535.us ], [ %5122, %after_bb532.us ], [ %5122, %after_bb529.us ], [ %5122, %after_bb526.us ], [ %5122, %after_bb523.us ], [ %5122, %after_bb520.us ], [ %5122, %after_bb517.us ], [ %5122, %after_bb514.us ], [ %5122, %after_bb511.us ], [ %5122, %after_bb508.us ], [ %5122, %after_bb505.us ], [ %5122, %after_bb502.us ], [ %5122, %after_bb499.us ], [ %5122, %after_bb496.us ], [ %5122, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5276 = phi i8 [ %5132, %true_bb551.us ], [ %5132, %after_bb550.us ], [ %5132, %after_bb547.us ], [ %5132, %after_bb544.us ], [ %5132, %after_bb541.us ], [ %5132, %after_bb538.us ], [ %5132, %after_bb535.us ], [ %5132, %after_bb532.us ], [ %5132, %after_bb529.us ], [ %5132, %after_bb526.us ], [ %5132, %after_bb523.us ], [ %5132, %after_bb520.us ], [ %5132, %after_bb517.us ], [ %5132, %after_bb514.us ], [ %5132, %after_bb511.us ], [ %5132, %after_bb508.us ], [ %5132, %after_bb505.us ], [ %5132, %after_bb502.us ], [ %5132, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5277 = phi i8 [ %5142, %true_bb551.us ], [ %5142, %after_bb550.us ], [ %5142, %after_bb547.us ], [ %5142, %after_bb544.us ], [ %5142, %after_bb541.us ], [ %5142, %after_bb538.us ], [ %5142, %after_bb535.us ], [ %5142, %after_bb532.us ], [ %5142, %after_bb529.us ], [ %5142, %after_bb526.us ], [ %5142, %after_bb523.us ], [ %5142, %after_bb520.us ], [ %5142, %after_bb517.us ], [ %5142, %after_bb514.us ], [ %5142, %after_bb511.us ], [ %5142, %after_bb508.us ], [ %5142, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5278 = phi i8 [ %5152, %true_bb551.us ], [ %5152, %after_bb550.us ], [ %5152, %after_bb547.us ], [ %5152, %after_bb544.us ], [ %5152, %after_bb541.us ], [ %5152, %after_bb538.us ], [ %5152, %after_bb535.us ], [ %5152, %after_bb532.us ], [ %5152, %after_bb529.us ], [ %5152, %after_bb526.us ], [ %5152, %after_bb523.us ], [ %5152, %after_bb520.us ], [ %5152, %after_bb517.us ], [ %5152, %after_bb514.us ], [ %5152, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5279 = phi i8 [ %5162, %true_bb551.us ], [ %5162, %after_bb550.us ], [ %5162, %after_bb547.us ], [ %5162, %after_bb544.us ], [ %5162, %after_bb541.us ], [ %5162, %after_bb538.us ], [ %5162, %after_bb535.us ], [ %5162, %after_bb532.us ], [ %5162, %after_bb529.us ], [ %5162, %after_bb526.us ], [ %5162, %after_bb523.us ], [ %5162, %after_bb520.us ], [ %5162, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5280 = phi i8 [ %5172, %true_bb551.us ], [ %5172, %after_bb550.us ], [ %5172, %after_bb547.us ], [ %5172, %after_bb544.us ], [ %5172, %after_bb541.us ], [ %5172, %after_bb538.us ], [ %5172, %after_bb535.us ], [ %5172, %after_bb532.us ], [ %5172, %after_bb529.us ], [ %5172, %after_bb526.us ], [ %5172, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5281 = phi i8 [ %5182, %true_bb551.us ], [ %5182, %after_bb550.us ], [ %5182, %after_bb547.us ], [ %5182, %after_bb544.us ], [ %5182, %after_bb541.us ], [ %5182, %after_bb538.us ], [ %5182, %after_bb535.us ], [ %5182, %after_bb532.us ], [ %5182, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5282 = phi i8 [ %5192, %true_bb551.us ], [ %5192, %after_bb550.us ], [ %5192, %after_bb547.us ], [ %5192, %after_bb544.us ], [ %5192, %after_bb541.us ], [ %5192, %after_bb538.us ], [ %5192, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5283 = phi i8 [ %5202, %true_bb551.us ], [ %5202, %after_bb550.us ], [ %5202, %after_bb547.us ], [ %5202, %after_bb544.us ], [ %5202, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5284 = phi i8 [ %5212, %true_bb551.us ], [ %5212, %after_bb550.us ], [ %5212, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5285 = phi i8 [ %5222, %true_bb551.us ], [ 0, %after_bb550.us ], [ 0, %after_bb547.us ], [ 0, %after_bb544.us ], [ 0, %after_bb541.us ], [ 0, %after_bb538.us ], [ 0, %after_bb535.us ], [ 0, %after_bb532.us ], [ 0, %after_bb529.us ], [ 0, %after_bb526.us ], [ 0, %after_bb523.us ], [ 0, %after_bb520.us ], [ 0, %after_bb517.us ], [ 0, %after_bb514.us ], [ 0, %after_bb511.us ], [ 0, %after_bb508.us ], [ 0, %after_bb505.us ], [ 0, %after_bb502.us ], [ 0, %after_bb499.us ], [ 0, %after_bb496.us ], [ 0, %after_bb493.us ], [ 0, %after_bb490.us ], [ 0, %after_bb487.us ], [ 0, %after_bb484.us ], [ 0, %after_bb481.us ], [ 0, %after_bb478.us ], [ 0, %after_bb475.us ], [ 0, %after_bb472.us ], [ 0, %after_bb469.us ], [ 0, %after_bb466.us ], [ 0, %after_bb463.us ], [ 0, %after_bb460.us ], [ 0, %after_bb457.us ], [ 0, %after_bb454.us ], [ 0, %after_bb451.us ], [ 0, %after_bb448.us ], [ 0, %after_bb445.us ], [ 0, %after_bb442.us ], [ 0, %after_bb439.us ], [ 0, %after_bb436.us ], [ 0, %after_bb433.us ], [ 0, %after_bb430.us ], [ 0, %after_bb427.us ], [ 0, %after_bb424.us ], [ 0, %after_bb421.us ], [ 0, %after_bb418.us ], [ 0, %after_bb415.us ], [ 0, %after_bb412.us ], [ 0, %after_bb409.us ], [ 0, %after_bb406.us ], [ 0, %after_bb403.us ], [ 0, %after_bb400.us ], [ 0, %after_bb397.us ], [ 0, %after_bb394.us ], [ 0, %after_bb391.us ], [ 0, %after_bb388.us ], [ 0, %after_bb385.us ], [ 0, %after_bb382.us ], [ 0, %after_bb379.us ], [ 0, %after_bb376.us ], [ 0, %after_bb373.us ], [ 0, %after_bb370.us ], [ 0, %after_bb367.us ], [ 0, %after_bb364.us ]
  %5286 = insertelement <128 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %4531, i32 0
  %5287 = insertelement <128 x i8> %5286, i8 %4870, i32 1
  %5288 = insertelement <128 x i8> %5287, i8 %4871, i32 2
  %5289 = insertelement <128 x i8> %5288, i8 %4869, i32 3
  %5290 = insertelement <128 x i8> %5289, i8 %4872, i32 4
  %5291 = insertelement <128 x i8> %5290, i8 %4868, i32 5
  %5292 = insertelement <128 x i8> %5291, i8 %4873, i32 6
  %5293 = insertelement <128 x i8> %5292, i8 %4867, i32 7
  %5294 = insertelement <128 x i8> %5293, i8 %4874, i32 8
  %5295 = insertelement <128 x i8> %5294, i8 %4866, i32 9
  %5296 = insertelement <128 x i8> %5295, i8 %4875, i32 10
  %5297 = insertelement <128 x i8> %5296, i8 %4865, i32 11
  %5298 = insertelement <128 x i8> %5297, i8 %4876, i32 12
  %5299 = insertelement <128 x i8> %5298, i8 %4864, i32 13
  %5300 = insertelement <128 x i8> %5299, i8 %4877, i32 14
  %5301 = insertelement <128 x i8> %5300, i8 %4863, i32 15
  %5302 = insertelement <128 x i8> %5301, i8 %4878, i32 16
  %5303 = insertelement <128 x i8> %5302, i8 %4862, i32 17
  %5304 = insertelement <128 x i8> %5303, i8 %4879, i32 18
  %5305 = insertelement <128 x i8> %5304, i8 %4861, i32 19
  %5306 = insertelement <128 x i8> %5305, i8 %4880, i32 20
  %5307 = insertelement <128 x i8> %5306, i8 %4860, i32 21
  %5308 = insertelement <128 x i8> %5307, i8 %4881, i32 22
  %5309 = insertelement <128 x i8> %5308, i8 %4859, i32 23
  %5310 = insertelement <128 x i8> %5309, i8 %4882, i32 24
  %5311 = insertelement <128 x i8> %5310, i8 %4858, i32 25
  %5312 = insertelement <128 x i8> %5311, i8 %4883, i32 26
  %5313 = insertelement <128 x i8> %5312, i8 %4857, i32 27
  %5314 = insertelement <128 x i8> %5313, i8 %4884, i32 28
  %5315 = insertelement <128 x i8> %5314, i8 %4856, i32 29
  %5316 = insertelement <128 x i8> %5315, i8 %4885, i32 30
  %5317 = insertelement <128 x i8> %5316, i8 %4855, i32 31
  %5318 = insertelement <128 x i8> %5317, i8 %4886, i32 32
  %5319 = insertelement <128 x i8> %5318, i8 %4854, i32 33
  %5320 = insertelement <128 x i8> %5319, i8 %4887, i32 34
  %5321 = insertelement <128 x i8> %5320, i8 %4853, i32 35
  %5322 = insertelement <128 x i8> %5321, i8 %4888, i32 36
  %5323 = insertelement <128 x i8> %5322, i8 %4852, i32 37
  %5324 = insertelement <128 x i8> %5323, i8 %4889, i32 38
  %5325 = insertelement <128 x i8> %5324, i8 %4851, i32 39
  %5326 = insertelement <128 x i8> %5325, i8 %4890, i32 40
  %5327 = insertelement <128 x i8> %5326, i8 %4850, i32 41
  %5328 = insertelement <128 x i8> %5327, i8 %4891, i32 42
  %5329 = insertelement <128 x i8> %5328, i8 %4849, i32 43
  %5330 = insertelement <128 x i8> %5329, i8 %4892, i32 44
  %5331 = insertelement <128 x i8> %5330, i8 %4848, i32 45
  %5332 = insertelement <128 x i8> %5331, i8 %4893, i32 46
  %5333 = insertelement <128 x i8> %5332, i8 %4847, i32 47
  %5334 = insertelement <128 x i8> %5333, i8 %4894, i32 48
  %5335 = insertelement <128 x i8> %5334, i8 %4846, i32 49
  %5336 = insertelement <128 x i8> %5335, i8 %4895, i32 50
  %5337 = insertelement <128 x i8> %5336, i8 %4845, i32 51
  %5338 = insertelement <128 x i8> %5337, i8 %4896, i32 52
  %5339 = insertelement <128 x i8> %5338, i8 %4844, i32 53
  %5340 = insertelement <128 x i8> %5339, i8 %4897, i32 54
  %5341 = insertelement <128 x i8> %5340, i8 %4843, i32 55
  %5342 = insertelement <128 x i8> %5341, i8 %4898, i32 56
  %5343 = insertelement <128 x i8> %5342, i8 %4842, i32 57
  %5344 = insertelement <128 x i8> %5343, i8 %4899, i32 58
  %5345 = insertelement <128 x i8> %5344, i8 %4841, i32 59
  %5346 = insertelement <128 x i8> %5345, i8 %4900, i32 60
  %5347 = insertelement <128 x i8> %5346, i8 %4840, i32 61
  %5348 = insertelement <128 x i8> %5347, i8 %4901, i32 62
  %5349 = insertelement <128 x i8> %5348, i8 %4907, i32 63
  %5350 = insertelement <128 x i8> %5349, i8 %5254, i32 64
  %5351 = insertelement <128 x i8> %5350, i8 %5253, i32 65
  %5352 = insertelement <128 x i8> %5351, i8 %5255, i32 66
  %5353 = insertelement <128 x i8> %5352, i8 %5252, i32 67
  %5354 = insertelement <128 x i8> %5353, i8 %5256, i32 68
  %5355 = insertelement <128 x i8> %5354, i8 %5251, i32 69
  %5356 = insertelement <128 x i8> %5355, i8 %5257, i32 70
  %5357 = insertelement <128 x i8> %5356, i8 %5250, i32 71
  %5358 = insertelement <128 x i8> %5357, i8 %5258, i32 72
  %5359 = insertelement <128 x i8> %5358, i8 %5249, i32 73
  %5360 = insertelement <128 x i8> %5359, i8 %5259, i32 74
  %5361 = insertelement <128 x i8> %5360, i8 %5248, i32 75
  %5362 = insertelement <128 x i8> %5361, i8 %5260, i32 76
  %5363 = insertelement <128 x i8> %5362, i8 %5247, i32 77
  %5364 = insertelement <128 x i8> %5363, i8 %5261, i32 78
  %5365 = insertelement <128 x i8> %5364, i8 %5246, i32 79
  %5366 = insertelement <128 x i8> %5365, i8 %5262, i32 80
  %5367 = insertelement <128 x i8> %5366, i8 %5245, i32 81
  %5368 = insertelement <128 x i8> %5367, i8 %5263, i32 82
  %5369 = insertelement <128 x i8> %5368, i8 %5244, i32 83
  %5370 = insertelement <128 x i8> %5369, i8 %5264, i32 84
  %5371 = insertelement <128 x i8> %5370, i8 %5243, i32 85
  %5372 = insertelement <128 x i8> %5371, i8 %5265, i32 86
  %5373 = insertelement <128 x i8> %5372, i8 %5242, i32 87
  %5374 = insertelement <128 x i8> %5373, i8 %5266, i32 88
  %5375 = insertelement <128 x i8> %5374, i8 %5241, i32 89
  %5376 = insertelement <128 x i8> %5375, i8 %5267, i32 90
  %5377 = insertelement <128 x i8> %5376, i8 %5240, i32 91
  %5378 = insertelement <128 x i8> %5377, i8 %5268, i32 92
  %5379 = insertelement <128 x i8> %5378, i8 %5239, i32 93
  %5380 = insertelement <128 x i8> %5379, i8 %5269, i32 94
  %5381 = insertelement <128 x i8> %5380, i8 %5238, i32 95
  %5382 = insertelement <128 x i8> %5381, i8 %5270, i32 96
  %5383 = insertelement <128 x i8> %5382, i8 %5237, i32 97
  %5384 = insertelement <128 x i8> %5383, i8 %5271, i32 98
  %5385 = insertelement <128 x i8> %5384, i8 %5236, i32 99
  %5386 = insertelement <128 x i8> %5385, i8 %5272, i32 100
  %5387 = insertelement <128 x i8> %5386, i8 %5235, i32 101
  %5388 = insertelement <128 x i8> %5387, i8 %5273, i32 102
  %5389 = insertelement <128 x i8> %5388, i8 %5234, i32 103
  %5390 = insertelement <128 x i8> %5389, i8 %5274, i32 104
  %5391 = insertelement <128 x i8> %5390, i8 %5233, i32 105
  %5392 = insertelement <128 x i8> %5391, i8 %5275, i32 106
  %5393 = insertelement <128 x i8> %5392, i8 %5232, i32 107
  %5394 = insertelement <128 x i8> %5393, i8 %5276, i32 108
  %5395 = insertelement <128 x i8> %5394, i8 %5231, i32 109
  %5396 = insertelement <128 x i8> %5395, i8 %5277, i32 110
  %5397 = insertelement <128 x i8> %5396, i8 %5230, i32 111
  %5398 = insertelement <128 x i8> %5397, i8 %5278, i32 112
  %5399 = insertelement <128 x i8> %5398, i8 %5229, i32 113
  %5400 = insertelement <128 x i8> %5399, i8 %5279, i32 114
  %5401 = insertelement <128 x i8> %5400, i8 %5228, i32 115
  %5402 = insertelement <128 x i8> %5401, i8 %5280, i32 116
  %5403 = insertelement <128 x i8> %5402, i8 %5227, i32 117
  %5404 = insertelement <128 x i8> %5403, i8 %5281, i32 118
  %5405 = insertelement <128 x i8> %5404, i8 %5226, i32 119
  %5406 = insertelement <128 x i8> %5405, i8 %5282, i32 120
  %5407 = insertelement <128 x i8> %5406, i8 %5225, i32 121
  %5408 = insertelement <128 x i8> %5407, i8 %5283, i32 122
  %5409 = insertelement <128 x i8> %5408, i8 %5224, i32 123
  %5410 = insertelement <128 x i8> %5409, i8 %5284, i32 124
  %5411 = insertelement <128 x i8> %5410, i8 %5223, i32 125
  %5412 = insertelement <128 x i8> %5411, i8 %5285, i32 126
  %5413 = add nsw i32 %t2453.us, %resampled_input.s0.x.rebased172.us
  %5414 = shl nsw i32 %5413, 7
  %5415 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5414
  %5416 = bitcast i8* %5415 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5412, <128 x i8>* %5416, i32 128, <128 x i1> %4123), !tbaa !129
  %5417 = add nuw nsw i32 %resampled_input.s0.x.rebased172.us, 1
  %.not626.us = icmp eq i32 %resampled_input.s0.x.rebased172.us, %t2448
  br i1 %.not626.us, label %"end for resampled_input.s0.x.rebased171.loopexit.us", label %"for resampled_input.s0.x.rebased170.us"

"end for resampled_input.s0.x.rebased171.loopexit.us": ; preds = %after_bb556.us
  %5418 = add nuw nsw i32 %resampled_input.s0.y.rebased169.us, 1
  %.not625.us = icmp eq i32 %resampled_input.s0.y.rebased169.us, %t2447
  br i1 %.not625.us, label %"consume resampled_input557", label %"for resampled_input.s0.y.rebased167.us"

"consume resampled_input557":                     ; preds = %"end for resampled_input.s0.x.rebased171.loopexit.us", %"end for resampled_input.s0.x.rebased165.loopexit.us", %"for resampled_input.s0.y.rebased167.preheader", %"for resampled_input.s0.y.rebased161.preheader", %next_bb160, %then_bb159
  br i1 %4437, label %"for output.s0.y.yo558.preheader", label %"end for output.s0.y.yo559", !prof !101

"for output.s0.y.yo558.preheader":                ; preds = %"consume resampled_input557"
  %5419 = add nsw i32 %output.s0.b.rebased153, %14
  %5420 = mul nsw i32 %5419, %25
  %5421 = load <32 x i32>, <32 x i32>* %4303, align 128
  %5422 = load <32 x i32>, <32 x i32>* %4306, align 128
  %5423 = load <32 x i32>, <32 x i32>* %4309, align 128
  %5424 = load <32 x i32>, <32 x i32>* %4312, align 128
  br label %"for output.s0.y.yo558"

"for output.s0.y.yo558":                          ; preds = %"for output.s0.y.yo558.preheader", %"end for output.s0.x.xo562"
  %output.s0.y.yo560 = phi i32 [ %5437, %"end for output.s0.x.xo562" ], [ 0, %"for output.s0.y.yo558.preheader" ]
  %5425 = add nsw i32 %output.s0.y.yo560, %22
  %5426 = mul nsw i32 %5425, %stride_y
  %5427 = add nsw i32 %4438, %5426
  %t2476 = mul nsw i32 %5427, %4365
  %5428 = add nsw i32 %4439, %5426
  %t2478 = mul nsw i32 %5428, %4365
  %5429 = sub nsw i32 %5426, %resampled_input.y.min_realized
  %t2480 = mul nsw i32 %5429, %4365
  br i1 %4440, label %"for output.s0.x.xo561.preheader", label %"end for output.s0.x.xo562", !prof !101

"for output.s0.x.xo561.preheader":                ; preds = %"for output.s0.y.yo558"
  %5430 = mul nsw i32 %5425, %24
  %5431 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %5432 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>)
  %5433 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> zeroinitializer)
  %5434 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> zeroinitializer)
  %5435 = add i32 %5430, %5420
  br label %"for output.s0.x.xo561"

"end for output.s0.y.yo559":                      ; preds = %"end for output.s0.x.xo562", %"consume resampled_input557"
  %5436 = add nuw nsw i32 %output.s0.b.rebased153, 1
  %.not619 = icmp eq i32 %5436, %15
  br i1 %.not619, label %if.then.i.loopexit, label %"for output.s0.b.rebased151"

"for output.s0.x.xo561":                          ; preds = %"for output.s0.x.xo561.preheader", %"consume convolved574"
  %output.s0.x.xo563 = phi i32 [ %5902, %"consume convolved574" ], [ 0, %"for output.s0.x.xo561.preheader" ]
  br i1 %3776, label %then_bb566, label %next_bb567

"end for output.s0.x.xo562":                      ; preds = %"consume convolved574", %"for output.s0.y.yo558"
  %5437 = add nuw nsw i32 %output.s0.y.yo560, 1
  %.not620 = icmp eq i32 %5437, %23
  br i1 %.not620, label %"end for output.s0.y.yo559", label %"for output.s0.y.yo558"

then_bb566:                                       ; preds = %"for output.s0.x.xo561"
  %5438 = load <32 x i32>, <32 x i32>* %4441, align 128, !tbaa !180
  %5439 = load <32 x i32>, <32 x i32>* %4443, align 128, !tbaa !186
  %5440 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5439, <32 x i32> %5438)
  %5441 = bitcast <64 x i32> %5440 to <128 x i16>
  %5442 = sext <128 x i16> %5441 to <128 x i32>
  %5443 = add nsw i32 %output.s0.x.xo563, %19
  %5444 = mul nsw i32 %5443, %stride_x
  %5445 = add i32 %5444, %t2480
  %5446 = sub i32 %5445, %resampled_input.x.min_realized
  %5447 = shl nsw i32 %5446, 7
  %5448 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5447
  %5449 = bitcast i8* %5448 to <128 x i8>*
  %5450 = load <128 x i8>, <128 x i8>* %5449, align 128, !tbaa !129
  %5451 = zext <128 x i8> %5450 to <128 x i32>
  %5452 = shufflevector <128 x i32> %5442, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5453 = shufflevector <128 x i32> %5451, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1255 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5452, <32 x i32> %5453) #11
  %ab.i1256 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1255, <32 x i32> %5452, <32 x i32> %5453) #11
  %5454 = shufflevector <128 x i32> %5442, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5455 = shufflevector <128 x i32> %5451, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1257 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5454, <32 x i32> %5455) #11
  %ab.i1258 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1257, <32 x i32> %5454, <32 x i32> %5455) #11
  %5456 = shufflevector <128 x i32> %5442, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5457 = shufflevector <128 x i32> %5451, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1259 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5456, <32 x i32> %5457) #11
  %ab.i1260 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1259, <32 x i32> %5456, <32 x i32> %5457) #11
  %5458 = shufflevector <128 x i32> %5442, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5459 = shufflevector <128 x i32> %5451, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1261 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5458, <32 x i32> %5459) #11
  %ab.i1262 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1261, <32 x i32> %5458, <32 x i32> %5459) #11
  %5460 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1258, <32 x i32> %ab.i1256)
  %5461 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1262, <32 x i32> %ab.i1260)
  %5462 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5422, <32 x i32> %5421)
  %5463 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5424, <32 x i32> %5423)
  %5464 = add nsw <64 x i32> %5462, %5460
  %5465 = add nsw <64 x i32> %5463, %5461
  %5466 = shufflevector <64 x i32> %5465, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5467 = shufflevector <64 x i32> %5464, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5468 = shufflevector <64 x i32> %5464, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5469 = shufflevector <64 x i32> %5465, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5470 = shufflevector <128 x i32> %5466, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5471 = load <32 x i32>, <32 x i32>* %4445, align 128, !tbaa !188
  %5472 = load <32 x i32>, <32 x i32>* %4447, align 128, !tbaa !191
  %5473 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5472, <32 x i32> %5471)
  %5474 = bitcast <64 x i32> %5473 to <128 x i16>
  %5475 = sext <128 x i16> %5474 to <128 x i32>
  %5476 = add i32 %5444, %4448
  %5477 = add i32 %5476, %t2480
  %5478 = shl nsw i32 %5477, 7
  %5479 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5478
  %5480 = bitcast i8* %5479 to <128 x i8>*
  %5481 = load <128 x i8>, <128 x i8>* %5480, align 128, !tbaa !129
  %5482 = zext <128 x i8> %5481 to <128 x i32>
  %5483 = shufflevector <128 x i32> %5475, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5484 = shufflevector <128 x i32> %5482, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1263 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5483, <32 x i32> %5484) #11
  %ab.i1264 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1263, <32 x i32> %5483, <32 x i32> %5484) #11
  %5485 = shufflevector <128 x i32> %5475, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5486 = shufflevector <128 x i32> %5482, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1265 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5485, <32 x i32> %5486) #11
  %ab.i1266 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1265, <32 x i32> %5485, <32 x i32> %5486) #11
  %5487 = shufflevector <128 x i32> %5475, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5488 = shufflevector <128 x i32> %5482, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1267 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5487, <32 x i32> %5488) #11
  %ab.i1268 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1267, <32 x i32> %5487, <32 x i32> %5488) #11
  %5489 = shufflevector <128 x i32> %5475, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5490 = shufflevector <128 x i32> %5482, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1269 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5489, <32 x i32> %5490) #11
  %ab.i1270 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1269, <32 x i32> %5489, <32 x i32> %5490) #11
  %5491 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1266, <32 x i32> %ab.i1264)
  %5492 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1270, <32 x i32> %ab.i1268)
  %5493 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5468, <32 x i32> %5467)
  %5494 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5470, <32 x i32> %5469)
  %5495 = add nsw <64 x i32> %5493, %5491
  %5496 = add nsw <64 x i32> %5494, %5492
  %5497 = shufflevector <64 x i32> %5496, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5498 = shufflevector <64 x i32> %5495, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5499 = shufflevector <64 x i32> %5495, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5500 = shufflevector <64 x i32> %5496, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5501 = shufflevector <128 x i32> %5497, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5502 = load <32 x i32>, <32 x i32>* %4450, align 128, !tbaa !193
  %5503 = load <32 x i32>, <32 x i32>* %4452, align 128, !tbaa !197
  %5504 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5503, <32 x i32> %5502)
  %5505 = bitcast <64 x i32> %5504 to <128 x i16>
  %5506 = sext <128 x i16> %5505 to <128 x i32>
  %5507 = add i32 %5444, %4453
  %5508 = add i32 %5507, %t2480
  %5509 = shl nsw i32 %5508, 7
  %5510 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5509
  %5511 = bitcast i8* %5510 to <128 x i8>*
  %5512 = load <128 x i8>, <128 x i8>* %5511, align 128, !tbaa !129
  %5513 = zext <128 x i8> %5512 to <128 x i32>
  %5514 = shufflevector <128 x i32> %5506, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5515 = shufflevector <128 x i32> %5513, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1271 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5514, <32 x i32> %5515) #11
  %ab.i1272 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1271, <32 x i32> %5514, <32 x i32> %5515) #11
  %5516 = shufflevector <128 x i32> %5506, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5517 = shufflevector <128 x i32> %5513, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1273 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5516, <32 x i32> %5517) #11
  %ab.i1274 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1273, <32 x i32> %5516, <32 x i32> %5517) #11
  %5518 = shufflevector <128 x i32> %5506, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5519 = shufflevector <128 x i32> %5513, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1275 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5518, <32 x i32> %5519) #11
  %ab.i1276 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1275, <32 x i32> %5518, <32 x i32> %5519) #11
  %5520 = shufflevector <128 x i32> %5506, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5521 = shufflevector <128 x i32> %5513, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1277 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5520, <32 x i32> %5521) #11
  %ab.i1278 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1277, <32 x i32> %5520, <32 x i32> %5521) #11
  %5522 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1274, <32 x i32> %ab.i1272)
  %5523 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1278, <32 x i32> %ab.i1276)
  %5524 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5499, <32 x i32> %5498)
  %5525 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5501, <32 x i32> %5500)
  %5526 = add nsw <64 x i32> %5524, %5522
  %5527 = add nsw <64 x i32> %5525, %5523
  %5528 = shufflevector <64 x i32> %5527, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5529 = shufflevector <64 x i32> %5526, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5530 = shufflevector <64 x i32> %5526, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5531 = shufflevector <64 x i32> %5527, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5532 = shufflevector <128 x i32> %5528, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5533 = load <32 x i32>, <32 x i32>* %4455, align 128, !tbaa !105
  %5534 = load <32 x i32>, <32 x i32>* %4457, align 128, !tbaa !105
  %5535 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5534, <32 x i32> %5533)
  %5536 = bitcast <64 x i32> %5535 to <128 x i16>
  %5537 = sext <128 x i16> %5536 to <128 x i32>
  %5538 = add i32 %5444, %t2478
  %5539 = sub i32 %5538, %resampled_input.x.min_realized
  %5540 = shl nsw i32 %5539, 7
  %5541 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5540
  %5542 = bitcast i8* %5541 to <128 x i8>*
  %5543 = load <128 x i8>, <128 x i8>* %5542, align 128, !tbaa !129
  %5544 = zext <128 x i8> %5543 to <128 x i32>
  %5545 = shufflevector <128 x i32> %5537, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5546 = shufflevector <128 x i32> %5544, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1279 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5545, <32 x i32> %5546) #11
  %ab.i1280 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1279, <32 x i32> %5545, <32 x i32> %5546) #11
  %5547 = shufflevector <128 x i32> %5537, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5548 = shufflevector <128 x i32> %5544, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1281 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5547, <32 x i32> %5548) #11
  %ab.i1282 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1281, <32 x i32> %5547, <32 x i32> %5548) #11
  %5549 = shufflevector <128 x i32> %5537, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5550 = shufflevector <128 x i32> %5544, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1283 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5549, <32 x i32> %5550) #11
  %ab.i1284 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1283, <32 x i32> %5549, <32 x i32> %5550) #11
  %5551 = shufflevector <128 x i32> %5537, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5552 = shufflevector <128 x i32> %5544, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1285 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5551, <32 x i32> %5552) #11
  %ab.i1286 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1285, <32 x i32> %5551, <32 x i32> %5552) #11
  %5553 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1282, <32 x i32> %ab.i1280)
  %5554 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1286, <32 x i32> %ab.i1284)
  %5555 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5530, <32 x i32> %5529)
  %5556 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5532, <32 x i32> %5531)
  %5557 = add nsw <64 x i32> %5555, %5553
  %5558 = add nsw <64 x i32> %5556, %5554
  %5559 = shufflevector <64 x i32> %5558, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5560 = shufflevector <64 x i32> %5557, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5561 = shufflevector <64 x i32> %5557, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5562 = shufflevector <64 x i32> %5558, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5563 = shufflevector <128 x i32> %5559, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5564 = load <32 x i32>, <32 x i32>* %4459, align 128, !tbaa !105
  %5565 = load <32 x i32>, <32 x i32>* %4461, align 128, !tbaa !105
  %5566 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5565, <32 x i32> %5564)
  %5567 = bitcast <64 x i32> %5566 to <128 x i16>
  %5568 = sext <128 x i16> %5567 to <128 x i32>
  %5569 = add i32 %5476, %t2478
  %5570 = shl nsw i32 %5569, 7
  %5571 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5570
  %5572 = bitcast i8* %5571 to <128 x i8>*
  %5573 = load <128 x i8>, <128 x i8>* %5572, align 128, !tbaa !129
  %5574 = zext <128 x i8> %5573 to <128 x i32>
  %5575 = shufflevector <128 x i32> %5568, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5576 = shufflevector <128 x i32> %5574, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1287 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5575, <32 x i32> %5576) #11
  %ab.i1288 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1287, <32 x i32> %5575, <32 x i32> %5576) #11
  %5577 = shufflevector <128 x i32> %5568, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5578 = shufflevector <128 x i32> %5574, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1289 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5577, <32 x i32> %5578) #11
  %ab.i1290 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1289, <32 x i32> %5577, <32 x i32> %5578) #11
  %5579 = shufflevector <128 x i32> %5568, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5580 = shufflevector <128 x i32> %5574, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1291 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5579, <32 x i32> %5580) #11
  %ab.i1292 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1291, <32 x i32> %5579, <32 x i32> %5580) #11
  %5581 = shufflevector <128 x i32> %5568, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5582 = shufflevector <128 x i32> %5574, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1293 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5581, <32 x i32> %5582) #11
  %ab.i1294 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1293, <32 x i32> %5581, <32 x i32> %5582) #11
  %5583 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1290, <32 x i32> %ab.i1288)
  %5584 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1294, <32 x i32> %ab.i1292)
  %5585 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5561, <32 x i32> %5560)
  %5586 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5563, <32 x i32> %5562)
  %5587 = add nsw <64 x i32> %5585, %5583
  %5588 = add nsw <64 x i32> %5586, %5584
  %5589 = shufflevector <64 x i32> %5588, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5590 = shufflevector <64 x i32> %5587, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5591 = shufflevector <64 x i32> %5587, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5592 = shufflevector <64 x i32> %5588, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5593 = shufflevector <128 x i32> %5589, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5594 = load <32 x i32>, <32 x i32>* %4463, align 128, !tbaa !105
  %5595 = load <32 x i32>, <32 x i32>* %4465, align 128, !tbaa !105
  %5596 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5595, <32 x i32> %5594)
  %5597 = bitcast <64 x i32> %5596 to <128 x i16>
  %5598 = sext <128 x i16> %5597 to <128 x i32>
  %5599 = add i32 %5507, %t2478
  %5600 = shl nsw i32 %5599, 7
  %5601 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5600
  %5602 = bitcast i8* %5601 to <128 x i8>*
  %5603 = load <128 x i8>, <128 x i8>* %5602, align 128, !tbaa !129
  %5604 = zext <128 x i8> %5603 to <128 x i32>
  %5605 = shufflevector <128 x i32> %5598, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5606 = shufflevector <128 x i32> %5604, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1295 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5605, <32 x i32> %5606) #11
  %ab.i1296 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1295, <32 x i32> %5605, <32 x i32> %5606) #11
  %5607 = shufflevector <128 x i32> %5598, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5608 = shufflevector <128 x i32> %5604, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1297 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5607, <32 x i32> %5608) #11
  %ab.i1298 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1297, <32 x i32> %5607, <32 x i32> %5608) #11
  %5609 = shufflevector <128 x i32> %5598, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5610 = shufflevector <128 x i32> %5604, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1299 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5609, <32 x i32> %5610) #11
  %ab.i1300 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1299, <32 x i32> %5609, <32 x i32> %5610) #11
  %5611 = shufflevector <128 x i32> %5598, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5612 = shufflevector <128 x i32> %5604, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1301 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5611, <32 x i32> %5612) #11
  %ab.i1302 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1301, <32 x i32> %5611, <32 x i32> %5612) #11
  %5613 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1298, <32 x i32> %ab.i1296)
  %5614 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1302, <32 x i32> %ab.i1300)
  %5615 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5591, <32 x i32> %5590)
  %5616 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5593, <32 x i32> %5592)
  %5617 = add nsw <64 x i32> %5615, %5613
  %5618 = add nsw <64 x i32> %5616, %5614
  %5619 = shufflevector <64 x i32> %5618, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5620 = shufflevector <64 x i32> %5617, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5621 = shufflevector <64 x i32> %5617, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5622 = shufflevector <64 x i32> %5618, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5623 = shufflevector <128 x i32> %5619, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5624 = load <32 x i32>, <32 x i32>* %4467, align 128, !tbaa !105
  %5625 = load <32 x i32>, <32 x i32>* %4469, align 128, !tbaa !105
  %5626 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5625, <32 x i32> %5624)
  %5627 = bitcast <64 x i32> %5626 to <128 x i16>
  %5628 = sext <128 x i16> %5627 to <128 x i32>
  %5629 = add i32 %5444, %t2476
  %5630 = sub i32 %5629, %resampled_input.x.min_realized
  %5631 = shl nsw i32 %5630, 7
  %5632 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5631
  %5633 = bitcast i8* %5632 to <128 x i8>*
  %5634 = load <128 x i8>, <128 x i8>* %5633, align 128, !tbaa !129
  %5635 = zext <128 x i8> %5634 to <128 x i32>
  %5636 = shufflevector <128 x i32> %5628, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5637 = shufflevector <128 x i32> %5635, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1303 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5636, <32 x i32> %5637) #11
  %ab.i1304 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1303, <32 x i32> %5636, <32 x i32> %5637) #11
  %5638 = shufflevector <128 x i32> %5628, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5639 = shufflevector <128 x i32> %5635, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1305 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5638, <32 x i32> %5639) #11
  %ab.i1306 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1305, <32 x i32> %5638, <32 x i32> %5639) #11
  %5640 = shufflevector <128 x i32> %5628, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5641 = shufflevector <128 x i32> %5635, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1307 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5640, <32 x i32> %5641) #11
  %ab.i1308 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1307, <32 x i32> %5640, <32 x i32> %5641) #11
  %5642 = shufflevector <128 x i32> %5628, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5643 = shufflevector <128 x i32> %5635, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1309 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5642, <32 x i32> %5643) #11
  %ab.i1310 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1309, <32 x i32> %5642, <32 x i32> %5643) #11
  %5644 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1306, <32 x i32> %ab.i1304)
  %5645 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1310, <32 x i32> %ab.i1308)
  %5646 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5621, <32 x i32> %5620)
  %5647 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5623, <32 x i32> %5622)
  %5648 = add nsw <64 x i32> %5646, %5644
  %5649 = add nsw <64 x i32> %5647, %5645
  %5650 = shufflevector <64 x i32> %5649, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5651 = shufflevector <64 x i32> %5648, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5652 = shufflevector <64 x i32> %5648, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5653 = shufflevector <64 x i32> %5649, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5654 = shufflevector <128 x i32> %5650, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5655 = load <32 x i32>, <32 x i32>* %4471, align 128, !tbaa !105
  %5656 = load <32 x i32>, <32 x i32>* %4473, align 128, !tbaa !105
  %5657 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5656, <32 x i32> %5655)
  %5658 = bitcast <64 x i32> %5657 to <128 x i16>
  %5659 = sext <128 x i16> %5658 to <128 x i32>
  %5660 = add i32 %5476, %t2476
  %5661 = shl nsw i32 %5660, 7
  %5662 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5661
  %5663 = bitcast i8* %5662 to <128 x i8>*
  %5664 = load <128 x i8>, <128 x i8>* %5663, align 128, !tbaa !129
  %5665 = zext <128 x i8> %5664 to <128 x i32>
  %5666 = shufflevector <128 x i32> %5659, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5667 = shufflevector <128 x i32> %5665, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1311 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5666, <32 x i32> %5667) #11
  %ab.i1312 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1311, <32 x i32> %5666, <32 x i32> %5667) #11
  %5668 = shufflevector <128 x i32> %5659, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5669 = shufflevector <128 x i32> %5665, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1313 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5668, <32 x i32> %5669) #11
  %ab.i1314 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1313, <32 x i32> %5668, <32 x i32> %5669) #11
  %5670 = shufflevector <128 x i32> %5659, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5671 = shufflevector <128 x i32> %5665, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1315 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5670, <32 x i32> %5671) #11
  %ab.i1316 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1315, <32 x i32> %5670, <32 x i32> %5671) #11
  %5672 = shufflevector <128 x i32> %5659, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5673 = shufflevector <128 x i32> %5665, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1317 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5672, <32 x i32> %5673) #11
  %ab.i1318 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1317, <32 x i32> %5672, <32 x i32> %5673) #11
  %5674 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1314, <32 x i32> %ab.i1312)
  %5675 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1318, <32 x i32> %ab.i1316)
  %5676 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5652, <32 x i32> %5651)
  %5677 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5654, <32 x i32> %5653)
  %5678 = add nsw <64 x i32> %5676, %5674
  %5679 = add nsw <64 x i32> %5677, %5675
  %5680 = shufflevector <64 x i32> %5679, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5681 = shufflevector <64 x i32> %5678, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5682 = shufflevector <64 x i32> %5678, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5683 = shufflevector <64 x i32> %5679, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5684 = shufflevector <128 x i32> %5680, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5685 = load <32 x i32>, <32 x i32>* %4475, align 128, !tbaa !105
  %5686 = load <32 x i32>, <32 x i32>* %4477, align 128, !tbaa !105
  %5687 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5686, <32 x i32> %5685)
  %5688 = bitcast <64 x i32> %5687 to <128 x i16>
  %5689 = sext <128 x i16> %5688 to <128 x i32>
  %5690 = add i32 %5507, %t2476
  %5691 = shl nsw i32 %5690, 7
  %5692 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5691
  %5693 = bitcast i8* %5692 to <128 x i8>*
  %5694 = load <128 x i8>, <128 x i8>* %5693, align 128, !tbaa !129
  %5695 = zext <128 x i8> %5694 to <128 x i32>
  %5696 = shufflevector <128 x i32> %5689, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5697 = shufflevector <128 x i32> %5695, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1319 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5696, <32 x i32> %5697) #11
  %ab.i1320 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1319, <32 x i32> %5696, <32 x i32> %5697) #11
  %5698 = shufflevector <128 x i32> %5689, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5699 = shufflevector <128 x i32> %5695, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1321 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5698, <32 x i32> %5699) #11
  %ab.i1322 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1321, <32 x i32> %5698, <32 x i32> %5699) #11
  %5700 = shufflevector <128 x i32> %5689, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5701 = shufflevector <128 x i32> %5695, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1323 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5700, <32 x i32> %5701) #11
  %ab.i1324 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1323, <32 x i32> %5700, <32 x i32> %5701) #11
  %5702 = shufflevector <128 x i32> %5689, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5703 = shufflevector <128 x i32> %5695, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1325 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5702, <32 x i32> %5703) #11
  %ab.i1326 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1325, <32 x i32> %5702, <32 x i32> %5703) #11
  %5704 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1322, <32 x i32> %ab.i1320)
  %5705 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1326, <32 x i32> %ab.i1324)
  %5706 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5682, <32 x i32> %5681)
  %5707 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5684, <32 x i32> %5683)
  %5708 = add nsw <64 x i32> %5706, %5704
  %5709 = add nsw <64 x i32> %5707, %5705
  %5710 = shufflevector <64 x i32> %5709, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5711 = shufflevector <64 x i32> %5708, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5712 = shufflevector <64 x i32> %5708, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5713 = shufflevector <64 x i32> %5709, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5714 = shufflevector <128 x i32> %5710, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  br label %"consume convolved574"

next_bb567:                                       ; preds = %"for output.s0.x.xo561"
  %5715 = add nsw i32 %output.s0.x.xo563, %19
  br i1 %3778, label %"for convolved.s1.r19$y568.preheader", label %"consume convolved574", !prof !101

"for convolved.s1.r19$y568.preheader":            ; preds = %next_bb567
  %5716 = mul nsw i32 %5715, %stride_x
  %5717 = sub i32 %5716, %resampled_input.x.min_realized
  br i1 %3777, label %"for convolved.s1.r19$y568.us", label %"consume convolved574", !prof !101

"for convolved.s1.r19$y568.us":                   ; preds = %"for convolved.s1.r19$y568.preheader", %"end for convolved.s1.r19$x572.loopexit.us"
  %convolved616.sroa.84.4.us = phi <32 x i32> [ %.lcssa5595, %"end for convolved.s1.r19$x572.loopexit.us" ], [ %5424, %"for convolved.s1.r19$y568.preheader" ]
  %convolved616.sroa.56.4.us = phi <32 x i32> [ %.lcssa5596, %"end for convolved.s1.r19$x572.loopexit.us" ], [ %5423, %"for convolved.s1.r19$y568.preheader" ]
  %convolved616.sroa.28.4.us = phi <32 x i32> [ %.lcssa5597, %"end for convolved.s1.r19$x572.loopexit.us" ], [ %5422, %"for convolved.s1.r19$y568.preheader" ]
  %convolved616.sroa.0.4.us = phi <32 x i32> [ %.lcssa5598, %"end for convolved.s1.r19$x572.loopexit.us" ], [ %5421, %"for convolved.s1.r19$y568.preheader" ]
  %"convolved.s1.r19$y570.us" = phi i32 [ %5835, %"end for convolved.s1.r19$x572.loopexit.us" ], [ 0, %"for convolved.s1.r19$y568.preheader" ]
  %5718 = mul nsw i32 %"convolved.s1.r19$y570.us", %a88
  %5719 = add nsw i32 %5718, %5429
  %5720 = mul nsw i32 %5719, %4365
  %t2483.us = add nsw i32 %5717, %5720
  %5721 = mul nsw i32 %"convolved.s1.r19$y570.us", %4
  br i1 %4493, label %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x571.us"

"for convolved.s1.r19$x571.us":                   ; preds = %"for convolved.s1.r19$y568.us", %"for convolved.s1.r19$x571.us"
  %convolved616.sroa.84.5.us = phi <32 x i32> [ %5796, %"for convolved.s1.r19$x571.us" ], [ %convolved616.sroa.84.4.us, %"for convolved.s1.r19$y568.us" ]
  %convolved616.sroa.56.5.us = phi <32 x i32> [ %5795, %"for convolved.s1.r19$x571.us" ], [ %convolved616.sroa.56.4.us, %"for convolved.s1.r19$y568.us" ]
  %convolved616.sroa.28.5.us = phi <32 x i32> [ %5794, %"for convolved.s1.r19$x571.us" ], [ %convolved616.sroa.28.4.us, %"for convolved.s1.r19$y568.us" ]
  %convolved616.sroa.0.5.us = phi <32 x i32> [ %5793, %"for convolved.s1.r19$x571.us" ], [ %convolved616.sroa.0.4.us, %"for convolved.s1.r19$y568.us" ]
  %"convolved.s1.r19$x573.us" = phi i32 [ %5797, %"for convolved.s1.r19$x571.us" ], [ 0, %"for convolved.s1.r19$y568.us" ]
  %niter5625 = phi i32 [ %niter5625.nsub.1, %"for convolved.s1.r19$x571.us" ], [ %unroll_iter5624, %"for convolved.s1.r19$y568.us" ]
  %5722 = add nsw i32 %"convolved.s1.r19$x573.us", %5721
  %5723 = shl nsw i32 %5722, 7
  %5724 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %5723
  %5725 = bitcast i16* %5724 to <32 x i32>*
  %5726 = load <32 x i32>, <32 x i32>* %5725, align 128, !tbaa !105
  %5727 = getelementptr inbounds i16, i16* %5724, i32 64
  %5728 = bitcast i16* %5727 to <32 x i32>*
  %5729 = load <32 x i32>, <32 x i32>* %5728, align 128, !tbaa !105
  %5730 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5729, <32 x i32> %5726)
  %5731 = bitcast <64 x i32> %5730 to <128 x i16>
  %5732 = sext <128 x i16> %5731 to <128 x i32>
  %5733 = mul nsw i32 %"convolved.s1.r19$x573.us", %a93
  %5734 = add nsw i32 %t2483.us, %5733
  %5735 = shl nsw i32 %5734, 7
  %5736 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5735
  %5737 = bitcast i8* %5736 to <128 x i8>*
  %5738 = load <128 x i8>, <128 x i8>* %5737, align 128, !tbaa !129
  %5739 = zext <128 x i8> %5738 to <128 x i32>
  %5740 = shufflevector <128 x i32> %5732, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5741 = shufflevector <128 x i32> %5739, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1327.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5740, <32 x i32> %5741) #11
  %ab.i1328.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1327.us, <32 x i32> %5740, <32 x i32> %5741) #11
  %5742 = shufflevector <128 x i32> %5732, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5743 = shufflevector <128 x i32> %5739, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1329.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5742, <32 x i32> %5743) #11
  %ab.i1330.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1329.us, <32 x i32> %5742, <32 x i32> %5743) #11
  %5744 = shufflevector <128 x i32> %5732, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5745 = shufflevector <128 x i32> %5739, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1331.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5744, <32 x i32> %5745) #11
  %ab.i1332.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1331.us, <32 x i32> %5744, <32 x i32> %5745) #11
  %5746 = shufflevector <128 x i32> %5732, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5747 = shufflevector <128 x i32> %5739, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1333.us = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5746, <32 x i32> %5747) #11
  %ab.i1334.us = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1333.us, <32 x i32> %5746, <32 x i32> %5747) #11
  %5748 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1330.us, <32 x i32> %ab.i1328.us)
  %5749 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1334.us, <32 x i32> %ab.i1332.us)
  %5750 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.28.5.us, <32 x i32> %convolved616.sroa.0.5.us)
  %5751 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.84.5.us, <32 x i32> %convolved616.sroa.56.5.us)
  %5752 = add nsw <64 x i32> %5750, %5748
  %5753 = add nsw <64 x i32> %5751, %5749
  %5754 = shufflevector <64 x i32> %5753, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5755 = shufflevector <64 x i32> %5752, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5756 = shufflevector <64 x i32> %5752, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5757 = shufflevector <64 x i32> %5753, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5758 = shufflevector <128 x i32> %5754, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5759 = or i32 %"convolved.s1.r19$x573.us", 1
  %5760 = add nsw i32 %5759, %5721
  %5761 = shl nsw i32 %5760, 7
  %5762 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %5761
  %5763 = bitcast i16* %5762 to <32 x i32>*
  %5764 = load <32 x i32>, <32 x i32>* %5763, align 128, !tbaa !105
  %5765 = getelementptr inbounds i16, i16* %5762, i32 64
  %5766 = bitcast i16* %5765 to <32 x i32>*
  %5767 = load <32 x i32>, <32 x i32>* %5766, align 128, !tbaa !105
  %5768 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5767, <32 x i32> %5764)
  %5769 = bitcast <64 x i32> %5768 to <128 x i16>
  %5770 = sext <128 x i16> %5769 to <128 x i32>
  %5771 = mul nsw i32 %5759, %a93
  %5772 = add nsw i32 %t2483.us, %5771
  %5773 = shl nsw i32 %5772, 7
  %5774 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5773
  %5775 = bitcast i8* %5774 to <128 x i8>*
  %5776 = load <128 x i8>, <128 x i8>* %5775, align 128, !tbaa !129
  %5777 = zext <128 x i8> %5776 to <128 x i32>
  %5778 = shufflevector <128 x i32> %5770, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5779 = shufflevector <128 x i32> %5777, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1327.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5778, <32 x i32> %5779) #11
  %ab.i1328.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1327.us.1, <32 x i32> %5778, <32 x i32> %5779) #11
  %5780 = shufflevector <128 x i32> %5770, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5781 = shufflevector <128 x i32> %5777, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1329.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5780, <32 x i32> %5781) #11
  %ab.i1330.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1329.us.1, <32 x i32> %5780, <32 x i32> %5781) #11
  %5782 = shufflevector <128 x i32> %5770, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5783 = shufflevector <128 x i32> %5777, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1331.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5782, <32 x i32> %5783) #11
  %ab.i1332.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1331.us.1, <32 x i32> %5782, <32 x i32> %5783) #11
  %5784 = shufflevector <128 x i32> %5770, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5785 = shufflevector <128 x i32> %5777, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1333.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5784, <32 x i32> %5785) #11
  %ab.i1334.us.1 = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1333.us.1, <32 x i32> %5784, <32 x i32> %5785) #11
  %5786 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1330.us.1, <32 x i32> %ab.i1328.us.1)
  %5787 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1334.us.1, <32 x i32> %ab.i1332.us.1)
  %5788 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5756, <32 x i32> %5755)
  %5789 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5758, <32 x i32> %5757)
  %5790 = add nsw <64 x i32> %5788, %5786
  %5791 = add nsw <64 x i32> %5789, %5787
  %5792 = shufflevector <64 x i32> %5791, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5793 = shufflevector <64 x i32> %5790, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5794 = shufflevector <64 x i32> %5790, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5795 = shufflevector <64 x i32> %5791, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5796 = shufflevector <128 x i32> %5792, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5797 = add nuw nsw i32 %"convolved.s1.r19$x573.us", 2
  %niter5625.nsub.1 = add i32 %niter5625, -2
  %niter5625.ncmp.1 = icmp eq i32 %niter5625.nsub.1, 0
  br i1 %niter5625.ncmp.1, label %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x571.us"

"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa": ; preds = %"for convolved.s1.r19$x571.us", %"for convolved.s1.r19$y568.us"
  %.lcssa5598.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y568.us" ], [ %5793, %"for convolved.s1.r19$x571.us" ]
  %.lcssa5597.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y568.us" ], [ %5794, %"for convolved.s1.r19$x571.us" ]
  %.lcssa5596.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y568.us" ], [ %5795, %"for convolved.s1.r19$x571.us" ]
  %.lcssa5595.ph = phi <32 x i32> [ undef, %"for convolved.s1.r19$y568.us" ], [ %5796, %"for convolved.s1.r19$x571.us" ]
  %convolved616.sroa.84.5.us.unr = phi <32 x i32> [ %convolved616.sroa.84.4.us, %"for convolved.s1.r19$y568.us" ], [ %5796, %"for convolved.s1.r19$x571.us" ]
  %convolved616.sroa.56.5.us.unr = phi <32 x i32> [ %convolved616.sroa.56.4.us, %"for convolved.s1.r19$y568.us" ], [ %5795, %"for convolved.s1.r19$x571.us" ]
  %convolved616.sroa.28.5.us.unr = phi <32 x i32> [ %convolved616.sroa.28.4.us, %"for convolved.s1.r19$y568.us" ], [ %5794, %"for convolved.s1.r19$x571.us" ]
  %convolved616.sroa.0.5.us.unr = phi <32 x i32> [ %convolved616.sroa.0.4.us, %"for convolved.s1.r19$y568.us" ], [ %5793, %"for convolved.s1.r19$x571.us" ]
  %"convolved.s1.r19$x573.us.unr" = phi i32 [ 0, %"for convolved.s1.r19$y568.us" ], [ %5797, %"for convolved.s1.r19$x571.us" ]
  br i1 %lcmp.mod5623.not, label %"end for convolved.s1.r19$x572.loopexit.us", label %"for convolved.s1.r19$x571.us.epil"

"for convolved.s1.r19$x571.us.epil":              ; preds = %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa"
  %5798 = add nsw i32 %"convolved.s1.r19$x573.us.unr", %5721
  %5799 = shl nsw i32 %5798, 7
  %5800 = getelementptr inbounds i16, i16* %filter_zeroed110, i32 %5799
  %5801 = bitcast i16* %5800 to <32 x i32>*
  %5802 = load <32 x i32>, <32 x i32>* %5801, align 128, !tbaa !105
  %5803 = getelementptr inbounds i16, i16* %5800, i32 64
  %5804 = bitcast i16* %5803 to <32 x i32>*
  %5805 = load <32 x i32>, <32 x i32>* %5804, align 128, !tbaa !105
  %5806 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5805, <32 x i32> %5802)
  %5807 = bitcast <64 x i32> %5806 to <128 x i16>
  %5808 = sext <128 x i16> %5807 to <128 x i32>
  %5809 = mul nsw i32 %"convolved.s1.r19$x573.us.unr", %a93
  %5810 = add nsw i32 %t2483.us, %5809
  %5811 = shl nsw i32 %5810, 7
  %5812 = getelementptr inbounds i8, i8* %resampled_input156, i32 %5811
  %5813 = bitcast i8* %5812 to <128 x i8>*
  %5814 = load <128 x i8>, <128 x i8>* %5813, align 128, !tbaa !129
  %5815 = zext <128 x i8> %5814 to <128 x i32>
  %5816 = shufflevector <128 x i32> %5808, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5817 = shufflevector <128 x i32> %5815, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %ab1.i1327.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5816, <32 x i32> %5817) #11
  %ab.i1328.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1327.us.epil, <32 x i32> %5816, <32 x i32> %5817) #11
  %5818 = shufflevector <128 x i32> %5808, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5819 = shufflevector <128 x i32> %5815, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %ab1.i1329.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5818, <32 x i32> %5819) #11
  %ab.i1330.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1329.us.epil, <32 x i32> %5818, <32 x i32> %5819) #11
  %5820 = shufflevector <128 x i32> %5808, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5821 = shufflevector <128 x i32> %5815, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %ab1.i1331.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5820, <32 x i32> %5821) #11
  %ab.i1332.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1331.us.epil, <32 x i32> %5820, <32 x i32> %5821) #11
  %5822 = shufflevector <128 x i32> %5808, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5823 = shufflevector <128 x i32> %5815, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %ab1.i1333.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyieoh.128B(<32 x i32> %5822, <32 x i32> %5823) #11
  %ab.i1334.us.epil = call <32 x i32> @llvm.hexagon.V6.vmpyiewuh.acc.128B(<32 x i32> %ab1.i1333.us.epil, <32 x i32> %5822, <32 x i32> %5823) #11
  %5824 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1330.us.epil, <32 x i32> %ab.i1328.us.epil)
  %5825 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %ab.i1334.us.epil, <32 x i32> %ab.i1332.us.epil)
  %5826 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.28.5.us.unr, <32 x i32> %convolved616.sroa.0.5.us.unr)
  %5827 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.84.5.us.unr, <32 x i32> %convolved616.sroa.56.5.us.unr)
  %5828 = add nsw <64 x i32> %5826, %5824
  %5829 = add nsw <64 x i32> %5827, %5825
  %5830 = shufflevector <64 x i32> %5829, <64 x i32> poison, <128 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5831 = shufflevector <128 x i32> %5830, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5832 = shufflevector <64 x i32> %5829, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5833 = shufflevector <64 x i32> %5828, <64 x i32> poison, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5834 = shufflevector <64 x i32> %5828, <64 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %"end for convolved.s1.r19$x572.loopexit.us"

"end for convolved.s1.r19$x572.loopexit.us":      ; preds = %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x571.us.epil"
  %.lcssa5598 = phi <32 x i32> [ %.lcssa5598.ph, %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa" ], [ %5834, %"for convolved.s1.r19$x571.us.epil" ]
  %.lcssa5597 = phi <32 x i32> [ %.lcssa5597.ph, %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa" ], [ %5833, %"for convolved.s1.r19$x571.us.epil" ]
  %.lcssa5596 = phi <32 x i32> [ %.lcssa5596.ph, %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa" ], [ %5832, %"for convolved.s1.r19$x571.us.epil" ]
  %.lcssa5595 = phi <32 x i32> [ %.lcssa5595.ph, %"end for convolved.s1.r19$x572.loopexit.us.unr-lcssa" ], [ %5831, %"for convolved.s1.r19$x571.us.epil" ]
  %5835 = add nuw nsw i32 %"convolved.s1.r19$y570.us", 1
  %.not623.us = icmp eq i32 %5835, %6
  br i1 %.not623.us, label %"consume convolved574", label %"for convolved.s1.r19$y568.us"

"consume convolved574":                           ; preds = %"end for convolved.s1.r19$x572.loopexit.us", %next_bb567, %"for convolved.s1.r19$y568.preheader", %then_bb566
  %.pre-phi5442 = phi i32 [ %5443, %then_bb566 ], [ %5715, %"for convolved.s1.r19$y568.preheader" ], [ %5715, %next_bb567 ], [ %5715, %"end for convolved.s1.r19$x572.loopexit.us" ]
  %convolved616.sroa.84.7 = phi <32 x i32> [ %5714, %then_bb566 ], [ %5424, %"for convolved.s1.r19$y568.preheader" ], [ %5424, %next_bb567 ], [ %.lcssa5595, %"end for convolved.s1.r19$x572.loopexit.us" ]
  %convolved616.sroa.56.7 = phi <32 x i32> [ %5713, %then_bb566 ], [ %5423, %"for convolved.s1.r19$y568.preheader" ], [ %5423, %next_bb567 ], [ %.lcssa5596, %"end for convolved.s1.r19$x572.loopexit.us" ]
  %convolved616.sroa.28.7 = phi <32 x i32> [ %5712, %then_bb566 ], [ %5422, %"for convolved.s1.r19$y568.preheader" ], [ %5422, %next_bb567 ], [ %.lcssa5597, %"end for convolved.s1.r19$x572.loopexit.us" ]
  %convolved616.sroa.0.7 = phi <32 x i32> [ %5711, %then_bb566 ], [ %5421, %"for convolved.s1.r19$y568.preheader" ], [ %5421, %next_bb567 ], [ %.lcssa5598, %"end for convolved.s1.r19$x572.loopexit.us" ]
  %5836 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.28.7, <32 x i32> %convolved616.sroa.0.7)
  %5837 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %convolved616.sroa.84.7, <32 x i32> %convolved616.sroa.56.7)
  %5838 = shufflevector <64 x i32> %5836, <64 x i32> %5837, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5839 = sext <128 x i32> %5838 to <128 x i64>
  %5840 = mul nsw <128 x i64> %5839, %4480
  %5841 = ashr <128 x i64> %5840, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5842 = add nsw <128 x i64> %5841, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a99 = ashr <128 x i64> %5842, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5843 = icmp slt <128 x i64> %a99, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %a98 = select <128 x i1> %5843, <128 x i64> %a99, <128 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5844 = icmp sgt <128 x i64> %a98, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5845 = select <128 x i1> %5844, <128 x i64> %a98, <128 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5846 = trunc <128 x i64> %5845 to <128 x i32>
  %5847 = shufflevector <128 x i32> %5846, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5848 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5847, i32 %output_shift) #11
  %5849 = shufflevector <128 x i32> %5846, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5850 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5849, i32 %output_shift) #11
  %5851 = shufflevector <128 x i32> %5846, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5852 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5851, i32 %output_shift) #11
  %5853 = shufflevector <128 x i32> %5846, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5854 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5853, i32 %output_shift) #11
  %5855 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5850, <32 x i32> %5848)
  %5856 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5854, <32 x i32> %5852)
  %5857 = shufflevector <64 x i32> %5855, <64 x i32> %5856, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5858 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5847, i32 %4482) #11
  %5859 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5849, i32 %4482) #11
  %5860 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5851, i32 %4482) #11
  %5861 = call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %5853, i32 %4482) #11
  %5862 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5859, <32 x i32> %5858)
  %5863 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5861, <32 x i32> %5860)
  %5864 = shufflevector <64 x i32> %5862, <64 x i32> %5863, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5865 = and <128 x i32> %5864, %4481
  %5866 = add nsw <128 x i32> %5865, %5857
  %5867 = shufflevector <128 x i32> %5866, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5868 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5867, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %5869 = shufflevector <128 x i32> %5866, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %5870 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5869, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %5871 = shufflevector <128 x i32> %5866, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %5872 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5871, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %5873 = shufflevector <128 x i32> %5866, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5874 = call <32 x i32> @llvm.hexagon.V6.vminw.128B(<32 x i32> %5873, <32 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>) #11
  %5875 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %5868, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %5876 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %5870, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %5877 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %5872, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %5878 = call <32 x i32> @llvm.hexagon.V6.vmaxw.128B(<32 x i32> %5874, <32 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>) #11
  %5879 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5876, <32 x i32> %5875)
  %5880 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5878, <32 x i32> %5877)
  %5881 = shufflevector <64 x i32> %5879, <64 x i32> %5880, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %5882 = trunc <128 x i32> %5881 to <128 x i16>
  %5883 = bitcast <128 x i16> %5882 to <64 x i32>
  %5884 = call <64 x i32> @llvm.hexagon.V6.vaddhsat.dv.128B(<64 x i32> %5883, <64 x i32> %4486) #11
  %5885 = call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %5884)
  %5886 = call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %5884)
  %5887 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %5886, <32 x i32> %5432) #11
  %5888 = call <32 x i32> @llvm.hexagon.V6.vminh.128B(<32 x i32> %5885, <32 x i32> %5431) #11
  %5889 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %5887, <32 x i32> %5434) #11
  %5890 = call <32 x i32> @llvm.hexagon.V6.vmaxh.128B(<32 x i32> %5888, <32 x i32> %5433) #11
  %5891 = call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %5890, <32 x i32> %5889)
  %5892 = bitcast <64 x i32> %5891 to <128 x i16>
  %5893 = trunc <128 x i16> %5892 to <128 x i8>
  %5894 = bitcast <128 x i8> %5893 to <32 x i32>
  %5895 = call <32 x i32> @llvm.hexagon.V6.vminub.128B(<32 x i32> %5894, <32 x i32> %4489) #11
  %5896 = call <32 x i32> @llvm.hexagon.V6.vmaxub.128B(<32 x i32> %5895, <32 x i32> %4492) #11
  %5897 = bitcast <32 x i32> %5896 to <128 x i8>
  %5898 = mul nsw i32 %.pre-phi5442, %21
  %t2473 = add i32 %5435, %5898
  %5899 = sub i32 %t2473, %reass.add5206
  %5900 = getelementptr inbounds i8, i8* %17, i32 %5899
  %5901 = bitcast i8* %5900 to <128 x i8>*
  call void @llvm.masked.store.v128i8.p0v128i8(<128 x i8> %5897, <128 x i8>* %5901, i32 1, <128 x i1> %4123), !tbaa !199
  %5902 = add nuw nsw i32 %output.s0.x.xo563, 1
  %.not622 = icmp eq i32 %5902, %20
  br i1 %.not622, label %"end for output.s0.x.xo562", label %"for output.s0.x.xo561"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_hvx128_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = load i8*, i8** %3, align 4
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i32 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 4
  %9 = getelementptr i8*, i8** %0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i32 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 4
  %15 = getelementptr i8*, i8** %0, i32 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i32 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 4
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i32 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i32 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i32 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i32 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i32 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i32 12
  %44 = load i8*, i8** %43, align 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i32 13
  %47 = load i8*, i8** %46, align 4
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i32 14
  %50 = load i8*, i8** %49, align 4
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i32 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 4
  %55 = tail call i32 @depthwise_conv_hvx128(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #16
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_hvx128_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v64i16.p0v64i16(<64 x i16>, <64 x i16>*, i32 immarg, <64 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v32i32.p0v32i32(<32 x i32>, <32 x i32>*, i32 immarg, <32 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8 @llvm.vector.reduce.umax.v128i8(<128 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v128i8.p0v128i8(<128 x i8>, <128 x i8>*, i32 immarg, <128 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone willreturn }
attributes #14 = { nobuiltin nounwind "no-builtins" }
attributes #15 = { nobuiltin "no-builtins" }
attributes #16 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv66"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls,+hvxv66"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !12, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!19, !19, i64 0}
!19 = !{!"bool", !12, i64 0}
!20 = distinct !{!20, !17}
!21 = !{i8 0, i8 2}
!22 = !{!12, !12, i64 0}
!23 = distinct !{!23, !17}
!24 = !{!25, !25, i64 0}
!25 = !{!"double", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"long long", !12, i64 0}
!28 = distinct !{!28, !17}
!29 = distinct !{!29, !17}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = distinct !{!33, !17}
!34 = !{!35, !36, i64 0}
!35 = !{!"_ZTS13halide_type_t", !36, i64 0, !12, i64 1, !37, i64 2}
!36 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!37 = !{!"short", !12, i64 0}
!38 = !{!35, !12, i64 1}
!39 = !{!35, !37, i64 2}
!40 = !{!41, !27, i64 0}
!41 = !{!"_ZTS15halide_buffer_t", !27, i64 0, !11, i64 8, !11, i64 12, !27, i64 16, !35, i64 24, !15, i64 28, !11, i64 32, !11, i64 36}
!42 = !{!41, !11, i64 8}
!43 = !{!41, !11, i64 12}
!44 = !{!41, !27, i64 16}
!45 = !{!41, !15, i64 28}
!46 = !{!41, !11, i64 32}
!47 = !{!48, !15, i64 0}
!48 = !{!"_ZTS18halide_dimension_t", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!49 = !{!48, !15, i64 4}
!50 = !{!48, !15, i64 8}
!51 = distinct !{!51, !17}
!52 = !{!53, !11, i64 0}
!53 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 4}
!54 = distinct !{!54, !17}
!55 = !{!53, !11, i64 4}
!56 = distinct !{!56, !17}
!57 = !{!58, !27, i64 0}
!58 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !27, i64 0, !27, i64 8, !27, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !27, i64 408}
!59 = !{!58, !27, i64 8}
!60 = !{!58, !27, i64 408}
!61 = distinct !{!61, !17}
!62 = !{!58, !27, i64 16}
!63 = distinct !{!63, !32}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !17}
!66 = distinct !{!66, !32}
!67 = distinct !{!67, !17}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !17}
!70 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !26, i64 24, i64 128, !22, i64 152, i64 128, !22, i64 280, i64 128, !22, i64 408, i64 8, !26}
!71 = !{!72, !11, i64 60}
!72 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!73 = !{!74, !11, i64 24}
!74 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60}
!75 = !{!74, !11, i64 20}
!76 = !{!74, !11, i64 28}
!77 = !{!74, !11, i64 0}
!78 = !{!74, !11, i64 8}
!79 = !{!74, !11, i64 4}
!80 = !{!74, !11, i64 16}
!81 = !{!74, !11, i64 12}
!82 = !{!74, !11, i64 32}
!83 = !{!74, !11, i64 36}
!84 = distinct !{!84, !32}
!85 = distinct !{!85, !32}
!86 = distinct !{!86, !17}
!87 = distinct !{!87, !17}
!88 = !{!74, !11, i64 56}
!89 = !{!74, !11, i64 60}
!90 = !{!74, !11, i64 40}
!91 = !{!74, !11, i64 44}
!92 = !{!74, !11, i64 48}
!93 = !{!74, !11, i64 52}
!94 = !{i32 22, i32 33}
!95 = !{!96, !15, i64 4}
!96 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !15, i64 4, !15, i64 8}
!97 = !{!96, !11, i64 0}
!98 = !{!96, !15, i64 8}
!99 = !{!"branch_weights", i32 1, i32 2000}
!100 = !{!"branch_weights", i32 0, i32 1073741824}
!101 = !{!"branch_weights", i32 1073741824, i32 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"filter", !104, i64 0}
!104 = !{!"Halide buffer"}
!105 = !{!106, !106, i64 0}
!106 = !{!"filter_zeroed", !104, i64 0}
!107 = distinct !{!107, !32}
!108 = distinct !{!108, !32}
!109 = !{!110, !110, i64 0}
!110 = !{!"bias", !104, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"offset_c.width32.base0", !113, i64 0}
!113 = !{!"offset_c.width64.base0", !114, i64 0}
!114 = !{!"offset_c.width128.base0", !115, i64 0}
!115 = !{!"offset_c.width256.base0", !116, i64 0}
!116 = !{!"offset_c.width512.base0", !117, i64 0}
!117 = !{!"offset_c.width1024.base0", !118, i64 0}
!118 = !{!"offset_c", !104, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"offset_c.width32.base32", !113, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"offset_c.width32.base64", !123, i64 0}
!123 = !{!"offset_c.width64.base64", !114, i64 0}
!124 = !{!125, !125, i64 0}
!125 = !{!"offset_c.width32.base96", !123, i64 0}
!126 = !{!"branch_weights", i32 0, i32 -2147483648}
!127 = !{!128, !128, i64 0}
!128 = !{!"input", !104, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"resampled_input", !104, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"convolved.width32.base0", !133, i64 0}
!133 = !{!"convolved.width64.base0", !134, i64 0}
!134 = !{!"convolved.width128.base0", !135, i64 0}
!135 = !{!"convolved.width256.base0", !136, i64 0}
!136 = !{!"convolved.width512.base0", !137, i64 0}
!137 = !{!"convolved.width1024.base0", !138, i64 0}
!138 = !{!"convolved", !104, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"convolved.width32.base32", !133, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"convolved.width32.base64", !143, i64 0}
!143 = !{!"convolved.width64.base64", !134, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"convolved.width32.base96", !143, i64 0}
!146 = !{!147, !147, i64 0}
!147 = !{!"convolved.width32.base128", !148, i64 0}
!148 = !{!"convolved.width64.base128", !149, i64 0}
!149 = !{!"convolved.width128.base128", !135, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"convolved.width32.base160", !148, i64 0}
!152 = !{!153, !153, i64 0}
!153 = !{!"convolved.width32.base192", !154, i64 0}
!154 = !{!"convolved.width64.base192", !149, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"convolved.width32.base224", !154, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"convolved.width32.base256", !159, i64 0}
!159 = !{!"convolved.width64.base256", !160, i64 0}
!160 = !{!"convolved.width128.base256", !161, i64 0}
!161 = !{!"convolved.width256.base256", !136, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"convolved.width32.base288", !159, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"convolved.width32.base320", !166, i64 0}
!166 = !{!"convolved.width64.base320", !160, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"convolved.width32.base352", !166, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"convolved.width32.base384", !171, i64 0}
!171 = !{!"convolved.width64.base384", !172, i64 0}
!172 = !{!"convolved.width128.base384", !161, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"convolved.width32.base416", !171, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"convolved.width32.base448", !177, i64 0}
!177 = !{!"convolved.width64.base448", !172, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"convolved.width32.base480", !177, i64 0}
!180 = !{!181, !181, i64 0}
!181 = !{!"filter_zeroed.width64.base0", !182, i64 0}
!182 = !{!"filter_zeroed.width128.base0", !183, i64 0}
!183 = !{!"filter_zeroed.width256.base0", !184, i64 0}
!184 = !{!"filter_zeroed.width512.base0", !185, i64 0}
!185 = !{!"filter_zeroed.width1024.base0", !106, i64 0}
!186 = !{!187, !187, i64 0}
!187 = !{!"filter_zeroed.width64.base64", !182, i64 0}
!188 = !{!189, !189, i64 0}
!189 = !{!"filter_zeroed.width64.base128", !190, i64 0}
!190 = !{!"filter_zeroed.width128.base128", !183, i64 0}
!191 = !{!192, !192, i64 0}
!192 = !{!"filter_zeroed.width64.base192", !190, i64 0}
!193 = !{!194, !194, i64 0}
!194 = !{!"filter_zeroed.width64.base256", !195, i64 0}
!195 = !{!"filter_zeroed.width128.base256", !196, i64 0}
!196 = !{!"filter_zeroed.width256.base256", !184, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"filter_zeroed.width64.base320", !195, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"output", !104, i64 0}
!201 = distinct !{!201, !32}
!202 = distinct !{!202, !32}
!203 = distinct !{!203, !32}
!204 = distinct !{!204, !32}
!205 = distinct !{!205, !32}
!206 = !{!"branch_weights", i32 -2147483648, i32 0}
!207 = distinct !{!207, !32}
!208 = distinct !{!208, !32}
!209 = !{!210, !210, i64 0}
!210 = !{!"bias.width32.base0", !211, i64 0}
!211 = !{!"bias.width64.base0", !212, i64 0}
!212 = !{!"bias.width128.base0", !213, i64 0}
!213 = !{!"bias.width256.base0", !214, i64 0}
!214 = !{!"bias.width512.base0", !215, i64 0}
!215 = !{!"bias.width1024.base0", !110, i64 0}
!216 = !{!217, !217, i64 0}
!217 = !{!"bias.width32.base32", !211, i64 0}
!218 = !{!219, !219, i64 0}
!219 = !{!"bias.width32.base64", !220, i64 0}
!220 = !{!"bias.width64.base64", !212, i64 0}
!221 = !{!222, !222, i64 0}
!222 = !{!"bias.width32.base96", !220, i64 0}
